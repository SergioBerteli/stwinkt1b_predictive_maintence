
STWIN_DATALOG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015250  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08015410  08015410  00016410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158f8  080158f8  000174d0  2**0
                  CONTENTS
  4 .ARM          00000008  080158f8  080158f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015900  08015900  000174d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015900  08015900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08015908  08015908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d0  20000000  08015910  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006484  200004d0  08015de0  000174d0  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  20006954  08015de0  00017954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000174d0  2**0
                  CONTENTS, READONLY
 12 .debug_line   0008277f  00000000  00000000  00017500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000011a  00000000  00000000  00099c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000b0981  00000000  00000000  00099d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000d8d3  00000000  00000000  0014a71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004da8  00000000  00000000  00157ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001704e5  00000000  00000000  0015cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000b4c0  00000000  00000000  002cd27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0005ec94  00000000  00000000  002d873d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00042013  00000000  00000000  003373d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  003793e4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00011b1c  00000000  00000000  00379428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200004d0 	.word	0x200004d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080153f4 	.word	0x080153f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200004d4 	.word	0x200004d4
 80001fc:	080153f4 	.word	0x080153f4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ecc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ede:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ee6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <LoopForever+0x16>)
	cmp	r2, r3
 8000eee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef2:	f006 f93b 	bl	800716c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f012 fbb5 	bl	8013664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f000 f97d 	bl	80011f8 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f00:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000f04:	08015910 	.word	0x08015910
	ldr	r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f0c:	200004d0 	.word	0x200004d0
	ldr	r2, =_sbss
 8000f10:	200004d0 	.word	0x200004d0
	ldr	r3, = _ebss
 8000f14:	20006954 	.word	0x20006954

08000f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_IRQHandler>
	...

08000f1c <_sbrk>:
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 8000f1c:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <_sbrk+0x38>)
{
 8000f1e:	b508      	push	{r3, lr}
 8000f20:	4603      	mov	r3, r0
	if (heap_end == 0)
 8000f22:	6808      	ldr	r0, [r1, #0]
 8000f24:	b158      	cbz	r0, 8000f3e <_sbrk+0x22>

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000f26:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000f2a:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000f2c:	f8d2 2d08 	ldr.w	r2, [r2, #3336]	@ 0xd08
 8000f30:	6812      	ldr	r2, [r2, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8000f32:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d804      	bhi.n	8000f44 <_sbrk+0x28>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000f3a:	600b      	str	r3, [r1, #0]

	return (caddr_t) prev_heap_end;
}
 8000f3c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <_sbrk+0x3c>)
 8000f40:	6008      	str	r0, [r1, #0]
 8000f42:	e7f0      	b.n	8000f26 <_sbrk+0xa>
		errno = ENOMEM;
 8000f44:	f012 fb88 	bl	8013658 <__errno>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f50:	bd08      	pop	{r3, pc}
 8000f52:	bf00      	nop
 8000f54:	200004ec 	.word	0x200004ec
 8000f58:	20006958 	.word	0x20006958

08000f5c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <_kill>:

int _kill(int pid, int sig)
{
 8000f60:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f62:	f012 fb79 	bl	8013658 <__errno>
 8000f66:	2316      	movs	r3, #22
 8000f68:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6e:	bd08      	pop	{r3, pc}

08000f70 <_exit>:

void _exit (int status)
{
 8000f70:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f72:	f012 fb71 	bl	8013658 <__errno>
 8000f76:	2316      	movs	r3, #22
 8000f78:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8000f7a:	e7fe      	b.n	8000f7a <_exit+0xa>

08000f7c <_write>:
}

int _write(int file, char *ptr, int len)
{
 8000f7c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	1e16      	subs	r6, r2, #0
 8000f80:	dd07      	ble.n	8000f92 <_write+0x16>
 8000f82:	460c      	mov	r4, r1
 8000f84:	198d      	adds	r5, r1, r6
		{
		   __io_putchar( *ptr++ );
 8000f86:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000f8a:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d1f9      	bne.n	8000f86 <_write+0xa>
		}
	return len;
}
 8000f92:	4630      	mov	r0, r6
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	bf00      	nop

08000f98 <_close>:

int _close(int file)
{
	return -1;
}
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa4:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000fac:	2001      	movs	r0, #1
 8000fae:	4770      	bx	lr

08000fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <_read>:

int _read(int file, char *ptr, int len)
{
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	460c      	mov	r4, r1
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	7020      	strb	r0, [r4, #0]
	return 1;
}
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	bf00      	nop

08000fc4 <DATALOG_SD_Init>:
  * @brief  Start SD-Card demo
  * @param  None
  * @retval None
  */
void DATALOG_SD_Init(void)
{
 8000fc4:	b508      	push	{r3, lr}
  BSP_SD_Detect_Init();
 8000fc6:	f006 f803 	bl	8006fd0 <BSP_SD_Detect_Init>

      
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000fca:	490d      	ldr	r1, [pc, #52]	@ (8001000 <DATALOG_SD_Init+0x3c>)
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <DATALOG_SD_Init+0x40>)
 8000fce:	f00f f911 	bl	80101f4 <FATFS_LinkDriver>
 8000fd2:	b100      	cbz	r0, 8000fd6 <DATALOG_SD_Init+0x12>
        BSP_LED_Off(LED1);
        HAL_Delay(100);
      }
    }
  }
}
 8000fd4:	bd08      	pop	{r3, pc}
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8000fd6:	490a      	ldr	r1, [pc, #40]	@ (8001000 <DATALOG_SD_Init+0x3c>)
 8000fd8:	4602      	mov	r2, r0
 8000fda:	1d08      	adds	r0, r1, #4
 8000fdc:	f00f f8c6 	bl	801016c <f_mount>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d0f7      	beq.n	8000fd4 <DATALOG_SD_Init+0x10>
        BSP_LED_On(LED1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f004 fcb1 	bl	800594c <BSP_LED_On>
        HAL_Delay(500);
 8000fea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fee:	f006 f92d 	bl	800724c <HAL_Delay>
        BSP_LED_Off(LED1);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f004 fcb8 	bl	8005968 <BSP_LED_Off>
        HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	@ 0x64
 8000ffa:	f006 f927 	bl	800724c <HAL_Delay>
      while(1)
 8000ffe:	e7f1      	b.n	8000fe4 <DATALOG_SD_Init+0x20>
 8001000:	200004f0 	.word	0x200004f0
 8001004:	080154f0 	.word	0x080154f0

08001008 <MX_X_CUBE_MEMS1_Init>:
}



void MX_X_CUBE_MEMS1_Init(void)
{
 8001008:	b508      	push	{r3, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
  * @retval None
  */
void MX_DataLogTerminal_Init(void)
{
  BSP_MOTION_SENSOR_Init(IIS2MDC_0, MOTION_MAGNETO);
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_ODR);
 800100e:	ed9f 8a22 	vldr	s16, [pc, #136]	@ 8001098 <MX_X_CUBE_MEMS1_Init+0x90>
  Sensor_IO_SPI_CS_Init_All();
 8001012:	f004 fcb7 	bl	8005984 <Sensor_IO_SPI_CS_Init_All>
  BSP_MOTION_SENSOR_Init(IIS2MDC_0, MOTION_MAGNETO);
 8001016:	2104      	movs	r1, #4
 8001018:	2001      	movs	r0, #1
 800101a:	f005 fcb9 	bl	8006990 <BSP_MOTION_SENSOR_Init>
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_ODR);
 800101e:	eeb0 0a48 	vmov.f32	s0, s16
 8001022:	2104      	movs	r1, #4
 8001024:	2001      	movs	r0, #1
 8001026:	f005 ff7d 	bl	8006f24 <BSP_MOTION_SENSOR_SetOutputDataRate>
  BSP_MOTION_SENSOR_SetFullScale(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_FS);
 800102a:	2232      	movs	r2, #50	@ 0x32
 800102c:	2104      	movs	r1, #4
 800102e:	2001      	movs	r0, #1
 8001030:	f005 ffa2 	bl	8006f78 <BSP_MOTION_SENSOR_SetFullScale>

  // iis3dwb
  BSP_MOTION_SENSOR_Init(IIS3DWB_0, MOTION_ACCELERO);
 8001034:	2102      	movs	r1, #2
 8001036:	4608      	mov	r0, r1
 8001038:	f005 fcaa 	bl	8006990 <BSP_MOTION_SENSOR_Init>
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS3DWB_0, MOTION_ACCELERO, IIS3DWB_ACC_ODR);
 800103c:	2102      	movs	r1, #2
 800103e:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800109c <MX_X_CUBE_MEMS1_Init+0x94>
 8001042:	4608      	mov	r0, r1
 8001044:	f005 ff6e 	bl	8006f24 <BSP_MOTION_SENSOR_SetOutputDataRate>
  BSP_MOTION_SENSOR_SetFullScale(IIS3DWB_0, MOTION_ACCELERO, IIS3DWB_ACC_FS);
 8001048:	2202      	movs	r2, #2
 800104a:	4611      	mov	r1, r2
 800104c:	4610      	mov	r0, r2
 800104e:	f005 ff93 	bl	8006f78 <BSP_MOTION_SENSOR_SetFullScale>
  BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DHCX_0, MOTION_GYRO, ISM330DHC_GYRO_ODR);
  BSP_MOTION_SENSOR_SetFullScale(ISM330DHCX_0, MOTION_GYRO, ISM330DHC_GYRO_FS);
  
#endif
  
  BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY);
 8001052:	2104      	movs	r1, #4
 8001054:	2000      	movs	r0, #0
 8001056:	f005 f815 	bl	8006084 <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_SetOutputDataRate(HTS221_0, ENV_HUMIDITY, HTS221_ODR);
 800105a:	eeb2 0a09 	vmov.f32	s0, #41	@ 0x41480000  12.5
 800105e:	2104      	movs	r1, #4
 8001060:	2000      	movs	r0, #0
 8001062:	f005 fa6d 	bl	8006540 <BSP_ENV_SENSOR_SetOutputDataRate>
 
  BSP_ENV_SENSOR_Init(LPS22HH_0, ENV_PRESSURE);
 8001066:	2102      	movs	r1, #2
 8001068:	2001      	movs	r0, #1
 800106a:	f005 f80b 	bl	8006084 <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_SetOutputDataRate(LPS22HH_0, ENV_PRESSURE, LPS22HH_ODR);
 800106e:	eeb0 0a48 	vmov.f32	s0, s16
 8001072:	2102      	movs	r1, #2
 8001074:	2001      	movs	r0, #1
 8001076:	f005 fa63 	bl	8006540 <BSP_ENV_SENSOR_SetOutputDataRate>
  
  BSP_ENV_SENSOR_Init(STTS751_0, ENV_TEMPERATURE);
 800107a:	2101      	movs	r1, #1
 800107c:	2002      	movs	r0, #2
 800107e:	f005 f801 	bl	8006084 <BSP_ENV_SENSOR_Init>
}
 8001082:	ecbd 8b02 	vpop	{d8}
  BSP_ENV_SENSOR_SetOutputDataRate(STTS751_0, ENV_TEMPERATURE, STTS751_ODR);
 8001086:	eeb3 0a00 	vmov.f32	s0, #48	@ 0x41800000  16.0
}
 800108a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_ENV_SENSOR_SetOutputDataRate(STTS751_0, ENV_TEMPERATURE, STTS751_ODR);
 800108e:	2101      	movs	r1, #1
 8001090:	2002      	movs	r0, #2
 8001092:	f005 ba55 	b.w	8006540 <BSP_ENV_SENSOR_SetOutputDataRate>
 8001096:	bf00      	nop
 8001098:	42480000 	.word	0x42480000
 800109c:	45d05800 	.word	0x45d05800

080010a0 <dataTimer_Callback>:

}

void dataTimer_Callback(void const *arg)
{ 
  osSemaphoreRelease(readDataSem_id);
 80010a0:	4b01      	ldr	r3, [pc, #4]	@ (80010a8 <dataTimer_Callback+0x8>)
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	f00f ba32 	b.w	801050c <osSemaphoreRelease>
 80010a8:	20000968 	.word	0x20000968

080010ac <MX_USB_DEVICE_Init>:
{
 80010ac:	b510      	push	{r4, lr}
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80010ae:	4c09      	ldr	r4, [pc, #36]	@ (80010d4 <MX_USB_DEVICE_Init+0x28>)
 80010b0:	4909      	ldr	r1, [pc, #36]	@ (80010d8 <MX_USB_DEVICE_Init+0x2c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	4620      	mov	r0, r4
 80010b6:	f00e f9b5 	bl	800f424 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80010ba:	4908      	ldr	r1, [pc, #32]	@ (80010dc <MX_USB_DEVICE_Init+0x30>)
 80010bc:	4620      	mov	r0, r4
 80010be:	f00e f9c5 	bl	800f44c <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80010c2:	4620      	mov	r0, r4
 80010c4:	4906      	ldr	r1, [pc, #24]	@ (80010e0 <MX_USB_DEVICE_Init+0x34>)
 80010c6:	f00e f977 	bl	800f3b8 <USBD_CDC_RegisterInterface>
  USBD_Start(&hUsbDeviceFS);
 80010ca:	4620      	mov	r0, r4
}
 80010cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80010d0:	f00e b9d2 	b.w	800f478 <USBD_Start>
 80010d4:	2000096c 	.word	0x2000096c
 80010d8:	20000038 	.word	0x20000038
 80010dc:	200002c4 	.word	0x200002c4
 80010e0:	20000000 	.word	0x20000000

080010e4 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == SD_DETECT_GPIO_PIN)
 80010e4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80010e8:	d015      	beq.n	8001116 <HAL_GPIO_EXTI_Callback+0x32>
  if(GPIO_Pin == USER_BUTTON_PIN)
 80010ea:	2801      	cmp	r0, #1
{
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4604      	mov	r4, r0
  if(GPIO_Pin == USER_BUTTON_PIN)
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_EXTI_Callback+0x36>
  if (GPIO_Pin == GPIO_PIN_10)
 80010f2:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 80010f6:	d000      	beq.n	80010fa <HAL_GPIO_EXTI_Callback+0x16>
}
 80010f8:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_GetTick() - t_stwin > 4000)
 80010fa:	f006 f8a1 	bl	8007240 <HAL_GetTick>
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001100:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8001104:	1ac0      	subs	r0, r0, r3
 8001106:	f5b0 6f7a 	cmp.w	r0, #4000	@ 0xfa0
 800110a:	d9f5      	bls.n	80010f8 <HAL_GPIO_EXTI_Callback+0x14>
}
 800110c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8001110:	2017      	movs	r0, #23
 8001112:	f004 bc9b 	b.w	8005a4c <BSP_BC_CmdSend>
      BSP_SD_DetectCallback();
 8001116:	f005 bf7f 	b.w	8007018 <BSP_SD_DetectCallback>
    if( HAL_GetTick() - t_old > 1000 )
 800111a:	4d09      	ldr	r5, [pc, #36]	@ (8001140 <HAL_GPIO_EXTI_Callback+0x5c>)
 800111c:	f006 f890 	bl	8007240 <HAL_GetTick>
 8001120:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 8001124:	1ac0      	subs	r0, r0, r3
 8001126:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800112a:	d9e5      	bls.n	80010f8 <HAL_GPIO_EXTI_Callback+0x14>
      osSemaphoreRelease(readDataSem_id);
 800112c:	6828      	ldr	r0, [r5, #0]
      MEMSInterrupt=1;
 800112e:	f885 42d8 	strb.w	r4, [r5, #728]	@ 0x2d8
      osSemaphoreRelease(readDataSem_id);
 8001132:	f00f f9eb 	bl	801050c <osSemaphoreRelease>
      t_old= HAL_GetTick();
 8001136:	f006 f883 	bl	8007240 <HAL_GetTick>
 800113a:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
}
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	20000968 	.word	0x20000968

08001144 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == STBC02_USED_TIM)
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001146:	6802      	ldr	r2, [r0, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d000      	beq.n	800114e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 800114c:	4770      	bx	lr
    BC_CmdMng();
 800114e:	f004 bcff 	b.w	8005b50 <BC_CmdMng>
 8001152:	bf00      	nop
 8001154:	40001400 	.word	0x40001400

08001158 <SystemClock_Config>:
{
 8001158:	b530      	push	{r4, r5, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800115a:	2000      	movs	r0, #0
{
 800115c:	b0c1      	sub	sp, #260	@ 0x104
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800115e:	f008 f927 	bl	80093b0 <HAL_PWREx_ControlVoltageScaling>
 8001162:	b100      	cbz	r0, 8001166 <SystemClock_Config+0xe>
    while(1);
 8001164:	e7fe      	b.n	8001164 <SystemClock_Config+0xc>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001166:	2021      	movs	r0, #33	@ 0x21
 8001168:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800116c:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001170:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001174:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001178:	221e      	movs	r2, #30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800117a:	2505      	movs	r5, #5
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001182:	e9cd 3212 	strd	r3, r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001186:	e9cd 5314 	strd	r5, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800118a:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f008 fa26 	bl	80095dc <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	b100      	cbz	r0, 8001196 <SystemClock_Config+0x3e>
 8001194:	e7fe      	b.n	8001194 <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001198:	4629      	mov	r1, r5
 800119a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119c:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a2:	e9cd 2401 	strd	r2, r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a6:	f008 fd2f 	bl	8009c08 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b100      	cbz	r0, 80011b0 <SystemClock_Config+0x58>
 80011ae:	e7fe      	b.n	80011ae <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_SDMMC1;
 80011b0:	490f      	ldr	r1, [pc, #60]	@ (80011f0 <SystemClock_Config+0x98>)
 80011b2:	9118      	str	r1, [sp, #96]	@ 0x60
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80011b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	a818      	add	r0, sp, #96	@ 0x60
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80011ba:	e9cd 3235 	strd	r3, r2, [sp, #212]	@ 0xd4
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011be:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f009 f80a 	bl	800a1d8 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4604      	mov	r4, r0
 80011c6:	b100      	cbz	r0, 80011ca <SystemClock_Config+0x72>
 80011c8:	e7fe      	b.n	80011c8 <SystemClock_Config+0x70>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80011ca:	f008 fe29 	bl	8009e20 <HAL_RCC_GetHCLKFreq>
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <SystemClock_Config+0x9c>)
 80011d0:	fba3 3000 	umull	r3, r0, r3, r0
 80011d4:	0980      	lsrs	r0, r0, #6
 80011d6:	f006 fd99 	bl	8007d0c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011da:	2004      	movs	r0, #4
 80011dc:	f006 fdb0 	bl	8007d40 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011e0:	4622      	mov	r2, r4
 80011e2:	4621      	mov	r1, r4
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f006 fd46 	bl	8007c78 <HAL_NVIC_SetPriority>
}
 80011ec:	b041      	add	sp, #260	@ 0x104
 80011ee:	bd30      	pop	{r4, r5, pc}
 80011f0:	00082080 	.word	0x00082080
 80011f4:	10624dd3 	.word	0x10624dd3

080011f8 <main>:
{
 80011f8:	b500      	push	{lr}
 80011fa:	b087      	sub	sp, #28
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4c39      	ldr	r4, [pc, #228]	@ (80012e4 <main+0xec>)
  HAL_Init();
 80011fe:	f006 f803 	bl	8007208 <HAL_Init>
  SystemClock_Config();  
 8001202:	f7ff ffa9 	bl	8001158 <SystemClock_Config>
  huart2.Instance = USART2;
 8001206:	4838      	ldr	r0, [pc, #224]	@ (80012e8 <main+0xf0>)
  huart2.Init.BaudRate = 115200;
 8001208:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120c:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 800120e:	e9c4 01b8 	strd	r0, r1, [r4, #736]	@ 0x2e0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001212:	220c      	movs	r2, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001214:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001218:	e9c4 33ba 	strd	r3, r3, [r4, #744]	@ 0x2e8
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	e9c4 32bc 	strd	r3, r2, [r4, #752]	@ 0x2f0
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	e9c4 33be 	strd	r3, r3, [r4, #760]	@ 0x2f8
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001224:	e9c4 33c0 	strd	r3, r3, [r4, #768]	@ 0x300
 8001228:	f8c4 3308 	str.w	r3, [r4, #776]	@ 0x308
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122c:	f00b fe6e 	bl	800cf0c <HAL_UART_Init>
 8001230:	b100      	cbz	r0, 8001234 <main+0x3c>
 8001232:	e7fe      	b.n	8001232 <main+0x3a>
  {
	  _Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001234:	4601      	mov	r1, r0
 8001236:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 800123a:	f00b ffb3 	bl	800d1a4 <HAL_UARTEx_SetTxFifoThreshold>
 800123e:	b100      	cbz	r0, 8001242 <main+0x4a>
 8001240:	e7fe      	b.n	8001240 <main+0x48>
  {
	  _Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	4601      	mov	r1, r0
 8001244:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 8001248:	f00b ffea 	bl	800d220 <HAL_UARTEx_SetRxFifoThreshold>
 800124c:	b100      	cbz	r0, 8001250 <main+0x58>
 800124e:	e7fe      	b.n	800124e <main+0x56>
  {
	  _Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001250:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 8001254:	f00b ff88 	bl	800d168 <HAL_UARTEx_DisableFifoMode>
 8001258:	4605      	mov	r5, r0
 800125a:	2800      	cmp	r0, #0
 800125c:	d13d      	bne.n	80012da <main+0xe2>
    HAL_PWREx_EnableVddIO2();
 800125e:	f008 f921 	bl	80094a4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <main+0xf4>)
 8001264:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001266:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800126a:	659a      	str	r2, [r3, #88]	@ 0x58
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddUSB(); 
 8001276:	f008 f90d 	bl	8009494 <HAL_PWREx_EnableVddUSB>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800127a:	2101      	movs	r1, #1
 800127c:	4628      	mov	r0, r5
 800127e:	f004 fb01 	bl	8005884 <BSP_PB_Init>
  BSP_LED_Init(LED1);
 8001282:	4628      	mov	r0, r5
 8001284:	f004 fb34 	bl	80058f0 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8001288:	4628      	mov	r0, r5
 800128a:	f004 fb6d 	bl	8005968 <BSP_LED_Off>
  BSP_PB_PWR_Init();  
 800128e:	f004 faa7 	bl	80057e0 <BSP_PB_PWR_Init>
  BSP_Enable_DCDC2();
 8001292:	f004 fad1 	bl	8005838 <BSP_Enable_DCDC2>
  BSP_BC_Init();
 8001296:	f004 fd2d 	bl	8005cf4 <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 800129a:	f004 fbfb 	bl	8005a94 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);
 800129e:	200a      	movs	r0, #10
 80012a0:	f004 fbd4 	bl	8005a4c <BSP_BC_CmdSend>
  t_stwin = HAL_GetTick(); 
 80012a4:	f005 ffcc 	bl	8007240 <HAL_GetTick>
  if(LoggingInterface == USB_Datalog) /* Configure the USB */
 80012a8:	f894 2370 	ldrb.w	r2, [r4, #880]	@ 0x370
  t_stwin = HAL_GetTick(); 
 80012ac:	f8c4 02dc 	str.w	r0, [r4, #732]	@ 0x2dc
  if(LoggingInterface == USB_Datalog) /* Configure the USB */
 80012b0:	b9a2      	cbnz	r2, 80012dc <main+0xe4>
    MX_USB_DEVICE_Init();
 80012b2:	f7ff fefb 	bl	80010ac <MX_USB_DEVICE_Init>
  osThreadDef(MAIN, Main_Thread, osPriorityNormal, 0, 128);
 80012b6:	4d0e      	ldr	r5, [pc, #56]	@ (80012f0 <main+0xf8>)
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	f10d 0c04 	add.w	ip, sp, #4
 80012be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	f8cc 3000 	str.w	r3, [ip]
  MainThreadId = osThreadCreate(osThread(MAIN), NULL);
 80012c8:	2100      	movs	r1, #0
 80012ca:	a801      	add	r0, sp, #4
 80012cc:	f00f f880 	bl	80103d0 <osThreadCreate>
 80012d0:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
  osKernelStart();
 80012d4:	f00f f876 	bl	80103c4 <osKernelStart>
  while(1);  
 80012d8:	e7fe      	b.n	80012d8 <main+0xe0>
 80012da:	e7fe      	b.n	80012da <main+0xe2>
    DATALOG_SD_Init();
 80012dc:	f7ff fe72 	bl	8000fc4 <DATALOG_SD_Init>
 80012e0:	e7e9      	b.n	80012b6 <main+0xbe>
 80012e2:	bf00      	nop
 80012e4:	20000968 	.word	0x20000968
 80012e8:	40004400 	.word	0x40004400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	08015410 	.word	0x08015410

080012f4 <dataTimerStart>:
{
 80012f4:	b510      	push	{r4, lr}
  exec = 1;
 80012f6:	4c09      	ldr	r4, [pc, #36]	@ (800131c <dataTimerStart+0x28>)
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <dataTimerStart+0x2c>)
  exec = 1;
 80012fa:	2101      	movs	r1, #1
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 80012fc:	f504 725e 	add.w	r2, r4, #888	@ 0x378
  exec = 1;
 8001300:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 8001304:	f00f f880 	bl	8010408 <osTimerCreate>
 8001308:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
  if (sensorTimId)  {
 800130c:	b120      	cbz	r0, 8001318 <dataTimerStart+0x24>
}
 800130e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = osTimerStart (sensorTimId, DATA_PERIOD_MS);                // start timer
 8001312:	2114      	movs	r1, #20
 8001314:	f00f b88c 	b.w	8010430 <osTimerStart>
}
 8001318:	bd10      	pop	{r4, pc}
 800131a:	bf00      	nop
 800131c:	20000968 	.word	0x20000968
 8001320:	08015424 	.word	0x08015424

08001324 <Main_Thread>:
{
 8001324:	b510      	push	{r4, lr}
	sensorPool_id = osPoolCreate(osPool(sensorPool));
 8001326:	4820      	ldr	r0, [pc, #128]	@ (80013a8 <Main_Thread+0x84>)
 8001328:	4c20      	ldr	r4, [pc, #128]	@ (80013ac <Main_Thread+0x88>)
{
 800132a:	b0c0      	sub	sp, #256	@ 0x100
	sensorPool_id = osPoolCreate(osPool(sensorPool));
 800132c:	f00f f914 	bl	8010558 <osPoolCreate>
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001330:	2100      	movs	r1, #0
	sensorPool_id = osPoolCreate(osPool(sensorPool));
 8001332:	4603      	mov	r3, r0
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001334:	481e      	ldr	r0, [pc, #120]	@ (80013b0 <Main_Thread+0x8c>)
	sensorPool_id = osPoolCreate(osPool(sensorPool));
 8001336:	f8c4 3380 	str.w	r3, [r4, #896]	@ 0x380
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 800133a:	f00f f93d 	bl	80105b8 <osMessageCreate>
	readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 800133e:	2101      	movs	r1, #1
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001340:	4603      	mov	r3, r0
	readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 8001342:	481c      	ldr	r0, [pc, #112]	@ (80013b4 <Main_Thread+0x90>)
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001344:	f8c4 3384 	str.w	r3, [r4, #900]	@ 0x384
	readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 8001348:	f00f f8a0 	bl	801048c <osSemaphoreCreate>
	osSemaphoreWait(readDataSem_id, osWaitForever);
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
	readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 8001350:	6020      	str	r0, [r4, #0]
	osSemaphoreWait(readDataSem_id, osWaitForever);
 8001352:	f00f f8af 	bl	80104b4 <osSemaphoreWait>
	doubleTapSem_id = osSemaphoreCreate(osSemaphore(doubleTapSem), 1);
 8001356:	2101      	movs	r1, #1
 8001358:	4817      	ldr	r0, [pc, #92]	@ (80013b8 <Main_Thread+0x94>)
 800135a:	f00f f897 	bl	801048c <osSemaphoreCreate>
	osSemaphoreWait(doubleTapSem_id, osWaitForever);
 800135e:	f04f 31ff 	mov.w	r1, #4294967295
	doubleTapSem_id = osSemaphoreCreate(osSemaphore(doubleTapSem), 1);
 8001362:	f8c4 0388 	str.w	r0, [r4, #904]	@ 0x388
	osSemaphoreWait(doubleTapSem_id, osWaitForever);
 8001366:	f00f f8a5 	bl	80104b4 <osSemaphoreWait>
	MX_X_CUBE_MEMS1_Init();
 800136a:	f7ff fe4d 	bl	8001008 <MX_X_CUBE_MEMS1_Init>
	if(LoggingInterface == USB_Datalog)
 800136e:	f894 3370 	ldrb.w	r3, [r4, #880]	@ 0x370
 8001372:	b1b3      	cbz	r3, 80013a2 <Main_Thread+0x7e>
	len = sprintf(buffera, "Ola mundo!\r\n");
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <Main_Thread+0x98>)
  /* USER CODE END USART2_Init 2 */

}

static void tx_com (uint8_t *tx2_buffer, uint16_t len){
	HAL_UART_Transmit(&huart2, tx2_buffer, len, 1000);
 8001376:	4c12      	ldr	r4, [pc, #72]	@ (80013c0 <Main_Thread+0x9c>)
	len = sprintf(buffera, "Ola mundo!\r\n");
 8001378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137a:	46ec      	mov	ip, sp
 800137c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8001380:	f88c 3000 	strb.w	r3, [ip]
		tx_com((uint8_t * )buffera, strlen((char const *)buffera));
 8001384:	4668      	mov	r0, sp
 8001386:	f7fe ff8b 	bl	80002a0 <strlen>
	HAL_UART_Transmit(&huart2, tx2_buffer, len, 1000);
 800138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138e:	b282      	uxth	r2, r0
 8001390:	4669      	mov	r1, sp
 8001392:	4620      	mov	r0, r4
 8001394:	f00b fe44 	bl	800d020 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8001398:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800139c:	f010 fada 	bl	8011954 <vTaskDelay>
	for (;;) {
 80013a0:	e7f0      	b.n	8001384 <Main_Thread+0x60>
	dataTimerStart();
 80013a2:	f7ff ffa7 	bl	80012f4 <dataTimerStart>
 80013a6:	e7e5      	b.n	8001374 <Main_Thread+0x50>
 80013a8:	08015428 	.word	0x08015428
 80013ac:	20000968 	.word	0x20000968
 80013b0:	08015434 	.word	0x08015434
 80013b4:	0801543c 	.word	0x0801543c
 80013b8:	08015440 	.word	0x08015440
 80013bc:	08015504 	.word	0x08015504
 80013c0:	20000c48 	.word	0x20000c48

080013c4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <Error_Handler+0x2>

080013c8 <HAL_UART_MspInit>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b5d0      	push	{r4, r6, r7, lr}
 80013ca:	4604      	mov	r4, r0
 80013cc:	b0b2      	sub	sp, #200	@ 0xc8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d0:	229c      	movs	r2, #156	@ 0x9c
 80013d2:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80013d8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80013dc:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013de:	f012 f8e8 	bl	80135b2 <memset>
  if(huart->Instance==USART2)
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	4a43      	ldr	r2, [pc, #268]	@ (80014f4 <HAL_UART_MspInit+0x12c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d004      	beq.n	80013f4 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80013ea:	4a43      	ldr	r2, [pc, #268]	@ (80014f8 <HAL_UART_MspInit+0x130>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d033      	beq.n	8001458 <HAL_UART_MspInit+0x90>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013f0:	b032      	add	sp, #200	@ 0xc8
 80013f2:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013f4:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f6:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013f8:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	f008 feed 	bl	800a1d8 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d172      	bne.n	80014e8 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001402:	4b3e      	ldr	r3, [pc, #248]	@ (80014fc <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001404:	483e      	ldr	r0, [pc, #248]	@ (8001500 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001408:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800140c:	659a      	str	r2, [r3, #88]	@ 0x58
 800140e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001410:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001414:	9201      	str	r2, [sp, #4]
 8001416:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800141a:	f042 0208 	orr.w	r2, r2, #8
 800141e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001422:	2670      	movs	r6, #112	@ 0x70
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001424:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001428:	2702      	movs	r7, #2
 800142a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001430:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001432:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001434:	2600      	movs	r6, #0
 8001436:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001438:	930a      	str	r3, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 800143c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001440:	f006 fc8a 	bl	8007d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	4611      	mov	r1, r2
 8001448:	2026      	movs	r0, #38	@ 0x26
 800144a:	f006 fc15 	bl	8007c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800144e:	2026      	movs	r0, #38	@ 0x26
 8001450:	f006 fc4e 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
}
 8001454:	b032      	add	sp, #200	@ 0xc8
 8001456:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001458:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800145c:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145e:	f008 febb 	bl	800a1d8 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	2800      	cmp	r0, #0
 8001464:	d143      	bne.n	80014ee <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001466:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001468:	4825      	ldr	r0, [pc, #148]	@ (8001500 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800146a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800146c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001470:	659a      	str	r2, [r3, #88]	@ 0x58
 8001472:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001474:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001478:	9203      	str	r2, [sp, #12]
 800147a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001486:	f002 0208 	and.w	r2, r2, #8
 800148a:	9204      	str	r2, [sp, #16]
 800148c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001490:	f042 0202 	orr.w	r2, r2, #2
 8001494:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800149e:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 80014a2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014a6:	2600      	movs	r6, #0
 80014a8:	2703      	movs	r7, #3
 80014aa:	2302      	movs	r3, #2
 80014ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014b0:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b6:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b8:	f006 fc4e 	bl	8007d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 80014bc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 80014c0:	f242 0202 	movw	r2, #8194	@ 0x2002
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	480f      	ldr	r0, [pc, #60]	@ (8001504 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c6:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 80014c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014cc:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f006 fc42 	bl	8007d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	4611      	mov	r1, r2
 80014d8:	2027      	movs	r0, #39	@ 0x27
 80014da:	f006 fbcd 	bl	8007c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014de:	2027      	movs	r0, #39	@ 0x27
 80014e0:	f006 fc06 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
}
 80014e4:	b032      	add	sp, #200	@ 0xc8
 80014e6:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 80014e8:	f7ff ff6c 	bl	80013c4 <Error_Handler>
 80014ec:	e789      	b.n	8001402 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80014ee:	f7ff ff69 	bl	80013c4 <Error_Handler>
 80014f2:	e7b8      	b.n	8001466 <HAL_UART_MspInit+0x9e>
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40004800 	.word	0x40004800
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000c00 	.word	0x48000c00
 8001504:	48000400 	.word	0x48000400

08001508 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800150c:	e7fe      	b.n	800150c <HardFault_Handler>
 800150e:	bf00      	nop

08001510 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler>
 8001512:	bf00      	nop

08001514 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001514:	e7fe      	b.n	8001514 <BusFault_Handler>
 8001516:	bf00      	nop

08001518 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler>
 800151a:	bf00      	nop

0800151c <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001520:	b508      	push	{r3, lr}
  osSystickHandler();
 8001522:	f00f f84f 	bl	80105c4 <osSystickHandler>
  HAL_IncTick();
}
 8001526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 800152a:	f005 be7d 	b.w	8007228 <HAL_IncTick>
 800152e:	bf00      	nop

08001530 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001530:	4801      	ldr	r0, [pc, #4]	@ (8001538 <OTG_FS_IRQHandler+0x8>)
 8001532:	f007 ba91 	b.w	8008a58 <HAL_PCD_IRQHandler>
 8001536:	bf00      	nop
 8001538:	20002050 	.word	0x20002050

0800153c <SDMMC1_IRQHandler>:
}

void SDMMC1_IRQHandler(void)
{
  HAL_SD_IRQHandler(&hsd1);
 800153c:	4801      	ldr	r0, [pc, #4]	@ (8001544 <SDMMC1_IRQHandler+0x8>)
 800153e:	f009 bd43 	b.w	800afc8 <HAL_SD_IRQHandler>
 8001542:	bf00      	nop
 8001544:	20000fc4 	.word	0x20000fc4

08001548 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);		
 8001548:	2020      	movs	r0, #32
 800154a:	f006 bded 	b.w	8008128 <HAL_GPIO_EXTI_IRQHandler>
 800154e:	bf00      	nop

08001550 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8001550:	2001      	movs	r0, #1
 8001552:	f006 bde9 	b.w	8008128 <HAL_GPIO_EXTI_IRQHandler>
 8001556:	bf00      	nop

08001558 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8001558:	2000      	movs	r0, #0
 800155a:	4770      	bx	lr

0800155c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800155c:	2000      	movs	r0, #0
 800155e:	4770      	bx	lr

08001560 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8001560:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001562:	4c05      	ldr	r4, [pc, #20]	@ (8001578 <CDC_Receive_FS+0x18>)
{
 8001564:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001566:	4620      	mov	r0, r4
 8001568:	f00d ff3a 	bl	800f3e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800156c:	4620      	mov	r0, r4
 800156e:	f00d ff41 	bl	800f3f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8001572:	2000      	movs	r0, #0
 8001574:	bd10      	pop	{r4, pc}
 8001576:	bf00      	nop
 8001578:	2000096c 	.word	0x2000096c

0800157c <CDC_Init_FS>:
{
 800157c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800157e:	4d07      	ldr	r5, [pc, #28]	@ (800159c <CDC_Init_FS+0x20>)
 8001580:	4c07      	ldr	r4, [pc, #28]	@ (80015a0 <CDC_Init_FS+0x24>)
 8001582:	2200      	movs	r2, #0
 8001584:	4629      	mov	r1, r5
 8001586:	4620      	mov	r0, r4
 8001588:	f00d ff1e 	bl	800f3c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800158c:	f505 6100 	add.w	r1, r5, #2048	@ 0x800
 8001590:	4620      	mov	r0, r4
 8001592:	f00d ff25 	bl	800f3e0 <USBD_CDC_SetRxBuffer>
}
 8001596:	2000      	movs	r0, #0
 8001598:	bd38      	pop	{r3, r4, r5, pc}
 800159a:	bf00      	nop
 800159c:	2000104c 	.word	0x2000104c
 80015a0:	2000096c 	.word	0x2000096c

080015a4 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80015a4:	6803      	ldr	r3, [r0, #0]
 80015a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015aa:	d000      	beq.n	80015ae <HAL_PCD_MspInit+0xa>
 80015ac:	4770      	bx	lr
{
 80015ae:	b510      	push	{r4, lr}
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015b0:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
{
 80015b4:	b088      	sub	sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015b6:	4c1b      	ldr	r4, [pc, #108]	@ (8001624 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015b8:	2102      	movs	r1, #2
 80015ba:	2200      	movs	r2, #0
 80015bc:	2303      	movs	r3, #3
 80015be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015c8:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f006 fbc2 	bl	8007d58 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80015d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015da:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80015dc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80015de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	9b00      	ldr	r3, [sp, #0]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	d418      	bmi.n	800161e <HAL_PCD_MspInit+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80015f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	9b01      	ldr	r3, [sp, #4]
      HAL_PWREx_EnableVddUSB();
 80015fe:	f007 ff49 	bl	8009494 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001602:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001608:	65a3      	str	r3, [r4, #88]	@ 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2105      	movs	r1, #5
 800160e:	2043      	movs	r0, #67	@ 0x43
 8001610:	f006 fb32 	bl	8007c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001614:	2043      	movs	r0, #67	@ 0x43
 8001616:	f006 fb6b 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800161a:	b008      	add	sp, #32
 800161c:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 800161e:	f007 ff39 	bl	8009494 <HAL_PWREx_EnableVddUSB>
 8001622:	e7f2      	b.n	800160a <HAL_PCD_MspInit+0x66>
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001628:	f500 7171 	add.w	r1, r0, #964	@ 0x3c4
 800162c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001630:	f00d bf34 	b.w	800f49c <USBD_LL_SetupStage>

08001634 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001634:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001638:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800163c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001640:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8001644:	f00d bf5a 	b.w	800f4fc <USBD_LL_DataOutStage>

08001648 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001648:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800164c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001650:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001654:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001656:	f00d bf85 	b.w	800f564 <USBD_LL_DataInStage>
 800165a:	bf00      	nop

0800165c <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800165c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001660:	f00e b81e 	b.w	800f6a0 <USBD_LL_SOF>

08001664 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8001664:	b510      	push	{r4, lr}
 8001666:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001668:	2101      	movs	r1, #1
 800166a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 800166e:	f00d fffb 	bl	800f668 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001672:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 8001676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800167a:	f00d bfc9 	b.w	800f610 <USBD_LL_Reset>
 800167e:	bf00      	nop

08001680 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001680:	6802      	ldr	r2, [r0, #0]
 8001682:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
{
 8001686:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001688:	f043 0301 	orr.w	r3, r3, #1
{
 800168c:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800168e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001692:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001696:	f00d ffeb 	bl	800f670 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800169a:	6a23      	ldr	r3, [r4, #32]
 800169c:	b123      	cbz	r3, 80016a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800169e:	4a03      	ldr	r2, [pc, #12]	@ (80016ac <HAL_PCD_SuspendCallback+0x2c>)
 80016a0:	6913      	ldr	r3, [r2, #16]
 80016a2:	f043 0306 	orr.w	r3, r3, #6
 80016a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80016b0:	6802      	ldr	r2, [r0, #0]
 80016b2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 80016b6:	f023 0301 	bic.w	r3, r3, #1
{
 80016ba:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80016bc:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80016c0:	6a03      	ldr	r3, [r0, #32]
{
 80016c2:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80016c4:	b92b      	cbnz	r3, 80016d2 <HAL_PCD_ResumeCallback+0x22>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80016c6:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 80016ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80016ce:	f00d bfdb 	b.w	800f688 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80016d2:	4a06      	ldr	r2, [pc, #24]	@ (80016ec <HAL_PCD_ResumeCallback+0x3c>)
 80016d4:	6913      	ldr	r3, [r2, #16]
 80016d6:	f023 0306 	bic.w	r3, r3, #6
 80016da:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80016dc:	f7ff fd3c 	bl	8001158 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80016e0:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 80016e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80016e8:	f00d bfce 	b.w	800f688 <USBD_LL_Resume>
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80016f0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 80016f4:	f00d bff8 	b.w	800f6e8 <USBD_LL_IsoOUTIncomplete>

080016f8 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80016f8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 80016fc:	f00d bfe2 	b.w	800f6c4 <USBD_LL_IsoINIncomplete>

08001700 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001700:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001704:	f00e b802 	b.w	800f70c <USBD_LL_DevConnected>

08001708 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001708:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 800170c:	f00e b800 	b.w	800f710 <USBD_LL_DevDisconnected>

08001710 <USBD_LL_Init>:
  if (pdev->id == DEVICE_FS) {
 8001710:	7803      	ldrb	r3, [r0, #0]
 8001712:	b10b      	cbz	r3, 8001718 <USBD_LL_Init+0x8>
}
 8001714:	2000      	movs	r0, #0
 8001716:	4770      	bx	lr
{
 8001718:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800171a:	4c15      	ldr	r4, [pc, #84]	@ (8001770 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800171c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001720:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8001722:	f8c4 0404 	str.w	r0, [r4, #1028]	@ 0x404
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001726:	e9c4 1200 	strd	r1, r2, [r4]
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 800172a:	2601      	movs	r6, #1
  pdev->pData = &hpcd_USB_OTG_FS;
 800172c:	f8c0 42c4 	str.w	r4, [r0, #708]	@ 0x2c4
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 8001730:	2202      	movs	r2, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001732:	4620      	mov	r0, r4
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 8001734:	e9c4 3205 	strd	r3, r2, [r4, #20]
 8001738:	e9c4 6307 	strd	r6, r3, [r4, #28]
 800173c:	e9c4 3609 	strd	r3, r6, [r4, #36]	@ 0x24
 8001740:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001744:	f007 f8dc 	bl	8008900 <HAL_PCD_Init>
 8001748:	4605      	mov	r5, r0
 800174a:	b100      	cbz	r0, 800174e <USBD_LL_Init+0x3e>
 800174c:	e7fe      	b.n	800174c <USBD_LL_Init+0x3c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800174e:	2180      	movs	r1, #128	@ 0x80
 8001750:	4620      	mov	r0, r4
 8001752:	f007 fe03 	bl	800935c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001756:	4629      	mov	r1, r5
 8001758:	2240      	movs	r2, #64	@ 0x40
 800175a:	4620      	mov	r0, r4
 800175c:	f007 fd7c 	bl	8009258 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001760:	2280      	movs	r2, #128	@ 0x80
 8001762:	4631      	mov	r1, r6
 8001764:	4620      	mov	r0, r4
 8001766:	f007 fd77 	bl	8009258 <HAL_PCDEx_SetTxFiFo>
}
 800176a:	2000      	movs	r0, #0
 800176c:	bd70      	pop	{r4, r5, r6, pc}
 800176e:	bf00      	nop
 8001770:	20002050 	.word	0x20002050

08001774 <USBD_LL_Start>:
{
 8001774:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8001776:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 800177a:	f007 f951 	bl	8008a20 <HAL_PCD_Start>
  switch (hal_status) {
 800177e:	b118      	cbz	r0, 8001788 <USBD_LL_Start+0x14>
 8001780:	2802      	cmp	r0, #2
 8001782:	bf0c      	ite	eq
 8001784:	2001      	moveq	r0, #1
 8001786:	2003      	movne	r0, #3
}
 8001788:	bd08      	pop	{r3, pc}
 800178a:	bf00      	nop

0800178c <USBD_LL_OpenEP>:
{
 800178c:	4694      	mov	ip, r2
 800178e:	b508      	push	{r3, lr}
 8001790:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001792:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001796:	4663      	mov	r3, ip
 8001798:	f007 fc24 	bl	8008fe4 <HAL_PCD_EP_Open>
  switch (hal_status) {
 800179c:	b118      	cbz	r0, 80017a6 <USBD_LL_OpenEP+0x1a>
 800179e:	2802      	cmp	r0, #2
 80017a0:	bf0c      	ite	eq
 80017a2:	2001      	moveq	r0, #1
 80017a4:	2003      	movne	r0, #3
}
 80017a6:	bd08      	pop	{r3, pc}

080017a8 <USBD_LL_CloseEP>:
{
 80017a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80017aa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80017ae:	f007 fc57 	bl	8009060 <HAL_PCD_EP_Close>
  switch (hal_status) {
 80017b2:	b118      	cbz	r0, 80017bc <USBD_LL_CloseEP+0x14>
 80017b4:	2802      	cmp	r0, #2
 80017b6:	bf0c      	ite	eq
 80017b8:	2001      	moveq	r0, #1
 80017ba:	2003      	movne	r0, #3
}
 80017bc:	bd08      	pop	{r3, pc}
 80017be:	bf00      	nop

080017c0 <USBD_LL_StallEP>:
{
 80017c0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80017c2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80017c6:	f007 fccd 	bl	8009164 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 80017ca:	b118      	cbz	r0, 80017d4 <USBD_LL_StallEP+0x14>
 80017cc:	2802      	cmp	r0, #2
 80017ce:	bf0c      	ite	eq
 80017d0:	2001      	moveq	r0, #1
 80017d2:	2003      	movne	r0, #3
}
 80017d4:	bd08      	pop	{r3, pc}
 80017d6:	bf00      	nop

080017d8 <USBD_LL_ClearStallEP>:
{
 80017d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80017da:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80017de:	f007 fd03 	bl	80091e8 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 80017e2:	b118      	cbz	r0, 80017ec <USBD_LL_ClearStallEP+0x14>
 80017e4:	2802      	cmp	r0, #2
 80017e6:	bf0c      	ite	eq
 80017e8:	2001      	moveq	r0, #1
 80017ea:	2003      	movne	r0, #3
}
 80017ec:	bd08      	pop	{r3, pc}
 80017ee:	bf00      	nop

080017f0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80017f0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80017f2:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80017f6:	d406      	bmi.n	8001806 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80017f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80017fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001800:	f893 01fe 	ldrb.w	r0, [r3, #510]	@ 0x1fe
}
 8001804:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001806:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800180a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800180e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001812:	f893 003e 	ldrb.w	r0, [r3, #62]	@ 0x3e
 8001816:	4770      	bx	lr

08001818 <USBD_LL_SetUSBAddress>:
{
 8001818:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800181a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 800181e:	f007 fbcd 	bl	8008fbc <HAL_PCD_SetAddress>
  switch (hal_status) {
 8001822:	b118      	cbz	r0, 800182c <USBD_LL_SetUSBAddress+0x14>
 8001824:	2802      	cmp	r0, #2
 8001826:	bf0c      	ite	eq
 8001828:	2001      	moveq	r0, #1
 800182a:	2003      	movne	r0, #3
}
 800182c:	bd08      	pop	{r3, pc}
 800182e:	bf00      	nop

08001830 <USBD_LL_Transmit>:
{
 8001830:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001832:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001836:	f007 fc73 	bl	8009120 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 800183a:	b118      	cbz	r0, 8001844 <USBD_LL_Transmit+0x14>
 800183c:	2802      	cmp	r0, #2
 800183e:	bf0c      	ite	eq
 8001840:	2001      	moveq	r0, #1
 8001842:	2003      	movne	r0, #3
}
 8001844:	bd08      	pop	{r3, pc}
 8001846:	bf00      	nop

08001848 <USBD_LL_PrepareReceive>:
{
 8001848:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800184a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 800184e:	f007 fc3b 	bl	80090c8 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8001852:	b118      	cbz	r0, 800185c <USBD_LL_PrepareReceive+0x14>
 8001854:	2802      	cmp	r0, #2
 8001856:	bf0c      	ite	eq
 8001858:	2001      	moveq	r0, #1
 800185a:	2003      	movne	r0, #3
}
 800185c:	bd08      	pop	{r3, pc}
 800185e:	bf00      	nop

08001860 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001860:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001864:	f007 bc52 	b.w	800910c <HAL_PCD_EP_GetRxCount>

08001868 <HAL_PCDEx_LPM_Callback>:
{
 8001868:	b510      	push	{r4, lr}
 800186a:	4604      	mov	r4, r0
  switch (msg)
 800186c:	b1a1      	cbz	r1, 8001898 <HAL_PCDEx_LPM_Callback+0x30>
 800186e:	2901      	cmp	r1, #1
 8001870:	d111      	bne.n	8001896 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001872:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8001874:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001878:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8001884:	f00d fef4 	bl	800f670 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8001888:	6a23      	ldr	r3, [r4, #32]
 800188a:	b123      	cbz	r3, 8001896 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800188c:	4a0e      	ldr	r2, [pc, #56]	@ (80018c8 <HAL_PCDEx_LPM_Callback+0x60>)
 800188e:	6913      	ldr	r3, [r2, #16]
 8001890:	f043 0306 	orr.w	r3, r3, #6
 8001894:	6113      	str	r3, [r2, #16]
}
 8001896:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8001898:	6a03      	ldr	r3, [r0, #32]
 800189a:	b963      	cbnz	r3, 80018b6 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800189c:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 800189e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80018a2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 80018a6:	f023 0301 	bic.w	r3, r3, #1
}
 80018aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80018ae:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Resume(hpcd->pData);
 80018b2:	f00d bee9 	b.w	800f688 <USBD_LL_Resume>
      SystemClock_Config();
 80018b6:	f7ff fc4f 	bl	8001158 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80018ba:	4a03      	ldr	r2, [pc, #12]	@ (80018c8 <HAL_PCDEx_LPM_Callback+0x60>)
 80018bc:	6913      	ldr	r3, [r2, #16]
 80018be:	f023 0306 	bic.w	r3, r3, #6
 80018c2:	6113      	str	r3, [r2, #16]
 80018c4:	e7ea      	b.n	800189c <HAL_PCDEx_LPM_Callback+0x34>
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <USBD_static_malloc>:
}
 80018cc:	4800      	ldr	r0, [pc, #0]	@ (80018d0 <USBD_static_malloc+0x4>)
 80018ce:	4770      	bx	lr
 80018d0:	20002458 	.word	0x20002458

080018d4 <USBD_static_free>:
}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80018d8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80018da:	4801      	ldr	r0, [pc, #4]	@ (80018e0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80018dc:	800b      	strh	r3, [r1, #0]
}
 80018de:	4770      	bx	lr
 80018e0:	20000014 	.word	0x20000014

080018e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80018e4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80018e6:	4801      	ldr	r0, [pc, #4]	@ (80018ec <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80018e8:	800b      	strh	r3, [r1, #0]
}
 80018ea:	4770      	bx	lr
 80018ec:	20000028 	.word	0x20000028

080018f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 80018f0:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80018f2:	4801      	ldr	r0, [pc, #4]	@ (80018f8 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 80018f4:	800b      	strh	r3, [r1, #0]
}
 80018f6:	4770      	bx	lr
 80018f8:	2000002c 	.word	0x2000002c

080018fc <USBD_FS_ManufacturerStrDescriptor>:
{
 80018fc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80018fe:	4c04      	ldr	r4, [pc, #16]	@ (8001910 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 8001902:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001904:	4621      	mov	r1, r4
 8001906:	f00e f9a7 	bl	800fc58 <USBD_GetString>
}
 800190a:	4620      	mov	r0, r4
 800190c:	bd10      	pop	{r4, pc}
 800190e:	bf00      	nop
 8001910:	20002678 	.word	0x20002678
 8001914:	0801551c 	.word	0x0801551c

08001918 <USBD_FS_ProductStrDescriptor>:
{
 8001918:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800191a:	4c04      	ldr	r4, [pc, #16]	@ (800192c <USBD_FS_ProductStrDescriptor+0x14>)
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <USBD_FS_ProductStrDescriptor+0x18>)
{
 800191e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001920:	4621      	mov	r1, r4
 8001922:	f00e f999 	bl	800fc58 <USBD_GetString>
}
 8001926:	4620      	mov	r0, r4
 8001928:	bd10      	pop	{r4, pc}
 800192a:	bf00      	nop
 800192c:	20002678 	.word	0x20002678
 8001930:	08015530 	.word	0x08015530

08001934 <USBD_FS_SerialStrDescriptor>:
{
 8001934:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8001936:	4c04      	ldr	r4, [pc, #16]	@ (8001948 <USBD_FS_SerialStrDescriptor+0x14>)
 8001938:	4804      	ldr	r0, [pc, #16]	@ (800194c <USBD_FS_SerialStrDescriptor+0x18>)
{
 800193a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800193c:	4621      	mov	r1, r4
 800193e:	f00e f98b 	bl	800fc58 <USBD_GetString>
}
 8001942:	4620      	mov	r0, r4
 8001944:	bd10      	pop	{r4, pc}
 8001946:	bf00      	nop
 8001948:	20002678 	.word	0x20002678
 800194c:	08015548 	.word	0x08015548

08001950 <USBD_FS_ConfigStrDescriptor>:
{
 8001950:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001952:	4c04      	ldr	r4, [pc, #16]	@ (8001964 <USBD_FS_ConfigStrDescriptor+0x14>)
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8001956:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001958:	4621      	mov	r1, r4
 800195a:	f00e f97d 	bl	800fc58 <USBD_GetString>
}
 800195e:	4620      	mov	r0, r4
 8001960:	bd10      	pop	{r4, pc}
 8001962:	bf00      	nop
 8001964:	20002678 	.word	0x20002678
 8001968:	08015558 	.word	0x08015558

0800196c <USBD_FS_InterfaceStrDescriptor>:
{
 800196c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800196e:	4c04      	ldr	r4, [pc, #16]	@ (8001980 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8001972:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001974:	4621      	mov	r1, r4
 8001976:	f00e f96f 	bl	800fc58 <USBD_GetString>
}
 800197a:	4620      	mov	r0, r4
 800197c:	bd10      	pop	{r4, pc}
 800197e:	bf00      	nop
 8001980:	20002678 	.word	0x20002678
 8001984:	08015564 	.word	0x08015564

08001988 <HTS221_GetCapabilities>:

  Capabilities->Humidity    = 1;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 12.5f;
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <HTS221_GetCapabilities+0x14>)
 800198a:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
  Capabilities->PressMaxOdr = 0.0f;
 800198c:	2200      	movs	r2, #0
  Capabilities->Temperature = 1;
 800198e:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
 8001992:	6008      	str	r0, [r1, #0]
  Capabilities->TempMaxOdr  = 12.5f;
 8001994:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001996:	60ca      	str	r2, [r1, #12]
  return HTS221_OK;
}
 8001998:	2000      	movs	r0, #0
 800199a:	4770      	bx	lr
 800199c:	41480000 	.word	0x41480000

080019a0 <HTS221_HUM_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80019a0:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d012      	beq.n	80019ce <HTS221_HUM_Enable+0x2e>
{
 80019a8:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80019aa:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 80019ae:	4604      	mov	r4, r0
 80019b0:	b123      	cbz	r3, 80019bc <HTS221_HUM_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return HTS221_OK;
 80019b8:	2000      	movs	r0, #0

  return HTS221_OK;
}
 80019ba:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80019bc:	2101      	movs	r1, #1
 80019be:	301c      	adds	r0, #28
 80019c0:	f000 fa8e 	bl	8001ee0 <hts221_power_on_set>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d0f4      	beq.n	80019b2 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019cc:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 80019ce:	2000      	movs	r0, #0
}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <HTS221_HUM_Disable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80019d4:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80019d8:	b18b      	cbz	r3, 80019fe <HTS221_HUM_Disable+0x2a>
{
 80019da:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80019dc:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
 80019e0:	4604      	mov	r4, r0
 80019e2:	b121      	cbz	r1, 80019ee <HTS221_HUM_Disable+0x1a>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return HTS221_OK;
 80019ea:	2000      	movs	r0, #0

  return HTS221_OK;
}
 80019ec:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80019ee:	301c      	adds	r0, #28
 80019f0:	f000 fa76 	bl	8001ee0 <hts221_power_on_set>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	d0f5      	beq.n	80019e4 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019fc:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 80019fe:	2000      	movs	r0, #0
}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <HTS221_TEMP_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001a04:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d012      	beq.n	8001a32 <HTS221_TEMP_Enable+0x2e>
{
 8001a0c:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001a0e:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001a12:	4604      	mov	r4, r0
 8001a14:	b123      	cbz	r3, 8001a20 <HTS221_TEMP_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return HTS221_OK;
 8001a1c:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001a1e:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001a20:	2101      	movs	r1, #1
 8001a22:	301c      	adds	r0, #28
 8001a24:	f000 fa5c 	bl	8001ee0 <hts221_power_on_set>
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d0f4      	beq.n	8001a16 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001a30:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001a32:	2000      	movs	r0, #0
}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <HTS221_TEMP_Disable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001a38:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001a3c:	b18b      	cbz	r3, 8001a62 <HTS221_TEMP_Disable+0x2a>
{
 8001a3e:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001a40:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
 8001a44:	4604      	mov	r4, r0
 8001a46:	b121      	cbz	r1, 8001a52 <HTS221_TEMP_Disable+0x1a>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return HTS221_OK;
 8001a4e:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001a50:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001a52:	301c      	adds	r0, #28
 8001a54:	f000 fa44 	bl	8001ee0 <hts221_power_on_set>
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d0f5      	beq.n	8001a48 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001a60:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001a62:	2000      	movs	r0, #0
}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <HTS221_Init>:
{
 8001a68:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8001a6a:	f890 1028 	ldrb.w	r1, [r0, #40]	@ 0x28
{
 8001a6e:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8001a70:	b121      	cbz	r1, 8001a7c <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return HTS221_OK;
 8001a78:	2000      	movs	r0, #0
}
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001a7c:	f100 051c 	add.w	r5, r0, #28
 8001a80:	4628      	mov	r0, r5
 8001a82:	f000 fa2d 	bl	8001ee0 <hts221_power_on_set>
 8001a86:	b950      	cbnz	r0, 8001a9e <HTS221_Init+0x36>
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f000 f9e0 	bl	8001e50 <hts221_block_data_update_set>
 8001a90:	b928      	cbnz	r0, 8001a9e <HTS221_Init+0x36>
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001a92:	2101      	movs	r1, #1
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 f99b 	bl	8001dd0 <hts221_data_rate_set>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d0e9      	beq.n	8001a72 <HTS221_Init+0xa>
      return HTS221_ERROR;
 8001a9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001aa2:	bd38      	pop	{r3, r4, r5, pc}

08001aa4 <HTS221_HUM_SetOutputDataRate>:
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001aa4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001aa8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001ab0:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001ab2:	d910      	bls.n	8001ad6 <HTS221_HUM_SetOutputDataRate+0x32>
 8001ab4:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 8001ab8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	bf94      	ite	ls
 8001ac2:	2102      	movls	r1, #2
 8001ac4:	2103      	movhi	r1, #3
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001ac6:	301c      	adds	r0, #28
 8001ac8:	f000 f982 	bl	8001dd0 <hts221_data_rate_set>
 8001acc:	3800      	subs	r0, #0
 8001ace:	bf18      	it	ne
 8001ad0:	2001      	movne	r0, #1
}
 8001ad2:	4240      	negs	r0, r0
 8001ad4:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	e7f5      	b.n	8001ac6 <HTS221_HUM_SetOutputDataRate+0x22>
 8001ada:	bf00      	nop

08001adc <HTS221_ReadID>:
{
 8001adc:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001ade:	301c      	adds	r0, #28
 8001ae0:	f000 f9f4 	bl	8001ecc <hts221_device_id_get>
 8001ae4:	3800      	subs	r0, #0
 8001ae6:	bf18      	it	ne
 8001ae8:	2001      	movne	r0, #1
}
 8001aea:	4240      	negs	r0, r0
 8001aec:	bd08      	pop	{r3, pc}
 8001aee:	bf00      	nop

08001af0 <HTS221_HUM_GetOutputDataRate>:
{
 8001af0:	b510      	push	{r4, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001af6:	301c      	adds	r0, #28
 8001af8:	f10d 0107 	add.w	r1, sp, #7
 8001afc:	f000 f982 	bl	8001e04 <hts221_data_rate_get>
 8001b00:	b990      	cbnz	r0, 8001b28 <HTS221_HUM_GetOutputDataRate+0x38>
  switch (odr_low_level)
 8001b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d80e      	bhi.n	8001b28 <HTS221_HUM_GetOutputDataRate+0x38>
 8001b0a:	e8df f003 	tbb	[pc, r3]
 8001b0e:	0207      	.short	0x0207
 8001b10:	090b      	.short	0x090b
 8001b12:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
      *Odr = 1.0f;
 8001b16:	6023      	str	r3, [r4, #0]
}
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e7fa      	b.n	8001b16 <HTS221_HUM_GetOutputDataRate+0x26>
      break;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HTS221_HUM_GetOutputDataRate+0x40>)
 8001b22:	e7f8      	b.n	8001b16 <HTS221_HUM_GetOutputDataRate+0x26>
      break;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HTS221_HUM_GetOutputDataRate+0x44>)
 8001b26:	e7f6      	b.n	8001b16 <HTS221_HUM_GetOutputDataRate+0x26>
    return HTS221_ERROR;
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001b2c:	e7f4      	b.n	8001b18 <HTS221_HUM_GetOutputDataRate+0x28>
 8001b2e:	bf00      	nop
 8001b30:	41480000 	.word	0x41480000
 8001b34:	40e00000 	.word	0x40e00000

08001b38 <HTS221_HUM_GetHumidity>:
{
 8001b38:	b530      	push	{r4, r5, lr}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001b3a:	f100 041c 	add.w	r4, r0, #28
{
 8001b3e:	b087      	sub	sp, #28
 8001b40:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001b42:	4620      	mov	r0, r4
 8001b44:	a902      	add	r1, sp, #8
 8001b46:	f000 fa51 	bl	8001fec <hts221_hum_adc_point_0_get>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d148      	bne.n	8001be0 <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001b4e:	a903      	add	r1, sp, #12
 8001b50:	4620      	mov	r0, r4
 8001b52:	f000 f9df 	bl	8001f14 <hts221_hum_rh_point_0_get>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d142      	bne.n	8001be0 <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001b5a:	a904      	add	r1, sp, #16
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f000 fa5d 	bl	800201c <hts221_hum_adc_point_1_get>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d13c      	bne.n	8001be0 <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001b66:	a905      	add	r1, sp, #20
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f000 f9e7 	bl	8001f3c <hts221_hum_rh_point_1_get>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	bbb0      	cbnz	r0, 8001be0 <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001b72:	a901      	add	r1, sp, #4
 8001b74:	4620      	mov	r0, r4
  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8001b76:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001b7a:	f000 f983 	bl	8001e84 <hts221_humidity_raw_get>
 8001b7e:	bb78      	cbnz	r0, 8001be0 <HTS221_HUM_GetHumidity+0xa8>
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001b80:	eddd 6a05 	vldr	s13, [sp, #20]
 8001b84:	eddd 5a02 	vldr	s11, [sp, #8]
 8001b88:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001b8c:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001b90:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001b94:	ee65 7ae6 	vnmul.f32	s15, s11, s13
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001b98:	ee06 3a10 	vmov	s12, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001b9c:	eee5 7a07 	vfma.f32	s15, s10, s14
  if (*Value < 0.0f)
 8001ba0:	2300      	movs	r3, #0
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001ba2:	ee76 6ac5 	vsub.f32	s13, s13, s10
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001ba6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001baa:	ee37 7a65 	vsub.f32	s14, s14, s11
 8001bae:	eee6 7a26 	vfma.f32	s15, s12, s13
 8001bb2:	eec7 6a87 	vdiv.f32	s13, s15, s14
  if (*Value < 0.0f)
 8001bb6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d40c      	bmi.n	8001bda <HTS221_HUM_GetHumidity+0xa2>
  if (*Value > 100.0f)
 8001bc0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8001be8 <HTS221_HUM_GetHumidity+0xb0>
 8001bc4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	bfd4      	ite	le
 8001bce:	edc5 6a00 	vstrle	s13, [r5]
    *Value = 100.0f;
 8001bd2:	edc5 7a00 	vstrgt	s15, [r5]
}
 8001bd6:	b007      	add	sp, #28
 8001bd8:	bd30      	pop	{r4, r5, pc}
 8001bda:	602b      	str	r3, [r5, #0]
 8001bdc:	b007      	add	sp, #28
 8001bde:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	e7f7      	b.n	8001bd6 <HTS221_HUM_GetHumidity+0x9e>
 8001be6:	bf00      	nop
 8001be8:	42c80000 	.word	0x42c80000

08001bec <HTS221_TEMP_GetTemperature>:
{
 8001bec:	b530      	push	{r4, r5, lr}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001bee:	f100 041c 	add.w	r4, r0, #28
{
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	a902      	add	r1, sp, #8
 8001bfa:	f000 fa27 	bl	800204c <hts221_temp_adc_point_0_get>
 8001bfe:	bba0      	cbnz	r0, 8001c6a <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001c00:	a903      	add	r1, sp, #12
 8001c02:	4620      	mov	r0, r4
 8001c04:	f000 f9ae 	bl	8001f64 <hts221_temp_deg_point_0_get>
 8001c08:	bb78      	cbnz	r0, 8001c6a <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001c0a:	a904      	add	r1, sp, #16
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f000 fa35 	bl	800207c <hts221_temp_adc_point_1_get>
 8001c12:	bb50      	cbnz	r0, 8001c6a <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001c14:	a905      	add	r1, sp, #20
 8001c16:	4620      	mov	r0, r4
 8001c18:	f000 f9c6 	bl	8001fa8 <hts221_temp_deg_point_1_get>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	bb20      	cbnz	r0, 8001c6a <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001c20:	a901      	add	r1, sp, #4
 8001c22:	4620      	mov	r0, r4
  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8001c24:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001c28:	f000 f93e 	bl	8001ea8 <hts221_temperature_raw_get>
 8001c2c:	b9e8      	cbnz	r0, 8001c6a <HTS221_TEMP_GetTemperature+0x7e>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c2e:	eddd 6a05 	vldr	s13, [sp, #20]
 8001c32:	eddd 5a02 	vldr	s11, [sp, #8]
 8001c36:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001c3a:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001c3e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c42:	ee65 7ae6 	vnmul.f32	s15, s11, s13
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001c46:	ee06 3a10 	vmov	s12, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c4a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8001c4e:	ee76 6ac5 	vsub.f32	s13, s13, s10
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001c52:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c56:	ee37 7a65 	vsub.f32	s14, s14, s11
 8001c5a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8001c5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001c62:	edc5 6a00 	vstr	s13, [r5]
}
 8001c66:	b007      	add	sp, #28
 8001c68:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8001c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6e:	e7fa      	b.n	8001c66 <HTS221_TEMP_GetTemperature+0x7a>

08001c70 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c70:	b430      	push	{r4, r5}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001c72:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001c74:	6944      	ldr	r4, [r0, #20]
 8001c76:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001c78:	b925      	cbnz	r5, 8001c84 <ReadRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001c7a:	46a4      	mov	ip, r4
 8001c7c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001c80:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001c82:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001c84:	46a4      	mov	ip, r4
 8001c86:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8001c8a:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001c8c:	4760      	bx	ip
 8001c8e:	bf00      	nop

08001c90 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c90:	b430      	push	{r4, r5}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001c92:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001c94:	6904      	ldr	r4, [r0, #16]
 8001c96:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001c98:	b925      	cbnz	r5, 8001ca4 <WriteRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001c9a:	46a4      	mov	ip, r4
 8001c9c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001ca0:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001ca2:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001ca4:	46a4      	mov	ip, r4
 8001ca6:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8001caa:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001cac:	4760      	bx	ip
 8001cae:	bf00      	nop

08001cb0 <HTS221_TEMP_GetOutputDataRate>:
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	301c      	adds	r0, #28
 8001cb8:	f10d 0107 	add.w	r1, sp, #7
 8001cbc:	f000 f8a2 	bl	8001e04 <hts221_data_rate_get>
 8001cc0:	b990      	cbnz	r0, 8001ce8 <HTS221_TEMP_GetOutputDataRate+0x38>
 8001cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d80e      	bhi.n	8001ce8 <HTS221_TEMP_GetOutputDataRate+0x38>
 8001cca:	e8df f003 	tbb	[pc, r3]
 8001cce:	0207      	.short	0x0207
 8001cd0:	090b      	.short	0x090b
 8001cd2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001cd6:	6023      	str	r3, [r4, #0]
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd10      	pop	{r4, pc}
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e7fa      	b.n	8001cd6 <HTS221_TEMP_GetOutputDataRate+0x26>
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HTS221_TEMP_GetOutputDataRate+0x40>)
 8001ce2:	e7f8      	b.n	8001cd6 <HTS221_TEMP_GetOutputDataRate+0x26>
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <HTS221_TEMP_GetOutputDataRate+0x44>)
 8001ce6:	e7f6      	b.n	8001cd6 <HTS221_TEMP_GetOutputDataRate+0x26>
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	e7f4      	b.n	8001cd8 <HTS221_TEMP_GetOutputDataRate+0x28>
 8001cee:	bf00      	nop
 8001cf0:	41480000 	.word	0x41480000
 8001cf4:	40e00000 	.word	0x40e00000

08001cf8 <HTS221_TEMP_SetOutputDataRate>:
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
 8001cf8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001cfc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	b508      	push	{r3, lr}
 8001d06:	d910      	bls.n	8001d2a <HTS221_TEMP_SetOutputDataRate+0x32>
 8001d08:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 8001d0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	bf94      	ite	ls
 8001d16:	2102      	movls	r1, #2
 8001d18:	2103      	movhi	r1, #3
 8001d1a:	301c      	adds	r0, #28
 8001d1c:	f000 f858 	bl	8001dd0 <hts221_data_rate_set>
 8001d20:	3800      	subs	r0, #0
 8001d22:	bf18      	it	ne
 8001d24:	2001      	movne	r0, #1
 8001d26:	4240      	negs	r0, r0
 8001d28:	bd08      	pop	{r3, pc}
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	e7f5      	b.n	8001d1a <HTS221_TEMP_SetOutputDataRate+0x22>
 8001d2e:	bf00      	nop

08001d30 <HTS221_DeInit>:
{
 8001d30:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8001d32:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8001d36:	2b01      	cmp	r3, #1
{
 8001d38:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8001d3a:	d003      	beq.n	8001d44 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8001d42:	bd10      	pop	{r4, pc}
  if (pObj->hum_is_enabled == 0U)
 8001d44:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8001d48:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
  if (pObj->hum_is_enabled == 0U)
 8001d4c:	b1a3      	cbz	r3, 8001d78 <HTS221_DeInit+0x48>
  if (pObj->temp_is_enabled == 0U)
 8001d4e:	b159      	cbz	r1, 8001d68 <HTS221_DeInit+0x38>
  pObj->hum_is_enabled = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	f104 001c 	add.w	r0, r4, #28
 8001d5c:	f000 f8c0 	bl	8001ee0 <hts221_power_on_set>
 8001d60:	b968      	cbnz	r0, 8001d7e <HTS221_DeInit+0x4e>
  pObj->temp_is_enabled = 0;
 8001d62:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return HTS221_OK;
 8001d66:	e7e9      	b.n	8001d3c <HTS221_DeInit+0xc>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001d68:	301c      	adds	r0, #28
 8001d6a:	f000 f8b9 	bl	8001ee0 <hts221_power_on_set>
 8001d6e:	b930      	cbnz	r0, 8001d7e <HTS221_DeInit+0x4e>
  if (pObj->temp_is_enabled == 0U)
 8001d70:	f894 102a 	ldrb.w	r1, [r4, #42]	@ 0x2a
  pObj->hum_is_enabled = 0;
 8001d74:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8001d78:	2900      	cmp	r1, #0
 8001d7a:	d0df      	beq.n	8001d3c <HTS221_DeInit+0xc>
 8001d7c:	e7eb      	b.n	8001d56 <HTS221_DeInit+0x26>
      return HTS221_ERROR;
 8001d7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001d82:	bd10      	pop	{r4, pc}

08001d84 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8001d84:	b1e0      	cbz	r0, 8001dc0 <HTS221_RegisterBusIO+0x3c>
{
 8001d86:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8001d88:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8001d8c:	688a      	ldr	r2, [r1, #8]
 8001d8e:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d90:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8001d94:	7b0a      	ldrb	r2, [r1, #12]
 8001d96:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d98:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 8001d9c:	6989      	ldr	r1, [r1, #24]
 8001d9e:	6181      	str	r1, [r0, #24]
 8001da0:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8001da2:	4909      	ldr	r1, [pc, #36]	@ (8001dc8 <HTS221_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8001da4:	4a09      	ldr	r2, [pc, #36]	@ (8001dcc <HTS221_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001da6:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001da8:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8001dac:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 8001dae:	b113      	cbz	r3, 8001db6 <HTS221_RegisterBusIO+0x32>
}
 8001db0:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8001db4:	4718      	bx	r3
}
 8001db6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	08001c71 	.word	0x08001c71
 8001dcc:	08001c91 	.word	0x08001c91

08001dd0 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001dd8:	6880      	ldr	r0, [r0, #8]
 8001dda:	6866      	ldr	r6, [r4, #4]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	aa01      	add	r2, sp, #4
 8001de0:	2120      	movs	r1, #32
 8001de2:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8001de4:	b958      	cbnz	r0, 8001dfe <hts221_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 8001de6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001dea:	6826      	ldr	r6, [r4, #0]
 8001dec:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 8001dee:	f365 0301 	bfi	r3, r5, #0, #2
 8001df2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001df6:	aa01      	add	r2, sp, #4
 8001df8:	2301      	movs	r3, #1
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
 8001e02:	bf00      	nop

08001e04 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001e04:	b530      	push	{r4, r5, lr}
 8001e06:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001e0e:	aa01      	add	r2, sp, #4
{
 8001e10:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e12:	2120      	movs	r1, #32
 8001e14:	47a8      	blx	r5
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  switch (reg.odr) {
 8001e16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d813      	bhi.n	8001e4a <hts221_data_rate_get+0x46>
 8001e22:	e8df f003 	tbb	[pc, r3]
 8001e26:	0206      	.short	0x0206
 8001e28:	0a0e      	.short	0x0a0e
 8001e2a:	2301      	movs	r3, #1
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001e2c:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 8001e2e:	b003      	add	sp, #12
 8001e30:	bd30      	pop	{r4, r5, pc}
  switch (reg.odr) {
 8001e32:	2300      	movs	r3, #0
      *val = HTS221_ONE_SHOT;
 8001e34:	7023      	strb	r3, [r4, #0]
}
 8001e36:	b003      	add	sp, #12
 8001e38:	bd30      	pop	{r4, r5, pc}
      break;
 8001e3a:	2303      	movs	r3, #3
      *val = HTS221_ONE_SHOT;
 8001e3c:	7023      	strb	r3, [r4, #0]
}
 8001e3e:	b003      	add	sp, #12
 8001e40:	bd30      	pop	{r4, r5, pc}
      break;
 8001e42:	2302      	movs	r3, #2
      *val = HTS221_ONE_SHOT;
 8001e44:	7023      	strb	r3, [r4, #0]
}
 8001e46:	b003      	add	sp, #12
 8001e48:	bd30      	pop	{r4, r5, pc}
      break;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e7ee      	b.n	8001e2c <hts221_data_rate_get+0x28>
 8001e4e:	bf00      	nop

08001e50 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	4604      	mov	r4, r0
 8001e54:	b082      	sub	sp, #8
 8001e56:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e58:	6880      	ldr	r0, [r0, #8]
 8001e5a:	6866      	ldr	r6, [r4, #4]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	aa01      	add	r2, sp, #4
 8001e60:	2120      	movs	r1, #32
 8001e62:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8001e64:	b958      	cbnz	r0, 8001e7e <hts221_block_data_update_set+0x2e>
    reg.bdu = val;
 8001e66:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001e6a:	6826      	ldr	r6, [r4, #0]
 8001e6c:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8001e6e:	f365 0382 	bfi	r3, r5, #2, #1
 8001e72:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001e76:	aa01      	add	r2, sp, #4
 8001e78:	2301      	movs	r3, #1
 8001e7a:	2120      	movs	r1, #32
 8001e7c:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8001e7e:	b002      	add	sp, #8
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	bf00      	nop

08001e84 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001e84:	b530      	push	{r4, r5, lr}
 8001e86:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e88:	aa01      	add	r2, sp, #4
{
 8001e8a:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e8c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001e90:	2302      	movs	r3, #2
 8001e92:	2128      	movs	r1, #40	@ 0x28
 8001e94:	47a8      	blx	r5
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 8001e96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001e9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e9e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001ea2:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd30      	pop	{r4, r5, pc}

08001ea8 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ea8:	b530      	push	{r4, r5, lr}
 8001eaa:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001eac:	aa01      	add	r2, sp, #4
{
 8001eae:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001eb0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	212a      	movs	r1, #42	@ 0x2a
 8001eb8:	47a8      	blx	r5
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 8001eba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001ebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ec2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001ec6:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8001ec8:	b003      	add	sp, #12
 8001eca:	bd30      	pop	{r4, r5, pc}

08001ecc <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001ecc:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ece:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8001ed2:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ed4:	46a4      	mov	ip, r4
 8001ed6:	2301      	movs	r3, #1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
  return ret;
}
 8001ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001edc:	210f      	movs	r1, #15
 8001ede:	4760      	bx	ip

08001ee0 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001ee0:	b570      	push	{r4, r5, r6, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ee8:	6880      	ldr	r0, [r0, #8]
 8001eea:	6866      	ldr	r6, [r4, #4]
 8001eec:	2301      	movs	r3, #1
 8001eee:	aa01      	add	r2, sp, #4
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8001ef4:	b958      	cbnz	r0, 8001f0e <hts221_power_on_set+0x2e>
    reg.pd = val;
 8001ef6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001efa:	6826      	ldr	r6, [r4, #0]
 8001efc:	68a0      	ldr	r0, [r4, #8]
    reg.pd = val;
 8001efe:	f365 13c7 	bfi	r3, r5, #7, #1
 8001f02:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001f06:	aa01      	add	r2, sp, #4
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd70      	pop	{r4, r5, r6, pc}
 8001f12:	bf00      	nop

08001f14 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001f14:	b530      	push	{r4, r5, lr}
 8001f16:	b083      	sub	sp, #12
 8001f18:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f1a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f10d 0207 	add.w	r2, sp, #7
 8001f24:	2130      	movs	r1, #48	@ 0x30
 8001f26:	47a8      	blx	r5
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
  *val = coeff / 2.0f;
 8001f28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8001f34:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8001f38:	b003      	add	sp, #12
 8001f3a:	bd30      	pop	{r4, r5, pc}

08001f3c <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001f3c:	b530      	push	{r4, r5, lr}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f42:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001f46:	2301      	movs	r3, #1
 8001f48:	f10d 0207 	add.w	r2, sp, #7
 8001f4c:	2131      	movs	r1, #49	@ 0x31
 8001f4e:	47a8      	blx	r5
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
  *val = coeff / 2.0f;
 8001f50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8001f5c:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8001f60:	b003      	add	sp, #12
 8001f62:	bd30      	pop	{r4, r5, pc}

08001f64 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	4604      	mov	r4, r0
 8001f68:	b082      	sub	sp, #8
 8001f6a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f6c:	6880      	ldr	r0, [r0, #8]
 8001f6e:	6866      	ldr	r6, [r4, #4]
 8001f70:	2301      	movs	r3, #1
 8001f72:	f10d 0207 	add.w	r2, sp, #7
 8001f76:	2132      	movs	r1, #50	@ 0x32
 8001f78:	47b0      	blx	r6
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);

  if (ret == 0) {
 8001f7a:	b998      	cbnz	r0, 8001fa4 <hts221_temp_deg_point_0_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	aa01      	add	r2, sp, #4
 8001f80:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8001f84:	2135      	movs	r1, #53	@ 0x35
 8001f86:	47b0      	blx	r6
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
    coeff_h = reg.t0_msb;
 8001f88:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001f8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f90:	f002 0203 	and.w	r2, r2, #3
 8001f94:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8001fa0:	edc5 7a00 	vstr	s15, [r5]
  }

  return ret;
}
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}

08001fa8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	4604      	mov	r4, r0
 8001fac:	b082      	sub	sp, #8
 8001fae:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fb0:	6880      	ldr	r0, [r0, #8]
 8001fb2:	6866      	ldr	r6, [r4, #4]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f10d 0207 	add.w	r2, sp, #7
 8001fba:	2133      	movs	r1, #51	@ 0x33
 8001fbc:	47b0      	blx	r6
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);

  if (ret == 0) {
 8001fbe:	b998      	cbnz	r0, 8001fe8 <hts221_temp_deg_point_1_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	aa01      	add	r2, sp, #4
 8001fc4:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8001fc8:	2135      	movs	r1, #53	@ 0x35
 8001fca:	47b0      	blx	r6
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
    coeff_h = reg.t1_msb;
 8001fcc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001fd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fd4:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8001fd8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8001fe4:	edc5 7a00 	vstr	s15, [r5]
  }

  return ret;
}
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd70      	pop	{r4, r5, r6, pc}

08001fec <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001fec:	b530      	push	{r4, r5, lr}
 8001fee:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ff0:	aa01      	add	r2, sp, #4
{
 8001ff2:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ff4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	2136      	movs	r1, #54	@ 0x36
 8001ffc:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001ffe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002002:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002006:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 800200a:	b21b      	sxth	r3, r3
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8002018:	b003      	add	sp, #12
 800201a:	bd30      	pop	{r4, r5, pc}

0800201c <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800201c:	b530      	push	{r4, r5, lr}
 800201e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002020:	aa01      	add	r2, sp, #4
{
 8002022:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002024:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002028:	2302      	movs	r3, #2
 800202a:	213a      	movs	r1, #58	@ 0x3a
 800202c:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800202e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002032:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002036:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 800203a:	b21b      	sxth	r3, r3
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002044:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8002048:	b003      	add	sp, #12
 800204a:	bd30      	pop	{r4, r5, pc}

0800204c <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800204c:	b530      	push	{r4, r5, lr}
 800204e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002050:	aa01      	add	r2, sp, #4
{
 8002052:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002054:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002058:	2302      	movs	r3, #2
 800205a:	213c      	movs	r1, #60	@ 0x3c
 800205c:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800205e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002062:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002066:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 800206a:	b21b      	sxth	r3, r3
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002074:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8002078:	b003      	add	sp, #12
 800207a:	bd30      	pop	{r4, r5, pc}

0800207c <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800207c:	b530      	push	{r4, r5, lr}
 800207e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002080:	aa01      	add	r2, sp, #4
{
 8002082:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002084:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002088:	2302      	movs	r3, #2
 800208a:	213e      	movs	r1, #62	@ 0x3e
 800208c:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800208e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002092:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002096:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 800209a:	b21b      	sxth	r3, r3
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a4:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80020a8:	b003      	add	sp, #12
 80020aa:	bd30      	pop	{r4, r5, pc}

080020ac <IIS2DH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2DH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DH_GetCapabilities(IIS2DH_Object_t *pObj, IIS2DH_Capabilities_t *Capabilities)
{
 80020ac:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80020ae:	4c07      	ldr	r4, [pc, #28]	@ (80020cc <IIS2DH_GetCapabilities+0x20>)
  Capabilities->LowPower     = 1;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 5376.0f;
 80020b0:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <IIS2DH_GetCapabilities+0x24>)
  Capabilities->Acc          = 1;
 80020b2:	600c      	str	r4, [r1, #0]
  Capabilities->GyroMaxFS    = 0;
 80020b4:	2000      	movs	r0, #0
  Capabilities->GyroMaxOdr   = 0.0f;
 80020b6:	2300      	movs	r3, #0
  Capabilities->AccMaxFS     = 16;
 80020b8:	2410      	movs	r4, #16
 80020ba:	e9c1 0401 	strd	r0, r4, [r1, #4]
  Capabilities->MagMaxOdr    = 0.0f;
  return IIS2DH_OK;
}
 80020be:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxFS     = 0;
 80020c2:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80020c4:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 5376.0f;
 80020c6:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80020c8:	618b      	str	r3, [r1, #24]
}
 80020ca:	4770      	bx	lr
 80020cc:	01000001 	.word	0x01000001
 80020d0:	45a80000 	.word	0x45a80000

080020d4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80020d4:	b410      	push	{r4}
  IIS2DH_Object_t *pObj = (IIS2DH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80020d6:	6944      	ldr	r4, [r0, #20]
 80020d8:	7b00      	ldrb	r0, [r0, #12]
 80020da:	46a4      	mov	ip, r4
}
 80020dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80020e0:	4760      	bx	ip
 80020e2:	bf00      	nop

080020e4 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80020e4:	b410      	push	{r4}
  IIS2DH_Object_t *pObj = (IIS2DH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80020e6:	6904      	ldr	r4, [r0, #16]
 80020e8:	7b00      	ldrb	r0, [r0, #12]
 80020ea:	46a4      	mov	ip, r4
}
 80020ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80020f0:	4760      	bx	ip
 80020f2:	bf00      	nop

080020f4 <IIS2DH_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 80020f4:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80020f8:	b90b      	cbnz	r3, 80020fe <IIS2DH_ACC_Disable+0xa>
    return IIS2DH_OK;
 80020fa:	2000      	movs	r0, #0
}
 80020fc:	4770      	bx	lr
{
 80020fe:	b510      	push	{r4, lr}
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 8002100:	2100      	movs	r1, #0
 8002102:	4604      	mov	r4, r0
 8002104:	301c      	adds	r0, #28
 8002106:	f000 fbc7 	bl	8002898 <iis2dh_data_rate_set>
 800210a:	b918      	cbnz	r0, 8002114 <IIS2DH_ACC_Disable+0x20>
  pObj->acc_is_enabled = 0;
 800210c:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS2DH_OK;
 8002110:	2000      	movs	r0, #0
}
 8002112:	bd10      	pop	{r4, pc}
    return IIS2DH_ERROR;
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002118:	bd10      	pop	{r4, pc}
 800211a:	bf00      	nop

0800211c <IIS2DH_DeInit>:
{
 800211c:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 800211e:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8002122:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8002124:	b933      	cbnz	r3, 8002134 <IIS2DH_DeInit+0x18>
  pObj->is_initialized = 0;
 8002126:	2000      	movs	r0, #0
  pObj->acc_odr = IIS2DH_ODR_1Hz;
 8002128:	2301      	movs	r3, #1
 800212a:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pObj->is_initialized = 0;
 800212e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8002132:	bd10      	pop	{r4, pc}
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 8002134:	2100      	movs	r1, #0
 8002136:	301c      	adds	r0, #28
 8002138:	f000 fbae 	bl	8002898 <iis2dh_data_rate_set>
 800213c:	b910      	cbnz	r0, 8002144 <IIS2DH_DeInit+0x28>
  pObj->acc_is_enabled = 0;
 800213e:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS2DH_OK;
 8002142:	e7f0      	b.n	8002126 <IIS2DH_DeInit+0xa>
    return IIS2DH_ERROR;
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002148:	bd10      	pop	{r4, pc}
 800214a:	bf00      	nop

0800214c <IIS2DH_ACC_SetFullScale>:
         : (FullScale <= 4) ? IIS2DH_4g
 800214c:	2902      	cmp	r1, #2
{
 800214e:	b508      	push	{r3, lr}
         : (FullScale <= 4) ? IIS2DH_4g
 8002150:	dd06      	ble.n	8002160 <IIS2DH_ACC_SetFullScale+0x14>
 8002152:	2904      	cmp	r1, #4
 8002154:	dd0d      	ble.n	8002172 <IIS2DH_ACC_SetFullScale+0x26>
 8002156:	2908      	cmp	r1, #8
 8002158:	bfcc      	ite	gt
 800215a:	2103      	movgt	r1, #3
 800215c:	2102      	movle	r1, #2
 800215e:	e000      	b.n	8002162 <IIS2DH_ACC_SetFullScale+0x16>
 8002160:	2100      	movs	r1, #0
  if (iis2dh_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DH_OK)
 8002162:	301c      	adds	r0, #28
 8002164:	f000 fbf8 	bl	8002958 <iis2dh_full_scale_set>
 8002168:	3800      	subs	r0, #0
 800216a:	bf18      	it	ne
 800216c:	2001      	movne	r0, #1
}
 800216e:	4240      	negs	r0, r0
 8002170:	bd08      	pop	{r3, pc}
         : (FullScale <= 4) ? IIS2DH_4g
 8002172:	2101      	movs	r1, #1
 8002174:	e7f5      	b.n	8002162 <IIS2DH_ACC_SetFullScale+0x16>
 8002176:	bf00      	nop

08002178 <IIS2DH_Init>:
{
 8002178:	b570      	push	{r4, r5, r6, lr}
  if (iis2dh_spi_mode_set(&(pObj->Ctx), IIS2DH_SPI_4_WIRE) != IIS2DH_OK)
 800217a:	f100 041c 	add.w	r4, r0, #28
{
 800217e:	b084      	sub	sp, #16
 8002180:	4605      	mov	r5, r0
  if (iis2dh_spi_mode_set(&(pObj->Ctx), IIS2DH_SPI_4_WIRE) != IIS2DH_OK)
 8002182:	2100      	movs	r1, #0
 8002184:	4620      	mov	r0, r4
 8002186:	f000 fc93 	bl	8002ab0 <iis2dh_spi_mode_set>
 800218a:	2800      	cmp	r0, #0
 800218c:	d173      	bne.n	8002276 <IIS2DH_Init+0xfe>
  if (iis2dh_boot_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DH_OK)
 800218e:	2101      	movs	r1, #1
 8002190:	4620      	mov	r0, r4
 8002192:	f000 fc73 	bl	8002a7c <iis2dh_boot_set>
 8002196:	2800      	cmp	r0, #0
 8002198:	d16d      	bne.n	8002276 <IIS2DH_Init+0xfe>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800219a:	2301      	movs	r3, #1
 800219c:	aa01      	add	r2, sp, #4
 800219e:	2120      	movs	r1, #32
 80021a0:	4620      	mov	r0, r4
 80021a2:	f000 fae3 	bl	800276c <iis2dh_read_reg>
  if (ret == 0) {
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d03e      	beq.n	8002228 <IIS2DH_Init+0xb0>
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 80021aa:	2100      	movs	r1, #0
 80021ac:	4620      	mov	r0, r4
 80021ae:	f000 fb73 	bl	8002898 <iis2dh_data_rate_set>
 80021b2:	4601      	mov	r1, r0
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d15e      	bne.n	8002276 <IIS2DH_Init+0xfe>
  if (iis2dh_temperature_meas_set(&(pObj->Ctx), IIS2DH_TEMP_DISABLE) != IIS2DH_OK)
 80021b8:	4620      	mov	r0, r4
 80021ba:	f000 fae7 	bl	800278c <iis2dh_temperature_meas_set>
 80021be:	4601      	mov	r1, r0
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d158      	bne.n	8002276 <IIS2DH_Init+0xfe>
  if (iis2dh_high_pass_on_outputs_set(&(pObj->Ctx), 0) != IIS2DH_OK)
 80021c4:	4620      	mov	r0, r4
 80021c6:	f000 fbad 	bl	8002924 <iis2dh_high_pass_on_outputs_set>
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d153      	bne.n	8002276 <IIS2DH_Init+0xfe>
  if (iis2dh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DH_OK)
 80021ce:	2101      	movs	r1, #1
 80021d0:	4620      	mov	r0, r4
 80021d2:	f000 fbf5 	bl	80029c0 <iis2dh_block_data_update_set>
 80021d6:	4601      	mov	r1, r0
 80021d8:	2800      	cmp	r0, #0
 80021da:	d14c      	bne.n	8002276 <IIS2DH_Init+0xfe>
  if (iis2dh_data_format_set(&(pObj->Ctx), IIS2DH_LSB_AT_LOW_ADD) != IIS2DH_OK)
 80021dc:	4620      	mov	r0, r4
 80021de:	f000 fc33 	bl	8002a48 <iis2dh_data_format_set>
 80021e2:	4601      	mov	r1, r0
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d146      	bne.n	8002276 <IIS2DH_Init+0xfe>
  if (iis2dh_full_scale_set(&(pObj->Ctx), IIS2DH_2g) != IIS2DH_OK)
 80021e8:	4620      	mov	r0, r4
 80021ea:	f000 fbb5 	bl	8002958 <iis2dh_full_scale_set>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d141      	bne.n	8002276 <IIS2DH_Init+0xfe>
  if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_LP_8bit) != IIS2DH_OK)
 80021f2:	2102      	movs	r1, #2
 80021f4:	4620      	mov	r0, r4
 80021f6:	f000 fae3 	bl	80027c0 <iis2dh_operating_mode_set>
 80021fa:	4606      	mov	r6, r0
 80021fc:	2800      	cmp	r0, #0
 80021fe:	d13a      	bne.n	8002276 <IIS2DH_Init+0xfe>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 8002200:	2301      	movs	r3, #1
 8002202:	aa02      	add	r2, sp, #8
 8002204:	2122      	movs	r1, #34	@ 0x22
 8002206:	4620      	mov	r0, r4
 8002208:	f000 fab0 	bl	800276c <iis2dh_read_reg>
  if (ret == 0) {
 800220c:	b330      	cbz	r0, 800225c <IIS2DH_Init+0xe4>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 800220e:	2301      	movs	r3, #1
 8002210:	aa03      	add	r2, sp, #12
 8002212:	2124      	movs	r1, #36	@ 0x24
 8002214:	4620      	mov	r0, r4
 8002216:	f000 faa9 	bl	800276c <iis2dh_read_reg>
  if (ret == 0) {
 800221a:	b190      	cbz	r0, 8002242 <IIS2DH_Init+0xca>
  pObj->is_initialized = 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4630      	mov	r0, r6
  pObj->is_initialized = 1;
 8002220:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 8002224:	b004      	add	sp, #16
 8002226:	bd70      	pop	{r4, r5, r6, pc}
    ctrl_reg1.xen = 0;
 8002228:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800222c:	f021 0107 	bic.w	r1, r1, #7
 8002230:	f88d 1004 	strb.w	r1, [sp, #4]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002234:	2301      	movs	r3, #1
 8002236:	aa01      	add	r2, sp, #4
 8002238:	2120      	movs	r1, #32
 800223a:	4620      	mov	r0, r4
 800223c:	f000 fa9e 	bl	800277c <iis2dh_write_reg>
 8002240:	e7b3      	b.n	80021aa <IIS2DH_Init+0x32>
    ctrl_reg5.lir_int1 = 1;
 8002242:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002246:	f043 0308 	orr.w	r3, r3, #8
 800224a:	f88d 300c 	strb.w	r3, [sp, #12]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 800224e:	aa03      	add	r2, sp, #12
 8002250:	4620      	mov	r0, r4
 8002252:	2301      	movs	r3, #1
 8002254:	2124      	movs	r1, #36	@ 0x24
 8002256:	f000 fa91 	bl	800277c <iis2dh_write_reg>
 800225a:	e7df      	b.n	800221c <IIS2DH_Init+0xa4>
    ctrl_reg3.i1_drdy1 = 1;
 800225c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002260:	f043 0310 	orr.w	r3, r3, #16
 8002264:	f88d 3008 	strb.w	r3, [sp, #8]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 8002268:	aa02      	add	r2, sp, #8
 800226a:	2301      	movs	r3, #1
 800226c:	2122      	movs	r1, #34	@ 0x22
 800226e:	4620      	mov	r0, r4
 8002270:	f000 fa84 	bl	800277c <iis2dh_write_reg>
 8002274:	e7cb      	b.n	800220e <IIS2DH_Init+0x96>
    return IIS2DH_ERROR;
 8002276:	f04f 36ff 	mov.w	r6, #4294967295
}
 800227a:	4630      	mov	r0, r6
 800227c:	b004      	add	sp, #16
 800227e:	bd70      	pop	{r4, r5, r6, pc}

08002280 <IIS2DH_ACC_SetOutputDataRate>:
{
 8002280:	b510      	push	{r4, lr}
 8002282:	ed2d 8b02 	vpush	{d8}
  if (pObj->acc_is_enabled == 1U)
 8002286:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800228a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->acc_is_enabled == 1U)
 800228e:	2901      	cmp	r1, #1
{
 8002290:	eeb0 8a40 	vmov.f32	s16, s0
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002294:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8002298:	d043      	beq.n	8002322 <IIS2DH_ACC_SetOutputDataRate+0xa2>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	d937      	bls.n	8002310 <IIS2DH_ACC_SetOutputDataRate+0x90>
 80022a0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80022a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	d937      	bls.n	800231e <IIS2DH_ACC_SetOutputDataRate+0x9e>
 80022ae:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 80022b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	f240 8085 	bls.w	80023c8 <IIS2DH_ACC_SetOutputDataRate+0x148>
 80022be:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8002408 <IIS2DH_ACC_SetOutputDataRate+0x188>
 80022c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	f240 808a 	bls.w	80023e2 <IIS2DH_ACC_SetOutputDataRate+0x162>
 80022ce:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800240c <IIS2DH_ACC_SetOutputDataRate+0x18c>
 80022d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	f240 8086 	bls.w	80023ea <IIS2DH_ACC_SetOutputDataRate+0x16a>
 80022de:	eddf 7a4c 	vldr	s15, [pc, #304]	@ 8002410 <IIS2DH_ACC_SetOutputDataRate+0x190>
 80022e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	f240 8082 	bls.w	80023f2 <IIS2DH_ACC_SetOutputDataRate+0x172>
 80022ee:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8002414 <IIS2DH_ACC_SetOutputDataRate+0x194>
 80022f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d97e      	bls.n	80023fa <IIS2DH_ACC_SetOutputDataRate+0x17a>
 80022fc:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8002418 <IIS2DH_ACC_SetOutputDataRate+0x198>
 8002300:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	bf94      	ite	ls
 800230a:	2308      	movls	r3, #8
 800230c:	2309      	movhi	r3, #9
 800230e:	e000      	b.n	8002312 <IIS2DH_ACC_SetOutputDataRate+0x92>
 8002310:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 8002312:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    return IIS2DH_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002316:	2000      	movs	r0, #0
}
 8002318:	ecbd 8b02 	vpop	{d8}
 800231c:	bd10      	pop	{r4, pc}
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800231e:	2302      	movs	r3, #2
 8002320:	e7f7      	b.n	8002312 <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	d932      	bls.n	800238e <IIS2DH_ACC_SetOutputDataRate+0x10e>
 8002328:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800232c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	d953      	bls.n	80023de <IIS2DH_ACC_SetOutputDataRate+0x15e>
 8002336:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 800233a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002342:	d950      	bls.n	80023e6 <IIS2DH_ACC_SetOutputDataRate+0x166>
 8002344:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8002408 <IIS2DH_ACC_SetOutputDataRate+0x188>
 8002348:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	d94d      	bls.n	80023ee <IIS2DH_ACC_SetOutputDataRate+0x16e>
 8002352:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 800240c <IIS2DH_ACC_SetOutputDataRate+0x18c>
 8002356:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800235a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235e:	d94a      	bls.n	80023f6 <IIS2DH_ACC_SetOutputDataRate+0x176>
 8002360:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8002410 <IIS2DH_ACC_SetOutputDataRate+0x190>
 8002364:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	d947      	bls.n	80023fe <IIS2DH_ACC_SetOutputDataRate+0x17e>
 800236e:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8002414 <IIS2DH_ACC_SetOutputDataRate+0x194>
 8002372:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d942      	bls.n	8002402 <IIS2DH_ACC_SetOutputDataRate+0x182>
 800237c:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8002418 <IIS2DH_ACC_SetOutputDataRate+0x198>
 8002380:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	bf94      	ite	ls
 800238a:	2108      	movls	r1, #8
 800238c:	2109      	movhi	r1, #9
  if (iis2dh_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DH_OK)
 800238e:	f100 041c 	add.w	r4, r0, #28
 8002392:	4620      	mov	r0, r4
 8002394:	f000 fa80 	bl	8002898 <iis2dh_data_rate_set>
 8002398:	b9f0      	cbnz	r0, 80023d8 <IIS2DH_ACC_SetOutputDataRate+0x158>
  if (Odr <= 1.6f)
 800239a:	eddf 7a20 	vldr	s15, [pc, #128]	@ 800241c <IIS2DH_ACC_SetOutputDataRate+0x19c>
 800239e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a6:	d911      	bls.n	80023cc <IIS2DH_ACC_SetOutputDataRate+0x14c>
  if (Odr > 200.0f)
 80023a8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002410 <IIS2DH_ACC_SetOutputDataRate+0x190>
 80023ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	ddaf      	ble.n	8002316 <IIS2DH_ACC_SetOutputDataRate+0x96>
    if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_HR_12bit) != IIS2DH_OK)
 80023b6:	2100      	movs	r1, #0
 80023b8:	4620      	mov	r0, r4
 80023ba:	f000 fa01 	bl	80027c0 <iis2dh_operating_mode_set>
 80023be:	3800      	subs	r0, #0
 80023c0:	bf18      	it	ne
 80023c2:	2001      	movne	r0, #1
 80023c4:	4240      	negs	r0, r0
 80023c6:	e7a7      	b.n	8002318 <IIS2DH_ACC_SetOutputDataRate+0x98>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023c8:	2303      	movs	r3, #3
 80023ca:	e7a2      	b.n	8002312 <IIS2DH_ACC_SetOutputDataRate+0x92>
    if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_LP_8bit) != IIS2DH_OK)
 80023cc:	2102      	movs	r1, #2
 80023ce:	4620      	mov	r0, r4
 80023d0:	f000 f9f6 	bl	80027c0 <iis2dh_operating_mode_set>
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d0e7      	beq.n	80023a8 <IIS2DH_ACC_SetOutputDataRate+0x128>
    return IIS2DH_ERROR;
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	e79c      	b.n	8002318 <IIS2DH_ACC_SetOutputDataRate+0x98>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023de:	2102      	movs	r1, #2
 80023e0:	e7d5      	b.n	800238e <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023e2:	2304      	movs	r3, #4
 80023e4:	e795      	b.n	8002312 <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023e6:	2103      	movs	r1, #3
 80023e8:	e7d1      	b.n	800238e <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023ea:	2305      	movs	r3, #5
 80023ec:	e791      	b.n	8002312 <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023ee:	2104      	movs	r1, #4
 80023f0:	e7cd      	b.n	800238e <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023f2:	2306      	movs	r3, #6
 80023f4:	e78d      	b.n	8002312 <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023f6:	2105      	movs	r1, #5
 80023f8:	e7c9      	b.n	800238e <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023fa:	2307      	movs	r3, #7
 80023fc:	e789      	b.n	8002312 <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80023fe:	2106      	movs	r1, #6
 8002400:	e7c5      	b.n	800238e <IIS2DH_ACC_SetOutputDataRate+0x10e>
 8002402:	2107      	movs	r1, #7
 8002404:	e7c3      	b.n	800238e <IIS2DH_ACC_SetOutputDataRate+0x10e>
 8002406:	bf00      	nop
 8002408:	42480000 	.word	0x42480000
 800240c:	42c80000 	.word	0x42c80000
 8002410:	43480000 	.word	0x43480000
 8002414:	43c80000 	.word	0x43c80000
 8002418:	44ca8000 	.word	0x44ca8000
 800241c:	3fcccccd 	.word	0x3fcccccd

08002420 <IIS2DH_ReadID>:
{
 8002420:	b508      	push	{r3, lr}
  if (iis2dh_device_id_get(&(pObj->Ctx), Id) != IIS2DH_OK)
 8002422:	301c      	adds	r0, #28
 8002424:	f000 fb06 	bl	8002a34 <iis2dh_device_id_get>
 8002428:	3800      	subs	r0, #0
 800242a:	bf18      	it	ne
 800242c:	2001      	movne	r0, #1
}
 800242e:	4240      	negs	r0, r0
 8002430:	bd08      	pop	{r3, pc}
 8002432:	bf00      	nop

08002434 <IIS2DH_ACC_GetFullScale>:
{
 8002434:	b510      	push	{r4, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	460c      	mov	r4, r1
  if (iis2dh_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DH_OK)
 800243a:	301c      	adds	r0, #28
 800243c:	f10d 0107 	add.w	r1, sp, #7
 8002440:	f000 faa4 	bl	800298c <iis2dh_full_scale_get>
 8002444:	b9a0      	cbnz	r0, 8002470 <IIS2DH_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 8002446:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d80d      	bhi.n	800246a <IIS2DH_ACC_GetFullScale+0x36>
 800244e:	e8df f003 	tbb	[pc, r3]
 8002452:	0206      	.short	0x0206
 8002454:	080a      	.short	0x080a
 8002456:	2304      	movs	r3, #4
      *FullScale =  2;
 8002458:	6023      	str	r3, [r4, #0]
}
 800245a:	b002      	add	sp, #8
 800245c:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 800245e:	2302      	movs	r3, #2
 8002460:	e7fa      	b.n	8002458 <IIS2DH_ACC_GetFullScale+0x24>
      break;
 8002462:	2310      	movs	r3, #16
 8002464:	e7f8      	b.n	8002458 <IIS2DH_ACC_GetFullScale+0x24>
      break;
 8002466:	2308      	movs	r3, #8
 8002468:	e7f6      	b.n	8002458 <IIS2DH_ACC_GetFullScale+0x24>
      *FullScale = -1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	6023      	str	r3, [r4, #0]
    return IIS2DH_ERROR;
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002474:	b002      	add	sp, #8
 8002476:	bd10      	pop	{r4, pc}

08002478 <IIS2DH_ACC_GetSensitivity>:
{
 8002478:	b530      	push	{r4, r5, lr}
  if (iis2dh_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DH_OK)
 800247a:	f100 041c 	add.w	r4, r0, #28
{
 800247e:	b083      	sub	sp, #12
 8002480:	460d      	mov	r5, r1
  if (iis2dh_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DH_OK)
 8002482:	4620      	mov	r0, r4
 8002484:	f10d 0106 	add.w	r1, sp, #6
 8002488:	f000 fa80 	bl	800298c <iis2dh_full_scale_get>
 800248c:	b970      	cbnz	r0, 80024ac <IIS2DH_ACC_GetSensitivity+0x34>
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &mode) != IIS2DH_OK)
 800248e:	f10d 0107 	add.w	r1, sp, #7
 8002492:	4620      	mov	r0, r4
 8002494:	f000 f9e0 	bl	8002858 <iis2dh_operating_mode_get>
 8002498:	b940      	cbnz	r0, 80024ac <IIS2DH_ACC_GetSensitivity+0x34>
  switch(mode)
 800249a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d018      	beq.n	80024d4 <IIS2DH_ACC_GetSensitivity+0x5c>
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d00e      	beq.n	80024c4 <IIS2DH_ACC_GetSensitivity+0x4c>
 80024a6:	b12b      	cbz	r3, 80024b4 <IIS2DH_ACC_GetSensitivity+0x3c>
      *Sensitivity = -1.0f;
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <IIS2DH_ACC_GetSensitivity+0x98>)
 80024aa:	602b      	str	r3, [r5, #0]
    return IIS2DH_ERROR;
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80024b0:	b003      	add	sp, #12
 80024b2:	bd30      	pop	{r4, r5, pc}
    switch (full_scale)
 80024b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d8f5      	bhi.n	80024a8 <IIS2DH_ACC_GetSensitivity+0x30>
 80024bc:	e8df f003 	tbb	[pc, r3]
 80024c0:	1d151f1b 	.word	0x1d151f1b
    switch (full_scale)
 80024c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d8ed      	bhi.n	80024a8 <IIS2DH_ACC_GetSensitivity+0x30>
 80024cc:	e8df f003 	tbb	[pc, r3]
 80024d0:	1d1b0f0a 	.word	0x1d1b0f0a
    switch (full_scale)
 80024d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d8e5      	bhi.n	80024a8 <IIS2DH_ACC_GetSensitivity+0x30>
 80024dc:	e8df f003 	tbb	[pc, r3]
 80024e0:	11020905 	.word	0x11020905
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <IIS2DH_ACC_GetSensitivity+0x9c>)
      *Sensitivity = IIS2DH_ACC_SENSITIVITY_8G_LPM;
 80024e6:	602b      	str	r3, [r5, #0]
 80024e8:	e7e2      	b.n	80024b0 <IIS2DH_ACC_GetSensitivity+0x38>
 80024ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <IIS2DH_ACC_GetSensitivity+0xa0>)
 80024ec:	e7fb      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <IIS2DH_ACC_GetSensitivity+0xa4>)
 80024f0:	e7f9      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <IIS2DH_ACC_GetSensitivity+0xa8>)
 80024f4:	e7f7      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <IIS2DH_ACC_GetSensitivity+0xac>)
 80024f8:	e7f5      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <IIS2DH_ACC_GetSensitivity+0xb0>)
 80024fc:	e7f3      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <IIS2DH_ACC_GetSensitivity+0xb4>)
 8002500:	e7f1      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <IIS2DH_ACC_GetSensitivity+0xb8>)
 8002504:	e7ef      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <IIS2DH_ACC_GetSensitivity+0xbc>)
 8002508:	e7ed      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 800250a:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <IIS2DH_ACC_GetSensitivity+0xc0>)
 800250c:	e7eb      	b.n	80024e6 <IIS2DH_ACC_GetSensitivity+0x6e>
 800250e:	bf00      	nop
 8002510:	bf800000 	.word	0xbf800000
 8002514:	417a147b 	.word	0x417a147b
 8002518:	407a3d71 	.word	0x407a3d71
 800251c:	41fa0000 	.word	0x41fa0000
 8002520:	40f9eb85 	.word	0x40f9eb85
 8002524:	3f7ae148 	.word	0x3f7ae148
 8002528:	413b851f 	.word	0x413b851f
 800252c:	3ff9999a 	.word	0x3ff9999a
 8002530:	423bcccd 	.word	0x423bcccd
 8002534:	427a0000 	.word	0x427a0000
 8002538:	433cae14 	.word	0x433cae14

0800253c <IIS2DH_ACC_GetOutputDataRate>:
{
 800253c:	b510      	push	{r4, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	460c      	mov	r4, r1
  if (iis2dh_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DH_OK)
 8002542:	301c      	adds	r0, #28
 8002544:	f10d 0107 	add.w	r1, sp, #7
 8002548:	f000 f9c0 	bl	80028cc <iis2dh_data_rate_get>
 800254c:	bb18      	cbnz	r0, 8002596 <IIS2DH_ACC_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 800254e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002552:	2b09      	cmp	r3, #9
 8002554:	d81d      	bhi.n	8002592 <IIS2DH_ACC_GetOutputDataRate+0x56>
 8002556:	e8df f003 	tbb	[pc, r3]
 800255a:	050a      	.short	0x050a
 800255c:	1816140c 	.word	0x1816140c
 8002560:	0e12101a 	.word	0x0e12101a
 8002564:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    *odr =  0.0f;
 8002568:	6023      	str	r3, [r4, #0]
}
 800256a:	b002      	add	sp, #8
 800256c:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 800256e:	2300      	movs	r3, #0
 8002570:	e7fa      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <IIS2DH_ACC_GetOutputDataRate+0x60>)
 8002574:	e7f8      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <IIS2DH_ACC_GetOutputDataRate+0x64>)
 8002578:	e7f6      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <IIS2DH_ACC_GetOutputDataRate+0x68>)
 800257c:	e7f4      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <IIS2DH_ACC_GetOutputDataRate+0x6c>)
 8002580:	e7f2      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 8002582:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <IIS2DH_ACC_GetOutputDataRate+0x70>)
 8002584:	e7f0      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <IIS2DH_ACC_GetOutputDataRate+0x74>)
 8002588:	e7ee      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <IIS2DH_ACC_GetOutputDataRate+0x78>)
 800258c:	e7ec      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <IIS2DH_ACC_GetOutputDataRate+0x7c>)
 8002590:	e7ea      	b.n	8002568 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    *odr = -1.0f;
 8002592:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <IIS2DH_ACC_GetOutputDataRate+0x80>)
 8002594:	6023      	str	r3, [r4, #0]
    return IIS2DH_ERROR;
 8002596:	f04f 30ff 	mov.w	r0, #4294967295
 800259a:	e7e6      	b.n	800256a <IIS2DH_ACC_GetOutputDataRate+0x2e>
 800259c:	41200000 	.word	0x41200000
 80025a0:	44a80000 	.word	0x44a80000
 80025a4:	43c80000 	.word	0x43c80000
 80025a8:	44ca8000 	.word	0x44ca8000
 80025ac:	41c80000 	.word	0x41c80000
 80025b0:	42480000 	.word	0x42480000
 80025b4:	42c80000 	.word	0x42c80000
 80025b8:	43480000 	.word	0x43480000
 80025bc:	bf800000 	.word	0xbf800000

080025c0 <IIS2DH_ACC_GetAxesRaw>:
{
 80025c0:	b530      	push	{r4, r5, lr}
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 80025c2:	f100 051c 	add.w	r5, r0, #28
{
 80025c6:	b085      	sub	sp, #20
 80025c8:	460c      	mov	r4, r1
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 80025ca:	4628      	mov	r0, r5
 80025cc:	f10d 0107 	add.w	r1, sp, #7
 80025d0:	f000 f942 	bl	8002858 <iis2dh_operating_mode_get>
 80025d4:	b9e0      	cbnz	r0, 8002610 <IIS2DH_ACC_GetAxesRaw+0x50>
  switch (op_mode)
 80025d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d818      	bhi.n	8002610 <IIS2DH_ACC_GetAxesRaw+0x50>
 80025de:	4a0e      	ldr	r2, [pc, #56]	@ (8002618 <IIS2DH_ACC_GetAxesRaw+0x58>)
  if (iis2dh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DH_OK)
 80025e0:	4628      	mov	r0, r5
 80025e2:	a902      	add	r1, sp, #8
 80025e4:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 80025e8:	f000 fa04 	bl	80029f4 <iis2dh_acceleration_raw_get>
 80025ec:	b980      	cbnz	r0, 8002610 <IIS2DH_ACC_GetAxesRaw+0x50>
  Value->x = (data_raw.i16bit[0] / divisor);
 80025ee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Value->y = (data_raw.i16bit[1] / divisor);
 80025f2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Value->x = (data_raw.i16bit[0] / divisor);
 80025f6:	fb92 f2f5 	sdiv	r2, r2, r5
  Value->y = (data_raw.i16bit[1] / divisor);
 80025fa:	fb93 f3f5 	sdiv	r3, r3, r5
  Value->x = (data_raw.i16bit[0] / divisor);
 80025fe:	8022      	strh	r2, [r4, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002600:	8063      	strh	r3, [r4, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002602:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002606:	fb93 f3f5 	sdiv	r3, r3, r5
 800260a:	80a3      	strh	r3, [r4, #4]
}
 800260c:	b005      	add	sp, #20
 800260e:	bd30      	pop	{r4, r5, pc}
    return IIS2DH_ERROR;
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	e7fa      	b.n	800260c <IIS2DH_ACC_GetAxesRaw+0x4c>
 8002616:	bf00      	nop
 8002618:	08015444 	.word	0x08015444

0800261c <IIS2DH_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 800261c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002620:	2b01      	cmp	r3, #1
 8002622:	d023      	beq.n	800266c <IIS2DH_ACC_Enable+0x50>
{
 8002624:	b530      	push	{r4, r5, lr}
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 8002626:	2309      	movs	r3, #9
{
 8002628:	b083      	sub	sp, #12
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800262a:	f100 051c 	add.w	r5, r0, #28
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 800262e:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002632:	4604      	mov	r4, r0
 8002634:	2301      	movs	r3, #1
 8002636:	aa01      	add	r2, sp, #4
 8002638:	2120      	movs	r1, #32
 800263a:	4628      	mov	r0, r5
 800263c:	f000 f896 	bl	800276c <iis2dh_read_reg>
  if (ret == 0) {
 8002640:	b128      	cbz	r0, 800264e <IIS2DH_ACC_Enable+0x32>
  pObj->acc_is_enabled = 1;
 8002642:	2301      	movs	r3, #1
}
 8002644:	2000      	movs	r0, #0
  pObj->acc_is_enabled = 1;
 8002646:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
}
 800264a:	b003      	add	sp, #12
 800264c:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.xen = 1;
 800264e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002652:	f021 0107 	bic.w	r1, r1, #7
 8002656:	f041 0107 	orr.w	r1, r1, #7
 800265a:	f88d 1004 	strb.w	r1, [sp, #4]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800265e:	2301      	movs	r3, #1
 8002660:	aa01      	add	r2, sp, #4
 8002662:	4628      	mov	r0, r5
 8002664:	2120      	movs	r1, #32
 8002666:	f000 f889 	bl	800277c <iis2dh_write_reg>
 800266a:	e7ea      	b.n	8002642 <IIS2DH_ACC_Enable+0x26>
}
 800266c:	2000      	movs	r0, #0
 800266e:	4770      	bx	lr

08002670 <IIS2DH_ACC_GetAxes>:
{
 8002670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 8002674:	f100 051c 	add.w	r5, r0, #28
{
 8002678:	b084      	sub	sp, #16
 800267a:	4604      	mov	r4, r0
  float sensitivity = 0.0f;
 800267c:	2300      	movs	r3, #0
{
 800267e:	460e      	mov	r6, r1
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 8002680:	4628      	mov	r0, r5
 8002682:	f10d 0103 	add.w	r1, sp, #3
  float sensitivity = 0.0f;
 8002686:	9301      	str	r3, [sp, #4]
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 8002688:	f000 f8e6 	bl	8002858 <iis2dh_operating_mode_get>
 800268c:	2800      	cmp	r0, #0
 800268e:	d142      	bne.n	8002716 <IIS2DH_ACC_GetAxes+0xa6>
  switch (op_mode)
 8002690:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d83e      	bhi.n	8002716 <IIS2DH_ACC_GetAxes+0xa6>
 8002698:	4a20      	ldr	r2, [pc, #128]	@ (800271c <IIS2DH_ACC_GetAxes+0xac>)
  if (iis2dh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DH_OK)
 800269a:	4628      	mov	r0, r5
 800269c:	a902      	add	r1, sp, #8
 800269e:	f932 8013 	ldrsh.w	r8, [r2, r3, lsl #1]
 80026a2:	f000 f9a7 	bl	80029f4 <iis2dh_acceleration_raw_get>
 80026a6:	bbb0      	cbnz	r0, 8002716 <IIS2DH_ACC_GetAxes+0xa6>
  if (IIS2DH_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DH_OK)
 80026a8:	4620      	mov	r0, r4
 80026aa:	a901      	add	r1, sp, #4
  Value->x = (data_raw.i16bit[0] / divisor);
 80026ac:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Value->y = (data_raw.i16bit[1] / divisor);
 80026b0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Value->x = (data_raw.i16bit[0] / divisor);
 80026b4:	fb92 f2f8 	sdiv	r2, r2, r8
  Value->y = (data_raw.i16bit[1] / divisor);
 80026b8:	fb93 f3f8 	sdiv	r3, r3, r8
  Value->x = (data_raw.i16bit[0] / divisor);
 80026bc:	b217      	sxth	r7, r2
  Value->y = (data_raw.i16bit[1] / divisor);
 80026be:	b21d      	sxth	r5, r3
  Value->z = (data_raw.i16bit[2] / divisor);
 80026c0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80026c4:	fb93 f3f8 	sdiv	r3, r3, r8
 80026c8:	b21c      	sxth	r4, r3
  if (IIS2DH_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DH_OK)
 80026ca:	f7ff fed5 	bl	8002478 <IIS2DH_ACC_GetSensitivity>
 80026ce:	bb10      	cbnz	r0, 8002716 <IIS2DH_ACC_GetAxes+0xa6>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80026d0:	ee07 7a90 	vmov	s15, r7
 80026d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80026d8:	ee07 5a90 	vmov	s15, r5
 80026dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80026e0:	ee07 4a90 	vmov	s15, r4
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80026e4:	ed9d 6a01 	vldr	s12, [sp, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80026e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80026ec:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80026f0:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80026f4:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80026f8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80026fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002704:	edc6 6a00 	vstr	s13, [r6]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002708:	ed86 7a01 	vstr	s14, [r6, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800270c:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8002710:	b004      	add	sp, #16
 8002712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return IIS2DH_ERROR;
 8002716:	f04f 30ff 	mov.w	r0, #4294967295
 800271a:	e7f9      	b.n	8002710 <IIS2DH_ACC_GetAxes+0xa0>
 800271c:	08015444 	.word	0x08015444

08002720 <IIS2DH_RegisterBusIO>:
  if (pObj == NULL)
 8002720:	b1e0      	cbz	r0, 800275c <IIS2DH_RegisterBusIO+0x3c>
{
 8002722:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8002724:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8002728:	688a      	ldr	r2, [r1, #8]
 800272a:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800272c:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8002730:	7b0a      	ldrb	r2, [r1, #12]
 8002732:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002734:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 8002738:	6989      	ldr	r1, [r1, #24]
 800273a:	6181      	str	r1, [r0, #24]
 800273c:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800273e:	4909      	ldr	r1, [pc, #36]	@ (8002764 <IIS2DH_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8002740:	4a09      	ldr	r2, [pc, #36]	@ (8002768 <IIS2DH_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002742:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002744:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8002748:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 800274a:	b113      	cbz	r3, 8002752 <IIS2DH_RegisterBusIO+0x32>
}
 800274c:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8002750:	4718      	bx	r3
}
 8002752:	f04f 30ff 	mov.w	r0, #4294967295
 8002756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	080020d5 	.word	0x080020d5
 8002768:	080020e5 	.word	0x080020e5

0800276c <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 800276c:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800276e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8002772:	46a4      	mov	ip, r4
  return ret;
}
 8002774:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002778:	4760      	bx	ip
 800277a:	bf00      	nop

0800277c <iis2dh_write_reg>:
  *
  */
int32_t iis2dh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800277c:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800277e:	6804      	ldr	r4, [r0, #0]
 8002780:	6880      	ldr	r0, [r0, #8]
 8002782:	46a4      	mov	ip, r4
  return ret;
}
 8002784:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002788:	4760      	bx	ip
 800278a:	bf00      	nop

0800278c <iis2dh_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_temperature_meas_set(stmdev_ctx_t *ctx,
                                    iis2dh_temp_en_t val)
{
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	4604      	mov	r4, r0
 8002790:	b082      	sub	sp, #8
 8002792:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002794:	6880      	ldr	r0, [r0, #8]
 8002796:	6866      	ldr	r6, [r4, #4]
 8002798:	2301      	movs	r3, #1
 800279a:	aa01      	add	r2, sp, #4
 800279c:	211f      	movs	r1, #31
 800279e:	47b0      	blx	r6
  iis2dh_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_TEMP_CFG_REG,
                        (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0) {
 80027a0:	b958      	cbnz	r0, 80027ba <iis2dh_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
 80027a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027a6:	6826      	ldr	r6, [r4, #0]
 80027a8:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
 80027aa:	f365 1387 	bfi	r3, r5, #6, #2
 80027ae:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027b2:	aa01      	add	r2, sp, #4
 80027b4:	2301      	movs	r3, #1
 80027b6:	211f      	movs	r1, #31
 80027b8:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_TEMP_CFG_REG,
                           (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
}
 80027ba:	b002      	add	sp, #8
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
 80027be:	bf00      	nop

080027c0 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4604      	mov	r4, r0
 80027c4:	b082      	sub	sp, #8
 80027c6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027c8:	6880      	ldr	r0, [r0, #8]
 80027ca:	6866      	ldr	r6, [r4, #4]
 80027cc:	2301      	movs	r3, #1
 80027ce:	466a      	mov	r2, sp
 80027d0:	2120      	movs	r1, #32
 80027d2:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 80027d4:	bb10      	cbnz	r0, 800281c <iis2dh_operating_mode_set+0x5c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027d6:	68a0      	ldr	r0, [r4, #8]
 80027d8:	6866      	ldr	r6, [r4, #4]
 80027da:	2301      	movs	r3, #1
 80027dc:	aa01      	add	r2, sp, #4
 80027de:	2123      	movs	r1, #35	@ 0x23
 80027e0:	47b0      	blx	r6
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                          1);
  }

  if (ret == 0) {
 80027e2:	b9d8      	cbnz	r0, 800281c <iis2dh_operating_mode_set+0x5c>
    if ( val == IIS2DH_HR_12bit ) {
 80027e4:	b1e5      	cbz	r5, 8002820 <iis2dh_operating_mode_set+0x60>
      ctrl_reg1.lpen = 0;
      ctrl_reg4.hr   = 1;
    }

    if (val == IIS2DH_NM_10bit) {
 80027e6:	2d01      	cmp	r5, #1
 80027e8:	d127      	bne.n	800283a <iis2dh_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
 80027ea:	f89d 3000 	ldrb.w	r3, [sp]
 80027ee:	f360 03c3 	bfi	r3, r0, #3, #1
 80027f2:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
 80027f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027fa:	f360 03c3 	bfi	r3, r0, #3, #1
 80027fe:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002802:	6825      	ldr	r5, [r4, #0]
 8002804:	68a0      	ldr	r0, [r4, #8]
 8002806:	2301      	movs	r3, #1
 8002808:	466a      	mov	r2, sp
 800280a:	2120      	movs	r1, #32
 800280c:	47a8      	blx	r5

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                           1);
  }

  if (ret == 0) {
 800280e:	b928      	cbnz	r0, 800281c <iis2dh_operating_mode_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002810:	6825      	ldr	r5, [r4, #0]
 8002812:	68a0      	ldr	r0, [r4, #8]
 8002814:	2301      	movs	r3, #1
 8002816:	aa01      	add	r2, sp, #4
 8002818:	2123      	movs	r1, #35	@ 0x23
 800281a:	47a8      	blx	r5
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 800281c:	b002      	add	sp, #8
 800281e:	bd70      	pop	{r4, r5, r6, pc}
      ctrl_reg1.lpen = 0;
 8002820:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
 8002824:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
 8002828:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
 800282c:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
 8002830:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
 8002834:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == IIS2DH_LP_8bit) {
 8002838:	e7e3      	b.n	8002802 <iis2dh_operating_mode_set+0x42>
 800283a:	2d02      	cmp	r5, #2
 800283c:	d1e1      	bne.n	8002802 <iis2dh_operating_mode_set+0x42>
      ctrl_reg1.lpen = 1;
 800283e:	f89d 3000 	ldrb.w	r3, [sp]
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
 800284a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800284e:	f360 03c3 	bfi	r3, r0, #3, #1
 8002852:	f88d 3004 	strb.w	r3, [sp, #4]
 8002856:	e7d4      	b.n	8002802 <iis2dh_operating_mode_set+0x42>

08002858 <iis2dh_operating_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_get(stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t *val)
{
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	4604      	mov	r4, r0
 800285c:	b082      	sub	sp, #8
 800285e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002860:	6880      	ldr	r0, [r0, #8]
 8002862:	6866      	ldr	r6, [r4, #4]
 8002864:	2301      	movs	r3, #1
 8002866:	466a      	mov	r2, sp
 8002868:	2120      	movs	r1, #32
 800286a:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 800286c:	b988      	cbnz	r0, 8002892 <iis2dh_operating_mode_get+0x3a>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800286e:	2301      	movs	r3, #1
 8002870:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8002874:	aa01      	add	r2, sp, #4
 8002876:	2123      	movs	r1, #35	@ 0x23
 8002878:	47b0      	blx	r6
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                          1);

    if ( ctrl_reg1.lpen == PROPERTY_ENABLE ) {
 800287a:	f89d 3000 	ldrb.w	r3, [sp]
 800287e:	071b      	lsls	r3, r3, #28
      *val = IIS2DH_LP_8bit;
    }

    else if (ctrl_reg4.hr == PROPERTY_ENABLE ) {
 8002880:	bf5d      	ittte	pl
 8002882:	f89d 3004 	ldrbpl.w	r3, [sp, #4]
 8002886:	f083 0308 	eorpl.w	r3, r3, #8
 800288a:	f3c3 03c0 	ubfxpl	r3, r3, #3, #1
 800288e:	2302      	movmi	r3, #2
      *val = IIS2DH_HR_12bit;
 8002890:	702b      	strb	r3, [r5, #0]
      *val = IIS2DH_NM_10bit;
    }
  }

  return ret;
}
 8002892:	b002      	add	sp, #8
 8002894:	bd70      	pop	{r4, r5, r6, pc}
 8002896:	bf00      	nop

08002898 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	4604      	mov	r4, r0
 800289c:	b082      	sub	sp, #8
 800289e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028a0:	6880      	ldr	r0, [r0, #8]
 80028a2:	6866      	ldr	r6, [r4, #4]
 80028a4:	2301      	movs	r3, #1
 80028a6:	aa01      	add	r2, sp, #4
 80028a8:	2120      	movs	r1, #32
 80028aa:	47b0      	blx	r6
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 80028ac:	b958      	cbnz	r0, 80028c6 <iis2dh_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
 80028ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028b2:	6826      	ldr	r6, [r4, #0]
 80028b4:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
 80028b6:	f365 1307 	bfi	r3, r5, #4, #4
 80028ba:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028be:	aa01      	add	r2, sp, #4
 80028c0:	2301      	movs	r3, #1
 80028c2:	2120      	movs	r1, #32
 80028c4:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                           1);
  }

  return ret;
}
 80028c6:	b002      	add	sp, #8
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
 80028ca:	bf00      	nop

080028cc <iis2dh_data_rate_get>:
  * @param  val      get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_get(stmdev_ctx_t *ctx, iis2dh_odr_t *val)
{
 80028cc:	b530      	push	{r4, r5, lr}
 80028ce:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028d0:	2301      	movs	r3, #1
 80028d2:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80028d6:	aa01      	add	r2, sp, #4
{
 80028d8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028da:	2120      	movs	r1, #32
 80028dc:	47a8      	blx	r5
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  switch (ctrl_reg1.odr) {
 80028de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	3b01      	subs	r3, #1
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d81a      	bhi.n	8002920 <iis2dh_data_rate_get+0x54>
 80028ea:	e8df f003 	tbb	[pc, r3]
 80028ee:	0905      	.short	0x0905
 80028f0:	110f0d0b 	.word	0x110f0d0b
 80028f4:	1513      	.short	0x1513
 80028f6:	17          	.byte	0x17
 80028f7:	00          	.byte	0x00
 80028f8:	2301      	movs	r3, #1
    case IIS2DH_POWER_DOWN:
      *val = IIS2DH_POWER_DOWN;
 80028fa:	7023      	strb	r3, [r4, #0]
      *val = IIS2DH_POWER_DOWN;
      break;
  }

  return ret;
}
 80028fc:	b003      	add	sp, #12
 80028fe:	bd30      	pop	{r4, r5, pc}
      break;
 8002900:	2302      	movs	r3, #2
 8002902:	e7fa      	b.n	80028fa <iis2dh_data_rate_get+0x2e>
      break;
 8002904:	2303      	movs	r3, #3
 8002906:	e7f8      	b.n	80028fa <iis2dh_data_rate_get+0x2e>
      break;
 8002908:	2304      	movs	r3, #4
 800290a:	e7f6      	b.n	80028fa <iis2dh_data_rate_get+0x2e>
      break;
 800290c:	2305      	movs	r3, #5
 800290e:	e7f4      	b.n	80028fa <iis2dh_data_rate_get+0x2e>
      break;
 8002910:	2306      	movs	r3, #6
 8002912:	e7f2      	b.n	80028fa <iis2dh_data_rate_get+0x2e>
      break;
 8002914:	2307      	movs	r3, #7
 8002916:	e7f0      	b.n	80028fa <iis2dh_data_rate_get+0x2e>
      break;
 8002918:	2308      	movs	r3, #8
 800291a:	e7ee      	b.n	80028fa <iis2dh_data_rate_get+0x2e>
      break;
 800291c:	2309      	movs	r3, #9
 800291e:	e7ec      	b.n	80028fa <iis2dh_data_rate_get+0x2e>
  switch (ctrl_reg1.odr) {
 8002920:	2300      	movs	r3, #0
 8002922:	e7ea      	b.n	80028fa <iis2dh_data_rate_get+0x2e>

08002924 <iis2dh_high_pass_on_outputs_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_high_pass_on_outputs_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	4604      	mov	r4, r0
 8002928:	b082      	sub	sp, #8
 800292a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800292c:	6880      	ldr	r0, [r0, #8]
 800292e:	6866      	ldr	r6, [r4, #4]
 8002930:	2301      	movs	r3, #1
 8002932:	aa01      	add	r2, sp, #4
 8002934:	2121      	movs	r1, #33	@ 0x21
 8002936:	47b0      	blx	r6
  iis2dh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                        1);

  if (ret == 0) {
 8002938:	b958      	cbnz	r0, 8002952 <iis2dh_high_pass_on_outputs_set+0x2e>
    ctrl_reg2.fds = val;
 800293a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800293e:	6826      	ldr	r6, [r4, #0]
 8002940:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg2.fds = val;
 8002942:	f365 03c3 	bfi	r3, r5, #3, #1
 8002946:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800294a:	aa01      	add	r2, sp, #4
 800294c:	2301      	movs	r3, #1
 800294e:	2121      	movs	r1, #33	@ 0x21
 8002950:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  return ret;
}
 8002952:	b002      	add	sp, #8
 8002954:	bd70      	pop	{r4, r5, r6, pc}
 8002956:	bf00      	nop

08002958 <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4604      	mov	r4, r0
 800295c:	b082      	sub	sp, #8
 800295e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002960:	6880      	ldr	r0, [r0, #8]
 8002962:	6866      	ldr	r6, [r4, #4]
 8002964:	2301      	movs	r3, #1
 8002966:	aa01      	add	r2, sp, #4
 8002968:	2123      	movs	r1, #35	@ 0x23
 800296a:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 800296c:	b958      	cbnz	r0, 8002986 <iis2dh_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
 800296e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002972:	6826      	ldr	r6, [r4, #0]
 8002974:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
 8002976:	f365 1305 	bfi	r3, r5, #4, #2
 800297a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800297e:	aa01      	add	r2, sp, #4
 8002980:	2301      	movs	r3, #1
 8002982:	2123      	movs	r1, #35	@ 0x23
 8002984:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002986:	b002      	add	sp, #8
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	bf00      	nop

0800298c <iis2dh_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_get(stmdev_ctx_t *ctx, iis2dh_fs_t *val)
{
 800298c:	b530      	push	{r4, r5, lr}
 800298e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002990:	2301      	movs	r3, #1
 8002992:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002996:	aa01      	add	r2, sp, #4
{
 8002998:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800299a:	2123      	movs	r1, #35	@ 0x23
 800299c:	47a8      	blx	r5
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  switch (ctrl_reg4.fs) {
 800299e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029a2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d006      	beq.n	80029b8 <iis2dh_full_scale_get+0x2c>
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d004      	beq.n	80029b8 <iis2dh_full_scale_get+0x2c>
 80029ae:	f1a3 0301 	sub.w	r3, r3, #1
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	095b      	lsrs	r3, r3, #5
    case IIS2DH_2g:
      *val = IIS2DH_2g;
 80029b8:	7023      	strb	r3, [r4, #0]
      *val = IIS2DH_2g;
      break;
  }

  return ret;
}
 80029ba:	b003      	add	sp, #12
 80029bc:	bd30      	pop	{r4, r5, pc}
 80029be:	bf00      	nop

080029c0 <iis2dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	4604      	mov	r4, r0
 80029c4:	b082      	sub	sp, #8
 80029c6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029c8:	6880      	ldr	r0, [r0, #8]
 80029ca:	6866      	ldr	r6, [r4, #4]
 80029cc:	2301      	movs	r3, #1
 80029ce:	aa01      	add	r2, sp, #4
 80029d0:	2123      	movs	r1, #35	@ 0x23
 80029d2:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 80029d4:	b958      	cbnz	r0, 80029ee <iis2dh_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
 80029d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029da:	6826      	ldr	r6, [r4, #0]
 80029dc:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
 80029de:	f365 13c7 	bfi	r3, r5, #7, #1
 80029e2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029e6:	aa01      	add	r2, sp, #4
 80029e8:	2301      	movs	r3, #1
 80029ea:	2123      	movs	r1, #35	@ 0x23
 80029ec:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 80029ee:	b002      	add	sp, #8
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
 80029f2:	bf00      	nop

080029f4 <iis2dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80029f4:	b530      	push	{r4, r5, lr}
 80029f6:	b083      	sub	sp, #12
 80029f8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029fa:	466a      	mov	r2, sp
 80029fc:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002a00:	2306      	movs	r3, #6
 8002a02:	2128      	movs	r1, #40	@ 0x28
 8002a04:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_OUT_X_L, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002a06:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002a0a:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002a0e:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002a12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a16:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002a18:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002a1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002a20:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002a24:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002a26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a2e:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8002a30:	b003      	add	sp, #12
 8002a32:	bd30      	pop	{r4, r5, pc}

08002a34 <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002a34:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a36:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8002a3a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a3c:	46a4      	mov	ip, r4
 8002a3e:	2301      	movs	r3, #1
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
  return ret;
}
 8002a40:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a44:	210f      	movs	r1, #15
 8002a46:	4760      	bx	ip

08002a48 <iis2dh_data_format_set>:
  * @param  val      change the values of ble in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_format_set(stmdev_ctx_t *ctx, iis2dh_ble_t val)
{
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a50:	6880      	ldr	r0, [r0, #8]
 8002a52:	6866      	ldr	r6, [r4, #4]
 8002a54:	2301      	movs	r3, #1
 8002a56:	aa01      	add	r2, sp, #4
 8002a58:	2123      	movs	r1, #35	@ 0x23
 8002a5a:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002a5c:	b958      	cbnz	r0, 8002a76 <iis2dh_data_format_set+0x2e>
    ctrl_reg4.ble = (uint8_t)val;
 8002a5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a62:	6826      	ldr	r6, [r4, #0]
 8002a64:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.ble = (uint8_t)val;
 8002a66:	f365 1386 	bfi	r3, r5, #6, #1
 8002a6a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a6e:	aa01      	add	r2, sp, #4
 8002a70:	2301      	movs	r3, #1
 8002a72:	2123      	movs	r1, #35	@ 0x23
 8002a74:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002a76:	b002      	add	sp, #8
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
 8002a7a:	bf00      	nop

08002a7c <iis2dh_boot_set>:
  * @param  val      change the values of boot in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	4604      	mov	r4, r0
 8002a80:	b082      	sub	sp, #8
 8002a82:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a84:	6880      	ldr	r0, [r0, #8]
 8002a86:	6866      	ldr	r6, [r4, #4]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	aa01      	add	r2, sp, #4
 8002a8c:	2124      	movs	r1, #36	@ 0x24
 8002a8e:	47b0      	blx	r6
  iis2dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5,
                        1);

  if (ret == 0) {
 8002a90:	b958      	cbnz	r0, 8002aaa <iis2dh_boot_set+0x2e>
    ctrl_reg5.boot = val;
 8002a92:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a96:	6826      	ldr	r6, [r4, #0]
 8002a98:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg5.boot = val;
 8002a9a:	f365 13c7 	bfi	r3, r5, #7, #1
 8002a9e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002aa2:	aa01      	add	r2, sp, #4
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2124      	movs	r1, #36	@ 0x24
 8002aa8:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5,
                           1);
  }

  return ret;
}
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	bf00      	nop

08002ab0 <iis2dh_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_spi_mode_set(stmdev_ctx_t *ctx, iis2dh_sim_t val)
{
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ab8:	6880      	ldr	r0, [r0, #8]
 8002aba:	6866      	ldr	r6, [r4, #4]
 8002abc:	2301      	movs	r3, #1
 8002abe:	aa01      	add	r2, sp, #4
 8002ac0:	2123      	movs	r1, #35	@ 0x23
 8002ac2:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002ac4:	b958      	cbnz	r0, 8002ade <iis2dh_spi_mode_set+0x2e>
    ctrl_reg4.sim = (uint8_t)val;
 8002ac6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002aca:	6826      	ldr	r6, [r4, #0]
 8002acc:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.sim = (uint8_t)val;
 8002ace:	f365 0300 	bfi	r3, r5, #0, #1
 8002ad2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ad6:	aa01      	add	r2, sp, #4
 8002ad8:	2301      	movs	r3, #1
 8002ada:	2123      	movs	r1, #35	@ 0x23
 8002adc:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	bf00      	nop

08002ae4 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002ae4:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002ae6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
  Capabilities->Magneto      = 1;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
  Capabilities->GyroMaxOdr   = 0.0f;
 8002aea:	2300      	movs	r3, #0
  Capabilities->GyroMaxFS    = 0;
 8002aec:	2000      	movs	r0, #0
  Capabilities->AccMaxOdr    = 0.0f;
  Capabilities->MagMaxOdr    = 100.0f;
 8002aee:	4a06      	ldr	r2, [pc, #24]	@ (8002b08 <IIS2MDC_GetCapabilities+0x24>)
  Capabilities->Acc          = 0;
 8002af0:	600c      	str	r4, [r1, #0]
  Capabilities->MagMaxFS     = 50;
 8002af2:	2432      	movs	r4, #50	@ 0x32
 8002af4:	60cc      	str	r4, [r1, #12]
  Capabilities->AccMaxFS     = 0;
 8002af6:	e9c1 0001 	strd	r0, r0, [r1, #4]
  return IIS2MDC_OK;
}
 8002afa:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->GyroMaxOdr   = 0.0f;
 8002afe:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002b00:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002b02:	618a      	str	r2, [r1, #24]
}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	42c80000 	.word	0x42c80000

08002b0c <IIS2MDC_MAG_GetSensitivity>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8002b0c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002b10:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 8002b12:	2000      	movs	r0, #0
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop

08002b18 <IIS2MDC_MAG_GetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
  UNUSED(pObj);
  *FullScale = 50;
 8002b18:	2332      	movs	r3, #50	@ 0x32
 8002b1a:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	4770      	bx	lr

08002b20 <IIS2MDC_MAG_SetFullScale>:
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
}
 8002b20:	2000      	movs	r0, #0
 8002b22:	4770      	bx	lr

08002b24 <IIS2MDC_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8002b24:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d00b      	beq.n	8002b44 <IIS2MDC_MAG_Enable+0x20>
{
 8002b2c:	b510      	push	{r4, lr}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4604      	mov	r4, r0
 8002b32:	301c      	adds	r0, #28
 8002b34:	f000 f944 	bl	8002dc0 <iis2mdc_operating_mode_set>
 8002b38:	b930      	cbnz	r0, 8002b48 <IIS2MDC_MAG_Enable+0x24>
  pObj->mag_is_enabled = 1;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return IIS2MDC_OK;
 8002b40:	2000      	movs	r0, #0
}
 8002b42:	bd10      	pop	{r4, pc}
    return IIS2MDC_OK;
 8002b44:	2000      	movs	r0, #0
}
 8002b46:	4770      	bx	lr
    return IIS2MDC_ERROR;
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002b4c:	bd10      	pop	{r4, pc}
 8002b4e:	bf00      	nop

08002b50 <IIS2MDC_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8002b50:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002b54:	b90b      	cbnz	r3, 8002b5a <IIS2MDC_MAG_Disable+0xa>
    return IIS2MDC_OK;
 8002b56:	2000      	movs	r0, #0
}
 8002b58:	4770      	bx	lr
{
 8002b5a:	b510      	push	{r4, lr}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4604      	mov	r4, r0
 8002b60:	301c      	adds	r0, #28
 8002b62:	f000 f92d 	bl	8002dc0 <iis2mdc_operating_mode_set>
 8002b66:	b918      	cbnz	r0, 8002b70 <IIS2MDC_MAG_Disable+0x20>
  pObj->mag_is_enabled = 0;
 8002b68:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS2MDC_OK;
 8002b6c:	2000      	movs	r0, #0
}
 8002b6e:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002b74:	bd10      	pop	{r4, pc}
 8002b76:	bf00      	nop

08002b78 <IIS2MDC_DeInit>:
{
 8002b78:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 0U)
 8002b7a:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8002b7e:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 8002b80:	b91b      	cbnz	r3, 8002b8a <IIS2MDC_DeInit+0x12>
  pObj->is_initialized = 0;
 8002b82:	2000      	movs	r0, #0
 8002b84:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8002b88:	bd10      	pop	{r4, pc}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	301c      	adds	r0, #28
 8002b8e:	f000 f917 	bl	8002dc0 <iis2mdc_operating_mode_set>
 8002b92:	b910      	cbnz	r0, 8002b9a <IIS2MDC_DeInit+0x22>
  pObj->mag_is_enabled = 0;
 8002b94:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS2MDC_OK;
 8002b98:	e7f3      	b.n	8002b82 <IIS2MDC_DeInit+0xa>
    return IIS2MDC_ERROR;
 8002b9a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002b9e:	bd10      	pop	{r4, pc}

08002ba0 <IIS2MDC_MAG_SetOutputDataRate>:
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002ba0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002ba4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002bac:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002bae:	d908      	bls.n	8002bc2 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8002bb0:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8002bb4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	d80a      	bhi.n	8002bd4 <IIS2MDC_MAG_SetOutputDataRate+0x34>
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	e000      	b.n	8002bc4 <IIS2MDC_MAG_SetOutputDataRate+0x24>
 8002bc2:	2100      	movs	r1, #0
  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8002bc4:	301c      	adds	r0, #28
 8002bc6:	f000 f915 	bl	8002df4 <iis2mdc_data_rate_set>
 8002bca:	3800      	subs	r0, #0
 8002bcc:	bf18      	it	ne
 8002bce:	2001      	movne	r0, #1
}
 8002bd0:	4240      	negs	r0, r0
 8002bd2:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002bd4:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8002be8 <IIS2MDC_MAG_SetOutputDataRate+0x48>
 8002bd8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	bf94      	ite	ls
 8002be2:	2102      	movls	r1, #2
 8002be4:	2103      	movhi	r1, #3
 8002be6:	e7ed      	b.n	8002bc4 <IIS2MDC_MAG_SetOutputDataRate+0x24>
 8002be8:	42480000 	.word	0x42480000

08002bec <IIS2MDC_Init>:
{
 8002bec:	b538      	push	{r3, r4, r5, lr}
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002bee:	f100 051c 	add.w	r5, r0, #28
{
 8002bf2:	4604      	mov	r4, r0
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f000 f930 	bl	8002e5c <iis2mdc_block_data_update_set>
 8002bfc:	b990      	cbnz	r0, 8002c24 <IIS2MDC_Init+0x38>
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002bfe:	2102      	movs	r1, #2
 8002c00:	4628      	mov	r0, r5
 8002c02:	f000 f8dd 	bl	8002dc0 <iis2mdc_operating_mode_set>
 8002c06:	b968      	cbnz	r0, 8002c24 <IIS2MDC_Init+0x38>
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8002c08:	2103      	movs	r1, #3
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	f000 f8f2 	bl	8002df4 <iis2mdc_data_rate_set>
 8002c10:	4601      	mov	r1, r0
 8002c12:	b938      	cbnz	r0, 8002c24 <IIS2MDC_Init+0x38>
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8002c14:	4628      	mov	r0, r5
 8002c16:	f000 f965 	bl	8002ee4 <iis2mdc_self_test_set>
 8002c1a:	b918      	cbnz	r0, 8002c24 <IIS2MDC_Init+0x38>
  pObj->is_initialized = 1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 8002c22:	bd38      	pop	{r3, r4, r5, pc}
    return IIS2MDC_ERROR;
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c28:	bd38      	pop	{r3, r4, r5, pc}
 8002c2a:	bf00      	nop

08002c2c <IIS2MDC_ReadID>:
{
 8002c2c:	b508      	push	{r3, lr}
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002c2e:	301c      	adds	r0, #28
 8002c30:	f000 f94e 	bl	8002ed0 <iis2mdc_device_id_get>
 8002c34:	3800      	subs	r0, #0
 8002c36:	bf18      	it	ne
 8002c38:	2001      	movne	r0, #1
}
 8002c3a:	4240      	negs	r0, r0
 8002c3c:	bd08      	pop	{r3, pc}
 8002c3e:	bf00      	nop

08002c40 <IIS2MDC_MAG_GetOutputDataRate>:
{
 8002c40:	b510      	push	{r4, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	460c      	mov	r4, r1
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8002c46:	301c      	adds	r0, #28
 8002c48:	f10d 0107 	add.w	r1, sp, #7
 8002c4c:	f000 f8ec 	bl	8002e28 <iis2mdc_data_rate_get>
 8002c50:	b988      	cbnz	r0, 8002c76 <IIS2MDC_MAG_GetOutputDataRate+0x36>
  switch (odr_low_level)
 8002c52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d80d      	bhi.n	8002c76 <IIS2MDC_MAG_GetOutputDataRate+0x36>
 8002c5a:	e8df f003 	tbb	[pc, r3]
 8002c5e:	0206      	.short	0x0206
 8002c60:	080a      	.short	0x080a
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <IIS2MDC_MAG_GetOutputDataRate+0x3c>)
      *Odr = 10.0f;
 8002c64:	6023      	str	r3, [r4, #0]
}
 8002c66:	b002      	add	sp, #8
 8002c68:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <IIS2MDC_MAG_GetOutputDataRate+0x40>)
 8002c6c:	e7fa      	b.n	8002c64 <IIS2MDC_MAG_GetOutputDataRate+0x24>
      break;
 8002c6e:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <IIS2MDC_MAG_GetOutputDataRate+0x44>)
 8002c70:	e7f8      	b.n	8002c64 <IIS2MDC_MAG_GetOutputDataRate+0x24>
      break;
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <IIS2MDC_MAG_GetOutputDataRate+0x48>)
 8002c74:	e7f6      	b.n	8002c64 <IIS2MDC_MAG_GetOutputDataRate+0x24>
  switch (odr_low_level)
 8002c76:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7a:	e7f4      	b.n	8002c66 <IIS2MDC_MAG_GetOutputDataRate+0x26>
 8002c7c:	41a00000 	.word	0x41a00000
 8002c80:	41200000 	.word	0x41200000
 8002c84:	42c80000 	.word	0x42c80000
 8002c88:	42480000 	.word	0x42480000

08002c8c <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	460c      	mov	r4, r1
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002c92:	301c      	adds	r0, #28
 8002c94:	4669      	mov	r1, sp
 8002c96:	f000 f8fb 	bl	8002e90 <iis2mdc_magnetic_raw_get>
 8002c9a:	b930      	cbnz	r0, 8002caa <IIS2MDC_MAG_GetAxesRaw+0x1e>
  {
    return IIS2MDC_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002c9c:	9a00      	ldr	r2, [sp, #0]
  Value->y = data_raw.i16bit[1];
  Value->z = data_raw.i16bit[2];
 8002c9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8002ca2:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8002ca4:	80a3      	strh	r3, [r4, #4]

  return IIS2MDC_OK;
}
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8002caa:	f04f 30ff 	mov.w	r0, #4294967295
 8002cae:	e7fa      	b.n	8002ca6 <IIS2MDC_MAG_GetAxesRaw+0x1a>

08002cb0 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	460c      	mov	r4, r1
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002cb6:	301c      	adds	r0, #28
 8002cb8:	4669      	mov	r1, sp
 8002cba:	f000 f8e9 	bl	8002e90 <iis2mdc_magnetic_raw_get>
 8002cbe:	bb38      	cbnz	r0, 8002d10 <IIS2MDC_MAG_GetAxes+0x60>

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002cc0:	f9bd 3000 	ldrsh.w	r3, [sp]
 8002cc4:	ee06 3a90 	vmov	s13, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002cc8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002ccc:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002cd0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8002cd4:	ee07 3a90 	vmov	s15, r3
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002cd8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002cdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002ce4:	eeb7 6a08 	vmov.f32	s12, #120	@ 0x3fc00000  1.5
 8002ce8:	ee66 6a86 	vmul.f32	s13, s13, s12
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002cec:	ee27 7a06 	vmul.f32	s14, s14, s12
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002cf0:	ee67 7a86 	vmul.f32	s15, s15, s12
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002cf4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002cf8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d00:	edc4 6a00 	vstr	s13, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d04:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d08:	edc4 7a02 	vstr	s15, [r4, #8]

  return IIS2MDC_OK;
}
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	e7fa      	b.n	8002d0c <IIS2MDC_MAG_GetAxes+0x5c>
 8002d16:	bf00      	nop

08002d18 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d18:	b430      	push	{r4, r5}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002d1a:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d1c:	6944      	ldr	r4, [r0, #20]
 8002d1e:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002d20:	b925      	cbnz	r5, 8002d2c <ReadMagRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d22:	46a4      	mov	ip, r4
 8002d24:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8002d28:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d2a:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d2c:	46a4      	mov	ip, r4
 8002d2e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8002d32:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d34:	4760      	bx	ip
 8002d36:	bf00      	nop

08002d38 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d38:	b430      	push	{r4, r5}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002d3a:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d3c:	6904      	ldr	r4, [r0, #16]
 8002d3e:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002d40:	b925      	cbnz	r5, 8002d4c <WriteMagRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d42:	46a4      	mov	ip, r4
 8002d44:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8002d48:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d4a:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d4c:	46a4      	mov	ip, r4
 8002d4e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8002d52:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d54:	4760      	bx	ip
 8002d56:	bf00      	nop

08002d58 <IIS2MDC_RegisterBusIO>:
  if (pObj == NULL)
 8002d58:	b350      	cbz	r0, 8002db0 <IIS2MDC_RegisterBusIO+0x58>
{
 8002d5a:	b510      	push	{r4, lr}
 8002d5c:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8002d5e:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8002d62:	688a      	ldr	r2, [r1, #8]
 8002d64:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d66:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8002d6a:	7b0a      	ldrb	r2, [r1, #12]
 8002d6c:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d6e:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8002d72:	6989      	ldr	r1, [r1, #24]
 8002d74:	61a1      	str	r1, [r4, #24]
 8002d76:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002d78:	490f      	ldr	r1, [pc, #60]	@ (8002db8 <IIS2MDC_RegisterBusIO+0x60>)
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002d7a:	4a10      	ldr	r2, [pc, #64]	@ (8002dbc <IIS2MDC_RegisterBusIO+0x64>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d7c:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002d7e:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle    = pObj;
 8002d82:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 8002d84:	b18b      	cbz	r3, 8002daa <IIS2MDC_RegisterBusIO+0x52>
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8002d86:	4798      	blx	r3
 8002d88:	b978      	cbnz	r0, 8002daa <IIS2MDC_RegisterBusIO+0x52>
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8002d8a:	68a3      	ldr	r3, [r4, #8]
 8002d8c:	b113      	cbz	r3, 8002d94 <IIS2MDC_RegisterBusIO+0x3c>
        if (pObj->is_initialized == 0U)
 8002d8e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002d92:	b103      	cbz	r3, 8002d96 <IIS2MDC_RegisterBusIO+0x3e>
}
 8002d94:	bd10      	pop	{r4, pc}
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002d96:	2101      	movs	r1, #1
 8002d98:	f104 001c 	add.w	r0, r4, #28
 8002d9c:	f000 f8bc 	bl	8002f18 <iis2mdc_i2c_interface_set>
 8002da0:	3800      	subs	r0, #0
 8002da2:	bf18      	it	ne
 8002da4:	2001      	movne	r0, #1
 8002da6:	4240      	negs	r0, r0
}
 8002da8:	bd10      	pop	{r4, pc}
    ret = IIS2MDC_ERROR;
 8002daa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002dae:	bd10      	pop	{r4, pc}
    ret = IIS2MDC_ERROR;
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	08002d19 	.word	0x08002d19
 8002dbc:	08002d39 	.word	0x08002d39

08002dc0 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002dc8:	6880      	ldr	r0, [r0, #8]
 8002dca:	6866      	ldr	r6, [r4, #4]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	aa01      	add	r2, sp, #4
 8002dd0:	2160      	movs	r1, #96	@ 0x60
 8002dd2:	47b0      	blx	r6
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002dd4:	b958      	cbnz	r0, 8002dee <iis2mdc_operating_mode_set+0x2e>
    reg.md = (uint8_t)val;
 8002dd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002dda:	6826      	ldr	r6, [r4, #0]
 8002ddc:	68a0      	ldr	r0, [r4, #8]
    reg.md = (uint8_t)val;
 8002dde:	f365 0301 	bfi	r3, r5, #0, #2
 8002de2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002de6:	aa01      	add	r2, sp, #4
 8002de8:	2301      	movs	r3, #1
 8002dea:	2160      	movs	r1, #96	@ 0x60
 8002dec:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002dee:	b002      	add	sp, #8
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	bf00      	nop

08002df4 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	4604      	mov	r4, r0
 8002df8:	b082      	sub	sp, #8
 8002dfa:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002dfc:	6880      	ldr	r0, [r0, #8]
 8002dfe:	6866      	ldr	r6, [r4, #4]
 8002e00:	2301      	movs	r3, #1
 8002e02:	aa01      	add	r2, sp, #4
 8002e04:	2160      	movs	r1, #96	@ 0x60
 8002e06:	47b0      	blx	r6
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002e08:	b958      	cbnz	r0, 8002e22 <iis2mdc_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 8002e0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e0e:	6826      	ldr	r6, [r4, #0]
 8002e10:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 8002e12:	f365 0383 	bfi	r3, r5, #2, #2
 8002e16:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e1a:	aa01      	add	r2, sp, #4
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	2160      	movs	r1, #96	@ 0x60
 8002e20:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002e22:	b002      	add	sp, #8
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
 8002e26:	bf00      	nop

08002e28 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8002e28:	b530      	push	{r4, r5, lr}
 8002e2a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002e32:	aa01      	add	r2, sp, #4
{
 8002e34:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e36:	2160      	movs	r1, #96	@ 0x60
 8002e38:	47a8      	blx	r5
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  switch (reg.odr) {
 8002e3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e3e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d006      	beq.n	8002e54 <iis2mdc_data_rate_get+0x2c>
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d004      	beq.n	8002e54 <iis2mdc_data_rate_get+0x2c>
 8002e4a:	f1a3 0301 	sub.w	r3, r3, #1
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	095b      	lsrs	r3, r3, #5
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8002e54:	7023      	strb	r3, [r4, #0]
      *val = IIS2MDC_ODR_10Hz;
      break;
  }

  return ret;
}
 8002e56:	b003      	add	sp, #12
 8002e58:	bd30      	pop	{r4, r5, pc}
 8002e5a:	bf00      	nop

08002e5c <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	4604      	mov	r4, r0
 8002e60:	b082      	sub	sp, #8
 8002e62:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e64:	6880      	ldr	r0, [r0, #8]
 8002e66:	6866      	ldr	r6, [r4, #4]
 8002e68:	2301      	movs	r3, #1
 8002e6a:	aa01      	add	r2, sp, #4
 8002e6c:	2162      	movs	r1, #98	@ 0x62
 8002e6e:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002e70:	b958      	cbnz	r0, 8002e8a <iis2mdc_block_data_update_set+0x2e>
    reg.bdu = val;
 8002e72:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e76:	6826      	ldr	r6, [r4, #0]
 8002e78:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8002e7a:	f365 1304 	bfi	r3, r5, #4, #1
 8002e7e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e82:	aa01      	add	r2, sp, #4
 8002e84:	2301      	movs	r3, #1
 8002e86:	2162      	movs	r1, #98	@ 0x62
 8002e88:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
 8002e8e:	bf00      	nop

08002e90 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002e90:	b530      	push	{r4, r5, lr}
 8002e92:	b083      	sub	sp, #12
 8002e94:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e96:	466a      	mov	r2, sp
 8002e98:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002e9c:	2306      	movs	r3, #6
 8002e9e:	2168      	movs	r1, #104	@ 0x68
 8002ea0:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002ea2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002ea6:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002eaa:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002eae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002eb2:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002eb4:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002eb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002ebc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002ec0:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002ec2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ec6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002eca:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8002ecc:	b003      	add	sp, #12
 8002ece:	bd30      	pop	{r4, r5, pc}

08002ed0 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002ed0:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ed2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8002ed6:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ed8:	46a4      	mov	ip, r4
 8002eda:	2301      	movs	r3, #1
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
  return ret;
}
 8002edc:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ee0:	214f      	movs	r1, #79	@ 0x4f
 8002ee2:	4760      	bx	ip

08002ee4 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	b082      	sub	sp, #8
 8002eea:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002eec:	6880      	ldr	r0, [r0, #8]
 8002eee:	6866      	ldr	r6, [r4, #4]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	aa01      	add	r2, sp, #4
 8002ef4:	2162      	movs	r1, #98	@ 0x62
 8002ef6:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002ef8:	b958      	cbnz	r0, 8002f12 <iis2mdc_self_test_set+0x2e>
    reg.self_test = val;
 8002efa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002efe:	6826      	ldr	r6, [r4, #0]
 8002f00:	68a0      	ldr	r0, [r4, #8]
    reg.self_test = val;
 8002f02:	f365 0341 	bfi	r3, r5, #1, #1
 8002f06:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f0a:	aa01      	add	r2, sp, #4
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	2162      	movs	r1, #98	@ 0x62
 8002f10:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002f12:	b002      	add	sp, #8
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	bf00      	nop

08002f18 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f20:	6880      	ldr	r0, [r0, #8]
 8002f22:	6866      	ldr	r6, [r4, #4]
 8002f24:	2301      	movs	r3, #1
 8002f26:	aa01      	add	r2, sp, #4
 8002f28:	2162      	movs	r1, #98	@ 0x62
 8002f2a:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002f2c:	b958      	cbnz	r0, 8002f46 <iis2mdc_i2c_interface_set+0x2e>
    reg.i2c_dis = (uint8_t)val;
 8002f2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f32:	6826      	ldr	r6, [r4, #0]
 8002f34:	68a0      	ldr	r0, [r4, #8]
    reg.i2c_dis = (uint8_t)val;
 8002f36:	f365 1345 	bfi	r3, r5, #5, #1
 8002f3a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f3e:	aa01      	add	r2, sp, #4
 8002f40:	2301      	movs	r3, #1
 8002f42:	2162      	movs	r1, #98	@ 0x62
 8002f44:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002f46:	b002      	add	sp, #8
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
 8002f4a:	bf00      	nop

08002f4c <IIS3DWB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS3DWB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_GetCapabilities(IIS3DWB_Object_t *pObj, IIS3DWB_Capabilities_t *Capabilities)
{
 8002f4c:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002f4e:	2401      	movs	r4, #1
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
 8002f50:	2000      	movs	r0, #0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
 8002f52:	2300      	movs	r3, #0
  Capabilities->AccMaxOdr    = 26700.0f;
 8002f54:	4a05      	ldr	r2, [pc, #20]	@ (8002f6c <IIS3DWB_GetCapabilities+0x20>)
  Capabilities->Acc          = 1;
 8002f56:	600c      	str	r4, [r1, #0]
  Capabilities->AccMaxFS     = 16;
 8002f58:	2410      	movs	r4, #16
 8002f5a:	e9c1 0401 	strd	r0, r4, [r1, #4]
  Capabilities->MagMaxOdr    = 0.0f;
  return IIS3DWB_OK;
}
 8002f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxFS     = 0;
 8002f62:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002f64:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 26700.0f;
 8002f66:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002f68:	618b      	str	r3, [r1, #24]
}
 8002f6a:	4770      	bx	lr
 8002f6c:	46d09800 	.word	0x46d09800

08002f70 <IIS3DWB_ACC_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_Enable(IIS3DWB_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f70:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002f74:	2b01      	cmp	r3, #1
  {
    return IIS3DWB_OK;
  }

  pObj->acc_is_enabled = 1;
 8002f76:	bf1c      	itt	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	f880 3029 	strbne.w	r3, [r0, #41]	@ 0x29

  return IIS3DWB_OK;
}
 8002f7e:	2000      	movs	r0, #0
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop

08002f84 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f84:	b410      	push	{r4}
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002f86:	6944      	ldr	r4, [r0, #20]
 8002f88:	7b00      	ldrb	r0, [r0, #12]
 8002f8a:	46a4      	mov	ip, r4
}
 8002f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002f90:	4760      	bx	ip
 8002f92:	bf00      	nop

08002f94 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f94:	b410      	push	{r4}
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002f96:	6904      	ldr	r4, [r0, #16]
 8002f98:	7b00      	ldrb	r0, [r0, #12]
 8002f9a:	46a4      	mov	ip, r4
}
 8002f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fa0:	4760      	bx	ip
 8002fa2:	bf00      	nop

08002fa4 <IIS3DWB_ReadID>:
{
 8002fa4:	b538      	push	{r3, r4, r5, lr}
	iis3dwb_device_id_get(&(pObj->Ctx), Id);
 8002fa6:	f100 041c 	add.w	r4, r0, #28
{
 8002faa:	460d      	mov	r5, r1
	iis3dwb_device_id_get(&(pObj->Ctx), Id);
 8002fac:	4620      	mov	r0, r4
 8002fae:	f000 fa4f 	bl	8003450 <iis3dwb_device_id_get>
  if (iis3dwb_device_id_get(&(pObj->Ctx), Id) != IIS3DWB_OK)
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f000 fa4b 	bl	8003450 <iis3dwb_device_id_get>
 8002fba:	3800      	subs	r0, #0
 8002fbc:	bf18      	it	ne
 8002fbe:	2001      	movne	r0, #1
}
 8002fc0:	4240      	negs	r0, r0
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}

08002fc4 <IIS3DWB_ACC_SetFullScale>:
         : (FullScale <= 4) ? IIS3DWB_4g
 8002fc4:	2902      	cmp	r1, #2
{
 8002fc6:	b508      	push	{r3, lr}
         : (FullScale <= 4) ? IIS3DWB_4g
 8002fc8:	dd06      	ble.n	8002fd8 <IIS3DWB_ACC_SetFullScale+0x14>
 8002fca:	2904      	cmp	r1, #4
 8002fcc:	dd0d      	ble.n	8002fea <IIS3DWB_ACC_SetFullScale+0x26>
 8002fce:	2908      	cmp	r1, #8
 8002fd0:	bfcc      	ite	gt
 8002fd2:	2101      	movgt	r1, #1
 8002fd4:	2103      	movle	r1, #3
 8002fd6:	e000      	b.n	8002fda <IIS3DWB_ACC_SetFullScale+0x16>
 8002fd8:	2100      	movs	r1, #0
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), new_fs) != IIS3DWB_OK)
 8002fda:	301c      	adds	r0, #28
 8002fdc:	f000 f99c 	bl	8003318 <iis3dwb_xl_full_scale_set>
 8002fe0:	3800      	subs	r0, #0
 8002fe2:	bf18      	it	ne
 8002fe4:	2001      	movne	r0, #1
}
 8002fe6:	4240      	negs	r0, r0
 8002fe8:	bd08      	pop	{r3, pc}
         : (FullScale <= 4) ? IIS3DWB_4g
 8002fea:	2102      	movs	r1, #2
 8002fec:	e7f5      	b.n	8002fda <IIS3DWB_ACC_SetFullScale+0x16>
 8002fee:	bf00      	nop

08002ff0 <IIS3DWB_Init>:
{
 8002ff0:	b530      	push	{r4, r5, lr}
  if (iis3dwb_i2c_interface_set(&(pObj->Ctx), IIS3DWB_I2C_DISABLE) != IIS3DWB_OK)
 8002ff2:	f100 041c 	add.w	r4, r0, #28
{
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	4605      	mov	r5, r0
  if (iis3dwb_i2c_interface_set(&(pObj->Ctx), IIS3DWB_I2C_DISABLE) != IIS3DWB_OK)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f000 fa4b 	bl	8003498 <iis3dwb_i2c_interface_set>
 8003002:	2800      	cmp	r0, #0
 8003004:	d13f      	bne.n	8003086 <IIS3DWB_Init+0x96>
  if (iis3dwb_device_id_get(&(pObj->Ctx), (uint8_t *)&reg0) != IIS3DWB_OK)
 8003006:	f10d 0107 	add.w	r1, sp, #7
 800300a:	4620      	mov	r0, r4
 800300c:	f000 fa20 	bl	8003450 <iis3dwb_device_id_get>
 8003010:	bbc8      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
  if (iis3dwb_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != IIS3DWB_OK)
 8003012:	2101      	movs	r1, #1
 8003014:	4620      	mov	r0, r4
 8003016:	f000 fa25 	bl	8003464 <iis3dwb_reset_set>
 800301a:	bba0      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1) != IIS3DWB_OK)
 800301c:	2301      	movs	r3, #1
 800301e:	f10d 0207 	add.w	r2, sp, #7
 8003022:	2110      	movs	r1, #16
 8003024:	4620      	mov	r0, r4
 8003026:	f000 f967 	bl	80032f8 <iis3dwb_read_reg>
 800302a:	bb60      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
  reg0 |= 0xA0;
 800302c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003030:	f061 015f 	orn	r1, r1, #95	@ 0x5f
 8003034:	f88d 1007 	strb.w	r1, [sp, #7]
  if (iis3dwb_write_reg(&(pObj->Ctx), IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1) != IIS3DWB_OK)
 8003038:	2301      	movs	r3, #1
 800303a:	f10d 0207 	add.w	r2, sp, #7
 800303e:	2110      	movs	r1, #16
 8003040:	4620      	mov	r0, r4
 8003042:	f000 f961 	bl	8003308 <iis3dwb_write_reg>
 8003046:	b9f0      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
  if (iis3dwb_fifo_mode_set(&(pObj->Ctx), IIS3DWB_STREAM_MODE) != IIS3DWB_OK)
 8003048:	2106      	movs	r1, #6
 800304a:	4620      	mov	r0, r4
 800304c:	f000 fa7c 	bl	8003548 <iis3dwb_fifo_mode_set>
 8003050:	4601      	mov	r1, r0
 8003052:	b9c0      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), IIS3DWB_2g) != IIS3DWB_OK)
 8003054:	4620      	mov	r0, r4
 8003056:	f000 f95f 	bl	8003318 <iis3dwb_xl_full_scale_set>
 800305a:	b9a0      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
  if (iis3dwb_fifo_watermark_set(&(pObj->Ctx), iis3dwb_wtm_level) != IIS3DWB_OK)
 800305c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003060:	4620      	mov	r0, r4
 8003062:	f000 fa33 	bl	80034cc <iis3dwb_fifo_watermark_set>
 8003066:	b970      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
  if (iis3dwb_data_ready_mode_set(&(pObj->Ctx), IIS3DWB_DRDY_PULSED) != IIS3DWB_OK)
 8003068:	2101      	movs	r1, #1
 800306a:	4620      	mov	r0, r4
 800306c:	f000 f9d6 	bl	800341c <iis3dwb_data_ready_mode_set>
 8003070:	b948      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
   if (iis3dwb_fifo_xl_batch_set(&(pObj->Ctx), IIS3DWB_XL_BATCHED_AT_26k7Hz) != IIS3DWB_OK)
 8003072:	210a      	movs	r1, #10
 8003074:	4620      	mov	r0, r4
 8003076:	f000 fa4d 	bl	8003514 <iis3dwb_fifo_xl_batch_set>
 800307a:	b920      	cbnz	r0, 8003086 <IIS3DWB_Init+0x96>
  pObj->is_initialized = 1;
 800307c:	2301      	movs	r3, #1
 800307e:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 8003082:	b003      	add	sp, #12
 8003084:	bd30      	pop	{r4, r5, pc}
    return IIS3DWB_ERROR;
 8003086:	f04f 30ff 	mov.w	r0, #4294967295
}
 800308a:	b003      	add	sp, #12
 800308c:	bd30      	pop	{r4, r5, pc}
 800308e:	bf00      	nop

08003090 <IIS3DWB_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 8003090:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8003094:	b90b      	cbnz	r3, 800309a <IIS3DWB_ACC_Disable+0xa>
    return IIS3DWB_OK;
 8003096:	2000      	movs	r0, #0
}
 8003098:	4770      	bx	lr
{
 800309a:	b510      	push	{r4, lr}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
 800309c:	2100      	movs	r1, #0
 800309e:	4604      	mov	r4, r0
 80030a0:	301c      	adds	r0, #28
 80030a2:	f000 f96d 	bl	8003380 <iis3dwb_xl_data_rate_set>
 80030a6:	b918      	cbnz	r0, 80030b0 <IIS3DWB_ACC_Disable+0x20>
  pObj->acc_is_enabled = 0;
 80030a8:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS3DWB_OK;
 80030ac:	2000      	movs	r0, #0
}
 80030ae:	bd10      	pop	{r4, pc}
    return IIS3DWB_ERROR;
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	bf00      	nop

080030b8 <IIS3DWB_DeInit>:
{
 80030b8:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 80030ba:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 80030be:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 80030c0:	b91b      	cbnz	r3, 80030ca <IIS3DWB_DeInit+0x12>
  pObj->is_initialized = 0;
 80030c2:	2000      	movs	r0, #0
 80030c4:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 80030c8:	bd10      	pop	{r4, pc}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
 80030ca:	2100      	movs	r1, #0
 80030cc:	301c      	adds	r0, #28
 80030ce:	f000 f957 	bl	8003380 <iis3dwb_xl_data_rate_set>
 80030d2:	b910      	cbnz	r0, 80030da <IIS3DWB_DeInit+0x22>
  pObj->acc_is_enabled = 0;
 80030d4:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS3DWB_OK;
 80030d8:	e7f3      	b.n	80030c2 <IIS3DWB_DeInit+0xa>
    return IIS3DWB_ERROR;
 80030da:	f04f 30ff 	mov.w	r0, #4294967295
}
 80030de:	bd10      	pop	{r4, pc}

080030e0 <IIS3DWB_ACC_SetOutputDataRate>:
          :                    IIS3DWB_XL_ODR_26k7Hz;
 80030e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80030e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
 80030ec:	bf8c      	ite	hi
 80030ee:	2105      	movhi	r1, #5
 80030f0:	2100      	movls	r1, #0
{
 80030f2:	b508      	push	{r3, lr}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
 80030f4:	301c      	adds	r0, #28
 80030f6:	f000 f943 	bl	8003380 <iis3dwb_xl_data_rate_set>
 80030fa:	3800      	subs	r0, #0
 80030fc:	bf18      	it	ne
 80030fe:	2001      	movne	r0, #1
}
 8003100:	4240      	negs	r0, r0
 8003102:	bd08      	pop	{r3, pc}

08003104 <IIS3DWB_ACC_GetSensitivity>:
{
 8003104:	b510      	push	{r4, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	460c      	mov	r4, r1
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
 800310a:	301c      	adds	r0, #28
 800310c:	f10d 0107 	add.w	r1, sp, #7
 8003110:	f000 f91c 	bl	800334c <iis3dwb_xl_full_scale_get>
 8003114:	b998      	cbnz	r0, 800313e <IIS3DWB_ACC_GetSensitivity+0x3a>
  switch (full_scale)
 8003116:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d80d      	bhi.n	800313a <IIS3DWB_ACC_GetSensitivity+0x36>
 800311e:	e8df f003 	tbb	[pc, r3]
 8003122:	0806      	.short	0x0806
 8003124:	0a02      	.short	0x0a02
 8003126:	4b08      	ldr	r3, [pc, #32]	@ (8003148 <IIS3DWB_ACC_GetSensitivity+0x44>)
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003128:	6023      	str	r3, [r4, #0]
}
 800312a:	b002      	add	sp, #8
 800312c:	bd10      	pop	{r4, pc}
  switch (full_scale)
 800312e:	4b07      	ldr	r3, [pc, #28]	@ (800314c <IIS3DWB_ACC_GetSensitivity+0x48>)
 8003130:	e7fa      	b.n	8003128 <IIS3DWB_ACC_GetSensitivity+0x24>
    break;
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <IIS3DWB_ACC_GetSensitivity+0x4c>)
 8003134:	e7f8      	b.n	8003128 <IIS3DWB_ACC_GetSensitivity+0x24>
    break;
 8003136:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <IIS3DWB_ACC_GetSensitivity+0x50>)
 8003138:	e7f6      	b.n	8003128 <IIS3DWB_ACC_GetSensitivity+0x24>
    *Sensitivity = -1.0f;
 800313a:	4b07      	ldr	r3, [pc, #28]	@ (8003158 <IIS3DWB_ACC_GetSensitivity+0x54>)
 800313c:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 800313e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003142:	b002      	add	sp, #8
 8003144:	bd10      	pop	{r4, pc}
 8003146:	bf00      	nop
 8003148:	3df9db23 	.word	0x3df9db23
 800314c:	3d79db23 	.word	0x3d79db23
 8003150:	3ef9db23 	.word	0x3ef9db23
 8003154:	3e79db23 	.word	0x3e79db23
 8003158:	bf800000 	.word	0xbf800000

0800315c <IIS3DWB_ACC_GetFullScale>:
{
 800315c:	b510      	push	{r4, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	460c      	mov	r4, r1
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS3DWB_OK)
 8003162:	301c      	adds	r0, #28
 8003164:	f10d 0107 	add.w	r1, sp, #7
 8003168:	f000 f8f0 	bl	800334c <iis3dwb_xl_full_scale_get>
 800316c:	b9a0      	cbnz	r0, 8003198 <IIS3DWB_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 800316e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d80d      	bhi.n	8003192 <IIS3DWB_ACC_GetFullScale+0x36>
 8003176:	e8df f003 	tbb	[pc, r3]
 800317a:	0806      	.short	0x0806
 800317c:	0a02      	.short	0x0a02
 800317e:	2304      	movs	r3, #4
      *FullScale =  2;
 8003180:	6023      	str	r3, [r4, #0]
}
 8003182:	b002      	add	sp, #8
 8003184:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 8003186:	2302      	movs	r3, #2
 8003188:	e7fa      	b.n	8003180 <IIS3DWB_ACC_GetFullScale+0x24>
      break;
 800318a:	2310      	movs	r3, #16
 800318c:	e7f8      	b.n	8003180 <IIS3DWB_ACC_GetFullScale+0x24>
      break;
 800318e:	2308      	movs	r3, #8
 8003190:	e7f6      	b.n	8003180 <IIS3DWB_ACC_GetFullScale+0x24>
      *FullScale = -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
}
 800319c:	b002      	add	sp, #8
 800319e:	bd10      	pop	{r4, pc}

080031a0 <IIS3DWB_ACC_GetOutputDataRate>:
{
 80031a0:	b510      	push	{r4, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	460c      	mov	r4, r1
  if (iis3dwb_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS3DWB_OK)
 80031a6:	301c      	adds	r0, #28
 80031a8:	f10d 0107 	add.w	r1, sp, #7
 80031ac:	f000 f902 	bl	80033b4 <iis3dwb_xl_data_rate_get>
 80031b0:	b950      	cbnz	r0, 80031c8 <IIS3DWB_ACC_GetOutputDataRate+0x28>
  switch (odr_low_level)
 80031b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031b6:	b15b      	cbz	r3, 80031d0 <IIS3DWB_ACC_GetOutputDataRate+0x30>
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d103      	bne.n	80031c4 <IIS3DWB_ACC_GetOutputDataRate+0x24>
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <IIS3DWB_ACC_GetOutputDataRate+0x34>)
    *odr =  0.0f;
 80031be:	6023      	str	r3, [r4, #0]
}
 80031c0:	b002      	add	sp, #8
 80031c2:	bd10      	pop	{r4, pc}
    *odr = -1.0f;
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <IIS3DWB_ACC_GetOutputDataRate+0x38>)
 80031c6:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80031cc:	b002      	add	sp, #8
 80031ce:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 80031d0:	2300      	movs	r3, #0
 80031d2:	e7f4      	b.n	80031be <IIS3DWB_ACC_GetOutputDataRate+0x1e>
 80031d4:	46d09800 	.word	0x46d09800
 80031d8:	bf800000 	.word	0xbf800000

080031dc <IIS3DWB_ACC_GetAxesRaw>:
{
 80031dc:	b510      	push	{r4, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	460c      	mov	r4, r1
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 80031e2:	301c      	adds	r0, #28
 80031e4:	4669      	mov	r1, sp
 80031e6:	f000 f8f9 	bl	80033dc <iis3dwb_acceleration_raw_get>
 80031ea:	b930      	cbnz	r0, 80031fa <IIS3DWB_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 80031ec:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 80031ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 80031f2:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 80031f4:	80a3      	strh	r3, [r4, #4]
}
 80031f6:	b002      	add	sp, #8
 80031f8:	bd10      	pop	{r4, pc}
    return IIS3DWB_ERROR;
 80031fa:	f04f 30ff 	mov.w	r0, #4294967295
 80031fe:	e7fa      	b.n	80031f6 <IIS3DWB_ACC_GetAxesRaw+0x1a>

08003200 <IIS3DWB_ACC_GetAxes>:
{
 8003200:	b530      	push	{r4, r5, lr}
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 8003202:	f100 051c 	add.w	r5, r0, #28
{
 8003206:	b085      	sub	sp, #20
 8003208:	460c      	mov	r4, r1
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 800320a:	4628      	mov	r0, r5
 800320c:	a902      	add	r1, sp, #8
 800320e:	f000 f8e5 	bl	80033dc <iis3dwb_acceleration_raw_get>
 8003212:	2800      	cmp	r0, #0
 8003214:	d13e      	bne.n	8003294 <IIS3DWB_ACC_GetAxes+0x94>
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
 8003216:	f10d 0107 	add.w	r1, sp, #7
 800321a:	4628      	mov	r0, r5
 800321c:	f000 f896 	bl	800334c <iis3dwb_xl_full_scale_get>
 8003220:	bbc0      	cbnz	r0, 8003294 <IIS3DWB_ACC_GetAxes+0x94>
  switch (full_scale)
 8003222:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d834      	bhi.n	8003294 <IIS3DWB_ACC_GetAxes+0x94>
 800322a:	e8df f003 	tbb	[pc, r3]
 800322e:	2a30      	.short	0x2a30
 8003230:	022d      	.short	0x022d
 8003232:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800329c <IIS3DWB_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003236:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800323a:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800323e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003242:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003246:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800324a:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800324e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003252:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800325a:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800325e:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003262:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003266:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800326a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800326e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003272:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003276:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800327a:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800327e:	b005      	add	sp, #20
 8003280:	bd30      	pop	{r4, r5, pc}
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003282:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80032a0 <IIS3DWB_ACC_GetAxes+0xa0>
 8003286:	e7d6      	b.n	8003236 <IIS3DWB_ACC_GetAxes+0x36>
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003288:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 80032a4 <IIS3DWB_ACC_GetAxes+0xa4>
 800328c:	e7d3      	b.n	8003236 <IIS3DWB_ACC_GetAxes+0x36>
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800328e:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 80032a8 <IIS3DWB_ACC_GetAxes+0xa8>
 8003292:	e7d0      	b.n	8003236 <IIS3DWB_ACC_GetAxes+0x36>
    return IIS3DWB_ERROR;
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	e7f1      	b.n	800327e <IIS3DWB_ACC_GetAxes+0x7e>
 800329a:	bf00      	nop
 800329c:	3e79db23 	.word	0x3e79db23
 80032a0:	3ef9db23 	.word	0x3ef9db23
 80032a4:	3df9db23 	.word	0x3df9db23
 80032a8:	3d79db23 	.word	0x3d79db23

080032ac <IIS3DWB_RegisterBusIO>:
  if (pObj == NULL)
 80032ac:	b1e0      	cbz	r0, 80032e8 <IIS3DWB_RegisterBusIO+0x3c>
{
 80032ae:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 80032b0:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 80032b4:	688a      	ldr	r2, [r1, #8]
 80032b6:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80032b8:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 80032bc:	7b0a      	ldrb	r2, [r1, #12]
 80032be:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80032c0:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 80032c4:	6989      	ldr	r1, [r1, #24]
 80032c6:	6181      	str	r1, [r0, #24]
 80032c8:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80032ca:	4909      	ldr	r1, [pc, #36]	@ (80032f0 <IIS3DWB_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 80032cc:	4a09      	ldr	r2, [pc, #36]	@ (80032f4 <IIS3DWB_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80032ce:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 80032d0:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 80032d4:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 80032d6:	b113      	cbz	r3, 80032de <IIS3DWB_RegisterBusIO+0x32>
}
 80032d8:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 80032dc:	4718      	bx	r3
}
 80032de:	f04f 30ff 	mov.w	r0, #4294967295
 80032e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	08002f85 	.word	0x08002f85
 80032f4:	08002f95 	.word	0x08002f95

080032f8 <iis3dwb_read_reg>:
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80032f8:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80032fa:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80032fe:	46a4      	mov	ip, r4
  return ret;
}
 8003300:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003304:	4760      	bx	ip
 8003306:	bf00      	nop

08003308 <iis3dwb_write_reg>:
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003308:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800330a:	6804      	ldr	r4, [r0, #0]
 800330c:	6880      	ldr	r0, [r0, #8]
 800330e:	46a4      	mov	ip, r4
  return ret;
}
 8003310:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003314:	4760      	bx	ip
 8003316:	bf00      	nop

08003318 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	b082      	sub	sp, #8
 800331e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003320:	6880      	ldr	r0, [r0, #8]
 8003322:	6866      	ldr	r6, [r4, #4]
 8003324:	2301      	movs	r3, #1
 8003326:	aa01      	add	r2, sp, #4
 8003328:	2110      	movs	r1, #16
 800332a:	47b0      	blx	r6
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  if (ret == 0) {
 800332c:	b958      	cbnz	r0, 8003346 <iis3dwb_xl_full_scale_set+0x2e>
    ctrl1_xl.fs_xl = (uint8_t)val;
 800332e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003332:	6826      	ldr	r6, [r4, #0]
 8003334:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003336:	f365 0383 	bfi	r3, r5, #2, #2
 800333a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800333e:	aa01      	add	r2, sp, #4
 8003340:	2301      	movs	r3, #1
 8003342:	2110      	movs	r1, #16
 8003344:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 8003346:	b002      	add	sp, #8
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	bf00      	nop

0800334c <iis3dwb_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t *val)
{
 800334c:	b530      	push	{r4, r5, lr}
 800334e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003350:	2301      	movs	r3, #1
 8003352:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003356:	aa01      	add	r2, sp, #4
{
 8003358:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800335a:	2110      	movs	r1, #16
 800335c:	47a8      	blx	r5
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  switch (ctrl1_xl.fs_xl) {
 800335e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003362:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d006      	beq.n	8003378 <iis3dwb_xl_full_scale_get+0x2c>
 800336a:	2b03      	cmp	r3, #3
 800336c:	d004      	beq.n	8003378 <iis3dwb_xl_full_scale_get+0x2c>
 800336e:	f1a3 0301 	sub.w	r3, r3, #1
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	095b      	lsrs	r3, r3, #5
    case IIS3DWB_2g:
      *val = IIS3DWB_2g;
 8003378:	7023      	strb	r3, [r4, #0]
      *val = IIS3DWB_2g;
      break;
  }

  return ret;
}
 800337a:	b003      	add	sp, #12
 800337c:	bd30      	pop	{r4, r5, pc}
 800337e:	bf00      	nop

08003380 <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	4604      	mov	r4, r0
 8003384:	b082      	sub	sp, #8
 8003386:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003388:	6880      	ldr	r0, [r0, #8]
 800338a:	6866      	ldr	r6, [r4, #4]
 800338c:	2301      	movs	r3, #1
 800338e:	aa01      	add	r2, sp, #4
 8003390:	2110      	movs	r1, #16
 8003392:	47b0      	blx	r6
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  if (ret == 0) {
 8003394:	b958      	cbnz	r0, 80033ae <iis3dwb_xl_data_rate_set+0x2e>
    ctrl1_xl.xl_en = (uint8_t)val;
 8003396:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800339a:	6826      	ldr	r6, [r4, #0]
 800339c:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.xl_en = (uint8_t)val;
 800339e:	f365 1347 	bfi	r3, r5, #5, #3
 80033a2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033a6:	aa01      	add	r2, sp, #4
 80033a8:	2301      	movs	r3, #1
 80033aa:	2110      	movs	r1, #16
 80033ac:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80033ae:	b002      	add	sp, #8
 80033b0:	bd70      	pop	{r4, r5, r6, pc}
 80033b2:	bf00      	nop

080033b4 <iis3dwb_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t *val)
{
 80033b4:	b530      	push	{r4, r5, lr}
 80033b6:	b083      	sub	sp, #12
 80033b8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033ba:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80033be:	2301      	movs	r3, #1
 80033c0:	aa01      	add	r2, sp, #4
 80033c2:	2110      	movs	r1, #16
 80033c4:	47a8      	blx	r5
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  switch (ctrl1_xl.xl_en) {
 80033c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	bf14      	ite	ne
 80033d0:	2300      	movne	r3, #0
 80033d2:	2305      	moveq	r3, #5
    case IIS3DWB_XL_ODR_OFF:
      *val = IIS3DWB_XL_ODR_OFF;
 80033d4:	7023      	strb	r3, [r4, #0]
      *val = IIS3DWB_XL_ODR_OFF;
      break;
  }

  return ret;
}
 80033d6:	b003      	add	sp, #12
 80033d8:	bd30      	pop	{r4, r5, pc}
 80033da:	bf00      	nop

080033dc <iis3dwb_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80033dc:	b530      	push	{r4, r5, lr}
 80033de:	b083      	sub	sp, #12
 80033e0:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033e2:	466a      	mov	r2, sp
 80033e4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80033e8:	2306      	movs	r3, #6
 80033ea:	2128      	movs	r1, #40	@ 0x28
 80033ec:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80033ee:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80033f2:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80033f6:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80033fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80033fe:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003400:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003404:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003408:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800340c:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800340e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003412:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003416:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8003418:	b003      	add	sp, #12
 800341a:	bd30      	pop	{r4, r5, pc}

0800341c <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    iis3dwb_dataready_pulsed_t val)
{
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	4604      	mov	r4, r0
 8003420:	b082      	sub	sp, #8
 8003422:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003424:	6880      	ldr	r0, [r0, #8]
 8003426:	6866      	ldr	r6, [r4, #4]
 8003428:	2301      	movs	r3, #1
 800342a:	aa01      	add	r2, sp, #4
 800342c:	210b      	movs	r1, #11
 800342e:	47b0      	blx	r6
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                         (uint8_t *)&counter_bdr_reg1, 1);

  if (ret == 0) {
 8003430:	b958      	cbnz	r0, 800344a <iis3dwb_data_ready_mode_set+0x2e>
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 8003432:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003436:	6826      	ldr	r6, [r4, #0]
 8003438:	68a0      	ldr	r0, [r4, #8]
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 800343a:	f365 13c7 	bfi	r3, r5, #7, #1
 800343e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003442:	aa01      	add	r2, sp, #4
 8003444:	2301      	movs	r3, #1
 8003446:	210b      	movs	r1, #11
 8003448:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                            (uint8_t *)&counter_bdr_reg1, 1);
  }

  return ret;
}
 800344a:	b002      	add	sp, #8
 800344c:	bd70      	pop	{r4, r5, r6, pc}
 800344e:	bf00      	nop

08003450 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003450:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003452:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8003456:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003458:	46a4      	mov	ip, r4
 800345a:	2301      	movs	r3, #1
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
  return ret;
}
 800345c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003460:	210f      	movs	r1, #15
 8003462:	4760      	bx	ip

08003464 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	4604      	mov	r4, r0
 8003468:	b082      	sub	sp, #8
 800346a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800346c:	6880      	ldr	r0, [r0, #8]
 800346e:	6866      	ldr	r6, [r4, #4]
 8003470:	2301      	movs	r3, #1
 8003472:	aa01      	add	r2, sp, #4
 8003474:	2112      	movs	r1, #18
 8003476:	47b0      	blx	r6
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8003478:	b958      	cbnz	r0, 8003492 <iis3dwb_reset_set+0x2e>
    ctrl3_c.sw_reset = (uint8_t)val;
 800347a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800347e:	6826      	ldr	r6, [r4, #0]
 8003480:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.sw_reset = (uint8_t)val;
 8003482:	f365 0300 	bfi	r3, r5, #0, #1
 8003486:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800348a:	aa01      	add	r2, sp, #4
 800348c:	2301      	movs	r3, #1
 800348e:	2112      	movs	r1, #18
 8003490:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8003492:	b002      	add	sp, #8
 8003494:	bd70      	pop	{r4, r5, r6, pc}
 8003496:	bf00      	nop

08003498 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis3dwb_i2c_disable_t val)
{
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	4604      	mov	r4, r0
 800349c:	b082      	sub	sp, #8
 800349e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034a0:	6880      	ldr	r0, [r0, #8]
 80034a2:	6866      	ldr	r6, [r4, #4]
 80034a4:	2301      	movs	r3, #1
 80034a6:	aa01      	add	r2, sp, #4
 80034a8:	2113      	movs	r1, #19
 80034aa:	47b0      	blx	r6
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);

  if (ret == 0) {
 80034ac:	b958      	cbnz	r0, 80034c6 <iis3dwb_i2c_interface_set+0x2e>
    ctrl4_c.i2c_disable = (uint8_t)val;
 80034ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034b2:	6826      	ldr	r6, [r4, #0]
 80034b4:	68a0      	ldr	r0, [r4, #8]
    ctrl4_c.i2c_disable = (uint8_t)val;
 80034b6:	f365 0382 	bfi	r3, r5, #2, #1
 80034ba:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034be:	aa01      	add	r2, sp, #4
 80034c0:	2301      	movs	r3, #1
 80034c2:	2113      	movs	r1, #19
 80034c4:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
}
 80034c6:	b002      	add	sp, #8
 80034c8:	bd70      	pop	{r4, r5, r6, pc}
 80034ca:	bf00      	nop

080034cc <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	4604      	mov	r4, r0
 80034d0:	b082      	sub	sp, #8
 80034d2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034d4:	6880      	ldr	r0, [r0, #8]
 80034d6:	6866      	ldr	r6, [r4, #4]
 80034d8:	2301      	movs	r3, #1
 80034da:	aa01      	add	r2, sp, #4
 80034dc:	2108      	movs	r1, #8
 80034de:	47b0      	blx	r6
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 80034e0:	b9a8      	cbnz	r0, 800350e <iis3dwb_fifo_watermark_set+0x42>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034e2:	68a0      	ldr	r0, [r4, #8]
 80034e4:	6826      	ldr	r6, [r4, #0]
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 80034e6:	f88d 5000 	strb.w	r5, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034ea:	2301      	movs	r3, #1
 80034ec:	466a      	mov	r2, sp
 80034ee:	2107      	movs	r1, #7
 80034f0:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
                            (uint8_t *)&fifo_ctrl1, 1);
  }

  if (ret == 0) {
 80034f2:	b960      	cbnz	r0, 800350e <iis3dwb_fifo_watermark_set+0x42>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 80034f4:	f89d c004 	ldrb.w	ip, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034f8:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 80034fa:	0a29      	lsrs	r1, r5, #8
 80034fc:	f361 0c00 	bfi	ip, r1, #0, #1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003500:	6825      	ldr	r5, [r4, #0]
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8003502:	f88d c004 	strb.w	ip, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003506:	2301      	movs	r3, #1
 8003508:	aa01      	add	r2, sp, #4
 800350a:	2108      	movs	r1, #8
 800350c:	47a8      	blx	r5
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
                            (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
}
 800350e:	b002      	add	sp, #8
 8003510:	bd70      	pop	{r4, r5, r6, pc}
 8003512:	bf00      	nop

08003514 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  iis3dwb_bdr_xl_t val)
{
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	4604      	mov	r4, r0
 8003518:	b082      	sub	sp, #8
 800351a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800351c:	6880      	ldr	r0, [r0, #8]
 800351e:	6866      	ldr	r6, [r4, #4]
 8003520:	2301      	movs	r3, #1
 8003522:	aa01      	add	r2, sp, #4
 8003524:	2109      	movs	r1, #9
 8003526:	47b0      	blx	r6
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8003528:	b958      	cbnz	r0, 8003542 <iis3dwb_fifo_xl_batch_set+0x2e>
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 800352a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800352e:	6826      	ldr	r6, [r4, #0]
 8003530:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8003532:	f365 0303 	bfi	r3, r5, #0, #4
 8003536:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800353a:	aa01      	add	r2, sp, #4
 800353c:	2301      	movs	r3, #1
 800353e:	2109      	movs	r1, #9
 8003540:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
}
 8003542:	b002      	add	sp, #8
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	bf00      	nop

08003548 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                              iis3dwb_fifo_mode_t val)
{
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	4604      	mov	r4, r0
 800354c:	b082      	sub	sp, #8
 800354e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003550:	6880      	ldr	r0, [r0, #8]
 8003552:	6866      	ldr	r6, [r4, #4]
 8003554:	2301      	movs	r3, #1
 8003556:	aa01      	add	r2, sp, #4
 8003558:	210a      	movs	r1, #10
 800355a:	47b0      	blx	r6
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 800355c:	b958      	cbnz	r0, 8003576 <iis3dwb_fifo_mode_set+0x2e>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800355e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003562:	6826      	ldr	r6, [r4, #0]
 8003564:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8003566:	f365 0302 	bfi	r3, r5, #0, #3
 800356a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800356e:	aa01      	add	r2, sp, #4
 8003570:	2301      	movs	r3, #1
 8003572:	210a      	movs	r1, #10
 8003574:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 8003576:	b002      	add	sp, #8
 8003578:	bd70      	pop	{r4, r5, r6, pc}
 800357a:	bf00      	nop

0800357c <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 800357c:	b410      	push	{r4}

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 1;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 800357e:	f240 1c01 	movw	ip, #257	@ 0x101
 8003582:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6667.0f;
 8003586:	4b07      	ldr	r3, [pc, #28]	@ (80035a4 <ISM330DHCX_GetCapabilities+0x28>)
 8003588:	610b      	str	r3, [r1, #16]
  Capabilities->MagMaxFS     = 0;
 800358a:	2000      	movs	r0, #0
  Capabilities->GyroMaxFS    = 2000;
 800358c:	e9c1 c400 	strd	ip, r4, [r1]
  Capabilities->AccMaxFS     = 16;
 8003590:	2410      	movs	r4, #16
  Capabilities->AccMaxOdr    = 6667.0f;
  Capabilities->MagMaxOdr    = 0.0f;
 8003592:	2200      	movs	r2, #0
  Capabilities->MagMaxFS     = 0;
 8003594:	e9c1 4002 	strd	r4, r0, [r1, #8]
  Capabilities->AccMaxOdr    = 6667.0f;
 8003598:	614b      	str	r3, [r1, #20]
  return ISM330DHCX_OK;
}
 800359a:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxOdr    = 0.0f;
 800359e:	618a      	str	r2, [r1, #24]
}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	45d05800 	.word	0x45d05800

080035a8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80035a8:	b410      	push	{r4}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80035aa:	6944      	ldr	r4, [r0, #20]
 80035ac:	7b00      	ldrb	r0, [r0, #12]
 80035ae:	46a4      	mov	ip, r4
}
 80035b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80035b4:	4760      	bx	ip
 80035b6:	bf00      	nop

080035b8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80035b8:	b410      	push	{r4}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80035ba:	6904      	ldr	r4, [r0, #16]
 80035bc:	7b00      	ldrb	r0, [r0, #12]
 80035be:	46a4      	mov	ip, r4
}
 80035c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80035c4:	4760      	bx	ip
 80035c6:	bf00      	nop

080035c8 <ISM330DHCX_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 80035c8:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d00c      	beq.n	80035ea <ISM330DHCX_ACC_Enable+0x22>
{
 80035d0:	b510      	push	{r4, lr}
 80035d2:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80035d4:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 80035d8:	301c      	adds	r0, #28
 80035da:	f000 feed 	bl	80043b8 <ism330dhcx_xl_data_rate_set>
 80035de:	b930      	cbnz	r0, 80035ee <ISM330DHCX_ACC_Enable+0x26>
  pObj->acc_is_enabled = 1;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return ISM330DHCX_OK;
 80035e6:	2000      	movs	r0, #0
}
 80035e8:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 80035ea:	2000      	movs	r0, #0
}
 80035ec:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80035f2:	bd10      	pop	{r4, pc}

080035f4 <ISM330DHCX_ACC_SetFullScale>:
           : (FullScale <= 4) ? ISM330DHCX_4g
 80035f4:	2902      	cmp	r1, #2
{
 80035f6:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? ISM330DHCX_4g
 80035f8:	dd06      	ble.n	8003608 <ISM330DHCX_ACC_SetFullScale+0x14>
 80035fa:	2904      	cmp	r1, #4
 80035fc:	dd0d      	ble.n	800361a <ISM330DHCX_ACC_SetFullScale+0x26>
 80035fe:	2908      	cmp	r1, #8
 8003600:	bfcc      	ite	gt
 8003602:	2101      	movgt	r1, #1
 8003604:	2103      	movle	r1, #3
 8003606:	e000      	b.n	800360a <ISM330DHCX_ACC_SetFullScale+0x16>
 8003608:	2100      	movs	r1, #0
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800360a:	301c      	adds	r0, #28
 800360c:	f000 fcbc 	bl	8003f88 <ism330dhcx_xl_full_scale_set>
 8003610:	3800      	subs	r0, #0
 8003612:	bf18      	it	ne
 8003614:	2001      	movne	r0, #1
}
 8003616:	4240      	negs	r0, r0
 8003618:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? ISM330DHCX_4g
 800361a:	2102      	movs	r1, #2
 800361c:	e7f5      	b.n	800360a <ISM330DHCX_ACC_SetFullScale+0x16>
 800361e:	bf00      	nop

08003620 <ISM330DHCX_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8003620:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8003624:	2b01      	cmp	r3, #1
 8003626:	d00c      	beq.n	8003642 <ISM330DHCX_GYRO_Enable+0x22>
{
 8003628:	b510      	push	{r4, lr}
 800362a:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 800362c:	f890 102c 	ldrb.w	r1, [r0, #44]	@ 0x2c
 8003630:	301c      	adds	r0, #28
 8003632:	f000 ffbd 	bl	80045b0 <ism330dhcx_gy_data_rate_set>
 8003636:	b930      	cbnz	r0, 8003646 <ISM330DHCX_GYRO_Enable+0x26>
  pObj->gyro_is_enabled = 1;
 8003638:	2301      	movs	r3, #1
 800363a:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return ISM330DHCX_OK;
 800363e:	2000      	movs	r0, #0
}
 8003640:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 8003642:	2000      	movs	r0, #0
}
 8003644:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 8003646:	f04f 30ff 	mov.w	r0, #4294967295
}
 800364a:	bd10      	pop	{r4, pc}

0800364c <ISM330DHCX_GYRO_SetOutputDataRate>:
{
 800364c:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 800364e:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003652:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
  if (pObj->gyro_is_enabled == 1U)
 8003656:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003658:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->gyro_is_enabled == 1U)
 800365c:	d042      	beq.n	80036e4 <ISM330DHCX_GYRO_SetOutputDataRate+0x98>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	d804      	bhi.n	800366e <ISM330DHCX_GYRO_SetOutputDataRate+0x22>
 8003664:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003666:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800366a:	2000      	movs	r0, #0
}
 800366c:	bd08      	pop	{r3, pc}
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800366e:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003672:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367a:	d978      	bls.n	800376e <ISM330DHCX_GYRO_SetOutputDataRate+0x122>
 800367c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80037a8 <ISM330DHCX_GYRO_SetOutputDataRate+0x15c>
 8003680:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d975      	bls.n	8003776 <ISM330DHCX_GYRO_SetOutputDataRate+0x12a>
 800368a:	eddf 7a48 	vldr	s15, [pc, #288]	@ 80037ac <ISM330DHCX_GYRO_SetOutputDataRate+0x160>
 800368e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d972      	bls.n	800377e <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 8003698:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80037b0 <ISM330DHCX_GYRO_SetOutputDataRate+0x164>
 800369c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a4:	d96f      	bls.n	8003786 <ISM330DHCX_GYRO_SetOutputDataRate+0x13a>
 80036a6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80037b4 <ISM330DHCX_GYRO_SetOutputDataRate+0x168>
 80036aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b2:	d96c      	bls.n	800378e <ISM330DHCX_GYRO_SetOutputDataRate+0x142>
 80036b4:	eddf 7a40 	vldr	s15, [pc, #256]	@ 80037b8 <ISM330DHCX_GYRO_SetOutputDataRate+0x16c>
 80036b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	d969      	bls.n	8003796 <ISM330DHCX_GYRO_SetOutputDataRate+0x14a>
 80036c2:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 80037bc <ISM330DHCX_GYRO_SetOutputDataRate+0x170>
 80036c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	d966      	bls.n	800379e <ISM330DHCX_GYRO_SetOutputDataRate+0x152>
 80036d0:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80037c0 <ISM330DHCX_GYRO_SetOutputDataRate+0x174>
 80036d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	bf94      	ite	ls
 80036de:	2309      	movls	r3, #9
 80036e0:	230a      	movhi	r3, #10
 80036e2:	e7c0      	b.n	8003666 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80036e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e8:	d939      	bls.n	800375e <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
 80036ea:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 80036ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	d93c      	bls.n	8003772 <ISM330DHCX_GYRO_SetOutputDataRate+0x126>
 80036f8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80037a8 <ISM330DHCX_GYRO_SetOutputDataRate+0x15c>
 80036fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003704:	d939      	bls.n	800377a <ISM330DHCX_GYRO_SetOutputDataRate+0x12e>
 8003706:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80037ac <ISM330DHCX_GYRO_SetOutputDataRate+0x160>
 800370a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003712:	d936      	bls.n	8003782 <ISM330DHCX_GYRO_SetOutputDataRate+0x136>
 8003714:	eddf 7a26 	vldr	s15, [pc, #152]	@ 80037b0 <ISM330DHCX_GYRO_SetOutputDataRate+0x164>
 8003718:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	d933      	bls.n	800378a <ISM330DHCX_GYRO_SetOutputDataRate+0x13e>
 8003722:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80037b4 <ISM330DHCX_GYRO_SetOutputDataRate+0x168>
 8003726:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	d930      	bls.n	8003792 <ISM330DHCX_GYRO_SetOutputDataRate+0x146>
 8003730:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80037b8 <ISM330DHCX_GYRO_SetOutputDataRate+0x16c>
 8003734:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d92d      	bls.n	800379a <ISM330DHCX_GYRO_SetOutputDataRate+0x14e>
 800373e:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80037bc <ISM330DHCX_GYRO_SetOutputDataRate+0x170>
 8003742:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374a:	d92a      	bls.n	80037a2 <ISM330DHCX_GYRO_SetOutputDataRate+0x156>
 800374c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80037c0 <ISM330DHCX_GYRO_SetOutputDataRate+0x174>
 8003750:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	bf94      	ite	ls
 800375a:	2109      	movls	r1, #9
 800375c:	210a      	movhi	r1, #10
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800375e:	301c      	adds	r0, #28
 8003760:	f000 ff26 	bl	80045b0 <ism330dhcx_gy_data_rate_set>
 8003764:	3800      	subs	r0, #0
 8003766:	bf18      	it	ne
 8003768:	2001      	movne	r0, #1
 800376a:	4240      	negs	r0, r0
}
 800376c:	bd08      	pop	{r3, pc}
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800376e:	2302      	movs	r3, #2
 8003770:	e779      	b.n	8003666 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003772:	2102      	movs	r1, #2
 8003774:	e7f3      	b.n	800375e <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003776:	2303      	movs	r3, #3
 8003778:	e775      	b.n	8003666 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800377a:	2103      	movs	r1, #3
 800377c:	e7ef      	b.n	800375e <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800377e:	2304      	movs	r3, #4
 8003780:	e771      	b.n	8003666 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003782:	2104      	movs	r1, #4
 8003784:	e7eb      	b.n	800375e <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003786:	2305      	movs	r3, #5
 8003788:	e76d      	b.n	8003666 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800378a:	2105      	movs	r1, #5
 800378c:	e7e7      	b.n	800375e <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800378e:	2306      	movs	r3, #6
 8003790:	e769      	b.n	8003666 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003792:	2106      	movs	r1, #6
 8003794:	e7e3      	b.n	800375e <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003796:	2307      	movs	r3, #7
 8003798:	e765      	b.n	8003666 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800379a:	2107      	movs	r1, #7
 800379c:	e7df      	b.n	800375e <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800379e:	2308      	movs	r3, #8
 80037a0:	e761      	b.n	8003666 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80037a2:	2108      	movs	r1, #8
 80037a4:	e7db      	b.n	800375e <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
 80037a6:	bf00      	nop
 80037a8:	42500000 	.word	0x42500000
 80037ac:	42d00000 	.word	0x42d00000
 80037b0:	43500000 	.word	0x43500000
 80037b4:	43d08000 	.word	0x43d08000
 80037b8:	44504000 	.word	0x44504000
 80037bc:	44d06000 	.word	0x44d06000
 80037c0:	45505000 	.word	0x45505000

080037c4 <ISM330DHCX_Init>:
{
 80037c4:	b570      	push	{r4, r5, r6, lr}
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80037c6:	f100 041c 	add.w	r4, r0, #28
{
 80037ca:	4605      	mov	r5, r0
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80037cc:	2101      	movs	r1, #1
 80037ce:	4620      	mov	r0, r4
 80037d0:	f000 fd34 	bl	800423c <ism330dhcx_auto_increment_set>
 80037d4:	bb80      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 80037d6:	2101      	movs	r1, #1
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 fd15 	bl	8004208 <ism330dhcx_reset_set>
 80037de:	bb58      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 80037e0:	2101      	movs	r1, #1
 80037e2:	4620      	mov	r0, r4
 80037e4:	f000 fd2a 	bl	800423c <ism330dhcx_auto_increment_set>
 80037e8:	bb30      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80037ea:	2101      	movs	r1, #1
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 fca7 	bl	8004140 <ism330dhcx_block_data_update_set>
 80037f2:	4601      	mov	r1, r0
 80037f4:	bb00      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 80037f6:	4620      	mov	r0, r4
 80037f8:	f000 fd3a 	bl	8004270 <ism330dhcx_fifo_mode_set>
 80037fc:	4601      	mov	r1, r0
 80037fe:	b9d8      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8003800:	2604      	movs	r6, #4
 8003802:	f885 602b 	strb.w	r6, [r5, #43]	@ 0x2b
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003806:	4620      	mov	r0, r4
 8003808:	f000 fdd6 	bl	80043b8 <ism330dhcx_xl_data_rate_set>
 800380c:	4601      	mov	r1, r0
 800380e:	b998      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8003810:	4620      	mov	r0, r4
 8003812:	f000 fbb9 	bl	8003f88 <ism330dhcx_xl_full_scale_set>
 8003816:	4601      	mov	r1, r0
 8003818:	b970      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 800381a:	f885 602c 	strb.w	r6, [r5, #44]	@ 0x2c
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800381e:	4620      	mov	r0, r4
 8003820:	f000 fec6 	bl	80045b0 <ism330dhcx_gy_data_rate_set>
 8003824:	b940      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8003826:	210c      	movs	r1, #12
 8003828:	4620      	mov	r0, r4
 800382a:	f000 fc13 	bl	8004054 <ism330dhcx_gy_full_scale_set>
 800382e:	b918      	cbnz	r0, 8003838 <ISM330DHCX_Init+0x74>
  pObj->is_initialized = 1;
 8003830:	2301      	movs	r3, #1
 8003832:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 8003836:	bd70      	pop	{r4, r5, r6, pc}
    return ISM330DHCX_ERROR;
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
}
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	bf00      	nop

08003840 <ISM330DHCX_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003840:	297d      	cmp	r1, #125	@ 0x7d
{
 8003842:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003844:	dd0a      	ble.n	800385c <ISM330DHCX_GYRO_SetFullScale+0x1c>
 8003846:	29fa      	cmp	r1, #250	@ 0xfa
 8003848:	dd11      	ble.n	800386e <ISM330DHCX_GYRO_SetFullScale+0x2e>
 800384a:	f5b1 7ffa 	cmp.w	r1, #500	@ 0x1f4
 800384e:	dd10      	ble.n	8003872 <ISM330DHCX_GYRO_SetFullScale+0x32>
 8003850:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8003854:	bfcc      	ite	gt
 8003856:	210c      	movgt	r1, #12
 8003858:	2108      	movle	r1, #8
 800385a:	e000      	b.n	800385e <ISM330DHCX_GYRO_SetFullScale+0x1e>
 800385c:	2102      	movs	r1, #2
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800385e:	301c      	adds	r0, #28
 8003860:	f000 fbf8 	bl	8004054 <ism330dhcx_gy_full_scale_set>
 8003864:	3800      	subs	r0, #0
 8003866:	bf18      	it	ne
 8003868:	2001      	movne	r0, #1
}
 800386a:	4240      	negs	r0, r0
 800386c:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 800386e:	2100      	movs	r1, #0
 8003870:	e7f5      	b.n	800385e <ISM330DHCX_GYRO_SetFullScale+0x1e>
 8003872:	2104      	movs	r1, #4
 8003874:	e7f3      	b.n	800385e <ISM330DHCX_GYRO_SetFullScale+0x1e>
 8003876:	bf00      	nop

08003878 <ISM330DHCX_ReadID>:
{
 8003878:	b508      	push	{r3, lr}
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 800387a:	301c      	adds	r0, #28
 800387c:	f000 fcba 	bl	80041f4 <ism330dhcx_device_id_get>
 8003880:	3800      	subs	r0, #0
 8003882:	bf18      	it	ne
 8003884:	2001      	movne	r0, #1
}
 8003886:	4240      	negs	r0, r0
 8003888:	bd08      	pop	{r3, pc}
 800388a:	bf00      	nop

0800388c <ISM330DHCX_ACC_Disable>:
{
 800388c:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 800388e:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8003892:	b90b      	cbnz	r3, 8003898 <ISM330DHCX_ACC_Disable+0xc>
    return ISM330DHCX_OK;
 8003894:	2000      	movs	r0, #0
}
 8003896:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003898:	f100 051c 	add.w	r5, r0, #28
 800389c:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 80038a0:	4604      	mov	r4, r0
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 fba4 	bl	8003ff0 <ism330dhcx_xl_data_rate_get>
 80038a8:	4601      	mov	r1, r0
 80038aa:	b930      	cbnz	r0, 80038ba <ISM330DHCX_ACC_Disable+0x2e>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80038ac:	4628      	mov	r0, r5
 80038ae:	f000 fd83 	bl	80043b8 <ism330dhcx_xl_data_rate_set>
 80038b2:	b910      	cbnz	r0, 80038ba <ISM330DHCX_ACC_Disable+0x2e>
  pObj->acc_is_enabled = 0;
 80038b4:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return ISM330DHCX_OK;
 80038b8:	e7ec      	b.n	8003894 <ISM330DHCX_ACC_Disable+0x8>
    return ISM330DHCX_ERROR;
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295
}
 80038be:	bd38      	pop	{r3, r4, r5, pc}

080038c0 <ISM330DHCX_ACC_GetOutputDataRate>:
{
 80038c0:	b510      	push	{r4, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	460c      	mov	r4, r1
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80038c6:	301c      	adds	r0, #28
 80038c8:	f10d 0107 	add.w	r1, sp, #7
 80038cc:	f000 fb90 	bl	8003ff0 <ism330dhcx_xl_data_rate_get>
 80038d0:	bb18      	cbnz	r0, 800391a <ISM330DHCX_ACC_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 80038d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80038d6:	2b0a      	cmp	r3, #10
 80038d8:	d81f      	bhi.n	800391a <ISM330DHCX_ACC_GetOutputDataRate+0x5a>
 80038da:	e8df f003 	tbb	[pc, r3]
 80038de:	060a      	.short	0x060a
 80038e0:	18160e0c 	.word	0x18160e0c
 80038e4:	14121c1a 	.word	0x14121c1a
 80038e8:	10          	.byte	0x10
 80038e9:	00          	.byte	0x00
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <ISM330DHCX_ACC_GetOutputDataRate+0x60>)
      *Odr = 0.0f;
 80038ec:	6023      	str	r3, [r4, #0]
}
 80038ee:	b002      	add	sp, #8
 80038f0:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 80038f2:	2300      	movs	r3, #0
 80038f4:	e7fa      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <ISM330DHCX_ACC_GetOutputDataRate+0x64>)
 80038f8:	e7f8      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <ISM330DHCX_ACC_GetOutputDataRate+0x68>)
 80038fc:	e7f6      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 80038fe:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <ISM330DHCX_ACC_GetOutputDataRate+0x6c>)
 8003900:	e7f4      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <ISM330DHCX_ACC_GetOutputDataRate+0x70>)
 8003904:	e7f2      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003906:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <ISM330DHCX_ACC_GetOutputDataRate+0x74>)
 8003908:	e7f0      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 800390a:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <ISM330DHCX_ACC_GetOutputDataRate+0x78>)
 800390c:	e7ee      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <ISM330DHCX_ACC_GetOutputDataRate+0x7c>)
 8003910:	e7ec      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <ISM330DHCX_ACC_GetOutputDataRate+0x80>)
 8003914:	e7ea      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <ISM330DHCX_ACC_GetOutputDataRate+0x84>)
 8003918:	e7e8      	b.n	80038ec <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
  switch (odr_low_level)
 800391a:	f04f 30ff 	mov.w	r0, #4294967295
 800391e:	e7e6      	b.n	80038ee <ISM330DHCX_ACC_GetOutputDataRate+0x2e>
 8003920:	41480000 	.word	0x41480000
 8003924:	41d00000 	.word	0x41d00000
 8003928:	42500000 	.word	0x42500000
 800392c:	45d05800 	.word	0x45d05800
 8003930:	44d06000 	.word	0x44d06000
 8003934:	45505000 	.word	0x45505000
 8003938:	42d00000 	.word	0x42d00000
 800393c:	43500000 	.word	0x43500000
 8003940:	43d08000 	.word	0x43d08000
 8003944:	44504000 	.word	0x44504000

08003948 <ISM330DHCX_ACC_GetSensitivity>:
{
 8003948:	b510      	push	{r4, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800394e:	301c      	adds	r0, #28
 8003950:	f10d 0107 	add.w	r1, sp, #7
 8003954:	f000 fb32 	bl	8003fbc <ism330dhcx_xl_full_scale_get>
 8003958:	b988      	cbnz	r0, 800397e <ISM330DHCX_ACC_GetSensitivity+0x36>
  switch (full_scale)
 800395a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d80d      	bhi.n	800397e <ISM330DHCX_ACC_GetSensitivity+0x36>
 8003962:	e8df f003 	tbb	[pc, r3]
 8003966:	0a06      	.short	0x0a06
 8003968:	0802      	.short	0x0802
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <ISM330DHCX_ACC_GetSensitivity+0x3c>)
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 800396c:	6023      	str	r3, [r4, #0]
}
 800396e:	b002      	add	sp, #8
 8003970:	bd10      	pop	{r4, pc}
  switch (full_scale)
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <ISM330DHCX_ACC_GetSensitivity+0x40>)
 8003974:	e7fa      	b.n	800396c <ISM330DHCX_ACC_GetSensitivity+0x24>
      break;
 8003976:	4b05      	ldr	r3, [pc, #20]	@ (800398c <ISM330DHCX_ACC_GetSensitivity+0x44>)
 8003978:	e7f8      	b.n	800396c <ISM330DHCX_ACC_GetSensitivity+0x24>
      break;
 800397a:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <ISM330DHCX_ACC_GetSensitivity+0x48>)
 800397c:	e7f6      	b.n	800396c <ISM330DHCX_ACC_GetSensitivity+0x24>
  switch (full_scale)
 800397e:	f04f 30ff 	mov.w	r0, #4294967295
 8003982:	e7f4      	b.n	800396e <ISM330DHCX_ACC_GetSensitivity+0x26>
 8003984:	3df9db23 	.word	0x3df9db23
 8003988:	3d79db23 	.word	0x3d79db23
 800398c:	3e79db23 	.word	0x3e79db23
 8003990:	3ef9db23 	.word	0x3ef9db23

08003994 <ISM330DHCX_ACC_GetFullScale>:
{
 8003994:	b510      	push	{r4, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800399a:	301c      	adds	r0, #28
 800399c:	f10d 0107 	add.w	r1, sp, #7
 80039a0:	f000 fb0c 	bl	8003fbc <ism330dhcx_xl_full_scale_get>
 80039a4:	b988      	cbnz	r0, 80039ca <ISM330DHCX_ACC_GetFullScale+0x36>
  switch (fs_low_level)
 80039a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d80d      	bhi.n	80039ca <ISM330DHCX_ACC_GetFullScale+0x36>
 80039ae:	e8df f003 	tbb	[pc, r3]
 80039b2:	0a06      	.short	0x0a06
 80039b4:	0802      	.short	0x0802
 80039b6:	2304      	movs	r3, #4
      *FullScale =  2;
 80039b8:	6023      	str	r3, [r4, #0]
}
 80039ba:	b002      	add	sp, #8
 80039bc:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 80039be:	2302      	movs	r3, #2
 80039c0:	e7fa      	b.n	80039b8 <ISM330DHCX_ACC_GetFullScale+0x24>
      break;
 80039c2:	2308      	movs	r3, #8
 80039c4:	e7f8      	b.n	80039b8 <ISM330DHCX_ACC_GetFullScale+0x24>
      break;
 80039c6:	2310      	movs	r3, #16
 80039c8:	e7f6      	b.n	80039b8 <ISM330DHCX_ACC_GetFullScale+0x24>
  switch (fs_low_level)
 80039ca:	f04f 30ff 	mov.w	r0, #4294967295
 80039ce:	e7f4      	b.n	80039ba <ISM330DHCX_ACC_GetFullScale+0x26>

080039d0 <ISM330DHCX_ACC_GetAxesRaw>:
{
 80039d0:	b510      	push	{r4, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80039d6:	301c      	adds	r0, #28
 80039d8:	4669      	mov	r1, sp
 80039da:	f000 fbeb 	bl	80041b4 <ism330dhcx_acceleration_raw_get>
 80039de:	b930      	cbnz	r0, 80039ee <ISM330DHCX_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 80039e0:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 80039e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 80039e6:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 80039e8:	80a3      	strh	r3, [r4, #4]
}
 80039ea:	b002      	add	sp, #8
 80039ec:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295
 80039f2:	e7fa      	b.n	80039ea <ISM330DHCX_ACC_GetAxesRaw+0x1a>

080039f4 <ISM330DHCX_GYRO_Disable>:
{
 80039f4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 80039f6:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 80039fa:	b90b      	cbnz	r3, 8003a00 <ISM330DHCX_GYRO_Disable+0xc>
    return ISM330DHCX_OK;
 80039fc:	2000      	movs	r0, #0
}
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003a00:	f100 051c 	add.w	r5, r0, #28
 8003a04:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 8003a08:	4604      	mov	r4, r0
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f000 fb6a 	bl	80040e4 <ism330dhcx_gy_data_rate_get>
 8003a10:	4601      	mov	r1, r0
 8003a12:	b930      	cbnz	r0, 8003a22 <ISM330DHCX_GYRO_Disable+0x2e>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003a14:	4628      	mov	r0, r5
 8003a16:	f000 fdcb 	bl	80045b0 <ism330dhcx_gy_data_rate_set>
 8003a1a:	b910      	cbnz	r0, 8003a22 <ISM330DHCX_GYRO_Disable+0x2e>
  pObj->gyro_is_enabled = 0;
 8003a1c:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return ISM330DHCX_OK;
 8003a20:	e7ec      	b.n	80039fc <ISM330DHCX_GYRO_Disable+0x8>
    return ISM330DHCX_ERROR;
 8003a22:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003a26:	bd38      	pop	{r3, r4, r5, pc}

08003a28 <ISM330DHCX_GYRO_GetOutputDataRate>:
{
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	460c      	mov	r4, r1
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003a2e:	301c      	adds	r0, #28
 8003a30:	f10d 0107 	add.w	r1, sp, #7
 8003a34:	f000 fb56 	bl	80040e4 <ism330dhcx_gy_data_rate_get>
 8003a38:	bb18      	cbnz	r0, 8003a82 <ISM330DHCX_GYRO_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 8003a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a3e:	2b0a      	cmp	r3, #10
 8003a40:	d81f      	bhi.n	8003a82 <ISM330DHCX_GYRO_GetOutputDataRate+0x5a>
 8003a42:	e8df f003 	tbb	[pc, r3]
 8003a46:	060a      	.short	0x060a
 8003a48:	18160e0c 	.word	0x18160e0c
 8003a4c:	14121c1a 	.word	0x14121c1a
 8003a50:	10          	.byte	0x10
 8003a51:	00          	.byte	0x00
 8003a52:	4b0d      	ldr	r3, [pc, #52]	@ (8003a88 <ISM330DHCX_GYRO_GetOutputDataRate+0x60>)
      *Odr = 0.0f;
 8003a54:	6023      	str	r3, [r4, #0]
}
 8003a56:	b002      	add	sp, #8
 8003a58:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e7fa      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <ISM330DHCX_GYRO_GetOutputDataRate+0x64>)
 8003a60:	e7f8      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <ISM330DHCX_GYRO_GetOutputDataRate+0x68>)
 8003a64:	e7f6      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a66:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <ISM330DHCX_GYRO_GetOutputDataRate+0x6c>)
 8003a68:	e7f4      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <ISM330DHCX_GYRO_GetOutputDataRate+0x70>)
 8003a6c:	e7f2      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <ISM330DHCX_GYRO_GetOutputDataRate+0x74>)
 8003a70:	e7f0      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a72:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <ISM330DHCX_GYRO_GetOutputDataRate+0x78>)
 8003a74:	e7ee      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <ISM330DHCX_GYRO_GetOutputDataRate+0x7c>)
 8003a78:	e7ec      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <ISM330DHCX_GYRO_GetOutputDataRate+0x80>)
 8003a7c:	e7ea      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <ISM330DHCX_GYRO_GetOutputDataRate+0x84>)
 8003a80:	e7e8      	b.n	8003a54 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
  switch (odr_low_level)
 8003a82:	f04f 30ff 	mov.w	r0, #4294967295
 8003a86:	e7e6      	b.n	8003a56 <ISM330DHCX_GYRO_GetOutputDataRate+0x2e>
 8003a88:	41480000 	.word	0x41480000
 8003a8c:	41d00000 	.word	0x41d00000
 8003a90:	42500000 	.word	0x42500000
 8003a94:	45d05800 	.word	0x45d05800
 8003a98:	44d06000 	.word	0x44d06000
 8003a9c:	45505000 	.word	0x45505000
 8003aa0:	42d00000 	.word	0x42d00000
 8003aa4:	43500000 	.word	0x43500000
 8003aa8:	43d08000 	.word	0x43d08000
 8003aac:	44504000 	.word	0x44504000

08003ab0 <ISM330DHCX_GYRO_GetSensitivity>:
{
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003ab6:	301c      	adds	r0, #28
 8003ab8:	f10d 0107 	add.w	r1, sp, #7
 8003abc:	f000 fae4 	bl	8004088 <ism330dhcx_gy_full_scale_get>
 8003ac0:	b960      	cbnz	r0, 8003adc <ISM330DHCX_GYRO_GetSensitivity+0x2c>
  switch (full_scale)
 8003ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d808      	bhi.n	8003adc <ISM330DHCX_GYRO_GetSensitivity+0x2c>
 8003aca:	e8df f003 	tbb	[pc, r3]
 8003ace:	0713      	.short	0x0713
 8003ad0:	070f0715 	.word	0x070f0715
 8003ad4:	07110707 	.word	0x07110707
 8003ad8:	0707      	.short	0x0707
 8003ada:	0b          	.byte	0x0b
 8003adb:	00          	.byte	0x00
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd10      	pop	{r4, pc}
      break;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <ISM330DHCX_GYRO_GetSensitivity+0x4c>)
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003ae6:	6023      	str	r3, [r4, #0]
}
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd10      	pop	{r4, pc}
      break;
 8003aec:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <ISM330DHCX_GYRO_GetSensitivity+0x50>)
 8003aee:	e7fa      	b.n	8003ae6 <ISM330DHCX_GYRO_GetSensitivity+0x36>
      break;
 8003af0:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <ISM330DHCX_GYRO_GetSensitivity+0x54>)
 8003af2:	e7f8      	b.n	8003ae6 <ISM330DHCX_GYRO_GetSensitivity+0x36>
  switch (full_scale)
 8003af4:	4b04      	ldr	r3, [pc, #16]	@ (8003b08 <ISM330DHCX_GYRO_GetSensitivity+0x58>)
 8003af6:	e7f6      	b.n	8003ae6 <ISM330DHCX_GYRO_GetSensitivity+0x36>
 8003af8:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <ISM330DHCX_GYRO_GetSensitivity+0x5c>)
 8003afa:	e7f4      	b.n	8003ae6 <ISM330DHCX_GYRO_GetSensitivity+0x36>
 8003afc:	428c0000 	.word	0x428c0000
 8003b00:	418c0000 	.word	0x418c0000
 8003b04:	420c0000 	.word	0x420c0000
 8003b08:	410c0000 	.word	0x410c0000
 8003b0c:	408c0000 	.word	0x408c0000

08003b10 <ISM330DHCX_GYRO_GetFullScale>:
{
 8003b10:	b510      	push	{r4, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003b16:	301c      	adds	r0, #28
 8003b18:	f10d 0107 	add.w	r1, sp, #7
 8003b1c:	f000 fab4 	bl	8004088 <ism330dhcx_gy_full_scale_get>
 8003b20:	b960      	cbnz	r0, 8003b3c <ISM330DHCX_GYRO_GetFullScale+0x2c>
  switch (fs_low_level)
 8003b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d808      	bhi.n	8003b3c <ISM330DHCX_GYRO_GetFullScale+0x2c>
 8003b2a:	e8df f003 	tbb	[pc, r3]
 8003b2e:	0716      	.short	0x0716
 8003b30:	07100718 	.word	0x07100718
 8003b34:	07130707 	.word	0x07130707
 8003b38:	0707      	.short	0x0707
 8003b3a:	0b          	.byte	0x0b
 8003b3b:	00          	.byte	0x00
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003b40:	b002      	add	sp, #8
 8003b42:	bd10      	pop	{r4, pc}
      break;
 8003b44:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
      *FullScale =  125;
 8003b48:	6023      	str	r3, [r4, #0]
}
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd10      	pop	{r4, pc}
      break;
 8003b4e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003b52:	e7f9      	b.n	8003b48 <ISM330DHCX_GYRO_GetFullScale+0x38>
      break;
 8003b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b58:	e7f6      	b.n	8003b48 <ISM330DHCX_GYRO_GetFullScale+0x38>
  switch (fs_low_level)
 8003b5a:	23fa      	movs	r3, #250	@ 0xfa
 8003b5c:	e7f4      	b.n	8003b48 <ISM330DHCX_GYRO_GetFullScale+0x38>
 8003b5e:	237d      	movs	r3, #125	@ 0x7d
 8003b60:	e7f2      	b.n	8003b48 <ISM330DHCX_GYRO_GetFullScale+0x38>
 8003b62:	bf00      	nop

08003b64 <ISM330DHCX_GYRO_GetAxesRaw>:
{
 8003b64:	b510      	push	{r4, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003b6a:	301c      	adds	r0, #28
 8003b6c:	4669      	mov	r1, sp
 8003b6e:	f000 fb01 	bl	8004174 <ism330dhcx_angular_rate_raw_get>
 8003b72:	b930      	cbnz	r0, 8003b82 <ISM330DHCX_GYRO_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8003b74:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8003b76:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8003b7a:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8003b7c:	80a3      	strh	r3, [r4, #4]
}
 8003b7e:	b002      	add	sp, #8
 8003b80:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8003b82:	f04f 30ff 	mov.w	r0, #4294967295
 8003b86:	e7fa      	b.n	8003b7e <ISM330DHCX_GYRO_GetAxesRaw+0x1a>

08003b88 <ISM330DHCX_ACC_SetOutputDataRate>:
{
 8003b88:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8003b8a:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003b8e:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
  if (pObj->acc_is_enabled == 1U)
 8003b92:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003b94:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8003b98:	d042      	beq.n	8003c20 <ISM330DHCX_ACC_SetOutputDataRate+0x98>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	d804      	bhi.n	8003baa <ISM330DHCX_ACC_SetOutputDataRate+0x22>
 8003ba0:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003ba2:	f880 302b 	strb.w	r3, [r0, #43]	@ 0x2b
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003ba6:	2000      	movs	r0, #0
}
 8003ba8:	bd08      	pop	{r3, pc}
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003baa:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003bae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	d978      	bls.n	8003caa <ISM330DHCX_ACC_SetOutputDataRate+0x122>
 8003bb8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8003ce4 <ISM330DHCX_ACC_SetOutputDataRate+0x15c>
 8003bbc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc4:	d975      	bls.n	8003cb2 <ISM330DHCX_ACC_SetOutputDataRate+0x12a>
 8003bc6:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8003ce8 <ISM330DHCX_ACC_SetOutputDataRate+0x160>
 8003bca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd2:	d972      	bls.n	8003cba <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8003bd4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8003cec <ISM330DHCX_ACC_SetOutputDataRate+0x164>
 8003bd8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	d96f      	bls.n	8003cc2 <ISM330DHCX_ACC_SetOutputDataRate+0x13a>
 8003be2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8003cf0 <ISM330DHCX_ACC_SetOutputDataRate+0x168>
 8003be6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bee:	d96c      	bls.n	8003cca <ISM330DHCX_ACC_SetOutputDataRate+0x142>
 8003bf0:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8003cf4 <ISM330DHCX_ACC_SetOutputDataRate+0x16c>
 8003bf4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfc:	d969      	bls.n	8003cd2 <ISM330DHCX_ACC_SetOutputDataRate+0x14a>
 8003bfe:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8003cf8 <ISM330DHCX_ACC_SetOutputDataRate+0x170>
 8003c02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	d966      	bls.n	8003cda <ISM330DHCX_ACC_SetOutputDataRate+0x152>
 8003c0c:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003cfc <ISM330DHCX_ACC_SetOutputDataRate+0x174>
 8003c10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c18:	bf94      	ite	ls
 8003c1a:	2309      	movls	r3, #9
 8003c1c:	230a      	movhi	r3, #10
 8003c1e:	e7c0      	b.n	8003ba2 <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	d939      	bls.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate+0x112>
 8003c26:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003c2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	d93c      	bls.n	8003cae <ISM330DHCX_ACC_SetOutputDataRate+0x126>
 8003c34:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8003ce4 <ISM330DHCX_ACC_SetOutputDataRate+0x15c>
 8003c38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	d939      	bls.n	8003cb6 <ISM330DHCX_ACC_SetOutputDataRate+0x12e>
 8003c42:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8003ce8 <ISM330DHCX_ACC_SetOutputDataRate+0x160>
 8003c46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4e:	d936      	bls.n	8003cbe <ISM330DHCX_ACC_SetOutputDataRate+0x136>
 8003c50:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8003cec <ISM330DHCX_ACC_SetOutputDataRate+0x164>
 8003c54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5c:	d933      	bls.n	8003cc6 <ISM330DHCX_ACC_SetOutputDataRate+0x13e>
 8003c5e:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003cf0 <ISM330DHCX_ACC_SetOutputDataRate+0x168>
 8003c62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	d930      	bls.n	8003cce <ISM330DHCX_ACC_SetOutputDataRate+0x146>
 8003c6c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8003cf4 <ISM330DHCX_ACC_SetOutputDataRate+0x16c>
 8003c70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	d92d      	bls.n	8003cd6 <ISM330DHCX_ACC_SetOutputDataRate+0x14e>
 8003c7a:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003cf8 <ISM330DHCX_ACC_SetOutputDataRate+0x170>
 8003c7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c86:	d92a      	bls.n	8003cde <ISM330DHCX_ACC_SetOutputDataRate+0x156>
 8003c88:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8003cfc <ISM330DHCX_ACC_SetOutputDataRate+0x174>
 8003c8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	bf94      	ite	ls
 8003c96:	2109      	movls	r1, #9
 8003c98:	210a      	movhi	r1, #10
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003c9a:	301c      	adds	r0, #28
 8003c9c:	f000 fb8c 	bl	80043b8 <ism330dhcx_xl_data_rate_set>
 8003ca0:	3800      	subs	r0, #0
 8003ca2:	bf18      	it	ne
 8003ca4:	2001      	movne	r0, #1
 8003ca6:	4240      	negs	r0, r0
}
 8003ca8:	bd08      	pop	{r3, pc}
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003caa:	2302      	movs	r3, #2
 8003cac:	e779      	b.n	8003ba2 <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cae:	2102      	movs	r1, #2
 8003cb0:	e7f3      	b.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e775      	b.n	8003ba2 <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	e7ef      	b.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cba:	2304      	movs	r3, #4
 8003cbc:	e771      	b.n	8003ba2 <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cbe:	2104      	movs	r1, #4
 8003cc0:	e7eb      	b.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cc2:	2305      	movs	r3, #5
 8003cc4:	e76d      	b.n	8003ba2 <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cc6:	2105      	movs	r1, #5
 8003cc8:	e7e7      	b.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cca:	2306      	movs	r3, #6
 8003ccc:	e769      	b.n	8003ba2 <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cce:	2106      	movs	r1, #6
 8003cd0:	e7e3      	b.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cd2:	2307      	movs	r3, #7
 8003cd4:	e765      	b.n	8003ba2 <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cd6:	2107      	movs	r1, #7
 8003cd8:	e7df      	b.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cda:	2308      	movs	r3, #8
 8003cdc:	e761      	b.n	8003ba2 <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cde:	2108      	movs	r1, #8
 8003ce0:	e7db      	b.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate+0x112>
 8003ce2:	bf00      	nop
 8003ce4:	42500000 	.word	0x42500000
 8003ce8:	42d00000 	.word	0x42d00000
 8003cec:	43500000 	.word	0x43500000
 8003cf0:	43d08000 	.word	0x43d08000
 8003cf4:	44504000 	.word	0x44504000
 8003cf8:	44d06000 	.word	0x44d06000
 8003cfc:	45505000 	.word	0x45505000

08003d00 <ISM330DHCX_DeInit>:
{
 8003d00:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003d02:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8003d06:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8003d08:	b943      	cbnz	r3, 8003d1c <ISM330DHCX_DeInit+0x1c>
  if (pObj->gyro_is_enabled == 0U)
 8003d0a:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003d0e:	b9c3      	cbnz	r3, 8003d42 <ISM330DHCX_DeInit+0x42>
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8003d10:	2000      	movs	r0, #0
 8003d12:	f8a4 002b 	strh.w	r0, [r4, #43]	@ 0x2b
  pObj->is_initialized = 0;
 8003d16:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003d1c:	f100 051c 	add.w	r5, r0, #28
 8003d20:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f963 	bl	8003ff0 <ism330dhcx_xl_data_rate_get>
 8003d2a:	4601      	mov	r1, r0
 8003d2c:	b9c8      	cbnz	r0, 8003d62 <ISM330DHCX_DeInit+0x62>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 fb42 	bl	80043b8 <ism330dhcx_xl_data_rate_set>
 8003d34:	b9a8      	cbnz	r0, 8003d62 <ISM330DHCX_DeInit+0x62>
  if (pObj->gyro_is_enabled == 0U)
 8003d36:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
  pObj->acc_is_enabled = 0;
 8003d3a:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->gyro_is_enabled == 0U)
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0e6      	beq.n	8003d10 <ISM330DHCX_DeInit+0x10>
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003d42:	f104 051c 	add.w	r5, r4, #28
 8003d46:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f000 f9ca 	bl	80040e4 <ism330dhcx_gy_data_rate_get>
 8003d50:	4601      	mov	r1, r0
 8003d52:	b930      	cbnz	r0, 8003d62 <ISM330DHCX_DeInit+0x62>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003d54:	4628      	mov	r0, r5
 8003d56:	f000 fc2b 	bl	80045b0 <ism330dhcx_gy_data_rate_set>
 8003d5a:	b910      	cbnz	r0, 8003d62 <ISM330DHCX_DeInit+0x62>
  pObj->gyro_is_enabled = 0;
 8003d5c:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return ISM330DHCX_OK;
 8003d60:	e7d6      	b.n	8003d10 <ISM330DHCX_DeInit+0x10>
    return ISM330DHCX_ERROR;
 8003d62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003d66:	bd38      	pop	{r3, r4, r5, pc}

08003d68 <ISM330DHCX_ACC_GetAxes>:
{
 8003d68:	b530      	push	{r4, r5, lr}
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003d6a:	f100 051c 	add.w	r5, r0, #28
{
 8003d6e:	b085      	sub	sp, #20
 8003d70:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003d72:	4628      	mov	r0, r5
 8003d74:	a902      	add	r1, sp, #8
 8003d76:	f000 fa1d 	bl	80041b4 <ism330dhcx_acceleration_raw_get>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d13e      	bne.n	8003dfc <ISM330DHCX_ACC_GetAxes+0x94>
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003d7e:	f10d 0107 	add.w	r1, sp, #7
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f91a 	bl	8003fbc <ism330dhcx_xl_full_scale_get>
 8003d88:	bbc0      	cbnz	r0, 8003dfc <ISM330DHCX_ACC_GetAxes+0x94>
  switch (full_scale)
 8003d8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d834      	bhi.n	8003dfc <ISM330DHCX_ACC_GetAxes+0x94>
 8003d92:	e8df f003 	tbb	[pc, r3]
 8003d96:	2a2d      	.short	0x2a2d
 8003d98:	0230      	.short	0x0230
 8003d9a:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003e04 <ISM330DHCX_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003d9e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003da2:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003da6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003daa:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003dae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003db2:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003db6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003dba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003dc2:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003dc6:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003dca:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003dce:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003dd2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003dda:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003dde:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003de2:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003de6:	b005      	add	sp, #20
 8003de8:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003dea:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8003e08 <ISM330DHCX_ACC_GetAxes+0xa0>
 8003dee:	e7d6      	b.n	8003d9e <ISM330DHCX_ACC_GetAxes+0x36>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003df0:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003e0c <ISM330DHCX_ACC_GetAxes+0xa4>
 8003df4:	e7d3      	b.n	8003d9e <ISM330DHCX_ACC_GetAxes+0x36>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003df6:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003e10 <ISM330DHCX_ACC_GetAxes+0xa8>
 8003dfa:	e7d0      	b.n	8003d9e <ISM330DHCX_ACC_GetAxes+0x36>
    return ISM330DHCX_ERROR;
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e00:	b005      	add	sp, #20
 8003e02:	bd30      	pop	{r4, r5, pc}
 8003e04:	3e79db23 	.word	0x3e79db23
 8003e08:	3ef9db23 	.word	0x3ef9db23
 8003e0c:	3d79db23 	.word	0x3d79db23
 8003e10:	3df9db23 	.word	0x3df9db23

08003e14 <ISM330DHCX_GYRO_GetAxes>:
{
 8003e14:	b530      	push	{r4, r5, lr}
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003e16:	f100 051c 	add.w	r5, r0, #28
{
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003e1e:	4628      	mov	r0, r5
 8003e20:	a902      	add	r1, sp, #8
 8003e22:	f000 f9a7 	bl	8004174 <ism330dhcx_angular_rate_raw_get>
 8003e26:	b990      	cbnz	r0, 8003e4e <ISM330DHCX_GYRO_GetAxes+0x3a>
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003e28:	f10d 0107 	add.w	r1, sp, #7
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 f92b 	bl	8004088 <ism330dhcx_gy_full_scale_get>
 8003e32:	b960      	cbnz	r0, 8003e4e <ISM330DHCX_GYRO_GetAxes+0x3a>
  switch (full_scale)
 8003e34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d808      	bhi.n	8003e4e <ISM330DHCX_GYRO_GetAxes+0x3a>
 8003e3c:	e8df f003 	tbb	[pc, r3]
 8003e40:	0733070b 	.word	0x0733070b
 8003e44:	07070739 	.word	0x07070739
 8003e48:	0707073c 	.word	0x0707073c
 8003e4c:	36          	.byte	0x36
 8003e4d:	00          	.byte	0x00
    return ISM330DHCX_ERROR;
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e52:	b005      	add	sp, #20
 8003e54:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003e56:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003ec0 <ISM330DHCX_GYRO_GetAxes+0xac>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e5a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003e5e:	ee06 3a90 	vmov	s13, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e62:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003e66:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e6a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003e6e:	ee07 3a90 	vmov	s15, r3
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e72:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e7e:	ee66 6a86 	vmul.f32	s13, s13, s12
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e82:	ee27 7a06 	vmul.f32	s14, s14, s12
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e86:	ee67 7a86 	vmul.f32	s15, s15, s12
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e8a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e8e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e96:	edc4 6a00 	vstr	s13, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e9a:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e9e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003ea2:	b005      	add	sp, #20
 8003ea4:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003ea6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8003ec4 <ISM330DHCX_GYRO_GetAxes+0xb0>
 8003eaa:	e7d6      	b.n	8003e5a <ISM330DHCX_GYRO_GetAxes+0x46>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8003eac:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003ec8 <ISM330DHCX_GYRO_GetAxes+0xb4>
 8003eb0:	e7d3      	b.n	8003e5a <ISM330DHCX_GYRO_GetAxes+0x46>
  switch (full_scale)
 8003eb2:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003ecc <ISM330DHCX_GYRO_GetAxes+0xb8>
 8003eb6:	e7d0      	b.n	8003e5a <ISM330DHCX_GYRO_GetAxes+0x46>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003eb8:	ed9f 6a05 	vldr	s12, [pc, #20]	@ 8003ed0 <ISM330DHCX_GYRO_GetAxes+0xbc>
 8003ebc:	e7cd      	b.n	8003e5a <ISM330DHCX_GYRO_GetAxes+0x46>
 8003ebe:	bf00      	nop
 8003ec0:	410c0000 	.word	0x410c0000
 8003ec4:	408c0000 	.word	0x408c0000
 8003ec8:	428c0000 	.word	0x428c0000
 8003ecc:	418c0000 	.word	0x418c0000
 8003ed0:	420c0000 	.word	0x420c0000

08003ed4 <ISM330DHCX_RegisterBusIO>:
{
 8003ed4:	b530      	push	{r4, r5, lr}
 8003ed6:	b083      	sub	sp, #12
  if (pObj == NULL)
 8003ed8:	b370      	cbz	r0, 8003f38 <ISM330DHCX_RegisterBusIO+0x64>
    pObj->IO.Init      = pIO->Init;
 8003eda:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8003edc:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8003ee0:	688a      	ldr	r2, [r1, #8]
 8003ee2:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8003ee4:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8003ee8:	7b0a      	ldrb	r2, [r1, #12]
 8003eea:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003eec:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8003ef0:	6989      	ldr	r1, [r1, #24]
 8003ef2:	61a1      	str	r1, [r4, #24]
 8003ef4:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003ef6:	4912      	ldr	r1, [pc, #72]	@ (8003f40 <ISM330DHCX_RegisterBusIO+0x6c>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8003ef8:	4a12      	ldr	r2, [pc, #72]	@ (8003f44 <ISM330DHCX_RegisterBusIO+0x70>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003efa:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003efc:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8003f00:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 8003f02:	b1cb      	cbz	r3, 8003f38 <ISM330DHCX_RegisterBusIO+0x64>
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8003f04:	4798      	blx	r3
 8003f06:	4605      	mov	r5, r0
 8003f08:	b9b0      	cbnz	r0, 8003f38 <ISM330DHCX_RegisterBusIO+0x64>
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003f0a:	68a3      	ldr	r3, [r4, #8]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d002      	beq.n	8003f16 <ISM330DHCX_RegisterBusIO+0x42>
}
 8003f10:	4628      	mov	r0, r5
 8003f12:	b003      	add	sp, #12
 8003f14:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8003f16:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f8      	bne.n	8003f10 <ISM330DHCX_RegisterBusIO+0x3c>
          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8003f1e:	210c      	movs	r1, #12
 8003f20:	f88d 1007 	strb.w	r1, [sp, #7]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8003f24:	2301      	movs	r3, #1
 8003f26:	f10d 0207 	add.w	r2, sp, #7
 8003f2a:	f104 001c 	add.w	r0, r4, #28
 8003f2e:	2112      	movs	r1, #18
 8003f30:	f000 f822 	bl	8003f78 <ism330dhcx_write_reg>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d0eb      	beq.n	8003f10 <ISM330DHCX_RegisterBusIO+0x3c>
    ret = ISM330DHCX_ERROR;
 8003f38:	f04f 35ff 	mov.w	r5, #4294967295
  return ret;
 8003f3c:	e7e8      	b.n	8003f10 <ISM330DHCX_RegisterBusIO+0x3c>
 8003f3e:	bf00      	nop
 8003f40:	080035a9 	.word	0x080035a9
 8003f44:	080035b9 	.word	0x080035b9

08003f48 <ism330dhcx_mem_bank_set.constprop.0>:
  * @param  ctx    Read / write interface definitions.(ptr)
  * @param  val    Change the values of reg_access in reg FUNC_CFG_ACCESS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
 8003f48:	b530      	push	{r4, r5, lr}
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f4e:	2301      	movs	r3, #1
 8003f50:	6880      	ldr	r0, [r0, #8]
 8003f52:	6865      	ldr	r5, [r4, #4]
 8003f54:	aa01      	add	r2, sp, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	47a8      	blx	r5
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8003f5a:	b958      	cbnz	r0, 8003f74 <ism330dhcx_mem_bank_set.constprop.0+0x2c>
    func_cfg_access.reg_access = (uint8_t)val;
 8003f5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f60:	6825      	ldr	r5, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 8003f62:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f66:	2301      	movs	r3, #1
 8003f68:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 8003f6a:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f6e:	4619      	mov	r1, r3
 8003f70:	aa01      	add	r2, sp, #4
 8003f72:	47a8      	blx	r5
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
}
 8003f74:	b003      	add	sp, #12
 8003f76:	bd30      	pop	{r4, r5, pc}

08003f78 <ism330dhcx_write_reg>:
{
 8003f78:	b410      	push	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f7a:	6804      	ldr	r4, [r0, #0]
 8003f7c:	6880      	ldr	r0, [r0, #8]
 8003f7e:	46a4      	mov	ip, r4
}
 8003f80:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f84:	4760      	bx	ip
 8003f86:	bf00      	nop

08003f88 <ism330dhcx_xl_full_scale_set>:
{
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f90:	6880      	ldr	r0, [r0, #8]
 8003f92:	6866      	ldr	r6, [r4, #4]
 8003f94:	2301      	movs	r3, #1
 8003f96:	aa01      	add	r2, sp, #4
 8003f98:	2110      	movs	r1, #16
 8003f9a:	47b0      	blx	r6
  if (ret == 0) {
 8003f9c:	b958      	cbnz	r0, 8003fb6 <ism330dhcx_xl_full_scale_set+0x2e>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003f9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003fa2:	6826      	ldr	r6, [r4, #0]
 8003fa4:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003fa6:	f365 0383 	bfi	r3, r5, #2, #2
 8003faa:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003fae:	aa01      	add	r2, sp, #4
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	47b0      	blx	r6
}
 8003fb6:	b002      	add	sp, #8
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	bf00      	nop

08003fbc <ism330dhcx_xl_full_scale_get>:
{
 8003fbc:	b530      	push	{r4, r5, lr}
 8003fbe:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003fc6:	aa01      	add	r2, sp, #4
{
 8003fc8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003fca:	2110      	movs	r1, #16
 8003fcc:	47a8      	blx	r5
  switch (ctrl1_xl.fs_xl) {
 8003fce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003fd2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d006      	beq.n	8003fe8 <ism330dhcx_xl_full_scale_get+0x2c>
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d004      	beq.n	8003fe8 <ism330dhcx_xl_full_scale_get+0x2c>
 8003fde:	f1a3 0301 	sub.w	r3, r3, #1
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
      *val = ISM330DHCX_2g;
 8003fe8:	7023      	strb	r3, [r4, #0]
}
 8003fea:	b003      	add	sp, #12
 8003fec:	bd30      	pop	{r4, r5, pc}
 8003fee:	bf00      	nop

08003ff0 <ism330dhcx_xl_data_rate_get>:
{
 8003ff0:	b530      	push	{r4, r5, lr}
 8003ff2:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003ffa:	aa01      	add	r2, sp, #4
{
 8003ffc:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003ffe:	2110      	movs	r1, #16
 8004000:	47a8      	blx	r5
  switch (ctrl1_xl.odr_xl) {
 8004002:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	3b01      	subs	r3, #1
 800400a:	2b0a      	cmp	r3, #10
 800400c:	d81f      	bhi.n	800404e <ism330dhcx_xl_data_rate_get+0x5e>
 800400e:	e8df f003 	tbb	[pc, r3]
 8004012:	0a06      	.short	0x0a06
 8004014:	12100e0c 	.word	0x12100e0c
 8004018:	1a181614 	.word	0x1a181614
 800401c:	1c          	.byte	0x1c
 800401d:	00          	.byte	0x00
 800401e:	2301      	movs	r3, #1
      *val = ISM330DHCX_XL_ODR_OFF;
 8004020:	7023      	strb	r3, [r4, #0]
}
 8004022:	b003      	add	sp, #12
 8004024:	bd30      	pop	{r4, r5, pc}
      break;
 8004026:	2302      	movs	r3, #2
 8004028:	e7fa      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 800402a:	2303      	movs	r3, #3
 800402c:	e7f8      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 800402e:	2304      	movs	r3, #4
 8004030:	e7f6      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 8004032:	2305      	movs	r3, #5
 8004034:	e7f4      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 8004036:	2306      	movs	r3, #6
 8004038:	e7f2      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 800403a:	2307      	movs	r3, #7
 800403c:	e7f0      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 800403e:	2308      	movs	r3, #8
 8004040:	e7ee      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 8004042:	2309      	movs	r3, #9
 8004044:	e7ec      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 8004046:	230a      	movs	r3, #10
 8004048:	e7ea      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 800404a:	230b      	movs	r3, #11
 800404c:	e7e8      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
  switch (ctrl1_xl.odr_xl) {
 800404e:	2300      	movs	r3, #0
 8004050:	e7e6      	b.n	8004020 <ism330dhcx_xl_data_rate_get+0x30>
 8004052:	bf00      	nop

08004054 <ism330dhcx_gy_full_scale_set>:
{
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	b082      	sub	sp, #8
 800405a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800405c:	6880      	ldr	r0, [r0, #8]
 800405e:	6866      	ldr	r6, [r4, #4]
 8004060:	2301      	movs	r3, #1
 8004062:	aa01      	add	r2, sp, #4
 8004064:	2111      	movs	r1, #17
 8004066:	47b0      	blx	r6
  if (ret == 0) {
 8004068:	b958      	cbnz	r0, 8004082 <ism330dhcx_gy_full_scale_set+0x2e>
    ctrl2_g.fs_g = (uint8_t)val;
 800406a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800406e:	6826      	ldr	r6, [r4, #0]
 8004070:	68a0      	ldr	r0, [r4, #8]
    ctrl2_g.fs_g = (uint8_t)val;
 8004072:	f365 0303 	bfi	r3, r5, #0, #4
 8004076:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800407a:	aa01      	add	r2, sp, #4
 800407c:	2301      	movs	r3, #1
 800407e:	2111      	movs	r1, #17
 8004080:	47b0      	blx	r6
}
 8004082:	b002      	add	sp, #8
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	bf00      	nop

08004088 <ism330dhcx_gy_full_scale_get>:
{
 8004088:	b530      	push	{r4, r5, lr}
 800408a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800408c:	2301      	movs	r3, #1
 800408e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004092:	aa01      	add	r2, sp, #4
{
 8004094:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004096:	2111      	movs	r1, #17
 8004098:	47a8      	blx	r5
  switch (ctrl2_g.fs_g) {
 800409a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d808      	bhi.n	80040b8 <ism330dhcx_gy_full_scale_get+0x30>
 80040a6:	e8df f003 	tbb	[pc, r3]
 80040aa:	0f1b      	.short	0x0f1b
 80040ac:	07130707 	.word	0x07130707
 80040b0:	07170707 	.word	0x07170707
 80040b4:	0707      	.short	0x0707
 80040b6:	0b          	.byte	0x0b
 80040b7:	00          	.byte	0x00
 80040b8:	2302      	movs	r3, #2
      *val = ISM330DHCX_125dps;
 80040ba:	7023      	strb	r3, [r4, #0]
}
 80040bc:	b003      	add	sp, #12
 80040be:	bd30      	pop	{r4, r5, pc}
      break;
 80040c0:	230c      	movs	r3, #12
      *val = ISM330DHCX_125dps;
 80040c2:	7023      	strb	r3, [r4, #0]
}
 80040c4:	b003      	add	sp, #12
 80040c6:	bd30      	pop	{r4, r5, pc}
      break;
 80040c8:	2301      	movs	r3, #1
      *val = ISM330DHCX_125dps;
 80040ca:	7023      	strb	r3, [r4, #0]
}
 80040cc:	b003      	add	sp, #12
 80040ce:	bd30      	pop	{r4, r5, pc}
      break;
 80040d0:	2304      	movs	r3, #4
      *val = ISM330DHCX_125dps;
 80040d2:	7023      	strb	r3, [r4, #0]
}
 80040d4:	b003      	add	sp, #12
 80040d6:	bd30      	pop	{r4, r5, pc}
      break;
 80040d8:	2308      	movs	r3, #8
      *val = ISM330DHCX_125dps;
 80040da:	7023      	strb	r3, [r4, #0]
}
 80040dc:	b003      	add	sp, #12
 80040de:	bd30      	pop	{r4, r5, pc}
  switch (ctrl2_g.fs_g) {
 80040e0:	2300      	movs	r3, #0
 80040e2:	e7ea      	b.n	80040ba <ism330dhcx_gy_full_scale_get+0x32>

080040e4 <ism330dhcx_gy_data_rate_get>:
{
 80040e4:	b530      	push	{r4, r5, lr}
 80040e6:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80040e8:	2301      	movs	r3, #1
 80040ea:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80040ee:	aa01      	add	r2, sp, #4
{
 80040f0:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80040f2:	2111      	movs	r1, #17
 80040f4:	47a8      	blx	r5
  switch (ctrl2_g.odr_g) {
 80040f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	3b01      	subs	r3, #1
 80040fe:	2b09      	cmp	r3, #9
 8004100:	d81c      	bhi.n	800413c <ism330dhcx_gy_data_rate_get+0x58>
 8004102:	e8df f003 	tbb	[pc, r3]
 8004106:	0905      	.short	0x0905
 8004108:	110f0d0b 	.word	0x110f0d0b
 800410c:	19171513 	.word	0x19171513
 8004110:	2301      	movs	r3, #1
      *val = ISM330DHCX_GY_ODR_OFF;
 8004112:	7023      	strb	r3, [r4, #0]
}
 8004114:	b003      	add	sp, #12
 8004116:	bd30      	pop	{r4, r5, pc}
      break;
 8004118:	2302      	movs	r3, #2
 800411a:	e7fa      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 800411c:	2303      	movs	r3, #3
 800411e:	e7f8      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 8004120:	2304      	movs	r3, #4
 8004122:	e7f6      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 8004124:	2305      	movs	r3, #5
 8004126:	e7f4      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 8004128:	2306      	movs	r3, #6
 800412a:	e7f2      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 800412c:	2307      	movs	r3, #7
 800412e:	e7f0      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 8004130:	2308      	movs	r3, #8
 8004132:	e7ee      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 8004134:	2309      	movs	r3, #9
 8004136:	e7ec      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 8004138:	230a      	movs	r3, #10
 800413a:	e7ea      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>
  switch (ctrl2_g.odr_g) {
 800413c:	2300      	movs	r3, #0
 800413e:	e7e8      	b.n	8004112 <ism330dhcx_gy_data_rate_get+0x2e>

08004140 <ism330dhcx_block_data_update_set>:
{
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4604      	mov	r4, r0
 8004144:	b082      	sub	sp, #8
 8004146:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004148:	6880      	ldr	r0, [r0, #8]
 800414a:	6866      	ldr	r6, [r4, #4]
 800414c:	2301      	movs	r3, #1
 800414e:	aa01      	add	r2, sp, #4
 8004150:	2112      	movs	r1, #18
 8004152:	47b0      	blx	r6
  if (ret == 0) {
 8004154:	b958      	cbnz	r0, 800416e <ism330dhcx_block_data_update_set+0x2e>
    ctrl3_c.bdu = (uint8_t)val;
 8004156:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800415a:	6826      	ldr	r6, [r4, #0]
 800415c:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.bdu = (uint8_t)val;
 800415e:	f365 1386 	bfi	r3, r5, #6, #1
 8004162:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004166:	aa01      	add	r2, sp, #4
 8004168:	2301      	movs	r3, #1
 800416a:	2112      	movs	r1, #18
 800416c:	47b0      	blx	r6
}
 800416e:	b002      	add	sp, #8
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	bf00      	nop

08004174 <ism330dhcx_angular_rate_raw_get>:
{
 8004174:	b530      	push	{r4, r5, lr}
 8004176:	b083      	sub	sp, #12
 8004178:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800417a:	466a      	mov	r2, sp
 800417c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004180:	2306      	movs	r3, #6
 8004182:	2122      	movs	r1, #34	@ 0x22
 8004184:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004186:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800418a:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800418e:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004192:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004196:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004198:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800419c:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80041a0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80041a4:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80041a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80041ae:	80a3      	strh	r3, [r4, #4]
}
 80041b0:	b003      	add	sp, #12
 80041b2:	bd30      	pop	{r4, r5, pc}

080041b4 <ism330dhcx_acceleration_raw_get>:
{
 80041b4:	b530      	push	{r4, r5, lr}
 80041b6:	b083      	sub	sp, #12
 80041b8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041ba:	466a      	mov	r2, sp
 80041bc:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80041c0:	2306      	movs	r3, #6
 80041c2:	2128      	movs	r1, #40	@ 0x28
 80041c4:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80041c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80041ca:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80041ce:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80041d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80041d6:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80041d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80041dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80041e0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80041e4:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80041e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80041ee:	80a3      	strh	r3, [r4, #4]
}
 80041f0:	b003      	add	sp, #12
 80041f2:	bd30      	pop	{r4, r5, pc}

080041f4 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041f4:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041f6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 80041fa:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041fc:	46a4      	mov	ip, r4
 80041fe:	2301      	movs	r3, #1
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
  return ret;
}
 8004200:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004204:	210f      	movs	r1, #15
 8004206:	4760      	bx	ip

08004208 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4604      	mov	r4, r0
 800420c:	b082      	sub	sp, #8
 800420e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004210:	6880      	ldr	r0, [r0, #8]
 8004212:	6866      	ldr	r6, [r4, #4]
 8004214:	2301      	movs	r3, #1
 8004216:	aa01      	add	r2, sp, #4
 8004218:	2112      	movs	r1, #18
 800421a:	47b0      	blx	r6
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800421c:	b958      	cbnz	r0, 8004236 <ism330dhcx_reset_set+0x2e>
    ctrl3_c.sw_reset = (uint8_t)val;
 800421e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004222:	6826      	ldr	r6, [r4, #0]
 8004224:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.sw_reset = (uint8_t)val;
 8004226:	f365 0300 	bfi	r3, r5, #0, #1
 800422a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800422e:	aa01      	add	r2, sp, #4
 8004230:	2301      	movs	r3, #1
 8004232:	2112      	movs	r1, #18
 8004234:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8004236:	b002      	add	sp, #8
 8004238:	bd70      	pop	{r4, r5, r6, pc}
 800423a:	bf00      	nop

0800423c <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4604      	mov	r4, r0
 8004240:	b082      	sub	sp, #8
 8004242:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004244:	6880      	ldr	r0, [r0, #8]
 8004246:	6866      	ldr	r6, [r4, #4]
 8004248:	2301      	movs	r3, #1
 800424a:	aa01      	add	r2, sp, #4
 800424c:	2112      	movs	r1, #18
 800424e:	47b0      	blx	r6
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004250:	b958      	cbnz	r0, 800426a <ism330dhcx_auto_increment_set+0x2e>
    ctrl3_c.if_inc = (uint8_t)val;
 8004252:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004256:	6826      	ldr	r6, [r4, #0]
 8004258:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.if_inc = (uint8_t)val;
 800425a:	f365 0382 	bfi	r3, r5, #2, #1
 800425e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004262:	aa01      	add	r2, sp, #4
 8004264:	2301      	movs	r3, #1
 8004266:	2112      	movs	r1, #18
 8004268:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 800426a:	b002      	add	sp, #8
 800426c:	bd70      	pop	{r4, r5, r6, pc}
 800426e:	bf00      	nop

08004270 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4604      	mov	r4, r0
 8004274:	b082      	sub	sp, #8
 8004276:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004278:	6880      	ldr	r0, [r0, #8]
 800427a:	6866      	ldr	r6, [r4, #4]
 800427c:	2301      	movs	r3, #1
 800427e:	aa01      	add	r2, sp, #4
 8004280:	210a      	movs	r1, #10
 8004282:	47b0      	blx	r6
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8004284:	b958      	cbnz	r0, 800429e <ism330dhcx_fifo_mode_set+0x2e>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8004286:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800428a:	6826      	ldr	r6, [r4, #0]
 800428c:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800428e:	f365 0302 	bfi	r3, r5, #0, #3
 8004292:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004296:	aa01      	add	r2, sp, #4
 8004298:	2301      	movs	r3, #1
 800429a:	210a      	movs	r1, #10
 800429c:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 800429e:	b002      	add	sp, #8
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
 80042a2:	bf00      	nop

080042a4 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4605      	mov	r5, r0
 80042a8:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042aa:	2301      	movs	r3, #1
{
 80042ac:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042ae:	6880      	ldr	r0, [r0, #8]
 80042b0:	686e      	ldr	r6, [r5, #4]
 80042b2:	aa01      	add	r2, sp, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	47b0      	blx	r6
  if (ret == 0) {
 80042b8:	b9a0      	cbnz	r0, 80042e4 <ism330dhcx_fsm_data_rate_get+0x40>
    func_cfg_access.reg_access = (uint8_t)val;
 80042ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042be:	68a8      	ldr	r0, [r5, #8]
 80042c0:	682e      	ldr	r6, [r5, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80042c2:	2302      	movs	r3, #2
 80042c4:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042c8:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80042ca:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042ce:	4619      	mov	r1, r3
 80042d0:	aa01      	add	r2, sp, #4
 80042d2:	47b0      	blx	r6
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 80042d4:	b930      	cbnz	r0, 80042e4 <ism330dhcx_fsm_data_rate_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042d6:	68a8      	ldr	r0, [r5, #8]
 80042d8:	686e      	ldr	r6, [r5, #4]
 80042da:	2301      	movs	r3, #1
 80042dc:	466a      	mov	r2, sp
 80042de:	215f      	movs	r1, #95	@ 0x5f
 80042e0:	47b0      	blx	r6
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 80042e2:	b178      	cbz	r0, 8004304 <ism330dhcx_fsm_data_rate_get+0x60>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 80042e4:	f89d 3000 	ldrb.w	r3, [sp]
 80042e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d006      	beq.n	80042fe <ism330dhcx_fsm_data_rate_get+0x5a>
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d004      	beq.n	80042fe <ism330dhcx_fsm_data_rate_get+0x5a>
 80042f4:	f1a3 0301 	sub.w	r3, r3, #1
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	095b      	lsrs	r3, r3, #5
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80042fe:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_ODR_FSM_12Hz5;
      break;
  }

  return ret;
}
 8004300:	b002      	add	sp, #8
 8004302:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004304:	2301      	movs	r3, #1
 8004306:	68a8      	ldr	r0, [r5, #8]
 8004308:	686e      	ldr	r6, [r5, #4]
 800430a:	aa01      	add	r2, sp, #4
 800430c:	4619      	mov	r1, r3
 800430e:	47b0      	blx	r6
  if (ret == 0) {
 8004310:	2800      	cmp	r0, #0
 8004312:	d1e7      	bne.n	80042e4 <ism330dhcx_fsm_data_rate_get+0x40>
    func_cfg_access.reg_access = (uint8_t)val;
 8004314:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004318:	682e      	ldr	r6, [r5, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800431a:	f360 1187 	bfi	r1, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800431e:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004320:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004324:	68a8      	ldr	r0, [r5, #8]
 8004326:	aa01      	add	r2, sp, #4
 8004328:	4619      	mov	r1, r3
 800432a:	47b0      	blx	r6
  return ret;
 800432c:	e7da      	b.n	80042e4 <ism330dhcx_fsm_data_rate_get+0x40>
 800432e:	bf00      	nop

08004330 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	4604      	mov	r4, r0
 8004334:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004336:	2301      	movs	r3, #1
{
 8004338:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800433a:	6880      	ldr	r0, [r0, #8]
 800433c:	6866      	ldr	r6, [r4, #4]
 800433e:	aa01      	add	r2, sp, #4
 8004340:	4619      	mov	r1, r3
 8004342:	47b0      	blx	r6
  if (ret == 0) {
 8004344:	2800      	cmp	r0, #0
 8004346:	d135      	bne.n	80043b4 <ism330dhcx_mlc_data_rate_get+0x84>
    func_cfg_access.reg_access = (uint8_t)val;
 8004348:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800434c:	68a0      	ldr	r0, [r4, #8]
 800434e:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 8004350:	2302      	movs	r3, #2
 8004352:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004356:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004358:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800435c:	4619      	mov	r1, r3
 800435e:	aa01      	add	r2, sp, #4
 8004360:	47b0      	blx	r6
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 8004362:	bb38      	cbnz	r0, 80043b4 <ism330dhcx_mlc_data_rate_get+0x84>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004364:	68a0      	ldr	r0, [r4, #8]
 8004366:	6866      	ldr	r6, [r4, #4]
 8004368:	2301      	movs	r3, #1
 800436a:	466a      	mov	r2, sp
 800436c:	2160      	movs	r1, #96	@ 0x60
 800436e:	47b0      	blx	r6
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004370:	bb00      	cbnz	r0, 80043b4 <ism330dhcx_mlc_data_rate_get+0x84>
    switch (reg.mlc_odr) {
 8004372:	f89d 3000 	ldrb.w	r3, [sp]
 8004376:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d006      	beq.n	800438c <ism330dhcx_mlc_data_rate_get+0x5c>
 800437e:	2b03      	cmp	r3, #3
 8004380:	d004      	beq.n	800438c <ism330dhcx_mlc_data_rate_get+0x5c>
 8004382:	f1a3 0301 	sub.w	r3, r3, #1
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	095b      	lsrs	r3, r3, #5
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800438c:	702b      	strb	r3, [r5, #0]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800438e:	2301      	movs	r3, #1
 8004390:	6865      	ldr	r5, [r4, #4]
 8004392:	68a0      	ldr	r0, [r4, #8]
 8004394:	aa01      	add	r2, sp, #4
 8004396:	4619      	mov	r1, r3
 8004398:	47a8      	blx	r5
  if (ret == 0) {
 800439a:	b958      	cbnz	r0, 80043b4 <ism330dhcx_mlc_data_rate_get+0x84>
    func_cfg_access.reg_access = (uint8_t)val;
 800439c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043a0:	6825      	ldr	r5, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80043a2:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043a6:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80043a8:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043ac:	68a0      	ldr	r0, [r4, #8]
 80043ae:	aa01      	add	r2, sp, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	47a8      	blx	r5

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  return ret;
}
 80043b4:	b002      	add	sp, #8
 80043b6:	bd70      	pop	{r4, r5, r6, pc}

080043b8 <ism330dhcx_xl_data_rate_set>:
{
 80043b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043ba:	2301      	movs	r3, #1
{
 80043bc:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043be:	6846      	ldr	r6, [r0, #4]
{
 80043c0:	4604      	mov	r4, r0
 80043c2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043c4:	6880      	ldr	r0, [r0, #8]
 80043c6:	aa03      	add	r2, sp, #12
 80043c8:	4619      	mov	r1, r3
 80043ca:	47b0      	blx	r6
  if (ret == 0) {
 80043cc:	2800      	cmp	r0, #0
 80043ce:	f040 80a5 	bne.w	800451c <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 80043d2:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043d6:	6826      	ldr	r6, [r4, #0]
 80043d8:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 80043da:	2302      	movs	r3, #2
 80043dc:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043e0:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80043e2:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043e6:	4619      	mov	r1, r3
 80043e8:	aa03      	add	r2, sp, #12
 80043ea:	47b0      	blx	r6
  if (ret == 0) {
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f040 8095 	bne.w	800451c <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043f2:	6866      	ldr	r6, [r4, #4]
 80043f4:	68a0      	ldr	r0, [r4, #8]
 80043f6:	2301      	movs	r3, #1
 80043f8:	aa03      	add	r2, sp, #12
 80043fa:	2146      	movs	r1, #70	@ 0x46
 80043fc:	47b0      	blx	r6
  if (ret == 0) {
 80043fe:	2800      	cmp	r0, #0
 8004400:	f040 808c 	bne.w	800451c <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004404:	6866      	ldr	r6, [r4, #4]
 8004406:	68a0      	ldr	r0, [r4, #8]
 8004408:	2301      	movs	r3, #1
 800440a:	f10d 020d 	add.w	r2, sp, #13
 800440e:	2147      	movs	r1, #71	@ 0x47
 8004410:	47b0      	blx	r6
  if (ret == 0) {
 8004412:	2800      	cmp	r0, #0
 8004414:	f040 8082 	bne.w	800451c <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004418:	2301      	movs	r3, #1
 800441a:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 800441e:	aa02      	add	r2, sp, #8
 8004420:	4619      	mov	r1, r3
 8004422:	47b0      	blx	r6
  if (ret == 0) {
 8004424:	2800      	cmp	r0, #0
 8004426:	d179      	bne.n	800451c <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 8004428:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800442c:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800442e:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004432:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004434:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004438:	68a0      	ldr	r0, [r4, #8]
 800443a:	aa02      	add	r2, sp, #8
 800443c:	4619      	mov	r1, r3
 800443e:	47b0      	blx	r6
  if (ret == 0) {
 8004440:	2800      	cmp	r0, #0
 8004442:	d16b      	bne.n	800451c <ism330dhcx_xl_data_rate_set+0x164>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004444:	f89d 100c 	ldrb.w	r1, [sp, #12]
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004448:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800444c:	f3c1 0300 	ubfx	r3, r1, #0, #1
 8004450:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004452:	f3c1 0280 	ubfx	r2, r1, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004456:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004458:	f3c1 02c0 	ubfx	r2, r1, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 800445c:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm5_en  |
 800445e:	f3c1 1200 	ubfx	r2, r1, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004462:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004464:	f3c1 1240 	ubfx	r2, r1, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004468:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm7_en  |
 800446a:	f3c1 1080 	ubfx	r0, r1, #6, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 800446e:	f89d 200d 	ldrb.w	r2, [sp, #13]
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004472:	4303      	orrs	r3, r0
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004474:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004478:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 800447c:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 800447e:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004482:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 8004484:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 8004488:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 800448a:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 800448e:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 8004490:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 8004494:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 8004496:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 800449a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 800449c:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 80044a0:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 80044a2:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80044a6:	07da      	lsls	r2, r3, #31
 80044a8:	d43a      	bmi.n	8004520 <ism330dhcx_xl_data_rate_set+0x168>
  ism330dhcx_odr_xl_t odr_xl =  val;
 80044aa:	462e      	mov	r6, r5
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044ac:	2301      	movs	r3, #1
 80044ae:	68a0      	ldr	r0, [r4, #8]
 80044b0:	6867      	ldr	r7, [r4, #4]
 80044b2:	aa02      	add	r2, sp, #8
 80044b4:	4619      	mov	r1, r3
 80044b6:	47b8      	blx	r7
  if (ret == 0) {
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d12f      	bne.n	800451c <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 80044bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044c0:	68a0      	ldr	r0, [r4, #8]
 80044c2:	6827      	ldr	r7, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80044c4:	2202      	movs	r2, #2
 80044c6:	f362 1387 	bfi	r3, r2, #6, #2
 80044ca:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044ce:	2301      	movs	r3, #1
 80044d0:	aa02      	add	r2, sp, #8
 80044d2:	4619      	mov	r1, r3
 80044d4:	47b8      	blx	r7
  if (ret == 0) {
 80044d6:	bb08      	cbnz	r0, 800451c <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044d8:	68a0      	ldr	r0, [r4, #8]
 80044da:	6867      	ldr	r7, [r4, #4]
 80044dc:	2301      	movs	r3, #1
 80044de:	aa02      	add	r2, sp, #8
 80044e0:	2105      	movs	r1, #5
 80044e2:	47b8      	blx	r7
  if (ret == 0) {
 80044e4:	b9d0      	cbnz	r0, 800451c <ism330dhcx_xl_data_rate_set+0x164>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80044e6:	4620      	mov	r0, r4
 80044e8:	f7ff fd2e 	bl	8003f48 <ism330dhcx_mem_bank_set.constprop.0>
    *val  = reg.mlc_en;
 80044ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if ( mlc_enable == PROPERTY_ENABLE ) {
 80044f0:	06db      	lsls	r3, r3, #27
 80044f2:	d424      	bmi.n	800453e <ism330dhcx_xl_data_rate_set+0x186>
  if (ret == 0) {
 80044f4:	b990      	cbnz	r0, 800451c <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044f6:	6865      	ldr	r5, [r4, #4]
 80044f8:	68a0      	ldr	r0, [r4, #8]
 80044fa:	2301      	movs	r3, #1
 80044fc:	aa01      	add	r2, sp, #4
 80044fe:	2110      	movs	r1, #16
 8004500:	47a8      	blx	r5
  if (ret == 0) {
 8004502:	b958      	cbnz	r0, 800451c <ism330dhcx_xl_data_rate_set+0x164>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004504:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004508:	6825      	ldr	r5, [r4, #0]
 800450a:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800450c:	f366 1307 	bfi	r3, r6, #4, #4
 8004510:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004514:	aa01      	add	r2, sp, #4
 8004516:	2301      	movs	r3, #1
 8004518:	2110      	movs	r1, #16
 800451a:	47a8      	blx	r5
}
 800451c:	b005      	add	sp, #20
 800451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004520:	f10d 0107 	add.w	r1, sp, #7
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff febd 	bl	80042a4 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0) {
 800452a:	2800      	cmp	r0, #0
 800452c:	d1f6      	bne.n	800451c <ism330dhcx_xl_data_rate_set+0x164>
        switch (fsm_odr) {
 800452e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d8b9      	bhi.n	80044aa <ism330dhcx_xl_data_rate_set+0xf2>
 8004536:	e8df f003 	tbb	[pc, r3]
 800453a:	151a      	.short	0x151a
 800453c:	101f      	.short	0x101f
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800453e:	a902      	add	r1, sp, #8
 8004540:	4620      	mov	r0, r4
 8004542:	f7ff fef5 	bl	8004330 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0) {
 8004546:	2800      	cmp	r0, #0
 8004548:	d1e8      	bne.n	800451c <ism330dhcx_xl_data_rate_set+0x164>
        switch (mlc_odr) {
 800454a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d82b      	bhi.n	80045aa <ism330dhcx_xl_data_rate_set+0x1f2>
 8004552:	e8df f003 	tbb	[pc, r3]
 8004556:	2025      	.short	0x2025
 8004558:	161b      	.short	0x161b
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800455a:	2d04      	cmp	r5, #4
 800455c:	462e      	mov	r6, r5
 800455e:	bf38      	it	cc
 8004560:	2604      	movcc	r6, #4
 8004562:	e7a3      	b.n	80044ac <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004564:	2d02      	cmp	r5, #2
 8004566:	462e      	mov	r6, r5
 8004568:	bf38      	it	cc
 800456a:	2602      	movcc	r6, #2
 800456c:	e79e      	b.n	80044ac <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800456e:	2d01      	cmp	r5, #1
 8004570:	462e      	mov	r6, r5
 8004572:	bf38      	it	cc
 8004574:	2601      	movcc	r6, #1
  if (ret == 0) {
 8004576:	e799      	b.n	80044ac <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004578:	2d03      	cmp	r5, #3
 800457a:	462e      	mov	r6, r5
 800457c:	bf38      	it	cc
 800457e:	2603      	movcc	r6, #3
 8004580:	e794      	b.n	80044ac <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004582:	2d04      	cmp	r5, #4
 8004584:	bf38      	it	cc
 8004586:	2504      	movcc	r5, #4
 8004588:	462e      	mov	r6, r5
 800458a:	e7b4      	b.n	80044f6 <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800458c:	2d03      	cmp	r5, #3
 800458e:	bf38      	it	cc
 8004590:	2503      	movcc	r5, #3
 8004592:	462e      	mov	r6, r5
 8004594:	e7af      	b.n	80044f6 <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004596:	2d02      	cmp	r5, #2
 8004598:	bf38      	it	cc
 800459a:	2502      	movcc	r5, #2
 800459c:	462e      	mov	r6, r5
 800459e:	e7aa      	b.n	80044f6 <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80045a0:	2d01      	cmp	r5, #1
 80045a2:	bf38      	it	cc
 80045a4:	2501      	movcc	r5, #1
 80045a6:	462e      	mov	r6, r5
  if (ret == 0) {
 80045a8:	e7a5      	b.n	80044f6 <ism330dhcx_xl_data_rate_set+0x13e>
        switch (mlc_odr) {
 80045aa:	462e      	mov	r6, r5
 80045ac:	e7a3      	b.n	80044f6 <ism330dhcx_xl_data_rate_set+0x13e>
 80045ae:	bf00      	nop

080045b0 <ism330dhcx_gy_data_rate_set>:
{
 80045b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045b2:	2301      	movs	r3, #1
{
 80045b4:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045b6:	6846      	ldr	r6, [r0, #4]
{
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045bc:	6880      	ldr	r0, [r0, #8]
 80045be:	aa03      	add	r2, sp, #12
 80045c0:	4619      	mov	r1, r3
 80045c2:	47b0      	blx	r6
  if (ret == 0) {
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f040 80a5 	bne.w	8004714 <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 80045ca:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045ce:	6826      	ldr	r6, [r4, #0]
 80045d0:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 80045d2:	2302      	movs	r3, #2
 80045d4:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045d8:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80045da:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045de:	4619      	mov	r1, r3
 80045e0:	aa03      	add	r2, sp, #12
 80045e2:	47b0      	blx	r6
  if (ret == 0) {
 80045e4:	2800      	cmp	r0, #0
 80045e6:	f040 8095 	bne.w	8004714 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045ea:	6866      	ldr	r6, [r4, #4]
 80045ec:	68a0      	ldr	r0, [r4, #8]
 80045ee:	2301      	movs	r3, #1
 80045f0:	aa03      	add	r2, sp, #12
 80045f2:	2146      	movs	r1, #70	@ 0x46
 80045f4:	47b0      	blx	r6
  if (ret == 0) {
 80045f6:	2800      	cmp	r0, #0
 80045f8:	f040 808c 	bne.w	8004714 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045fc:	6866      	ldr	r6, [r4, #4]
 80045fe:	68a0      	ldr	r0, [r4, #8]
 8004600:	2301      	movs	r3, #1
 8004602:	f10d 020d 	add.w	r2, sp, #13
 8004606:	2147      	movs	r1, #71	@ 0x47
 8004608:	47b0      	blx	r6
  if (ret == 0) {
 800460a:	2800      	cmp	r0, #0
 800460c:	f040 8082 	bne.w	8004714 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004610:	2301      	movs	r3, #1
 8004612:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8004616:	aa02      	add	r2, sp, #8
 8004618:	4619      	mov	r1, r3
 800461a:	47b0      	blx	r6
  if (ret == 0) {
 800461c:	2800      	cmp	r0, #0
 800461e:	d179      	bne.n	8004714 <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 8004620:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004624:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 8004626:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800462a:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 800462c:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004630:	68a0      	ldr	r0, [r4, #8]
 8004632:	aa02      	add	r2, sp, #8
 8004634:	4619      	mov	r1, r3
 8004636:	47b0      	blx	r6
  if (ret == 0) {
 8004638:	2800      	cmp	r0, #0
 800463a:	d16b      	bne.n	8004714 <ism330dhcx_gy_data_rate_set+0x164>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800463c:	f89d 100c 	ldrb.w	r1, [sp, #12]
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004640:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004644:	f3c1 0300 	ubfx	r3, r1, #0, #1
 8004648:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm3_en  |
 800464a:	f3c1 0280 	ubfx	r2, r1, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 800464e:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004650:	f3c1 02c0 	ubfx	r2, r1, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004654:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004656:	f3c1 1200 	ubfx	r2, r1, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 800465a:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm6_en  |
 800465c:	f3c1 1240 	ubfx	r2, r1, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004660:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004662:	f3c1 1080 	ubfx	r0, r1, #6, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004666:	f89d 200d 	ldrb.w	r2, [sp, #13]
          fsm_enable.fsm_enable_a.fsm6_en  |
 800466a:	4303      	orrs	r3, r0
          fsm_enable.fsm_enable_a.fsm7_en  |
 800466c:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004670:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004674:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 8004676:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 800467a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 800467c:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 8004680:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 8004682:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 8004686:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 8004688:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 800468c:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 800468e:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 8004692:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8004694:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 8004698:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 800469a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800469e:	07da      	lsls	r2, r3, #31
 80046a0:	d43a      	bmi.n	8004718 <ism330dhcx_gy_data_rate_set+0x168>
  ism330dhcx_odr_g_t odr_gy =  val;
 80046a2:	462e      	mov	r6, r5
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046a4:	2301      	movs	r3, #1
 80046a6:	68a0      	ldr	r0, [r4, #8]
 80046a8:	6867      	ldr	r7, [r4, #4]
 80046aa:	aa02      	add	r2, sp, #8
 80046ac:	4619      	mov	r1, r3
 80046ae:	47b8      	blx	r7
  if (ret == 0) {
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d12f      	bne.n	8004714 <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 80046b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046b8:	68a0      	ldr	r0, [r4, #8]
 80046ba:	6827      	ldr	r7, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80046bc:	2202      	movs	r2, #2
 80046be:	f362 1387 	bfi	r3, r2, #6, #2
 80046c2:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046c6:	2301      	movs	r3, #1
 80046c8:	aa02      	add	r2, sp, #8
 80046ca:	4619      	mov	r1, r3
 80046cc:	47b8      	blx	r7
  if (ret == 0) {
 80046ce:	bb08      	cbnz	r0, 8004714 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046d0:	68a0      	ldr	r0, [r4, #8]
 80046d2:	6867      	ldr	r7, [r4, #4]
 80046d4:	2301      	movs	r3, #1
 80046d6:	aa02      	add	r2, sp, #8
 80046d8:	2105      	movs	r1, #5
 80046da:	47b8      	blx	r7
  if (ret == 0) {
 80046dc:	b9d0      	cbnz	r0, 8004714 <ism330dhcx_gy_data_rate_set+0x164>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80046de:	4620      	mov	r0, r4
 80046e0:	f7ff fc32 	bl	8003f48 <ism330dhcx_mem_bank_set.constprop.0>
    *val  = reg.mlc_en;
 80046e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if ( mlc_enable == PROPERTY_ENABLE ) {
 80046e8:	06db      	lsls	r3, r3, #27
 80046ea:	d424      	bmi.n	8004736 <ism330dhcx_gy_data_rate_set+0x186>
  if (ret == 0) {
 80046ec:	b990      	cbnz	r0, 8004714 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046ee:	6865      	ldr	r5, [r4, #4]
 80046f0:	68a0      	ldr	r0, [r4, #8]
 80046f2:	2301      	movs	r3, #1
 80046f4:	aa01      	add	r2, sp, #4
 80046f6:	2111      	movs	r1, #17
 80046f8:	47a8      	blx	r5
  if (ret == 0) {
 80046fa:	b958      	cbnz	r0, 8004714 <ism330dhcx_gy_data_rate_set+0x164>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80046fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004700:	6825      	ldr	r5, [r4, #0]
 8004702:	68a0      	ldr	r0, [r4, #8]
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004704:	f366 1307 	bfi	r3, r6, #4, #4
 8004708:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800470c:	aa01      	add	r2, sp, #4
 800470e:	2301      	movs	r3, #1
 8004710:	2111      	movs	r1, #17
 8004712:	47a8      	blx	r5
}
 8004714:	b005      	add	sp, #20
 8004716:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004718:	f10d 0107 	add.w	r1, sp, #7
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff fdc1 	bl	80042a4 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0) {
 8004722:	2800      	cmp	r0, #0
 8004724:	d1f6      	bne.n	8004714 <ism330dhcx_gy_data_rate_set+0x164>
        switch (fsm_odr) {
 8004726:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800472a:	2b03      	cmp	r3, #3
 800472c:	d8b9      	bhi.n	80046a2 <ism330dhcx_gy_data_rate_set+0xf2>
 800472e:	e8df f003 	tbb	[pc, r3]
 8004732:	151a      	.short	0x151a
 8004734:	101f      	.short	0x101f
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004736:	a902      	add	r1, sp, #8
 8004738:	4620      	mov	r0, r4
 800473a:	f7ff fdf9 	bl	8004330 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0) {
 800473e:	2800      	cmp	r0, #0
 8004740:	d1e8      	bne.n	8004714 <ism330dhcx_gy_data_rate_set+0x164>
        switch (mlc_odr) {
 8004742:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d82b      	bhi.n	80047a2 <ism330dhcx_gy_data_rate_set+0x1f2>
 800474a:	e8df f003 	tbb	[pc, r3]
 800474e:	2025      	.short	0x2025
 8004750:	161b      	.short	0x161b
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004752:	2d04      	cmp	r5, #4
 8004754:	462e      	mov	r6, r5
 8004756:	bf38      	it	cc
 8004758:	2604      	movcc	r6, #4
 800475a:	e7a3      	b.n	80046a4 <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800475c:	2d02      	cmp	r5, #2
 800475e:	462e      	mov	r6, r5
 8004760:	bf38      	it	cc
 8004762:	2602      	movcc	r6, #2
 8004764:	e79e      	b.n	80046a4 <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004766:	2d01      	cmp	r5, #1
 8004768:	462e      	mov	r6, r5
 800476a:	bf38      	it	cc
 800476c:	2601      	movcc	r6, #1
  if (ret == 0) {
 800476e:	e799      	b.n	80046a4 <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004770:	2d03      	cmp	r5, #3
 8004772:	462e      	mov	r6, r5
 8004774:	bf38      	it	cc
 8004776:	2603      	movcc	r6, #3
 8004778:	e794      	b.n	80046a4 <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800477a:	2d04      	cmp	r5, #4
 800477c:	bf38      	it	cc
 800477e:	2504      	movcc	r5, #4
 8004780:	462e      	mov	r6, r5
 8004782:	e7b4      	b.n	80046ee <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004784:	2d03      	cmp	r5, #3
 8004786:	bf38      	it	cc
 8004788:	2503      	movcc	r5, #3
 800478a:	462e      	mov	r6, r5
 800478c:	e7af      	b.n	80046ee <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800478e:	2d02      	cmp	r5, #2
 8004790:	bf38      	it	cc
 8004792:	2502      	movcc	r5, #2
 8004794:	462e      	mov	r6, r5
 8004796:	e7aa      	b.n	80046ee <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004798:	2d01      	cmp	r5, #1
 800479a:	bf38      	it	cc
 800479c:	2501      	movcc	r5, #1
 800479e:	462e      	mov	r6, r5
  if (ret == 0) {
 80047a0:	e7a5      	b.n	80046ee <ism330dhcx_gy_data_rate_set+0x13e>
        switch (mlc_odr) {
 80047a2:	462e      	mov	r6, r5
 80047a4:	e7a3      	b.n	80046ee <ism330dhcx_gy_data_rate_set+0x13e>
 80047a6:	bf00      	nop

080047a8 <LPS22HH_GetCapabilities>:
  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
  Capabilities->TempMaxOdr  = 200.0f;
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <LPS22HH_GetCapabilities+0x14>)
 80047aa:	608b      	str	r3, [r1, #8]
  Capabilities->HumMaxOdr   = 0.0f;
 80047ac:	2200      	movs	r2, #0
  Capabilities->Temperature = 1;
 80047ae:	f240 1001 	movw	r0, #257	@ 0x101
 80047b2:	6008      	str	r0, [r1, #0]
  Capabilities->HumMaxOdr   = 0.0f;
 80047b4:	604a      	str	r2, [r1, #4]
  Capabilities->PressMaxOdr = 200.0f;
 80047b6:	60cb      	str	r3, [r1, #12]
  return LPS22HH_OK;
}
 80047b8:	2000      	movs	r0, #0
 80047ba:	4770      	bx	lr
 80047bc:	43480000 	.word	0x43480000

080047c0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047c0:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80047c2:	6944      	ldr	r4, [r0, #20]
 80047c4:	7b00      	ldrb	r0, [r0, #12]
 80047c6:	46a4      	mov	ip, r4
}
 80047c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80047cc:	4760      	bx	ip
 80047ce:	bf00      	nop

080047d0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047d0:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80047d2:	6904      	ldr	r4, [r0, #16]
 80047d4:	7b00      	ldrb	r0, [r0, #12]
 80047d6:	46a4      	mov	ip, r4
}
 80047d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80047dc:	4760      	bx	ip
 80047de:	bf00      	nop

080047e0 <LPS22HH_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 80047e0:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d00c      	beq.n	8004802 <LPS22HH_PRESS_Enable+0x22>
{
 80047e8:	b510      	push	{r4, lr}
 80047ea:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80047ec:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 80047f0:	301c      	adds	r0, #28
 80047f2:	f000 fae7 	bl	8004dc4 <lps22hh_data_rate_set>
 80047f6:	b930      	cbnz	r0, 8004806 <LPS22HH_PRESS_Enable+0x26>
  pObj->press_is_enabled = 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return LPS22HH_OK;
 80047fe:	2000      	movs	r0, #0
}
 8004800:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 8004802:	2000      	movs	r0, #0
}
 8004804:	4770      	bx	lr
    return LPS22HH_ERROR;
 8004806:	f04f 30ff 	mov.w	r0, #4294967295
}
 800480a:	bd10      	pop	{r4, pc}

0800480c <LPS22HH_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 800480c:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8004810:	2b01      	cmp	r3, #1
 8004812:	d00c      	beq.n	800482e <LPS22HH_TEMP_Enable+0x22>
{
 8004814:	b510      	push	{r4, lr}
 8004816:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004818:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 800481c:	301c      	adds	r0, #28
 800481e:	f000 fad1 	bl	8004dc4 <lps22hh_data_rate_set>
 8004822:	b930      	cbnz	r0, 8004832 <LPS22HH_TEMP_Enable+0x26>
  pObj->temp_is_enabled = 1;
 8004824:	2301      	movs	r3, #1
 8004826:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return LPS22HH_OK;
 800482a:	2000      	movs	r0, #0
}
 800482c:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 800482e:	2000      	movs	r0, #0
}
 8004830:	4770      	bx	lr
    return LPS22HH_ERROR;
 8004832:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004836:	bd10      	pop	{r4, pc}

08004838 <LPS22HH_Init>:
{
 8004838:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 800483a:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
{
 800483e:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8004840:	b123      	cbz	r3, 800484c <LPS22HH_Init+0x14>
  pObj->is_initialized = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return LPS22HH_OK;
 8004848:	2000      	movs	r0, #0
}
 800484a:	bd38      	pop	{r3, r4, r5, pc}
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800484c:	f100 051c 	add.w	r5, r0, #28
 8004850:	2111      	movs	r1, #17
 8004852:	4628      	mov	r0, r5
 8004854:	f000 fbac 	bl	8004fb0 <lps22hh_i3c_interface_set>
 8004858:	b9b8      	cbnz	r0, 800488a <LPS22HH_Init+0x52>
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 800485a:	2110      	movs	r1, #16
 800485c:	4628      	mov	r0, r5
 800485e:	f000 fab1 	bl	8004dc4 <lps22hh_data_rate_set>
 8004862:	4601      	mov	r1, r0
 8004864:	b988      	cbnz	r0, 800488a <LPS22HH_Init+0x52>
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004866:	4628      	mov	r0, r5
 8004868:	f000 fb88 	bl	8004f7c <lps22hh_lp_bandwidth_set>
 800486c:	b968      	cbnz	r0, 800488a <LPS22HH_Init+0x52>
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800486e:	2101      	movs	r1, #1
 8004870:	4628      	mov	r0, r5
 8004872:	f000 fa8d 	bl	8004d90 <lps22hh_block_data_update_set>
 8004876:	b940      	cbnz	r0, 800488a <LPS22HH_Init+0x52>
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004878:	2101      	movs	r1, #1
 800487a:	4628      	mov	r0, r5
 800487c:	f000 fb64 	bl	8004f48 <lps22hh_auto_increment_set>
 8004880:	b918      	cbnz	r0, 800488a <LPS22HH_Init+0x52>
  pObj->last_odr = LPS22HH_25_Hz;
 8004882:	2303      	movs	r3, #3
 8004884:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  return LPS22HH_OK;
 8004888:	e7db      	b.n	8004842 <LPS22HH_Init+0xa>
      return LPS22HH_ERROR;
 800488a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800488e:	bd38      	pop	{r3, r4, r5, pc}

08004890 <LPS22HH_ReadID>:
{
 8004890:	b508      	push	{r3, lr}
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8004892:	301c      	adds	r0, #28
 8004894:	f000 fb4e 	bl	8004f34 <lps22hh_device_id_get>
 8004898:	3800      	subs	r0, #0
 800489a:	bf18      	it	ne
 800489c:	2001      	movne	r0, #1
}
 800489e:	4240      	negs	r0, r0
 80048a0:	bd08      	pop	{r3, pc}
 80048a2:	bf00      	nop

080048a4 <LPS22HH_PRESS_Disable>:
{
 80048a4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 80048a6:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80048aa:	b133      	cbz	r3, 80048ba <LPS22HH_PRESS_Disable+0x16>
  if (pObj->temp_is_enabled == 0U)
 80048ac:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 80048b0:	4604      	mov	r4, r0
 80048b2:	b123      	cbz	r3, 80048be <LPS22HH_PRESS_Disable+0x1a>
  pObj->press_is_enabled = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return LPS22HH_OK;
 80048ba:	2000      	movs	r0, #0
}
 80048bc:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80048be:	f100 051c 	add.w	r5, r0, #28
 80048c2:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 faac 	bl	8004e24 <lps22hh_data_rate_get>
 80048cc:	4601      	mov	r1, r0
 80048ce:	b920      	cbnz	r0, 80048da <LPS22HH_PRESS_Disable+0x36>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 fa77 	bl	8004dc4 <lps22hh_data_rate_set>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d0ec      	beq.n	80048b4 <LPS22HH_PRESS_Disable+0x10>
      return LPS22HH_ERROR;
 80048da:	f04f 30ff 	mov.w	r0, #4294967295
}
 80048de:	bd38      	pop	{r3, r4, r5, pc}

080048e0 <LPS22HH_TEMP_SetOutputDataRate>:
{
 80048e0:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 1U)
 80048e2:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80048e6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->temp_is_enabled == 1U)
 80048ea:	2901      	cmp	r1, #1
{
 80048ec:	4604      	mov	r4, r0
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80048ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->temp_is_enabled == 1U)
 80048f2:	d027      	beq.n	8004944 <LPS22HH_TEMP_SetOutputDataRate+0x64>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80048f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f8:	d91d      	bls.n	8004936 <LPS22HH_TEMP_SetOutputDataRate+0x56>
 80048fa:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80048fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004906:	d91b      	bls.n	8004940 <LPS22HH_TEMP_SetOutputDataRate+0x60>
 8004908:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 800490c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004914:	d94e      	bls.n	80049b4 <LPS22HH_TEMP_SetOutputDataRate+0xd4>
 8004916:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80049e8 <LPS22HH_TEMP_SetOutputDataRate+0x108>
 800491a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	d94b      	bls.n	80049bc <LPS22HH_TEMP_SetOutputDataRate+0xdc>
 8004924:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80049ec <LPS22HH_TEMP_SetOutputDataRate+0x10c>
 8004928:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800492c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004930:	d848      	bhi.n	80049c4 <LPS22HH_TEMP_SetOutputDataRate+0xe4>
 8004932:	2305      	movs	r3, #5
 8004934:	e000      	b.n	8004938 <LPS22HH_TEMP_SetOutputDataRate+0x58>
 8004936:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004938:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800493c:	2000      	movs	r0, #0
}
 800493e:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004940:	2302      	movs	r3, #2
 8004942:	e7f9      	b.n	8004938 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	d924      	bls.n	8004994 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 800494a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800494e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004956:	d92f      	bls.n	80049b8 <LPS22HH_TEMP_SetOutputDataRate+0xd8>
 8004958:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 800495c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	d92c      	bls.n	80049c0 <LPS22HH_TEMP_SetOutputDataRate+0xe0>
 8004966:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80049e8 <LPS22HH_TEMP_SetOutputDataRate+0x108>
 800496a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004972:	d934      	bls.n	80049de <LPS22HH_TEMP_SetOutputDataRate+0xfe>
 8004974:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 80049ec <LPS22HH_TEMP_SetOutputDataRate+0x10c>
 8004978:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800497c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004980:	d92f      	bls.n	80049e2 <LPS22HH_TEMP_SetOutputDataRate+0x102>
 8004982:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80049f0 <LPS22HH_TEMP_SetOutputDataRate+0x110>
 8004986:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	bf94      	ite	ls
 8004990:	2106      	movls	r1, #6
 8004992:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004994:	f104 051c 	add.w	r5, r4, #28
 8004998:	4628      	mov	r0, r5
 800499a:	f000 fa13 	bl	8004dc4 <lps22hh_data_rate_set>
 800499e:	b9d8      	cbnz	r0, 80049d8 <LPS22HH_TEMP_SetOutputDataRate+0xf8>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80049a0:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 fa3d 	bl	8004e24 <lps22hh_data_rate_get>
 80049aa:	3800      	subs	r0, #0
 80049ac:	bf18      	it	ne
 80049ae:	2001      	movne	r0, #1
 80049b0:	4240      	negs	r0, r0
}
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049b4:	2303      	movs	r3, #3
 80049b6:	e7bf      	b.n	8004938 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049b8:	2102      	movs	r1, #2
 80049ba:	e7eb      	b.n	8004994 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049bc:	2304      	movs	r3, #4
 80049be:	e7bb      	b.n	8004938 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049c0:	2103      	movs	r1, #3
 80049c2:	e7e7      	b.n	8004994 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049c4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80049f0 <LPS22HH_TEMP_SetOutputDataRate+0x110>
 80049c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	bf94      	ite	ls
 80049d2:	2306      	movls	r3, #6
 80049d4:	2307      	movhi	r3, #7
 80049d6:	e7af      	b.n	8004938 <LPS22HH_TEMP_SetOutputDataRate+0x58>
    return LPS22HH_ERROR;
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80049dc:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049de:	2104      	movs	r1, #4
 80049e0:	e7d8      	b.n	8004994 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 80049e2:	2105      	movs	r1, #5
 80049e4:	e7d6      	b.n	8004994 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 80049e6:	bf00      	nop
 80049e8:	42480000 	.word	0x42480000
 80049ec:	42960000 	.word	0x42960000
 80049f0:	42c80000 	.word	0x42c80000

080049f4 <LPS22HH_TEMP_Disable>:
{
 80049f4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 80049f6:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 80049fa:	b133      	cbz	r3, 8004a0a <LPS22HH_TEMP_Disable+0x16>
  if (pObj->press_is_enabled == 0U)
 80049fc:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8004a00:	4604      	mov	r4, r0
 8004a02:	b123      	cbz	r3, 8004a0e <LPS22HH_TEMP_Disable+0x1a>
  pObj->temp_is_enabled = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return LPS22HH_OK;
 8004a0a:	2000      	movs	r0, #0
}
 8004a0c:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004a0e:	f100 051c 	add.w	r5, r0, #28
 8004a12:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8004a16:	4628      	mov	r0, r5
 8004a18:	f000 fa04 	bl	8004e24 <lps22hh_data_rate_get>
 8004a1c:	4601      	mov	r1, r0
 8004a1e:	b920      	cbnz	r0, 8004a2a <LPS22HH_TEMP_Disable+0x36>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f9cf 	bl	8004dc4 <lps22hh_data_rate_set>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d0ec      	beq.n	8004a04 <LPS22HH_TEMP_Disable+0x10>
      return LPS22HH_ERROR;
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}

08004a30 <LPS22HH_PRESS_GetPressure>:
{
 8004a30:	b530      	push	{r4, r5, lr}
 8004a32:	b083      	sub	sp, #12
 8004a34:	460d      	mov	r5, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004a36:	2200      	movs	r2, #0
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004a38:	a901      	add	r1, sp, #4
 8004a3a:	301c      	adds	r0, #28
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004a3c:	9201      	str	r2, [sp, #4]
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004a3e:	f000 fa4f 	bl	8004ee0 <lps22hh_pressure_raw_get>
 8004a42:	b940      	cbnz	r0, 8004a56 <LPS22HH_PRESS_GetPressure+0x26>
  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004a44:	4604      	mov	r4, r0
 8004a46:	9801      	ldr	r0, [sp, #4]
 8004a48:	f000 f990 	bl	8004d6c <lps22hh_from_lsb_to_hpa>
 8004a4c:	ed85 0a00 	vstr	s0, [r5]
}
 8004a50:	4620      	mov	r0, r4
 8004a52:	b003      	add	sp, #12
 8004a54:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8004a56:	f04f 34ff 	mov.w	r4, #4294967295
 8004a5a:	e7f9      	b.n	8004a50 <LPS22HH_PRESS_GetPressure+0x20>

08004a5c <LPS22HH_TEMP_GetTemperature>:
{
 8004a5c:	b530      	push	{r4, r5, lr}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	460d      	mov	r5, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004a62:	2200      	movs	r2, #0
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004a64:	a901      	add	r1, sp, #4
 8004a66:	301c      	adds	r0, #28
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004a68:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004a6c:	f000 fa50 	bl	8004f10 <lps22hh_temperature_raw_get>
 8004a70:	b948      	cbnz	r0, 8004a86 <LPS22HH_TEMP_GetTemperature+0x2a>
  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004a72:	4604      	mov	r4, r0
 8004a74:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004a78:	f000 f97e 	bl	8004d78 <lps22hh_from_lsb_to_celsius>
 8004a7c:	ed85 0a00 	vstr	s0, [r5]
}
 8004a80:	4620      	mov	r0, r4
 8004a82:	b003      	add	sp, #12
 8004a84:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8004a86:	f04f 34ff 	mov.w	r4, #4294967295
 8004a8a:	e7f9      	b.n	8004a80 <LPS22HH_TEMP_GetTemperature+0x24>

08004a8c <LPS22HH_TEMP_GetOutputDataRate>:
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	460c      	mov	r4, r1
 8004a92:	301c      	adds	r0, #28
 8004a94:	f10d 0107 	add.w	r1, sp, #7
 8004a98:	f000 f9c4 	bl	8004e24 <lps22hh_data_rate_get>
 8004a9c:	b9e0      	cbnz	r0, 8004ad8 <LPS22HH_TEMP_GetOutputDataRate+0x4c>
 8004a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004aa2:	2b07      	cmp	r3, #7
 8004aa4:	d818      	bhi.n	8004ad8 <LPS22HH_TEMP_GetOutputDataRate+0x4c>
 8004aa6:	e8df f003 	tbb	[pc, r3]
 8004aaa:	0409      	.short	0x0409
 8004aac:	0d151311 	.word	0x0d151311
 8004ab0:	0b0f      	.short	0x0b0f
 8004ab2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd10      	pop	{r4, pc}
 8004abc:	2300      	movs	r3, #0
 8004abe:	e7fa      	b.n	8004ab6 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004ac0:	4b07      	ldr	r3, [pc, #28]	@ (8004ae0 <LPS22HH_TEMP_GetOutputDataRate+0x54>)
 8004ac2:	e7f8      	b.n	8004ab6 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004ac4:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <LPS22HH_TEMP_GetOutputDataRate+0x58>)
 8004ac6:	e7f6      	b.n	8004ab6 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004ac8:	4b07      	ldr	r3, [pc, #28]	@ (8004ae8 <LPS22HH_TEMP_GetOutputDataRate+0x5c>)
 8004aca:	e7f4      	b.n	8004ab6 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <LPS22HH_TEMP_GetOutputDataRate+0x60>)
 8004ace:	e7f2      	b.n	8004ab6 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004ad0:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <LPS22HH_TEMP_GetOutputDataRate+0x64>)
 8004ad2:	e7f0      	b.n	8004ab6 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004ad4:	4b07      	ldr	r3, [pc, #28]	@ (8004af4 <LPS22HH_TEMP_GetOutputDataRate+0x68>)
 8004ad6:	e7ee      	b.n	8004ab6 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	e7ec      	b.n	8004ab8 <LPS22HH_TEMP_GetOutputDataRate+0x2c>
 8004ade:	bf00      	nop
 8004ae0:	43480000 	.word	0x43480000
 8004ae4:	42960000 	.word	0x42960000
 8004ae8:	42c80000 	.word	0x42c80000
 8004aec:	41200000 	.word	0x41200000
 8004af0:	41c80000 	.word	0x41c80000
 8004af4:	42480000 	.word	0x42480000

08004af8 <LPS22HH_PRESS_GetOutputDataRate>:
{
 8004af8:	b510      	push	{r4, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	460c      	mov	r4, r1
  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8004afe:	301c      	adds	r0, #28
 8004b00:	f10d 0107 	add.w	r1, sp, #7
 8004b04:	f000 f98e 	bl	8004e24 <lps22hh_data_rate_get>
 8004b08:	b9e0      	cbnz	r0, 8004b44 <LPS22HH_PRESS_GetOutputDataRate+0x4c>
  switch (odr_low_level)
 8004b0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b0e:	2b07      	cmp	r3, #7
 8004b10:	d818      	bhi.n	8004b44 <LPS22HH_PRESS_GetOutputDataRate+0x4c>
 8004b12:	e8df f003 	tbb	[pc, r3]
 8004b16:	0409      	.short	0x0409
 8004b18:	0d151311 	.word	0x0d151311
 8004b1c:	0b0f      	.short	0x0b0f
 8004b1e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
      *Odr = 1.0f;
 8004b22:	6023      	str	r3, [r4, #0]
}
 8004b24:	b002      	add	sp, #8
 8004b26:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e7fa      	b.n	8004b22 <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004b2c:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <LPS22HH_PRESS_GetOutputDataRate+0x54>)
 8004b2e:	e7f8      	b.n	8004b22 <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004b30:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <LPS22HH_PRESS_GetOutputDataRate+0x58>)
 8004b32:	e7f6      	b.n	8004b22 <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004b34:	4b07      	ldr	r3, [pc, #28]	@ (8004b54 <LPS22HH_PRESS_GetOutputDataRate+0x5c>)
 8004b36:	e7f4      	b.n	8004b22 <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004b38:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <LPS22HH_PRESS_GetOutputDataRate+0x60>)
 8004b3a:	e7f2      	b.n	8004b22 <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004b3c:	4b07      	ldr	r3, [pc, #28]	@ (8004b5c <LPS22HH_PRESS_GetOutputDataRate+0x64>)
 8004b3e:	e7f0      	b.n	8004b22 <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004b40:	4b07      	ldr	r3, [pc, #28]	@ (8004b60 <LPS22HH_PRESS_GetOutputDataRate+0x68>)
 8004b42:	e7ee      	b.n	8004b22 <LPS22HH_PRESS_GetOutputDataRate+0x2a>
    return LPS22HH_ERROR;
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004b48:	e7ec      	b.n	8004b24 <LPS22HH_PRESS_GetOutputDataRate+0x2c>
 8004b4a:	bf00      	nop
 8004b4c:	43480000 	.word	0x43480000
 8004b50:	42960000 	.word	0x42960000
 8004b54:	42c80000 	.word	0x42c80000
 8004b58:	41200000 	.word	0x41200000
 8004b5c:	41c80000 	.word	0x41c80000
 8004b60:	42480000 	.word	0x42480000

08004b64 <LPS22HH_PRESS_SetOutputDataRate>:
{
 8004b64:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 1U)
 8004b66:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004b6a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->press_is_enabled == 1U)
 8004b6e:	2901      	cmp	r1, #1
{
 8004b70:	4604      	mov	r4, r0
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004b72:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->press_is_enabled == 1U)
 8004b76:	d027      	beq.n	8004bc8 <LPS22HH_PRESS_SetOutputDataRate+0x64>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	d91d      	bls.n	8004bba <LPS22HH_PRESS_SetOutputDataRate+0x56>
 8004b7e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004b82:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8a:	d91b      	bls.n	8004bc4 <LPS22HH_PRESS_SetOutputDataRate+0x60>
 8004b8c:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8004b90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d94e      	bls.n	8004c38 <LPS22HH_PRESS_SetOutputDataRate+0xd4>
 8004b9a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8004c6c <LPS22HH_PRESS_SetOutputDataRate+0x108>
 8004b9e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d94b      	bls.n	8004c40 <LPS22HH_PRESS_SetOutputDataRate+0xdc>
 8004ba8:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8004c70 <LPS22HH_PRESS_SetOutputDataRate+0x10c>
 8004bac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb4:	d848      	bhi.n	8004c48 <LPS22HH_PRESS_SetOutputDataRate+0xe4>
 8004bb6:	2305      	movs	r3, #5
 8004bb8:	e000      	b.n	8004bbc <LPS22HH_PRESS_SetOutputDataRate+0x58>
 8004bba:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004bbc:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004bc0:	2000      	movs	r0, #0
}
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e7f9      	b.n	8004bbc <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bcc:	d924      	bls.n	8004c18 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004bce:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004bd2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bda:	d92f      	bls.n	8004c3c <LPS22HH_PRESS_SetOutputDataRate+0xd8>
 8004bdc:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8004be0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	d92c      	bls.n	8004c44 <LPS22HH_PRESS_SetOutputDataRate+0xe0>
 8004bea:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8004c6c <LPS22HH_PRESS_SetOutputDataRate+0x108>
 8004bee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf6:	d934      	bls.n	8004c62 <LPS22HH_PRESS_SetOutputDataRate+0xfe>
 8004bf8:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8004c70 <LPS22HH_PRESS_SetOutputDataRate+0x10c>
 8004bfc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c04:	d92f      	bls.n	8004c66 <LPS22HH_PRESS_SetOutputDataRate+0x102>
 8004c06:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8004c74 <LPS22HH_PRESS_SetOutputDataRate+0x110>
 8004c0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	bf94      	ite	ls
 8004c14:	2106      	movls	r1, #6
 8004c16:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004c18:	f104 051c 	add.w	r5, r4, #28
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f000 f8d1 	bl	8004dc4 <lps22hh_data_rate_set>
 8004c22:	b9d8      	cbnz	r0, 8004c5c <LPS22HH_PRESS_SetOutputDataRate+0xf8>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004c24:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f000 f8fb 	bl	8004e24 <lps22hh_data_rate_get>
 8004c2e:	3800      	subs	r0, #0
 8004c30:	bf18      	it	ne
 8004c32:	2001      	movne	r0, #1
 8004c34:	4240      	negs	r0, r0
}
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e7bf      	b.n	8004bbc <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	e7eb      	b.n	8004c18 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c40:	2304      	movs	r3, #4
 8004c42:	e7bb      	b.n	8004bbc <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c44:	2103      	movs	r1, #3
 8004c46:	e7e7      	b.n	8004c18 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c48:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8004c74 <LPS22HH_PRESS_SetOutputDataRate+0x110>
 8004c4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	bf94      	ite	ls
 8004c56:	2306      	movls	r3, #6
 8004c58:	2307      	movhi	r3, #7
 8004c5a:	e7af      	b.n	8004bbc <LPS22HH_PRESS_SetOutputDataRate+0x58>
    return LPS22HH_ERROR;
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c60:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c62:	2104      	movs	r1, #4
 8004c64:	e7d8      	b.n	8004c18 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004c66:	2105      	movs	r1, #5
 8004c68:	e7d6      	b.n	8004c18 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004c6a:	bf00      	nop
 8004c6c:	42480000 	.word	0x42480000
 8004c70:	42960000 	.word	0x42960000
 8004c74:	42c80000 	.word	0x42c80000

08004c78 <LPS22HH_DeInit>:
{
 8004c78:	b570      	push	{r4, r5, r6, lr}
  if (pObj->is_initialized == 1U)
 8004c7a:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8004c7e:	2b01      	cmp	r3, #1
{
 8004c80:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8004c82:	d003      	beq.n	8004c8c <LPS22HH_DeInit+0x14>
  pObj->is_initialized = 0;
 8004c84:	2000      	movs	r0, #0
 8004c86:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
  if (pObj->press_is_enabled == 0U)
 8004c8c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8004c90:	f890 502a 	ldrb.w	r5, [r0, #42]	@ 0x2a
  if (pObj->press_is_enabled == 0U)
 8004c94:	b323      	cbz	r3, 8004ce0 <LPS22HH_DeInit+0x68>
  if (pObj->temp_is_enabled == 0U)
 8004c96:	b195      	cbz	r5, 8004cbe <LPS22HH_DeInit+0x46>
  pObj->press_is_enabled = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004c9e:	f104 051c 	add.w	r5, r4, #28
 8004ca2:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 f8bc 	bl	8004e24 <lps22hh_data_rate_get>
 8004cac:	4601      	mov	r1, r0
 8004cae:	b9d0      	cbnz	r0, 8004ce6 <LPS22HH_DeInit+0x6e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 f887 	bl	8004dc4 <lps22hh_data_rate_set>
 8004cb6:	b9b0      	cbnz	r0, 8004ce6 <LPS22HH_DeInit+0x6e>
  pObj->temp_is_enabled = 0;
 8004cb8:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return LPS22HH_OK;
 8004cbc:	e7e2      	b.n	8004c84 <LPS22HH_DeInit+0xc>
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004cbe:	f100 061c 	add.w	r6, r0, #28
 8004cc2:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f000 f8ac 	bl	8004e24 <lps22hh_data_rate_get>
 8004ccc:	b958      	cbnz	r0, 8004ce6 <LPS22HH_DeInit+0x6e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004cce:	4629      	mov	r1, r5
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 f877 	bl	8004dc4 <lps22hh_data_rate_set>
 8004cd6:	b930      	cbnz	r0, 8004ce6 <LPS22HH_DeInit+0x6e>
  if (pObj->temp_is_enabled == 0U)
 8004cd8:	f894 502a 	ldrb.w	r5, [r4, #42]	@ 0x2a
  pObj->press_is_enabled = 0;
 8004cdc:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8004ce0:	2d00      	cmp	r5, #0
 8004ce2:	d0cf      	beq.n	8004c84 <LPS22HH_DeInit+0xc>
 8004ce4:	e7db      	b.n	8004c9e <LPS22HH_DeInit+0x26>
      return LPS22HH_ERROR;
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004cea:	bd70      	pop	{r4, r5, r6, pc}

08004cec <LPS22HH_RegisterBusIO>:
{
 8004cec:	b530      	push	{r4, r5, lr}
 8004cee:	b083      	sub	sp, #12
  if (pObj == NULL)
 8004cf0:	b368      	cbz	r0, 8004d4e <LPS22HH_RegisterBusIO+0x62>
    pObj->IO.Init      = pIO->Init;
 8004cf2:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8004cf4:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8004cf8:	688a      	ldr	r2, [r1, #8]
 8004cfa:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8004cfc:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8004d00:	7b0a      	ldrb	r2, [r1, #12]
 8004d02:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d04:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8004d08:	6989      	ldr	r1, [r1, #24]
 8004d0a:	61a1      	str	r1, [r4, #24]
 8004d0c:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004d0e:	4911      	ldr	r1, [pc, #68]	@ (8004d54 <LPS22HH_RegisterBusIO+0x68>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8004d10:	4a11      	ldr	r2, [pc, #68]	@ (8004d58 <LPS22HH_RegisterBusIO+0x6c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d12:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004d14:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8004d18:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 8004d1a:	b1c3      	cbz	r3, 8004d4e <LPS22HH_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004d1c:	4798      	blx	r3
 8004d1e:	4605      	mov	r5, r0
 8004d20:	b9a8      	cbnz	r0, 8004d4e <LPS22HH_RegisterBusIO+0x62>
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004d22:	68a3      	ldr	r3, [r4, #8]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d002      	beq.n	8004d2e <LPS22HH_RegisterBusIO+0x42>
}
 8004d28:	4628      	mov	r0, r5
 8004d2a:	b003      	add	sp, #12
 8004d2c:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8004d2e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f8      	bne.n	8004d28 <LPS22HH_RegisterBusIO+0x3c>
          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004d36:	2301      	movs	r3, #1
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8004d38:	f10d 0207 	add.w	r2, sp, #7
 8004d3c:	f104 001c 	add.w	r0, r4, #28
 8004d40:	2110      	movs	r1, #16
 8004d42:	f88d 3007 	strb.w	r3, [sp, #7]
 8004d46:	f000 f809 	bl	8004d5c <lps22hh_write_reg>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d0ec      	beq.n	8004d28 <LPS22HH_RegisterBusIO+0x3c>
    ret = LPS22HH_ERROR;
 8004d4e:	f04f 35ff 	mov.w	r5, #4294967295
  return ret;
 8004d52:	e7e9      	b.n	8004d28 <LPS22HH_RegisterBusIO+0x3c>
 8004d54:	080047c1 	.word	0x080047c1
 8004d58:	080047d1 	.word	0x080047d1

08004d5c <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004d5c:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d5e:	6804      	ldr	r4, [r0, #0]
 8004d60:	6880      	ldr	r0, [r0, #8]
 8004d62:	46a4      	mov	ip, r4
  return ret;
}
 8004d64:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d68:	4760      	bx	ip
 8004d6a:	bf00      	nop

08004d6c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004d6c:	ee00 0a10 	vmov	s0, r0
  return ( (float_t) lsb / 1048576.0f );
}
 8004d70:	eebb 0ac6 	vcvt.f32.u32	s0, s0, #20
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop

08004d78 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004d78:	ee07 0a90 	vmov	s15, r0
  return ( (float_t) lsb / 100.0f );
 8004d7c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8004d8c <lps22hh_from_lsb_to_celsius+0x14>
 8004d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004d84:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	42c80000 	.word	0x42c80000

08004d90 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4604      	mov	r4, r0
 8004d94:	b082      	sub	sp, #8
 8004d96:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d98:	6880      	ldr	r0, [r0, #8]
 8004d9a:	6866      	ldr	r6, [r4, #4]
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	aa01      	add	r2, sp, #4
 8004da0:	2110      	movs	r1, #16
 8004da2:	47b0      	blx	r6
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8004da4:	b958      	cbnz	r0, 8004dbe <lps22hh_block_data_update_set+0x2e>
    reg.bdu = val;
 8004da6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004daa:	6826      	ldr	r6, [r4, #0]
 8004dac:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8004dae:	f365 0341 	bfi	r3, r5, #1, #1
 8004db2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004db6:	aa01      	add	r2, sp, #4
 8004db8:	2301      	movs	r3, #1
 8004dba:	2110      	movs	r1, #16
 8004dbc:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8004dbe:	b002      	add	sp, #8
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	bf00      	nop

08004dc4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	b082      	sub	sp, #8
 8004dca:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004dcc:	6880      	ldr	r0, [r0, #8]
 8004dce:	6866      	ldr	r6, [r4, #4]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	466a      	mov	r2, sp
 8004dd4:	2110      	movs	r1, #16
 8004dd6:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                         1);

  if (ret == 0) {
 8004dd8:	bb10      	cbnz	r0, 8004e20 <lps22hh_data_rate_set+0x5c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004dda:	68a0      	ldr	r0, [r4, #8]
 8004ddc:	6866      	ldr	r6, [r4, #4]
 8004dde:	2301      	movs	r3, #1
 8004de0:	aa01      	add	r2, sp, #4
 8004de2:	2111      	movs	r1, #17
 8004de4:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  if (ret == 0) {
 8004de6:	b9d8      	cbnz	r0, 8004e20 <lps22hh_data_rate_set+0x5c>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004de8:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004dec:	68a0      	ldr	r0, [r4, #8]
 8004dee:	6826      	ldr	r6, [r4, #0]
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004df0:	f365 1306 	bfi	r3, r5, #4, #3
 8004df4:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004df8:	466a      	mov	r2, sp
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	2110      	movs	r1, #16
 8004dfe:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                            1);
  }

  if (ret == 0) {
 8004e00:	b970      	cbnz	r0, 8004e20 <lps22hh_data_rate_set+0x5c>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004e02:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e06:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004e08:	f3c5 01c1 	ubfx	r1, r5, #3, #2
 8004e0c:	f023 0303 	bic.w	r3, r3, #3
 8004e10:	4319      	orrs	r1, r3
 8004e12:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e16:	6825      	ldr	r5, [r4, #0]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	aa01      	add	r2, sp, #4
 8004e1c:	2111      	movs	r1, #17
 8004e1e:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                            1);
  }

  return ret;
}
 8004e20:	b002      	add	sp, #8
 8004e22:	bd70      	pop	{r4, r5, r6, pc}

08004e24 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	4604      	mov	r4, r0
 8004e28:	b082      	sub	sp, #8
 8004e2a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e2c:	6880      	ldr	r0, [r0, #8]
 8004e2e:	6866      	ldr	r6, [r4, #4]
 8004e30:	2301      	movs	r3, #1
 8004e32:	466a      	mov	r2, sp
 8004e34:	2110      	movs	r1, #16
 8004e36:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                         1);

  if (ret == 0) {
 8004e38:	bb40      	cbnz	r0, 8004e8c <lps22hh_data_rate_get+0x68>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e3a:	68a0      	ldr	r0, [r4, #8]
 8004e3c:	6866      	ldr	r6, [r4, #4]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	aa01      	add	r2, sp, #4
 8004e42:	2111      	movs	r1, #17
 8004e44:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  if (ret == 0) {
 8004e46:	bb08      	cbnz	r0, 8004e8c <lps22hh_data_rate_get+0x68>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e48:	2301      	movs	r3, #1
 8004e4a:	aa01      	add	r2, sp, #4
 8004e4c:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8004e50:	2111      	movs	r1, #17
 8004e52:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004e54:	f89d 3004 	ldrb.w	r3, [sp, #4]
             ctrl_reg1.odr )) {
 8004e58:	f89d 2000 	ldrb.w	r2, [sp]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	f003 0318 	and.w	r3, r3, #24
             ctrl_reg1.odr )) {
 8004e62:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004e66:	4413      	add	r3, r2
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	2b14      	cmp	r3, #20
 8004e6c:	d80c      	bhi.n	8004e88 <lps22hh_data_rate_get+0x64>
 8004e6e:	e8df f003 	tbb	[pc, r3]
 8004e72:	120f      	.short	0x120f
 8004e74:	1e1b1815 	.word	0x1e1b1815
 8004e78:	0b0b3321 	.word	0x0b0b3321
 8004e7c:	0b0b0b0b 	.word	0x0b0b0b0b
 8004e80:	27240b0b 	.word	0x27240b0b
 8004e84:	2d2a      	.short	0x2d2a
 8004e86:	30          	.byte	0x30
 8004e87:	00          	.byte	0x00
 8004e88:	2300      	movs	r3, #0
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
        break;

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8004e8a:	702b      	strb	r3, [r5, #0]
        break;
    }
  }

  return ret;
}
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
        break;
 8004e90:	2301      	movs	r3, #1
        *val = LPS22HH_ONE_SHOOT;
 8004e92:	702b      	strb	r3, [r5, #0]
 8004e94:	e7fa      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004e96:	2302      	movs	r3, #2
        *val = LPS22HH_ONE_SHOOT;
 8004e98:	702b      	strb	r3, [r5, #0]
 8004e9a:	e7f7      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004e9c:	2303      	movs	r3, #3
        *val = LPS22HH_ONE_SHOOT;
 8004e9e:	702b      	strb	r3, [r5, #0]
 8004ea0:	e7f4      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004ea2:	2304      	movs	r3, #4
        *val = LPS22HH_ONE_SHOOT;
 8004ea4:	702b      	strb	r3, [r5, #0]
 8004ea6:	e7f1      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004ea8:	2305      	movs	r3, #5
        *val = LPS22HH_ONE_SHOOT;
 8004eaa:	702b      	strb	r3, [r5, #0]
 8004eac:	e7ee      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004eae:	2306      	movs	r3, #6
        *val = LPS22HH_ONE_SHOOT;
 8004eb0:	702b      	strb	r3, [r5, #0]
 8004eb2:	e7eb      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004eb4:	2307      	movs	r3, #7
        *val = LPS22HH_ONE_SHOOT;
 8004eb6:	702b      	strb	r3, [r5, #0]
 8004eb8:	e7e8      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004eba:	2311      	movs	r3, #17
        *val = LPS22HH_ONE_SHOOT;
 8004ebc:	702b      	strb	r3, [r5, #0]
 8004ebe:	e7e5      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004ec0:	2312      	movs	r3, #18
        *val = LPS22HH_ONE_SHOOT;
 8004ec2:	702b      	strb	r3, [r5, #0]
 8004ec4:	e7e2      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004ec6:	2313      	movs	r3, #19
        *val = LPS22HH_ONE_SHOOT;
 8004ec8:	702b      	strb	r3, [r5, #0]
 8004eca:	e7df      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004ecc:	2314      	movs	r3, #20
        *val = LPS22HH_ONE_SHOOT;
 8004ece:	702b      	strb	r3, [r5, #0]
 8004ed0:	e7dc      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
        break;
 8004ed2:	2315      	movs	r3, #21
        *val = LPS22HH_ONE_SHOOT;
 8004ed4:	702b      	strb	r3, [r5, #0]
 8004ed6:	e7d9      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004ed8:	2308      	movs	r3, #8
        *val = LPS22HH_ONE_SHOOT;
 8004eda:	702b      	strb	r3, [r5, #0]
 8004edc:	e7d6      	b.n	8004e8c <lps22hh_data_rate_get+0x68>
 8004ede:	bf00      	nop

08004ee0 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004ee0:	b530      	push	{r4, r5, lr}
 8004ee2:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ee4:	aa01      	add	r2, sp, #4
{
 8004ee6:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ee8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004eec:	2303      	movs	r3, #3
 8004eee:	2128      	movs	r1, #40	@ 0x28
 8004ef0:	47a8      	blx	r5
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
  *buff = reg[2];
 8004ef2:	f89d 1006 	ldrb.w	r1, [sp, #6]
  *buff = (*buff * 256) + reg[1];
 8004ef6:	f89d 2005 	ldrb.w	r2, [sp, #5]
  *buff = (*buff * 256) + reg[0];
 8004efa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  *buff = (*buff * 256) + reg[1];
 8004efe:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  *buff = (*buff * 256) + reg[0];
 8004f02:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *buff *= 256;
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	6023      	str	r3, [r4, #0]
  return ret;
}
 8004f0a:	b003      	add	sp, #12
 8004f0c:	bd30      	pop	{r4, r5, pc}
 8004f0e:	bf00      	nop

08004f10 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004f10:	b530      	push	{r4, r5, lr}
 8004f12:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f14:	aa01      	add	r2, sp, #4
{
 8004f16:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f18:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	212b      	movs	r1, #43	@ 0x2b
 8004f20:	47a8      	blx	r5
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
  *buff = reg[1];
  *buff = (*buff * 256) + reg[0];
 8004f22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004f26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004f2e:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8004f30:	b003      	add	sp, #12
 8004f32:	bd30      	pop	{r4, r5, pc}

08004f34 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f34:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f36:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8004f3a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f3c:	46a4      	mov	ip, r4
 8004f3e:	2301      	movs	r3, #1
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
  return ret;
}
 8004f40:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f44:	210f      	movs	r1, #15
 8004f46:	4760      	bx	ip

08004f48 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f50:	6880      	ldr	r0, [r0, #8]
 8004f52:	6866      	ldr	r6, [r4, #4]
 8004f54:	2301      	movs	r3, #1
 8004f56:	aa01      	add	r2, sp, #4
 8004f58:	2111      	movs	r1, #17
 8004f5a:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8004f5c:	b958      	cbnz	r0, 8004f76 <lps22hh_auto_increment_set+0x2e>
    reg.if_add_inc = val;
 8004f5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f62:	6826      	ldr	r6, [r4, #0]
 8004f64:	68a0      	ldr	r0, [r4, #8]
    reg.if_add_inc = val;
 8004f66:	f365 1304 	bfi	r3, r5, #4, #1
 8004f6a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f6e:	aa01      	add	r2, sp, #4
 8004f70:	2301      	movs	r3, #1
 8004f72:	2111      	movs	r1, #17
 8004f74:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8004f76:	b002      	add	sp, #8
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	bf00      	nop

08004f7c <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	4604      	mov	r4, r0
 8004f80:	b082      	sub	sp, #8
 8004f82:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f84:	6880      	ldr	r0, [r0, #8]
 8004f86:	6866      	ldr	r6, [r4, #4]
 8004f88:	2301      	movs	r3, #1
 8004f8a:	aa01      	add	r2, sp, #4
 8004f8c:	2110      	movs	r1, #16
 8004f8e:	47b0      	blx	r6
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8004f90:	b958      	cbnz	r0, 8004faa <lps22hh_lp_bandwidth_set+0x2e>
    reg.lpfp_cfg = (uint8_t)val;
 8004f92:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f96:	6826      	ldr	r6, [r4, #0]
 8004f98:	68a0      	ldr	r0, [r4, #8]
    reg.lpfp_cfg = (uint8_t)val;
 8004f9a:	f365 0383 	bfi	r3, r5, #2, #2
 8004f9e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004fa2:	aa01      	add	r2, sp, #4
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8004faa:	b002      	add	sp, #8
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
 8004fae:	bf00      	nop

08004fb0 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fb8:	6880      	ldr	r0, [r0, #8]
 8004fba:	6866      	ldr	r6, [r4, #4]
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	aa01      	add	r2, sp, #4
 8004fc0:	210e      	movs	r1, #14
 8004fc2:	47b0      	blx	r6
  lps22hh_if_ctrl_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8004fc4:	b990      	cbnz	r0, 8004fec <lps22hh_i3c_interface_set+0x3c>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8004fc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004fca:	68a0      	ldr	r0, [r4, #8]
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8004fcc:	0069      	lsls	r1, r5, #1
 8004fce:	f001 0102 	and.w	r1, r1, #2
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8004fd2:	092d      	lsrs	r5, r5, #4
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8004fd4:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8004fd8:	f003 037d 	and.w	r3, r3, #125	@ 0x7d
 8004fdc:	4319      	orrs	r1, r3
 8004fde:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004fe2:	6825      	ldr	r5, [r4, #0]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	aa01      	add	r2, sp, #4
 8004fe8:	210e      	movs	r1, #14
 8004fea:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8004fec:	b002      	add	sp, #8
 8004fee:	bd70      	pop	{r4, r5, r6, pc}

08004ff0 <STTS751_GetCapabilities>:

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
 8004ff0:	2300      	movs	r3, #0
  Capabilities->TempMaxOdr  = 32.0f;
 8004ff2:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
  Capabilities->Temperature = 1;
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	6008      	str	r0, [r1, #0]
  Capabilities->HumMaxOdr   = 0.0f;
 8004ffa:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8004ffc:	608a      	str	r2, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8004ffe:	60cb      	str	r3, [r1, #12]
  return STTS751_OK;
}
 8005000:	2000      	movs	r0, #0
 8005002:	4770      	bx	lr

08005004 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005008:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800500a:	6880      	ldr	r0, [r0, #8]
 800500c:	b9a8      	cbnz	r0, 800503a <ReadRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 800500e:	b1a3      	cbz	r3, 800503a <ReadRegWrap+0x36>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005010:	4614      	mov	r4, r2
 8005012:	eb02 0803 	add.w	r8, r2, r3
 8005016:	1a8f      	subs	r7, r1, r2
 8005018:	e001      	b.n	800501e <ReadRegWrap+0x1a>
    for (i = 0; i < Length; i++)
 800501a:	4544      	cmp	r4, r8
 800501c:	d00d      	beq.n	800503a <ReadRegWrap+0x36>
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800501e:	1939      	adds	r1, r7, r4
 8005020:	4622      	mov	r2, r4
 8005022:	2301      	movs	r3, #1
 8005024:	7b28      	ldrb	r0, [r5, #12]
 8005026:	696e      	ldr	r6, [r5, #20]
 8005028:	b289      	uxth	r1, r1
    for (i = 0; i < Length; i++)
 800502a:	441c      	add	r4, r3
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800502c:	47b0      	blx	r6
      if (ret != STTS751_OK)
 800502e:	2800      	cmp	r0, #0
 8005030:	d0f3      	beq.n	800501a <ReadRegWrap+0x16>
      {
        return STTS751_ERROR;
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
 8005036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ret;
 800503a:	2000      	movs	r0, #0
}
 800503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005040 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005044:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8005046:	6880      	ldr	r0, [r0, #8]
 8005048:	b9a8      	cbnz	r0, 8005076 <WriteRegWrap+0x36>
  {
	for (i = 0; i < Length; i++)
 800504a:	b1a3      	cbz	r3, 8005076 <WriteRegWrap+0x36>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800504c:	4614      	mov	r4, r2
 800504e:	eb02 0803 	add.w	r8, r2, r3
 8005052:	1a8f      	subs	r7, r1, r2
 8005054:	e001      	b.n	800505a <WriteRegWrap+0x1a>
	for (i = 0; i < Length; i++)
 8005056:	4544      	cmp	r4, r8
 8005058:	d00d      	beq.n	8005076 <WriteRegWrap+0x36>
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800505a:	1939      	adds	r1, r7, r4
 800505c:	4622      	mov	r2, r4
 800505e:	2301      	movs	r3, #1
 8005060:	7b28      	ldrb	r0, [r5, #12]
 8005062:	692e      	ldr	r6, [r5, #16]
 8005064:	b289      	uxth	r1, r1
	for (i = 0; i < Length; i++)
 8005066:	441c      	add	r4, r3
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005068:	47b0      	blx	r6
      if (ret != STTS751_OK)
 800506a:	2800      	cmp	r0, #0
 800506c:	d0f3      	beq.n	8005056 <WriteRegWrap+0x16>
      {
        return STTS751_ERROR;
 800506e:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
 8005072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ret;
 8005076:	2000      	movs	r0, #0
}
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800507c <STTS751_Init>:
{
 800507c:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 800507e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
{
 8005082:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8005084:	b123      	cbz	r3, 8005090 <STTS751_Init+0x14>
  pObj->is_initialized = 1;
 8005086:	2301      	movs	r3, #1
 8005088:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return STTS751_OK;
 800508c:	2000      	movs	r0, #0
}
 800508e:	bd38      	pop	{r3, r4, r5, pc}
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8005090:	f100 051c 	add.w	r5, r0, #28
 8005094:	2101      	movs	r1, #1
 8005096:	4628      	mov	r0, r5
 8005098:	f000 fb18 	bl	80056cc <stts751_pin_event_route_set>
 800509c:	b968      	cbnz	r0, 80050ba <STTS751_Init+0x3e>
    pObj->temp_odr = 1.0f;
 800509e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80050a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 80050a4:	2103      	movs	r1, #3
 80050a6:	4628      	mov	r0, r5
 80050a8:	f000 fac2 	bl	8005630 <stts751_resolution_set>
 80050ac:	b928      	cbnz	r0, 80050ba <STTS751_Init+0x3e>
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80050ae:	2180      	movs	r1, #128	@ 0x80
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 fa45 	bl	8005540 <stts751_temp_data_rate_set>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d0e5      	beq.n	8005086 <STTS751_Init+0xa>
      return STTS751_ERROR;
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
}
 80050be:	bd38      	pop	{r3, r4, r5, pc}

080050c0 <STTS751_ReadID>:
{
 80050c0:	b510      	push	{r4, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	460c      	mov	r4, r1
  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80050c6:	301c      	adds	r0, #28
 80050c8:	a901      	add	r1, sp, #4
 80050ca:	f000 fb19 	bl	8005700 <stts751_device_id_get>
 80050ce:	b920      	cbnz	r0, 80050da <STTS751_ReadID+0x1a>
  *Id = buf.manufacturer_id;
 80050d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80050d4:	7023      	strb	r3, [r4, #0]
}
 80050d6:	b002      	add	sp, #8
 80050d8:	bd10      	pop	{r4, pc}
    return STTS751_ERROR;
 80050da:	f04f 30ff 	mov.w	r0, #4294967295
 80050de:	e7fa      	b.n	80050d6 <STTS751_ReadID+0x16>

080050e0 <STTS751_TEMP_GetOutputDataRate>:
{
 80050e0:	b510      	push	{r4, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	460c      	mov	r4, r1
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80050e6:	301c      	adds	r0, #28
 80050e8:	f10d 0107 	add.w	r1, sp, #7
 80050ec:	f000 fa64 	bl	80055b8 <stts751_temp_data_rate_get>
 80050f0:	b988      	cbnz	r0, 8005116 <STTS751_TEMP_GetOutputDataRate+0x36>
  switch (odr_low_level)
 80050f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80050f6:	2b09      	cmp	r3, #9
 80050f8:	d809      	bhi.n	800510e <STTS751_TEMP_GetOutputDataRate+0x2e>
 80050fa:	3b01      	subs	r3, #1
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d82c      	bhi.n	800515a <STTS751_TEMP_GetOutputDataRate+0x7a>
 8005100:	e8df f003 	tbb	[pc, r3]
 8005104:	19161310 	.word	0x19161310
 8005108:	25221f1c 	.word	0x25221f1c
 800510c:	28          	.byte	0x28
 800510d:	00          	.byte	0x00
 800510e:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8005112:	2b80      	cmp	r3, #128	@ 0x80
 8005114:	d003      	beq.n	800511e <STTS751_TEMP_GetOutputDataRate+0x3e>
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
}
 800511a:	b002      	add	sp, #8
 800511c:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 800511e:	2300      	movs	r3, #0
      *Odr = 0.0f;
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	e7fa      	b.n	800511a <STTS751_TEMP_GetOutputDataRate+0x3a>
  switch (odr_low_level)
 8005124:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 8005128:	e7fa      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 800512a:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 800512e:	e7f7      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 8005130:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8005134:	e7f4      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 8005136:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800513a:	e7f1      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 800513c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005140:	e7ee      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 8005142:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005146:	e7eb      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 8005148:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800514c:	e7e8      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 800514e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005152:	e7e5      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 8005154:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8005158:	e7e2      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>
  switch (odr_low_level)
 800515a:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 800515e:	e7df      	b.n	8005120 <STTS751_TEMP_GetOutputDataRate+0x40>

08005160 <STTS751_TEMP_SetOutputDataRate>:
{
 8005160:	b510      	push	{r4, lr}
 8005162:	ed2d 8b02 	vpush	{d8}
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005166:	f100 041c 	add.w	r4, r0, #28
{
 800516a:	b082      	sub	sp, #8
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800516c:	f10d 0107 	add.w	r1, sp, #7
 8005170:	4620      	mov	r0, r4
{
 8005172:	eeb0 8a40 	vmov.f32	s16, s0
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005176:	f000 fa75 	bl	8005664 <stts751_resolution_get>
 800517a:	2800      	cmp	r0, #0
 800517c:	d146      	bne.n	800520c <STTS751_TEMP_SetOutputDataRate+0xac>
  if(Odr == 16.0f && res == STTS751_12bit)
 800517e:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 8005182:	eeb4 8a67 	vcmp.f32	s16, s15
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	d018      	beq.n	80051be <STTS751_TEMP_SetOutputDataRate+0x5e>
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 800518c:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800528c <STTS751_TEMP_SetOutputDataRate+0x12c>
 8005190:	eeb4 8a67 	vcmp.f32	s16, s15
 8005194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005198:	d117      	bne.n	80051ca <STTS751_TEMP_SetOutputDataRate+0x6a>
 800519a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800519e:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d02c      	beq.n	8005200 <STTS751_TEMP_SetOutputDataRate+0xa0>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80051a6:	2109      	movs	r1, #9
  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 f9c9 	bl	8005540 <stts751_temp_data_rate_set>
 80051ae:	3800      	subs	r0, #0
 80051b0:	bf18      	it	ne
 80051b2:	2001      	movne	r0, #1
 80051b4:	4240      	negs	r0, r0
}
 80051b6:	b002      	add	sp, #8
 80051b8:	ecbd 8b02 	vpop	{d8}
 80051bc:	bd10      	pop	{r4, pc}
  if(Odr == 16.0f && res == STTS751_12bit)
 80051be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d03c      	beq.n	8005240 <STTS751_TEMP_SetOutputDataRate+0xe0>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80051c6:	2108      	movs	r1, #8
 80051c8:	e7ee      	b.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
 80051ca:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8005290 <STTS751_TEMP_SetOutputDataRate+0x130>
 80051ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	d801      	bhi.n	80051dc <STTS751_TEMP_SetOutputDataRate+0x7c>
 80051d8:	4601      	mov	r1, r0
 80051da:	e7e5      	b.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
 80051dc:	eef4 7a00 	vmov.f32	s15, #64	@ 0x3e000000  0.125
 80051e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	d908      	bls.n	80051fc <STTS751_TEMP_SetOutputDataRate+0x9c>
 80051ea:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80051ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	d80c      	bhi.n	8005212 <STTS751_TEMP_SetOutputDataRate+0xb2>
 80051f8:	2102      	movs	r1, #2
 80051fa:	e7d5      	b.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
 80051fc:	2101      	movs	r1, #1
 80051fe:	e7d3      	b.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8005200:	4601      	mov	r1, r0
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fa14 	bl	8005630 <stts751_resolution_set>
 8005208:	2800      	cmp	r0, #0
 800520a:	d0cc      	beq.n	80051a6 <STTS751_TEMP_SetOutputDataRate+0x46>
    return STTS751_ERROR;
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	e7d1      	b.n	80051b6 <STTS751_TEMP_SetOutputDataRate+0x56>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005212:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005216:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	d916      	bls.n	800524e <STTS751_TEMP_SetOutputDataRate+0xee>
 8005220:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005224:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522c:	d911      	bls.n	8005252 <STTS751_TEMP_SetOutputDataRate+0xf2>
 800522e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005232:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523a:	d80c      	bhi.n	8005256 <STTS751_TEMP_SetOutputDataRate+0xf6>
 800523c:	2105      	movs	r1, #5
 800523e:	e7b3      	b.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8005240:	2101      	movs	r1, #1
 8005242:	4620      	mov	r0, r4
 8005244:	f000 f9f4 	bl	8005630 <stts751_resolution_set>
 8005248:	2800      	cmp	r0, #0
 800524a:	d0bc      	beq.n	80051c6 <STTS751_TEMP_SetOutputDataRate+0x66>
 800524c:	e7de      	b.n	800520c <STTS751_TEMP_SetOutputDataRate+0xac>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800524e:	2103      	movs	r1, #3
 8005250:	e7aa      	b.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005252:	2104      	movs	r1, #4
 8005254:	e7a8      	b.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005256:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800525a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	d801      	bhi.n	8005268 <STTS751_TEMP_SetOutputDataRate+0x108>
 8005264:	2106      	movs	r1, #6
 8005266:	e79f      	b.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005268:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800526c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	bf98      	it	ls
 8005276:	2107      	movls	r1, #7
 8005278:	d996      	bls.n	80051a8 <STTS751_TEMP_SetOutputDataRate+0x48>
 800527a:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 800527e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	d88e      	bhi.n	80051a6 <STTS751_TEMP_SetOutputDataRate+0x46>
 8005288:	e79d      	b.n	80051c6 <STTS751_TEMP_SetOutputDataRate+0x66>
 800528a:	bf00      	nop
 800528c:	42000000 	.word	0x42000000
 8005290:	3d800000 	.word	0x3d800000

08005294 <STTS751_TEMP_GetTemperature>:
{
 8005294:	b530      	push	{r4, r5, lr}
 8005296:	b083      	sub	sp, #12
 8005298:	460d      	mov	r5, r1
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800529a:	301c      	adds	r0, #28
 800529c:	f10d 0106 	add.w	r1, sp, #6
 80052a0:	f000 f9f8 	bl	8005694 <stts751_temperature_raw_get>
 80052a4:	b948      	cbnz	r0, 80052ba <STTS751_TEMP_GetTemperature+0x26>
  *Value = stts751_from_lsb_to_celsius(raw_value);
 80052a6:	4604      	mov	r4, r0
 80052a8:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80052ac:	f000 f942 	bl	8005534 <stts751_from_lsb_to_celsius>
 80052b0:	ed85 0a00 	vstr	s0, [r5]
}
 80052b4:	4620      	mov	r0, r4
 80052b6:	b003      	add	sp, #12
 80052b8:	bd30      	pop	{r4, r5, pc}
    return STTS751_ERROR;
 80052ba:	f04f 34ff 	mov.w	r4, #4294967295
 80052be:	e7f9      	b.n	80052b4 <STTS751_TEMP_GetTemperature+0x20>

080052c0 <STTS751_DeInit>:
{
 80052c0:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 80052c2:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80052c6:	2b01      	cmp	r3, #1
{
 80052c8:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80052ca:	d003      	beq.n	80052d4 <STTS751_DeInit+0x14>
  pObj->is_initialized = 0;
 80052cc:	2000      	movs	r0, #0
 80052ce:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 80052d2:	bd10      	pop	{r4, pc}
  if (pObj->temp_is_enabled == 0U)
 80052d4:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f7      	beq.n	80052cc <STTS751_DeInit+0xc>
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 80052dc:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 80052e0:	f7ff fefe 	bl	80050e0 <STTS751_TEMP_GetOutputDataRate>
 80052e4:	b940      	cbnz	r0, 80052f8 <STTS751_DeInit+0x38>
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	f104 001c 	add.w	r0, r4, #28
 80052ec:	f000 f928 	bl	8005540 <stts751_temp_data_rate_set>
 80052f0:	b910      	cbnz	r0, 80052f8 <STTS751_DeInit+0x38>
  pObj->temp_is_enabled = 0;
 80052f2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return STTS751_OK;
 80052f6:	e7e9      	b.n	80052cc <STTS751_DeInit+0xc>
      return STTS751_ERROR;
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	bf00      	nop

08005300 <STTS751_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8005300:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8005304:	b90b      	cbnz	r3, 800530a <STTS751_TEMP_Disable+0xa>
    return STTS751_OK;
 8005306:	2000      	movs	r0, #0
}
 8005308:	4770      	bx	lr
{
 800530a:	b530      	push	{r4, r5, lr}
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800530c:	f100 051c 	add.w	r5, r0, #28
{
 8005310:	b083      	sub	sp, #12
 8005312:	4604      	mov	r4, r0
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8005314:	f10d 0107 	add.w	r1, sp, #7
 8005318:	4628      	mov	r0, r5
 800531a:	f000 f94d 	bl	80055b8 <stts751_temp_data_rate_get>
 800531e:	b988      	cbnz	r0, 8005344 <STTS751_TEMP_Disable+0x44>
  switch (odr_low_level)
 8005320:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005324:	2b09      	cmp	r3, #9
 8005326:	d809      	bhi.n	800533c <STTS751_TEMP_Disable+0x3c>
 8005328:	3b01      	subs	r3, #1
 800532a:	2b08      	cmp	r3, #8
 800532c:	d836      	bhi.n	800539c <STTS751_TEMP_Disable+0x9c>
 800532e:	e8df f003 	tbb	[pc, r3]
 8005332:	0d1d      	.short	0x0d1d
 8005334:	29262320 	.word	0x29262320
 8005338:	322f      	.short	0x322f
 800533a:	2c          	.byte	0x2c
 800533b:	00          	.byte	0x00
 800533c:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8005340:	2b80      	cmp	r3, #128	@ 0x80
 8005342:	d011      	beq.n	8005368 <STTS751_TEMP_Disable+0x68>
    return STTS751_ERROR;
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005348:	b003      	add	sp, #12
 800534a:	bd30      	pop	{r4, r5, pc}
  switch (odr_low_level)
 800534c:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
      *Odr = 0.0625f;
 8005350:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8005352:	2180      	movs	r1, #128	@ 0x80
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f8f3 	bl	8005540 <stts751_temp_data_rate_set>
 800535a:	2800      	cmp	r0, #0
 800535c:	d1f2      	bne.n	8005344 <STTS751_TEMP_Disable+0x44>
  pObj->temp_is_enabled = 0;
 800535e:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return STTS751_OK;
 8005362:	2000      	movs	r0, #0
}
 8005364:	b003      	add	sp, #12
 8005366:	bd30      	pop	{r4, r5, pc}
  switch (odr_low_level)
 8005368:	2300      	movs	r3, #0
 800536a:	e7f1      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
 800536c:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 8005370:	e7ee      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_500mHz:
 8005372:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8005376:	e7eb      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_1Hz:
 8005378:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800537c:	e7e8      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_2Hz:
 800537e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005382:	e7e5      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_4Hz:
 8005384:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005388:	e7e2      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_32Hz:
 800538a:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 800538e:	e7df      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_8Hz:
 8005390:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005394:	e7dc      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_16Hz:
 8005396:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800539a:	e7d9      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
  switch (odr_low_level)
 800539c:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 80053a0:	e7d6      	b.n	8005350 <STTS751_TEMP_Disable+0x50>
 80053a2:	bf00      	nop

080053a4 <STTS751_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 80053a4:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d048      	beq.n	800543e <STTS751_TEMP_Enable+0x9a>
{
 80053ac:	b530      	push	{r4, r5, lr}
 80053ae:	ed2d 8b02 	vpush	{d8}
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80053b2:	f100 051c 	add.w	r5, r0, #28
{
 80053b6:	b083      	sub	sp, #12
 80053b8:	4604      	mov	r4, r0
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80053ba:	f10d 0107 	add.w	r1, sp, #7
 80053be:	4628      	mov	r0, r5
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 80053c0:	ed94 8a0b 	vldr	s16, [r4, #44]	@ 0x2c
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80053c4:	f000 f94e 	bl	8005664 <stts751_resolution_get>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d150      	bne.n	800546e <STTS751_TEMP_Enable+0xca>
  if(Odr == 16.0f && res == STTS751_12bit)
 80053cc:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 80053d0:	eeb4 8a67 	vcmp.f32	s16, s15
 80053d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d8:	d019      	beq.n	800540e <STTS751_TEMP_Enable+0x6a>
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 80053da:	eddf 7a41 	vldr	s15, [pc, #260]	@ 80054e0 <STTS751_TEMP_Enable+0x13c>
 80053de:	eeb4 8a67 	vcmp.f32	s16, s15
 80053e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e6:	d118      	bne.n	800541a <STTS751_TEMP_Enable+0x76>
 80053e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80053ec:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d036      	beq.n	8005462 <STTS751_TEMP_Enable+0xbe>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80053f4:	2109      	movs	r1, #9
  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 f8a2 	bl	8005540 <stts751_temp_data_rate_set>
 80053fc:	bbb8      	cbnz	r0, 800546e <STTS751_TEMP_Enable+0xca>
  pObj->temp_is_enabled = 1;
 80053fe:	2301      	movs	r3, #1
 8005400:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return STTS751_OK;
 8005404:	2000      	movs	r0, #0
}
 8005406:	b003      	add	sp, #12
 8005408:	ecbd 8b02 	vpop	{d8}
 800540c:	bd30      	pop	{r4, r5, pc}
  if(Odr == 16.0f && res == STTS751_12bit)
 800540e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d030      	beq.n	8005478 <STTS751_TEMP_Enable+0xd4>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005416:	2108      	movs	r1, #8
 8005418:	e7ed      	b.n	80053f6 <STTS751_TEMP_Enable+0x52>
 800541a:	eddf 7a32 	vldr	s15, [pc, #200]	@ 80054e4 <STTS751_TEMP_Enable+0x140>
 800541e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005426:	d801      	bhi.n	800542c <STTS751_TEMP_Enable+0x88>
 8005428:	4601      	mov	r1, r0
 800542a:	e7e4      	b.n	80053f6 <STTS751_TEMP_Enable+0x52>
 800542c:	eef4 7a00 	vmov.f32	s15, #64	@ 0x3e000000  0.125
 8005430:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005438:	d803      	bhi.n	8005442 <STTS751_TEMP_Enable+0x9e>
 800543a:	2101      	movs	r1, #1
 800543c:	e7db      	b.n	80053f6 <STTS751_TEMP_Enable+0x52>
    return STTS751_OK;
 800543e:	2000      	movs	r0, #0
}
 8005440:	4770      	bx	lr
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005442:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005446:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544e:	d911      	bls.n	8005474 <STTS751_TEMP_Enable+0xd0>
 8005450:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005454:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545c:	d813      	bhi.n	8005486 <STTS751_TEMP_Enable+0xe2>
 800545e:	2103      	movs	r1, #3
 8005460:	e7c9      	b.n	80053f6 <STTS751_TEMP_Enable+0x52>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8005462:	4601      	mov	r1, r0
 8005464:	4628      	mov	r0, r5
 8005466:	f000 f8e3 	bl	8005630 <stts751_resolution_set>
 800546a:	2800      	cmp	r0, #0
 800546c:	d0c2      	beq.n	80053f4 <STTS751_TEMP_Enable+0x50>
    return STTS751_ERROR;
 800546e:	f04f 30ff 	mov.w	r0, #4294967295
 8005472:	e7c8      	b.n	8005406 <STTS751_TEMP_Enable+0x62>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005474:	2102      	movs	r1, #2
 8005476:	e7be      	b.n	80053f6 <STTS751_TEMP_Enable+0x52>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8005478:	2101      	movs	r1, #1
 800547a:	4628      	mov	r0, r5
 800547c:	f000 f8d8 	bl	8005630 <stts751_resolution_set>
 8005480:	2800      	cmp	r0, #0
 8005482:	d0c8      	beq.n	8005416 <STTS751_TEMP_Enable+0x72>
 8005484:	e7f3      	b.n	800546e <STTS751_TEMP_Enable+0xca>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005486:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800548a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005492:	d908      	bls.n	80054a6 <STTS751_TEMP_Enable+0x102>
 8005494:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005498:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a0:	d803      	bhi.n	80054aa <STTS751_TEMP_Enable+0x106>
 80054a2:	2105      	movs	r1, #5
 80054a4:	e7a7      	b.n	80053f6 <STTS751_TEMP_Enable+0x52>
 80054a6:	2104      	movs	r1, #4
 80054a8:	e7a5      	b.n	80053f6 <STTS751_TEMP_Enable+0x52>
 80054aa:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80054ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	d801      	bhi.n	80054bc <STTS751_TEMP_Enable+0x118>
 80054b8:	2106      	movs	r1, #6
 80054ba:	e79c      	b.n	80053f6 <STTS751_TEMP_Enable+0x52>
 80054bc:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80054c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c8:	bf98      	it	ls
 80054ca:	2107      	movls	r1, #7
 80054cc:	d993      	bls.n	80053f6 <STTS751_TEMP_Enable+0x52>
 80054ce:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 80054d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054da:	d99c      	bls.n	8005416 <STTS751_TEMP_Enable+0x72>
 80054dc:	e78a      	b.n	80053f4 <STTS751_TEMP_Enable+0x50>
 80054de:	bf00      	nop
 80054e0:	42000000 	.word	0x42000000
 80054e4:	3d800000 	.word	0x3d800000

080054e8 <STTS751_RegisterBusIO>:
  if (pObj == NULL)
 80054e8:	b1e0      	cbz	r0, 8005524 <STTS751_RegisterBusIO+0x3c>
{
 80054ea:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 80054ec:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 80054f0:	688a      	ldr	r2, [r1, #8]
 80054f2:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80054f4:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 80054f8:	7b0a      	ldrb	r2, [r1, #12]
 80054fa:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80054fc:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 8005500:	6989      	ldr	r1, [r1, #24]
 8005502:	6181      	str	r1, [r0, #24]
 8005504:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8005506:	4909      	ldr	r1, [pc, #36]	@ (800552c <STTS751_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8005508:	4a09      	ldr	r2, [pc, #36]	@ (8005530 <STTS751_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800550a:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 800550c:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8005510:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 8005512:	b113      	cbz	r3, 800551a <STTS751_RegisterBusIO+0x32>
}
 8005514:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8005518:	4718      	bx	r3
}
 800551a:	f04f 30ff 	mov.w	r0, #4294967295
 800551e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	f04f 30ff 	mov.w	r0, #4294967295
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	08005005 	.word	0x08005005
 8005530:	08005041 	.word	0x08005041

08005534 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float stts751_from_lsb_to_celsius(int16_t lsb)
{
 8005534:	ee00 0a10 	vmov	s0, r0
  return ((float)lsb) / 256.0f;
}
 8005538:	eeba 0acc 	vcvt.f32.s32	s0, s0, #8
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4604      	mov	r4, r0
 8005544:	b082      	sub	sp, #8
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8005546:	23aa      	movs	r3, #170	@ 0xaa
{
 8005548:	460d      	mov	r5, r1
  uint8_t dummy_value = 0xAA;
 800554a:	f88d 3007 	strb.w	r3, [sp, #7]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800554e:	6880      	ldr	r0, [r0, #8]
 8005550:	6866      	ldr	r6, [r4, #4]
 8005552:	2301      	movs	r3, #1
 8005554:	aa01      	add	r2, sp, #4
 8005556:	2104      	movs	r1, #4
 8005558:	47b0      	blx	r6
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0) {
 800555a:	bb50      	cbnz	r0, 80055b2 <stts751_temp_data_rate_set+0x72>
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800555c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005560:	68a0      	ldr	r0, [r4, #8]
 8005562:	6826      	ldr	r6, [r4, #0]
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8005564:	f365 0303 	bfi	r3, r5, #0, #4
 8005568:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800556c:	aa01      	add	r2, sp, #4
 800556e:	2301      	movs	r3, #1
 8005570:	2104      	movs	r1, #4
 8005572:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0) {
 8005574:	b9e8      	cbnz	r0, 80055b2 <stts751_temp_data_rate_set+0x72>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005576:	6866      	ldr	r6, [r4, #4]
 8005578:	68a0      	ldr	r0, [r4, #8]
 800557a:	2301      	movs	r3, #1
 800557c:	466a      	mov	r2, sp
 800557e:	2103      	movs	r1, #3
 8005580:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0) {
 8005582:	b9b0      	cbnz	r0, 80055b2 <stts751_temp_data_rate_set+0x72>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8005584:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005588:	6826      	ldr	r6, [r4, #0]
 800558a:	68a0      	ldr	r0, [r4, #8]
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800558c:	09ea      	lsrs	r2, r5, #7
 800558e:	f362 1386 	bfi	r3, r2, #6, #1
 8005592:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005596:	466a      	mov	r2, sp
 8005598:	2301      	movs	r3, #1
 800559a:	2103      	movs	r1, #3
 800559c:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT)) {
 800559e:	b940      	cbnz	r0, 80055b2 <stts751_temp_data_rate_set+0x72>
 80055a0:	2d90      	cmp	r5, #144	@ 0x90
 80055a2:	d106      	bne.n	80055b2 <stts751_temp_data_rate_set+0x72>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80055a4:	6825      	ldr	r5, [r4, #0]
 80055a6:	68a0      	ldr	r0, [r4, #8]
 80055a8:	2301      	movs	r3, #1
 80055aa:	f10d 0207 	add.w	r2, sp, #7
 80055ae:	210f      	movs	r1, #15
 80055b0:	47a8      	blx	r5
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
  }

  return ret;
}
 80055b2:	b002      	add	sp, #8
 80055b4:	bd70      	pop	{r4, r5, r6, pc}
 80055b6:	bf00      	nop

080055b8 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4604      	mov	r4, r0
 80055bc:	b082      	sub	sp, #8
 80055be:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80055c0:	6880      	ldr	r0, [r0, #8]
 80055c2:	6866      	ldr	r6, [r4, #4]
 80055c4:	2301      	movs	r3, #1
 80055c6:	466a      	mov	r2, sp
 80055c8:	2104      	movs	r1, #4
 80055ca:	47b0      	blx	r6
  stts751_configuration_t configuration;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0) {
 80055cc:	b928      	cbnz	r0, 80055da <stts751_temp_data_rate_get+0x22>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80055ce:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80055d2:	2301      	movs	r3, #1
 80055d4:	aa01      	add	r2, sp, #4
 80055d6:	2103      	movs	r1, #3
 80055d8:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 80055da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80055de:	f89d 3000 	ldrb.w	r3, [sp]
 80055e2:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80055ee:	2b09      	cmp	r3, #9
 80055f0:	d81c      	bhi.n	800562c <stts751_temp_data_rate_get+0x74>
 80055f2:	e8df f003 	tbb	[pc, r3]
 80055f6:	0905      	.short	0x0905
 80055f8:	110f0d0b 	.word	0x110f0d0b
 80055fc:	19171513 	.word	0x19171513
 8005600:	2300      	movs	r3, #0
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8005602:	702b      	strb	r3, [r5, #0]
      *val = STTS751_TEMP_ODR_OFF;
      break;
  }

  return ret;
}
 8005604:	b002      	add	sp, #8
 8005606:	bd70      	pop	{r4, r5, r6, pc}
      break;
 8005608:	2301      	movs	r3, #1
 800560a:	e7fa      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
      break;
 800560c:	2302      	movs	r3, #2
 800560e:	e7f8      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
      break;
 8005610:	2303      	movs	r3, #3
 8005612:	e7f6      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
      break;
 8005614:	2304      	movs	r3, #4
 8005616:	e7f4      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
      break;
 8005618:	2305      	movs	r3, #5
 800561a:	e7f2      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
      break;
 800561c:	2306      	movs	r3, #6
 800561e:	e7f0      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
      break;
 8005620:	2307      	movs	r3, #7
 8005622:	e7ee      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
      break;
 8005624:	2308      	movs	r3, #8
 8005626:	e7ec      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
      break;
 8005628:	2309      	movs	r3, #9
 800562a:	e7ea      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>
  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 800562c:	2380      	movs	r3, #128	@ 0x80
 800562e:	e7e8      	b.n	8005602 <stts751_temp_data_rate_get+0x4a>

08005630 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	4604      	mov	r4, r0
 8005634:	b082      	sub	sp, #8
 8005636:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005638:	6880      	ldr	r0, [r0, #8]
 800563a:	6866      	ldr	r6, [r4, #4]
 800563c:	2301      	movs	r3, #1
 800563e:	aa01      	add	r2, sp, #4
 8005640:	2103      	movs	r1, #3
 8005642:	47b0      	blx	r6
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                         1);

  if (ret == 0) {
 8005644:	b958      	cbnz	r0, 800565e <stts751_resolution_set+0x2e>
    reg.tres = (uint8_t) val;
 8005646:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800564a:	6826      	ldr	r6, [r4, #0]
 800564c:	68a0      	ldr	r0, [r4, #8]
    reg.tres = (uint8_t) val;
 800564e:	f365 0383 	bfi	r3, r5, #2, #2
 8005652:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005656:	aa01      	add	r2, sp, #4
 8005658:	2301      	movs	r3, #1
 800565a:	2103      	movs	r1, #3
 800565c:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                            1);
  }

  return ret;
}
 800565e:	b002      	add	sp, #8
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	bf00      	nop

08005664 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8005664:	b530      	push	{r4, r5, lr}
 8005666:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005668:	2301      	movs	r3, #1
 800566a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800566e:	aa01      	add	r2, sp, #4
{
 8005670:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005672:	2103      	movs	r1, #3
 8005674:	47a8      	blx	r5
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                         1);

  switch (reg.tres) {
 8005676:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800567a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800567e:	2b01      	cmp	r3, #1
 8005680:	d005      	beq.n	800568e <stts751_resolution_get+0x2a>
 8005682:	2b03      	cmp	r3, #3
 8005684:	d003      	beq.n	800568e <stts751_resolution_get+0x2a>
 8005686:	3b00      	subs	r3, #0
 8005688:	bf18      	it	ne
 800568a:	2301      	movne	r3, #1
 800568c:	005b      	lsls	r3, r3, #1
    case STTS751_9bit:
      *val = STTS751_9bit;
 800568e:	7023      	strb	r3, [r4, #0]
      *val = STTS751_9bit;
      break;
  }

  return ret;
}
 8005690:	b003      	add	sp, #12
 8005692:	bd30      	pop	{r4, r5, pc}

08005694 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	4604      	mov	r4, r0
 8005698:	b082      	sub	sp, #8
 800569a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800569c:	6880      	ldr	r0, [r0, #8]
 800569e:	6866      	ldr	r6, [r4, #4]
 80056a0:	2301      	movs	r3, #1
 80056a2:	f10d 0205 	add.w	r2, sp, #5
 80056a6:	2100      	movs	r1, #0
 80056a8:	47b0      	blx	r6
  uint8_t buff[2];
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
                         (uint8_t *)&buff[1], 1);

  if (ret == 0) {
 80056aa:	b960      	cbnz	r0, 80056c6 <stts751_temperature_raw_get+0x32>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80056ac:	2301      	movs	r3, #1
 80056ae:	aa01      	add	r2, sp, #4
 80056b0:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80056b4:	2102      	movs	r1, #2
 80056b6:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
                           &buff[0], 1);
    *val = (int16_t)buff[1];
    *val = (*val * 256) + (int16_t)buff[0];
 80056b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80056bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056c4:	802b      	strh	r3, [r5, #0]
  }

  return ret;
}
 80056c6:	b002      	add	sp, #8
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
 80056ca:	bf00      	nop

080056cc <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4604      	mov	r4, r0
 80056d0:	b082      	sub	sp, #8
 80056d2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80056d4:	6880      	ldr	r0, [r0, #8]
 80056d6:	6866      	ldr	r6, [r4, #4]
 80056d8:	2301      	movs	r3, #1
 80056da:	aa01      	add	r2, sp, #4
 80056dc:	2103      	movs	r1, #3
 80056de:	47b0      	blx	r6
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg,
                         1);

  if (ret == 0) {
 80056e0:	b958      	cbnz	r0, 80056fa <stts751_pin_event_route_set+0x2e>
    reg.mask1 = val;
 80056e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80056e6:	6826      	ldr	r6, [r4, #0]
 80056e8:	68a0      	ldr	r0, [r4, #8]
    reg.mask1 = val;
 80056ea:	f365 13c7 	bfi	r3, r5, #7, #1
 80056ee:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80056f2:	aa01      	add	r2, sp, #4
 80056f4:	2301      	movs	r3, #1
 80056f6:	2103      	movs	r1, #3
 80056f8:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg,
                            1);
  }

  return ret;
}
 80056fa:	b002      	add	sp, #8
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	bf00      	nop

08005700 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4604      	mov	r4, r0
 8005704:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005706:	460a      	mov	r2, r1
 8005708:	6880      	ldr	r0, [r0, #8]
 800570a:	6866      	ldr	r6, [r4, #4]
 800570c:	2301      	movs	r3, #1
 800570e:	21fd      	movs	r1, #253	@ 0xfd
 8005710:	47b0      	blx	r6
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0) {
 8005712:	b978      	cbnz	r0, 8005734 <stts751_device_id_get+0x34>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005714:	2301      	movs	r3, #1
 8005716:	68a0      	ldr	r0, [r4, #8]
 8005718:	6866      	ldr	r6, [r4, #4]
 800571a:	18ea      	adds	r2, r5, r3
 800571c:	21fe      	movs	r1, #254	@ 0xfe
 800571e:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0) {
 8005720:	b940      	cbnz	r0, 8005734 <stts751_device_id_get+0x34>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005722:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005726:	1caa      	adds	r2, r5, #2
 8005728:	46b4      	mov	ip, r6
 800572a:	2301      	movs	r3, #1
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
}
 800572c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005730:	21ff      	movs	r1, #255	@ 0xff
 8005732:	4760      	bx	ip
}
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	bf00      	nop

08005738 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 8005738:	b570      	push	{r4, r5, r6, lr}
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 800573a:	4c1a      	ldr	r4, [pc, #104]	@ (80057a4 <BSP_ADC1_Initialization+0x6c>)
 800573c:	7823      	ldrb	r3, [r4, #0]
{
 800573e:	4605      	mov	r5, r0
  if(ADC_UsedFor == ADC1_NOT_USED){
 8005740:	b123      	cbz	r3, 800574c <BSP_ADC1_Initialization+0x14>
      return BSP_ERROR_PERIPH_FAILURE;
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 8005742:	ea45 0003 	orr.w	r0, r5, r3
 8005746:	7020      	strb	r0, [r4, #0]

  return BSP_ERROR_NONE;
 8005748:	2000      	movs	r0, #0
}
 800574a:	bd70      	pop	{r4, r5, r6, pc}
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800574c:	2204      	movs	r2, #4
    ADC1_Handle.Instance = ADC1;
 800574e:	4916      	ldr	r1, [pc, #88]	@ (80057a8 <BSP_ADC1_Initialization+0x70>)
 8005750:	6061      	str	r1, [r4, #4]
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8005752:	18a6      	adds	r6, r4, r2
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 8005754:	e9c4 3302 	strd	r3, r3, [r4, #8]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8005758:	e9c4 3304 	strd	r3, r3, [r4, #16]
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800575c:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8005760:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8005764:	f44f 7180 	mov.w	r1, #256	@ 0x100
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005768:	61a2      	str	r2, [r4, #24]
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800576a:	6522      	str	r2, [r4, #80]	@ 0x50
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 800576c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8005770:	2201      	movs	r2, #1
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 8005772:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 8005776:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 800577a:	4630      	mov	r0, r6
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800577c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8005780:	83a1      	strh	r1, [r4, #28]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8005782:	6222      	str	r2, [r4, #32]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 8005784:	62a2      	str	r2, [r4, #40]	@ 0x28
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 8005786:	64e2      	str	r2, [r4, #76]	@ 0x4c
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005788:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 800578a:	f001 fd71 	bl	8007270 <HAL_ADC_Init>
 800578e:	b930      	cbnz	r0, 800579e <BSP_ADC1_Initialization+0x66>
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8005790:	217f      	movs	r1, #127	@ 0x7f
 8005792:	4630      	mov	r0, r6
 8005794:	f001 ffa4 	bl	80076e0 <HAL_ADCEx_Calibration_Start>
 8005798:	b908      	cbnz	r0, 800579e <BSP_ADC1_Initialization+0x66>
  ADC_UsedFor |= ADC_InitFor;
 800579a:	7823      	ldrb	r3, [r4, #0]
 800579c:	e7d1      	b.n	8005742 <BSP_ADC1_Initialization+0xa>
      return BSP_ERROR_PERIPH_FAILURE;
 800579e:	f06f 0003 	mvn.w	r0, #3
}
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	20002878 	.word	0x20002878
 80057a8:	50040000 	.word	0x50040000

080057ac <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 80057ac:	4b0a      	ldr	r3, [pc, #40]	@ (80057d8 <HAL_ADC_MspInit+0x2c>)
 80057ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80057b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{ 
 80057b8:	b082      	sub	sp, #8
  __HAL_RCC_ADC_CLK_ENABLE();
 80057ba:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	9a01      	ldr	r2, [sp, #4]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 80057c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80057c6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80057ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80057ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80057d2:	b002      	add	sp, #8
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
 80057dc:	00000000 	.word	0x00000000

080057e0 <BSP_PB_PWR_Init>:
*/
void BSP_PB_PWR_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80057e0:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <BSP_PB_PWR_Init+0x50>)
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80057e2:	4814      	ldr	r0, [pc, #80]	@ (8005834 <BSP_PB_PWR_Init+0x54>)
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80057e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 80057e6:	b500      	push	{lr}
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80057e8:	f042 0208 	orr.w	r2, r2, #8
 80057ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80057ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 80057f0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 80057f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8005828 <BSP_PB_PWR_Init+0x48>
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80057fc:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 80057fe:	2202      	movs	r2, #2
 8005800:	2302      	movs	r3, #2
 8005802:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005806:	e9cd 2304 	strd	r2, r3, [sp, #16]
  POWER_BUTTON_GPIO_CLK_ENABLE();
 800580a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800580c:	f002 faa4 	bl	8007d58 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 8005810:	2200      	movs	r2, #0
 8005812:	210f      	movs	r1, #15
 8005814:	2028      	movs	r0, #40	@ 0x28
 8005816:	f002 fa2f 	bl	8007c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 800581a:	2028      	movs	r0, #40	@ 0x28
 800581c:	f002 fa68 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
  
}
 8005820:	b009      	add	sp, #36	@ 0x24
 8005822:	f85d fb04 	ldr.w	pc, [sp], #4
 8005826:	bf00      	nop
 8005828:	00000400 	.word	0x00000400
 800582c:	10110000 	.word	0x10110000
 8005830:	40021000 	.word	0x40021000
 8005834:	48000c00 	.word	0x48000c00

08005838 <BSP_Enable_DCDC2>:
*/
void BSP_Enable_DCDC2(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005838:	4b10      	ldr	r3, [pc, #64]	@ (800587c <BSP_Enable_DCDC2+0x44>)
{
 800583a:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800583c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800583e:	4c10      	ldr	r4, [pc, #64]	@ (8005880 <BSP_Enable_DCDC2+0x48>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005840:	f042 0210 	orr.w	r2, r2, #16
 8005844:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 8005848:	b088      	sub	sp, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005854:	2301      	movs	r3, #1
 8005856:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800585a:	a902      	add	r1, sp, #8
 800585c:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800585e:	2200      	movs	r2, #0
 8005860:	2302      	movs	r3, #2
 8005862:	e9cd 2304 	strd	r2, r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005866:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005868:	f002 fa76 	bl	8007d58 <HAL_GPIO_Init>
  
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800586c:	2201      	movs	r2, #1
 800586e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005872:	4620      	mov	r0, r4
 8005874:	f002 fc48 	bl	8008108 <HAL_GPIO_WritePin>
}
 8005878:	b008      	add	sp, #32
 800587a:	bd10      	pop	{r4, pc}
 800587c:	40021000 	.word	0x40021000
 8005880:	48001000 	.word	0x48001000

08005884 <BSP_PB_Init>:
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005884:	4a17      	ldr	r2, [pc, #92]	@ (80058e4 <BSP_PB_Init+0x60>)
{
 8005886:	b510      	push	{r4, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005888:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 800588a:	f040 0010 	orr.w	r0, r0, #16
 800588e:	64d0      	str	r0, [r2, #76]	@ 0x4c
 8005890:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
{
 8005892:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005894:	f002 0210 	and.w	r2, r2, #16
 8005898:	9201      	str	r2, [sp, #4]
 800589a:	9a01      	ldr	r2, [sp, #4]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800589c:	b969      	cbnz	r1, 80058ba <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800589e:	460b      	mov	r3, r1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058a0:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058a2:	4811      	ldr	r0, [pc, #68]	@ (80058e8 <BSP_PB_Init+0x64>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80058a4:	2401      	movs	r4, #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058a6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058a8:	e9cd 4302 	strd	r4, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058ac:	e9cd 2204 	strd	r2, r2, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058b0:	f002 fa52 	bl	8007d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;  
}
 80058b4:	2000      	movs	r0, #0
 80058b6:	b008      	add	sp, #32
 80058b8:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80058ba:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <BSP_PB_Init+0x68>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058bc:	480a      	ldr	r0, [pc, #40]	@ (80058e8 <BSP_PB_Init+0x64>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058be:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058c0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80058c2:	2201      	movs	r2, #1
 80058c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058ca:	f002 fa45 	bl	8007d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80058ce:	4622      	mov	r2, r4
 80058d0:	210f      	movs	r1, #15
 80058d2:	2006      	movs	r0, #6
 80058d4:	f002 f9d0 	bl	8007c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80058d8:	2006      	movs	r0, #6
 80058da:	f002 fa09 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
}
 80058de:	2000      	movs	r0, #0
 80058e0:	b008      	add	sp, #32
 80058e2:	bd10      	pop	{r4, pc}
 80058e4:	40021000 	.word	0x40021000
 80058e8:	48001000 	.word	0x48001000
 80058ec:	10210000 	.word	0x10210000

080058f0 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80058f0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 80058f2:	4b14      	ldr	r3, [pc, #80]	@ (8005944 <BSP_LED_Init+0x54>)
{
 80058f4:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 80058f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058f8:	b9d0      	cbnz	r0, 8005930 <BSP_LED_Init+0x40>
 80058fa:	f042 0210 	orr.w	r2, r2, #16
 80058fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800590a:	4b0f      	ldr	r3, [pc, #60]	@ (8005948 <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800590c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8005910:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005914:	6850      	ldr	r0, [r2, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005916:	2201      	movs	r2, #1
 8005918:	e9cd 1203 	strd	r1, r2, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591c:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800591e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005920:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005922:	e9cd 4305 	strd	r4, r3, [sp, #20]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005926:	f002 fa17 	bl	8007d58 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
}
 800592a:	4620      	mov	r0, r4
 800592c:	b008      	add	sp, #32
 800592e:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 8005930:	f042 0208 	orr.w	r2, r2, #8
 8005934:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	9302      	str	r3, [sp, #8]
 800593e:	9b02      	ldr	r3, [sp, #8]
 8005940:	e7e3      	b.n	800590a <BSP_LED_Init+0x1a>
 8005942:	bf00      	nop
 8005944:	40021000 	.word	0x40021000
 8005948:	0801544c 	.word	0x0801544c

0800594c <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800594c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800594e:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <BSP_LED_On+0x18>)
 8005950:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005954:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8005958:	6850      	ldr	r0, [r2, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f002 fbd4 	bl	8008108 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 8005960:	2000      	movs	r0, #0
 8005962:	bd08      	pop	{r3, pc}
 8005964:	0801544c 	.word	0x0801544c

08005968 <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8005968:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800596a:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <BSP_LED_Off+0x18>)
 800596c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005970:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8005974:	6850      	ldr	r0, [r2, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f002 fbc6 	bl	8008108 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 800597c:	2000      	movs	r0, #0
 800597e:	bd08      	pop	{r3, pc}
 8005980:	0801544c 	.word	0x0801544c

08005984 <Sensor_IO_SPI_CS_Init_All>:
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005984:	4b2e      	ldr	r3, [pc, #184]	@ (8005a40 <Sensor_IO_SPI_CS_Init_All+0xbc>)
{
 8005986:	b5f0      	push	{r4, r5, r6, r7, lr}
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005988:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();

  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 800598a:	4d2e      	ldr	r5, [pc, #184]	@ (8005a44 <Sensor_IO_SPI_CS_Init_All+0xc0>)
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 800598c:	4c2e      	ldr	r4, [pc, #184]	@ (8005a48 <Sensor_IO_SPI_CS_Init_All+0xc4>)
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 800598e:	f041 0108 	orr.w	r1, r1, #8
 8005992:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8005994:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
{
 8005996:	b08b      	sub	sp, #44	@ 0x2c
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005998:	f000 0008 	and.w	r0, r0, #8
 800599c:	9001      	str	r0, [sp, #4]
 800599e:	9801      	ldr	r0, [sp, #4]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 80059a0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80059a2:	f040 0020 	orr.w	r0, r0, #32
 80059a6:	64d8      	str	r0, [r3, #76]	@ 0x4c
 80059a8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80059aa:	f000 0020 	and.w	r0, r0, #32
 80059ae:	9002      	str	r0, [sp, #8]
 80059b0:	9802      	ldr	r0, [sp, #8]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80059b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80059b4:	f040 0020 	orr.w	r0, r0, #32
 80059b8:	64d8      	str	r0, [r3, #76]	@ 0x4c
 80059ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80059c2:	4628      	mov	r0, r5
 80059c4:	2201      	movs	r2, #1
 80059c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80059ca:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80059cc:	f002 fb9c 	bl	8008108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 80059d0:	4620      	mov	r0, r4
 80059d2:	2201      	movs	r2, #1
 80059d4:	2120      	movs	r1, #32
 80059d6:	f002 fb97 	bl	8008108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN,GPIO_PIN_SET);
 80059da:	4620      	mov	r0, r4
 80059dc:	2201      	movs	r2, #1
 80059de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80059e2:	f002 fb91 	bl	8008108 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;

  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 80059e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80059ea:	2301      	movs	r3, #1
 80059ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 80059f0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 80059f2:	2303      	movs	r3, #3
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 80059f4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 80059f6:	2200      	movs	r2, #0
 80059f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 80059fc:	f002 f9ac 	bl	8007d58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005a00:	4628      	mov	r0, r5
 8005a02:	2201      	movs	r2, #1
 8005a04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a08:	f002 fb7e 	bl	8008108 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8005a0c:	2720      	movs	r7, #32
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8005a0e:	a904      	add	r1, sp, #16
 8005a10:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8005a12:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8005a14:	f002 f9a0 	bl	8007d58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f002 fb73 	bl	8008108 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8005a22:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8005a2a:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8005a2c:	f002 f994 	bl	8007d58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN,GPIO_PIN_SET);
 8005a30:	4620      	mov	r0, r4
 8005a32:	2201      	movs	r2, #1
 8005a34:	4631      	mov	r1, r6
 8005a36:	f002 fb67 	bl	8008108 <HAL_GPIO_WritePin>

  return 0;
}
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	b00b      	add	sp, #44	@ 0x2c
 8005a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a40:	40021000 	.word	0x40021000
 8005a44:	48000c00 	.word	0x48000c00
 8005a48:	48001400 	.word	0x48001400

08005a4c <BSP_BC_CmdSend>:
* @param stbc02_SwCmd The command to be sent
* @retval 0 in case of success
* @retval 1 in case of failure
*/
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4604      	mov	r4, r0
  uint32_t tk = STBC02_GetTick();
 8005a50:	f001 fbf6 	bl	8007240 <HAL_GetTick>
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005a54:	4d0d      	ldr	r5, [pc, #52]	@ (8005a8c <BSP_BC_CmdSend+0x40>)
  uint32_t tk = STBC02_GetTick();
 8005a56:	4606      	mov	r6, r0
  stbc02_SwState = start;
 8005a58:	2301      	movs	r3, #1
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005a5a:	f105 0050 	add.w	r0, r5, #80	@ 0x50
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005a5e:	f885 404c 	strb.w	r4, [r5, #76]	@ 0x4c
  stbc02_SwState = start;
 8005a62:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005a66:	f006 fecb 	bl	800c800 <HAL_TIM_Base_Start_IT>
  
  while(stbc02_SwState != idle)
 8005a6a:	e004      	b.n	8005a76 <BSP_BC_CmdSend+0x2a>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8005a6c:	f001 fbe8 	bl	8007240 <HAL_GetTick>
 8005a70:	1b80      	subs	r0, r0, r6
 8005a72:	280a      	cmp	r0, #10
 8005a74:	d808      	bhi.n	8005a88 <BSP_BC_CmdSend+0x3c>
  while(stbc02_SwState != idle)
 8005a76:	f895 404d 	ldrb.w	r4, [r5, #77]	@ 0x4d
 8005a7a:	2c00      	cmp	r4, #0
 8005a7c:	d1f6      	bne.n	8005a6c <BSP_BC_CmdSend+0x20>
    {
      return 1;
    }
  }
  /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 8005a7e:	4804      	ldr	r0, [pc, #16]	@ (8005a90 <BSP_BC_CmdSend+0x44>)
 8005a80:	f006 fefc 	bl	800c87c <HAL_TIM_Base_Stop_IT>
  
  return 0;
 8005a84:	4620      	mov	r0, r4
}
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8005a88:	2001      	movs	r0, #1
}
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	20002978 	.word	0x20002978
 8005a90:	200029c8 	.word	0x200029c8

08005a94 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8005a94:	b510      	push	{r4, lr}
  /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005a96:	2002      	movs	r0, #2
{
 8005a98:	b094      	sub	sp, #80	@ 0x50
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005a9a:	f7ff fe4d 	bl	8005738 <BSP_ADC1_Initialization>
* @retval 0 in case of success
* @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005a9e:	2234      	movs	r2, #52	@ 0x34
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	a807      	add	r0, sp, #28
 8005aa4:	f00d fd85 	bl	80135b2 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8005aa8:	4824      	ldr	r0, [pc, #144]	@ (8005b3c <BSP_BC_BatMS_Init+0xa8>)
 8005aaa:	f001 fcbb 	bl	8007424 <HAL_ADC_GetState>
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 8005aae:	05c4      	lsls	r4, r0, #23
 8005ab0:	d436      	bmi.n	8005b20 <BSP_BC_BatMS_Init+0x8c>
 8005ab2:	4c23      	ldr	r4, [pc, #140]	@ (8005b40 <BSP_BC_BatMS_Init+0xac>)
  }
  
  
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8005ab4:	4923      	ldr	r1, [pc, #140]	@ (8005b44 <BSP_BC_BatMS_Init+0xb0>)
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	e9cd 1207 	strd	r1, r2, [sp, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8005abc:	2007      	movs	r0, #7
 8005abe:	227f      	movs	r2, #127	@ 0x7f
 8005ac0:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8005ac4:	2204      	movs	r2, #4
  sConfigInjected.InjectedOffset = 0;
 8005ac6:	2300      	movs	r3, #0
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8005ac8:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8005aca:	2201      	movs	r2, #1
 8005acc:	e9cd 320c 	strd	r3, r2, [sp, #48]	@ 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8005ad0:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b48 <BSP_BC_BatMS_Init+0xb4>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005ada:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  sConfigInjected.QueueInjectedContext = DISABLE;
 8005ade:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 8005ae2:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ae6:	9306      	str	r3, [sp, #24]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005ae8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005aea:	4818      	ldr	r0, [pc, #96]	@ (8005b4c <BSP_BC_BatMS_Init+0xb8>)
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005aec:	f043 0304 	orr.w	r3, r3, #4
 8005af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005af2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8005afa:	2210      	movs	r2, #16
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005afc:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8005afe:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8005b00:	230b      	movs	r3, #11
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005b02:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8005b04:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005b06:	f002 f927 	bl	8007d58 <HAL_GPIO_Init>
  
  HAL_ADC_BC_MspInit();
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 8005b0a:	480c      	ldr	r0, [pc, #48]	@ (8005b3c <BSP_BC_BatMS_Init+0xa8>)
 8005b0c:	a907      	add	r1, sp, #28
 8005b0e:	f001 fe33 	bl	8007778 <HAL_ADCEx_InjectedConfigChannel>
  
  if (ADC_stopped == 1U)
 8005b12:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d00a      	beq.n	8005b30 <BSP_BC_BatMS_Init+0x9c>
}
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	b014      	add	sp, #80	@ 0x50
 8005b1e:	bd10      	pop	{r4, pc}
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8005b20:	4806      	ldr	r0, [pc, #24]	@ (8005b3c <BSP_BC_BatMS_Init+0xa8>)
    ADC_stopped=1;
 8005b22:	4c07      	ldr	r4, [pc, #28]	@ (8005b40 <BSP_BC_BatMS_Init+0xac>)
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8005b24:	f001 fdb8 	bl	8007698 <HAL_ADC_Stop>
    ADC_stopped=1;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f884 30b1 	strb.w	r3, [r4, #177]	@ 0xb1
 8005b2e:	e7c1      	b.n	8005ab4 <BSP_BC_BatMS_Init+0x20>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8005b30:	4802      	ldr	r0, [pc, #8]	@ (8005b3c <BSP_BC_BatMS_Init+0xa8>)
 8005b32:	f001 fd37 	bl	80075a4 <HAL_ADC_Start>
}
 8005b36:	2000      	movs	r0, #0
 8005b38:	b014      	add	sp, #80	@ 0x50
 8005b3a:	bd10      	pop	{r4, pc}
 8005b3c:	2000287c 	.word	0x2000287c
 8005b40:	20002978 	.word	0x20002978
 8005b44:	36902000 	.word	0x36902000
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	48000800 	.word	0x48000800

08005b50 <BC_CmdMng>:
{
 8005b50:	b510      	push	{r4, lr}
  TIMx_Pulse++;
 8005b52:	4c39      	ldr	r4, [pc, #228]	@ (8005c38 <BC_CmdMng+0xe8>)
 8005b54:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
  switch (stbc02_SwState)
 8005b58:	f894 204d 	ldrb.w	r2, [r4, #77]	@ 0x4d
  TIMx_Pulse++;
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	b29b      	uxth	r3, r3
  switch (stbc02_SwState)
 8005b60:	3a01      	subs	r2, #1
  TIMx_Pulse++;
 8005b62:	f8a4 30b2 	strh.w	r3, [r4, #178]	@ 0xb2
  switch (stbc02_SwState)
 8005b66:	2a05      	cmp	r2, #5
 8005b68:	d814      	bhi.n	8005b94 <BC_CmdMng+0x44>
 8005b6a:	e8df f002 	tbb	[pc, r2]
 8005b6e:	0314      	.short	0x0314
 8005b70:	36250303 	.word	0x36250303
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005b74:	2140      	movs	r1, #64	@ 0x40
 8005b76:	4831      	ldr	r0, [pc, #196]	@ (8005c3c <BC_CmdMng+0xec>)
 8005b78:	f002 facc 	bl	8008114 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005b7c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005b80:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005b84:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005b88:	3314      	adds	r3, #20
    stbc02_SwState = wait;
 8005b8a:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005b8c:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
    stbc02_SwState = wait;
 8005b90:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
}
 8005b94:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005b96:	2140      	movs	r1, #64	@ 0x40
 8005b98:	4828      	ldr	r0, [pc, #160]	@ (8005c3c <BC_CmdMng+0xec>)
 8005b9a:	f002 fabb 	bl	8008114 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005b9e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005ba2:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005ba6:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    stbc02_SwState = wait;
 8005baa:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005bac:	3346      	adds	r3, #70	@ 0x46
    stbc02_SwState = wait;
 8005bae:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005bb2:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
}
 8005bb6:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005bb8:	2140      	movs	r1, #64	@ 0x40
 8005bba:	4820      	ldr	r0, [pc, #128]	@ (8005c3c <BC_CmdMng+0xec>)
 8005bbc:	f002 faaa 	bl	8008114 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005bc0:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005bc4:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005bc8:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    stbc02_SwState = wait;
 8005bcc:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005bce:	3364      	adds	r3, #100	@ 0x64
    stbc02_SwState = wait;
 8005bd0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005bd4:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
}
 8005bd8:	bd10      	pop	{r4, pc}
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8005bda:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	@ 0xb4
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d2d8      	bcs.n	8005b94 <BC_CmdMng+0x44>
      if ( stbc02_sw_state_prv == stop_h )
 8005be2:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8005be6:	2b05      	cmp	r3, #5
 8005be8:	d016      	beq.n	8005c18 <BC_CmdMng+0xc8>
        if ( stbc02_sw_state_prv == pulse_h )
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d005      	beq.n	8005bfa <BC_CmdMng+0xaa>
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1U);
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        __NOP();
 8005bf6:	bf00      	nop
}
 8005bf8:	bd10      	pop	{r4, pc}
          CmdPulse++;
 8005bfa:	f894 30b7 	ldrb.w	r3, [r4, #183]	@ 0xb7
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005bfe:	f894 204c 	ldrb.w	r2, [r4, #76]	@ 0x4c
          CmdPulse++;
 8005c02:	3301      	adds	r3, #1
 8005c04:	b2db      	uxtb	r3, r3
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005c06:	429a      	cmp	r2, r3
          CmdPulse++;
 8005c08:	f884 30b7 	strb.w	r3, [r4, #183]	@ 0xb7
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005c0c:	d90f      	bls.n	8005c2e <BC_CmdMng+0xde>
            stbc02_sw_state_prv = start;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 8005c14:	2302      	movs	r3, #2
 8005c16:	e7ec      	b.n	8005bf2 <BC_CmdMng+0xa2>
        CmdPulse = 0;
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f884 20b7 	strb.w	r2, [r4, #183]	@ 0xb7
        stbc02_SwState = idle;
 8005c1e:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
}
 8005c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005c26:	4805      	ldr	r0, [pc, #20]	@ (8005c3c <BC_CmdMng+0xec>)
 8005c28:	2140      	movs	r1, #64	@ 0x40
 8005c2a:	f002 ba6d 	b.w	8008108 <HAL_GPIO_WritePin>
            __NOP();
 8005c2e:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1U);
 8005c30:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8005c34:	e7db      	b.n	8005bee <BC_CmdMng+0x9e>
 8005c36:	bf00      	nop
 8005c38:	20002978 	.word	0x20002978
 8005c3c:	48001400 	.word	0x48001400

08005c40 <BC_TIMx_Init>:
{
 8005c40:	b530      	push	{r4, r5, lr}
 8005c42:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c44:	2300      	movs	r3, #0
 8005c46:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005c4a:	9303      	str	r3, [sp, #12]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005c4c:	f004 f8ee 	bl	8009e2c <HAL_RCC_GetPCLK1Freq>
 8005c50:	4b23      	ldr	r3, [pc, #140]	@ (8005ce0 <BC_TIMx_Init+0xa0>)
  float prescaler = 0.0f;
 8005c52:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005ce4 <BC_TIMx_Init+0xa4>
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005c56:	689b      	ldr	r3, [r3, #8]
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005c58:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8005ce8 <BC_TIMx_Init+0xa8>
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005c5c:	055b      	lsls	r3, r3, #21
 8005c5e:	bf48      	it	mi
 8005c60:	0040      	lslmi	r0, r0, #1
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005c62:	ee07 0a90 	vmov	s15, r0
 8005c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
    prescaler++;
 8005c6a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005c6e:	ee37 7a06 	vadd.f32	s14, s14, s12
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c76:	ee67 7aa5 	vmul.f32	s15, s15, s11
    loop_counter = (uint32_t) period;
 8005c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7e:	ee17 3a90 	vmov	r3, s15
  } while (loop_counter > 65535U);
 8005c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c86:	d2f2      	bcs.n	8005c6e <BC_TIMx_Init+0x2e>
    STBC02_USED_TIM_CLK_ENABLE();
 8005c88:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <BC_TIMx_Init+0xa0>)
  hstbc02_UsedTim.Instance = STBC02_USED_TIM; 
 8005c8a:	4c18      	ldr	r4, [pc, #96]	@ (8005cec <BC_TIMx_Init+0xac>)
    STBC02_USED_TIM_CLK_ENABLE();
 8005c8c:	6d91      	ldr	r1, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Period = (uint32_t)period;
 8005c8e:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
    STBC02_USED_TIM_CLK_ENABLE();
 8005c92:	f041 0120 	orr.w	r1, r1, #32
 8005c96:	6591      	str	r1, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005c98:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    STBC02_USED_TIM_CLK_ENABLE();
 8005c9c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005c9e:	ee17 3a10 	vmov	r3, s14
    STBC02_USED_TIM_CLK_ENABLE();
 8005ca2:	f002 0220 	and.w	r2, r2, #32
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP; 
 8005ca6:	2500      	movs	r5, #0
    STBC02_USED_TIM_CLK_ENABLE();
 8005ca8:	9200      	str	r2, [sp, #0]
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005caa:	3b01      	subs	r3, #1
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005cac:	462a      	mov	r2, r5
 8005cae:	2103      	movs	r1, #3
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005cb0:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005cb2:	2037      	movs	r0, #55	@ 0x37
    STBC02_USED_TIM_CLK_ENABLE();
 8005cb4:	9b00      	ldr	r3, [sp, #0]
  hstbc02_UsedTim.Instance = STBC02_USED_TIM; 
 8005cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf0 <BC_TIMx_Init+0xb0>)
 8005cb8:	6523      	str	r3, [r4, #80]	@ 0x50
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP; 
 8005cba:	65a5      	str	r5, [r4, #88]	@ 0x58
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005cbc:	f001 ffdc 	bl	8007c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8005cc0:	2037      	movs	r0, #55	@ 0x37
 8005cc2:	f002 f815 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 8005cc6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cca:	f006 fd0b 	bl	800c6e4 <HAL_TIM_Base_Init>
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005cce:	a901      	add	r1, sp, #4
 8005cd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cd4:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cd6:	9503      	str	r5, [sp, #12]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005cd8:	f006 fea8 	bl	800ca2c <HAL_TIMEx_MasterConfigSynchronization>
}
 8005cdc:	b005      	add	sp, #20
 8005cde:	bd30      	pop	{r4, r5, pc}
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	00000000 	.word	0x00000000
 8005ce8:	36a7c5ac 	.word	0x36a7c5ac
 8005cec:	20002978 	.word	0x20002978
 8005cf0:	40001400 	.word	0x40001400

08005cf4 <BSP_BC_Init>:
{
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	b088      	sub	sp, #32
  BC_TIMx_Init();
 8005cf8:	f7ff ffa2 	bl	8005c40 <BC_TIMx_Init>
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8005d38 <BSP_BC_Init+0x44>)
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005cfe:	4c0f      	ldr	r4, [pc, #60]	@ (8005d3c <BSP_BC_Init+0x48>)
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005d00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d02:	f042 0220 	orr.w	r2, r2, #32
 8005d06:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 8005d10:	2240      	movs	r2, #64	@ 0x40
 8005d12:	2301      	movs	r3, #1
 8005d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005d20:	4620      	mov	r0, r4
 8005d22:	2200      	movs	r2, #0
 8005d24:	2140      	movs	r1, #64	@ 0x40
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005d26:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005d28:	f002 f9ee 	bl	8008108 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 8005d2c:	a902      	add	r1, sp, #8
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f002 f812 	bl	8007d58 <HAL_GPIO_Init>
}
 8005d34:	b008      	add	sp, #32
 8005d36:	bd10      	pop	{r4, pc}
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	48001400 	.word	0x48001400

08005d40 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
  //HAL_EXTI_IRQHandler(&iis3dwb_exti);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005d40:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005d44:	f002 b9f0 	b.w	8008128 <HAL_GPIO_EXTI_IRQHandler>

08005d48 <TIM7_IRQHandler>:
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 8005d48:	4801      	ldr	r0, [pc, #4]	@ (8005d50 <TIM7_IRQHandler+0x8>)
 8005d4a:	f006 bdb7 	b.w	800c8bc <HAL_TIM_IRQHandler>
 8005d4e:	bf00      	nop
 8005d50:	200029c8 	.word	0x200029c8

08005d54 <TIM3_IRQHandler>:
* @param  None
* @retval None
*/
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimBCHandle);
 8005d54:	4801      	ldr	r0, [pc, #4]	@ (8005d5c <TIM3_IRQHandler+0x8>)
 8005d56:	f006 bdb1 	b.w	800c8bc <HAL_TIM_IRQHandler>
 8005d5a:	bf00      	nop
 8005d5c:	20002978 	.word	0x20002978

08005d60 <BSP_I2C2_DeInit>:
static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
  UNUSED(i2cHandle);
  
  /* Peripheral clock disable */
  __HAL_RCC_I2C2_CLK_DISABLE();
 8005d60:	4a09      	ldr	r2, [pc, #36]	@ (8005d88 <BSP_I2C2_DeInit+0x28>)
  
  /**I2C2 GPIO Configuration    
  PF1     ------> I2C2_SCL
  PF0     ------> I2C2_SDA 
  */
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8005d62:	480a      	ldr	r0, [pc, #40]	@ (8005d8c <BSP_I2C2_DeInit+0x2c>)
{
 8005d64:	b508      	push	{r3, lr}
  __HAL_RCC_I2C2_CLK_DISABLE();
 8005d66:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005d68:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8005d6c:	2103      	movs	r1, #3
  __HAL_RCC_I2C2_CLK_DISABLE();
 8005d6e:	6593      	str	r3, [r2, #88]	@ 0x58
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8005d70:	f002 f916 	bl	8007fa0 <HAL_GPIO_DeInit>
  if (HAL_I2C_DeInit(&hi2c2) == HAL_OK)
 8005d74:	4806      	ldr	r0, [pc, #24]	@ (8005d90 <BSP_I2C2_DeInit+0x30>)
 8005d76:	f002 fafb 	bl	8008370 <HAL_I2C_DeInit>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8005d7a:	2800      	cmp	r0, #0
}
 8005d7c:	bf14      	ite	ne
 8005d7e:	f06f 0007 	mvnne.w	r0, #7
 8005d82:	2000      	moveq	r0, #0
 8005d84:	bd08      	pop	{r3, pc}
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	48001400 	.word	0x48001400
 8005d90:	20002a7c 	.word	0x20002a7c

08005d94 <BSP_I2C2_WriteReg>:
{
 8005d94:	b500      	push	{lr}
 8005d96:	b085      	sub	sp, #20
 8005d98:	4684      	mov	ip, r0
  if(HAL_I2C_Mem_Write(&hi2c2, (uint8_t)DevAddr,
 8005d9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d9e:	e9cd 2300 	strd	r2, r3, [sp]
 8005da2:	9002      	str	r0, [sp, #8]
 8005da4:	460a      	mov	r2, r1
 8005da6:	2301      	movs	r3, #1
 8005da8:	fa5f f18c 	uxtb.w	r1, ip
 8005dac:	4805      	ldr	r0, [pc, #20]	@ (8005dc4 <BSP_I2C2_WriteReg+0x30>)
 8005dae:	f002 faf9 	bl	80083a4 <HAL_I2C_Mem_Write>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8005db2:	2800      	cmp	r0, #0
}
 8005db4:	bf14      	ite	ne
 8005db6:	f06f 0007 	mvnne.w	r0, #7
 8005dba:	2000      	moveq	r0, #0
 8005dbc:	b005      	add	sp, #20
 8005dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dc2:	bf00      	nop
 8005dc4:	20002a7c 	.word	0x20002a7c

08005dc8 <BSP_I2C2_ReadReg>:
{
 8005dc8:	b500      	push	{lr}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	4684      	mov	ip, r0
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, (uint16_t)Reg,
 8005dce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005dd2:	e9cd 2300 	strd	r2, r3, [sp]
 8005dd6:	9002      	str	r0, [sp, #8]
 8005dd8:	460a      	mov	r2, r1
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4661      	mov	r1, ip
 8005dde:	4805      	ldr	r0, [pc, #20]	@ (8005df4 <BSP_I2C2_ReadReg+0x2c>)
 8005de0:	f002 fc08 	bl	80085f4 <HAL_I2C_Mem_Read>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8005de4:	2800      	cmp	r0, #0
}
 8005de6:	bf14      	ite	ne
 8005de8:	f06f 0007 	mvnne.w	r0, #7
 8005dec:	2000      	moveq	r0, #0
 8005dee:	b005      	add	sp, #20
 8005df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005df4:	20002a7c 	.word	0x20002a7c

08005df8 <BSP_SPI3_DeInit>:
  __HAL_RCC_SPI3_CLK_DISABLE();
 8005df8:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <BSP_SPI3_DeInit+0x28>)
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 8005dfa:	480a      	ldr	r0, [pc, #40]	@ (8005e24 <BSP_SPI3_DeInit+0x2c>)
{
 8005dfc:	b508      	push	{r3, lr}
  __HAL_RCC_SPI3_CLK_DISABLE();
 8005dfe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005e00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 8005e04:	2128      	movs	r1, #40	@ 0x28
  __HAL_RCC_SPI3_CLK_DISABLE();
 8005e06:	6593      	str	r3, [r2, #88]	@ 0x58
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 8005e08:	f002 f8ca 	bl	8007fa0 <HAL_GPIO_DeInit>
  if (HAL_SPI_DeInit(&hbusspi3) == HAL_OK) 
 8005e0c:	4806      	ldr	r0, [pc, #24]	@ (8005e28 <BSP_SPI3_DeInit+0x30>)
 8005e0e:	f006 f81f 	bl	800be50 <HAL_SPI_DeInit>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8005e12:	2800      	cmp	r0, #0
}
 8005e14:	bf14      	ite	ne
 8005e16:	f06f 0007 	mvnne.w	r0, #7
 8005e1a:	2000      	moveq	r0, #0
 8005e1c:	bd08      	pop	{r3, pc}
 8005e1e:	bf00      	nop
 8005e20:	40021000 	.word	0x40021000
 8005e24:	48000400 	.word	0x48000400
 8005e28:	20002c28 	.word	0x20002c28

08005e2c <BSP_SPI3_Send>:
{
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8005e34:	4601      	mov	r1, r0
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005e36:	4622      	mov	r2, r4
 8005e38:	4804      	ldr	r0, [pc, #16]	@ (8005e4c <BSP_SPI3_Send+0x20>)
 8005e3a:	f006 f81f 	bl	800be7c <HAL_SPI_Transmit>
      ret = (int32_t)len;
 8005e3e:	2800      	cmp	r0, #0
}
 8005e40:	bf0c      	ite	eq
 8005e42:	4620      	moveq	r0, r4
 8005e44:	f06f 0005 	mvnne.w	r0, #5
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20002c28 	.word	0x20002c28

08005e50 <BSP_SPI3_Recv>:
{
 8005e50:	b510      	push	{r4, lr}
 8005e52:	460c      	mov	r4, r1
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005e54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8005e58:	4601      	mov	r1, r0
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	4804      	ldr	r0, [pc, #16]	@ (8005e70 <BSP_SPI3_Recv+0x20>)
 8005e5e:	f006 fab3 	bl	800c3c8 <HAL_SPI_Receive>
      ret = (int32_t)len;
 8005e62:	2800      	cmp	r0, #0
}
 8005e64:	bf0c      	ite	eq
 8005e66:	4620      	moveq	r0, r4
 8005e68:	f06f 0005 	mvnne.w	r0, #5
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	bf00      	nop
 8005e70:	20002c28 	.word	0x20002c28

08005e74 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005e74:	f001 b9e4 	b.w	8007240 <HAL_GetTick>

08005e78 <MX_SPI3_Init>:
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005e78:	4913      	ldr	r1, [pc, #76]	@ (8005ec8 <MX_SPI3_Init+0x50>)
 8005e7a:	f44f 7282 	mov.w	r2, #260	@ 0x104
{
 8005e7e:	b510      	push	{r4, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e9c0 1200 	strd	r1, r2, [r0]
 8005e86:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	e9c0 3102 	strd	r3, r1, [r0, #8]
 8005e90:	6102      	str	r2, [r0, #16]
 8005e92:	2101      	movs	r1, #1
 8005e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e98:	e9c0 1205 	strd	r1, r2, [r0, #20]
 8005e9c:	2207      	movs	r2, #7
{
 8005e9e:	4604      	mov	r4, r0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005ea0:	2118      	movs	r1, #24
 8005ea2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005ea4:	2208      	movs	r2, #8
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005ea6:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005eaa:	e9c0 320c 	strd	r3, r2, [r0, #48]	@ 0x30
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005eae:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005eb2:	f005 ff4f 	bl	800bd54 <HAL_SPI_Init>
  __HAL_SPI_ENABLE(hspi);
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	6813      	ldr	r3, [r2, #0]
}
 8005eba:	3800      	subs	r0, #0
  __HAL_SPI_ENABLE(hspi);
 8005ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
}
 8005ec0:	bf18      	it	ne
 8005ec2:	2001      	movne	r0, #1
  __HAL_SPI_ENABLE(hspi);
 8005ec4:	6013      	str	r3, [r2, #0]
}
 8005ec6:	bd10      	pop	{r4, pc}
 8005ec8:	40003c00 	.word	0x40003c00

08005ecc <BSP_SPI3_Init>:
{
 8005ecc:	b510      	push	{r4, lr}
  hbusspi3.Instance  = SPI3;
 8005ece:	4b1b      	ldr	r3, [pc, #108]	@ (8005f3c <BSP_SPI3_Init+0x70>)
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f40 <BSP_SPI3_Init+0x74>)
 8005ed2:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 8005ed6:	f503 74fc 	add.w	r4, r3, #504	@ 0x1f8
{
 8005eda:	b088      	sub	sp, #32
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 8005edc:	4620      	mov	r0, r4
 8005ede:	f006 fbfb 	bl	800c6d8 <HAL_SPI_GetState>
 8005ee2:	b110      	cbz	r0, 8005eea <BSP_SPI3_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8005ee4:	2000      	movs	r0, #0
}
 8005ee6:	b008      	add	sp, #32
 8005ee8:	bd10      	pop	{r4, pc}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8005eea:	4b16      	ldr	r3, [pc, #88]	@ (8005f44 <BSP_SPI3_Init+0x78>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eec:	4816      	ldr	r0, [pc, #88]	@ (8005f48 <BSP_SPI3_Init+0x7c>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8005eee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ef0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ef4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ef6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ef8:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8005efc:	9200      	str	r2, [sp, #0]
 8005efe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f02:	f042 0202 	orr.w	r2, r2, #2
 8005f06:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005f10:	2238      	movs	r2, #56	@ 0x38
 8005f12:	2302      	movs	r3, #2
 8005f14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f20:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005f22:	2306      	movs	r3, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f24:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005f26:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f28:	f001 ff16 	bl	8007d58 <HAL_GPIO_Init>
    if (MX_SPI3_Init(&hbusspi3) != HAL_OK)
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f7ff ffa3 	bl	8005e78 <MX_SPI3_Init>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d0d6      	beq.n	8005ee4 <BSP_SPI3_Init+0x18>
      ret = BSP_ERROR_BUS_FAILURE;
 8005f36:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005f3a:	e7d4      	b.n	8005ee6 <BSP_SPI3_Init+0x1a>
 8005f3c:	20002a30 	.word	0x20002a30
 8005f40:	40003c00 	.word	0x40003c00
 8005f44:	40021000 	.word	0x40021000
 8005f48:	48000400 	.word	0x48000400

08005f4c <MX_I2C2_Init>:
  hi2c->Init.Timing = 0x00B03FDB;
 8005f4c:	4a11      	ldr	r2, [pc, #68]	@ (8005f94 <MX_I2C2_Init+0x48>)
 8005f4e:	4b12      	ldr	r3, [pc, #72]	@ (8005f98 <MX_I2C2_Init+0x4c>)
{
 8005f50:	b570      	push	{r4, r5, r6, lr}
  hi2c->Init.Timing = 0x00B03FDB;
 8005f52:	2600      	movs	r6, #0
 8005f54:	e9c0 2300 	strd	r2, r3, [r0]
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e9c0 6302 	strd	r6, r3, [r0, #8]
 8005f5e:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8005f62:	e9c0 6606 	strd	r6, r6, [r0, #24]
 8005f66:	6206      	str	r6, [r0, #32]
{
 8005f68:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8005f6a:	f002 f9ab 	bl	80082c4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005f6e:	4631      	mov	r1, r6
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8005f70:	4605      	mov	r5, r0
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005f72:	4620      	mov	r0, r4
 8005f74:	f002 fc6e 	bl	8008854 <HAL_I2CEx_ConfigAnalogFilter>
 8005f78:	4305      	orrs	r5, r0
 8005f7a:	b2ed      	uxtb	r5, r5
 8005f7c:	1bad      	subs	r5, r5, r6
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4620      	mov	r0, r4
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005f82:	bf18      	it	ne
 8005f84:	2501      	movne	r5, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8005f86:	f002 fc8f 	bl	80088a8 <HAL_I2CEx_ConfigDigitalFilter>
    ret = HAL_ERROR;
 8005f8a:	42b0      	cmp	r0, r6
}
 8005f8c:	bf0c      	ite	eq
 8005f8e:	4628      	moveq	r0, r5
 8005f90:	2001      	movne	r0, #1
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	40005800 	.word	0x40005800
 8005f98:	00b03fdb 	.word	0x00b03fdb

08005f9c <BSP_I2C2_Init>:
{
 8005f9c:	b570      	push	{r4, r5, r6, lr}
  hi2c2.Instance  = I2C2;
 8005f9e:	4d2c      	ldr	r5, [pc, #176]	@ (8006050 <BSP_I2C2_Init+0xb4>)
 8005fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8006054 <BSP_I2C2_Init+0xb8>)
 8005fa2:	f845 3f4c 	str.w	r3, [r5, #76]!
{
 8005fa6:	b0ae      	sub	sp, #184	@ 0xb8
  if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f002 fc4f 	bl	800884c <HAL_I2C_GetState>
 8005fae:	b110      	cbz	r0, 8005fb6 <BSP_I2C2_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8005fb0:	2000      	movs	r0, #0
}
 8005fb2:	b02e      	add	sp, #184	@ 0xb8
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
  __GPIOF_CLK_ENABLE();
 8005fb6:	4e28      	ldr	r6, [pc, #160]	@ (8006058 <BSP_I2C2_Init+0xbc>)
 8005fb8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005fba:	2380      	movs	r3, #128	@ 0x80
  (void)HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8005fbc:	a807      	add	r0, sp, #28
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005fbe:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005fc0:	941d      	str	r4, [sp, #116]	@ 0x74
  (void)HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8005fc2:	f004 f909 	bl	800a1d8 <HAL_RCCEx_PeriphCLKConfig>
  __GPIOF_CLK_ENABLE();
 8005fc6:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005fc8:	4824      	ldr	r0, [pc, #144]	@ (800605c <BSP_I2C2_Init+0xc0>)
  __GPIOF_CLK_ENABLE();
 8005fca:	f043 0320 	orr.w	r3, r3, #32
 8005fce:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8005fd0:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005fd8:	2203      	movs	r2, #3
 8005fda:	2312      	movs	r3, #18
 8005fdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005fe8:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005fea:	2304      	movs	r3, #4
 8005fec:	9306      	str	r3, [sp, #24]
  __GPIOF_CLK_ENABLE();
 8005fee:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005ff0:	f001 feb2 	bl	8007d58 <HAL_GPIO_Init>
  __HAL_RCC_I2C2_CLK_ENABLE();  
 8005ff4:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8005ff6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ffa:	65b3      	str	r3, [r6, #88]	@ 0x58
 8005ffc:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8005ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	9b01      	ldr	r3, [sp, #4]
  __I2C2_FORCE_RESET();
 8006006:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8006008:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800600c:	63b3      	str	r3, [r6, #56]	@ 0x38
  __I2C2_RELEASE_RESET();
 800600e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8006010:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006014:	63b3      	str	r3, [r6, #56]	@ 0x38
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8006016:	4622      	mov	r2, r4
 8006018:	4621      	mov	r1, r4
 800601a:	2021      	movs	r0, #33	@ 0x21
 800601c:	f001 fe2c 	bl	8007c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006020:	2021      	movs	r0, #33	@ 0x21
 8006022:	f001 fe65 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8006026:	4621      	mov	r1, r4
 8006028:	4622      	mov	r2, r4
 800602a:	2022      	movs	r0, #34	@ 0x22
 800602c:	f001 fe24 	bl	8007c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006030:	2022      	movs	r0, #34	@ 0x22
 8006032:	f001 fe5d 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
    if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8006036:	4628      	mov	r0, r5
 8006038:	f7ff ff88 	bl	8005f4c <MX_I2C2_Init>
 800603c:	4601      	mov	r1, r0
 800603e:	b920      	cbnz	r0, 800604a <BSP_I2C2_Init+0xae>
    else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8006040:	4628      	mov	r0, r5
 8006042:	f002 fc07 	bl	8008854 <HAL_I2CEx_ConfigAnalogFilter>
 8006046:	2800      	cmp	r0, #0
 8006048:	d0b2      	beq.n	8005fb0 <BSP_I2C2_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 800604a:	f06f 0007 	mvn.w	r0, #7
 800604e:	e7b0      	b.n	8005fb2 <BSP_I2C2_Init+0x16>
 8006050:	20002a30 	.word	0x20002a30
 8006054:	40005800 	.word	0x40005800
 8006058:	40021000 	.word	0x40021000
 800605c:	48001400 	.word	0x48001400

08006060 <BSP_HTS221_WriteReg>:
}

#if (USE_ENV_SENSOR_HTS221_0 == 1)

int32_t BSP_HTS221_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006060:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  
  if (BSP_I2C2_WriteReg(Addr, dataReg, pdata, len) != BSP_ERROR_NONE)
 8006062:	f7ff fe97 	bl	8005d94 <BSP_I2C2_WriteReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006066:	2800      	cmp	r0, #0
  }
  
  
  return ret;
}
 8006068:	bf18      	it	ne
 800606a:	f06f 0007 	mvnne.w	r0, #7
 800606e:	bd08      	pop	{r3, pc}

08006070 <BSP_HTS221_ReadReg>:


int32_t BSP_HTS221_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006070:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  dataReg |= 0x80U;
  
  if (BSP_I2C2_ReadReg(Addr, dataReg, pdata, len) !=BSP_ERROR_NONE)
 8006072:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006076:	f7ff fea7 	bl	8005dc8 <BSP_I2C2_ReadReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800607a:	2800      	cmp	r0, #0
  }
  
  
  return ret;
}
 800607c:	bf18      	it	ne
 800607e:	f06f 0007 	mvnne.w	r0, #7
 8006082:	bd08      	pop	{r3, pc}

08006084 <BSP_ENV_SENSOR_Init>:
{
 8006084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch (Instance)
 8006088:	2801      	cmp	r0, #1
{
 800608a:	b08c      	sub	sp, #48	@ 0x30
 800608c:	4604      	mov	r4, r0
 800608e:	460d      	mov	r5, r1
  switch (Instance)
 8006090:	d009      	beq.n	80060a6 <BSP_ENV_SENSOR_Init+0x22>
 8006092:	2802      	cmp	r0, #2
 8006094:	f000 80dd 	beq.w	8006252 <BSP_ENV_SENSOR_Init+0x1ce>
 8006098:	2800      	cmp	r0, #0
 800609a:	d07b      	beq.n	8006194 <BSP_ENV_SENSOR_Init+0x110>
 800609c:	f06f 0001 	mvn.w	r0, #1
}
 80060a0:	b00c      	add	sp, #48	@ 0x30
 80060a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LPS22HH_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
  io_ctx.Init        = BSP_I2C2_Init;
 80060a6:	4bbe      	ldr	r3, [pc, #760]	@ (80063a0 <BSP_ENV_SENSOR_Init+0x31c>)
 80060a8:	9305      	str	r3, [sp, #20]
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80060aa:	2300      	movs	r3, #0
 80060ac:	9307      	str	r3, [sp, #28]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80060ae:	4bbd      	ldr	r3, [pc, #756]	@ (80063a4 <BSP_ENV_SENSOR_Init+0x320>)
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80060b0:	4fbd      	ldr	r7, [pc, #756]	@ (80063a8 <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80060b2:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 80060b4:	4bbd      	ldr	r3, [pc, #756]	@ (80063ac <BSP_ENV_SENSOR_Init+0x328>)
 80060b6:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 80060b8:	4bbd      	ldr	r3, [pc, #756]	@ (80063b0 <BSP_ENV_SENSOR_Init+0x32c>)
 80060ba:	9309      	str	r3, [sp, #36]	@ 0x24
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80060bc:	ae05      	add	r6, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 80060be:	4bbd      	ldr	r3, [pc, #756]	@ (80063b4 <BSP_ENV_SENSOR_Init+0x330>)
 80060c0:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80060c2:	f107 0a2c 	add.w	sl, r7, #44	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80060c6:	23bb      	movs	r3, #187	@ 0xbb
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80060c8:	4631      	mov	r1, r6
 80060ca:	4650      	mov	r0, sl
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80060cc:	f88d 3020 	strb.w	r3, [sp, #32]
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80060d0:	f7fe fe0c 	bl	8004cec <LPS22HH_RegisterBusIO>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f040 81c6 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80060da:	f10d 0103 	add.w	r1, sp, #3
 80060de:	4650      	mov	r0, sl
 80060e0:	f7fe fbd6 	bl	8004890 <LPS22HH_ReadID>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	f040 81be 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HH_ID)
 80060ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80060ee:	2bb3      	cmp	r3, #179	@ 0xb3
 80060f0:	f040 81b9 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 80060f4:	a901      	add	r1, sp, #4
 80060f6:	4650      	mov	r0, sl
 80060f8:	f7fe fb56 	bl	80047a8 <LPS22HH_GetCapabilities>
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
                                   uint32_t)cap.Humidity << 2);
 80060fc:	f89d 0006 	ldrb.w	r0, [sp, #6]
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006100:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8006104:	f89d 2004 	ldrb.w	r2, [sp, #4]

    EnvCompObj[LPS22HH_0] = &lps22hh_obj_0;
 8006108:	f8c7 a098 	str.w	sl, [r7, #152]	@ 0x98
                                   uint32_t)cap.Humidity << 2);
 800610c:	0083      	lsls	r3, r0, #2
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800610e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006118:	f005 0804 	and.w	r8, r5, #4
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800611c:	4ba6      	ldr	r3, [pc, #664]	@ (80063b8 <BSP_ENV_SENSOR_Init+0x334>)
 800611e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006122:	f005 0902 	and.w	r9, r5, #2

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8006126:	f015 0501 	ands.w	r5, r5, #1
 800612a:	f040 80fe 	bne.w	800632a <BSP_ENV_SENSOR_Init+0x2a6>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800612e:	f1b9 0f00 	cmp.w	r9, #0
 8006132:	f040 81a8 	bne.w	8006486 <BSP_ENV_SENSOR_Init+0x402>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006136:	f1b8 0f00 	cmp.w	r8, #0
 800613a:	f040 81b1 	bne.w	80064a0 <BSP_ENV_SENSOR_Init+0x41c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
 800613e:	489f      	ldr	r0, [pc, #636]	@ (80063bc <BSP_ENV_SENSOR_Init+0x338>)
 8006140:	4b9d      	ldr	r3, [pc, #628]	@ (80063b8 <BSP_ENV_SENSOR_Init+0x334>)
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4631      	mov	r1, r6
 8006146:	4798      	blx	r3
 8006148:	2800      	cmp	r0, #0
 800614a:	f040 81f0 	bne.w	800652e <BSP_ENV_SENSOR_Init+0x4aa>
      if (cap.Temperature == 1U)
 800614e:	f89d 6014 	ldrb.w	r6, [sp, #20]
      if (cap.Humidity == 1U)
 8006152:	f89d 3016 	ldrb.w	r3, [sp, #22]
      if (cap.Temperature == 1U)
 8006156:	f1a6 0601 	sub.w	r6, r6, #1
      if (cap.Humidity == 1U)
 800615a:	2b01      	cmp	r3, #1
      if (cap.Temperature == 1U)
 800615c:	fab6 f686 	clz	r6, r6
      if (cap.Pressure == 1U)
 8006160:	f89d 3015 	ldrb.w	r3, [sp, #21]
      if (cap.Temperature == 1U)
 8006164:	ea4f 1656 	mov.w	r6, r6, lsr #5
        component_functions |= ENV_HUMIDITY;
 8006168:	bf08      	it	eq
 800616a:	f046 0604 	orreq.w	r6, r6, #4
      if (cap.Pressure == 1U)
 800616e:	2b01      	cmp	r3, #1
        component_functions |= ENV_PRESSURE;
 8006170:	bf08      	it	eq
 8006172:	f046 0602 	orreq.w	r6, r6, #2
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006176:	2d00      	cmp	r5, #0
 8006178:	f040 8134 	bne.w	80063e4 <BSP_ENV_SENSOR_Init+0x360>
 800617c:	f1b9 0f00 	cmp.w	r9, #0
 8006180:	f040 8145 	bne.w	800640e <BSP_ENV_SENSOR_Init+0x38a>
 8006184:	f1b8 0f00 	cmp.w	r8, #0
 8006188:	f040 8156 	bne.w	8006438 <BSP_ENV_SENSOR_Init+0x3b4>
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 800618c:	2000      	movs	r0, #0
}
 800618e:	b00c      	add	sp, #48	@ 0x30
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  io_ctx.Init        = BSP_I2C2_Init;
 8006194:	4b82      	ldr	r3, [pc, #520]	@ (80063a0 <BSP_ENV_SENSOR_Init+0x31c>)
 8006196:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006198:	4b82      	ldr	r3, [pc, #520]	@ (80063a4 <BSP_ENV_SENSOR_Init+0x320>)
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800619a:	4f83      	ldr	r7, [pc, #524]	@ (80063a8 <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800619c:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_HTS221_ReadReg;
 800619e:	4b88      	ldr	r3, [pc, #544]	@ (80063c0 <BSP_ENV_SENSOR_Init+0x33c>)
 80061a0:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80061a2:	ae05      	add	r6, sp, #20
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
 80061a4:	4b87      	ldr	r3, [pc, #540]	@ (80063c4 <BSP_ENV_SENSOR_Init+0x340>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80061a6:	9007      	str	r0, [sp, #28]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80061a8:	22bf      	movs	r2, #191	@ 0xbf
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
 80061aa:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80061ac:	4631      	mov	r1, r6
  io_ctx.GetTick     = BSP_GetTick;
 80061ae:	4b81      	ldr	r3, [pc, #516]	@ (80063b4 <BSP_ENV_SENSOR_Init+0x330>)
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80061b0:	f88d 2020 	strb.w	r2, [sp, #32]
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80061b4:	4638      	mov	r0, r7
  io_ctx.GetTick     = BSP_GetTick;
 80061b6:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80061b8:	f7fb fde4 	bl	8001d84 <HTS221_RegisterBusIO>
 80061bc:	2800      	cmp	r0, #0
 80061be:	f040 8152 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80061c2:	f10d 0103 	add.w	r1, sp, #3
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7fb fc88 	bl	8001adc <HTS221_ReadID>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	f040 814a 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  else if (id != HTS221_ID)
 80061d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80061d6:	2bbc      	cmp	r3, #188	@ 0xbc
 80061d8:	f040 8145 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80061dc:	a901      	add	r1, sp, #4
 80061de:	4638      	mov	r0, r7
 80061e0:	f7fb fbd2 	bl	8001988 <HTS221_GetCapabilities>
                                   uint32_t)cap.Humidity << 2);
 80061e4:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80061e8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80061ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
    EnvCompObj[HTS221_0] = &hts221_obj_0;
 80061f0:	f8c7 7094 	str.w	r7, [r7, #148]	@ 0x94
                                   uint32_t)cap.Humidity << 2);
 80061f4:	008b      	lsls	r3, r1, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80061f6:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006200:	f005 0804 	and.w	r8, r5, #4
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8006204:	4b70      	ldr	r3, [pc, #448]	@ (80063c8 <BSP_ENV_SENSOR_Init+0x344>)
 8006206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800620a:	f005 0902 	and.w	r9, r5, #2
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800620e:	f015 0501 	ands.w	r5, r5, #1
 8006212:	f000 80b4 	beq.w	800637e <BSP_ENV_SENSOR_Init+0x2fa>
 8006216:	2a01      	cmp	r2, #1
 8006218:	f000 8148 	beq.w	80064ac <BSP_ENV_SENSOR_Init+0x428>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800621c:	f1b8 0f00 	cmp.w	r8, #0
 8006220:	f000 811d 	beq.w	800645e <BSP_ENV_SENSOR_Init+0x3da>
 8006224:	2901      	cmp	r1, #1
 8006226:	f040 80b0 	bne.w	800638a <BSP_ENV_SENSOR_Init+0x306>
 800622a:	485f      	ldr	r0, [pc, #380]	@ (80063a8 <BSP_ENV_SENSOR_Init+0x324>)
 800622c:	4b66      	ldr	r3, [pc, #408]	@ (80063c8 <BSP_ENV_SENSOR_Init+0x344>)
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800622e:	4a67      	ldr	r2, [pc, #412]	@ (80063cc <BSP_ENV_SENSOR_Init+0x348>)
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8006230:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8006232:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8006236:	4798      	blx	r3
 8006238:	2800      	cmp	r0, #0
 800623a:	f040 8114 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800623e:	f1b9 0f00 	cmp.w	r9, #0
 8006242:	f000 80a7 	beq.w	8006394 <BSP_ENV_SENSOR_Init+0x310>
 8006246:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800624a:	2b00      	cmp	r3, #0
 800624c:	f040 80a2 	bne.w	8006394 <BSP_ENV_SENSOR_Init+0x310>
 8006250:	e109      	b.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
  io_ctx.Init        = BSP_I2C2_Init;
 8006252:	4b53      	ldr	r3, [pc, #332]	@ (80063a0 <BSP_ENV_SENSOR_Init+0x31c>)
 8006254:	9305      	str	r3, [sp, #20]
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8006256:	2300      	movs	r3, #0
 8006258:	9307      	str	r3, [sp, #28]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800625a:	4b52      	ldr	r3, [pc, #328]	@ (80063a4 <BSP_ENV_SENSOR_Init+0x320>)
  io_ctx.ReadReg     = BSP_I2C2_ReadReg; 
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800625c:	4f52      	ldr	r7, [pc, #328]	@ (80063a8 <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800625e:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg; 
 8006260:	4b52      	ldr	r3, [pc, #328]	@ (80063ac <BSP_ENV_SENSOR_Init+0x328>)
 8006262:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8006264:	4b52      	ldr	r3, [pc, #328]	@ (80063b0 <BSP_ENV_SENSOR_Init+0x32c>)
 8006266:	9309      	str	r3, [sp, #36]	@ 0x24
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006268:	ae05      	add	r6, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 800626a:	4b52      	ldr	r3, [pc, #328]	@ (80063b4 <BSP_ENV_SENSOR_Init+0x330>)
 800626c:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800626e:	f107 0a58 	add.w	sl, r7, #88	@ 0x58
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
 8006272:	2391      	movs	r3, #145	@ 0x91
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006274:	4631      	mov	r1, r6
 8006276:	4650      	mov	r0, sl
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
 8006278:	f88d 3020 	strb.w	r3, [sp, #32]
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800627c:	f7ff f934 	bl	80054e8 <STTS751_RegisterBusIO>
 8006280:	2800      	cmp	r0, #0
 8006282:	f040 80f0 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8006286:	f10d 0103 	add.w	r1, sp, #3
 800628a:	4650      	mov	r0, sl
 800628c:	f7fe ff18 	bl	80050c0 <STTS751_ReadID>
 8006290:	2800      	cmp	r0, #0
 8006292:	f040 80e8 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != STTS751_ID_MAN)
 8006296:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800629a:	2b53      	cmp	r3, #83	@ 0x53
 800629c:	f040 80e3 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80062a0:	a901      	add	r1, sp, #4
 80062a2:	4650      	mov	r0, sl
 80062a4:	f7fe fea4 	bl	8004ff0 <STTS751_GetCapabilities>

    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
                                            uint32_t)cap.Humidity << 2);
 80062a8:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80062ac:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80062b0:	f89d 2004 	ldrb.w	r2, [sp, #4]

    EnvCompObj[STTS751_0] = &stts751_obj_0;
 80062b4:	f8c7 a09c 	str.w	sl, [r7, #156]	@ 0x9c
                                            uint32_t)cap.Humidity << 2);
 80062b8:	008b      	lsls	r3, r1, #2
    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80062ba:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80062c4:	f005 0804 	and.w	r8, r5, #4
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80062c8:	4b41      	ldr	r3, [pc, #260]	@ (80063d0 <BSP_ENV_SENSOR_Init+0x34c>)
 80062ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80062ce:	f005 0902 	and.w	r9, r5, #2

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80062d2:	f015 0501 	ands.w	r5, r5, #1
 80062d6:	d10c      	bne.n	80062f2 <BSP_ENV_SENSOR_Init+0x26e>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80062d8:	f1b8 0f00 	cmp.w	r8, #0
 80062dc:	f040 80c9 	bne.w	8006472 <BSP_ENV_SENSOR_Init+0x3ee>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80062e0:	f1b9 0f00 	cmp.w	r9, #0
 80062e4:	d002      	beq.n	80062ec <BSP_ENV_SENSOR_Init+0x268>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	f000 80bd 	beq.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
 80062ec:	4839      	ldr	r0, [pc, #228]	@ (80063d4 <BSP_ENV_SENSOR_Init+0x350>)
 80062ee:	4b38      	ldr	r3, [pc, #224]	@ (80063d0 <BSP_ENV_SENSOR_Init+0x34c>)
 80062f0:	e727      	b.n	8006142 <BSP_ENV_SENSOR_Init+0xbe>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80062f2:	2a01      	cmp	r2, #1
 80062f4:	d1f0      	bne.n	80062d8 <BSP_ENV_SENSOR_Init+0x254>
      EnvFuncDrv[STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80062f6:	4a38      	ldr	r2, [pc, #224]	@ (80063d8 <BSP_ENV_SENSOR_Init+0x354>)
      if (EnvDrv[STTS751_0]->Init(EnvCompObj[STTS751_0]) != STTS751_OK)
 80062f8:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80062fa:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
      if (EnvDrv[STTS751_0]->Init(EnvCompObj[STTS751_0]) != STTS751_OK)
 80062fe:	4650      	mov	r0, sl
 8006300:	4798      	blx	r3
 8006302:	2800      	cmp	r0, #0
 8006304:	f040 80af 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006308:	f1b8 0f00 	cmp.w	r8, #0
 800630c:	f040 8101 	bne.w	8006512 <BSP_ENV_SENSOR_Init+0x48e>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006310:	f1b9 0f00 	cmp.w	r9, #0
 8006314:	d004      	beq.n	8006320 <BSP_ENV_SENSOR_Init+0x29c>
 8006316:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80a3 	beq.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006324:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8006328:	e70b      	b.n	8006142 <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800632a:	2a01      	cmp	r2, #1
 800632c:	f47f aeff 	bne.w	800612e <BSP_ENV_SENSOR_Init+0xaa>
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8006330:	4a2a      	ldr	r2, [pc, #168]	@ (80063dc <BSP_ENV_SENSOR_Init+0x358>)
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8006332:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8006334:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8006338:	4650      	mov	r0, sl
 800633a:	4798      	blx	r3
 800633c:	2800      	cmp	r0, #0
 800633e:	f000 80ca 	beq.w	80064d6 <BSP_ENV_SENSOR_Init+0x452>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8006342:	f1b9 0f00 	cmp.w	r9, #0
 8006346:	f000 808e 	beq.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
 800634a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800634e:	2b01      	cmp	r3, #1
 8006350:	f040 8089 	bne.w	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8006354:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006358:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800635c:	4a20      	ldr	r2, [pc, #128]	@ (80063e0 <BSP_ENV_SENSOR_Init+0x35c>)
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 800635e:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8006360:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8006364:	4798      	blx	r3
 8006366:	2800      	cmp	r0, #0
 8006368:	d17d      	bne.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 800636a:	f1b8 0f00 	cmp.w	r8, #0
 800636e:	f000 8092 	beq.w	8006496 <BSP_ENV_SENSOR_Init+0x412>
 8006372:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 808d 	bne.w	8006496 <BSP_ENV_SENSOR_Init+0x412>
 800637c:	e073      	b.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800637e:	f1b8 0f00 	cmp.w	r8, #0
 8006382:	d06c      	beq.n	800645e <BSP_ENV_SENSOR_Init+0x3da>
 8006384:	2901      	cmp	r1, #1
 8006386:	f000 808f 	beq.w	80064a8 <BSP_ENV_SENSOR_Init+0x424>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800638a:	f1b9 0f00 	cmp.w	r9, #0
 800638e:	d06d      	beq.n	800646c <BSP_ENV_SENSOR_Init+0x3e8>
 8006390:	2800      	cmp	r0, #0
 8006392:	d068      	beq.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006394:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006398:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800639c:	e6d1      	b.n	8006142 <BSP_ENV_SENSOR_Init+0xbe>
 800639e:	bf00      	nop
 80063a0:	08005f9d 	.word	0x08005f9d
 80063a4:	08005d61 	.word	0x08005d61
 80063a8:	20002d1c 	.word	0x20002d1c
 80063ac:	08005dc9 	.word	0x08005dc9
 80063b0:	08005d95 	.word	0x08005d95
 80063b4:	08005e75 	.word	0x08005e75
 80063b8:	200001ac 	.word	0x200001ac
 80063bc:	20002d48 	.word	0x20002d48
 80063c0:	08006071 	.word	0x08006071
 80063c4:	08006061 	.word	0x08006061
 80063c8:	20000080 	.word	0x20000080
 80063cc:	2000006c 	.word	0x2000006c
 80063d0:	200001d0 	.word	0x200001d0
 80063d4:	20002d74 	.word	0x20002d74
 80063d8:	200001bc 	.word	0x200001bc
 80063dc:	20000184 	.word	0x20000184
 80063e0:	20000198 	.word	0x20000198
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80063e4:	07f1      	lsls	r1, r6, #31
 80063e6:	f57f aec9 	bpl.w	800617c <BSP_ENV_SENSOR_Init+0xf8>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80063ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80063ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80063f2:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 80063f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063fa:	f8d2 0094 	ldr.w	r0, [r2, #148]	@ 0x94
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4798      	blx	r3
 8006402:	2800      	cmp	r0, #0
 8006404:	f43f aeba 	beq.w	800617c <BSP_ENV_SENSOR_Init+0xf8>
        return BSP_ERROR_COMPONENT_FAILURE;
 8006408:	f06f 0004 	mvn.w	r0, #4
 800640c:	e648      	b.n	80060a0 <BSP_ENV_SENSOR_Init+0x1c>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800640e:	07b2      	lsls	r2, r6, #30
 8006410:	f57f aeb8 	bpl.w	8006184 <BSP_ENV_SENSOR_Init+0x100>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8006414:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8006418:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
 800641c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006420:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4798      	blx	r3
 800642c:	2800      	cmp	r0, #0
 800642e:	d1eb      	bne.n	8006408 <BSP_ENV_SENSOR_Init+0x384>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006430:	f1b8 0f00 	cmp.w	r8, #0
 8006434:	f43f aeaa 	beq.w	800618c <BSP_ENV_SENSOR_Init+0x108>
 8006438:	0773      	lsls	r3, r6, #29
 800643a:	f57f aea7 	bpl.w	800618c <BSP_ENV_SENSOR_Init+0x108>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800643e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006442:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006446:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 800644a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800644e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4798      	blx	r3
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f ae98 	beq.w	800618c <BSP_ENV_SENSOR_Init+0x108>
 800645c:	e7d4      	b.n	8006408 <BSP_ENV_SENSOR_Init+0x384>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800645e:	f1b9 0f00 	cmp.w	r9, #0
 8006462:	d003      	beq.n	800646c <BSP_ENV_SENSOR_Init+0x3e8>
 8006464:	b910      	cbnz	r0, 800646c <BSP_ENV_SENSOR_Init+0x3e8>
        return BSP_ERROR_NO_INIT;
 8006466:	f04f 30ff 	mov.w	r0, #4294967295
 800646a:	e619      	b.n	80060a0 <BSP_ENV_SENSOR_Init+0x1c>
  return ret;
 800646c:	4831      	ldr	r0, [pc, #196]	@ (8006534 <BSP_ENV_SENSOR_Init+0x4b0>)
 800646e:	4b32      	ldr	r3, [pc, #200]	@ (8006538 <BSP_ENV_SENSOR_Init+0x4b4>)
 8006470:	e667      	b.n	8006142 <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006472:	2900      	cmp	r1, #0
 8006474:	d0f7      	beq.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006476:	f1b9 0f00 	cmp.w	r9, #0
 800647a:	f43f af37 	beq.w	80062ec <BSP_ENV_SENSOR_Init+0x268>
 800647e:	2800      	cmp	r0, #0
 8006480:	f47f af4e 	bne.w	8006320 <BSP_ENV_SENSOR_Init+0x29c>
 8006484:	e7ef      	b.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8006486:	2901      	cmp	r1, #1
 8006488:	d023      	beq.n	80064d2 <BSP_ENV_SENSOR_Init+0x44e>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 800648a:	f1b8 0f00 	cmp.w	r8, #0
 800648e:	f43f ae56 	beq.w	800613e <BSP_ENV_SENSOR_Init+0xba>
 8006492:	2800      	cmp	r0, #0
 8006494:	d0e7      	beq.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800649a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800649e:	e650      	b.n	8006142 <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f47f ae4c 	bne.w	800613e <BSP_ENV_SENSOR_Init+0xba>
 80064a6:	e7de      	b.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80064a8:	4638      	mov	r0, r7
 80064aa:	e6c0      	b.n	800622e <BSP_ENV_SENSOR_Init+0x1aa>
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80064ac:	4a23      	ldr	r2, [pc, #140]	@ (800653c <BSP_ENV_SENSOR_Init+0x4b8>)
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 80064ae:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80064b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 80064b4:	4638      	mov	r0, r7
 80064b6:	4798      	blx	r3
 80064b8:	b1e0      	cbz	r0, 80064f4 <BSP_ENV_SENSOR_Init+0x470>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80064ba:	f1b8 0f00 	cmp.w	r8, #0
 80064be:	d0d2      	beq.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
 80064c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d1ce      	bne.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 80064c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064cc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80064d0:	e6ad      	b.n	800622e <BSP_ENV_SENSOR_Init+0x1aa>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80064d2:	4650      	mov	r0, sl
 80064d4:	e742      	b.n	800635c <BSP_ENV_SENSOR_Init+0x2d8>
 80064d6:	f1b9 0f00 	cmp.w	r9, #0
 80064da:	f43f af46 	beq.w	800636a <BSP_ENV_SENSOR_Init+0x2e6>
 80064de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	f43f af36 	beq.w	8006354 <BSP_ENV_SENSOR_Init+0x2d0>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80064e8:	f1b8 0f00 	cmp.w	r8, #0
 80064ec:	d0d3      	beq.n	8006496 <BSP_ENV_SENSOR_Init+0x412>
 80064ee:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80064f2:	e7ce      	b.n	8006492 <BSP_ENV_SENSOR_Init+0x40e>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80064f4:	f1b8 0f00 	cmp.w	r8, #0
 80064f8:	f43f aea1 	beq.w	800623e <BSP_ENV_SENSOR_Init+0x1ba>
 80064fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d0e1      	beq.n	80064c8 <BSP_ENV_SENSOR_Init+0x444>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006504:	f1b9 0f00 	cmp.w	r9, #0
 8006508:	f43f af44 	beq.w	8006394 <BSP_ENV_SENSOR_Init+0x310>
 800650c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8006510:	e73e      	b.n	8006390 <BSP_ENV_SENSOR_Init+0x30c>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006512:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0a5      	beq.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800651a:	f1b9 0f00 	cmp.w	r9, #0
 800651e:	f43f aeff 	beq.w	8006320 <BSP_ENV_SENSOR_Init+0x29c>
 8006522:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8006526:	2800      	cmp	r0, #0
 8006528:	f47f aefa 	bne.w	8006320 <BSP_ENV_SENSOR_Init+0x29c>
 800652c:	e79b      	b.n	8006466 <BSP_ENV_SENSOR_Init+0x3e2>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800652e:	f06f 0006 	mvn.w	r0, #6
 8006532:	e5b5      	b.n	80060a0 <BSP_ENV_SENSOR_Init+0x1c>
 8006534:	20002d1c 	.word	0x20002d1c
 8006538:	20000080 	.word	0x20000080
 800653c:	20000058 	.word	0x20000058

08006540 <BSP_ENV_SENSOR_SetOutputDataRate>:
  if (Instance >= ENV_INSTANCES_NBR)
 8006540:	2802      	cmp	r0, #2
 8006542:	d81f      	bhi.n	8006584 <BSP_ENV_SENSOR_SetOutputDataRate+0x44>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8006544:	4a11      	ldr	r2, [pc, #68]	@ (800658c <BSP_ENV_SENSOR_SetOutputDataRate+0x4c>)
 8006546:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
{
 800654a:	b508      	push	{r3, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800654c:	f8dc 3088 	ldr.w	r3, [ip, #136]	@ 0x88
 8006550:	ea01 0e03 	and.w	lr, r1, r3
 8006554:	4399      	bics	r1, r3
 8006556:	d112      	bne.n	800657e <BSP_ENV_SENSOR_SetOutputDataRate+0x3e>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006558:	490d      	ldr	r1, [pc, #52]	@ (8006590 <BSP_ENV_SENSOR_SetOutputDataRate+0x50>)
 800655a:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 800655e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006562:	440b      	add	r3, r1
 8006564:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006568:	f8dc 0094 	ldr.w	r0, [ip, #148]	@ 0x94
 800656c:	f8d2 30ac 	ldr.w	r3, [r2, #172]	@ 0xac
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006574:	2800      	cmp	r0, #0
 8006576:	bf18      	it	ne
 8006578:	f06f 0004 	mvnne.w	r0, #4
}
 800657c:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800657e:	f06f 0001 	mvn.w	r0, #1
}
 8006582:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006584:	f06f 0001 	mvn.w	r0, #1
}
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20002d1c 	.word	0x20002d1c
 8006590:	08015458 	.word	0x08015458

08006594 <BSP_IIS2DH_WriteReg>:

  return ret;
}

static int32_t BSP_IIS2DH_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006594:	b530      	push	{r4, r5, lr}
 8006596:	461c      	mov	r4, r3
 8006598:	b083      	sub	sp, #12
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;
 800659a:	b2cb      	uxtb	r3, r1

  if (len > 1U)
 800659c:	2c01      	cmp	r4, #1
{
 800659e:	4615      	mov	r5, r2
  {
    dataReg |= 0x40U;
 80065a0:	bf88      	it	hi
 80065a2:	f043 0340 	orrhi.w	r3, r3, #64	@ 0x40
  }
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 80065a6:	2200      	movs	r2, #0
 80065a8:	4810      	ldr	r0, [pc, #64]	@ (80065ec <BSP_IIS2DH_WriteReg+0x58>)
  uint8_t dataReg = (uint8_t)Reg;
 80065aa:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 80065ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065b2:	f001 fda9 	bl	8008108 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 80065b6:	2101      	movs	r1, #1
 80065b8:	f10d 0007 	add.w	r0, sp, #7
 80065bc:	f7ff fc36 	bl	8005e2c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 80065c0:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 80065c2:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 80065c4:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 80065c6:	bf14      	ite	ne
 80065c8:	f06f 0505 	mvnne.w	r5, #5
 80065cc:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 80065ce:	f7ff fc2d 	bl	8005e2c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80065d2:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80065d4:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80065d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065da:	4804      	ldr	r0, [pc, #16]	@ (80065ec <BSP_IIS2DH_WriteReg+0x58>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80065dc:	bf18      	it	ne
 80065de:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80065e2:	f001 fd91 	bl	8008108 <HAL_GPIO_WritePin>

  return ret;
}
 80065e6:	4628      	mov	r0, r5
 80065e8:	b003      	add	sp, #12
 80065ea:	bd30      	pop	{r4, r5, pc}
 80065ec:	48000c00 	.word	0x48000c00

080065f0 <BSP_IIS3DWB_WriteReg>:

  return ret;
}

static int32_t BSP_IIS3DWB_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80065f0:	b530      	push	{r4, r5, lr}
 80065f2:	b083      	sub	sp, #12
 80065f4:	468c      	mov	ip, r1
 80065f6:	4615      	mov	r5, r2
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80065f8:	4812      	ldr	r0, [pc, #72]	@ (8006644 <BSP_IIS3DWB_WriteReg+0x54>)
  uint8_t dataReg = (uint8_t)Reg;
 80065fa:	f88d c007 	strb.w	ip, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80065fe:	2200      	movs	r2, #0
 8006600:	2120      	movs	r1, #32
{
 8006602:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 8006604:	f001 fd80 	bl	8008108 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8006608:	2101      	movs	r1, #1
 800660a:	f10d 0007 	add.w	r0, sp, #7
 800660e:	f7ff fc0d 	bl	8005e2c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 8006612:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 8006614:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 8006616:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 8006618:	bf14      	ite	ne
 800661a:	f06f 0505 	mvnne.w	r5, #5
 800661e:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 8006620:	f7ff fc04 	bl	8005e2c <BSP_SPI3_Send>
 8006624:	b224      	sxth	r4, r4
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006626:	42a0      	cmp	r0, r4
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006628:	f04f 0201 	mov.w	r2, #1
 800662c:	4805      	ldr	r0, [pc, #20]	@ (8006644 <BSP_IIS3DWB_WriteReg+0x54>)
 800662e:	f04f 0120 	mov.w	r1, #32
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006632:	bf18      	it	ne
 8006634:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006638:	f001 fd66 	bl	8008108 <HAL_GPIO_WritePin>

  return ret;
}
 800663c:	4628      	mov	r0, r5
 800663e:	b003      	add	sp, #12
 8006640:	bd30      	pop	{r4, r5, pc}
 8006642:	bf00      	nop
 8006644:	48001400 	.word	0x48001400

08006648 <BSP_ISM330DHCX_WriteReg>:

  return ret;
}

static int32_t BSP_ISM330DHCX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006648:	b530      	push	{r4, r5, lr}
 800664a:	b083      	sub	sp, #12
 800664c:	468c      	mov	ip, r1
 800664e:	4615      	mov	r5, r2
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8006650:	4811      	ldr	r0, [pc, #68]	@ (8006698 <BSP_ISM330DHCX_WriteReg+0x50>)
  uint8_t dataReg = (uint8_t)Reg;
 8006652:	f88d c007 	strb.w	ip, [sp, #7]
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8006656:	2200      	movs	r2, #0
 8006658:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
 800665c:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 800665e:	f001 fd53 	bl	8008108 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8006662:	2101      	movs	r1, #1
 8006664:	f10d 0007 	add.w	r0, sp, #7
 8006668:	f7ff fbe0 	bl	8005e2c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 800666c:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 800666e:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006670:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 8006672:	bf14      	ite	ne
 8006674:	f06f 0505 	mvnne.w	r5, #5
 8006678:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 800667a:	f7ff fbd7 	bl	8005e2c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800667e:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006680:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006682:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006686:	4804      	ldr	r0, [pc, #16]	@ (8006698 <BSP_ISM330DHCX_WriteReg+0x50>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006688:	bf18      	it	ne
 800668a:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800668e:	f001 fd3b 	bl	8008108 <HAL_GPIO_WritePin>

  return ret;
}
 8006692:	4628      	mov	r0, r5
 8006694:	b003      	add	sp, #12
 8006696:	bd30      	pop	{r4, r5, pc}
 8006698:	48001400 	.word	0x48001400

0800669c <BSP_IIS2DH_ReadReg>:
{
 800669c:	b530      	push	{r4, r5, lr}
  if (len > 1U)
 800669e:	2b01      	cmp	r3, #1
{
 80066a0:	b083      	sub	sp, #12
  uint8_t dataReg = (uint8_t)Reg;
 80066a2:	b2c9      	uxtb	r1, r1
{
 80066a4:	461c      	mov	r4, r3
 80066a6:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 80066a8:	bf94      	ite	ls
 80066aa:	f041 0380 	orrls.w	r3, r1, #128	@ 0x80
    dataReg |= 0x40U;
 80066ae:	f041 03c0 	orrhi.w	r3, r1, #192	@ 0xc0
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 80066b2:	2200      	movs	r2, #0
 80066b4:	4810      	ldr	r0, [pc, #64]	@ (80066f8 <BSP_IIS2DH_ReadReg+0x5c>)
  dataReg |= 0x80U;
 80066b6:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 80066ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066be:	f001 fd23 	bl	8008108 <HAL_GPIO_WritePin>
  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 80066c2:	2101      	movs	r1, #1
 80066c4:	f10d 0007 	add.w	r0, sp, #7
 80066c8:	f7ff fbb0 	bl	8005e2c <BSP_SPI3_Send>
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 80066cc:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 80066ce:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 80066d0:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 80066d2:	bf14      	ite	ne
 80066d4:	f06f 0505 	mvnne.w	r5, #5
 80066d8:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 80066da:	f7ff fbb9 	bl	8005e50 <BSP_SPI3_Recv>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80066de:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80066e0:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80066e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066e6:	4804      	ldr	r0, [pc, #16]	@ (80066f8 <BSP_IIS2DH_ReadReg+0x5c>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80066e8:	bf18      	it	ne
 80066ea:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80066ee:	f001 fd0b 	bl	8008108 <HAL_GPIO_WritePin>
}
 80066f2:	4628      	mov	r0, r5
 80066f4:	b003      	add	sp, #12
 80066f6:	bd30      	pop	{r4, r5, pc}
 80066f8:	48000c00 	.word	0x48000c00

080066fc <BSP_IIS3DWB_ReadReg>:
{
 80066fc:	b530      	push	{r4, r5, lr}
 80066fe:	b083      	sub	sp, #12
  dataReg |= 0x80U;
 8006700:	f061 017f 	orn	r1, r1, #127	@ 0x7f
{
 8006704:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 8006706:	f88d 1007 	strb.w	r1, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 800670a:	2200      	movs	r2, #0
 800670c:	4810      	ldr	r0, [pc, #64]	@ (8006750 <BSP_IIS3DWB_ReadReg+0x54>)
 800670e:	2120      	movs	r1, #32
{
 8006710:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 8006712:	f001 fcf9 	bl	8008108 <HAL_GPIO_WritePin>
  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8006716:	2101      	movs	r1, #1
 8006718:	f10d 0007 	add.w	r0, sp, #7
 800671c:	f7ff fb86 	bl	8005e2c <BSP_SPI3_Send>
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 8006720:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 8006722:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 8006724:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 8006726:	bf14      	ite	ne
 8006728:	f06f 0505 	mvnne.w	r5, #5
 800672c:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 800672e:	f7ff fb8f 	bl	8005e50 <BSP_SPI3_Recv>
 8006732:	b224      	sxth	r4, r4
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006734:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006736:	f04f 0201 	mov.w	r2, #1
 800673a:	4805      	ldr	r0, [pc, #20]	@ (8006750 <BSP_IIS3DWB_ReadReg+0x54>)
 800673c:	f04f 0120 	mov.w	r1, #32
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006740:	bf18      	it	ne
 8006742:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006746:	f001 fcdf 	bl	8008108 <HAL_GPIO_WritePin>
}
 800674a:	4628      	mov	r0, r5
 800674c:	b003      	add	sp, #12
 800674e:	bd30      	pop	{r4, r5, pc}
 8006750:	48001400 	.word	0x48001400

08006754 <BSP_ISM330DHCX_ReadReg>:

static int32_t BSP_ISM330DHCX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006754:	b530      	push	{r4, r5, lr}
 8006756:	b083      	sub	sp, #12
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  dataReg |= 0x80U;
 8006758:	f061 017f 	orn	r1, r1, #127	@ 0x7f
{
 800675c:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 800675e:	f88d 1007 	strb.w	r1, [sp, #7]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8006762:	2200      	movs	r2, #0
 8006764:	4810      	ldr	r0, [pc, #64]	@ (80067a8 <BSP_ISM330DHCX_ReadReg+0x54>)
 8006766:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
 800676a:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 800676c:	f001 fccc 	bl	8008108 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8006770:	2101      	movs	r1, #1
 8006772:	f10d 0007 	add.w	r0, sp, #7
 8006776:	f7ff fb59 	bl	8005e2c <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 800677a:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 800677c:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 800677e:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 8006780:	bf14      	ite	ne
 8006782:	f06f 0505 	mvnne.w	r5, #5
 8006786:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006788:	f7ff fb62 	bl	8005e50 <BSP_SPI3_Recv>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800678c:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800678e:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006790:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006794:	4804      	ldr	r0, [pc, #16]	@ (80067a8 <BSP_ISM330DHCX_ReadReg+0x54>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006796:	bf18      	it	ne
 8006798:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800679c:	f001 fcb4 	bl	8008108 <HAL_GPIO_WritePin>

  return ret;
}
 80067a0:	4628      	mov	r0, r5
 80067a2:	b003      	add	sp, #12
 80067a4:	bd30      	pop	{r4, r5, pc}
 80067a6:	bf00      	nop
 80067a8:	48001400 	.word	0x48001400

080067ac <BSP_IIS2DH_DeInit>:
{
 80067ac:	b508      	push	{r3, lr}
  if(BSP_SPI3_DeInit() == BSP_ERROR_NONE)
 80067ae:	f7ff fb23 	bl	8005df8 <BSP_SPI3_DeInit>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80067b2:	2800      	cmp	r0, #0
}
 80067b4:	bf18      	it	ne
 80067b6:	f06f 0005 	mvnne.w	r0, #5
 80067ba:	bd08      	pop	{r3, pc}

080067bc <BSP_IIS2DH_Init>:
{
 80067bc:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80067be:	4815      	ldr	r0, [pc, #84]	@ (8006814 <BSP_IIS2DH_Init+0x58>)
{
 80067c0:	b089      	sub	sp, #36	@ 0x24
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80067c2:	2201      	movs	r2, #1
 80067c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80067c8:	f001 fc9e 	bl	8008108 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067cc:	2501      	movs	r5, #1
 80067ce:	2200      	movs	r2, #0
 80067d0:	e9cd 5203 	strd	r5, r2, [sp, #12]
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 80067d4:	4b10      	ldr	r3, [pc, #64]	@ (8006818 <BSP_IIS2DH_Init+0x5c>)
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 80067d6:	480f      	ldr	r0, [pc, #60]	@ (8006814 <BSP_IIS2DH_Init+0x58>)
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80067d8:	2103      	movs	r1, #3
 80067da:	9105      	str	r1, [sp, #20]
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 80067dc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80067de:	f041 0108 	orr.w	r1, r1, #8
 80067e2:	64d9      	str	r1, [r3, #76]	@ 0x4c
 80067e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e6:	f003 0308 	and.w	r3, r3, #8
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 80067ea:	f44f 4400 	mov.w	r4, #32768	@ 0x8000
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 80067ee:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 80067f0:	a902      	add	r1, sp, #8
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 80067f2:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 80067f4:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 80067f6:	f001 faaf 	bl	8007d58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 80067fa:	462a      	mov	r2, r5
 80067fc:	4621      	mov	r1, r4
 80067fe:	4805      	ldr	r0, [pc, #20]	@ (8006814 <BSP_IIS2DH_Init+0x58>)
 8006800:	f001 fc82 	bl	8008108 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8006804:	f7ff fb62 	bl	8005ecc <BSP_SPI3_Init>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006808:	2800      	cmp	r0, #0
}
 800680a:	bf18      	it	ne
 800680c:	f06f 0005 	mvnne.w	r0, #5
 8006810:	b009      	add	sp, #36	@ 0x24
 8006812:	bd30      	pop	{r4, r5, pc}
 8006814:	48000c00 	.word	0x48000c00
 8006818:	40021000 	.word	0x40021000

0800681c <BSP_IIS3DWB_Init>:
{
 800681c:	b570      	push	{r4, r5, r6, lr}
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 800681e:	4c1e      	ldr	r4, [pc, #120]	@ (8006898 <BSP_IIS3DWB_Init+0x7c>)
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 8006820:	481e      	ldr	r0, [pc, #120]	@ (800689c <BSP_IIS3DWB_Init+0x80>)
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 8006822:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006824:	f043 0310 	orr.w	r3, r3, #16
 8006828:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800682a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
{
 800682c:	b088      	sub	sp, #32
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006834:	4b1a      	ldr	r3, [pc, #104]	@ (80068a0 <BSP_IIS3DWB_Init+0x84>)
 8006836:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006838:	2600      	movs	r6, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800683a:	2302      	movs	r3, #2
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 800683c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = BSP_IIS3DWB_INT1_PIN;
 800683e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006842:	e9cd 6304 	strd	r6, r3, [sp, #16]
  GPIO_InitStruct.Pin = BSP_IIS3DWB_INT1_PIN;
 8006846:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006848:	2501      	movs	r5, #1
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 800684a:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 800684c:	f001 fa84 	bl	8007d58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006850:	2201      	movs	r2, #1
 8006852:	4814      	ldr	r0, [pc, #80]	@ (80068a4 <BSP_IIS3DWB_Init+0x88>)
 8006854:	2120      	movs	r1, #32
 8006856:	f001 fc57 	bl	8008108 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800685a:	e9cd 5603 	strd	r5, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800685e:	2303      	movs	r3, #3
 8006860:	9305      	str	r3, [sp, #20]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006862:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8006864:	480f      	ldr	r0, [pc, #60]	@ (80068a4 <BSP_IIS3DWB_Init+0x88>)
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006866:	f043 0320 	orr.w	r3, r3, #32
 800686a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800686c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 800686e:	2420      	movs	r4, #32
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006870:	4023      	ands	r3, r4
 8006872:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8006874:	a902      	add	r1, sp, #8
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006876:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8006878:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 800687a:	f001 fa6d 	bl	8007d58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 800687e:	462a      	mov	r2, r5
 8006880:	4621      	mov	r1, r4
 8006882:	4808      	ldr	r0, [pc, #32]	@ (80068a4 <BSP_IIS3DWB_Init+0x88>)
 8006884:	f001 fc40 	bl	8008108 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8006888:	f7ff fb20 	bl	8005ecc <BSP_SPI3_Init>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800688c:	2800      	cmp	r0, #0
}
 800688e:	bf18      	it	ne
 8006890:	f06f 0005 	mvnne.w	r0, #5
 8006894:	b008      	add	sp, #32
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	40021000 	.word	0x40021000
 800689c:	48001000 	.word	0x48001000
 80068a0:	10110000 	.word	0x10110000
 80068a4:	48001400 	.word	0x48001400

080068a8 <BSP_IIS2MDC_WriteReg>:
{
 80068a8:	b508      	push	{r3, lr}
  if (BSP_I2C2_WriteReg(Addr, dataReg, pdata, len) != BSP_ERROR_NONE)
 80068aa:	f7ff fa73 	bl	8005d94 <BSP_I2C2_WriteReg>
    ret = BSP_ERROR_BUS_FAILURE;
 80068ae:	2800      	cmp	r0, #0
}
 80068b0:	bf18      	it	ne
 80068b2:	f06f 0007 	mvnne.w	r0, #7
 80068b6:	bd08      	pop	{r3, pc}

080068b8 <BSP_IIS2MDC_ReadReg>:
{
 80068b8:	b508      	push	{r3, lr}
  if (BSP_I2C2_ReadReg(Addr, dataReg, pdata, len) !=BSP_ERROR_NONE)
 80068ba:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80068be:	f7ff fa83 	bl	8005dc8 <BSP_I2C2_ReadReg>
    ret = BSP_ERROR_BUS_FAILURE;
 80068c2:	2800      	cmp	r0, #0
}
 80068c4:	bf18      	it	ne
 80068c6:	f06f 0007 	mvnne.w	r0, #7
 80068ca:	bd08      	pop	{r3, pc}

080068cc <BSP_ISM330DHCX_Init>:
{
 80068cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80068ce:	2201      	movs	r2, #1
{
 80068d0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068d2:	2600      	movs	r6, #0
 80068d4:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80068d6:	4823      	ldr	r0, [pc, #140]	@ (8006964 <BSP_ISM330DHCX_Init+0x98>)
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80068d8:	4d23      	ldr	r5, [pc, #140]	@ (8006968 <BSP_ISM330DHCX_Init+0x9c>)
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80068da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80068de:	f001 fc13 	bl	8008108 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068e2:	e9cd 7603 	strd	r7, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80068e6:	2303      	movs	r3, #3
 80068e8:	9305      	str	r3, [sp, #20]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80068ea:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 80068ec:	481d      	ldr	r0, [pc, #116]	@ (8006964 <BSP_ISM330DHCX_Init+0x98>)
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 80068ee:	f043 0320 	orr.w	r3, r3, #32
 80068f2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80068f4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 80068fc:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8006900:	a902      	add	r1, sp, #8
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006902:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8006904:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8006906:	f001 fa27 	bl	8007d58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800690a:	463a      	mov	r2, r7
 800690c:	4621      	mov	r1, r4
 800690e:	4815      	ldr	r0, [pc, #84]	@ (8006964 <BSP_ISM330DHCX_Init+0x98>)
 8006910:	f001 fbfa 	bl	8008108 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8006914:	f7ff fada 	bl	8005ecc <BSP_SPI3_Init>
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 8006918:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800691a:	f043 0320 	orr.w	r3, r3, #32
 800691e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8006920:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006928:	4b10      	ldr	r3, [pc, #64]	@ (800696c <BSP_ISM330DHCX_Init+0xa0>)
 800692a:	9303      	str	r3, [sp, #12]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800692c:	1e04      	subs	r4, r0, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800692e:	f04f 0302 	mov.w	r3, #2
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 8006932:	a902      	add	r1, sp, #8
 8006934:	480b      	ldr	r0, [pc, #44]	@ (8006964 <BSP_ISM330DHCX_Init+0x98>)
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 8006936:	f04f 0210 	mov.w	r2, #16
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800693a:	bf18      	it	ne
 800693c:	f06f 0405 	mvnne.w	r4, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	e9cd 6304 	strd	r6, r3, [sp, #16]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 8006944:	9202      	str	r2, [sp, #8]
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 8006946:	9a01      	ldr	r2, [sp, #4]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 8006948:	f001 fa06 	bl	8007d58 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT2_EXTI_IRQn, BSP_ISM330DHCX_INT2_EXTI_IRQ_PP, BSP_ISM330DHCX_INT2_EXTI_IRQ_SP);
 800694c:	4632      	mov	r2, r6
 800694e:	2107      	movs	r1, #7
 8006950:	200a      	movs	r0, #10
 8006952:	f001 f991 	bl	8007c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT2_EXTI_IRQn);
 8006956:	200a      	movs	r0, #10
 8006958:	f001 f9ca 	bl	8007cf0 <HAL_NVIC_EnableIRQ>
}
 800695c:	4620      	mov	r0, r4
 800695e:	b009      	add	sp, #36	@ 0x24
 8006960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006962:	bf00      	nop
 8006964:	48001400 	.word	0x48001400
 8006968:	40021000 	.word	0x40021000
 800696c:	10110000 	.word	0x10110000

08006970 <BSP_ISM330DHCX_DeInit>:
static int32_t BSP_ISM330DHCX_DeInit(void)
 8006970:	b508      	push	{r3, lr}
 8006972:	f7ff fa41 	bl	8005df8 <BSP_SPI3_DeInit>
 8006976:	2800      	cmp	r0, #0
 8006978:	bf18      	it	ne
 800697a:	f06f 0005 	mvnne.w	r0, #5
 800697e:	bd08      	pop	{r3, pc}

08006980 <BSP_IIS3DWB_DeInit>:
static int32_t BSP_IIS3DWB_DeInit(void)
 8006980:	b508      	push	{r3, lr}
 8006982:	f7ff fa39 	bl	8005df8 <BSP_SPI3_DeInit>
 8006986:	2800      	cmp	r0, #0
 8006988:	bf18      	it	ne
 800698a:	f06f 0005 	mvnne.w	r0, #5
 800698e:	bd08      	pop	{r3, pc}

08006990 <BSP_MOTION_SENSOR_Init>:
{
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	4604      	mov	r4, r0
 8006996:	b091      	sub	sp, #68	@ 0x44
 8006998:	460d      	mov	r5, r1
  switch (Instance)
 800699a:	2803      	cmp	r0, #3
 800699c:	f200 82b0 	bhi.w	8006f00 <BSP_MOTION_SENSOR_Init+0x570>
 80069a0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80069a4:	00ce011d 	.word	0x00ce011d
 80069a8:	0004007f 	.word	0x0004007f
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 80069ac:	4bbd      	ldr	r3, [pc, #756]	@ (8006ca4 <BSP_MOTION_SENSOR_Init+0x314>)
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80069ae:	f8df 8350 	ldr.w	r8, [pc, #848]	@ 8006d00 <BSP_MOTION_SENSOR_Init+0x370>
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 80069b2:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_ISM330DHCX_ReadReg;
 80069b4:	4bbc      	ldr	r3, [pc, #752]	@ (8006ca8 <BSP_MOTION_SENSOR_Init+0x318>)
 80069b6:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 80069b8:	4bbc      	ldr	r3, [pc, #752]	@ (8006cac <BSP_MOTION_SENSOR_Init+0x31c>)
  io_ctx.DeInit      = BSP_ISM330DHCX_DeInit;
 80069ba:	4abd      	ldr	r2, [pc, #756]	@ (8006cb0 <BSP_MOTION_SENSOR_Init+0x320>)
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 80069bc:	9306      	str	r3, [sp, #24]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80069be:	f108 0b88 	add.w	fp, r8, #136	@ 0x88
  io_ctx.GetTick     = BSP_GetTick;
 80069c2:	4bbc      	ldr	r3, [pc, #752]	@ (8006cb4 <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_ISM330DHCX_DeInit;
 80069c4:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 80069c6:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 80069c8:	2201      	movs	r2, #1
  io_ctx.Address     = 0x0;
 80069ca:	2300      	movs	r3, #0
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80069cc:	a902      	add	r1, sp, #8
 80069ce:	4658      	mov	r0, fp
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 80069d0:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = 0x0;
 80069d2:	f88d 3014 	strb.w	r3, [sp, #20]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80069d6:	f7fd fa7d 	bl	8003ed4 <ISM330DHCX_RegisterBusIO>
 80069da:	2800      	cmp	r0, #0
 80069dc:	f040 80ad 	bne.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 80069e0:	f10d 0107 	add.w	r1, sp, #7
 80069e4:	4658      	mov	r0, fp
 80069e6:	f7fc ff47 	bl	8003878 <ISM330DHCX_ReadID>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	f040 80a5 	bne.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  else if (id != ISM330DHCX_ID)
 80069f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80069f4:	2b6b      	cmp	r3, #107	@ 0x6b
 80069f6:	f040 80a0 	bne.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 80069fa:	ae09      	add	r6, sp, #36	@ 0x24
 80069fc:	4631      	mov	r1, r6
 80069fe:	4658      	mov	r0, fp
 8006a00:	f7fc fdbc 	bl	800357c <ISM330DHCX_GetCapabilities>
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006a04:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006a08:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006a0c:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[ISM330DHCX_0] = &ism330dhcx_obj_0;
 8006a10:	f8c8 b0d4 	str.w	fp, [r8, #212]	@ 0xd4
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006a14:	0083      	lsls	r3, r0, #2
 8006a16:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	f8c8 30c4 	str.w	r3, [r8, #196]	@ 0xc4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006a20:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8006a24:	4ba4      	ldr	r3, [pc, #656]	@ (8006cb8 <BSP_MOTION_SENSOR_Init+0x328>)
 8006a26:	f8c8 30e4 	str.w	r3, [r8, #228]	@ 0xe4
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006a2a:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006a2e:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006a32:	d002      	beq.n	8006a3a <BSP_MOTION_SENSOR_Init+0xaa>
 8006a34:	2a01      	cmp	r2, #1
 8006a36:	f000 81be 	beq.w	8006db6 <BSP_MOTION_SENSOR_Init+0x426>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006a3a:	2f00      	cmp	r7, #0
 8006a3c:	f040 8194 	bne.w	8006d68 <BSP_MOTION_SENSOR_Init+0x3d8>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006a40:	f1b9 0f00 	cmp.w	r9, #0
 8006a44:	f040 81b3 	bne.w	8006dae <BSP_MOTION_SENSOR_Init+0x41e>
  return ret;
 8006a48:	489c      	ldr	r0, [pc, #624]	@ (8006cbc <BSP_MOTION_SENSOR_Init+0x32c>)
 8006a4a:	4b9b      	ldr	r3, [pc, #620]	@ (8006cb8 <BSP_MOTION_SENSOR_Init+0x328>)
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4798      	blx	r3
 8006a52:	2800      	cmp	r0, #0
 8006a54:	f040 8237 	bne.w	8006ec6 <BSP_MOTION_SENSOR_Init+0x536>
      if (cap.Acc == 1U)
 8006a58:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
      if (cap.Gyro == 1U)
 8006a5c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
      if (cap.Acc == 1U)
 8006a60:	f1a5 0501 	sub.w	r5, r5, #1
 8006a64:	fab5 f585 	clz	r5, r5
      if (cap.Gyro == 1U)
 8006a68:	2b01      	cmp	r3, #1
      if (cap.Acc == 1U)
 8006a6a:	ea4f 1555 	mov.w	r5, r5, lsr #5
      if (cap.Magneto == 1U)
 8006a6e:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
      if (cap.Acc == 1U)
 8006a72:	ea4f 0545 	mov.w	r5, r5, lsl #1
        component_functions |= MOTION_GYRO;
 8006a76:	bf08      	it	eq
 8006a78:	f045 0501 	orreq.w	r5, r5, #1
      if (cap.Magneto == 1U)
 8006a7c:	2b01      	cmp	r3, #1
        component_functions |= MOTION_MAGNETO;
 8006a7e:	bf08      	it	eq
 8006a80:	f045 0504 	orreq.w	r5, r5, #4
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006a84:	2f00      	cmp	r7, #0
 8006a86:	f040 80f8 	bne.w	8006c7a <BSP_MOTION_SENSOR_Init+0x2ea>
 8006a8a:	f1ba 0f00 	cmp.w	sl, #0
 8006a8e:	f040 8139 	bne.w	8006d04 <BSP_MOTION_SENSOR_Init+0x374>
 8006a92:	f1b9 0f00 	cmp.w	r9, #0
 8006a96:	f040 814a 	bne.w	8006d2e <BSP_MOTION_SENSOR_Init+0x39e>
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8006a9a:	2000      	movs	r0, #0
}
 8006a9c:	b011      	add	sp, #68	@ 0x44
 8006a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  io_ctx.Init        = BSP_IIS3DWB_Init;
 8006aa2:	4b87      	ldr	r3, [pc, #540]	@ (8006cc0 <BSP_MOTION_SENSOR_Init+0x330>)
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006aa4:	f8df 8258 	ldr.w	r8, [pc, #600]	@ 8006d00 <BSP_MOTION_SENSOR_Init+0x370>
  io_ctx.Init        = BSP_IIS3DWB_Init;
 8006aa8:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS3DWB_ReadReg;
 8006aaa:	4b86      	ldr	r3, [pc, #536]	@ (8006cc4 <BSP_MOTION_SENSOR_Init+0x334>)
 8006aac:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_IIS3DWB_WriteReg;
 8006aae:	4b86      	ldr	r3, [pc, #536]	@ (8006cc8 <BSP_MOTION_SENSOR_Init+0x338>)
  io_ctx.DeInit      = BSP_IIS3DWB_DeInit;
 8006ab0:	4a86      	ldr	r2, [pc, #536]	@ (8006ccc <BSP_MOTION_SENSOR_Init+0x33c>)
  io_ctx.WriteReg    = BSP_IIS3DWB_WriteReg;
 8006ab2:	9306      	str	r3, [sp, #24]
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006ab4:	f108 0b58 	add.w	fp, r8, #88	@ 0x58
  io_ctx.GetTick     = BSP_GetTick;
 8006ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8006cb4 <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_IIS3DWB_DeInit;
 8006aba:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006abc:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = IIS3DWB_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006abe:	2201      	movs	r2, #1
  io_ctx.Address     = 0x0;
 8006ac0:	2300      	movs	r3, #0
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006ac2:	a902      	add	r1, sp, #8
 8006ac4:	4658      	mov	r0, fp
  io_ctx.BusType     = IIS3DWB_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006ac6:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = 0x0;
 8006ac8:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006acc:	f7fc fbee 	bl	80032ac <IIS3DWB_RegisterBusIO>
 8006ad0:	bb98      	cbnz	r0, 8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  else if (IIS3DWB_ReadID(&iis3dwb_obj_0, &id) != IIS3DWB_OK)
 8006ad2:	f10d 0107 	add.w	r1, sp, #7
 8006ad6:	4658      	mov	r0, fp
 8006ad8:	f7fc fa64 	bl	8002fa4 <IIS3DWB_ReadID>
 8006adc:	bb68      	cbnz	r0, 8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  else if (id != IIS3DWB_ID)
 8006ade:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006ae2:	2b7b      	cmp	r3, #123	@ 0x7b
 8006ae4:	d129      	bne.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    (void)IIS3DWB_GetCapabilities(&iis3dwb_obj_0, &cap);
 8006ae6:	ae09      	add	r6, sp, #36	@ 0x24
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4658      	mov	r0, fp
 8006aec:	f7fc fa2e 	bl	8002f4c <IIS3DWB_GetCapabilities>
    MotionCtx[IIS3DWB_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006af0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006af4:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006af8:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[IIS3DWB_0] = &iis3dwb_obj_0;
 8006afc:	f8c8 b0d0 	str.w	fp, [r8, #208]	@ 0xd0
    MotionCtx[IIS3DWB_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006b00:	0083      	lsls	r3, r0, #2
 8006b02:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006b06:	430b      	orrs	r3, r1
 8006b08:	f8c8 30c0 	str.w	r3, [r8, #192]	@ 0xc0
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006b0c:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[IIS3DWB_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS3DWB_COMMON_Driver;
 8006b10:	4b6f      	ldr	r3, [pc, #444]	@ (8006cd0 <BSP_MOTION_SENSOR_Init+0x340>)
 8006b12:	f8c8 30e0 	str.w	r3, [r8, #224]	@ 0xe0
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006b16:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006b1a:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006b1e:	d002      	beq.n	8006b26 <BSP_MOTION_SENSOR_Init+0x196>
 8006b20:	2a01      	cmp	r2, #1
 8006b22:	f000 816c 	beq.w	8006dfe <BSP_MOTION_SENSOR_Init+0x46e>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006b26:	2f00      	cmp	r7, #0
 8006b28:	f040 8114 	bne.w	8006d54 <BSP_MOTION_SENSOR_Init+0x3c4>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006b2c:	f1b9 0f00 	cmp.w	r9, #0
 8006b30:	f000 8117 	beq.w	8006d62 <BSP_MOTION_SENSOR_Init+0x3d2>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f040 8114 	bne.w	8006d62 <BSP_MOTION_SENSOR_Init+0x3d2>
        return BSP_ERROR_NO_INIT;
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	e7ad      	b.n	8006a9c <BSP_MOTION_SENSOR_Init+0x10c>
  io_ctx.Init        = BSP_I2C2_Init;
 8006b40:	4b64      	ldr	r3, [pc, #400]	@ (8006cd4 <BSP_MOTION_SENSOR_Init+0x344>)
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006b42:	f8df 81bc 	ldr.w	r8, [pc, #444]	@ 8006d00 <BSP_MOTION_SENSOR_Init+0x370>
  io_ctx.Init        = BSP_I2C2_Init;
 8006b46:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS2MDC_ReadReg;
 8006b48:	4b63      	ldr	r3, [pc, #396]	@ (8006cd8 <BSP_MOTION_SENSOR_Init+0x348>)
 8006b4a:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_IIS2MDC_WriteReg;
 8006b4c:	4b63      	ldr	r3, [pc, #396]	@ (8006cdc <BSP_MOTION_SENSOR_Init+0x34c>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006b4e:	4a64      	ldr	r2, [pc, #400]	@ (8006ce0 <BSP_MOTION_SENSOR_Init+0x350>)
  io_ctx.WriteReg    = BSP_IIS2MDC_WriteReg;
 8006b50:	9306      	str	r3, [sp, #24]
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006b52:	f108 0b2c 	add.w	fp, r8, #44	@ 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 8006b56:	4b57      	ldr	r3, [pc, #348]	@ (8006cb4 <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006b58:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006b5a:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8006b5c:	2200      	movs	r2, #0
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006b5e:	233d      	movs	r3, #61	@ 0x3d
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006b60:	a902      	add	r1, sp, #8
 8006b62:	4658      	mov	r0, fp
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8006b64:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006b66:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006b6a:	f7fc f8f5 	bl	8002d58 <IIS2MDC_RegisterBusIO>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1e3      	bne.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8006b72:	f10d 0107 	add.w	r1, sp, #7
 8006b76:	4658      	mov	r0, fp
 8006b78:	f7fc f858 	bl	8002c2c <IIS2MDC_ReadID>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1dc      	bne.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  else if (id != IIS2MDC_ID)
 8006b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b84:	2b40      	cmp	r3, #64	@ 0x40
 8006b86:	d1d8      	bne.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 8006b88:	ae09      	add	r6, sp, #36	@ 0x24
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4658      	mov	r0, fp
 8006b8e:	f7fb ffa9 	bl	8002ae4 <IIS2MDC_GetCapabilities>
    MotionCtx[IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006b92:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8006b96:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8006b9a:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[IIS2MDC_0] = &iis2mdc_obj_0;
 8006b9e:	f8c8 b0cc 	str.w	fp, [r8, #204]	@ 0xcc
    MotionCtx[IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006ba2:	0093      	lsls	r3, r2, #2
 8006ba4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	f8c8 30bc 	str.w	r3, [r8, #188]	@ 0xbc
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006bae:	f015 0904 	ands.w	r9, r5, #4
    MotionDrv[IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8006bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ce4 <BSP_MOTION_SENSOR_Init+0x354>)
 8006bb4:	f8c8 30dc 	str.w	r3, [r8, #220]	@ 0xdc
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006bb8:	f005 0a02 	and.w	sl, r5, #2
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006bbc:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006bc0:	d002      	beq.n	8006bc8 <BSP_MOTION_SENSOR_Init+0x238>
 8006bc2:	2a01      	cmp	r2, #1
 8006bc4:	f000 8133 	beq.w	8006e2e <BSP_MOTION_SENSOR_Init+0x49e>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	f040 80e6 	bne.w	8006d9a <BSP_MOTION_SENSOR_Init+0x40a>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006bce:	f1ba 0f00 	cmp.w	sl, #0
 8006bd2:	d001      	beq.n	8006bd8 <BSP_MOTION_SENSOR_Init+0x248>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d0b0      	beq.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  return ret;
 8006bd8:	4843      	ldr	r0, [pc, #268]	@ (8006ce8 <BSP_MOTION_SENSOR_Init+0x358>)
 8006bda:	4b42      	ldr	r3, [pc, #264]	@ (8006ce4 <BSP_MOTION_SENSOR_Init+0x354>)
 8006bdc:	e736      	b.n	8006a4c <BSP_MOTION_SENSOR_Init+0xbc>
  io_ctx.Init        = BSP_IIS2DH_Init;
 8006bde:	4b43      	ldr	r3, [pc, #268]	@ (8006cec <BSP_MOTION_SENSOR_Init+0x35c>)
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006be0:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8006d00 <BSP_MOTION_SENSOR_Init+0x370>
  io_ctx.Init        = BSP_IIS2DH_Init;
 8006be4:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS2DH_ReadReg;
 8006be6:	4b42      	ldr	r3, [pc, #264]	@ (8006cf0 <BSP_MOTION_SENSOR_Init+0x360>)
  io_ctx.DeInit      = BSP_IIS2DH_DeInit;
 8006be8:	4a42      	ldr	r2, [pc, #264]	@ (8006cf4 <BSP_MOTION_SENSOR_Init+0x364>)
  io_ctx.ReadReg     = BSP_IIS2DH_ReadReg;
 8006bea:	9307      	str	r3, [sp, #28]
  io_ctx.BusType     = IIS2DH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006bec:	2101      	movs	r1, #1
  io_ctx.GetTick     = BSP_GetTick;
 8006bee:	4b31      	ldr	r3, [pc, #196]	@ (8006cb4 <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.BusType     = IIS2DH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006bf0:	9104      	str	r1, [sp, #16]
  io_ctx.DeInit      = BSP_IIS2DH_DeInit;
 8006bf2:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006bf4:	9308      	str	r3, [sp, #32]
  io_ctx.WriteReg    = BSP_IIS2DH_WriteReg;
 8006bf6:	4a40      	ldr	r2, [pc, #256]	@ (8006cf8 <BSP_MOTION_SENSOR_Init+0x368>)
 8006bf8:	9206      	str	r2, [sp, #24]
  io_ctx.Address     = 0x0;
 8006bfa:	2300      	movs	r3, #0
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006bfc:	a902      	add	r1, sp, #8
 8006bfe:	4640      	mov	r0, r8
  io_ctx.Address     = 0x0;
 8006c00:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006c04:	f7fb fd8c 	bl	8002720 <IIS2DH_RegisterBusIO>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d196      	bne.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  else if (IIS2DH_ReadID(&iis2dh_obj_0, &id) != IIS2DH_OK)
 8006c0c:	f10d 0107 	add.w	r1, sp, #7
 8006c10:	4640      	mov	r0, r8
 8006c12:	f7fb fc05 	bl	8002420 <IIS2DH_ReadID>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d18f      	bne.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  else if (id != IIS2DH_ID)
 8006c1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c1e:	2b33      	cmp	r3, #51	@ 0x33
 8006c20:	d18b      	bne.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    (void)IIS2DH_GetCapabilities(&iis2dh_obj_0, &cap);
 8006c22:	ae09      	add	r6, sp, #36	@ 0x24
 8006c24:	4631      	mov	r1, r6
 8006c26:	4640      	mov	r0, r8
 8006c28:	f7fb fa40 	bl	80020ac <IIS2DH_GetCapabilities>
    MotionCtx[IIS2DH_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006c2c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006c30:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006c34:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[IIS2DH_0] = &iis2dh_obj_0;
 8006c38:	f8c8 80c8 	str.w	r8, [r8, #200]	@ 0xc8
    MotionCtx[IIS2DH_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006c3c:	0083      	lsls	r3, r0, #2
 8006c3e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006c42:	430b      	orrs	r3, r1
 8006c44:	f8c8 30b8 	str.w	r3, [r8, #184]	@ 0xb8
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006c48:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[IIS2DH_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DH_COMMON_Driver;
 8006c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006cfc <BSP_MOTION_SENSOR_Init+0x36c>)
 8006c4e:	f8c8 30d8 	str.w	r3, [r8, #216]	@ 0xd8
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006c52:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006c56:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006c5a:	d002      	beq.n	8006c62 <BSP_MOTION_SENSOR_Init+0x2d2>
 8006c5c:	2a01      	cmp	r2, #1
 8006c5e:	f000 80fe 	beq.w	8006e5e <BSP_MOTION_SENSOR_Init+0x4ce>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006c62:	2f00      	cmp	r7, #0
 8006c64:	f040 808f 	bne.w	8006d86 <BSP_MOTION_SENSOR_Init+0x3f6>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006c68:	f1b9 0f00 	cmp.w	r9, #0
 8006c6c:	d002      	beq.n	8006c74 <BSP_MOTION_SENSOR_Init+0x2e4>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f43f af63 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  return ret;
 8006c74:	4822      	ldr	r0, [pc, #136]	@ (8006d00 <BSP_MOTION_SENSOR_Init+0x370>)
 8006c76:	4b21      	ldr	r3, [pc, #132]	@ (8006cfc <BSP_MOTION_SENSOR_Init+0x36c>)
 8006c78:	e6e8      	b.n	8006a4c <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006c7a:	07e9      	lsls	r1, r5, #31
 8006c7c:	f57f af05 	bpl.w	8006a8a <BSP_MOTION_SENSOR_Init+0xfa>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006c80:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006c84:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006c88:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c90:	f8d2 00c8 	ldr.w	r0, [r2, #200]	@ 0xc8
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4798      	blx	r3
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f43f aef6 	beq.w	8006a8a <BSP_MOTION_SENSOR_Init+0xfa>
        return BSP_ERROR_COMPONENT_FAILURE;
 8006c9e:	f06f 0004 	mvn.w	r0, #4
 8006ca2:	e6fb      	b.n	8006a9c <BSP_MOTION_SENSOR_Init+0x10c>
 8006ca4:	080068cd 	.word	0x080068cd
 8006ca8:	08006755 	.word	0x08006755
 8006cac:	08006649 	.word	0x08006649
 8006cb0:	08006971 	.word	0x08006971
 8006cb4:	08005e75 	.word	0x08005e75
 8006cb8:	20000174 	.word	0x20000174
 8006cbc:	20002e74 	.word	0x20002e74
 8006cc0:	0800681d 	.word	0x0800681d
 8006cc4:	080066fd 	.word	0x080066fd
 8006cc8:	080065f1 	.word	0x080065f1
 8006ccc:	08006981 	.word	0x08006981
 8006cd0:	2000011c 	.word	0x2000011c
 8006cd4:	08005f9d 	.word	0x08005f9d
 8006cd8:	080068b9 	.word	0x080068b9
 8006cdc:	080068a9 	.word	0x080068a9
 8006ce0:	08005d61 	.word	0x08005d61
 8006ce4:	200000e8 	.word	0x200000e8
 8006ce8:	20002e18 	.word	0x20002e18
 8006cec:	080067bd 	.word	0x080067bd
 8006cf0:	0800669d 	.word	0x0800669d
 8006cf4:	080067ad 	.word	0x080067ad
 8006cf8:	08006595 	.word	0x08006595
 8006cfc:	200000b4 	.word	0x200000b4
 8006d00:	20002dec 	.word	0x20002dec
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006d04:	07aa      	lsls	r2, r5, #30
 8006d06:	f57f aec4 	bpl.w	8006a92 <BSP_MOTION_SENSOR_Init+0x102>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006d0a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8006d0e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006d12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006d16:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006d1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4798      	blx	r3
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d1bb      	bne.n	8006c9e <BSP_MOTION_SENSOR_Init+0x30e>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	f43f aeb6 	beq.w	8006a9a <BSP_MOTION_SENSOR_Init+0x10a>
 8006d2e:	076b      	lsls	r3, r5, #29
 8006d30:	f57f aeb3 	bpl.w	8006a9a <BSP_MOTION_SENSOR_Init+0x10a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006d34:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006d38:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006d3c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8006d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d44:	f8d8 00c8 	ldr.w	r0, [r8, #200]	@ 0xc8
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4798      	blx	r3
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f43f aea4 	beq.w	8006a9a <BSP_MOTION_SENSOR_Init+0x10a>
 8006d52:	e7a4      	b.n	8006c9e <BSP_MOTION_SENSOR_Init+0x30e>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006d54:	2900      	cmp	r1, #0
 8006d56:	f43f aef0 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006d5a:	f1b9 0f00 	cmp.w	r9, #0
 8006d5e:	f040 80a2 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x516>
  return ret;
 8006d62:	4869      	ldr	r0, [pc, #420]	@ (8006f08 <BSP_MOTION_SENSOR_Init+0x578>)
 8006d64:	4b69      	ldr	r3, [pc, #420]	@ (8006f0c <BSP_MOTION_SENSOR_Init+0x57c>)
 8006d66:	e671      	b.n	8006a4c <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006d68:	2901      	cmp	r1, #1
 8006d6a:	f000 8090 	beq.w	8006e8e <BSP_MOTION_SENSOR_Init+0x4fe>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006d6e:	f1b9 0f00 	cmp.w	r9, #0
 8006d72:	f43f ae69 	beq.w	8006a48 <BSP_MOTION_SENSOR_Init+0xb8>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f43f aedf 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006d7c:	f8d8 30e4 	ldr.w	r3, [r8, #228]	@ 0xe4
 8006d80:	f8d8 00d4 	ldr.w	r0, [r8, #212]	@ 0xd4
 8006d84:	e662      	b.n	8006a4c <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006d86:	2900      	cmp	r1, #0
 8006d88:	f43f aed7 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006d8c:	f1b9 0f00 	cmp.w	r9, #0
 8006d90:	f43f af70 	beq.w	8006c74 <BSP_MOTION_SENSOR_Init+0x2e4>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d175      	bne.n	8006e84 <BSP_MOTION_SENSOR_Init+0x4f4>
 8006d98:	e6cf      	b.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	f43f aecd 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006da0:	f1ba 0f00 	cmp.w	sl, #0
 8006da4:	f43f af18 	beq.w	8006bd8 <BSP_MOTION_SENSOR_Init+0x248>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d153      	bne.n	8006e54 <BSP_MOTION_SENSOR_Init+0x4c4>
 8006dac:	e6c5      	b.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f47f ae4a 	bne.w	8006a48 <BSP_MOTION_SENSOR_Init+0xb8>
 8006db4:	e6c1      	b.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 8006db6:	4a56      	ldr	r2, [pc, #344]	@ (8006f10 <BSP_MOTION_SENSOR_Init+0x580>)
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006db8:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 8006dba:	f8c8 2110 	str.w	r2, [r8, #272]	@ 0x110
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006dbe:	4658      	mov	r0, fp
 8006dc0:	4798      	blx	r3
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d072      	beq.n	8006eac <BSP_MOTION_SENSOR_Init+0x51c>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006dc6:	2f00      	cmp	r7, #0
 8006dc8:	f43f aeb7 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
 8006dcc:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	f47f aeb2 	bne.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006dd6:	f8d8 30e4 	ldr.w	r3, [r8, #228]	@ 0xe4
 8006dda:	f8d8 00d4 	ldr.w	r0, [r8, #212]	@ 0xd4
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8006dde:	4a4d      	ldr	r2, [pc, #308]	@ (8006f14 <BSP_MOTION_SENSOR_Init+0x584>)
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006de0:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8006de2:	f8c8 210c 	str.w	r2, [r8, #268]	@ 0x10c
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006de6:	4798      	blx	r3
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f47f aea6 	bne.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006dee:	f1b9 0f00 	cmp.w	r9, #0
 8006df2:	d0c3      	beq.n	8006d7c <BSP_MOTION_SENSOR_Init+0x3ec>
 8006df4:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1bf      	bne.n	8006d7c <BSP_MOTION_SENSOR_Init+0x3ec>
 8006dfc:	e69d      	b.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
      MotionFuncDrv[IIS3DWB_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS3DWB_ACC_Driver;
 8006dfe:	4a46      	ldr	r2, [pc, #280]	@ (8006f18 <BSP_MOTION_SENSOR_Init+0x588>)
      if (MotionDrv[IIS3DWB_0]->Init(MotionCompObj[IIS3DWB_0]) != IIS3DWB_OK)
 8006e00:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS3DWB_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS3DWB_ACC_Driver;
 8006e02:	f8c8 2104 	str.w	r2, [r8, #260]	@ 0x104
      if (MotionDrv[IIS3DWB_0]->Init(MotionCompObj[IIS3DWB_0]) != IIS3DWB_OK)
 8006e06:	4658      	mov	r0, fp
 8006e08:	4798      	blx	r3
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f47f ae95 	bne.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	d13e      	bne.n	8006e92 <BSP_MOTION_SENSOR_Init+0x502>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e14:	f1b9 0f00 	cmp.w	r9, #0
 8006e18:	d004      	beq.n	8006e24 <BSP_MOTION_SENSOR_Init+0x494>
 8006e1a:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f43f ae8b 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006e24:	f8d8 30e0 	ldr.w	r3, [r8, #224]	@ 0xe0
 8006e28:	f8d8 00d0 	ldr.w	r0, [r8, #208]	@ 0xd0
 8006e2c:	e60e      	b.n	8006a4c <BSP_MOTION_SENSOR_Init+0xbc>
      MotionFuncDrv[IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2MDC_MAG_Driver;
 8006e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8006f1c <BSP_MOTION_SENSOR_Init+0x58c>)
      if (MotionDrv[IIS2MDC_0]->Init(MotionCompObj[IIS2MDC_0]) != IIS2MDC_OK)
 8006e30:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2MDC_MAG_Driver;
 8006e32:	f8c8 20fc 	str.w	r2, [r8, #252]	@ 0xfc
      if (MotionDrv[IIS2MDC_0]->Init(MotionCompObj[IIS2MDC_0]) != IIS2MDC_OK)
 8006e36:	4658      	mov	r0, fp
 8006e38:	4798      	blx	r3
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f47f ae7d 	bne.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006e40:	2f00      	cmp	r7, #0
 8006e42:	d143      	bne.n	8006ecc <BSP_MOTION_SENSOR_Init+0x53c>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006e44:	f1ba 0f00 	cmp.w	sl, #0
 8006e48:	d004      	beq.n	8006e54 <BSP_MOTION_SENSOR_Init+0x4c4>
 8006e4a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f43f ae73 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006e54:	f8d8 30dc 	ldr.w	r3, [r8, #220]	@ 0xdc
 8006e58:	f8d8 00cc 	ldr.w	r0, [r8, #204]	@ 0xcc
 8006e5c:	e5f6      	b.n	8006a4c <BSP_MOTION_SENSOR_Init+0xbc>
      MotionFuncDrv[IIS2DH_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2DH_ACC_Driver;
 8006e5e:	4a30      	ldr	r2, [pc, #192]	@ (8006f20 <BSP_MOTION_SENSOR_Init+0x590>)
      if (MotionDrv[IIS2DH_0]->Init(MotionCompObj[IIS2DH_0]) != IIS2DH_OK)
 8006e60:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS2DH_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2DH_ACC_Driver;
 8006e62:	f8c8 20ec 	str.w	r2, [r8, #236]	@ 0xec
      if (MotionDrv[IIS2DH_0]->Init(MotionCompObj[IIS2DH_0]) != IIS2DH_OK)
 8006e66:	4640      	mov	r0, r8
 8006e68:	4798      	blx	r3
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f47f ae65 	bne.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006e70:	2f00      	cmp	r7, #0
 8006e72:	d138      	bne.n	8006ee6 <BSP_MOTION_SENSOR_Init+0x556>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e74:	f1b9 0f00 	cmp.w	r9, #0
 8006e78:	d004      	beq.n	8006e84 <BSP_MOTION_SENSOR_Init+0x4f4>
 8006e7a:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f43f ae5b 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006e84:	f8d8 30d8 	ldr.w	r3, [r8, #216]	@ 0xd8
 8006e88:	f8d8 00c8 	ldr.w	r0, [r8, #200]	@ 0xc8
 8006e8c:	e5de      	b.n	8006a4c <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006e8e:	4658      	mov	r0, fp
 8006e90:	e7a5      	b.n	8006dde <BSP_MOTION_SENSOR_Init+0x44e>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006e92:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f43f ae4f 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ea0:	d0c0      	beq.n	8006e24 <BSP_MOTION_SENSOR_Init+0x494>
 8006ea2:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d1bc      	bne.n	8006e24 <BSP_MOTION_SENSOR_Init+0x494>
 8006eaa:	e646      	b.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006eac:	2f00      	cmp	r7, #0
 8006eae:	d09e      	beq.n	8006dee <BSP_MOTION_SENSOR_Init+0x45e>
 8006eb0:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d08e      	beq.n	8006dd6 <BSP_MOTION_SENSOR_Init+0x446>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006eb8:	f1b9 0f00 	cmp.w	r9, #0
 8006ebc:	f43f af5e 	beq.w	8006d7c <BSP_MOTION_SENSOR_Init+0x3ec>
 8006ec0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006ec4:	e757      	b.n	8006d76 <BSP_MOTION_SENSOR_Init+0x3e6>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006ec6:	f06f 0006 	mvn.w	r0, #6
 8006eca:	e5e7      	b.n	8006a9c <BSP_MOTION_SENSOR_Init+0x10c>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006ecc:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f43f ae32 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006ed6:	f1ba 0f00 	cmp.w	sl, #0
 8006eda:	d0bb      	beq.n	8006e54 <BSP_MOTION_SENSOR_Init+0x4c4>
 8006edc:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d1b7      	bne.n	8006e54 <BSP_MOTION_SENSOR_Init+0x4c4>
 8006ee4:	e629      	b.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006ee6:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f43f ae25 	beq.w	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006ef0:	f1b9 0f00 	cmp.w	r9, #0
 8006ef4:	d0c6      	beq.n	8006e84 <BSP_MOTION_SENSOR_Init+0x4f4>
 8006ef6:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d1c2      	bne.n	8006e84 <BSP_MOTION_SENSOR_Init+0x4f4>
 8006efe:	e61c      	b.n	8006b3a <BSP_MOTION_SENSOR_Init+0x1aa>
  switch (Instance)
 8006f00:	f06f 0001 	mvn.w	r0, #1
 8006f04:	e5ca      	b.n	8006a9c <BSP_MOTION_SENSOR_Init+0x10c>
 8006f06:	bf00      	nop
 8006f08:	20002e44 	.word	0x20002e44
 8006f0c:	2000011c 	.word	0x2000011c
 8006f10:	20000150 	.word	0x20000150
 8006f14:	2000012c 	.word	0x2000012c
 8006f18:	200000f8 	.word	0x200000f8
 8006f1c:	200000c4 	.word	0x200000c4
 8006f20:	20000090 	.word	0x20000090

08006f24 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8006f24:	2803      	cmp	r0, #3
 8006f26:	d81f      	bhi.n	8006f68 <BSP_MOTION_SENSOR_SetOutputDataRate+0x44>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006f28:	4a11      	ldr	r2, [pc, #68]	@ (8006f70 <BSP_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 8006f2a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
{
 8006f2e:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006f30:	f8dc 30b8 	ldr.w	r3, [ip, #184]	@ 0xb8
 8006f34:	ea01 0e03 	and.w	lr, r1, r3
 8006f38:	4399      	bics	r1, r3
 8006f3a:	d112      	bne.n	8006f62 <BSP_MOTION_SENSOR_SetOutputDataRate+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006f3c:	490d      	ldr	r1, [pc, #52]	@ (8006f74 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>)
 8006f3e:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 8006f42:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006f46:	440b      	add	r3, r1
 8006f48:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006f4c:	f8dc 00c8 	ldr.w	r0, [ip, #200]	@ 0xc8
 8006f50:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	bf18      	it	ne
 8006f5c:	f06f 0004 	mvnne.w	r0, #4
}
 8006f60:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006f62:	f06f 0001 	mvn.w	r0, #1
}
 8006f66:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006f68:	f06f 0001 	mvn.w	r0, #1
}
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20002dec 	.word	0x20002dec
 8006f74:	0801546c 	.word	0x0801546c

08006f78 <BSP_MOTION_SENSOR_SetFullScale>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8006f78:	2803      	cmp	r0, #3
 8006f7a:	d821      	bhi.n	8006fc0 <BSP_MOTION_SENSOR_SetFullScale+0x48>
{
 8006f7c:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006f7e:	4c12      	ldr	r4, [pc, #72]	@ (8006fc8 <BSP_MOTION_SENSOR_SetFullScale+0x50>)
 8006f80:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8006f84:	460b      	mov	r3, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	f8dc 20b8 	ldr.w	r2, [ip, #184]	@ 0xb8
 8006f8c:	ea03 0e02 	and.w	lr, r3, r2
 8006f90:	4393      	bics	r3, r2
 8006f92:	d112      	bne.n	8006fba <BSP_MOTION_SENSOR_SetFullScale+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8006f94:	4a0d      	ldr	r2, [pc, #52]	@ (8006fcc <BSP_MOTION_SENSOR_SetFullScale+0x54>)
 8006f96:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8006f9a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006f9e:	4413      	add	r3, r2
 8006fa0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006fa4:	f8dc 00c8 	ldr.w	r0, [ip, #200]	@ 0xc8
 8006fa8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	bf18      	it	ne
 8006fb4:	f06f 0004 	mvnne.w	r0, #4
}
 8006fb8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006fba:	f06f 0001 	mvn.w	r0, #1
}
 8006fbe:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006fc0:	f06f 0001 	mvn.w	r0, #1
}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20002dec 	.word	0x20002dec
 8006fcc:	0801546c 	.word	0x0801546c

08006fd0 <BSP_SD_Detect_Init>:
 */
void BSP_SD_Detect_Init(void)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8007010 <BSP_SD_Detect_Init+0x40>)
  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006fd2:	4810      	ldr	r0, [pc, #64]	@ (8007014 <BSP_SD_Detect_Init+0x44>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8006fd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 8006fd6:	b500      	push	{lr}
  SD_DETECT_GPIO_CLK_ENABLE();
 8006fd8:	f042 0202 	orr.w	r2, r2, #2
 8006fdc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 8006fe0:	b089      	sub	sp, #36	@ 0x24
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8006fe2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8007008 <BSP_SD_Detect_Init+0x38>
  SD_DETECT_GPIO_CLK_ENABLE();
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8006fec:	2201      	movs	r2, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006fee:	a902      	add	r1, sp, #8
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ff6:	ed8d 7b02 	vstr	d7, [sp, #8]
  SD_DETECT_GPIO_CLK_ENABLE();
 8006ffa:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006ffc:	f000 feac 	bl	8007d58 <HAL_GPIO_Init>
}
 8007000:	b009      	add	sp, #36	@ 0x24
 8007002:	f85d fb04 	ldr.w	pc, [sp], #4
 8007006:	bf00      	nop
 8007008:	00001000 	.word	0x00001000
 800700c:	00000000 	.word	0x00000000
 8007010:	40021000 	.word	0x40021000
 8007014:	48000400 	.word	0x48000400

08007018 <BSP_SD_DetectCallback>:
{
  /* NOTE: This function Should not be modified, when the callback is needed,
  the BSP_SD_DetectCallback could be implemented in the user file
  */ 
  
}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop

0800701c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800701c:	4684      	mov	ip, r0
 800701e:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007020:	4804      	ldr	r0, [pc, #16]	@ (8007034 <BSP_SD_ReadBlocks_DMA+0x18>)
{
 8007022:	4613      	mov	r3, r2
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007024:	460a      	mov	r2, r1
 8007026:	4661      	mov	r1, ip
 8007028:	f003 fefc 	bl	800ae24 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 800702c:	3800      	subs	r0, #0
 800702e:	bf18      	it	ne
 8007030:	2001      	movne	r0, #1
 8007032:	bd08      	pop	{r3, pc}
 8007034:	20000fc4 	.word	0x20000fc4

08007038 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007038:	4684      	mov	ip, r0
 800703a:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800703c:	4804      	ldr	r0, [pc, #16]	@ (8007050 <BSP_SD_WriteBlocks_DMA+0x18>)
{
 800703e:	4613      	mov	r3, r2
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007040:	460a      	mov	r2, r1
 8007042:	4661      	mov	r1, ip
 8007044:	f003 ff54 	bl	800aef0 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 8007048:	3800      	subs	r0, #0
 800704a:	bf18      	it	ne
 800704c:	2001      	movne	r0, #1
 800704e:	bd08      	pop	{r3, pc}
 8007050:	20000fc4 	.word	0x20000fc4

08007054 <BSP_SD_MspInit>:
{
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007054:	4b1e      	ldr	r3, [pc, #120]	@ (80070d0 <BSP_SD_MspInit+0x7c>)
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8007056:	481f      	ldr	r0, [pc, #124]	@ (80070d4 <BSP_SD_MspInit+0x80>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007058:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 800705a:	b500      	push	{lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800705c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007060:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007062:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 8007064:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007066:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800706a:	9201      	str	r2, [sp, #4]
 800706c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800706e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007070:	f042 0204 	orr.w	r2, r2, #4
 8007074:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007078:	f002 0204 	and.w	r2, r2, #4
 800707c:	9202      	str	r2, [sp, #8]
 800707e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007080:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007082:	f042 0208 	orr.w	r2, r2, #8
 8007086:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8007090:	210c      	movs	r1, #12
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8007092:	f44f 52f8 	mov.w	r2, #7936	@ 0x1f00
 8007096:	2302      	movs	r3, #2
 8007098:	e9cd 2304 	strd	r2, r3, [sp, #16]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 800709c:	9108      	str	r1, [sp, #32]
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800709e:	2201      	movs	r2, #1
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80070a0:	a904      	add	r1, sp, #16
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80070a8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80070aa:	f000 fe55 	bl	8007d58 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 80070ae:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80070b0:	a904      	add	r1, sp, #16
 80070b2:	4809      	ldr	r0, [pc, #36]	@ (80070d8 <BSP_SD_MspInit+0x84>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 80070b4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80070b6:	f000 fe4f 	bl	8007d58 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 80070ba:	2200      	movs	r2, #0
 80070bc:	2105      	movs	r1, #5
 80070be:	2031      	movs	r0, #49	@ 0x31
 80070c0:	f000 fdda 	bl	8007c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 80070c4:	2031      	movs	r0, #49	@ 0x31
 80070c6:	f000 fe13 	bl	8007cf0 <HAL_NVIC_EnableIRQ>


}
 80070ca:	b00b      	add	sp, #44	@ 0x2c
 80070cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d0:	40021000 	.word	0x40021000
 80070d4:	48000800 	.word	0x48000800
 80070d8:	48000c00 	.word	0x48000c00

080070dc <BSP_SD_Init>:
  hsd1.Instance = SDMMC1;
 80070dc:	4813      	ldr	r0, [pc, #76]	@ (800712c <BSP_SD_Init+0x50>)
 80070de:	4914      	ldr	r1, [pc, #80]	@ (8007130 <BSP_SD_Init+0x54>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80070e0:	2300      	movs	r3, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80070e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
{
 80070e6:	b510      	push	{r4, lr}
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80070e8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hsd1.Init.ClockDiv = 1;
 80070ec:	2401      	movs	r4, #1
 80070ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80070f2:	e9c0 1300 	strd	r1, r3, [r0]
  hsd1.Init.ClockDiv = 1;
 80070f6:	6183      	str	r3, [r0, #24]
 80070f8:	e9c0 2404 	strd	r2, r4, [r0, #16]
  BSP_SD_MspInit(&hsd1);
 80070fc:	f7ff ffaa 	bl	8007054 <BSP_SD_MspInit>
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8007100:	480c      	ldr	r0, [pc, #48]	@ (8007134 <BSP_SD_Init+0x58>)
 8007102:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007106:	f000 fff9 	bl	80080fc <HAL_GPIO_ReadPin>
    SD_Status = SD_NOT_PRESENT;
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <BSP_SD_Init+0x5c>)
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 800710c:	b928      	cbnz	r0, 800711a <BSP_SD_Init+0x3e>
    SD_Status = SD_NOT_PRESENT;
 800710e:	7018      	strb	r0, [r3, #0]
  return SD_Status;
 8007110:	781b      	ldrb	r3, [r3, #0]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007112:	2b01      	cmp	r3, #1
 8007114:	d005      	beq.n	8007122 <BSP_SD_Init+0x46>
}
 8007116:	2002      	movs	r0, #2
 8007118:	bd10      	pop	{r4, pc}
    SD_Status = SD_PRESENT;
 800711a:	701c      	strb	r4, [r3, #0]
  return SD_Status;
 800711c:	781b      	ldrb	r3, [r3, #0]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800711e:	2b01      	cmp	r3, #1
 8007120:	d1f9      	bne.n	8007116 <BSP_SD_Init+0x3a>
}
 8007122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 8007126:	4801      	ldr	r0, [pc, #4]	@ (800712c <BSP_SD_Init+0x50>)
 8007128:	f004 bc84 	b.w	800ba34 <HAL_SD_Init>
 800712c:	20000fc4 	.word	0x20000fc4
 8007130:	50062400 	.word	0x50062400
 8007134:	48000400 	.word	0x48000400
 8007138:	20002f0c 	.word	0x20002f0c

0800713c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800713c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800713e:	4803      	ldr	r0, [pc, #12]	@ (800714c <BSP_SD_GetCardState+0x10>)
 8007140:	f004 fcdc 	bl	800bafc <HAL_SD_GetCardState>
}
 8007144:	3804      	subs	r0, #4
 8007146:	bf18      	it	ne
 8007148:	2001      	movne	r0, #1
 800714a:	bd08      	pop	{r3, pc}
 800714c:	20000fc4 	.word	0x20000fc4

08007150 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007150:	4601      	mov	r1, r0
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007152:	4801      	ldr	r0, [pc, #4]	@ (8007158 <BSP_SD_GetCardInfo+0x8>)
 8007154:	f004 bb8c 	b.w	800b870 <HAL_SD_GetCardInfo>
 8007158:	20000fc4 	.word	0x20000fc4

0800715c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800715c:	b508      	push	{r3, lr}
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 800715e:	f009 f925 	bl	80103ac <BSP_SD_WriteCpltCallback>
}
 8007162:	bd08      	pop	{r3, pc}

08007164 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007164:	b508      	push	{r3, lr}
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8007166:	f009 f927 	bl	80103b8 <BSP_SD_ReadCpltCallback>
}
 800716a:	bd08      	pop	{r3, pc}

0800716c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800716c:	4911      	ldr	r1, [pc, #68]	@ (80071b4 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800716e:	4b12      	ldr	r3, [pc, #72]	@ (80071b8 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007170:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007174:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
{
 8007178:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800717a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 800717e:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007180:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007188:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8007190:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8007194:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8007198:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000;
 800719a:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800719c:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800719e:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80071a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80071a6:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 80071a8:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80071aa:	608c      	str	r4, [r1, #8]
#endif
}
 80071ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	e000ed00 	.word	0xe000ed00
 80071b8:	40021000 	.word	0x40021000

080071bc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop

080071c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071c0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80071c2:	4e0f      	ldr	r6, [pc, #60]	@ (8007200 <HAL_InitTick+0x40>)
 80071c4:	7833      	ldrb	r3, [r6, #0]
 80071c6:	b90b      	cbnz	r3, 80071cc <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80071c8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80071cc:	490d      	ldr	r1, [pc, #52]	@ (8007204 <HAL_InitTick+0x44>)
 80071ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071d2:	4605      	mov	r5, r0
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	6808      	ldr	r0, [r1, #0]
 80071da:	fbb0 f0f3 	udiv	r0, r0, r3
 80071de:	f000 fd95 	bl	8007d0c <HAL_SYSTICK_Config>
 80071e2:	4604      	mov	r4, r0
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d1ef      	bne.n	80071c8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071e8:	2d0f      	cmp	r5, #15
 80071ea:	d8ed      	bhi.n	80071c8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071ec:	4602      	mov	r2, r0
 80071ee:	4629      	mov	r1, r5
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	f000 fd40 	bl	8007c78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80071f8:	6075      	str	r5, [r6, #4]
 80071fa:	4620      	mov	r0, r4
}
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
 80071fe:	bf00      	nop
 8007200:	200001e4 	.word	0x200001e4
 8007204:	200001e0 	.word	0x200001e0

08007208 <HAL_Init>:
{
 8007208:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800720a:	2003      	movs	r0, #3
 800720c:	f000 fd22 	bl	8007c54 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007210:	2000      	movs	r0, #0
 8007212:	f7ff ffd5 	bl	80071c0 <HAL_InitTick>
 8007216:	b110      	cbz	r0, 800721e <HAL_Init+0x16>
    status = HAL_ERROR;
 8007218:	2401      	movs	r4, #1
}
 800721a:	4620      	mov	r0, r4
 800721c:	bd10      	pop	{r4, pc}
 800721e:	4604      	mov	r4, r0
    HAL_MspInit();
 8007220:	f7ff ffcc 	bl	80071bc <HAL_MspInit>
}
 8007224:	4620      	mov	r0, r4
 8007226:	bd10      	pop	{r4, pc}

08007228 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007228:	4a03      	ldr	r2, [pc, #12]	@ (8007238 <HAL_IncTick+0x10>)
 800722a:	4b04      	ldr	r3, [pc, #16]	@ (800723c <HAL_IncTick+0x14>)
 800722c:	6811      	ldr	r1, [r2, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	440b      	add	r3, r1
 8007232:	6013      	str	r3, [r2, #0]
}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	20002f10 	.word	0x20002f10
 800723c:	200001e4 	.word	0x200001e4

08007240 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007240:	4b01      	ldr	r3, [pc, #4]	@ (8007248 <HAL_GetTick+0x8>)
 8007242:	6818      	ldr	r0, [r3, #0]
}
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20002f10 	.word	0x20002f10

0800724c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007250:	f7ff fff6 	bl	8007240 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007254:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8007256:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8007258:	d002      	beq.n	8007260 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 800725a:	4b04      	ldr	r3, [pc, #16]	@ (800726c <HAL_Delay+0x20>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007260:	f7ff ffee 	bl	8007240 <HAL_GetTick>
 8007264:	1b40      	subs	r0, r0, r5
 8007266:	42a0      	cmp	r0, r4
 8007268:	d3fa      	bcc.n	8007260 <HAL_Delay+0x14>
  {
  }
}
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	200001e4 	.word	0x200001e4

08007270 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007270:	b530      	push	{r4, r5, lr}
 8007272:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007274:	2300      	movs	r3, #0
 8007276:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007278:	2800      	cmp	r0, #0
 800727a:	f000 8087 	beq.w	800738c <HAL_ADC_Init+0x11c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800727e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8007280:	4604      	mov	r4, r0
 8007282:	2d00      	cmp	r5, #0
 8007284:	f000 8087 	beq.w	8007396 <HAL_ADC_Init+0x126>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007288:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800728a:	6893      	ldr	r3, [r2, #8]
 800728c:	0098      	lsls	r0, r3, #2
 800728e:	d505      	bpl.n	800729c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007290:	6893      	ldr	r3, [r2, #8]
 8007292:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007296:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800729a:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800729c:	6893      	ldr	r3, [r2, #8]
 800729e:	00d9      	lsls	r1, r3, #3
 80072a0:	d419      	bmi.n	80072d6 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80072a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007410 <HAL_ADC_Init+0x1a0>)
 80072a4:	485b      	ldr	r0, [pc, #364]	@ (8007414 <HAL_ADC_Init+0x1a4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80072a8:	6891      	ldr	r1, [r2, #8]
 80072aa:	099b      	lsrs	r3, r3, #6
 80072ac:	fba0 0303 	umull	r0, r3, r0, r3
 80072b0:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80072b4:	099b      	lsrs	r3, r3, #6
 80072b6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80072ba:	3301      	adds	r3, #1
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80072c2:	6091      	str	r1, [r2, #8]
 80072c4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	b12b      	cbz	r3, 80072d6 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f9      	bne.n	80072ca <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80072d6:	6893      	ldr	r3, [r2, #8]
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	d45a      	bmi.n	8007392 <HAL_ADC_Init+0x122>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072de:	f043 0310 	orr.w	r3, r3, #16
 80072e2:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072e4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80072e6:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072e8:	4303      	orrs	r3, r0
 80072ea:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80072ec:	6893      	ldr	r3, [r2, #8]
 80072ee:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80072f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072f4:	d146      	bne.n	8007384 <HAL_ADC_Init+0x114>
 80072f6:	06dd      	lsls	r5, r3, #27
 80072f8:	d444      	bmi.n	8007384 <HAL_ADC_Init+0x114>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007306:	6893      	ldr	r3, [r2, #8]
 8007308:	07d9      	lsls	r1, r3, #31
 800730a:	d40a      	bmi.n	8007322 <HAL_ADC_Init+0xb2>
 800730c:	4b42      	ldr	r3, [pc, #264]	@ (8007418 <HAL_ADC_Init+0x1a8>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	07db      	lsls	r3, r3, #31
 8007312:	d406      	bmi.n	8007322 <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007314:	4941      	ldr	r1, [pc, #260]	@ (800741c <HAL_ADC_Init+0x1ac>)
 8007316:	6865      	ldr	r5, [r4, #4]
 8007318:	688b      	ldr	r3, [r1, #8]
 800731a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800731e:	432b      	orrs	r3, r5
 8007320:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8007322:	68e5      	ldr	r5, [r4, #12]
 8007324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007326:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 800732a:	432b      	orrs	r3, r5
 800732c:	68a5      	ldr	r5, [r4, #8]
 800732e:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007330:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007332:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8007334:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800733c:	d049      	beq.n	80073d2 <HAL_ADC_Init+0x162>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800733e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007340:	b121      	cbz	r1, 800734c <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8007342:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007344:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007348:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800734a:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800734c:	68d5      	ldr	r5, [r2, #12]
 800734e:	4934      	ldr	r1, [pc, #208]	@ (8007420 <HAL_ADC_Init+0x1b0>)
 8007350:	4029      	ands	r1, r5
 8007352:	4319      	orrs	r1, r3
 8007354:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007356:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007358:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800735a:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	430b      	orrs	r3, r1
 8007364:	d01d      	beq.n	80073a2 <HAL_ADC_Init+0x132>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d037      	beq.n	80073dc <HAL_ADC_Init+0x16c>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800736c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800736e:	f023 030f 	bic.w	r3, r3, #15
 8007372:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	f043 0301 	orr.w	r3, r3, #1
 800737e:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8007380:	b003      	add	sp, #12
 8007382:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007384:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007386:	f043 0310 	orr.w	r3, r3, #16
 800738a:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800738c:	2001      	movs	r0, #1
}
 800738e:	b003      	add	sp, #12
 8007390:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007392:	2000      	movs	r0, #0
 8007394:	e7aa      	b.n	80072ec <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8007396:	f7fe fa09 	bl	80057ac <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800739a:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800739c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 80073a0:	e772      	b.n	8007288 <HAL_ADC_Init+0x18>
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80073a2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80073a6:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80073a8:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80073aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80073ac:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 80073b0:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80073b2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80073b6:	f021 0106 	bic.w	r1, r1, #6
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80073ba:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80073bc:	430b      	orrs	r3, r1
 80073be:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80073c0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d011      	beq.n	80073ec <HAL_ADC_Init+0x17c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80073c8:	6913      	ldr	r3, [r2, #16]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	6113      	str	r3, [r2, #16]
 80073d0:	e7c9      	b.n	8007366 <HAL_ADC_Init+0xf6>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80073d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80073d4:	3901      	subs	r1, #1
 80073d6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80073da:	e7b0      	b.n	800733e <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80073dc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80073de:	69e3      	ldr	r3, [r4, #28]
 80073e0:	f021 010f 	bic.w	r1, r1, #15
 80073e4:	3b01      	subs	r3, #1
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ea:	e7c3      	b.n	8007374 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 80073ec:	6911      	ldr	r1, [r2, #16]
 80073ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80073f0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80073f2:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 80073f6:	f021 0104 	bic.w	r1, r1, #4
 80073fa:	432b      	orrs	r3, r5
 80073fc:	430b      	orrs	r3, r1
 80073fe:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007400:	430b      	orrs	r3, r1
 8007402:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007404:	430b      	orrs	r3, r1
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	6113      	str	r3, [r2, #16]
 800740c:	e7ab      	b.n	8007366 <HAL_ADC_Init+0xf6>
 800740e:	bf00      	nop
 8007410:	200001e0 	.word	0x200001e0
 8007414:	053e2d63 	.word	0x053e2d63
 8007418:	50040000 	.word	0x50040000
 800741c:	50040300 	.word	0x50040300
 8007420:	fff0c007 	.word	0xfff0c007

08007424 <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8007424:	6d80      	ldr	r0, [r0, #88]	@ 0x58
}
 8007426:	4770      	bx	lr

08007428 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007428:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	f012 0f04 	tst.w	r2, #4
{
 8007430:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007436:	d101      	bne.n	800743c <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007438:	0716      	lsls	r6, r2, #28
 800743a:	d53c      	bpl.n	80074b6 <ADC_ConversionStop+0x8e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	0195      	lsls	r5, r2, #6
 8007440:	d504      	bpl.n	800744c <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007442:	8b20      	ldrh	r0, [r4, #24]
 8007444:	f240 1201 	movw	r2, #257	@ 0x101
 8007448:	4290      	cmp	r0, r2
 800744a:	d045      	beq.n	80074d8 <ADC_ConversionStop+0xb0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800744c:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	d033      	beq.n	80074ba <ADC_ConversionStop+0x92>
 8007452:	0750      	lsls	r0, r2, #29
 8007454:	d502      	bpl.n	800745c <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	0792      	lsls	r2, r2, #30
 800745a:	d559      	bpl.n	8007510 <ADC_ConversionStop+0xe8>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800745c:	2901      	cmp	r1, #1
 800745e:	d055      	beq.n	800750c <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	0710      	lsls	r0, r2, #28
 8007464:	d50a      	bpl.n	800747c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	0792      	lsls	r2, r2, #30
 800746a:	d407      	bmi.n	800747c <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007472:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8007476:	f042 0220 	orr.w	r2, r2, #32
 800747a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800747c:	2903      	cmp	r1, #3
 800747e:	d145      	bne.n	800750c <ADC_ConversionStop+0xe4>
 8007480:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007482:	f7ff fedd 	bl	8007240 <HAL_GetTick>

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007486:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007488:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	421d      	tst	r5, r3
 800748e:	d012      	beq.n	80074b6 <ADC_ConversionStop+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007490:	f7ff fed6 	bl	8007240 <HAL_GetTick>
 8007494:	1b80      	subs	r0, r0, r6
 8007496:	2805      	cmp	r0, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007498:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800749a:	d9f6      	bls.n	800748a <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	422a      	tst	r2, r5
 80074a0:	d0f3      	beq.n	800748a <ADC_ConversionStop+0x62>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074a4:	f043 0310 	orr.w	r3, r3, #16
 80074a8:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074aa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80074b2:	2001      	movs	r0, #1

  }

  /* Return HAL status */
  return HAL_OK;
}
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80074b6:	2000      	movs	r0, #0
}
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80074ba:	0716      	lsls	r6, r2, #28
 80074bc:	d50a      	bpl.n	80074d4 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	0795      	lsls	r5, r2, #30
 80074c2:	d407      	bmi.n	80074d4 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80074ca:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80074ce:	f042 0220 	orr.w	r2, r2, #32
 80074d2:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80074d4:	2508      	movs	r5, #8
 80074d6:	e7d4      	b.n	8007482 <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	0650      	lsls	r0, r2, #25
 80074dc:	d406      	bmi.n	80074ec <ADC_ConversionStop+0xc4>
 80074de:	4a11      	ldr	r2, [pc, #68]	@ (8007524 <ADC_ConversionStop+0xfc>)
 80074e0:	e001      	b.n	80074e6 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80074e2:	3a01      	subs	r2, #1
 80074e4:	d0dd      	beq.n	80074a2 <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80074e6:	6819      	ldr	r1, [r3, #0]
 80074e8:	0649      	lsls	r1, r1, #25
 80074ea:	d5fa      	bpl.n	80074e2 <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80074ec:	2240      	movs	r2, #64	@ 0x40
 80074ee:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	0756      	lsls	r6, r2, #29
 80074f4:	d50a      	bpl.n	800750c <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	0795      	lsls	r5, r2, #30
 80074fa:	d407      	bmi.n	800750c <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007502:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8007506:	f042 0210 	orr.w	r2, r2, #16
 800750a:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800750c:	2504      	movs	r5, #4
 800750e:	e7b8      	b.n	8007482 <ADC_ConversionStop+0x5a>
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007516:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800751a:	f042 0210 	orr.w	r2, r2, #16
 800751e:	609a      	str	r2, [r3, #8]
}
 8007520:	e79c      	b.n	800745c <ADC_ConversionStop+0x34>
 8007522:	bf00      	nop
 8007524:	a3400000 	.word	0xa3400000

08007528 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007528:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	07d2      	lsls	r2, r2, #31
 800752e:	d501      	bpl.n	8007534 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007530:	2000      	movs	r0, #0
}
 8007532:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007534:	6899      	ldr	r1, [r3, #8]
 8007536:	4a19      	ldr	r2, [pc, #100]	@ (800759c <ADC_Enable+0x74>)
 8007538:	4211      	tst	r1, r2
{
 800753a:	b570      	push	{r4, r5, r6, lr}
 800753c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800753e:	d009      	beq.n	8007554 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007540:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8007542:	f043 0310 	orr.w	r3, r3, #16
 8007546:	65b3      	str	r3, [r6, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007548:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 800754a:	f043 0301 	orr.w	r3, r3, #1
 800754e:	65f3      	str	r3, [r6, #92]	@ 0x5c
      return HAL_ERROR;
 8007550:	2001      	movs	r0, #1
}
 8007552:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	4d12      	ldr	r5, [pc, #72]	@ (80075a0 <ADC_Enable+0x78>)
 8007558:	402a      	ands	r2, r5
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007560:	f7ff fe6e 	bl	8007240 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007564:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007566:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	07d0      	lsls	r0, r2, #31
 800756c:	d413      	bmi.n	8007596 <ADC_Enable+0x6e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	07d1      	lsls	r1, r2, #31
 8007572:	d404      	bmi.n	800757e <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	402a      	ands	r2, r5
 8007578:	f042 0201 	orr.w	r2, r2, #1
 800757c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800757e:	f7ff fe5f 	bl	8007240 <HAL_GetTick>
 8007582:	1b03      	subs	r3, r0, r4
 8007584:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007586:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007588:	d9ee      	bls.n	8007568 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	07d2      	lsls	r2, r2, #31
 800758e:	d5d7      	bpl.n	8007540 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	07d0      	lsls	r0, r2, #31
 8007594:	d5eb      	bpl.n	800756e <ADC_Enable+0x46>
  return HAL_OK;
 8007596:	2000      	movs	r0, #0
}
 8007598:	bd70      	pop	{r4, r5, r6, pc}
 800759a:	bf00      	nop
 800759c:	8000003f 	.word	0x8000003f
 80075a0:	7fffffc0 	.word	0x7fffffc0

080075a4 <HAL_ADC_Start>:
{
 80075a4:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80075a6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075a8:	689d      	ldr	r5, [r3, #8]
 80075aa:	f015 0504 	ands.w	r5, r5, #4
 80075ae:	d133      	bne.n	8007618 <HAL_ADC_Start+0x74>
    __HAL_LOCK(hadc);
 80075b0:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	4604      	mov	r4, r0
 80075b8:	d02e      	beq.n	8007618 <HAL_ADC_Start+0x74>
 80075ba:	2301      	movs	r3, #1
 80075bc:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80075c0:	f7ff ffb2 	bl	8007528 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80075c4:	bb50      	cbnz	r0, 800761c <HAL_ADC_Start+0x78>
      ADC_STATE_CLR_SET(hadc->State,
 80075c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80075cc:	f023 0301 	bic.w	r3, r3, #1
 80075d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d4:	65a3      	str	r3, [r4, #88]	@ 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075d8:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80075da:	bf48      	it	mi
 80075dc:	6de3      	ldrmi	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80075de:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc);
 80075e0:	bf52      	itee	pl
 80075e2:	65e0      	strpl	r0, [r4, #92]	@ 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80075e4:	f023 0306 	bicmi.w	r3, r3, #6
 80075e8:	65e3      	strmi	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80075ea:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 80075ec:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80075ee:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80075f0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80075f4:	68d3      	ldr	r3, [r2, #12]
 80075f6:	019b      	lsls	r3, r3, #6
 80075f8:	d505      	bpl.n	8007606 <HAL_ADC_Start+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80075fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007600:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007604:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8007606:	6893      	ldr	r3, [r2, #8]
 8007608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800760c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007610:	f043 0304 	orr.w	r3, r3, #4
 8007614:	6093      	str	r3, [r2, #8]
}
 8007616:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8007618:	2002      	movs	r0, #2
}
 800761a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 800761c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	bf00      	nop

08007624 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007624:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007626:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	0795      	lsls	r5, r2, #30
 800762c:	d502      	bpl.n	8007634 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800762e:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007630:	2000      	movs	r0, #0
}
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	07d4      	lsls	r4, r2, #31
 8007638:	d5fa      	bpl.n	8007630 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	f002 020d 	and.w	r2, r2, #13
 8007640:	2a01      	cmp	r2, #1
 8007642:	4604      	mov	r4, r0
 8007644:	d009      	beq.n	800765a <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007646:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007648:	f043 0310 	orr.w	r3, r3, #16
 800764c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800764e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8007656:	2001      	movs	r0, #1
}
 8007658:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007660:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007664:	2103      	movs	r1, #3
 8007666:	f042 0202 	orr.w	r2, r2, #2
 800766a:	609a      	str	r2, [r3, #8]
 800766c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800766e:	f7ff fde7 	bl	8007240 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8007678:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800767a:	d403      	bmi.n	8007684 <ADC_Disable+0x60>
 800767c:	e7d8      	b.n	8007630 <ADC_Disable+0xc>
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	07db      	lsls	r3, r3, #31
 8007682:	d5d5      	bpl.n	8007630 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007684:	f7ff fddc 	bl	8007240 <HAL_GetTick>
 8007688:	1b40      	subs	r0, r0, r5
 800768a:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800768c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800768e:	d9f6      	bls.n	800767e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	07d2      	lsls	r2, r2, #31
 8007694:	d5f3      	bpl.n	800767e <ADC_Disable+0x5a>
 8007696:	e7d6      	b.n	8007646 <ADC_Disable+0x22>

08007698 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8007698:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 800769c:	2b01      	cmp	r3, #1
 800769e:	d01d      	beq.n	80076dc <HAL_ADC_Stop+0x44>
 80076a0:	2301      	movs	r3, #1
{
 80076a2:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80076a4:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80076a6:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80076aa:	4604      	mov	r4, r0
 80076ac:	f7ff febc 	bl	8007428 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80076b0:	b118      	cbz	r0, 80076ba <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80076b2:	2300      	movs	r3, #0
 80076b4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80076b8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff ffb2 	bl	8007624 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1f6      	bne.n	80076b2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80076c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80076ca:	f023 0301 	bic.w	r3, r3, #1
 80076ce:	f043 0301 	orr.w	r3, r3, #1
 80076d2:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80076d4:	2300      	movs	r3, #0
 80076d6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80076da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80076dc:	2002      	movs	r0, #2
}
 80076de:	4770      	bx	lr

080076e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80076e0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80076e2:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 80076e6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80076e8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80076ea:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 80076ec:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80076ee:	d03f      	beq.n	8007770 <HAL_ADCEx_Calibration_Start+0x90>
 80076f0:	2301      	movs	r3, #1
 80076f2:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80076f6:	4604      	mov	r4, r0
 80076f8:	460d      	mov	r5, r1
 80076fa:	f7ff ff93 	bl	8007624 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8007700:	b9e0      	cbnz	r0, 800773c <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8007702:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007706:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800770a:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8007712:	6893      	ldr	r3, [r2, #8]
 8007714:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007718:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 800771c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007720:	430b      	orrs	r3, r1
 8007722:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007726:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007728:	6893      	ldr	r3, [r2, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	db0e      	blt.n	800774c <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800772e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007730:	f023 0303 	bic.w	r3, r3, #3
 8007734:	f043 0301 	orr.w	r3, r3, #1
 8007738:	65a3      	str	r3, [r4, #88]	@ 0x58
 800773a:	e002      	b.n	8007742 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800773c:	f043 0310 	orr.w	r3, r3, #16
 8007740:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007742:	2300      	movs	r3, #0
 8007744:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8007748:	b003      	add	sp, #12
 800774a:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800774c:	9b01      	ldr	r3, [sp, #4]
 800774e:	3301      	adds	r3, #1
 8007750:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007752:	9b01      	ldr	r3, [sp, #4]
 8007754:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8007758:	d3e6      	bcc.n	8007728 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800775a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800775c:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8007760:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8007762:	f043 0310 	orr.w	r3, r3, #16
 8007766:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8007768:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 800776c:	2001      	movs	r0, #1
 800776e:	e7eb      	b.n	8007748 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8007770:	2002      	movs	r0, #2
}
 8007772:	b003      	add	sp, #12
 8007774:	bd30      	pop	{r4, r5, pc}
 8007776:	bf00      	nop

08007778 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800777a:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800777e:	6904      	ldr	r4, [r0, #16]
{
 8007780:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8007782:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8007784:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8007786:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8007788:	f000 8180 	beq.w	8007a8c <HAL_ADCEx_InjectedConfigChannel+0x314>
 800778c:	4684      	mov	ip, r0
 800778e:	2301      	movs	r3, #1
 8007790:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8007794:	e9d1 2000 	ldrd	r2, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007798:	f8dc 3000 	ldr.w	r3, [ip]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800779c:	2c00      	cmp	r4, #0
 800779e:	d064      	beq.n	800786a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80077a0:	698c      	ldr	r4, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80077a2:	2c01      	cmp	r4, #1
 80077a4:	d061      	beq.n	800786a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80077a6:	f8dc 6064 	ldr.w	r6, [ip, #100]	@ 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80077aa:	f000 001f 	and.w	r0, r0, #31
 80077ae:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80077b2:	4085      	lsls	r5, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	f040 80c6 	bne.w	8007946 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80077ba:	6a08      	ldr	r0, [r1, #32]
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80077bc:	3c01      	subs	r4, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80077be:	2800      	cmp	r0, #0
 80077c0:	f000 81c9 	beq.w	8007b56 <HAL_ADCEx_InjectedConfigChannel+0x3de>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80077c4:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80077c6:	f000 003c 	and.w	r0, r0, #60	@ 0x3c
 80077ca:	4320      	orrs	r0, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80077cc:	4330      	orrs	r0, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80077ce:	4328      	orrs	r0, r5
 80077d0:	e9cc 0418 	strd	r0, r4, [ip, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077d4:	6898      	ldr	r0, [r3, #8]
 80077d6:	0707      	lsls	r7, r0, #28
 80077d8:	d40d      	bmi.n	80077f6 <HAL_ADCEx_InjectedConfigChannel+0x7e>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80077da:	7f88      	ldrb	r0, [r1, #30]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80077dc:	7f4c      	ldrb	r4, [r1, #29]
      MODIFY_REG(hadc->Instance->CFGR,
 80077de:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80077e0:	2c00      	cmp	r4, #0
 80077e2:	f040 80a6 	bne.w	8007932 <HAL_ADCEx_InjectedConfigChannel+0x1ba>
      MODIFY_REG(hadc->Instance->CFGR,
 80077e6:	68dc      	ldr	r4, [r3, #12]
 80077e8:	7f0d      	ldrb	r5, [r1, #28]
 80077ea:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 80077ee:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 80077f2:	4320      	orrs	r0, r4
 80077f4:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077f6:	6898      	ldr	r0, [r3, #8]
 80077f8:	f010 0004 	ands.w	r0, r0, #4
 80077fc:	d04c      	beq.n	8007898 <HAL_ADCEx_InjectedConfigChannel+0x120>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077fe:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007800:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007802:	689c      	ldr	r4, [r3, #8]
 8007804:	07e5      	lsls	r5, r4, #31
 8007806:	d413      	bmi.n	8007830 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8007808:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800780a:	4cab      	ldr	r4, [pc, #684]	@ (8007ab8 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 800780c:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 8007810:	f006 0718 	and.w	r7, r6, #24
 8007814:	40fc      	lsrs	r4, r7
 8007816:	f3c2 0712 	ubfx	r7, r2, #0, #19
 800781a:	4014      	ands	r4, r2
 800781c:	ea25 0e07 	bic.w	lr, r5, r7
 8007820:	ea44 040e 	orr.w	r4, r4, lr
 8007824:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007828:	4ca4      	ldr	r4, [pc, #656]	@ (8007abc <HAL_ADCEx_InjectedConfigChannel+0x344>)
 800782a:	42a6      	cmp	r6, r4
 800782c:	f000 80b7 	beq.w	800799e <HAL_ADCEx_InjectedConfigChannel+0x226>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8007830:	49a3      	ldr	r1, [pc, #652]	@ (8007ac0 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8007832:	420a      	tst	r2, r1
 8007834:	d014      	beq.n	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007836:	4da3      	ldr	r5, [pc, #652]	@ (8007ac4 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8007838:	4ca3      	ldr	r4, [pc, #652]	@ (8007ac8 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 800783a:	68a9      	ldr	r1, [r5, #8]
 800783c:	42a2      	cmp	r2, r4
 800783e:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8007842:	f000 80fe 	beq.w	8007a42 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8007846:	4ca1      	ldr	r4, [pc, #644]	@ (8007acc <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8007848:	42a2      	cmp	r2, r4
 800784a:	f000 8099 	beq.w	8007980 <HAL_ADCEx_InjectedConfigChannel+0x208>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800784e:	4ca0      	ldr	r4, [pc, #640]	@ (8007ad0 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8007850:	42a2      	cmp	r2, r4
 8007852:	d105      	bne.n	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007854:	024a      	lsls	r2, r1, #9
 8007856:	d403      	bmi.n	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8007858:	4a9e      	ldr	r2, [pc, #632]	@ (8007ad4 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	f000 81bd 	beq.w	8007bda <HAL_ADCEx_InjectedConfigChannel+0x462>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007860:	2300      	movs	r3, #0
 8007862:	f88c 3054 	strb.w	r3, [ip, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8007866:	b003      	add	sp, #12
 8007868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800786a:	2808      	cmp	r0, #8
 800786c:	d1b2      	bne.n	80077d4 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800786e:	6a08      	ldr	r0, [r1, #32]
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007870:	0c94      	lsrs	r4, r2, #18
 8007872:	f404 54f8 	and.w	r4, r4, #7936	@ 0x1f00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007876:	b120      	cbz	r0, 8007882 <HAL_ADCEx_InjectedConfigChannel+0x10a>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007878:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800787a:	f000 003c 	and.w	r0, r0, #60	@ 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800787e:	4328      	orrs	r0, r5
 8007880:	4304      	orrs	r4, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8007882:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007884:	4d94      	ldr	r5, [pc, #592]	@ (8007ad8 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8007886:	4028      	ands	r0, r5
 8007888:	4320      	orrs	r0, r4
 800788a:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800788c:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800788e:	f8cc 4060 	str.w	r4, [ip, #96]	@ 0x60
 8007892:	0707      	lsls	r7, r0, #28
 8007894:	d4af      	bmi.n	80077f6 <HAL_ADCEx_InjectedConfigChannel+0x7e>
 8007896:	e7a0      	b.n	80077da <HAL_ADCEx_InjectedConfigChannel+0x62>
 8007898:	689c      	ldr	r4, [r3, #8]
 800789a:	0726      	lsls	r6, r4, #28
 800789c:	d4b1      	bmi.n	8007802 <HAL_ADCEx_InjectedConfigChannel+0x8a>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800789e:	6a0c      	ldr	r4, [r1, #32]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80078a0:	7f48      	ldrb	r0, [r1, #29]
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80078a2:	2c00      	cmp	r4, #0
 80078a4:	d164      	bne.n	8007970 <HAL_ADCEx_InjectedConfigChannel+0x1f8>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80078a6:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80078a8:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80078aa:	f000 8156 	beq.w	8007b5a <HAL_ADCEx_InjectedConfigChannel+0x3e2>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80078ae:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80078b2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078b4:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80078b6:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
 80078ba:	2c01      	cmp	r4, #1
 80078bc:	f000 80f1 	beq.w	8007aa2 <HAL_ADCEx_InjectedConfigChannel+0x32a>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80078c0:	691c      	ldr	r4, [r3, #16]
 80078c2:	f024 0402 	bic.w	r4, r4, #2
 80078c6:	611c      	str	r4, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80078c8:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 80078ca:	f3c2 5604 	ubfx	r6, r2, #20, #5
 80078ce:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80078d0:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 80078d2:	40b4      	lsls	r4, r6
 80078d4:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80078d8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80078dc:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80078e0:	f103 0714 	add.w	r7, r3, #20
 80078e4:	f000 80d5 	beq.w	8007a92 <HAL_ADCEx_InjectedConfigChannel+0x31a>
  MODIFY_REG(*preg,
 80078e8:	40b5      	lsls	r5, r6
 80078ea:	58be      	ldr	r6, [r7, r2]
 80078ec:	4034      	ands	r4, r6
 80078ee:	432c      	orrs	r4, r5
 80078f0:	50bc      	str	r4, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80078f8:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80078fa:	e9d1 7404 	ldrd	r7, r4, [r1, #16]
 80078fe:	2f04      	cmp	r7, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8007900:	68de      	ldr	r6, [r3, #12]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8007902:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007904:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007908:	f000 80ee 	beq.w	8007ae8 <HAL_ADCEx_InjectedConfigChannel+0x370>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800790c:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8007910:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8007912:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8007916:	40b4      	lsls	r4, r6
 8007918:	4e70      	ldr	r6, [pc, #448]	@ (8007adc <HAL_ADCEx_InjectedConfigChannel+0x364>)
 800791a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800791e:	ea0e 0606 	and.w	r6, lr, r6
 8007922:	4316      	orrs	r6, r2
 8007924:	4334      	orrs	r4, r6
 8007926:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 800792a:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800792e:	680a      	ldr	r2, [r1, #0]
}
 8007930:	e767      	b.n	8007802 <HAL_ADCEx_InjectedConfigChannel+0x8a>
      MODIFY_REG(hadc->Instance->CFGR,
 8007932:	68dc      	ldr	r4, [r3, #12]
 8007934:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 8007938:	4320      	orrs	r0, r4
 800793a:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800793c:	6898      	ldr	r0, [r3, #8]
 800793e:	f010 0004 	ands.w	r0, r0, #4
 8007942:	d0a9      	beq.n	8007898 <HAL_ADCEx_InjectedConfigChannel+0x120>
 8007944:	e75b      	b.n	80077fe <HAL_ADCEx_InjectedConfigChannel+0x86>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8007946:	f8dc 4060 	ldr.w	r4, [ip, #96]	@ 0x60
    hadc->InjectionConfig.ChannelCount--;
 800794a:	3e01      	subs	r6, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800794c:	432c      	orrs	r4, r5
    hadc->InjectionConfig.ChannelCount--;
 800794e:	f8cc 6064 	str.w	r6, [ip, #100]	@ 0x64
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8007952:	f8cc 4060 	str.w	r4, [ip, #96]	@ 0x60
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007956:	2e00      	cmp	r6, #0
 8007958:	f47f af3c 	bne.w	80077d4 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800795c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800795e:	4d5e      	ldr	r5, [pc, #376]	@ (8007ad8 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8007960:	4028      	ands	r0, r5
 8007962:	4320      	orrs	r0, r4
 8007964:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007966:	6898      	ldr	r0, [r3, #8]
 8007968:	0707      	lsls	r7, r0, #28
 800796a:	f53f af44 	bmi.w	80077f6 <HAL_ADCEx_InjectedConfigChannel+0x7e>
 800796e:	e734      	b.n	80077da <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8007970:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8007972:	2c00      	cmp	r4, #0
 8007974:	d097      	beq.n	80078a6 <HAL_ADCEx_InjectedConfigChannel+0x12e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007976:	2801      	cmp	r0, #1
 8007978:	f000 8128 	beq.w	8007bcc <HAL_ADCEx_InjectedConfigChannel+0x454>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800797c:	68d8      	ldr	r0, [r3, #12]
 800797e:	e796      	b.n	80078ae <HAL_ADCEx_InjectedConfigChannel+0x136>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007980:	01c9      	lsls	r1, r1, #7
 8007982:	f53f af6d 	bmi.w	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007986:	4a53      	ldr	r2, [pc, #332]	@ (8007ad4 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	f47f af69 	bne.w	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800798e:	68ab      	ldr	r3, [r5, #8]
 8007990:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007994:	4333      	orrs	r3, r6
 8007996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800799a:	60ab      	str	r3, [r5, #8]
}
 800799c:	e760      	b.n	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800799e:	bb47      	cbnz	r7, 80079f2 <HAL_ADCEx_InjectedConfigChannel+0x27a>
 80079a0:	0e94      	lsrs	r4, r2, #26
 80079a2:	3401      	adds	r4, #1
 80079a4:	f004 051f 	and.w	r5, r4, #31
 80079a8:	2201      	movs	r2, #1
 80079aa:	06a4      	lsls	r4, r4, #26
 80079ac:	40aa      	lsls	r2, r5
 80079ae:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079b2:	2d09      	cmp	r5, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80079b4:	ea44 0402 	orr.w	r4, r4, r2
 80079b8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079bc:	d93f      	bls.n	8007a3e <HAL_ADCEx_InjectedConfigChannel+0x2c6>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80079be:	3a1e      	subs	r2, #30
 80079c0:	0512      	lsls	r2, r2, #20
 80079c2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079c6:	4314      	orrs	r4, r2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80079c8:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 80079ca:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80079cc:	f005 0504 	and.w	r5, r5, #4
 80079d0:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80079d4:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80079d8:	fa02 f704 	lsl.w	r7, r2, r4
 80079dc:	f04f 0e07 	mov.w	lr, #7
 80079e0:	5972      	ldr	r2, [r6, r5]
 80079e2:	fa0e f404 	lsl.w	r4, lr, r4
 80079e6:	ea22 0204 	bic.w	r2, r2, r4
 80079ea:	433a      	orrs	r2, r7
 80079ec:	5172      	str	r2, [r6, r5]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80079ee:	680a      	ldr	r2, [r1, #0]
}
 80079f0:	e71e      	b.n	8007830 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f2:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80079f6:	fab4 f484 	clz	r4, r4
 80079fa:	3401      	adds	r4, #1
 80079fc:	f004 041f 	and.w	r4, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a00:	2c09      	cmp	r4, #9
 8007a02:	f200 80ae 	bhi.w	8007b62 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8007a06:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007a0a:	fab4 f484 	clz	r4, r4
 8007a0e:	fa92 f5a2 	rbit	r5, r2
 8007a12:	fab5 f585 	clz	r5, r5
 8007a16:	3401      	adds	r4, #1
 8007a18:	3501      	adds	r5, #1
 8007a1a:	2601      	movs	r6, #1
 8007a1c:	06a4      	lsls	r4, r4, #26
 8007a1e:	f005 051f 	and.w	r5, r5, #31
 8007a22:	fa06 f505 	lsl.w	r5, r6, r5
 8007a26:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007a2a:	432c      	orrs	r4, r5
 8007a2c:	fa92 f2a2 	rbit	r2, r2
 8007a30:	fab2 f282 	clz	r2, r2
 8007a34:	4432      	add	r2, r6
 8007a36:	f002 021f 	and.w	r2, r2, #31
 8007a3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007a3e:	0512      	lsls	r2, r2, #20
 8007a40:	e7c1      	b.n	80079c6 <HAL_ADCEx_InjectedConfigChannel+0x24e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007a42:	020c      	lsls	r4, r1, #8
 8007a44:	f53f af0c 	bmi.w	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a48:	4a22      	ldr	r2, [pc, #136]	@ (8007ad4 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	f47f af08 	bne.w	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007a50:	68ab      	ldr	r3, [r5, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8007a52:	4a23      	ldr	r2, [pc, #140]	@ (8007ae0 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8007a54:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007a58:	4333      	orrs	r3, r6
 8007a5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a5e:	60ab      	str	r3, [r5, #8]
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	4a20      	ldr	r2, [pc, #128]	@ (8007ae4 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8007a64:	099b      	lsrs	r3, r3, #6
 8007a66:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6a:	099b      	lsrs	r3, r3, #6
 8007a6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	3318      	adds	r3, #24
 8007a74:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8007a76:	9b01      	ldr	r3, [sp, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f43f aef1 	beq.w	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
          wait_loop_index--;
 8007a7e:	9b01      	ldr	r3, [sp, #4]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8007a84:	9b01      	ldr	r3, [sp, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1f9      	bne.n	8007a7e <HAL_ADCEx_InjectedConfigChannel+0x306>
 8007a8a:	e6e9      	b.n	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  __HAL_LOCK(hadc);
 8007a8c:	2002      	movs	r0, #2
}
 8007a8e:	b003      	add	sp, #12
 8007a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(*preg,
 8007a92:	58bd      	ldr	r5, [r7, r2]
 8007a94:	402c      	ands	r4, r5
 8007a96:	50bc      	str	r4, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007a9e:	615a      	str	r2, [r3, #20]
}
 8007aa0:	e72b      	b.n	80078fa <HAL_ADCEx_InjectedConfigChannel+0x182>
      MODIFY_REG(hadc->Instance->CFGR2,
 8007aa2:	e9d1 460b 	ldrd	r4, r6, [r1, #44]	@ 0x2c
 8007aa6:	691d      	ldr	r5, [r3, #16]
 8007aa8:	4334      	orrs	r4, r6
 8007aaa:	f425 75ff 	bic.w	r5, r5, #510	@ 0x1fe
 8007aae:	432c      	orrs	r4, r5
 8007ab0:	f044 0402 	orr.w	r4, r4, #2
 8007ab4:	611c      	str	r4, [r3, #16]
 8007ab6:	e707      	b.n	80078c8 <HAL_ADCEx_InjectedConfigChannel+0x150>
 8007ab8:	0007ffff 	.word	0x0007ffff
 8007abc:	407f0000 	.word	0x407f0000
 8007ac0:	80080000 	.word	0x80080000
 8007ac4:	50040300 	.word	0x50040300
 8007ac8:	c7520000 	.word	0xc7520000
 8007acc:	cb840000 	.word	0xcb840000
 8007ad0:	80000001 	.word	0x80000001
 8007ad4:	50040000 	.word	0x50040000
 8007ad8:	82082000 	.word	0x82082000
 8007adc:	03fff000 	.word	0x03fff000
 8007ae0:	200001e0 	.word	0x200001e0
 8007ae4:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007ae8:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8007aea:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007aec:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007af0:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007af4:	2c00      	cmp	r4, #0
 8007af6:	d051      	beq.n	8007b9c <HAL_ADCEx_InjectedConfigChannel+0x424>
 8007af8:	fa92 f4a2 	rbit	r4, r2
 8007afc:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	f000 8096 	beq.w	8007c32 <HAL_ADCEx_InjectedConfigChannel+0x4ba>
 8007b06:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8007b08:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007b0a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007b0e:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007b12:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007b16:	42b4      	cmp	r4, r6
 8007b18:	d078      	beq.n	8007c0c <HAL_ADCEx_InjectedConfigChannel+0x494>
 8007b1a:	68ac      	ldr	r4, [r5, #8]
 8007b1c:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b1e:	f105 0708 	add.w	r7, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007b22:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007b26:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007b2a:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007b2e:	42b4      	cmp	r4, r6
 8007b30:	d05b      	beq.n	8007bea <HAL_ADCEx_InjectedConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007b32:	68ec      	ldr	r4, [r5, #12]
 8007b34:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007b36:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007b38:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007b3c:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007b40:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007b44:	42b4      	cmp	r4, r6
 8007b46:	f47f ae5c 	bne.w	8007802 <HAL_ADCEx_InjectedConfigChannel+0x8a>
  MODIFY_REG(*preg,
 8007b4a:	682a      	ldr	r2, [r5, #0]
 8007b4c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007b50:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8007b52:	680a      	ldr	r2, [r1, #0]
}
 8007b54:	e655      	b.n	8007802 <HAL_ADCEx_InjectedConfigChannel+0x8a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8007b56:	4620      	mov	r0, r4
 8007b58:	e639      	b.n	80077ce <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007b5a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8007b5e:	60d8      	str	r0, [r3, #12]
 8007b60:	e6a8      	b.n	80078b4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8007b62:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007b66:	fab4 f484 	clz	r4, r4
 8007b6a:	fa92 f5a2 	rbit	r5, r2
 8007b6e:	fab5 f585 	clz	r5, r5
 8007b72:	3401      	adds	r4, #1
 8007b74:	3501      	adds	r5, #1
 8007b76:	2601      	movs	r6, #1
 8007b78:	06a4      	lsls	r4, r4, #26
 8007b7a:	f005 051f 	and.w	r5, r5, #31
 8007b7e:	fa06 f505 	lsl.w	r5, r6, r5
 8007b82:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007b86:	432c      	orrs	r4, r5
 8007b88:	fa92 f2a2 	rbit	r2, r2
 8007b8c:	fab2 f282 	clz	r2, r2
 8007b90:	4432      	add	r2, r6
 8007b92:	f002 021f 	and.w	r2, r2, #31
 8007b96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007b9a:	e710      	b.n	80079be <HAL_ADCEx_InjectedConfigChannel+0x246>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007b9c:	f3c2 6484 	ubfx	r4, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007ba0:	42a6      	cmp	r6, r4
 8007ba2:	d046      	beq.n	8007c32 <HAL_ADCEx_InjectedConfigChannel+0x4ba>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007ba4:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8007ba6:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ba8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007bac:	42a6      	cmp	r6, r4
 8007bae:	d02d      	beq.n	8007c0c <HAL_ADCEx_InjectedConfigChannel+0x494>
 8007bb0:	68ae      	ldr	r6, [r5, #8]
 8007bb2:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bb4:	f105 0708 	add.w	r7, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007bb8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007bbc:	42a6      	cmp	r6, r4
 8007bbe:	d014      	beq.n	8007bea <HAL_ADCEx_InjectedConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007bc0:	68ee      	ldr	r6, [r5, #12]
 8007bc2:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bc4:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007bc6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007bca:	e7bb      	b.n	8007b44 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007bcc:	f8dc 4058 	ldr.w	r4, [ip, #88]	@ 0x58
 8007bd0:	f044 0420 	orr.w	r4, r4, #32
 8007bd4:	f8cc 4058 	str.w	r4, [ip, #88]	@ 0x58
        tmp_hal_status = HAL_ERROR;
 8007bd8:	e66d      	b.n	80078b6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007bda:	68ab      	ldr	r3, [r5, #8]
 8007bdc:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007be0:	4333      	orrs	r3, r6
 8007be2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007be6:	60ab      	str	r3, [r5, #8]
}
 8007be8:	e63a      	b.n	8007860 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(*preg,
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bf0:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007bf2:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007bf4:	680a      	ldr	r2, [r1, #0]
 8007bf6:	68ee      	ldr	r6, [r5, #12]
 8007bf8:	f3c2 0412 	ubfx	r4, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bfc:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007bfe:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007c02:	2c00      	cmp	r4, #0
 8007c04:	d19a      	bne.n	8007b3c <HAL_ADCEx_InjectedConfigChannel+0x3c4>
 8007c06:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8007c0a:	e79b      	b.n	8007b44 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
  MODIFY_REG(*preg,
 8007c0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007c0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007c12:	665a      	str	r2, [r3, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007c14:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007c16:	680a      	ldr	r2, [r1, #0]
 8007c18:	68ae      	ldr	r6, [r5, #8]
 8007c1a:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007c1e:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007c22:	f105 0708 	add.w	r7, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007c26:	2c00      	cmp	r4, #0
 8007c28:	f47f af7d 	bne.w	8007b26 <HAL_ADCEx_InjectedConfigChannel+0x3ae>
 8007c2c:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8007c30:	e7c4      	b.n	8007bbc <HAL_ADCEx_InjectedConfigChannel+0x444>
  MODIFY_REG(*preg,
 8007c32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007c34:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007c38:	661a      	str	r2, [r3, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007c3a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007c3c:	680a      	ldr	r2, [r1, #0]
 8007c3e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8007c40:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007c44:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007c48:	2c00      	cmp	r4, #0
 8007c4a:	f47f af60 	bne.w	8007b0e <HAL_ADCEx_InjectedConfigChannel+0x396>
 8007c4e:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8007c52:	e7ab      	b.n	8007bac <HAL_ADCEx_InjectedConfigChannel+0x434>

08007c54 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c54:	4907      	ldr	r1, [pc, #28]	@ (8007c74 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007c56:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c58:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c5a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c62:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c64:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c66:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8007c6e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	e000ed00 	.word	0xe000ed00

08007c78 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c78:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce8 <HAL_NVIC_SetPriority+0x70>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c80:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c82:	f1c3 0e07 	rsb	lr, r3, #7
 8007c86:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c8a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c8e:	bf28      	it	cs
 8007c90:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c94:	f1bc 0f06 	cmp.w	ip, #6
 8007c98:	d91c      	bls.n	8007cd4 <HAL_NVIC_SetPriority+0x5c>
 8007c9a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca2:	fa03 f30c 	lsl.w	r3, r3, ip
 8007ca6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007caa:	f04f 33ff 	mov.w	r3, #4294967295
 8007cae:	fa03 f30e 	lsl.w	r3, r3, lr
 8007cb2:	ea21 0303 	bic.w	r3, r1, r3
 8007cb6:	fa03 f30c 	lsl.w	r3, r3, ip
 8007cba:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cbc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8007cbe:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cc0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8007cc2:	db0a      	blt.n	8007cda <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cc4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8007cc8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007ccc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cd4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cd6:	4694      	mov	ip, r2
 8007cd8:	e7e7      	b.n	8007caa <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cda:	4a04      	ldr	r2, [pc, #16]	@ (8007cec <HAL_NVIC_SetPriority+0x74>)
 8007cdc:	f000 000f 	and.w	r0, r0, #15
 8007ce0:	4402      	add	r2, r0
 8007ce2:	7613      	strb	r3, [r2, #24]
 8007ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ce8:	e000ed00 	.word	0xe000ed00
 8007cec:	e000ecfc 	.word	0xe000ecfc

08007cf0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	db07      	blt.n	8007d04 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007cf4:	0941      	lsrs	r1, r0, #5
 8007cf6:	4a04      	ldr	r2, [pc, #16]	@ (8007d08 <HAL_NVIC_EnableIRQ+0x18>)
 8007cf8:	f000 001f 	and.w	r0, r0, #31
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4083      	lsls	r3, r0
 8007d00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	e000e100 	.word	0xe000e100

08007d0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d0c:	3801      	subs	r0, #1
 8007d0e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8007d12:	d301      	bcc.n	8007d18 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d14:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007d16:	4770      	bx	lr
{
 8007d18:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d1e:	4c07      	ldr	r4, [pc, #28]	@ (8007d3c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d20:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d22:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8007d26:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d2a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d2c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d2e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d30:	619a      	str	r2, [r3, #24]
}
 8007d32:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d36:	6119      	str	r1, [r3, #16]
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	e000ed00 	.word	0xe000ed00

08007d40 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007d40:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8007d44:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007d46:	6913      	ldr	r3, [r2, #16]
 8007d48:	bf0c      	ite	eq
 8007d4a:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007d4e:	f023 0304 	bicne.w	r3, r3, #4
 8007d52:	6113      	str	r3, [r2, #16]
  }
}
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop

08007d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d5c:	680c      	ldr	r4, [r1, #0]
{
 8007d5e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d60:	2c00      	cmp	r4, #0
 8007d62:	f000 8098 	beq.w	8007e96 <HAL_GPIO_Init+0x13e>
  uint32_t position = 0x00u;
 8007d66:	2200      	movs	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007d68:	f04f 0901 	mov.w	r9, #1
 8007d6c:	fa09 f502 	lsl.w	r5, r9, r2

    if (iocurrent != 0x00u)
 8007d70:	ea15 0a04 	ands.w	sl, r5, r4
 8007d74:	f000 808a 	beq.w	8007e8c <HAL_GPIO_Init+0x134>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d78:	684b      	ldr	r3, [r1, #4]
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007d7a:	688f      	ldr	r7, [r1, #8]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d7c:	f023 0e10 	bic.w	lr, r3, #16
 8007d80:	ea4f 0c42 	mov.w	ip, r2, lsl #1
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007d84:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d86:	f10e 3bff 	add.w	fp, lr, #4294967295
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007d8a:	fa07 f80c 	lsl.w	r8, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d8e:	f1bb 0f01 	cmp.w	fp, #1
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007d92:	fa06 f70c 	lsl.w	r7, r6, ip
 8007d96:	ea6f 0707 	mvn.w	r7, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d9a:	d97f      	bls.n	8007e9c <HAL_GPIO_Init+0x144>
      temp = GPIOx->PUPDR;
 8007d9c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007d9e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007da0:	ea45 0508 	orr.w	r5, r5, r8
      GPIOx->PUPDR = temp;
 8007da4:	60c5      	str	r5, [r0, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007da6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007da8:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007daa:	ea03 0506 	and.w	r5, r3, r6
 8007dae:	fa05 f50c 	lsl.w	r5, r5, ip
 8007db2:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007db4:	00df      	lsls	r7, r3, #3
      GPIOx->MODER = temp;
 8007db6:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007db8:	d568      	bpl.n	8007e8c <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dba:	4f70      	ldr	r7, [pc, #448]	@ (8007f7c <HAL_GPIO_Init+0x224>)
 8007dbc:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8007dbe:	f045 0501 	orr.w	r5, r5, #1
 8007dc2:	663d      	str	r5, [r7, #96]	@ 0x60
 8007dc4:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8007dc6:	f005 0501 	and.w	r5, r5, #1
 8007dca:	9501      	str	r5, [sp, #4]
 8007dcc:	9d01      	ldr	r5, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007dce:	f022 0503 	bic.w	r5, r2, #3
 8007dd2:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8007dd6:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007dda:	f002 0c03 	and.w	ip, r2, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8007dde:	68af      	ldr	r7, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007de0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007de4:	260f      	movs	r6, #15
 8007de6:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007dea:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007dee:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007df2:	d027      	beq.n	8007e44 <HAL_GPIO_Init+0xec>
 8007df4:	4e62      	ldr	r6, [pc, #392]	@ (8007f80 <HAL_GPIO_Init+0x228>)
 8007df6:	42b0      	cmp	r0, r6
 8007df8:	f000 809f 	beq.w	8007f3a <HAL_GPIO_Init+0x1e2>
 8007dfc:	4e61      	ldr	r6, [pc, #388]	@ (8007f84 <HAL_GPIO_Init+0x22c>)
 8007dfe:	42b0      	cmp	r0, r6
 8007e00:	f000 80a0 	beq.w	8007f44 <HAL_GPIO_Init+0x1ec>
 8007e04:	f8df e184 	ldr.w	lr, [pc, #388]	@ 8007f8c <HAL_GPIO_Init+0x234>
 8007e08:	4570      	cmp	r0, lr
 8007e0a:	f000 8090 	beq.w	8007f2e <HAL_GPIO_Init+0x1d6>
 8007e0e:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8007f90 <HAL_GPIO_Init+0x238>
 8007e12:	4570      	cmp	r0, lr
 8007e14:	f000 80a4 	beq.w	8007f60 <HAL_GPIO_Init+0x208>
 8007e18:	f8df e178 	ldr.w	lr, [pc, #376]	@ 8007f94 <HAL_GPIO_Init+0x23c>
 8007e1c:	4570      	cmp	r0, lr
 8007e1e:	f000 80a6 	beq.w	8007f6e <HAL_GPIO_Init+0x216>
 8007e22:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8007f98 <HAL_GPIO_Init+0x240>
 8007e26:	4570      	cmp	r0, lr
 8007e28:	f000 8093 	beq.w	8007f52 <HAL_GPIO_Init+0x1fa>
 8007e2c:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8007f9c <HAL_GPIO_Init+0x244>
 8007e30:	4570      	cmp	r0, lr
 8007e32:	bf0c      	ite	eq
 8007e34:	f04f 0e07 	moveq.w	lr, #7
 8007e38:	f04f 0e08 	movne.w	lr, #8
 8007e3c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007e40:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007e44:	60af      	str	r7, [r5, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007e46:	4d50      	ldr	r5, [pc, #320]	@ (8007f88 <HAL_GPIO_Init+0x230>)
 8007e48:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e4a:	03de      	lsls	r6, r3, #15
        temp &= ~(iocurrent);
 8007e4c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8007e50:	4e4d      	ldr	r6, [pc, #308]	@ (8007f88 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8007e52:	bf54      	ite	pl
 8007e54:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007e56:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->IMR1 = temp;
 8007e5a:	6035      	str	r5, [r6, #0]

        temp = EXTI->EMR1;
 8007e5c:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e5e:	039e      	lsls	r6, r3, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8007e60:	4e49      	ldr	r6, [pc, #292]	@ (8007f88 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8007e62:	bf54      	ite	pl
 8007e64:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007e66:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 8007e6a:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e6c:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e6e:	02de      	lsls	r6, r3, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8007e70:	4e45      	ldr	r6, [pc, #276]	@ (8007f88 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8007e72:	bf54      	ite	pl
 8007e74:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007e76:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR1 = temp;
 8007e7a:	60b5      	str	r5, [r6, #8]

        temp = EXTI->FTSR1;
 8007e7c:	68f5      	ldr	r5, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e7e:	029b      	lsls	r3, r3, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8007e80:	4b41      	ldr	r3, [pc, #260]	@ (8007f88 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8007e82:	bf54      	ite	pl
 8007e84:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007e86:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 8007e8a:	60dd      	str	r5, [r3, #12]
      }
    }

    position++;
 8007e8c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e8e:	fa34 f302 	lsrs.w	r3, r4, r2
 8007e92:	f47f af6b 	bne.w	8007d6c <HAL_GPIO_Init+0x14>
  }
}
 8007e96:	b003      	add	sp, #12
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007e9c:	f8d0 b008 	ldr.w	fp, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007ea0:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007ea2:	ea0b 0b07 	and.w	fp, fp, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007ea6:	fa06 fa0c 	lsl.w	sl, r6, ip
 8007eaa:	ea4a 0a0b 	orr.w	sl, sl, fp
        GPIOx->OSPEEDR = temp;
 8007eae:	f8c0 a008 	str.w	sl, [r0, #8]
        temp = GPIOx->OTYPER;
 8007eb2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007eb6:	ea2a 0a05 	bic.w	sl, sl, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007eba:	091d      	lsrs	r5, r3, #4
 8007ebc:	4095      	lsls	r5, r2
 8007ebe:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8007ec2:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8007ec4:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007ec6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007ec8:	ea45 0508 	orr.w	r5, r5, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ecc:	f003 0303 	and.w	r3, r3, #3
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ed0:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8007ed4:	60c5      	str	r5, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ed6:	fa03 f30c 	lsl.w	r3, r3, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007eda:	d009      	beq.n	8007ef0 <HAL_GPIO_Init+0x198>
      temp = GPIOx->MODER;
 8007edc:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007ede:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ee0:	432b      	orrs	r3, r5
    position++;
 8007ee2:	3201      	adds	r2, #1
      GPIOx->MODER = temp;
 8007ee4:	6003      	str	r3, [r0, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ee6:	fa34 f302 	lsrs.w	r3, r4, r2
 8007eea:	f47f af3f 	bne.w	8007d6c <HAL_GPIO_Init+0x14>
 8007eee:	e7d2      	b.n	8007e96 <HAL_GPIO_Init+0x13e>
        temp = GPIOx->AFR[position >> 3u];
 8007ef0:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007ef4:	690e      	ldr	r6, [r1, #16]
 8007ef6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007efa:	f002 0507 	and.w	r5, r2, #7
 8007efe:	00ad      	lsls	r5, r5, #2
        temp = GPIOx->AFR[position >> 3u];
 8007f00:	f8dc 8020 	ldr.w	r8, [ip, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f04:	fa06 fe05 	lsl.w	lr, r6, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007f08:	260f      	movs	r6, #15
 8007f0a:	fa06 f505 	lsl.w	r5, r6, r5
 8007f0e:	ea28 0505 	bic.w	r5, r8, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f12:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->AFR[position >> 3u] = temp;
 8007f16:	f8cc 5020 	str.w	r5, [ip, #32]
      temp = GPIOx->MODER;
 8007f1a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f1c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f1e:	432b      	orrs	r3, r5
    position++;
 8007f20:	3201      	adds	r2, #1
      GPIOx->MODER = temp;
 8007f22:	6003      	str	r3, [r0, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f24:	fa34 f302 	lsrs.w	r3, r4, r2
 8007f28:	f47f af20 	bne.w	8007d6c <HAL_GPIO_Init+0x14>
 8007f2c:	e7b3      	b.n	8007e96 <HAL_GPIO_Init+0x13e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f2e:	2603      	movs	r6, #3
 8007f30:	fa06 fc0c 	lsl.w	ip, r6, ip
 8007f34:	ea47 070c 	orr.w	r7, r7, ip
 8007f38:	e784      	b.n	8007e44 <HAL_GPIO_Init+0xec>
 8007f3a:	fa09 fc0c 	lsl.w	ip, r9, ip
 8007f3e:	ea47 070c 	orr.w	r7, r7, ip
 8007f42:	e77f      	b.n	8007e44 <HAL_GPIO_Init+0xec>
 8007f44:	f04f 0e02 	mov.w	lr, #2
 8007f48:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007f4c:	ea47 070c 	orr.w	r7, r7, ip
 8007f50:	e778      	b.n	8007e44 <HAL_GPIO_Init+0xec>
 8007f52:	f04f 0e06 	mov.w	lr, #6
 8007f56:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007f5a:	ea47 070c 	orr.w	r7, r7, ip
 8007f5e:	e771      	b.n	8007e44 <HAL_GPIO_Init+0xec>
 8007f60:	f04f 0e04 	mov.w	lr, #4
 8007f64:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007f68:	ea47 070c 	orr.w	r7, r7, ip
 8007f6c:	e76a      	b.n	8007e44 <HAL_GPIO_Init+0xec>
 8007f6e:	f04f 0e05 	mov.w	lr, #5
 8007f72:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007f76:	ea47 070c 	orr.w	r7, r7, ip
 8007f7a:	e763      	b.n	8007e44 <HAL_GPIO_Init+0xec>
 8007f7c:	40021000 	.word	0x40021000
 8007f80:	48000400 	.word	0x48000400
 8007f84:	48000800 	.word	0x48000800
 8007f88:	40010400 	.word	0x40010400
 8007f8c:	48000c00 	.word	0x48000c00
 8007f90:	48001000 	.word	0x48001000
 8007f94:	48001400 	.word	0x48001400
 8007f98:	48001800 	.word	0x48001800
 8007f9c:	48001c00 	.word	0x48001c00

08007fa0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	f000 8099 	beq.w	80080d8 <HAL_GPIO_DeInit+0x138>
{
 8007fa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007faa:	4e4c      	ldr	r6, [pc, #304]	@ (80080dc <HAL_GPIO_DeInit+0x13c>)
  uint32_t position = 0x00u;
 8007fac:	2300      	movs	r3, #0
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007fae:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007fb2:	f04f 0a03 	mov.w	sl, #3
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8007fba:	ea12 0e01 	ands.w	lr, r2, r1
 8007fbe:	d068      	beq.n	8008092 <HAL_GPIO_DeInit+0xf2>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8007fc0:	f023 0503 	bic.w	r5, r3, #3
 8007fc4:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8007fc8:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007fcc:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8007fd0:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007fd4:	00a4      	lsls	r4, r4, #2
 8007fd6:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007fda:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007fde:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007fe2:	d01e      	beq.n	8008022 <HAL_GPIO_DeInit+0x82>
 8007fe4:	4f3e      	ldr	r7, [pc, #248]	@ (80080e0 <HAL_GPIO_DeInit+0x140>)
 8007fe6:	42b8      	cmp	r0, r7
 8007fe8:	d059      	beq.n	800809e <HAL_GPIO_DeInit+0xfe>
 8007fea:	4f3e      	ldr	r7, [pc, #248]	@ (80080e4 <HAL_GPIO_DeInit+0x144>)
 8007fec:	42b8      	cmp	r0, r7
 8007fee:	d05a      	beq.n	80080a6 <HAL_GPIO_DeInit+0x106>
 8007ff0:	4f3d      	ldr	r7, [pc, #244]	@ (80080e8 <HAL_GPIO_DeInit+0x148>)
 8007ff2:	42b8      	cmp	r0, r7
 8007ff4:	d061      	beq.n	80080ba <HAL_GPIO_DeInit+0x11a>
 8007ff6:	4f3d      	ldr	r7, [pc, #244]	@ (80080ec <HAL_GPIO_DeInit+0x14c>)
 8007ff8:	42b8      	cmp	r0, r7
 8007ffa:	d063      	beq.n	80080c4 <HAL_GPIO_DeInit+0x124>
 8007ffc:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 80080f0 <HAL_GPIO_DeInit+0x150>
 8008000:	4558      	cmp	r0, fp
 8008002:	d055      	beq.n	80080b0 <HAL_GPIO_DeInit+0x110>
 8008004:	f8df b0ec 	ldr.w	fp, [pc, #236]	@ 80080f4 <HAL_GPIO_DeInit+0x154>
 8008008:	4558      	cmp	r0, fp
 800800a:	d060      	beq.n	80080ce <HAL_GPIO_DeInit+0x12e>
 800800c:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 80080f8 <HAL_GPIO_DeInit+0x158>
 8008010:	4558      	cmp	r0, fp
 8008012:	bf14      	ite	ne
 8008014:	f04f 0b08 	movne.w	fp, #8
 8008018:	f04f 0b07 	moveq.w	fp, #7
 800801c:	fa0b f404 	lsl.w	r4, fp, r4
 8008020:	e000      	b.n	8008024 <HAL_GPIO_DeInit+0x84>
 8008022:	2400      	movs	r4, #0
 8008024:	45a4      	cmp	ip, r4
 8008026:	d113      	bne.n	8008050 <HAL_GPIO_DeInit+0xb0>
        EXTI->IMR1 &= ~(iocurrent);
 8008028:	6834      	ldr	r4, [r6, #0]
 800802a:	ea24 040e 	bic.w	r4, r4, lr
 800802e:	6034      	str	r4, [r6, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008030:	6874      	ldr	r4, [r6, #4]
 8008032:	ea24 040e 	bic.w	r4, r4, lr
 8008036:	6074      	str	r4, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008038:	68b4      	ldr	r4, [r6, #8]
 800803a:	ea24 040e 	bic.w	r4, r4, lr
 800803e:	60b4      	str	r4, [r6, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8008040:	68f4      	ldr	r4, [r6, #12]
 8008042:	ea24 040e 	bic.w	r4, r4, lr
 8008046:	60f4      	str	r4, [r6, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008048:	68ac      	ldr	r4, [r5, #8]
 800804a:	ea24 0408 	bic.w	r4, r4, r8
 800804e:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008050:	6804      	ldr	r4, [r0, #0]
 8008052:	005d      	lsls	r5, r3, #1
 8008054:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008058:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800805c:	432c      	orrs	r4, r5
 800805e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8008062:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008064:	f003 0407 	and.w	r4, r3, #7
 8008068:	f8dc e020 	ldr.w	lr, [ip, #32]
 800806c:	00a4      	lsls	r4, r4, #2
 800806e:	fa09 f404 	lsl.w	r4, r9, r4
 8008072:	ea2e 0404 	bic.w	r4, lr, r4
 8008076:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800807a:	6884      	ldr	r4, [r0, #8]
 800807c:	ea24 0405 	bic.w	r4, r4, r5
 8008080:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008082:	6844      	ldr	r4, [r0, #4]
 8008084:	ea24 0202 	bic.w	r2, r4, r2
 8008088:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800808a:	68c2      	ldr	r2, [r0, #12]
 800808c:	ea22 0205 	bic.w	r2, r2, r5
 8008090:	60c2      	str	r2, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008092:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8008094:	fa31 f203 	lsrs.w	r2, r1, r3
 8008098:	d18d      	bne.n	8007fb6 <HAL_GPIO_DeInit+0x16>
  }
}
 800809a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800809e:	2701      	movs	r7, #1
 80080a0:	fa07 f404 	lsl.w	r4, r7, r4
 80080a4:	e7be      	b.n	8008024 <HAL_GPIO_DeInit+0x84>
 80080a6:	f04f 0b02 	mov.w	fp, #2
 80080aa:	fa0b f404 	lsl.w	r4, fp, r4
 80080ae:	e7b9      	b.n	8008024 <HAL_GPIO_DeInit+0x84>
 80080b0:	f04f 0b05 	mov.w	fp, #5
 80080b4:	fa0b f404 	lsl.w	r4, fp, r4
 80080b8:	e7b4      	b.n	8008024 <HAL_GPIO_DeInit+0x84>
 80080ba:	f04f 0b03 	mov.w	fp, #3
 80080be:	fa0b f404 	lsl.w	r4, fp, r4
 80080c2:	e7af      	b.n	8008024 <HAL_GPIO_DeInit+0x84>
 80080c4:	f04f 0b04 	mov.w	fp, #4
 80080c8:	fa0b f404 	lsl.w	r4, fp, r4
 80080cc:	e7aa      	b.n	8008024 <HAL_GPIO_DeInit+0x84>
 80080ce:	f04f 0b06 	mov.w	fp, #6
 80080d2:	fa0b f404 	lsl.w	r4, fp, r4
 80080d6:	e7a5      	b.n	8008024 <HAL_GPIO_DeInit+0x84>
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40010400 	.word	0x40010400
 80080e0:	48000400 	.word	0x48000400
 80080e4:	48000800 	.word	0x48000800
 80080e8:	48000c00 	.word	0x48000c00
 80080ec:	48001000 	.word	0x48001000
 80080f0:	48001400 	.word	0x48001400
 80080f4:	48001800 	.word	0x48001800
 80080f8:	48001c00 	.word	0x48001c00

080080fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80080fc:	6903      	ldr	r3, [r0, #16]
 80080fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008100:	bf14      	ite	ne
 8008102:	2001      	movne	r0, #1
 8008104:	2000      	moveq	r0, #0
 8008106:	4770      	bx	lr

08008108 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008108:	b10a      	cbz	r2, 800810e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800810a:	6181      	str	r1, [r0, #24]
 800810c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800810e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop

08008114 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008114:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008116:	ea01 0203 	and.w	r2, r1, r3
 800811a:	ea21 0103 	bic.w	r1, r1, r3
 800811e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008122:	6181      	str	r1, [r0, #24]
}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop

08008128 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008128:	4a04      	ldr	r2, [pc, #16]	@ (800813c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800812a:	6951      	ldr	r1, [r2, #20]
 800812c:	4201      	tst	r1, r0
 800812e:	d100      	bne.n	8008132 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008130:	4770      	bx	lr
{
 8008132:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008134:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008136:	f7f8 ffd5 	bl	80010e4 <HAL_GPIO_EXTI_Callback>
  }
}
 800813a:	bd08      	pop	{r3, pc}
 800813c:	40010400 	.word	0x40010400

08008140 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	460d      	mov	r5, r1
 8008144:	1c6e      	adds	r6, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008146:	6801      	ldr	r1, [r0, #0]
{
 8008148:	4604      	mov	r4, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800814a:	bf18      	it	ne
 800814c:	4616      	movne	r6, r2
 800814e:	d132      	bne.n	80081b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8008150:	698b      	ldr	r3, [r1, #24]
 8008152:	0798      	lsls	r0, r3, #30
 8008154:	d451      	bmi.n	80081fa <I2C_WaitOnTXISFlagUntilTimeout+0xba>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008156:	698b      	ldr	r3, [r1, #24]
 8008158:	06da      	lsls	r2, r3, #27
 800815a:	d5f9      	bpl.n	8008150 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800815c:	698b      	ldr	r3, [r1, #24]
 800815e:	069a      	lsls	r2, r3, #26
 8008160:	d5fc      	bpl.n	800815c <I2C_WaitOnTXISFlagUntilTimeout+0x1c>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008162:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008164:	2210      	movs	r2, #16
 8008166:	61ca      	str	r2, [r1, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008168:	61cb      	str	r3, [r1, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800816a:	698b      	ldr	r3, [r1, #24]
 800816c:	079e      	lsls	r6, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800816e:	bf44      	itt	mi
 8008170:	2300      	movmi	r3, #0
 8008172:	628b      	strmi	r3, [r1, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008174:	698b      	ldr	r3, [r1, #24]
 8008176:	07dd      	lsls	r5, r3, #31
 8008178:	d403      	bmi.n	8008182 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800817a:	698b      	ldr	r3, [r1, #24]
 800817c:	f043 0301 	orr.w	r3, r3, #1
 8008180:	618b      	str	r3, [r1, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008182:	684b      	ldr	r3, [r1, #4]
 8008184:	4a1e      	ldr	r2, [pc, #120]	@ (8008200 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)
 8008186:	4013      	ands	r3, r2
 8008188:	604b      	str	r3, [r1, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800818a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800818c:	2020      	movs	r0, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800818e:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008190:	f043 0304 	orr.w	r3, r3, #4
 8008194:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008196:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800819a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800819e:	2300      	movs	r3, #0
 80081a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80081a4:	2001      	movs	r0, #1
}
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a8:	f7ff f84a 	bl	8007240 <HAL_GetTick>
 80081ac:	1b83      	subs	r3, r0, r6
 80081ae:	42ab      	cmp	r3, r5
 80081b0:	d819      	bhi.n	80081e6 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
 80081b2:	b1c5      	cbz	r5, 80081e6 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081b4:	6821      	ldr	r1, [r4, #0]
 80081b6:	698b      	ldr	r3, [r1, #24]
 80081b8:	079b      	lsls	r3, r3, #30
 80081ba:	d41e      	bmi.n	80081fa <I2C_WaitOnTXISFlagUntilTimeout+0xba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081bc:	698b      	ldr	r3, [r1, #24]
 80081be:	06d8      	lsls	r0, r3, #27
 80081c0:	d5f2      	bpl.n	80081a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c2:	698b      	ldr	r3, [r1, #24]
 80081c4:	069b      	lsls	r3, r3, #26
 80081c6:	d4cc      	bmi.n	8008162 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081c8:	f7ff f83a 	bl	8007240 <HAL_GetTick>
 80081cc:	1b80      	subs	r0, r0, r6
 80081ce:	4285      	cmp	r5, r0
 80081d0:	d309      	bcc.n	80081e6 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
 80081d2:	b145      	cbz	r5, 80081e6 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081d4:	6821      	ldr	r1, [r4, #0]
 80081d6:	698b      	ldr	r3, [r1, #24]
 80081d8:	069b      	lsls	r3, r3, #26
 80081da:	d4c2      	bmi.n	8008162 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081dc:	f7ff f830 	bl	8007240 <HAL_GetTick>
 80081e0:	1b80      	subs	r0, r0, r6
 80081e2:	4285      	cmp	r5, r0
 80081e4:	d2f5      	bcs.n	80081d2 <I2C_WaitOnTXISFlagUntilTimeout+0x92>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081e8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ea:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ec:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ee:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081f0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081f4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 80081f8:	e7d1      	b.n	800819e <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
  return HAL_OK;
 80081fa:	2000      	movs	r0, #0
}
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
 80081fe:	bf00      	nop
 8008200:	fe00e800 	.word	0xfe00e800

08008204 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	4604      	mov	r4, r0
 8008208:	4616      	mov	r6, r2
 800820a:	460d      	mov	r5, r1
 800820c:	2900      	cmp	r1, #0
 800820e:	d048      	beq.n	80082a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	6993      	ldr	r3, [r2, #24]
 8008214:	0698      	lsls	r0, r3, #26
 8008216:	d44e      	bmi.n	80082b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008218:	6993      	ldr	r3, [r2, #24]
 800821a:	06d9      	lsls	r1, r3, #27
 800821c:	d532      	bpl.n	8008284 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
 800821e:	1c68      	adds	r0, r5, #1
 8008220:	d12c      	bne.n	800827c <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008222:	6993      	ldr	r3, [r2, #24]
 8008224:	0699      	lsls	r1, r3, #26
 8008226:	d5fc      	bpl.n	8008222 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008228:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800822a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800822c:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800822e:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008230:	6993      	ldr	r3, [r2, #24]
 8008232:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8008234:	bf44      	itt	mi
 8008236:	2300      	movmi	r3, #0
 8008238:	6293      	strmi	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800823a:	6993      	ldr	r3, [r2, #24]
 800823c:	07d9      	lsls	r1, r3, #31
 800823e:	d403      	bmi.n	8008248 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008240:	6993      	ldr	r3, [r2, #24]
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 8008248:	6853      	ldr	r3, [r2, #4]
 800824a:	481c      	ldr	r0, [pc, #112]	@ (80082bc <I2C_WaitOnSTOPFlagUntilTimeout+0xb8>)
 800824c:	4003      	ands	r3, r0
 800824e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008250:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008252:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008254:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008256:	f043 0304 	orr.w	r3, r3, #4
 800825a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800825c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008260:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008264:	2300      	movs	r3, #0
 8008266:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800826a:	2001      	movs	r0, #1
}
 800826c:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826e:	f7fe ffe7 	bl	8007240 <HAL_GetTick>
 8008272:	1b80      	subs	r0, r0, r6
 8008274:	4285      	cmp	r5, r0
 8008276:	d30a      	bcc.n	800828e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
 8008278:	b14d      	cbz	r5, 800828e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800827a:	6822      	ldr	r2, [r4, #0]
 800827c:	6993      	ldr	r3, [r2, #24]
 800827e:	069b      	lsls	r3, r3, #26
 8008280:	d5f5      	bpl.n	800826e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 8008282:	e7d1      	b.n	8008228 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008284:	f7fe ffdc 	bl	8007240 <HAL_GetTick>
 8008288:	1b80      	subs	r0, r0, r6
 800828a:	4285      	cmp	r5, r0
 800828c:	d2c0      	bcs.n	8008210 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800828e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008290:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008292:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008294:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008296:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008298:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800829c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80082a0:	e7e0      	b.n	8008264 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082a2:	6802      	ldr	r2, [r0, #0]
 80082a4:	6993      	ldr	r3, [r2, #24]
 80082a6:	069b      	lsls	r3, r3, #26
 80082a8:	d405      	bmi.n	80082b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082aa:	6993      	ldr	r3, [r2, #24]
 80082ac:	06db      	lsls	r3, r3, #27
 80082ae:	d4e5      	bmi.n	800827c <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b0:	f7fe ffc6 	bl	8007240 <HAL_GetTick>
 80082b4:	e7eb      	b.n	800828e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
  return HAL_OK;
 80082b6:	2000      	movs	r0, #0
}
 80082b8:	bd70      	pop	{r4, r5, r6, pc}
 80082ba:	bf00      	nop
 80082bc:	fe00e800 	.word	0xfe00e800

080082c0 <HAL_I2C_MspInit>:
}
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop

080082c4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d04f      	beq.n	8008368 <HAL_I2C_Init+0xa4>
{
 80082c8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082ca:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80082ce:	4604      	mov	r4, r0
 80082d0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d042      	beq.n	800835e <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 80082d8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80082da:	2224      	movs	r2, #36	@ 0x24
 80082dc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80082e0:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082e2:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80082e4:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80082ec:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082f0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082f2:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082f8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082fa:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082fc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082fe:	d02a      	beq.n	8008356 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008300:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008304:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008306:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008308:	bf04      	itt	eq
 800830a:	f44f 6200 	moveq.w	r2, #2048	@ 0x800
 800830e:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008310:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008312:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008314:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8008318:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800831c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800831e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008320:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008322:	430a      	orrs	r2, r1
 8008324:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008326:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800832a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800832e:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008330:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008332:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008334:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008336:	4301      	orrs	r1, r0
 8008338:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800833a:	6819      	ldr	r1, [r3, #0]
 800833c:	f041 0101 	orr.w	r1, r1, #1
 8008340:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008342:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008344:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008346:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008348:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800834c:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800834e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8008352:	4610      	mov	r0, r2
}
 8008354:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800835a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800835c:	e7d8      	b.n	8008310 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800835e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008362:	f7ff ffad 	bl	80082c0 <HAL_I2C_MspInit>
 8008366:	e7b7      	b.n	80082d8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8008368:	2001      	movs	r0, #1
}
 800836a:	4770      	bx	lr

0800836c <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop

08008370 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8008370:	b1b0      	cbz	r0, 80083a0 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8008372:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008374:	2324      	movs	r3, #36	@ 0x24
{
 8008376:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008378:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800837c:	6813      	ldr	r3, [r2, #0]
 800837e:	f023 0301 	bic.w	r3, r3, #1
 8008382:	4604      	mov	r4, r0
 8008384:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008386:	f7ff fff1 	bl	800836c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800838a:	2300      	movs	r3, #0
 800838c:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800838e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008392:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008396:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  return HAL_OK;
 800839c:	4618      	mov	r0, r3
}
 800839e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80083a0:	2001      	movs	r0, #1
}
 80083a2:	4770      	bx	lr

080083a4 <HAL_I2C_Mem_Write>:
{
 80083a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80083aa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80083ae:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 80083b2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	f040 809f 	bne.w	80084fa <HAL_I2C_Mem_Write+0x156>
    if ((pData == NULL) || (Size == 0U))
 80083bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083be:	4604      	mov	r4, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8094 	beq.w	80084ee <HAL_I2C_Mem_Write+0x14a>
 80083c6:	f1bb 0f00 	cmp.w	fp, #0
 80083ca:	f000 8090 	beq.w	80084ee <HAL_I2C_Mem_Write+0x14a>
    __HAL_LOCK(hi2c);
 80083ce:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	f000 8091 	beq.w	80084fa <HAL_I2C_Mem_Write+0x156>
 80083d8:	2301      	movs	r3, #1
 80083da:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80083de:	460f      	mov	r7, r1
 80083e0:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 80083e2:	f7fe ff2d 	bl	8007240 <HAL_GetTick>
 80083e6:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80083e8:	e005      	b.n	80083f6 <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ea:	f7fe ff29 	bl	8007240 <HAL_GetTick>
 80083ee:	1b80      	subs	r0, r0, r6
 80083f0:	2819      	cmp	r0, #25
 80083f2:	f200 8085 	bhi.w	8008500 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	699d      	ldr	r5, [r3, #24]
 80083fa:	f415 4500 	ands.w	r5, r5, #32768	@ 0x8000
 80083fe:	d1f4      	bne.n	80083ea <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 8008400:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008402:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008404:	2221      	movs	r2, #33	@ 0x21
 8008406:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800840a:	2240      	movs	r2, #64	@ 0x40
 800840c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008410:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8008412:	f8a4 b02a 	strh.w	fp, [r4, #42]	@ 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	4973      	ldr	r1, [pc, #460]	@ (80085e8 <HAL_I2C_Mem_Write+0x244>)
    hi2c->XferISR   = NULL;
 800841a:	6365      	str	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 800841c:	400a      	ands	r2, r1
 800841e:	fa5f f189 	uxtb.w	r1, r9
 8008422:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008426:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800842a:	433a      	orrs	r2, r7
 800842c:	f042 4201 	orr.w	r2, r2, #2164260864	@ 0x81000000
 8008430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008434:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008436:	4651      	mov	r1, sl
 8008438:	4632      	mov	r2, r6
 800843a:	4620      	mov	r0, r4
 800843c:	f7ff fe80 	bl	8008140 <I2C_WaitOnTXISFlagUntilTimeout>
 8008440:	2800      	cmp	r0, #0
 8008442:	f040 80a9 	bne.w	8008598 <HAL_I2C_Mem_Write+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008446:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800844a:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800844c:	d17f      	bne.n	800854e <HAL_I2C_Mem_Write+0x1aa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800844e:	fa5f f388 	uxtb.w	r3, r8
 8008452:	6293      	str	r3, [r2, #40]	@ 0x28
 8008454:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008458:	d175      	bne.n	8008546 <HAL_I2C_Mem_Write+0x1a2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800845a:	6993      	ldr	r3, [r2, #24]
 800845c:	061d      	lsls	r5, r3, #24
 800845e:	d5fc      	bpl.n	800845a <HAL_I2C_Mem_Write+0xb6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008460:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008462:	b29b      	uxth	r3, r3
 8008464:	2bff      	cmp	r3, #255	@ 0xff
 8008466:	f240 809b 	bls.w	80085a0 <HAL_I2C_Mem_Write+0x1fc>
  MODIFY_REG(hi2c->Instance->CR2,
 800846a:	6853      	ldr	r3, [r2, #4]
 800846c:	495f      	ldr	r1, [pc, #380]	@ (80085ec <HAL_I2C_Mem_Write+0x248>)
 800846e:	400b      	ands	r3, r1
 8008470:	433b      	orrs	r3, r7
 8008472:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800847a:	21ff      	movs	r1, #255	@ 0xff
 800847c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800847e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008480:	e004      	b.n	800848c <HAL_I2C_Mem_Write+0xe8>
    } while (hi2c->XferCount > 0U);
 8008482:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 8098 	beq.w	80085bc <HAL_I2C_Mem_Write+0x218>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800848c:	4632      	mov	r2, r6
 800848e:	4651      	mov	r1, sl
 8008490:	4620      	mov	r0, r4
 8008492:	f7ff fe55 	bl	8008140 <I2C_WaitOnTXISFlagUntilTimeout>
 8008496:	2800      	cmp	r0, #0
 8008498:	d12c      	bne.n	80084f4 <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800849a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	f813 1b01 	ldrb.w	r1, [r3], #1
 80084a2:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80084a4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80084a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80084ae:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084b0:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084b6:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80084b8:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084ba:	2900      	cmp	r1, #0
 80084bc:	d0e1      	beq.n	8008482 <HAL_I2C_Mem_Write+0xde>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1df      	bne.n	8008482 <HAL_I2C_Mem_Write+0xde>
 80084c2:	f1ba 3fff 	cmp.w	sl, #4294967295
 80084c6:	d131      	bne.n	800852c <HAL_I2C_Mem_Write+0x188>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084c8:	6993      	ldr	r3, [r2, #24]
 80084ca:	0619      	lsls	r1, r3, #24
 80084cc:	d5fc      	bpl.n	80084c8 <HAL_I2C_Mem_Write+0x124>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	2bff      	cmp	r3, #255	@ 0xff
 80084d4:	d949      	bls.n	800856a <HAL_I2C_Mem_Write+0x1c6>
  MODIFY_REG(hi2c->Instance->CR2,
 80084d6:	6853      	ldr	r3, [r2, #4]
 80084d8:	4944      	ldr	r1, [pc, #272]	@ (80085ec <HAL_I2C_Mem_Write+0x248>)
 80084da:	400b      	ands	r3, r1
 80084dc:	433b      	orrs	r3, r7
 80084de:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 80084e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084e6:	21ff      	movs	r1, #255	@ 0xff
 80084e8:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80084ea:	6053      	str	r3, [r2, #4]
}
 80084ec:	e7c9      	b.n	8008482 <HAL_I2C_Mem_Write+0xde>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084f2:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80084f4:	2001      	movs	r0, #1
}
 80084f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80084fa:	2002      	movs	r0, #2
}
 80084fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008500:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008502:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008504:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8008508:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800850a:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800850c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8008510:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008514:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 8008518:	e7ec      	b.n	80084f4 <HAL_I2C_Mem_Write+0x150>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800851a:	f7fe fe91 	bl	8007240 <HAL_GetTick>
 800851e:	1b80      	subs	r0, r0, r6
 8008520:	4582      	cmp	sl, r0
 8008522:	d3ed      	bcc.n	8008500 <HAL_I2C_Mem_Write+0x15c>
 8008524:	f1ba 0f00 	cmp.w	sl, #0
 8008528:	d0ea      	beq.n	8008500 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800852a:	6822      	ldr	r2, [r4, #0]
 800852c:	6993      	ldr	r3, [r2, #24]
 800852e:	061b      	lsls	r3, r3, #24
 8008530:	d5f3      	bpl.n	800851a <HAL_I2C_Mem_Write+0x176>
 8008532:	e7cc      	b.n	80084ce <HAL_I2C_Mem_Write+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008534:	f7fe fe84 	bl	8007240 <HAL_GetTick>
 8008538:	1b80      	subs	r0, r0, r6
 800853a:	4582      	cmp	sl, r0
 800853c:	d323      	bcc.n	8008586 <HAL_I2C_Mem_Write+0x1e2>
 800853e:	f1ba 0f00 	cmp.w	sl, #0
 8008542:	d020      	beq.n	8008586 <HAL_I2C_Mem_Write+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	6993      	ldr	r3, [r2, #24]
 8008548:	0618      	lsls	r0, r3, #24
 800854a:	d5f3      	bpl.n	8008534 <HAL_I2C_Mem_Write+0x190>
 800854c:	e788      	b.n	8008460 <HAL_I2C_Mem_Write+0xbc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800854e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8008552:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008554:	4651      	mov	r1, sl
 8008556:	4632      	mov	r2, r6
 8008558:	4620      	mov	r0, r4
 800855a:	f7ff fdf1 	bl	8008140 <I2C_WaitOnTXISFlagUntilTimeout>
 800855e:	b9d8      	cbnz	r0, 8008598 <HAL_I2C_Mem_Write+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008560:	6822      	ldr	r2, [r4, #0]
 8008562:	fa5f f388 	uxtb.w	r3, r8
 8008566:	6293      	str	r3, [r2, #40]	@ 0x28
 8008568:	e774      	b.n	8008454 <HAL_I2C_Mem_Write+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 800856a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800856c:	481f      	ldr	r0, [pc, #124]	@ (80085ec <HAL_I2C_Mem_Write+0x248>)
          hi2c->XferSize = hi2c->XferCount;
 800856e:	b29b      	uxth	r3, r3
 8008570:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008572:	b2d9      	uxtb	r1, r3
 8008574:	6853      	ldr	r3, [r2, #4]
 8008576:	4003      	ands	r3, r0
 8008578:	433b      	orrs	r3, r7
 800857a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800857e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008582:	6053      	str	r3, [r2, #4]
}
 8008584:	e77d      	b.n	8008482 <HAL_I2C_Mem_Write+0xde>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008586:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008588:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800858a:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800858c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800858e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008590:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008594:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008598:	2300      	movs	r3, #0
 800859a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800859e:	e7a9      	b.n	80084f4 <HAL_I2C_Mem_Write+0x150>
      hi2c->XferSize = hi2c->XferCount;
 80085a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80085a2:	4812      	ldr	r0, [pc, #72]	@ (80085ec <HAL_I2C_Mem_Write+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80085a8:	b2d9      	uxtb	r1, r3
 80085aa:	6853      	ldr	r3, [r2, #4]
 80085ac:	4003      	ands	r3, r0
 80085ae:	433b      	orrs	r3, r7
 80085b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80085b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80085b8:	6053      	str	r3, [r2, #4]
}
 80085ba:	e767      	b.n	800848c <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085bc:	4632      	mov	r2, r6
 80085be:	4651      	mov	r1, sl
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7ff fe1f 	bl	8008204 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d194      	bne.n	80084f4 <HAL_I2C_Mem_Write+0x150>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085ca:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80085cc:	4d08      	ldr	r5, [pc, #32]	@ (80085f0 <HAL_I2C_Mem_Write+0x24c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085ce:	2120      	movs	r1, #32
 80085d0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	402a      	ands	r2, r5
 80085d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80085d8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80085dc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085e0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80085e4:	e787      	b.n	80084f6 <HAL_I2C_Mem_Write+0x152>
 80085e6:	bf00      	nop
 80085e8:	fc009800 	.word	0xfc009800
 80085ec:	fc009c00 	.word	0xfc009c00
 80085f0:	fe00e800 	.word	0xfe00e800

080085f4 <HAL_I2C_Mem_Read>:
{
 80085f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80085fa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80085fe:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 8008602:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008604:	2b20      	cmp	r3, #32
 8008606:	d17f      	bne.n	8008708 <HAL_I2C_Mem_Read+0x114>
    if ((pData == NULL) || (Size == 0U))
 8008608:	9b08      	ldr	r3, [sp, #32]
 800860a:	4604      	mov	r4, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d075      	beq.n	80086fc <HAL_I2C_Mem_Read+0x108>
 8008610:	f1ba 0f00 	cmp.w	sl, #0
 8008614:	d072      	beq.n	80086fc <HAL_I2C_Mem_Read+0x108>
    __HAL_LOCK(hi2c);
 8008616:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800861a:	2b01      	cmp	r3, #1
 800861c:	d074      	beq.n	8008708 <HAL_I2C_Mem_Read+0x114>
 800861e:	2301      	movs	r3, #1
 8008620:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8008624:	460f      	mov	r7, r1
 8008626:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 8008628:	f7fe fe0a 	bl	8007240 <HAL_GetTick>
 800862c:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800862e:	e004      	b.n	800863a <HAL_I2C_Mem_Read+0x46>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008630:	f7fe fe06 	bl	8007240 <HAL_GetTick>
 8008634:	1b40      	subs	r0, r0, r5
 8008636:	2819      	cmp	r0, #25
 8008638:	d869      	bhi.n	800870e <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	6998      	ldr	r0, [r3, #24]
 800863e:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 8008642:	d1f5      	bne.n	8008630 <HAL_I2C_Mem_Read+0x3c>
    hi2c->pBuffPtr  = pData;
 8008644:	9a08      	ldr	r2, [sp, #32]
 8008646:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008648:	2222      	movs	r2, #34	@ 0x22
 800864a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800864e:	2240      	movs	r2, #64	@ 0x40
 8008650:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008654:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8008656:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	4977      	ldr	r1, [pc, #476]	@ (800883c <HAL_I2C_Mem_Read+0x248>)
    hi2c->XferISR   = NULL;
 800865e:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8008660:	400a      	ands	r2, r1
 8008662:	fa5f f188 	uxtb.w	r1, r8
 8008666:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800866a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800866e:	433a      	orrs	r2, r7
 8008670:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008674:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008678:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800867a:	4631      	mov	r1, r6
 800867c:	462a      	mov	r2, r5
 800867e:	4620      	mov	r0, r4
 8008680:	f7ff fd5e 	bl	8008140 <I2C_WaitOnTXISFlagUntilTimeout>
 8008684:	2800      	cmp	r0, #0
 8008686:	f040 80bf 	bne.w	8008808 <HAL_I2C_Mem_Read+0x214>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800868a:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800868e:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008690:	d162      	bne.n	8008758 <HAL_I2C_Mem_Read+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008692:	fa5f f389 	uxtb.w	r3, r9
 8008696:	628b      	str	r3, [r1, #40]	@ 0x28
 8008698:	1c70      	adds	r0, r6, #1
 800869a:	d159      	bne.n	8008750 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800869c:	698b      	ldr	r3, [r1, #24]
 800869e:	065a      	lsls	r2, r3, #25
 80086a0:	d5fc      	bpl.n	800869c <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2bff      	cmp	r3, #255	@ 0xff
 80086a8:	f240 8095 	bls.w	80087d6 <HAL_I2C_Mem_Read+0x1e2>
  MODIFY_REG(hi2c->Instance->CR2,
 80086ac:	684b      	ldr	r3, [r1, #4]
 80086ae:	4a63      	ldr	r2, [pc, #396]	@ (800883c <HAL_I2C_Mem_Read+0x248>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	4a63      	ldr	r2, [pc, #396]	@ (8008840 <HAL_I2C_Mem_Read+0x24c>)
 80086b4:	433b      	orrs	r3, r7
 80086b6:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086b8:	23ff      	movs	r3, #255	@ 0xff
 80086ba:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80086bc:	604a      	str	r2, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086be:	1c70      	adds	r0, r6, #1
 80086c0:	d13a      	bne.n	8008738 <HAL_I2C_Mem_Read+0x144>
 80086c2:	698b      	ldr	r3, [r1, #24]
 80086c4:	075a      	lsls	r2, r3, #29
 80086c6:	d5fc      	bpl.n	80086c2 <HAL_I2C_Mem_Read+0xce>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80086c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80086ca:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80086cc:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80086ce:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80086d0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80086d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80086d4:	3a01      	subs	r2, #1
 80086d6:	b292      	uxth	r2, r2
 80086d8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086da:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80086dc:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80086de:	3101      	adds	r1, #1
      hi2c->XferSize--;
 80086e0:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086e2:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80086e4:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80086e6:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086e8:	b10a      	cbz	r2, 80086ee <HAL_I2C_Mem_Read+0xfa>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d043      	beq.n	8008776 <HAL_I2C_Mem_Read+0x182>
    } while (hi2c->XferCount > 0U);
 80086ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 808c 	beq.w	8008810 <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086f8:	6821      	ldr	r1, [r4, #0]
 80086fa:	e7e0      	b.n	80086be <HAL_I2C_Mem_Read+0xca>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80086fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008700:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008702:	2001      	movs	r0, #1
}
 8008704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8008708:	2002      	movs	r0, #2
}
 800870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800870e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008710:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008712:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8008716:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008718:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800871a:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800871e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008722:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 8008726:	e7ec      	b.n	8008702 <HAL_I2C_Mem_Read+0x10e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008728:	f7fe fd8a 	bl	8007240 <HAL_GetTick>
 800872c:	1b40      	subs	r0, r0, r5
 800872e:	4286      	cmp	r6, r0
 8008730:	d3ed      	bcc.n	800870e <HAL_I2C_Mem_Read+0x11a>
 8008732:	2e00      	cmp	r6, #0
 8008734:	d0eb      	beq.n	800870e <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008736:	6821      	ldr	r1, [r4, #0]
 8008738:	698b      	ldr	r3, [r1, #24]
 800873a:	075b      	lsls	r3, r3, #29
 800873c:	d5f4      	bpl.n	8008728 <HAL_I2C_Mem_Read+0x134>
 800873e:	e7c3      	b.n	80086c8 <HAL_I2C_Mem_Read+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008740:	f7fe fd7e 	bl	8007240 <HAL_GetTick>
 8008744:	1b43      	subs	r3, r0, r5
 8008746:	429e      	cmp	r6, r3
 8008748:	d355      	bcc.n	80087f6 <HAL_I2C_Mem_Read+0x202>
 800874a:	2e00      	cmp	r6, #0
 800874c:	d053      	beq.n	80087f6 <HAL_I2C_Mem_Read+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800874e:	6821      	ldr	r1, [r4, #0]
 8008750:	698b      	ldr	r3, [r1, #24]
 8008752:	065b      	lsls	r3, r3, #25
 8008754:	d5f4      	bpl.n	8008740 <HAL_I2C_Mem_Read+0x14c>
 8008756:	e7a4      	b.n	80086a2 <HAL_I2C_Mem_Read+0xae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008758:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800875c:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800875e:	462a      	mov	r2, r5
 8008760:	4631      	mov	r1, r6
 8008762:	4620      	mov	r0, r4
 8008764:	f7ff fcec 	bl	8008140 <I2C_WaitOnTXISFlagUntilTimeout>
 8008768:	2800      	cmp	r0, #0
 800876a:	d14d      	bne.n	8008808 <HAL_I2C_Mem_Read+0x214>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800876c:	6821      	ldr	r1, [r4, #0]
 800876e:	fa5f f389 	uxtb.w	r3, r9
 8008772:	628b      	str	r3, [r1, #40]	@ 0x28
 8008774:	e790      	b.n	8008698 <HAL_I2C_Mem_Read+0xa4>
 8008776:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	d11a      	bne.n	80087b2 <HAL_I2C_Mem_Read+0x1be>
 800877c:	6993      	ldr	r3, [r2, #24]
 800877e:	0619      	lsls	r1, r3, #24
 8008780:	d5fc      	bpl.n	800877c <HAL_I2C_Mem_Read+0x188>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008782:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008784:	b29b      	uxth	r3, r3
 8008786:	2bff      	cmp	r3, #255	@ 0xff
 8008788:	d917      	bls.n	80087ba <HAL_I2C_Mem_Read+0x1c6>
  MODIFY_REG(hi2c->Instance->CR2,
 800878a:	6853      	ldr	r3, [r2, #4]
 800878c:	492d      	ldr	r1, [pc, #180]	@ (8008844 <HAL_I2C_Mem_Read+0x250>)
 800878e:	400b      	ands	r3, r1
 8008790:	433b      	orrs	r3, r7
 8008792:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800879a:	21ff      	movs	r1, #255	@ 0xff
 800879c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800879e:	6053      	str	r3, [r2, #4]
}
 80087a0:	e7a5      	b.n	80086ee <HAL_I2C_Mem_Read+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a2:	f7fe fd4d 	bl	8007240 <HAL_GetTick>
 80087a6:	1b43      	subs	r3, r0, r5
 80087a8:	429e      	cmp	r6, r3
 80087aa:	d3b0      	bcc.n	800870e <HAL_I2C_Mem_Read+0x11a>
 80087ac:	2e00      	cmp	r6, #0
 80087ae:	d0ae      	beq.n	800870e <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087b0:	6822      	ldr	r2, [r4, #0]
 80087b2:	6993      	ldr	r3, [r2, #24]
 80087b4:	061b      	lsls	r3, r3, #24
 80087b6:	d5f4      	bpl.n	80087a2 <HAL_I2C_Mem_Read+0x1ae>
 80087b8:	e7e3      	b.n	8008782 <HAL_I2C_Mem_Read+0x18e>
          hi2c->XferSize = hi2c->XferCount;
 80087ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80087bc:	4821      	ldr	r0, [pc, #132]	@ (8008844 <HAL_I2C_Mem_Read+0x250>)
          hi2c->XferSize = hi2c->XferCount;
 80087be:	b29b      	uxth	r3, r3
 80087c0:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80087c2:	b2d9      	uxtb	r1, r3
 80087c4:	6853      	ldr	r3, [r2, #4]
 80087c6:	4003      	ands	r3, r0
 80087c8:	433b      	orrs	r3, r7
 80087ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80087ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80087d2:	6053      	str	r3, [r2, #4]
}
 80087d4:	e78b      	b.n	80086ee <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 80087d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80087d8:	4818      	ldr	r0, [pc, #96]	@ (800883c <HAL_I2C_Mem_Read+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 80087da:	b29b      	uxth	r3, r3
 80087dc:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	684b      	ldr	r3, [r1, #4]
 80087e2:	4003      	ands	r3, r0
 80087e4:	433b      	orrs	r3, r7
 80087e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ea:	f043 4302 	orr.w	r3, r3, #2181038080	@ 0x82000000
 80087ee:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 80087f2:	604b      	str	r3, [r1, #4]
}
 80087f4:	e763      	b.n	80086be <HAL_I2C_Mem_Read+0xca>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087f6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087f8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087fa:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087fc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087fe:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008800:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008804:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008808:	2300      	movs	r3, #0
 800880a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800880e:	e778      	b.n	8008702 <HAL_I2C_Mem_Read+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008810:	462a      	mov	r2, r5
 8008812:	4631      	mov	r1, r6
 8008814:	4620      	mov	r0, r4
 8008816:	f7ff fcf5 	bl	8008204 <I2C_WaitOnSTOPFlagUntilTimeout>
 800881a:	2800      	cmp	r0, #0
 800881c:	f47f af71 	bne.w	8008702 <HAL_I2C_Mem_Read+0x10e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008820:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8008822:	4d09      	ldr	r5, [pc, #36]	@ (8008848 <HAL_I2C_Mem_Read+0x254>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008824:	2120      	movs	r1, #32
 8008826:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	402a      	ands	r2, r5
 800882c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800882e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008832:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008836:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800883a:	e763      	b.n	8008704 <HAL_I2C_Mem_Read+0x110>
 800883c:	fc009800 	.word	0xfc009800
 8008840:	81ff2400 	.word	0x81ff2400
 8008844:	fc009c00 	.word	0xfc009c00
 8008848:	fe00e800 	.word	0xfe00e800

0800884c <HAL_I2C_GetState>:
  return hi2c->State;
 800884c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop

08008854 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008854:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8008858:	2a20      	cmp	r2, #32
 800885a:	d123      	bne.n	80088a4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800885c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008860:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008864:	2a01      	cmp	r2, #1
 8008866:	4603      	mov	r3, r0
 8008868:	d01c      	beq.n	80088a4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800886a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800886c:	2024      	movs	r0, #36	@ 0x24
{
 800886e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008870:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008874:	6810      	ldr	r0, [r2, #0]
 8008876:	f020 0001 	bic.w	r0, r0, #1
 800887a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800887c:	6810      	ldr	r0, [r2, #0]
 800887e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008882:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008884:	6810      	ldr	r0, [r2, #0]
 8008886:	4301      	orrs	r1, r0
 8008888:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800888a:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800888c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8008890:	f041 0101 	orr.w	r1, r1, #1
 8008894:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008896:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800889a:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 800889e:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 80088a0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80088a4:	2002      	movs	r0, #2
}
 80088a6:	4770      	bx	lr

080088a8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088a8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80088ac:	2a20      	cmp	r2, #32
 80088ae:	d122      	bne.n	80088f6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 80088b0:	b500      	push	{lr}
 80088b2:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088b6:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80088ba:	2a01      	cmp	r2, #1
 80088bc:	4603      	mov	r3, r0
 80088be:	d01c      	beq.n	80088fa <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088c0:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80088c2:	2024      	movs	r0, #36	@ 0x24
 80088c4:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 80088c8:	6810      	ldr	r0, [r2, #0]
 80088ca:	f020 0001 	bic.w	r0, r0, #1
 80088ce:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80088d0:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088d2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088d6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088da:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088dc:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088de:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 80088e2:	f041 0101 	orr.w	r1, r1, #1
 80088e6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80088e8:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80088ec:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 80088f0:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 80088f2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80088f6:	2002      	movs	r0, #2
}
 80088f8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80088fa:	2002      	movs	r0, #2
}
 80088fc:	f85d fb04 	ldr.w	pc, [sp], #4

08008900 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008902:	b08b      	sub	sp, #44	@ 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008904:	b360      	cbz	r0, 8008960 <HAL_PCD_Init+0x60>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008906:	f890 33bd 	ldrb.w	r3, [r0, #957]	@ 0x3bd
  USBx = hpcd->Instance;
 800890a:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800890c:	4605      	mov	r5, r0
 800890e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008912:	2b00      	cmp	r3, #0
 8008914:	d079      	beq.n	8008a0a <HAL_PCD_Init+0x10a>
 8008916:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008918:	2303      	movs	r3, #3
 800891a:	f885 33bd 	strb.w	r3, [r5, #957]	@ 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800891e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008920:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008922:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
    hpcd->Init.dma_enable = 0U;
 8008926:	bf08      	it	eq
 8008928:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800892a:	f005 ffc3 	bl	800e8b4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800892e:	f856 eb10 	ldr.w	lr, [r6], #16
 8008932:	46b4      	mov	ip, r6
 8008934:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008938:	466c      	mov	r4, sp
 800893a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800893c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008942:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8008946:	e884 0003 	stmia.w	r4, {r0, r1}
 800894a:	1d2f      	adds	r7, r5, #4
 800894c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008950:	4670      	mov	r0, lr
 8008952:	f005 fef5 	bl	800e740 <USB_CoreInit>
 8008956:	4604      	mov	r4, r0
 8008958:	b130      	cbz	r0, 8008968 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800895a:	2302      	movs	r3, #2
 800895c:	f885 33bd 	strb.w	r3, [r5, #957]	@ 0x3bd
    return HAL_ERROR;
 8008960:	2401      	movs	r4, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8008962:	4620      	mov	r0, r4
 8008964:	b00b      	add	sp, #44	@ 0x2c
 8008966:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008968:	4601      	mov	r1, r0
 800896a:	6828      	ldr	r0, [r5, #0]
 800896c:	f005 ffaa 	bl	800e8c4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008970:	6868      	ldr	r0, [r5, #4]
 8008972:	b358      	cbz	r0, 80089cc <HAL_PCD_Init+0xcc>
 8008974:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008976:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800897a:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800897c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8008980:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008984:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800898c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008990:	fa5f f28c 	uxtb.w	r2, ip
 8008994:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008996:	e9c3 1111 	strd	r1, r1, [r3, #68]	@ 0x44
    hpcd->IN_ep[i].is_in = 1U;
 800899a:	f883 e03d 	strb.w	lr, [r3, #61]	@ 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800899e:	f883 103f 	strb.w	r1, [r3, #63]	@ 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80089a2:	6519      	str	r1, [r3, #80]	@ 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089a4:	d3ea      	bcc.n	800897c <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80089a6:	2200      	movs	r2, #0
 80089a8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80089ac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089b0:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 80089b2:	f883 41fc 	strb.w	r4, [r3, #508]	@ 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089b6:	b2cc      	uxtb	r4, r1
 80089b8:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80089ba:	e9c3 2281 	strd	r2, r2, [r3, #516]	@ 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 80089be:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80089c2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80089c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089ca:	d3ed      	bcc.n	80089a8 <HAL_PCD_Init+0xa8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80089ce:	466c      	mov	r4, sp
 80089d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80089d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80089da:	e884 0003 	stmia.w	r4, {r0, r1}
 80089de:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80089e2:	6828      	ldr	r0, [r5, #0]
 80089e4:	f005 ff86 	bl	800e8f4 <USB_DevInit>
 80089e8:	4604      	mov	r4, r0
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d1b5      	bne.n	800895a <HAL_PCD_Init+0x5a>
  if (hpcd->Init.lpm_enable == 1U)
 80089ee:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  hpcd->USB_Address = 0U;
 80089f0:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80089f4:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80089f6:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80089f8:	f885 23bd 	strb.w	r2, [r5, #957]	@ 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80089fc:	d00b      	beq.n	8008a16 <HAL_PCD_Init+0x116>
  (void)USB_DevDisconnect(hpcd->Instance);
 80089fe:	6828      	ldr	r0, [r5, #0]
 8008a00:	f006 fb06 	bl	800f010 <USB_DevDisconnect>
}
 8008a04:	4620      	mov	r0, r4
 8008a06:	b00b      	add	sp, #44	@ 0x2c
 8008a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8008a0a:	f880 23bc 	strb.w	r2, [r0, #956]	@ 0x3bc
    HAL_PCD_MspInit(hpcd);
 8008a0e:	f7f8 fdc9 	bl	80015a4 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8008a12:	6828      	ldr	r0, [r5, #0]
 8008a14:	e780      	b.n	8008918 <HAL_PCD_Init+0x18>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 fca4 	bl	8009364 <HAL_PCDEx_ActivateLPM>
 8008a1c:	e7ef      	b.n	80089fe <HAL_PCD_Init+0xfe>
 8008a1e:	bf00      	nop

08008a20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008a20:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008a22:	f890 33bc 	ldrb.w	r3, [r0, #956]	@ 0x3bc
 8008a26:	2b01      	cmp	r3, #1
{
 8008a28:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a2a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008a2c:	d012      	beq.n	8008a54 <HAL_PCD_Start+0x34>
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008a2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  __HAL_LOCK(hpcd);
 8008a30:	2201      	movs	r2, #1
  if (hpcd->Init.battery_charging_enable == 1U)
 8008a32:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8008a34:	f884 23bc 	strb.w	r2, [r4, #956]	@ 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 8008a38:	d103      	bne.n	8008a42 <HAL_PCD_Start+0x22>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a3a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a40:	6383      	str	r3, [r0, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008a42:	f005 ff2f 	bl	800e8a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a46:	6820      	ldr	r0, [r4, #0]
 8008a48:	f006 fad2 	bl	800eff0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc

  return HAL_OK;
}
 8008a52:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008a54:	2002      	movs	r0, #2
}
 8008a56:	bd10      	pop	{r4, pc}

08008a58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a5c:	6806      	ldr	r6, [r0, #0]
{
 8008a5e:	b085      	sub	sp, #20
 8008a60:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a62:	4630      	mov	r0, r6
 8008a64:	f006 fb12 	bl	800f08c <USB_GetMode>
 8008a68:	b110      	cbz	r0, 8008a70 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8008a6a:	b005      	add	sp, #20
 8008a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a70:	4605      	mov	r5, r0
 8008a72:	6820      	ldr	r0, [r4, #0]
 8008a74:	f006 fadc 	bl	800f030 <USB_ReadInterrupts>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d0f6      	beq.n	8008a6a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	f006 fad7 	bl	800f030 <USB_ReadInterrupts>
 8008a82:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a86:	6820      	ldr	r0, [r4, #0]
 8008a88:	bf1e      	ittt	ne
 8008a8a:	6943      	ldrne	r3, [r0, #20]
 8008a8c:	f003 0302 	andne.w	r3, r3, #2
 8008a90:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008a92:	f006 facd 	bl	800f030 <USB_ReadInterrupts>
 8008a96:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a9a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008a9c:	d012      	beq.n	8008ac4 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a9e:	6983      	ldr	r3, [r0, #24]
 8008aa0:	f023 0310 	bic.w	r3, r3, #16
 8008aa4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8008aa6:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008aa8:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8008aac:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008aae:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008ab2:	f000 824f 	beq.w	8008f54 <HAL_PCD_IRQHandler+0x4fc>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008ab6:	2b06      	cmp	r3, #6
 8008ab8:	f000 81ec 	beq.w	8008e94 <HAL_PCD_IRQHandler+0x43c>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008abc:	6983      	ldr	r3, [r0, #24]
 8008abe:	f043 0310 	orr.w	r3, r3, #16
 8008ac2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008ac4:	f006 fab4 	bl	800f030 <USB_ReadInterrupts>
 8008ac8:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008acc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008ace:	f040 8106 	bne.w	8008cde <HAL_PCD_IRQHandler+0x286>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ad2:	f006 faad 	bl	800f030 <USB_ReadInterrupts>
 8008ad6:	0340      	lsls	r0, r0, #13
 8008ad8:	d478      	bmi.n	8008bcc <HAL_PCD_IRQHandler+0x174>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008ada:	f8d4 c000 	ldr.w	ip, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008ade:	4660      	mov	r0, ip
 8008ae0:	f006 faa6 	bl	800f030 <USB_ReadInterrupts>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	db5d      	blt.n	8008ba4 <HAL_PCD_IRQHandler+0x14c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	f006 faa1 	bl	800f030 <USB_ReadInterrupts>
 8008aee:	0500      	lsls	r0, r0, #20
 8008af0:	d44d      	bmi.n	8008b8e <HAL_PCD_IRQHandler+0x136>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008af2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008af4:	f006 fa9c 	bl	800f030 <USB_ReadInterrupts>
 8008af8:	0102      	lsls	r2, r0, #4
 8008afa:	d514      	bpl.n	8008b26 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008afc:	6822      	ldr	r2, [r4, #0]
 8008afe:	6953      	ldr	r3, [r2, #20]
 8008b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b04:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008b06:	f894 33f4 	ldrb.w	r3, [r4, #1012]	@ 0x3f4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f040 81ac 	bne.w	8008e68 <HAL_PCD_IRQHandler+0x410>
        hpcd->LPM_State = LPM_L1;
 8008b10:	2101      	movs	r1, #1
 8008b12:	f884 13f4 	strb.w	r1, [r4, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008b16:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008b18:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008b1c:	f8c4 33f8 	str.w	r3, [r4, #1016]	@ 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b20:	4620      	mov	r0, r4
 8008b22:	f7f8 fea1 	bl	8001868 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b26:	6820      	ldr	r0, [r4, #0]
 8008b28:	f006 fa82 	bl	800f030 <USB_ReadInterrupts>
 8008b2c:	04c3      	lsls	r3, r0, #19
 8008b2e:	f100 814c 	bmi.w	8008dca <HAL_PCD_IRQHandler+0x372>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b32:	6820      	ldr	r0, [r4, #0]
 8008b34:	f006 fa7c 	bl	800f030 <USB_ReadInterrupts>
 8008b38:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b3c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b3e:	f040 812d 	bne.w	8008d9c <HAL_PCD_IRQHandler+0x344>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008b42:	f006 fa75 	bl	800f030 <USB_ReadInterrupts>
 8008b46:	0707      	lsls	r7, r0, #28
 8008b48:	f100 811f 	bmi.w	8008d8a <HAL_PCD_IRQHandler+0x332>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008b4c:	6820      	ldr	r0, [r4, #0]
 8008b4e:	f006 fa6f 	bl	800f030 <USB_ReadInterrupts>
 8008b52:	02c6      	lsls	r6, r0, #11
 8008b54:	f100 810f 	bmi.w	8008d76 <HAL_PCD_IRQHandler+0x31e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	f006 fa69 	bl	800f030 <USB_ReadInterrupts>
 8008b5e:	0285      	lsls	r5, r0, #10
 8008b60:	f100 80ff 	bmi.w	8008d62 <HAL_PCD_IRQHandler+0x30a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	f006 fa63 	bl	800f030 <USB_ReadInterrupts>
 8008b6a:	0040      	lsls	r0, r0, #1
 8008b6c:	f100 80f0 	bmi.w	8008d50 <HAL_PCD_IRQHandler+0x2f8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b70:	6820      	ldr	r0, [r4, #0]
 8008b72:	f006 fa5d 	bl	800f030 <USB_ReadInterrupts>
 8008b76:	0741      	lsls	r1, r0, #29
 8008b78:	f57f af77 	bpl.w	8008a6a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b80:	076a      	lsls	r2, r5, #29
 8008b82:	f100 8208 	bmi.w	8008f96 <HAL_PCD_IRQHandler+0x53e>
      hpcd->Instance->GOTGINT |= temp;
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	432a      	orrs	r2, r5
 8008b8a:	605a      	str	r2, [r3, #4]
 8008b8c:	e76d      	b.n	8008a6a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b8e:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 8008b92:	07d9      	lsls	r1, r3, #31
 8008b94:	f100 81fb 	bmi.w	8008f8e <HAL_PCD_IRQHandler+0x536>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	6943      	ldr	r3, [r0, #20]
 8008b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ba0:	6143      	str	r3, [r0, #20]
 8008ba2:	e7a7      	b.n	8008af4 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ba4:	f8d6 2804 	ldr.w	r2, [r6, #2052]	@ 0x804
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	f8c6 2804 	str.w	r2, [r6, #2052]	@ 0x804
      if (hpcd->LPM_State == LPM_L1)
 8008bb0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	@ 0x3f4
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	f000 8166 	beq.w	8008e86 <HAL_PCD_IRQHandler+0x42e>
        HAL_PCD_ResumeCallback(hpcd);
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f7f8 fd78 	bl	80016b0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008bc0:	6820      	ldr	r0, [r4, #0]
 8008bc2:	6943      	ldr	r3, [r0, #20]
 8008bc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bc8:	6143      	str	r3, [r0, #20]
 8008bca:	e78e      	b.n	8008aea <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	f006 fa3b 	bl	800f048 <USB_ReadDevAllInEpInterrupt>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008bd2:	f8d4 c000 	ldr.w	ip, [r4]
      while (ep_intr != 0U)
 8008bd6:	4681      	mov	r9, r0
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d080      	beq.n	8008ade <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	46a0      	mov	r8, r4
 8008be0:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008be4:	9600      	str	r6, [sp, #0]
 8008be6:	469b      	mov	fp, r3
 8008be8:	9501      	str	r5, [sp, #4]
 8008bea:	4660      	mov	r0, ip
 8008bec:	e009      	b.n	8008c02 <HAL_PCD_IRQHandler+0x1aa>
      while (ep_intr != 0U)
 8008bee:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8008bf2:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 8008bf6:	f108 081c 	add.w	r8, r8, #28
 8008bfa:	f107 0720 	add.w	r7, r7, #32
 8008bfe:	f000 8160 	beq.w	8008ec2 <HAL_PCD_IRQHandler+0x46a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c02:	f019 0f01 	tst.w	r9, #1
 8008c06:	d0f2      	beq.n	8008bee <HAL_PCD_IRQHandler+0x196>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c08:	fa5f fa8b 	uxtb.w	sl, fp
 8008c0c:	4651      	mov	r1, sl
 8008c0e:	f006 fa2d 	bl	800f06c <USB_ReadDevInEPInterrupt>
 8008c12:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c14:	07e8      	lsls	r0, r5, #31
 8008c16:	f100 8158 	bmi.w	8008eca <HAL_PCD_IRQHandler+0x472>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008c1a:	0729      	lsls	r1, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008c1c:	bf44      	itt	mi
 8008c1e:	2308      	movmi	r3, #8
 8008c20:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008c22:	06ea      	lsls	r2, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c24:	bf44      	itt	mi
 8008c26:	2310      	movmi	r3, #16
 8008c28:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008c2a:	066b      	lsls	r3, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008c2c:	bf44      	itt	mi
 8008c2e:	2340      	movmi	r3, #64	@ 0x40
 8008c30:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008c32:	07ae      	lsls	r6, r5, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008c34:	bf44      	itt	mi
 8008c36:	2302      	movmi	r3, #2
 8008c38:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008c3a:	062d      	lsls	r5, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c3c:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008c3e:	d5d6      	bpl.n	8008bee <HAL_PCD_IRQHandler+0x196>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8008c40:	e9d8 5214 	ldrd	r5, r2, [r8, #80]	@ 0x50
 8008c44:	42aa      	cmp	r2, r5
 8008c46:	d8d2      	bhi.n	8008bee <HAL_PCD_IRQHandler+0x196>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c48:	f500 6110 	add.w	r1, r0, #2304	@ 0x900
 8008c4c:	eb01 164b 	add.w	r6, r1, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8008c50:	f8d8 1044 	ldr.w	r1, [r8, #68]	@ 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c54:	69b3      	ldr	r3, [r6, #24]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c56:	9003      	str	r0, [sp, #12]
  len = ep->xfer_len - ep->xfer_count;
 8008c58:	eba5 0c02 	sub.w	ip, r5, r2
  len32b = (len + 3U) / 4U;
 8008c5c:	458c      	cmp	ip, r1
 8008c5e:	bf28      	it	cs
 8008c60:	468c      	movcs	ip, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c62:	fa1f fe83 	uxth.w	lr, r3
  len32b = (len + 3U) / 4U;
 8008c66:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c6a:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 8008c6e:	f0c0 819c 	bcc.w	8008faa <HAL_PCD_IRQHandler+0x552>
 8008c72:	f8cd b008 	str.w	fp, [sp, #8]
 8008c76:	4683      	mov	fp, r0
 8008c78:	e01e      	b.n	8008cb8 <HAL_PCD_IRQHandler+0x260>
 8008c7a:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008c7e:	f8d8 1048 	ldr.w	r1, [r8, #72]	@ 0x48
 8008c82:	429d      	cmp	r5, r3
 8008c84:	bf28      	it	cs
 8008c86:	461d      	movcs	r5, r3
 8008c88:	b2ab      	uxth	r3, r5
 8008c8a:	4652      	mov	r2, sl
 8008c8c:	4658      	mov	r0, fp
 8008c8e:	f006 f925 	bl	800eedc <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c92:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
    ep->xfer_count += len;
 8008c96:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
    ep->xfer_buff  += len;
 8008c9a:	442b      	add	r3, r5
 8008c9c:	f8c8 3048 	str.w	r3, [r8, #72]	@ 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ca0:	69b3      	ldr	r3, [r6, #24]
    ep->xfer_count += len;
 8008ca2:	442a      	add	r2, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ca4:	b29b      	uxth	r3, r3
    len32b = (len + 3U) / 4U;
 8008ca6:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ca8:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
    ep->xfer_count += len;
 8008cac:	f8c8 2054 	str.w	r2, [r8, #84]	@ 0x54
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008cb0:	f0c0 8176 	bcc.w	8008fa0 <HAL_PCD_IRQHandler+0x548>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008cb4:	f8d8 5050 	ldr.w	r5, [r8, #80]	@ 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cb8:	4295      	cmp	r5, r2
    len = ep->xfer_len - ep->xfer_count;
 8008cba:	eba5 0502 	sub.w	r5, r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cbe:	d8dc      	bhi.n	8008c7a <HAL_PCD_IRQHandler+0x222>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008cc0:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008cc4:	6820      	ldr	r0, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008cc6:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008cc8:	f00b 050f 	and.w	r5, fp, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ccc:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	40a9      	lsls	r1, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008cd4:	ea22 0201 	bic.w	r2, r2, r1
 8008cd8:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
 8008cdc:	e787      	b.n	8008bee <HAL_PCD_IRQHandler+0x196>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008cde:	f006 f9ab 	bl	800f038 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f000 80e8 	beq.w	8008eba <HAL_PCD_IRQHandler+0x462>
 8008cea:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008cec:	9500      	str	r5, [sp, #0]
 8008cee:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
      epnum = 0U;
 8008cf2:	f04f 0900 	mov.w	r9, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008cf6:	f44f 5b00 	mov.w	fp, #8192	@ 0x2000
 8008cfa:	e006      	b.n	8008d0a <HAL_PCD_IRQHandler+0x2b2>
      while (ep_intr != 0U)
 8008cfc:	087f      	lsrs	r7, r7, #1
        epnum++;
 8008cfe:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8008d02:	f108 0820 	add.w	r8, r8, #32
 8008d06:	f000 80da 	beq.w	8008ebe <HAL_PCD_IRQHandler+0x466>
        if ((ep_intr & 0x1U) != 0U)
 8008d0a:	07f9      	lsls	r1, r7, #31
 8008d0c:	d5f6      	bpl.n	8008cfc <HAL_PCD_IRQHandler+0x2a4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008d0e:	fa5f f589 	uxtb.w	r5, r9
 8008d12:	4629      	mov	r1, r5
 8008d14:	f006 f9a0 	bl	800f058 <USB_ReadDevOutEPInterrupt>
 8008d18:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008d1a:	f01a 0f01 	tst.w	sl, #1
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d1e:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008d20:	f040 80fb 	bne.w	8008f1a <HAL_PCD_IRQHandler+0x4c2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008d24:	f01a 0f08 	tst.w	sl, #8
 8008d28:	f040 80e1 	bne.w	8008eee <HAL_PCD_IRQHandler+0x496>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008d2c:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008d30:	bf1c      	itt	ne
 8008d32:	2310      	movne	r3, #16
 8008d34:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d38:	f01a 0f20 	tst.w	sl, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d3c:	bf1c      	itt	ne
 8008d3e:	2320      	movne	r3, #32
 8008d40:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008d44:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008d48:	bf18      	it	ne
 8008d4a:	f8c8 b008 	strne.w	fp, [r8, #8]
 8008d4e:	e7d5      	b.n	8008cfc <HAL_PCD_IRQHandler+0x2a4>
      HAL_PCD_ConnectCallback(hpcd);
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7f8 fcd5 	bl	8001700 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008d56:	6820      	ldr	r0, [r4, #0]
 8008d58:	6943      	ldr	r3, [r0, #20]
 8008d5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d5e:	6143      	str	r3, [r0, #20]
 8008d60:	e707      	b.n	8008b72 <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d62:	4620      	mov	r0, r4
 8008d64:	2100      	movs	r1, #0
 8008d66:	f7f8 fcc3 	bl	80016f0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d6a:	6820      	ldr	r0, [r4, #0]
 8008d6c:	6943      	ldr	r3, [r0, #20]
 8008d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d72:	6143      	str	r3, [r0, #20]
 8008d74:	e6f7      	b.n	8008b66 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d76:	4620      	mov	r0, r4
 8008d78:	2100      	movs	r1, #0
 8008d7a:	f7f8 fcbd 	bl	80016f8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	6943      	ldr	r3, [r0, #20]
 8008d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d86:	6143      	str	r3, [r0, #20]
 8008d88:	e6e7      	b.n	8008b5a <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7f8 fc66 	bl	800165c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d90:	6820      	ldr	r0, [r4, #0]
 8008d92:	6943      	ldr	r3, [r0, #20]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	6143      	str	r3, [r0, #20]
 8008d9a:	e6d8      	b.n	8008b4e <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d9c:	f006 f97a 	bl	800f094 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008da0:	6820      	ldr	r0, [r4, #0]
 8008da2:	f005 fe93 	bl	800eacc <USB_GetDevSpeed>
 8008da6:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008da8:	6825      	ldr	r5, [r4, #0]
 8008daa:	f001 f839 	bl	8009e20 <HAL_RCC_GetHCLKFreq>
 8008dae:	7b22      	ldrb	r2, [r4, #12]
 8008db0:	4601      	mov	r1, r0
 8008db2:	4628      	mov	r0, r5
 8008db4:	f005 fcfc 	bl	800e7b0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8008db8:	4620      	mov	r0, r4
 8008dba:	f7f8 fc53 	bl	8001664 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008dbe:	6820      	ldr	r0, [r4, #0]
 8008dc0:	6943      	ldr	r3, [r0, #20]
 8008dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008dc6:	6143      	str	r3, [r0, #20]
 8008dc8:	e6bb      	b.n	8008b42 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dca:	f8d6 3804 	ldr.w	r3, [r6, #2052]	@ 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008dce:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dd0:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008dd4:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dd6:	f8c6 3804 	str.w	r3, [r6, #2052]	@ 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008dda:	f005 fe65 	bl	800eaa8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dde:	6860      	ldr	r0, [r4, #4]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008de0:	f506 6700 	add.w	r7, r6, #2048	@ 0x800
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008de4:	b1f8      	cbz	r0, 8008e26 <HAL_PCD_IRQHandler+0x3ce>
 8008de6:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008dea:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8008dee:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8008df6:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008dfe:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008e00:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e04:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008e08:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8008e0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e10:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e14:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e16:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e1a:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e1c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e20:	f103 0320 	add.w	r3, r3, #32
 8008e24:	d1e3      	bne.n	8008dee <HAL_PCD_IRQHandler+0x396>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e26:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008e28:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e2a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008e2e:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008e30:	b9f2      	cbnz	r2, 8008e70 <HAL_PCD_IRQHandler+0x418>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008e38:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008e3c:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f043 030b 	orr.w	r3, r3, #11
 8008e44:	613b      	str	r3, [r7, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008e46:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008e4a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008e4c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008e50:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008e54:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 8008e58:	f006 f92e 	bl	800f0b8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008e5c:	6820      	ldr	r0, [r4, #0]
 8008e5e:	6943      	ldr	r3, [r0, #20]
 8008e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e64:	6143      	str	r3, [r0, #20]
 8008e66:	e665      	b.n	8008b34 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f7f8 fc09 	bl	8001680 <HAL_PCD_SuspendCallback>
 8008e6e:	e65a      	b.n	8008b26 <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e74:	f043 030b 	orr.w	r3, r3, #11
 8008e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e7e:	f043 030b 	orr.w	r3, r3, #11
 8008e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e84:	e7df      	b.n	8008e46 <HAL_PCD_IRQHandler+0x3ee>
        hpcd->LPM_State = LPM_L0;
 8008e86:	2100      	movs	r1, #0
 8008e88:	f884 13f4 	strb.w	r1, [r4, #1012]	@ 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f7f8 fceb 	bl	8001868 <HAL_PCDEx_LPM_Callback>
 8008e92:	e695      	b.n	8008bc0 <HAL_PCD_IRQHandler+0x168>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008e94:	2208      	movs	r2, #8
 8008e96:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 8008e9a:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008e9c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008ea0:	f006 f82c 	bl	800eefc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ea4:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8008ea8:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8008eac:	f8d2 1214 	ldr.w	r1, [r2, #532]	@ 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008eb0:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008eb2:	440b      	add	r3, r1
 8008eb4:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 8008eb8:	e600      	b.n	8008abc <HAL_PCD_IRQHandler+0x64>
 8008eba:	6820      	ldr	r0, [r4, #0]
 8008ebc:	e609      	b.n	8008ad2 <HAL_PCD_IRQHandler+0x7a>
 8008ebe:	9d00      	ldr	r5, [sp, #0]
 8008ec0:	e607      	b.n	8008ad2 <HAL_PCD_IRQHandler+0x7a>
 8008ec2:	e9dd 6500 	ldrd	r6, r5, [sp]
 8008ec6:	4684      	mov	ip, r0
 8008ec8:	e609      	b.n	8008ade <HAL_PCD_IRQHandler+0x86>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008eca:	9800      	ldr	r0, [sp, #0]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ecc:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ece:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ed2:	f00b 020f 	and.w	r2, fp, #15
 8008ed6:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008eda:	ea23 0302 	bic.w	r3, r3, r2
 8008ede:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008ee2:	60b9      	str	r1, [r7, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	4651      	mov	r1, sl
 8008ee8:	f7f8 fbae 	bl	8001648 <HAL_PCD_DataInStageCallback>
 8008eec:	e695      	b.n	8008c1a <HAL_PCD_IRQHandler+0x1c2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008eee:	2308      	movs	r3, #8
 8008ef0:	f8c8 3008 	str.w	r3, [r8, #8]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ef4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8008fb4 <HAL_PCD_IRQHandler+0x55c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ef8:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 8008efc:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f00:	4291      	cmp	r1, r2
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f02:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f04:	d904      	bls.n	8008f10 <HAL_PCD_IRQHandler+0x4b8>
 8008f06:	0405      	lsls	r5, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f08:	bf44      	itt	mi
 8008f0a:	f44f 4200 	movmi.w	r2, #32768	@ 0x8000
 8008f0e:	609a      	strmi	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7f8 fb89 	bl	8001628 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f16:	6820      	ldr	r0, [r4, #0]
 8008f18:	e708      	b.n	8008d2c <HAL_PCD_IRQHandler+0x2d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f20:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008f24:	4a24      	ldr	r2, [pc, #144]	@ (8008fb8 <HAL_PCD_IRQHandler+0x560>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f26:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 8008f2a:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008f2e:	4594      	cmp	ip, r2
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f30:	6899      	ldr	r1, [r3, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008f32:	d109      	bne.n	8008f48 <HAL_PCD_IRQHandler+0x4f0>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008f34:	040a      	lsls	r2, r1, #16
 8008f36:	d503      	bpl.n	8008f40 <HAL_PCD_IRQHandler+0x4e8>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f38:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008f3c:	609a      	str	r2, [r3, #8]
 8008f3e:	e6f1      	b.n	8008d24 <HAL_PCD_IRQHandler+0x2cc>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f40:	068a      	lsls	r2, r1, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f42:	bf44      	itt	mi
 8008f44:	2220      	movmi	r2, #32
 8008f46:	609a      	strmi	r2, [r3, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f48:	4620      	mov	r0, r4
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	f7f8 fb72 	bl	8001634 <HAL_PCD_DataOutStageCallback>
 8008f50:	6820      	ldr	r0, [r4, #0]
 8008f52:	e6e7      	b.n	8008d24 <HAL_PCD_IRQHandler+0x2cc>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f54:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008f58:	421f      	tst	r7, r3
 8008f5a:	f43f adaf 	beq.w	8008abc <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f5e:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8008f62:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8008f66:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8008f6a:	f8d8 1208 	ldr.w	r1, [r8, #520]	@ 0x208
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4617      	mov	r7, r2
 8008f72:	f005 ffc3 	bl	800eefc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f76:	f8d8 3208 	ldr.w	r3, [r8, #520]	@ 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f7a:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f7c:	443b      	add	r3, r7
 8008f7e:	f8c8 3208 	str.w	r3, [r8, #520]	@ 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f82:	f8d8 3214 	ldr.w	r3, [r8, #532]	@ 0x214
 8008f86:	443b      	add	r3, r7
 8008f88:	f8c8 3214 	str.w	r3, [r8, #532]	@ 0x214
 8008f8c:	e596      	b.n	8008abc <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7f8 fb76 	bl	8001680 <HAL_PCD_SuspendCallback>
 8008f94:	e600      	b.n	8008b98 <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7f8 fbb6 	bl	8001708 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	e5f2      	b.n	8008b86 <HAL_PCD_IRQHandler+0x12e>
  if (ep->xfer_len <= ep->xfer_count)
 8008fa0:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008fa4:	f8d8 5050 	ldr.w	r5, [r8, #80]	@ 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008fa8:	6820      	ldr	r0, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 8008faa:	42aa      	cmp	r2, r5
 8008fac:	f4ff ae1f 	bcc.w	8008bee <HAL_PCD_IRQHandler+0x196>
 8008fb0:	e689      	b.n	8008cc6 <HAL_PCD_IRQHandler+0x26e>
 8008fb2:	bf00      	nop
 8008fb4:	4f54300a 	.word	0x4f54300a
 8008fb8:	4f54310a 	.word	0x4f54310a

08008fbc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008fbc:	f890 23bc 	ldrb.w	r2, [r0, #956]	@ 0x3bc
 8008fc0:	2a01      	cmp	r2, #1
 8008fc2:	d00d      	beq.n	8008fe0 <HAL_PCD_SetAddress+0x24>
{
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8008fc8:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008fca:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008fcc:	f884 23bc 	strb.w	r2, [r4, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8008fd0:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008fd4:	f005 fffc 	bl	800efd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008fd8:	2000      	movs	r0, #0
 8008fda:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 8008fde:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008fe0:	2002      	movs	r0, #2
}
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_PCD_EP_Open>:
{
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	f001 0e0f 	and.w	lr, r1, #15
 8008fea:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8008fee:	0609      	lsls	r1, r1, #24
{
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8008ff6:	d424      	bmi.n	8009042 <HAL_PCD_EP_Open+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ff8:	f50c 71fe 	add.w	r1, ip, #508	@ 0x1fc
 8008ffc:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008ffe:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 8009002:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8009006:	f04f 0c00 	mov.w	ip, #0
 800900a:	f880 c1fd 	strb.w	ip, [r0, #509]	@ 0x1fd
  ep->maxpacket = ep_mps;
 800900e:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8009010:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009012:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8009016:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009018:	b10a      	cbz	r2, 800901e <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 800901a:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800901e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8009020:	bf04      	itt	eq
 8009022:	2300      	moveq	r3, #0
 8009024:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8009026:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 800902a:	2b01      	cmp	r3, #1
 800902c:	d015      	beq.n	800905a <HAL_PCD_EP_Open+0x76>
 800902e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009030:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009032:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009036:	f005 fd53 	bl	800eae0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800903a:	2000      	movs	r0, #0
 800903c:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 8009040:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009042:	f10c 013c 	add.w	r1, ip, #60	@ 0x3c
 8009046:	4401      	add	r1, r0
    ep->is_in = 1U;
 8009048:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800904c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8009050:	f04f 0c01 	mov.w	ip, #1
 8009054:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
 8009058:	e7d9      	b.n	800900e <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 800905a:	2002      	movs	r0, #2
}
 800905c:	bd10      	pop	{r4, pc}
 800905e:	bf00      	nop

08009060 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009060:	f001 030f 	and.w	r3, r1, #15
 8009064:	f001 020f 	and.w	r2, r1, #15
{
 8009068:	b510      	push	{r4, lr}
 800906a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800906e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009070:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 8009072:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
 8009076:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800907a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 800907e:	d415      	bmi.n	80090ac <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009080:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009084:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8009086:	f04f 0c00 	mov.w	ip, #0
 800908a:	f880 c1fd 	strb.w	ip, [r0, #509]	@ 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800908e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009090:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 8009094:	2b01      	cmp	r3, #1
 8009096:	d014      	beq.n	80090c2 <HAL_PCD_EP_Close+0x62>
 8009098:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800909a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800909c:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090a0:	f005 fd66 	bl	800eb70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090a4:	2000      	movs	r0, #0
 80090a6:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 80090aa:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090ac:	333c      	adds	r3, #60	@ 0x3c
 80090ae:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 80090b0:	f04f 0c01 	mov.w	ip, #1
 80090b4:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80090b8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80090ba:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d1ea      	bne.n	8009098 <HAL_PCD_EP_Close+0x38>
 80090c2:	2002      	movs	r0, #2
}
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	bf00      	nop

080090c8 <HAL_PCD_EP_Receive>:
{
 80090c8:	b510      	push	{r4, lr}
 80090ca:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 80090ce:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 80090d2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090d6:	211c      	movs	r1, #28
 80090d8:	fb01 0104 	mla	r1, r1, r4, r0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80090dc:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 80090de:	f8cc 3210 	str.w	r3, [ip, #528]	@ 0x210
  ep->xfer_count = 0U;
 80090e2:	2300      	movs	r3, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090e4:	f501 71fe 	add.w	r1, r1, #508	@ 0x1fc
  ep->xfer_buff = pBuf;
 80090e8:	f8cc 2208 	str.w	r2, [ip, #520]	@ 0x208
  ep->xfer_count = 0U;
 80090ec:	f8cc 3214 	str.w	r3, [ip, #532]	@ 0x214
  ep->is_in = 0U;
 80090f0:	f88c 31fd 	strb.w	r3, [ip, #509]	@ 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80090f4:	f88c 41fc 	strb.w	r4, [ip, #508]	@ 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090f8:	b91c      	cbnz	r4, 8009102 <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80090fa:	f005 fe7d 	bl	800edf8 <USB_EP0StartXfer>
}
 80090fe:	2000      	movs	r0, #0
 8009100:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009102:	f005 fd97 	bl	800ec34 <USB_EPStartXfer>
}
 8009106:	2000      	movs	r0, #0
 8009108:	bd10      	pop	{r4, pc}
 800910a:	bf00      	nop

0800910c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800910c:	f001 010f 	and.w	r1, r1, #15
 8009110:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009114:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8009118:	f8d0 0214 	ldr.w	r0, [r0, #532]	@ 0x214
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop

08009120 <HAL_PCD_EP_Transmit>:
{
 8009120:	b510      	push	{r4, lr}
 8009122:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8009126:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 800912a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800912e:	211c      	movs	r1, #28
 8009130:	fb01 0104 	mla	r1, r1, r4, r0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009134:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 8009136:	f8cc 3050 	str.w	r3, [ip, #80]	@ 0x50
  ep->xfer_count = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	f8cc 3054 	str.w	r3, [ip, #84]	@ 0x54
  ep->is_in = 1U;
 8009140:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009142:	313c      	adds	r1, #60	@ 0x3c
  ep->xfer_buff = pBuf;
 8009144:	f8cc 2048 	str.w	r2, [ip, #72]	@ 0x48
  ep->is_in = 1U;
 8009148:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800914c:	f88c 403c 	strb.w	r4, [ip, #60]	@ 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009150:	b91c      	cbnz	r4, 800915a <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009152:	f005 fe51 	bl	800edf8 <USB_EP0StartXfer>
}
 8009156:	2000      	movs	r0, #0
 8009158:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800915a:	f005 fd6b 	bl	800ec34 <USB_EPStartXfer>
}
 800915e:	2000      	movs	r0, #0
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop

08009164 <HAL_PCD_EP_SetStall>:
{
 8009164:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009166:	6843      	ldr	r3, [r0, #4]
 8009168:	f001 050f 	and.w	r5, r1, #15
 800916c:	429d      	cmp	r5, r3
 800916e:	d833      	bhi.n	80091d8 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8009170:	060b      	lsls	r3, r1, #24
 8009172:	4604      	mov	r4, r0
 8009174:	d41c      	bmi.n	80091b0 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8009176:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800917a:	221c      	movs	r2, #28
 800917c:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8009180:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8009184:	f501 71fe 	add.w	r1, r1, #508	@ 0x1fc
    ep->is_in = 0U;
 8009188:	2200      	movs	r2, #0
 800918a:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
  ep->is_stall = 1U;
 800918e:	2301      	movs	r3, #1
 8009190:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009192:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8009194:	f894 23bc 	ldrb.w	r2, [r4, #956]	@ 0x3bc
 8009198:	429a      	cmp	r2, r3
 800919a:	d01b      	beq.n	80091d4 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800919c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800919e:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80091a2:	f005 febb 	bl	800ef1c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091a6:	b1cd      	cbz	r5, 80091dc <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 80091a8:	2000      	movs	r0, #0
 80091aa:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80091b0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091b4:	211c      	movs	r1, #28
 80091b6:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80091ba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80091be:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091c0:	313c      	adds	r1, #60	@ 0x3c
    ep->is_in = 1U;
 80091c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  ep->is_stall = 1U;
 80091c6:	2301      	movs	r3, #1
 80091c8:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091ca:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80091cc:	f894 23bc 	ldrb.w	r2, [r4, #956]	@ 0x3bc
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d1e3      	bne.n	800919c <HAL_PCD_EP_SetStall+0x38>
 80091d4:	2002      	movs	r0, #2
}
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80091d8:	2001      	movs	r0, #1
}
 80091da:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80091dc:	6820      	ldr	r0, [r4, #0]
 80091de:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 80091e2:	f005 ff69 	bl	800f0b8 <USB_EP0_OutStart>
 80091e6:	e7df      	b.n	80091a8 <HAL_PCD_EP_SetStall+0x44>

080091e8 <HAL_PCD_EP_ClrStall>:
{
 80091e8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80091ea:	6843      	ldr	r3, [r0, #4]
 80091ec:	f001 020f 	and.w	r2, r1, #15
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d82f      	bhi.n	8009254 <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 80091f4:	4604      	mov	r4, r0
 80091f6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 80091fa:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80091fe:	0609      	lsls	r1, r1, #24
 8009200:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 8009204:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 8009208:	d416      	bmi.n	8009238 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800920a:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800920e:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8009210:	2500      	movs	r5, #0
 8009212:	f880 51fd 	strb.w	r5, [r0, #509]	@ 0x1fd
  ep->is_stall = 0U;
 8009216:	2500      	movs	r5, #0
 8009218:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800921a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800921c:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 8009220:	2b01      	cmp	r3, #1
 8009222:	d015      	beq.n	8009250 <HAL_PCD_EP_ClrStall+0x68>
 8009224:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009226:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009228:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800922c:	f005 fea4 	bl	800ef78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009230:	f884 53bc 	strb.w	r5, [r4, #956]	@ 0x3bc
  return HAL_OK;
 8009234:	4628      	mov	r0, r5
}
 8009236:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009238:	333c      	adds	r3, #60	@ 0x3c
 800923a:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800923c:	2501      	movs	r5, #1
 800923e:	f880 503d 	strb.w	r5, [r0, #61]	@ 0x3d
  ep->is_stall = 0U;
 8009242:	2500      	movs	r5, #0
 8009244:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009246:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009248:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 800924c:	2b01      	cmp	r3, #1
 800924e:	d1e9      	bne.n	8009224 <HAL_PCD_EP_ClrStall+0x3c>
 8009250:	2002      	movs	r0, #2
}
 8009252:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009254:	2001      	movs	r0, #1
}
 8009256:	bd38      	pop	{r3, r4, r5, pc}

08009258 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009258:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800925a:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800925c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (fifo == 0U)
 800925e:	b919      	cbnz	r1, 8009268 <HAL_PCDEx_SetTxFiFo+0x10>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009260:	4313      	orrs	r3, r2
 8009262:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8009264:	2000      	movs	r0, #0
 8009266:	4770      	bx	lr
{
 8009268:	b430      	push	{r4, r5}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800926a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800926c:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800926e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009272:	d06b      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009274:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
    for (i = 0U; i < (fifo - 1U); i++)
 8009278:	2901      	cmp	r1, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800927a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800927e:	d065      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009280:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    for (i = 0U; i < (fifo - 1U); i++)
 8009284:	2902      	cmp	r1, #2
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009286:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800928a:	d05f      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800928c:	f8d0 410c 	ldr.w	r4, [r0, #268]	@ 0x10c
    for (i = 0U; i < (fifo - 1U); i++)
 8009290:	2903      	cmp	r1, #3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009292:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009296:	d059      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009298:	f8d0 4110 	ldr.w	r4, [r0, #272]	@ 0x110
    for (i = 0U; i < (fifo - 1U); i++)
 800929c:	2904      	cmp	r1, #4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800929e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092a2:	d053      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092a4:	f8d0 4114 	ldr.w	r4, [r0, #276]	@ 0x114
    for (i = 0U; i < (fifo - 1U); i++)
 80092a8:	2905      	cmp	r1, #5
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092ae:	d04d      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092b0:	f8d0 4118 	ldr.w	r4, [r0, #280]	@ 0x118
    for (i = 0U; i < (fifo - 1U); i++)
 80092b4:	2906      	cmp	r1, #6
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092ba:	d047      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092bc:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
    for (i = 0U; i < (fifo - 1U); i++)
 80092c0:	2907      	cmp	r1, #7
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092c6:	d041      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092c8:	f8d0 4120 	ldr.w	r4, [r0, #288]	@ 0x120
    for (i = 0U; i < (fifo - 1U); i++)
 80092cc:	2908      	cmp	r1, #8
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092d2:	d03b      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092d4:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
    for (i = 0U; i < (fifo - 1U); i++)
 80092d8:	2909      	cmp	r1, #9
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092de:	d035      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092e0:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
    for (i = 0U; i < (fifo - 1U); i++)
 80092e4:	290a      	cmp	r1, #10
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092e6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092ea:	d02f      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092ec:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
    for (i = 0U; i < (fifo - 1U); i++)
 80092f0:	290b      	cmp	r1, #11
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092f2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092f6:	d029      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092f8:	f8d0 4130 	ldr.w	r4, [r0, #304]	@ 0x130
    for (i = 0U; i < (fifo - 1U); i++)
 80092fc:	290c      	cmp	r1, #12
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009302:	d023      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009304:	f8d0 4134 	ldr.w	r4, [r0, #308]	@ 0x134
    for (i = 0U; i < (fifo - 1U); i++)
 8009308:	290d      	cmp	r1, #13
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800930a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800930e:	d01d      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009310:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
    for (i = 0U; i < (fifo - 1U); i++)
 8009314:	290e      	cmp	r1, #14
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009316:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800931a:	d017      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800931c:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
    for (i = 0U; i < (fifo - 1U); i++)
 8009320:	290f      	cmp	r1, #15
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009322:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009326:	d011      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009328:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
    for (i = 0U; i < (fifo - 1U); i++)
 800932c:	2910      	cmp	r1, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800932e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009332:	d00b      	beq.n	800934c <HAL_PCDEx_SetTxFiFo+0xf4>
 8009334:	2410      	movs	r4, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009336:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 800933a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800933e:	3401      	adds	r4, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009340:	f8dc 5004 	ldr.w	r5, [ip, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8009344:	428c      	cmp	r4, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009346:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800934a:	d3f4      	bcc.n	8009336 <HAL_PCDEx_SetTxFiFo+0xde>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800934c:	3140      	adds	r1, #64	@ 0x40
 800934e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009352:	431a      	orrs	r2, r3
}
 8009354:	2000      	movs	r0, #0
 8009356:	bc30      	pop	{r4, r5}
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009358:	604a      	str	r2, [r1, #4]
}
 800935a:	4770      	bx	lr

0800935c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800935c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800935e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8009360:	6259      	str	r1, [r3, #36]	@ 0x24
}
 8009362:	4770      	bx	lr

08009364 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009364:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8009366:	2000      	movs	r0, #0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009368:	681a      	ldr	r2, [r3, #0]
{
 800936a:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 800936c:	f883 03f4 	strb.w	r0, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009370:	6991      	ldr	r1, [r2, #24]
  hpcd->lpm_active = 1U;
 8009372:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009374:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
  hpcd->lpm_active = 1U;
 8009378:	f8c3 43fc 	str.w	r4, [r3, #1020]	@ 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800937c:	6191      	str	r1, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800937e:	6d53      	ldr	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8009380:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009388:	f043 0303 	orr.w	r3, r3, #3
 800938c:	6553      	str	r3, [r2, #84]	@ 0x54
}
 800938e:	4770      	bx	lr

08009390 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <HAL_PWREx_GetVoltageRange+0x1c>)
 8009392:	6818      	ldr	r0, [r3, #0]
 8009394:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8009398:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800939c:	d004      	beq.n	80093a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800939e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80093a2:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80093a6:	0240      	lsls	r0, r0, #9
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40007000 	.word	0x40007000

080093b0 <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80093b0:	4a35      	ldr	r2, [pc, #212]	@ (8009488 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80093b2:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80093b4:	b960      	cbnz	r0, 80093d0 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80093b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80093ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093be:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80093c2:	d01b      	beq.n	80093fc <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80093cc:	2000      	movs	r0, #0
}
 80093ce:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80093d0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80093d4:	d006      	beq.n	80093e4 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80093d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80093da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80093de:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80093e0:	2000      	movs	r0, #0
}
 80093e2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80093e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80093e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093ec:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80093f0:	d029      	beq.n	8009446 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093f6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80093fa:	e7f1      	b.n	80093e0 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009404:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009406:	4821      	ldr	r0, [pc, #132]	@ (800948c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009408:	4921      	ldr	r1, [pc, #132]	@ (8009490 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800940a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800940e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009412:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009414:	6803      	ldr	r3, [r0, #0]
 8009416:	2032      	movs	r0, #50	@ 0x32
 8009418:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800941c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800941e:	fba1 1303 	umull	r1, r3, r1, r3
 8009422:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009424:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009426:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800942a:	d506      	bpl.n	800943a <HAL_PWREx_ControlVoltageScaling+0x8a>
 800942c:	e000      	b.n	8009430 <HAL_PWREx_ControlVoltageScaling+0x80>
 800942e:	b123      	cbz	r3, 800943a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8009430:	6951      	ldr	r1, [r2, #20]
 8009432:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8009434:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009438:	d4f9      	bmi.n	800942e <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800943a:	4b13      	ldr	r3, [pc, #76]	@ (8009488 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	055b      	lsls	r3, r3, #21
 8009440:	d5ce      	bpl.n	80093e0 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8009442:	2003      	movs	r0, #3
 8009444:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800944a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800944e:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009450:	480e      	ldr	r0, [pc, #56]	@ (800948c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009452:	490f      	ldr	r1, [pc, #60]	@ (8009490 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009454:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009458:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800945c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800945e:	6803      	ldr	r3, [r0, #0]
 8009460:	2032      	movs	r0, #50	@ 0x32
 8009462:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009466:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009468:	fba1 1303 	umull	r1, r3, r1, r3
 800946c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800946e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009470:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009474:	d5e1      	bpl.n	800943a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8009476:	e001      	b.n	800947c <HAL_PWREx_ControlVoltageScaling+0xcc>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0de      	beq.n	800943a <HAL_PWREx_ControlVoltageScaling+0x8a>
 800947c:	6951      	ldr	r1, [r2, #20]
 800947e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8009480:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009484:	d5d9      	bpl.n	800943a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8009486:	e7f7      	b.n	8009478 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8009488:	40007000 	.word	0x40007000
 800948c:	200001e0 	.word	0x200001e0
 8009490:	431bde83 	.word	0x431bde83

08009494 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009494:	4a02      	ldr	r2, [pc, #8]	@ (80094a0 <HAL_PWREx_EnableVddUSB+0xc>)
 8009496:	6853      	ldr	r3, [r2, #4]
 8009498:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800949c:	6053      	str	r3, [r2, #4]
}
 800949e:	4770      	bx	lr
 80094a0:	40007000 	.word	0x40007000

080094a4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80094a4:	4a02      	ldr	r2, [pc, #8]	@ (80094b0 <HAL_PWREx_EnableVddIO2+0xc>)
 80094a6:	6853      	ldr	r3, [r2, #4]
 80094a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80094ac:	6053      	str	r3, [r2, #4]
}
 80094ae:	4770      	bx	lr
 80094b0:	40007000 	.word	0x40007000

080094b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80094b4:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80094b6:	4d1e      	ldr	r5, [pc, #120]	@ (8009530 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80094b8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80094ba:	00db      	lsls	r3, r3, #3
{
 80094bc:	b083      	sub	sp, #12
 80094be:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80094c0:	d51b      	bpl.n	80094fa <RCC_SetFlashLatencyFromMSIRange+0x46>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80094c2:	f7ff ff65 	bl	8009390 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80094c6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80094ca:	d028      	beq.n	800951e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80094cc:	2c7f      	cmp	r4, #127	@ 0x7f
 80094ce:	d812      	bhi.n	80094f6 <RCC_SetFlashLatencyFromMSIRange+0x42>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80094d0:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 80094d4:	fab4 f484 	clz	r4, r4
 80094d8:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80094da:	4916      	ldr	r1, [pc, #88]	@ (8009534 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80094dc:	680b      	ldr	r3, [r1, #0]
 80094de:	f023 030f 	bic.w	r3, r3, #15
 80094e2:	4323      	orrs	r3, r4
 80094e4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80094e6:	6808      	ldr	r0, [r1, #0]
 80094e8:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80094ec:	1b00      	subs	r0, r0, r4
 80094ee:	bf18      	it	ne
 80094f0:	2001      	movne	r0, #1
 80094f2:	b003      	add	sp, #12
 80094f4:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80094f6:	2402      	movs	r4, #2
 80094f8:	e7ef      	b.n	80094da <RCC_SetFlashLatencyFromMSIRange+0x26>
    __HAL_RCC_PWR_CLK_ENABLE();
 80094fa:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80094fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009500:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009502:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8009504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800950c:	f7ff ff40 	bl	8009390 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009510:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009512:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8009516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800951a:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800951c:	d1d6      	bne.n	80094cc <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 800951e:	2c80      	cmp	r4, #128	@ 0x80
 8009520:	d904      	bls.n	800952c <RCC_SetFlashLatencyFromMSIRange+0x78>
        latency = FLASH_LATENCY_2; /* 2WS */
 8009522:	2ca1      	cmp	r4, #161	@ 0xa1
 8009524:	bf34      	ite	cc
 8009526:	2401      	movcc	r4, #1
 8009528:	2402      	movcs	r4, #2
 800952a:	e7d6      	b.n	80094da <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800952c:	2400      	movs	r4, #0
 800952e:	e7d4      	b.n	80094da <RCC_SetFlashLatencyFromMSIRange+0x26>
 8009530:	40021000 	.word	0x40021000
 8009534:	40022000 	.word	0x40022000

08009538 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009538:	4a25      	ldr	r2, [pc, #148]	@ (80095d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800953a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800953c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800953e:	f013 030c 	ands.w	r3, r3, #12
 8009542:	d00b      	beq.n	800955c <HAL_RCC_GetSysClockFreq+0x24>
 8009544:	2b0c      	cmp	r3, #12
 8009546:	d03a      	beq.n	80095be <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009548:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800954c:	fa42 f303 	asr.w	r3, r2, r3
    sysclockfreq = HSE_VALUE;
 8009550:	f013 0f01 	tst.w	r3, #1
 8009554:	481f      	ldr	r0, [pc, #124]	@ (80095d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009556:	bf18      	it	ne
 8009558:	2000      	movne	r0, #0
 800955a:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800955c:	4a1c      	ldr	r2, [pc, #112]	@ (80095d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800955e:	6811      	ldr	r1, [r2, #0]
 8009560:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009562:	bf54      	ite	pl
 8009564:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009568:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800956a:	491b      	ldr	r1, [pc, #108]	@ (80095d8 <HAL_RCC_GetSysClockFreq+0xa0>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800956c:	bf54      	ite	pl
 800956e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009572:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8009576:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800957a:	b333      	cbz	r3, 80095ca <HAL_RCC_GetSysClockFreq+0x92>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800957c:	2b0c      	cmp	r3, #12
 800957e:	d125      	bne.n	80095cc <HAL_RCC_GetSysClockFreq+0x94>
{
 8009580:	b410      	push	{r4}
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009582:	4c13      	ldr	r4, [pc, #76]	@ (80095d0 <HAL_RCC_GetSysClockFreq+0x98>)
      pllvco = HSI_VALUE;
 8009584:	4a13      	ldr	r2, [pc, #76]	@ (80095d4 <HAL_RCC_GetSysClockFreq+0x9c>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009586:	68e3      	ldr	r3, [r4, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009588:	68e1      	ldr	r1, [r4, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800958a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800958e:	3b02      	subs	r3, #2
      pllvco = HSI_VALUE;
 8009590:	2b01      	cmp	r3, #1
 8009592:	bf98      	it	ls
 8009594:	4610      	movls	r0, r2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009596:	68e2      	ldr	r2, [r4, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009598:	68e3      	ldr	r3, [r4, #12]
}
 800959a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800959e:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80095a2:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095a6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80095aa:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80095ac:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095b0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80095b2:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80095b4:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80095b8:	fbb2 f0f3 	udiv	r0, r2, r3
}
 80095bc:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095be:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80095c2:	2a01      	cmp	r2, #1
 80095c4:	d0ca      	beq.n	800955c <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80095c6:	2000      	movs	r0, #0
 80095c8:	e7da      	b.n	8009580 <HAL_RCC_GetSysClockFreq+0x48>
}
 80095ca:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80095cc:	2000      	movs	r0, #0
  return sysclockfreq;
 80095ce:	4770      	bx	lr
 80095d0:	40021000 	.word	0x40021000
 80095d4:	00f42400 	.word	0x00f42400
 80095d8:	08015480 	.word	0x08015480

080095dc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80095dc:	2800      	cmp	r0, #0
 80095de:	f000 830c 	beq.w	8009bfa <HAL_RCC_OscConfig+0x61e>
{
 80095e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095e6:	4a99      	ldr	r2, [pc, #612]	@ (800984c <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80095e8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095ea:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095ec:	68d6      	ldr	r6, [r2, #12]
 80095ee:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80095f0:	06d8      	lsls	r0, r3, #27
{
 80095f2:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095f4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095f8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80095fc:	d52e      	bpl.n	800965c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80095fe:	2d00      	cmp	r5, #0
 8009600:	f000 812b 	beq.w	800985a <HAL_RCC_OscConfig+0x27e>
 8009604:	2d0c      	cmp	r5, #12
 8009606:	f000 8125 	beq.w	8009854 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800960a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800960c:	4f8f      	ldr	r7, [pc, #572]	@ (800984c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 819a 	beq.w	8009948 <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	f043 0301 	orr.w	r3, r3, #1
 800961a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800961c:	f7fd fe10 	bl	8007240 <HAL_GetTick>
 8009620:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009622:	e006      	b.n	8009632 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009624:	f7fd fe0c 	bl	8007240 <HAL_GetTick>
 8009628:	eba0 0008 	sub.w	r0, r0, r8
 800962c:	2802      	cmp	r0, #2
 800962e:	f200 819b 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	079b      	lsls	r3, r3, #30
 8009636:	d5f5      	bpl.n	8009624 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f043 0308 	orr.w	r3, r3, #8
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	6a22      	ldr	r2, [r4, #32]
 8009644:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009648:	4313      	orrs	r3, r2
 800964a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	69e2      	ldr	r2, [r4, #28]
 8009650:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009654:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009658:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	07d9      	lsls	r1, r3, #31
 800965e:	f100 80cc 	bmi.w	80097fa <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009662:	0799      	lsls	r1, r3, #30
 8009664:	d523      	bpl.n	80096ae <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009666:	2d04      	cmp	r5, #4
 8009668:	f000 815e 	beq.w	8009928 <HAL_RCC_OscConfig+0x34c>
 800966c:	2d0c      	cmp	r5, #12
 800966e:	f000 8158 	beq.w	8009922 <HAL_RCC_OscConfig+0x346>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009672:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8009674:	4e75      	ldr	r6, [pc, #468]	@ (800984c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8191 	beq.w	800999e <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_ENABLE();
 800967c:	6833      	ldr	r3, [r6, #0]
 800967e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009682:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009684:	f7fd fddc 	bl	8007240 <HAL_GetTick>
 8009688:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800968a:	e005      	b.n	8009698 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800968c:	f7fd fdd8 	bl	8007240 <HAL_GetTick>
 8009690:	1bc0      	subs	r0, r0, r7
 8009692:	2802      	cmp	r0, #2
 8009694:	f200 8168 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009698:	6833      	ldr	r3, [r6, #0]
 800969a:	055b      	lsls	r3, r3, #21
 800969c:	d5f6      	bpl.n	800968c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800969e:	6873      	ldr	r3, [r6, #4]
 80096a0:	6922      	ldr	r2, [r4, #16]
 80096a2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80096a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80096aa:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	0719      	lsls	r1, r3, #28
 80096b0:	d519      	bpl.n	80096e6 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80096b2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80096b4:	4e65      	ldr	r6, [pc, #404]	@ (800984c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 811f 	beq.w	80098fa <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_LSI_ENABLE();
 80096bc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80096c0:	f043 0301 	orr.w	r3, r3, #1
 80096c4:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80096c8:	f7fd fdba 	bl	8007240 <HAL_GetTick>
 80096cc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80096ce:	e005      	b.n	80096dc <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096d0:	f7fd fdb6 	bl	8007240 <HAL_GetTick>
 80096d4:	1bc0      	subs	r0, r0, r7
 80096d6:	2802      	cmp	r0, #2
 80096d8:	f200 8146 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80096dc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80096e0:	079a      	lsls	r2, r3, #30
 80096e2:	d5f5      	bpl.n	80096d0 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	075f      	lsls	r7, r3, #29
 80096e8:	d53f      	bpl.n	800976a <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80096ea:	4b58      	ldr	r3, [pc, #352]	@ (800984c <HAL_RCC_OscConfig+0x270>)
 80096ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096ee:	00d6      	lsls	r6, r2, #3
 80096f0:	f100 8153 	bmi.w	800999a <HAL_RCC_OscConfig+0x3be>
      __HAL_RCC_PWR_CLK_ENABLE();
 80096f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096f6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80096fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80096fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009706:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009708:	4f51      	ldr	r7, [pc, #324]	@ (8009850 <HAL_RCC_OscConfig+0x274>)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	05d8      	lsls	r0, r3, #23
 800970e:	f140 81a0 	bpl.w	8009a52 <HAL_RCC_OscConfig+0x476>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009712:	68a3      	ldr	r3, [r4, #8]
 8009714:	2b01      	cmp	r3, #1
 8009716:	f000 8154 	beq.w	80099c2 <HAL_RCC_OscConfig+0x3e6>
 800971a:	2b05      	cmp	r3, #5
 800971c:	f000 81c4 	beq.w	8009aa8 <HAL_RCC_OscConfig+0x4cc>
 8009720:	4f4a      	ldr	r7, [pc, #296]	@ (800984c <HAL_RCC_OscConfig+0x270>)
 8009722:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8009726:	f022 0201 	bic.w	r2, r2, #1
 800972a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800972e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8009732:	f022 0204 	bic.w	r2, r2, #4
 8009736:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 8148 	bne.w	80099d0 <HAL_RCC_OscConfig+0x3f4>
      tickstart = HAL_GetTick();
 8009740:	f7fd fd7e 	bl	8007240 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009744:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009748:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800974a:	e006      	b.n	800975a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800974c:	f7fd fd78 	bl	8007240 <HAL_GetTick>
 8009750:	eba0 0008 	sub.w	r0, r0, r8
 8009754:	4548      	cmp	r0, r9
 8009756:	f200 8107 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800975a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800975e:	079b      	lsls	r3, r3, #30
 8009760:	d4f4      	bmi.n	800974c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8009762:	2e00      	cmp	r6, #0
 8009764:	f040 8187 	bne.w	8009a76 <HAL_RCC_OscConfig+0x49a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	069e      	lsls	r6, r3, #26
 800976c:	d518      	bpl.n	80097a0 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800976e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8009770:	4e36      	ldr	r6, [pc, #216]	@ (800984c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8159 	beq.w	8009a2a <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_ENABLE();
 8009778:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800977c:	f043 0301 	orr.w	r3, r3, #1
 8009780:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8009784:	f7fd fd5c 	bl	8007240 <HAL_GetTick>
 8009788:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800978a:	e005      	b.n	8009798 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800978c:	f7fd fd58 	bl	8007240 <HAL_GetTick>
 8009790:	1bc0      	subs	r0, r0, r7
 8009792:	2802      	cmp	r0, #2
 8009794:	f200 80e8 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009798:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800979c:	0798      	lsls	r0, r3, #30
 800979e:	d5f5      	bpl.n	800978c <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80097a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80097a2:	b333      	cbz	r3, 80097f2 <HAL_RCC_OscConfig+0x216>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	f000 818d 	beq.w	8009ac4 <HAL_RCC_OscConfig+0x4e8>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80097aa:	2d0c      	cmp	r5, #12
 80097ac:	f000 8097 	beq.w	80098de <HAL_RCC_OscConfig+0x302>
        __HAL_RCC_PLL_DISABLE();
 80097b0:	4b26      	ldr	r3, [pc, #152]	@ (800984c <HAL_RCC_OscConfig+0x270>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80097b8:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	f012 5f20 	tst.w	r2, #671088640	@ 0x28000000
 80097c0:	d103      	bne.n	80097ca <HAL_RCC_OscConfig+0x1ee>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	f022 0203 	bic.w	r2, r2, #3
 80097c8:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80097ca:	4c20      	ldr	r4, [pc, #128]	@ (800984c <HAL_RCC_OscConfig+0x270>)
 80097cc:	68e3      	ldr	r3, [r4, #12]
 80097ce:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80097d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097d6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80097d8:	f7fd fd32 	bl	8007240 <HAL_GetTick>
 80097dc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097de:	e005      	b.n	80097ec <HAL_RCC_OscConfig+0x210>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097e0:	f7fd fd2e 	bl	8007240 <HAL_GetTick>
 80097e4:	1b40      	subs	r0, r0, r5
 80097e6:	2802      	cmp	r0, #2
 80097e8:	f200 80be 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	019b      	lsls	r3, r3, #6
 80097f0:	d4f6      	bmi.n	80097e0 <HAL_RCC_OscConfig+0x204>
  return HAL_OK;
 80097f2:	2000      	movs	r0, #0
}
 80097f4:	b003      	add	sp, #12
 80097f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80097fa:	2d08      	cmp	r5, #8
 80097fc:	d073      	beq.n	80098e6 <HAL_RCC_OscConfig+0x30a>
 80097fe:	2d0c      	cmp	r5, #12
 8009800:	d06f      	beq.n	80098e2 <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009808:	f000 80b2 	beq.w	8009970 <HAL_RCC_OscConfig+0x394>
 800980c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009810:	f000 813d 	beq.w	8009a8e <HAL_RCC_OscConfig+0x4b2>
 8009814:	4f0d      	ldr	r7, [pc, #52]	@ (800984c <HAL_RCC_OscConfig+0x270>)
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800981c:	603a      	str	r2, [r7, #0]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009824:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009826:	2b00      	cmp	r3, #0
 8009828:	f040 80a7 	bne.w	800997a <HAL_RCC_OscConfig+0x39e>
        tickstart = HAL_GetTick();
 800982c:	f7fd fd08 	bl	8007240 <HAL_GetTick>
 8009830:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009832:	e006      	b.n	8009842 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009834:	f7fd fd04 	bl	8007240 <HAL_GetTick>
 8009838:	eba0 0008 	sub.w	r0, r0, r8
 800983c:	2864      	cmp	r0, #100	@ 0x64
 800983e:	f200 8093 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	0398      	lsls	r0, r3, #14
 8009846:	d4f5      	bmi.n	8009834 <HAL_RCC_OscConfig+0x258>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	e70a      	b.n	8009662 <HAL_RCC_OscConfig+0x86>
 800984c:	40021000 	.word	0x40021000
 8009850:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009854:	2e01      	cmp	r6, #1
 8009856:	f47f aed8 	bne.w	800960a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800985a:	4ba8      	ldr	r3, [pc, #672]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	0799      	lsls	r1, r3, #30
 8009860:	d43a      	bmi.n	80098d8 <HAL_RCC_OscConfig+0x2fc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009862:	4ba6      	ldr	r3, [pc, #664]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 8009864:	6a20      	ldr	r0, [r4, #32]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	0712      	lsls	r2, r2, #28
 800986a:	bf56      	itet	pl
 800986c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8009870:	681b      	ldrmi	r3, [r3, #0]
 8009872:	091b      	lsrpl	r3, r3, #4
 8009874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009878:	4298      	cmp	r0, r3
 800987a:	f200 80be 	bhi.w	80099fa <HAL_RCC_OscConfig+0x41e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800987e:	4b9f      	ldr	r3, [pc, #636]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	f042 0208 	orr.w	r2, r2, #8
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800988e:	4302      	orrs	r2, r0
 8009890:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	69e1      	ldr	r1, [r4, #28]
 8009896:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800989a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800989e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80098a0:	2d00      	cmp	r5, #0
 80098a2:	f000 80ee 	beq.w	8009a82 <HAL_RCC_OscConfig+0x4a6>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098a6:	f7ff fe47 	bl	8009538 <HAL_RCC_GetSysClockFreq>
 80098aa:	4b94      	ldr	r3, [pc, #592]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 80098ac:	4a94      	ldr	r2, [pc, #592]	@ (8009b00 <HAL_RCC_OscConfig+0x524>)
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80098b4:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80098b6:	4a93      	ldr	r2, [pc, #588]	@ (8009b04 <HAL_RCC_OscConfig+0x528>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098b8:	f003 031f 	and.w	r3, r3, #31
 80098bc:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 80098c0:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098c2:	4a91      	ldr	r2, [pc, #580]	@ (8009b08 <HAL_RCC_OscConfig+0x52c>)
 80098c4:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80098c6:	f7fd fc7b 	bl	80071c0 <HAL_InitTick>
        if(status != HAL_OK)
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d192      	bne.n	80097f4 <HAL_RCC_OscConfig+0x218>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	07d9      	lsls	r1, r3, #31
 80098d2:	f57f aec6 	bpl.w	8009662 <HAL_RCC_OscConfig+0x86>
 80098d6:	e790      	b.n	80097fa <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80098d8:	69a3      	ldr	r3, [r4, #24]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1c1      	bne.n	8009862 <HAL_RCC_OscConfig+0x286>
    return HAL_ERROR;
 80098de:	2001      	movs	r0, #1
 80098e0:	e788      	b.n	80097f4 <HAL_RCC_OscConfig+0x218>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80098e2:	2e03      	cmp	r6, #3
 80098e4:	d18d      	bne.n	8009802 <HAL_RCC_OscConfig+0x226>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098e6:	4a85      	ldr	r2, [pc, #532]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 80098e8:	6812      	ldr	r2, [r2, #0]
 80098ea:	0392      	lsls	r2, r2, #14
 80098ec:	f57f aeb9 	bpl.w	8009662 <HAL_RCC_OscConfig+0x86>
 80098f0:	6862      	ldr	r2, [r4, #4]
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	f47f aeb5 	bne.w	8009662 <HAL_RCC_OscConfig+0x86>
 80098f8:	e7f1      	b.n	80098de <HAL_RCC_OscConfig+0x302>
      __HAL_RCC_LSI_DISABLE();
 80098fa:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80098fe:	f023 0301 	bic.w	r3, r3, #1
 8009902:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8009906:	f7fd fc9b 	bl	8007240 <HAL_GetTick>
 800990a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800990c:	e004      	b.n	8009918 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800990e:	f7fd fc97 	bl	8007240 <HAL_GetTick>
 8009912:	1bc0      	subs	r0, r0, r7
 8009914:	2802      	cmp	r0, #2
 8009916:	d827      	bhi.n	8009968 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009918:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800991c:	079b      	lsls	r3, r3, #30
 800991e:	d4f6      	bmi.n	800990e <HAL_RCC_OscConfig+0x332>
 8009920:	e6e0      	b.n	80096e4 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009922:	2e02      	cmp	r6, #2
 8009924:	f47f aea5 	bne.w	8009672 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009928:	4a74      	ldr	r2, [pc, #464]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 800992a:	6812      	ldr	r2, [r2, #0]
 800992c:	0552      	lsls	r2, r2, #21
 800992e:	d502      	bpl.n	8009936 <HAL_RCC_OscConfig+0x35a>
 8009930:	68e2      	ldr	r2, [r4, #12]
 8009932:	2a00      	cmp	r2, #0
 8009934:	d0d3      	beq.n	80098de <HAL_RCC_OscConfig+0x302>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009936:	4971      	ldr	r1, [pc, #452]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 8009938:	6920      	ldr	r0, [r4, #16]
 800993a:	684a      	ldr	r2, [r1, #4]
 800993c:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 8009940:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8009944:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009946:	e6b2      	b.n	80096ae <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	f023 0301 	bic.w	r3, r3, #1
 800994e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8009950:	f7fd fc76 	bl	8007240 <HAL_GetTick>
 8009954:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	0798      	lsls	r0, r3, #30
 800995a:	d5b8      	bpl.n	80098ce <HAL_RCC_OscConfig+0x2f2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800995c:	f7fd fc70 	bl	8007240 <HAL_GetTick>
 8009960:	eba0 0008 	sub.w	r0, r0, r8
 8009964:	2802      	cmp	r0, #2
 8009966:	d9f6      	bls.n	8009956 <HAL_RCC_OscConfig+0x37a>
            return HAL_TIMEOUT;
 8009968:	2003      	movs	r0, #3
}
 800996a:	b003      	add	sp, #12
 800996c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009970:	4a62      	ldr	r2, [pc, #392]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 8009972:	6813      	ldr	r3, [r2, #0]
 8009974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009978:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800997a:	f7fd fc61 	bl	8007240 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800997e:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009afc <HAL_RCC_OscConfig+0x520>
        tickstart = HAL_GetTick();
 8009982:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009984:	e004      	b.n	8009990 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009986:	f7fd fc5b 	bl	8007240 <HAL_GetTick>
 800998a:	1bc0      	subs	r0, r0, r7
 800998c:	2864      	cmp	r0, #100	@ 0x64
 800998e:	d8eb      	bhi.n	8009968 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009990:	f8d8 3000 	ldr.w	r3, [r8]
 8009994:	039b      	lsls	r3, r3, #14
 8009996:	d5f6      	bpl.n	8009986 <HAL_RCC_OscConfig+0x3aa>
 8009998:	e756      	b.n	8009848 <HAL_RCC_OscConfig+0x26c>
    FlagStatus       pwrclkchanged = RESET;
 800999a:	2600      	movs	r6, #0
 800999c:	e6b4      	b.n	8009708 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 800999e:	6833      	ldr	r3, [r6, #0]
 80099a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80099a6:	f7fd fc4b 	bl	8007240 <HAL_GetTick>
 80099aa:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099ac:	e004      	b.n	80099b8 <HAL_RCC_OscConfig+0x3dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ae:	f7fd fc47 	bl	8007240 <HAL_GetTick>
 80099b2:	1bc0      	subs	r0, r0, r7
 80099b4:	2802      	cmp	r0, #2
 80099b6:	d8d7      	bhi.n	8009968 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099b8:	6833      	ldr	r3, [r6, #0]
 80099ba:	0558      	lsls	r0, r3, #21
 80099bc:	d4f7      	bmi.n	80099ae <HAL_RCC_OscConfig+0x3d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	e675      	b.n	80096ae <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099c2:	4a4e      	ldr	r2, [pc, #312]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 80099c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80099d0:	f7fd fc36 	bl	8007240 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099d4:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8009afc <HAL_RCC_OscConfig+0x520>
      tickstart = HAL_GetTick();
 80099d8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099da:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099de:	e004      	b.n	80099ea <HAL_RCC_OscConfig+0x40e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099e0:	f7fd fc2e 	bl	8007240 <HAL_GetTick>
 80099e4:	1bc0      	subs	r0, r0, r7
 80099e6:	4548      	cmp	r0, r9
 80099e8:	d8be      	bhi.n	8009968 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099ea:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 80099ee:	079a      	lsls	r2, r3, #30
 80099f0:	d5f6      	bpl.n	80099e0 <HAL_RCC_OscConfig+0x404>
    if(pwrclkchanged == SET)
 80099f2:	2e00      	cmp	r6, #0
 80099f4:	f43f aeb8 	beq.w	8009768 <HAL_RCC_OscConfig+0x18c>
 80099f8:	e03d      	b.n	8009a76 <HAL_RCC_OscConfig+0x49a>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80099fa:	f7ff fd5b 	bl	80094b4 <RCC_SetFlashLatencyFromMSIRange>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f47f af6d 	bne.w	80098de <HAL_RCC_OscConfig+0x302>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a04:	4b3d      	ldr	r3, [pc, #244]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	f042 0208 	orr.w	r2, r2, #8
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	6a21      	ldr	r1, [r4, #32]
 8009a12:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009a16:	430a      	orrs	r2, r1
 8009a18:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	69e1      	ldr	r1, [r4, #28]
 8009a1e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8009a22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009a26:	605a      	str	r2, [r3, #4]
 8009a28:	e73d      	b.n	80098a6 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSI48_DISABLE();
 8009a2a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009a2e:	f023 0301 	bic.w	r3, r3, #1
 8009a32:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8009a36:	f7fd fc03 	bl	8007240 <HAL_GetTick>
 8009a3a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009a3c:	e004      	b.n	8009a48 <HAL_RCC_OscConfig+0x46c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a3e:	f7fd fbff 	bl	8007240 <HAL_GetTick>
 8009a42:	1bc0      	subs	r0, r0, r7
 8009a44:	2802      	cmp	r0, #2
 8009a46:	d88f      	bhi.n	8009968 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009a48:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009a4c:	0799      	lsls	r1, r3, #30
 8009a4e:	d4f6      	bmi.n	8009a3e <HAL_RCC_OscConfig+0x462>
 8009a50:	e6a6      	b.n	80097a0 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a58:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8009a5a:	f7fd fbf1 	bl	8007240 <HAL_GetTick>
 8009a5e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	05d9      	lsls	r1, r3, #23
 8009a64:	f53f ae55 	bmi.w	8009712 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a68:	f7fd fbea 	bl	8007240 <HAL_GetTick>
 8009a6c:	eba0 0008 	sub.w	r0, r0, r8
 8009a70:	2802      	cmp	r0, #2
 8009a72:	d9f5      	bls.n	8009a60 <HAL_RCC_OscConfig+0x484>
 8009a74:	e778      	b.n	8009968 <HAL_RCC_OscConfig+0x38c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a76:	4a21      	ldr	r2, [pc, #132]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 8009a78:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a80:	e672      	b.n	8009768 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a82:	f7ff fd17 	bl	80094b4 <RCC_SetFlashLatencyFromMSIRange>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f43f af0d 	beq.w	80098a6 <HAL_RCC_OscConfig+0x2ca>
 8009a8c:	e727      	b.n	80098de <HAL_RCC_OscConfig+0x302>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009a92:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009aa4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009aa6:	e768      	b.n	800997a <HAL_RCC_OscConfig+0x39e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009aa8:	4b14      	ldr	r3, [pc, #80]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 8009aaa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009aae:	f042 0204 	orr.w	r2, r2, #4
 8009ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8009ab6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ac2:	e785      	b.n	80099d0 <HAL_RCC_OscConfig+0x3f4>
      pll_config = RCC->PLLCFGR;
 8009ac4:	4e0d      	ldr	r6, [pc, #52]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ac6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8009ac8:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009aca:	f003 0103 	and.w	r1, r3, #3
 8009ace:	4291      	cmp	r1, r2
 8009ad0:	d056      	beq.n	8009b80 <HAL_RCC_OscConfig+0x5a4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009ad2:	2d0c      	cmp	r5, #12
 8009ad4:	f43f af03 	beq.w	80098de <HAL_RCC_OscConfig+0x302>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009ad8:	4d08      	ldr	r5, [pc, #32]	@ (8009afc <HAL_RCC_OscConfig+0x520>)
 8009ada:	682b      	ldr	r3, [r5, #0]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	f53f aefe 	bmi.w	80098de <HAL_RCC_OscConfig+0x302>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009ae2:	682b      	ldr	r3, [r5, #0]
 8009ae4:	00db      	lsls	r3, r3, #3
 8009ae6:	f53f aefa 	bmi.w	80098de <HAL_RCC_OscConfig+0x302>
            __HAL_RCC_PLL_DISABLE();
 8009aea:	682b      	ldr	r3, [r5, #0]
 8009aec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009af0:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8009af2:	f7fd fba5 	bl	8007240 <HAL_GetTick>
 8009af6:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009af8:	e00e      	b.n	8009b18 <HAL_RCC_OscConfig+0x53c>
 8009afa:	bf00      	nop
 8009afc:	40021000 	.word	0x40021000
 8009b00:	080154b0 	.word	0x080154b0
 8009b04:	200001e8 	.word	0x200001e8
 8009b08:	200001e0 	.word	0x200001e0
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b0c:	f7fd fb98 	bl	8007240 <HAL_GetTick>
 8009b10:	1b80      	subs	r0, r0, r6
 8009b12:	2802      	cmp	r0, #2
 8009b14:	f63f af28 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	019f      	lsls	r7, r3, #6
 8009b1c:	d4f6      	bmi.n	8009b0c <HAL_RCC_OscConfig+0x530>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b1e:	68e9      	ldr	r1, [r5, #12]
 8009b20:	4b37      	ldr	r3, [pc, #220]	@ (8009c00 <HAL_RCC_OscConfig+0x624>)
 8009b22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009b24:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b26:	4e37      	ldr	r6, [pc, #220]	@ (8009c04 <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b28:	400b      	ands	r3, r1
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8009b30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009b34:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8009b38:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8009b3c:	3801      	subs	r0, #1
 8009b3e:	0849      	lsrs	r1, r1, #1
 8009b40:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8009b44:	3901      	subs	r1, #1
 8009b46:	0852      	lsrs	r2, r2, #1
 8009b48:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8009b4c:	3a01      	subs	r2, #1
 8009b4e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009b52:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b5a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b5c:	68eb      	ldr	r3, [r5, #12]
 8009b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b62:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8009b64:	f7fd fb6c 	bl	8007240 <HAL_GetTick>
 8009b68:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b6a:	e005      	b.n	8009b78 <HAL_RCC_OscConfig+0x59c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b6c:	f7fd fb68 	bl	8007240 <HAL_GetTick>
 8009b70:	1b00      	subs	r0, r0, r4
 8009b72:	2802      	cmp	r0, #2
 8009b74:	f63f aef8 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b78:	6833      	ldr	r3, [r6, #0]
 8009b7a:	0198      	lsls	r0, r3, #6
 8009b7c:	d5f6      	bpl.n	8009b6c <HAL_RCC_OscConfig+0x590>
 8009b7e:	e638      	b.n	80097f2 <HAL_RCC_OscConfig+0x216>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009b80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009b82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009b86:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b88:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8009b8c:	d1a1      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009b8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009b94:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8009b98:	d19b      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009b9a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009b9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ba0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8009ba4:	d195      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ba6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009ba8:	0852      	lsrs	r2, r2, #1
 8009baa:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8009bae:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009bb0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8009bb4:	d18d      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009bb6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009bb8:	0852      	lsrs	r2, r2, #1
 8009bba:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8009bbe:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009bc0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8009bc4:	d185      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x4f6>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bc6:	6833      	ldr	r3, [r6, #0]
 8009bc8:	0199      	lsls	r1, r3, #6
 8009bca:	f53f ae12 	bmi.w	80097f2 <HAL_RCC_OscConfig+0x216>
          __HAL_RCC_PLL_ENABLE();
 8009bce:	6833      	ldr	r3, [r6, #0]
 8009bd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bd4:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009bd6:	68f3      	ldr	r3, [r6, #12]
 8009bd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bdc:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8009bde:	f7fd fb2f 	bl	8007240 <HAL_GetTick>
 8009be2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009be4:	e005      	b.n	8009bf2 <HAL_RCC_OscConfig+0x616>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009be6:	f7fd fb2b 	bl	8007240 <HAL_GetTick>
 8009bea:	1b03      	subs	r3, r0, r4
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	f63f aebb 	bhi.w	8009968 <HAL_RCC_OscConfig+0x38c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bf2:	6833      	ldr	r3, [r6, #0]
 8009bf4:	019a      	lsls	r2, r3, #6
 8009bf6:	d5f6      	bpl.n	8009be6 <HAL_RCC_OscConfig+0x60a>
 8009bf8:	e5fb      	b.n	80097f2 <HAL_RCC_OscConfig+0x216>
    return HAL_ERROR;
 8009bfa:	2001      	movs	r0, #1
}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	019d800c 	.word	0x019d800c
 8009c04:	40021000 	.word	0x40021000

08009c08 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	f000 809b 	beq.w	8009d44 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c0e:	4a7c      	ldr	r2, [pc, #496]	@ (8009e00 <HAL_RCC_ClockConfig+0x1f8>)
{
 8009c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c14:	6813      	ldr	r3, [r2, #0]
 8009c16:	f003 030f 	and.w	r3, r3, #15
 8009c1a:	428b      	cmp	r3, r1
 8009c1c:	460d      	mov	r5, r1
 8009c1e:	4604      	mov	r4, r0
 8009c20:	d20c      	bcs.n	8009c3c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	f023 030f 	bic.w	r3, r3, #15
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2c:	6813      	ldr	r3, [r2, #0]
 8009c2e:	f003 030f 	and.w	r3, r3, #15
 8009c32:	428b      	cmp	r3, r1
 8009c34:	d002      	beq.n	8009c3c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009c36:	2001      	movs	r0, #1
}
 8009c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	07df      	lsls	r7, r3, #31
 8009c40:	d573      	bpl.n	8009d2a <HAL_RCC_ClockConfig+0x122>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c42:	6867      	ldr	r7, [r4, #4]
 8009c44:	2f03      	cmp	r7, #3
 8009c46:	d07f      	beq.n	8009d48 <HAL_RCC_ClockConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c48:	4b6e      	ldr	r3, [pc, #440]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c4a:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c4c:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c4e:	d076      	beq.n	8009d3e <HAL_RCC_ClockConfig+0x136>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009c50:	2f00      	cmp	r7, #0
 8009c52:	f040 8091 	bne.w	8009d78 <HAL_RCC_ClockConfig+0x170>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009c56:	079e      	lsls	r6, r3, #30
 8009c58:	d5ed      	bpl.n	8009c36 <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009c5a:	f7ff fc6d 	bl	8009538 <HAL_RCC_GetSysClockFreq>
 8009c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8009e08 <HAL_RCC_ClockConfig+0x200>)
 8009c60:	4298      	cmp	r0, r3
 8009c62:	f240 8084 	bls.w	8009d6e <HAL_RCC_ClockConfig+0x166>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009c66:	4a67      	ldr	r2, [pc, #412]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
 8009c68:	6893      	ldr	r3, [r2, #8]
 8009c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c72:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009c74:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c78:	4e62      	ldr	r6, [pc, #392]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
 8009c7a:	68b3      	ldr	r3, [r6, #8]
 8009c7c:	f023 0303 	bic.w	r3, r3, #3
 8009c80:	433b      	orrs	r3, r7
 8009c82:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009c84:	f7fd fadc 	bl	8007240 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c88:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8009c8c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c8e:	e004      	b.n	8009c9a <HAL_RCC_ClockConfig+0x92>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c90:	f7fd fad6 	bl	8007240 <HAL_GetTick>
 8009c94:	1bc0      	subs	r0, r0, r7
 8009c96:	4540      	cmp	r0, r8
 8009c98:	d86c      	bhi.n	8009d74 <HAL_RCC_ClockConfig+0x16c>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c9a:	68b3      	ldr	r3, [r6, #8]
 8009c9c:	6862      	ldr	r2, [r4, #4]
 8009c9e:	f003 030c 	and.w	r3, r3, #12
 8009ca2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009ca6:	d1f3      	bne.n	8009c90 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	0799      	lsls	r1, r3, #30
 8009cac:	d43f      	bmi.n	8009d2e <HAL_RCC_ClockConfig+0x126>
    if(hpre == RCC_SYSCLK_DIV2)
 8009cae:	f1b9 0f00 	cmp.w	r9, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_RCC_ClockConfig+0xb4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009cb4:	68b2      	ldr	r2, [r6, #8]
 8009cb6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009cba:	60b2      	str	r2, [r6, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009cbc:	4950      	ldr	r1, [pc, #320]	@ (8009e00 <HAL_RCC_ClockConfig+0x1f8>)
 8009cbe:	680a      	ldr	r2, [r1, #0]
 8009cc0:	f002 020f 	and.w	r2, r2, #15
 8009cc4:	42aa      	cmp	r2, r5
 8009cc6:	d909      	bls.n	8009cdc <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cc8:	680a      	ldr	r2, [r1, #0]
 8009cca:	f022 020f 	bic.w	r2, r2, #15
 8009cce:	432a      	orrs	r2, r5
 8009cd0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cd2:	680a      	ldr	r2, [r1, #0]
 8009cd4:	f002 020f 	and.w	r2, r2, #15
 8009cd8:	42aa      	cmp	r2, r5
 8009cda:	d1ac      	bne.n	8009c36 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cdc:	075a      	lsls	r2, r3, #29
 8009cde:	d506      	bpl.n	8009cee <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ce0:	4948      	ldr	r1, [pc, #288]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
 8009ce2:	68e0      	ldr	r0, [r4, #12]
 8009ce4:	688a      	ldr	r2, [r1, #8]
 8009ce6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009cea:	4302      	orrs	r2, r0
 8009cec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cee:	071b      	lsls	r3, r3, #28
 8009cf0:	d507      	bpl.n	8009d02 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009cf2:	4a44      	ldr	r2, [pc, #272]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
 8009cf4:	6921      	ldr	r1, [r4, #16]
 8009cf6:	6893      	ldr	r3, [r2, #8]
 8009cf8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8009cfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009d00:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d02:	f7ff fc19 	bl	8009538 <HAL_RCC_GetSysClockFreq>
 8009d06:	4a3f      	ldr	r2, [pc, #252]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
 8009d08:	4c40      	ldr	r4, [pc, #256]	@ (8009e0c <HAL_RCC_ClockConfig+0x204>)
 8009d0a:	6892      	ldr	r2, [r2, #8]
 8009d0c:	4940      	ldr	r1, [pc, #256]	@ (8009e10 <HAL_RCC_ClockConfig+0x208>)
 8009d0e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8009d12:	4603      	mov	r3, r0
 8009d14:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8009d16:	483f      	ldr	r0, [pc, #252]	@ (8009e14 <HAL_RCC_ClockConfig+0x20c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d18:	f002 021f 	and.w	r2, r2, #31
 8009d1c:	40d3      	lsrs	r3, r2
 8009d1e:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8009d20:	6800      	ldr	r0, [r0, #0]
}
 8009d22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8009d26:	f7fd ba4b 	b.w	80071c0 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d2a:	079e      	lsls	r6, r3, #30
 8009d2c:	d5c6      	bpl.n	8009cbc <HAL_RCC_ClockConfig+0xb4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d2e:	4935      	ldr	r1, [pc, #212]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
 8009d30:	68a0      	ldr	r0, [r4, #8]
 8009d32:	688a      	ldr	r2, [r1, #8]
 8009d34:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009d38:	4302      	orrs	r2, r0
 8009d3a:	608a      	str	r2, [r1, #8]
 8009d3c:	e7be      	b.n	8009cbc <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d3e:	039b      	lsls	r3, r3, #14
 8009d40:	d48b      	bmi.n	8009c5a <HAL_RCC_ClockConfig+0x52>
 8009d42:	e778      	b.n	8009c36 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8009d44:	2001      	movs	r0, #1
}
 8009d46:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d48:	4a2e      	ldr	r2, [pc, #184]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
 8009d4a:	6811      	ldr	r1, [r2, #0]
 8009d4c:	0188      	lsls	r0, r1, #6
 8009d4e:	f57f af72 	bpl.w	8009c36 <HAL_RCC_ClockConfig+0x2e>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8009d52:	68d1      	ldr	r1, [r2, #12]
 8009d54:	f001 0103 	and.w	r1, r1, #3
 8009d58:	2901      	cmp	r1, #1
 8009d5a:	d011      	beq.n	8009d80 <HAL_RCC_ClockConfig+0x178>
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d5c:	68d1      	ldr	r1, [r2, #12]
 8009d5e:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 8009d62:	3902      	subs	r1, #2
 8009d64:	2901      	cmp	r1, #1
 8009d66:	d947      	bls.n	8009df8 <HAL_RCC_ClockConfig+0x1f0>
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d68:	68d3      	ldr	r3, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009d6a:	68d3      	ldr	r3, [r2, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d6c:	68d3      	ldr	r3, [r2, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009d6e:	f04f 0900 	mov.w	r9, #0
 8009d72:	e781      	b.n	8009c78 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8009d74:	2003      	movs	r0, #3
 8009d76:	e75f      	b.n	8009c38 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d78:	0558      	lsls	r0, r3, #21
 8009d7a:	f57f af5c 	bpl.w	8009c36 <HAL_RCC_ClockConfig+0x2e>
 8009d7e:	e76c      	b.n	8009c5a <HAL_RCC_ClockConfig+0x52>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009d80:	6811      	ldr	r1, [r2, #0]
 8009d82:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009d84:	bf54      	ite	pl
 8009d86:	f8d2 1094 	ldrpl.w	r1, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009d8a:	6811      	ldrmi	r1, [r2, #0]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
 8009d8e:	68d2      	ldr	r2, [r2, #12]
 8009d90:	f002 0203 	and.w	r2, r2, #3
  switch (pllsource)
 8009d94:	f1a2 0202 	sub.w	r2, r2, #2
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009d98:	bf54      	ite	pl
 8009d9a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009d9e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
  switch (pllsource)
 8009da2:	2a01      	cmp	r2, #1
 8009da4:	d928      	bls.n	8009df8 <HAL_RCC_ClockConfig+0x1f0>
    msirange = MSIRangeTable[msirange];
 8009da6:	4a1c      	ldr	r2, [pc, #112]	@ (8009e18 <HAL_RCC_ClockConfig+0x210>)
 8009da8:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009dac:	4815      	ldr	r0, [pc, #84]	@ (8009e04 <HAL_RCC_ClockConfig+0x1fc>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009dae:	4e16      	ldr	r6, [pc, #88]	@ (8009e08 <HAL_RCC_ClockConfig+0x200>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009db0:	68c1      	ldr	r1, [r0, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009db2:	68c2      	ldr	r2, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009db4:	f3c1 1103 	ubfx	r1, r1, #4, #4
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009db8:	f3c2 2206 	ubfx	r2, r2, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009dbc:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009dbe:	fb0c f202 	mul.w	r2, ip, r2
 8009dc2:	fbb2 f2f1 	udiv	r2, r2, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009dc6:	68c1      	ldr	r1, [r0, #12]
 8009dc8:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8009dcc:	3101      	adds	r1, #1
 8009dce:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco / pllr;
 8009dd0:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009dd4:	42b2      	cmp	r2, r6
 8009dd6:	d9ca      	bls.n	8009d6e <HAL_RCC_ClockConfig+0x166>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009dd8:	6882      	ldr	r2, [r0, #8]
 8009dda:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8009dde:	d004      	beq.n	8009dea <HAL_RCC_ClockConfig+0x1e2>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8009de0:	079a      	lsls	r2, r3, #30
 8009de2:	d5c4      	bpl.n	8009d6e <HAL_RCC_ClockConfig+0x166>
 8009de4:	68a3      	ldr	r3, [r4, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1c1      	bne.n	8009d6e <HAL_RCC_ClockConfig+0x166>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009dea:	6883      	ldr	r3, [r0, #8]
 8009dec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df4:	6083      	str	r3, [r0, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009df6:	e73d      	b.n	8009c74 <HAL_RCC_ClockConfig+0x6c>
    pllvco = HSI_VALUE;
 8009df8:	f8df c020 	ldr.w	ip, [pc, #32]	@ 8009e1c <HAL_RCC_ClockConfig+0x214>
 8009dfc:	e7d6      	b.n	8009dac <HAL_RCC_ClockConfig+0x1a4>
 8009dfe:	bf00      	nop
 8009e00:	40022000 	.word	0x40022000
 8009e04:	40021000 	.word	0x40021000
 8009e08:	04c4b400 	.word	0x04c4b400
 8009e0c:	080154b0 	.word	0x080154b0
 8009e10:	200001e0 	.word	0x200001e0
 8009e14:	200001e8 	.word	0x200001e8
 8009e18:	08015480 	.word	0x08015480
 8009e1c:	00f42400 	.word	0x00f42400

08009e20 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8009e20:	4b01      	ldr	r3, [pc, #4]	@ (8009e28 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	200001e0 	.word	0x200001e0

08009e2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009e2c:	4b05      	ldr	r3, [pc, #20]	@ (8009e44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009e2e:	4a06      	ldr	r2, [pc, #24]	@ (8009e48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009e30:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8009e32:	4906      	ldr	r1, [pc, #24]	@ (8009e4c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009e34:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009e38:	6808      	ldr	r0, [r1, #0]
 8009e3a:	5cd3      	ldrb	r3, [r2, r3]
 8009e3c:	f003 031f 	and.w	r3, r3, #31
}
 8009e40:	40d8      	lsrs	r0, r3
 8009e42:	4770      	bx	lr
 8009e44:	40021000 	.word	0x40021000
 8009e48:	080154c0 	.word	0x080154c0
 8009e4c:	200001e0 	.word	0x200001e0

08009e50 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009e50:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009e52:	4a06      	ldr	r2, [pc, #24]	@ (8009e6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009e54:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8009e56:	4906      	ldr	r1, [pc, #24]	@ (8009e70 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009e58:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009e5c:	6808      	ldr	r0, [r1, #0]
 8009e5e:	5cd3      	ldrb	r3, [r2, r3]
 8009e60:	f003 031f 	and.w	r3, r3, #31
}
 8009e64:	40d8      	lsrs	r0, r3
 8009e66:	4770      	bx	lr
 8009e68:	40021000 	.word	0x40021000
 8009e6c:	080154c0 	.word	0x080154c0
 8009e70:	200001e0 	.word	0x200001e0

08009e74 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009e74:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
{
 8009e78:	b410      	push	{r4}
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009e7a:	d053      	beq.n	8009f24 <RCCEx_GetSAIxPeriphCLKFreq+0xb0>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009e7c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8009e80:	d022      	beq.n	8009ec8 <RCCEx_GetSAIxPeriphCLKFreq+0x54>
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009e82:	4b4c      	ldr	r3, [pc, #304]	@ (8009fb4 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009e8a:	d01a      	beq.n	8009ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 8009e8c:	6918      	ldr	r0, [r3, #16]
 8009e8e:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8009e92:	d016      	beq.n	8009ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009e94:	6918      	ldr	r0, [r3, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009e96:	691c      	ldr	r4, [r3, #16]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8009e98:	691a      	ldr	r2, [r3, #16]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009e9a:	f3c0 1003 	ubfx	r0, r0, #4, #4
#endif
        if(pllp == 0U)
 8009e9e:	0ed2      	lsrs	r2, r2, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009ea0:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009ea4:	f3c4 2406 	ubfx	r4, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009ea8:	fbb1 f1f0 	udiv	r1, r1, r0
        if(pllp == 0U)
 8009eac:	d105      	bne.n	8009eba <RCCEx_GetSAIxPeriphCLKFreq+0x46>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009eae:	691b      	ldr	r3, [r3, #16]
          {
            pllp = 17U;
 8009eb0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009eb4:	bf0c      	ite	eq
 8009eb6:	2207      	moveq	r2, #7
 8009eb8:	2211      	movne	r2, #17
          else
          {
            pllp = 7U;
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009eba:	fb04 f001 	mul.w	r0, r4, r1
 8009ebe:	fbb0 f0f2 	udiv	r0, r0, r2
    }
  }


  return frequency;
}
 8009ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ec6:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8009fb4 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ece:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ed6:	d036      	beq.n	8009f46 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009edc:	d137      	bne.n	8009f4e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009ede:	4b35      	ldr	r3, [pc, #212]	@ (8009fb4 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009ee0:	6818      	ldr	r0, [r3, #0]
 8009ee2:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8009ee6:	d0ec      	beq.n	8009ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 8009ee8:	68d8      	ldr	r0, [r3, #12]
 8009eea:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8009eee:	d0e8      	beq.n	8009ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009ef0:	68d8      	ldr	r0, [r3, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009ef2:	68dc      	ldr	r4, [r3, #12]
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009ef4:	68da      	ldr	r2, [r3, #12]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009ef6:	f3c0 1003 	ubfx	r0, r0, #4, #4
        if(pllp == 0U)
 8009efa:	0ed2      	lsrs	r2, r2, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009efc:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009f00:	f3c4 2c06 	ubfx	ip, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009f04:	fbb1 f1f0 	udiv	r1, r1, r0
        if(pllp == 0U)
 8009f08:	d105      	bne.n	8009f16 <RCCEx_GetSAIxPeriphCLKFreq+0xa2>
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009f0a:	68db      	ldr	r3, [r3, #12]
            pllp = 17U;
 8009f0c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009f10:	bf0c      	ite	eq
 8009f12:	2207      	moveq	r2, #7
 8009f14:	2211      	movne	r2, #17
        frequency = (pllvco * plln) / pllp;
 8009f16:	fb0c f001 	mul.w	r0, ip, r1
}
 8009f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
        frequency = (pllvco * plln) / pllp;
 8009f1e:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8009f22:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009f24:	4b23      	ldr	r3, [pc, #140]	@ (8009fb4 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f2a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009f2e:	2b60      	cmp	r3, #96	@ 0x60
 8009f30:	d009      	beq.n	8009f46 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009f32:	2b40      	cmp	r3, #64	@ 0x40
 8009f34:	d0d3      	beq.n	8009ede <RCCEx_GetSAIxPeriphCLKFreq+0x6a>
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0a3      	beq.n	8009e82 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8009f3a:	2b80      	cmp	r3, #128	@ 0x80
 8009f3c:	d030      	beq.n	8009fa0 <RCCEx_GetSAIxPeriphCLKFreq+0x12c>
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	d00d      	beq.n	8009f5e <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8009f42:	2000      	movs	r0, #0
 8009f44:	e7bd      	b.n	8009ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009f46:	481c      	ldr	r0, [pc, #112]	@ (8009fb8 <RCCEx_GetSAIxPeriphCLKFreq+0x144>)
}
 8009f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f4c:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d097      	beq.n	8009e82 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8009f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f56:	d023      	beq.n	8009fa0 <RCCEx_GetSAIxPeriphCLKFreq+0x12c>
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f5c:	d1f1      	bne.n	8009f42 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8009f5e:	4a15      	ldr	r2, [pc, #84]	@ (8009fb4 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009f60:	6810      	ldr	r0, [r2, #0]
 8009f62:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8009f66:	d0ac      	beq.n	8009ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 8009f68:	6950      	ldr	r0, [r2, #20]
 8009f6a:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8009f6e:	d0a8      	beq.n	8009ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8009f70:	6953      	ldr	r3, [r2, #20]
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009f72:	6954      	ldr	r4, [r2, #20]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8009f74:	6950      	ldr	r0, [r2, #20]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8009f76:	f3c3 1303 	ubfx	r3, r3, #4, #4
        if(pllp == 0U)
 8009f7a:	0ec0      	lsrs	r0, r0, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8009f7c:	f103 0301 	add.w	r3, r3, #1
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009f80:	f3c4 2406 	ubfx	r4, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8009f84:	fbb1 f1f3 	udiv	r1, r1, r3
        if(pllp == 0U)
 8009f88:	d105      	bne.n	8009f96 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8009f8a:	6953      	ldr	r3, [r2, #20]
            pllp = 17U;
 8009f8c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009f90:	bf0c      	ite	eq
 8009f92:	2007      	moveq	r0, #7
 8009f94:	2011      	movne	r0, #17
        frequency = (pllvco * plln) / pllp;
 8009f96:	fb04 f101 	mul.w	r1, r4, r1
 8009f9a:	fbb1 f0f0 	udiv	r0, r1, r0
 8009f9e:	e790      	b.n	8009ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fa0:	4a04      	ldr	r2, [pc, #16]	@ (8009fb4 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
        frequency = HSI_VALUE;
 8009fa2:	4b06      	ldr	r3, [pc, #24]	@ (8009fbc <RCCEx_GetSAIxPeriphCLKFreq+0x148>)
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fa4:	6810      	ldr	r0, [r2, #0]
}
 8009fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
        frequency = HSI_VALUE;
 8009faa:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 8009fae:	bf18      	it	ne
 8009fb0:	4618      	movne	r0, r3
}
 8009fb2:	4770      	bx	lr
 8009fb4:	40021000 	.word	0x40021000
 8009fb8:	001fff68 	.word	0x001fff68
 8009fbc:	00f42400 	.word	0x00f42400

08009fc0 <RCCEx_PLLSAI1_Config>:
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009fc0:	4a3e      	ldr	r2, [pc, #248]	@ (800a0bc <RCCEx_PLLSAI1_Config+0xfc>)
{
 8009fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009fc4:	68d6      	ldr	r6, [r2, #12]
{
 8009fc6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009fc8:	07b1      	lsls	r1, r6, #30
{
 8009fca:	4604      	mov	r4, r0
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009fcc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009fce:	d006      	beq.n	8009fde <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009fd0:	68d2      	ldr	r2, [r2, #12]
 8009fd2:	f002 0203 	and.w	r2, r2, #3
 8009fd6:	4282      	cmp	r2, r0
 8009fd8:	d011      	beq.n	8009ffe <RCCEx_PLLSAI1_Config+0x3e>
 8009fda:	2001      	movs	r0, #1
}
 8009fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8009fde:	2802      	cmp	r0, #2
 8009fe0:	d04d      	beq.n	800a07e <RCCEx_PLLSAI1_Config+0xbe>
 8009fe2:	2803      	cmp	r0, #3
 8009fe4:	d044      	beq.n	800a070 <RCCEx_PLLSAI1_Config+0xb0>
 8009fe6:	2801      	cmp	r0, #1
 8009fe8:	d1f7      	bne.n	8009fda <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009fea:	6812      	ldr	r2, [r2, #0]
 8009fec:	0793      	lsls	r3, r2, #30
 8009fee:	d5f5      	bpl.n	8009fdc <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009ff0:	4932      	ldr	r1, [pc, #200]	@ (800a0bc <RCCEx_PLLSAI1_Config+0xfc>)
 8009ff2:	68ca      	ldr	r2, [r1, #12]
 8009ff4:	f022 0203 	bic.w	r2, r2, #3
 8009ff8:	4302      	orrs	r2, r0
 8009ffa:	60ca      	str	r2, [r1, #12]
  if(status == HAL_OK)
 8009ffc:	e001      	b.n	800a002 <RCCEx_PLLSAI1_Config+0x42>
       ||
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	d0eb      	beq.n	8009fda <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 800a002:	4e2e      	ldr	r6, [pc, #184]	@ (800a0bc <RCCEx_PLLSAI1_Config+0xfc>)
 800a004:	6833      	ldr	r3, [r6, #0]
 800a006:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a00a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a00c:	f7fd f918 	bl	8007240 <HAL_GetTick>
 800a010:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a012:	e004      	b.n	800a01e <RCCEx_PLLSAI1_Config+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a014:	f7fd f914 	bl	8007240 <HAL_GetTick>
 800a018:	1bc3      	subs	r3, r0, r7
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d833      	bhi.n	800a086 <RCCEx_PLLSAI1_Config+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a01e:	6833      	ldr	r3, [r6, #0]
 800a020:	011a      	lsls	r2, r3, #4
 800a022:	d4f7      	bmi.n	800a014 <RCCEx_PLLSAI1_Config+0x54>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a024:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800a028:	3a01      	subs	r2, #1
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 800a02e:	bb65      	cbnz	r5, 800a08a <RCCEx_PLLSAI1_Config+0xca>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a030:	68e1      	ldr	r1, [r4, #12]
 800a032:	6930      	ldr	r0, [r6, #16]
 800a034:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 800a038:	4921      	ldr	r1, [pc, #132]	@ (800a0c0 <RCCEx_PLLSAI1_Config+0x100>)
 800a03a:	4001      	ands	r1, r0
 800a03c:	430b      	orrs	r3, r1
 800a03e:	4313      	orrs	r3, r2
 800a040:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800a042:	4d1e      	ldr	r5, [pc, #120]	@ (800a0bc <RCCEx_PLLSAI1_Config+0xfc>)
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a04a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a04c:	f7fd f8f8 	bl	8007240 <HAL_GetTick>
 800a050:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a052:	e004      	b.n	800a05e <RCCEx_PLLSAI1_Config+0x9e>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a054:	f7fd f8f4 	bl	8007240 <HAL_GetTick>
 800a058:	1b83      	subs	r3, r0, r6
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d813      	bhi.n	800a086 <RCCEx_PLLSAI1_Config+0xc6>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	011b      	lsls	r3, r3, #4
 800a062:	d5f7      	bpl.n	800a054 <RCCEx_PLLSAI1_Config+0x94>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a064:	692b      	ldr	r3, [r5, #16]
 800a066:	69a2      	ldr	r2, [r4, #24]
 800a068:	4313      	orrs	r3, r2
 800a06a:	2000      	movs	r0, #0
 800a06c:	612b      	str	r3, [r5, #16]
}
 800a06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a070:	6811      	ldr	r1, [r2, #0]
 800a072:	038e      	lsls	r6, r1, #14
 800a074:	d4bc      	bmi.n	8009ff0 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	0351      	lsls	r1, r2, #13
 800a07a:	d5ae      	bpl.n	8009fda <RCCEx_PLLSAI1_Config+0x1a>
 800a07c:	e7b8      	b.n	8009ff0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a07e:	6812      	ldr	r2, [r2, #0]
 800a080:	0557      	lsls	r7, r2, #21
 800a082:	d5aa      	bpl.n	8009fda <RCCEx_PLLSAI1_Config+0x1a>
 800a084:	e7b4      	b.n	8009ff0 <RCCEx_PLLSAI1_Config+0x30>
 800a086:	2003      	movs	r0, #3
}
 800a088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800a08a:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a08c:	6930      	ldr	r0, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800a08e:	d00a      	beq.n	800a0a6 <RCCEx_PLLSAI1_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a090:	490c      	ldr	r1, [pc, #48]	@ (800a0c4 <RCCEx_PLLSAI1_Config+0x104>)
 800a092:	4001      	ands	r1, r0
 800a094:	430b      	orrs	r3, r1
 800a096:	4313      	orrs	r3, r2
 800a098:	6962      	ldr	r2, [r4, #20]
 800a09a:	0852      	lsrs	r2, r2, #1
 800a09c:	3a01      	subs	r2, #1
 800a09e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a0a2:	6133      	str	r3, [r6, #16]
 800a0a4:	e7cd      	b.n	800a042 <RCCEx_PLLSAI1_Config+0x82>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a0a6:	4908      	ldr	r1, [pc, #32]	@ (800a0c8 <RCCEx_PLLSAI1_Config+0x108>)
 800a0a8:	4001      	ands	r1, r0
 800a0aa:	430b      	orrs	r3, r1
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	6922      	ldr	r2, [r4, #16]
 800a0b0:	0852      	lsrs	r2, r2, #1
 800a0b2:	3a01      	subs	r2, #1
 800a0b4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a0b8:	6133      	str	r3, [r6, #16]
 800a0ba:	e7c2      	b.n	800a042 <RCCEx_PLLSAI1_Config+0x82>
 800a0bc:	40021000 	.word	0x40021000
 800a0c0:	07ff800f 	.word	0x07ff800f
 800a0c4:	f9ff800f 	.word	0xf9ff800f
 800a0c8:	ff9f800f 	.word	0xff9f800f

0800a0cc <RCCEx_PLLSAI2_Config>:
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a0cc:	4a3e      	ldr	r2, [pc, #248]	@ (800a1c8 <RCCEx_PLLSAI2_Config+0xfc>)
{
 800a0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a0d0:	68d6      	ldr	r6, [r2, #12]
{
 800a0d2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a0d4:	07b1      	lsls	r1, r6, #30
{
 800a0d6:	4604      	mov	r4, r0
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a0d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a0da:	d006      	beq.n	800a0ea <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a0dc:	68d2      	ldr	r2, [r2, #12]
 800a0de:	f002 0203 	and.w	r2, r2, #3
 800a0e2:	4282      	cmp	r2, r0
 800a0e4:	d011      	beq.n	800a10a <RCCEx_PLLSAI2_Config+0x3e>
 800a0e6:	2001      	movs	r0, #1
}
 800a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 800a0ea:	2802      	cmp	r0, #2
 800a0ec:	d04d      	beq.n	800a18a <RCCEx_PLLSAI2_Config+0xbe>
 800a0ee:	2803      	cmp	r0, #3
 800a0f0:	d044      	beq.n	800a17c <RCCEx_PLLSAI2_Config+0xb0>
 800a0f2:	2801      	cmp	r0, #1
 800a0f4:	d1f7      	bne.n	800a0e6 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0f6:	6812      	ldr	r2, [r2, #0]
 800a0f8:	0793      	lsls	r3, r2, #30
 800a0fa:	d5f5      	bpl.n	800a0e8 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a0fc:	4932      	ldr	r1, [pc, #200]	@ (800a1c8 <RCCEx_PLLSAI2_Config+0xfc>)
 800a0fe:	68ca      	ldr	r2, [r1, #12]
 800a100:	f022 0203 	bic.w	r2, r2, #3
 800a104:	4302      	orrs	r2, r0
 800a106:	60ca      	str	r2, [r1, #12]
  if(status == HAL_OK)
 800a108:	e001      	b.n	800a10e <RCCEx_PLLSAI2_Config+0x42>
       ||
 800a10a:	2a00      	cmp	r2, #0
 800a10c:	d0eb      	beq.n	800a0e6 <RCCEx_PLLSAI2_Config+0x1a>
    __HAL_RCC_PLLSAI2_DISABLE();
 800a10e:	4e2e      	ldr	r6, [pc, #184]	@ (800a1c8 <RCCEx_PLLSAI2_Config+0xfc>)
 800a110:	6833      	ldr	r3, [r6, #0]
 800a112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a116:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a118:	f7fd f892 	bl	8007240 <HAL_GetTick>
 800a11c:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a11e:	e004      	b.n	800a12a <RCCEx_PLLSAI2_Config+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a120:	f7fd f88e 	bl	8007240 <HAL_GetTick>
 800a124:	1bc3      	subs	r3, r0, r7
 800a126:	2b02      	cmp	r3, #2
 800a128:	d833      	bhi.n	800a192 <RCCEx_PLLSAI2_Config+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a12a:	6833      	ldr	r3, [r6, #0]
 800a12c:	009a      	lsls	r2, r3, #2
 800a12e:	d4f7      	bmi.n	800a120 <RCCEx_PLLSAI2_Config+0x54>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a130:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800a134:	3a01      	subs	r2, #1
 800a136:	021b      	lsls	r3, r3, #8
 800a138:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 800a13a:	bb65      	cbnz	r5, 800a196 <RCCEx_PLLSAI2_Config+0xca>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a13c:	68e1      	ldr	r1, [r4, #12]
 800a13e:	6970      	ldr	r0, [r6, #20]
 800a140:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 800a144:	4921      	ldr	r1, [pc, #132]	@ (800a1cc <RCCEx_PLLSAI2_Config+0x100>)
 800a146:	4001      	ands	r1, r0
 800a148:	430b      	orrs	r3, r1
 800a14a:	4313      	orrs	r3, r2
 800a14c:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800a14e:	4d1e      	ldr	r5, [pc, #120]	@ (800a1c8 <RCCEx_PLLSAI2_Config+0xfc>)
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a156:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a158:	f7fd f872 	bl	8007240 <HAL_GetTick>
 800a15c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a15e:	e004      	b.n	800a16a <RCCEx_PLLSAI2_Config+0x9e>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a160:	f7fd f86e 	bl	8007240 <HAL_GetTick>
 800a164:	1b83      	subs	r3, r0, r6
 800a166:	2b02      	cmp	r3, #2
 800a168:	d813      	bhi.n	800a192 <RCCEx_PLLSAI2_Config+0xc6>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a16a:	682b      	ldr	r3, [r5, #0]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	d5f7      	bpl.n	800a160 <RCCEx_PLLSAI2_Config+0x94>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a170:	696b      	ldr	r3, [r5, #20]
 800a172:	69a2      	ldr	r2, [r4, #24]
 800a174:	4313      	orrs	r3, r2
 800a176:	2000      	movs	r0, #0
 800a178:	616b      	str	r3, [r5, #20]
}
 800a17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a17c:	6811      	ldr	r1, [r2, #0]
 800a17e:	038e      	lsls	r6, r1, #14
 800a180:	d4bc      	bmi.n	800a0fc <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a182:	6812      	ldr	r2, [r2, #0]
 800a184:	0351      	lsls	r1, r2, #13
 800a186:	d5ae      	bpl.n	800a0e6 <RCCEx_PLLSAI2_Config+0x1a>
 800a188:	e7b8      	b.n	800a0fc <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a18a:	6812      	ldr	r2, [r2, #0]
 800a18c:	0557      	lsls	r7, r2, #21
 800a18e:	d5aa      	bpl.n	800a0e6 <RCCEx_PLLSAI2_Config+0x1a>
 800a190:	e7b4      	b.n	800a0fc <RCCEx_PLLSAI2_Config+0x30>
 800a192:	2003      	movs	r0, #3
}
 800a194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800a196:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a198:	6970      	ldr	r0, [r6, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 800a19a:	d00a      	beq.n	800a1b2 <RCCEx_PLLSAI2_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a19c:	490c      	ldr	r1, [pc, #48]	@ (800a1d0 <RCCEx_PLLSAI2_Config+0x104>)
 800a19e:	4001      	ands	r1, r0
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	6962      	ldr	r2, [r4, #20]
 800a1a6:	0852      	lsrs	r2, r2, #1
 800a1a8:	3a01      	subs	r2, #1
 800a1aa:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a1ae:	6173      	str	r3, [r6, #20]
 800a1b0:	e7cd      	b.n	800a14e <RCCEx_PLLSAI2_Config+0x82>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1b2:	4908      	ldr	r1, [pc, #32]	@ (800a1d4 <RCCEx_PLLSAI2_Config+0x108>)
 800a1b4:	4001      	ands	r1, r0
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	6922      	ldr	r2, [r4, #16]
 800a1bc:	0852      	lsrs	r2, r2, #1
 800a1be:	3a01      	subs	r2, #1
 800a1c0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a1c4:	6173      	str	r3, [r6, #20]
 800a1c6:	e7c2      	b.n	800a14e <RCCEx_PLLSAI2_Config+0x82>
 800a1c8:	40021000 	.word	0x40021000
 800a1cc:	07ff800f 	.word	0x07ff800f
 800a1d0:	f9ff800f 	.word	0xf9ff800f
 800a1d4:	ff9f800f 	.word	0xff9f800f

0800a1d8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a1dc:	6803      	ldr	r3, [r0, #0]
 800a1de:	f413 6500 	ands.w	r5, r3, #2048	@ 0x800
{
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a1e6:	d014      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a1e8:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 800a1ea:	2940      	cmp	r1, #64	@ 0x40
 800a1ec:	f000 825a 	beq.w	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800a1f0:	f200 814c 	bhi.w	800a48c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a1f4:	2900      	cmp	r1, #0
 800a1f6:	f000 8213 	beq.w	800a620 <HAL_RCCEx_PeriphCLKConfig+0x448>
 800a1fa:	2920      	cmp	r1, #32
 800a1fc:	f040 828e 	bne.w	800a71c <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a200:	2100      	movs	r1, #0
 800a202:	3020      	adds	r0, #32
 800a204:	f7ff ff62 	bl	800a0cc <RCCEx_PLLSAI2_Config>
 800a208:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a20a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a20c:	2d00      	cmp	r5, #0
 800a20e:	f000 8247 	beq.w	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a212:	04d8      	lsls	r0, r3, #19
 800a214:	f140 814c 	bpl.w	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a218:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800a21a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a21e:	f000 8247 	beq.w	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800a222:	f200 81ad 	bhi.w	800a580 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800a226:	2900      	cmp	r1, #0
 800a228:	f000 8203 	beq.w	800a632 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800a22c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a230:	f040 8272 	bne.w	800a718 <HAL_RCCEx_PeriphCLKConfig+0x540>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a234:	2100      	movs	r1, #0
 800a236:	f104 0020 	add.w	r0, r4, #32
 800a23a:	f7ff ff47 	bl	800a0cc <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a23e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a240:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a242:	2e00      	cmp	r6, #0
 800a244:	f040 81a7 	bne.w	800a596 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a248:	49a3      	ldr	r1, [pc, #652]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a24a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800a24c:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a250:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a254:	4302      	orrs	r2, r0
 800a256:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a25a:	0399      	lsls	r1, r3, #14
 800a25c:	f100 812c 	bmi.w	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a260:	07da      	lsls	r2, r3, #31
 800a262:	d508      	bpl.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a264:	499c      	ldr	r1, [pc, #624]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a266:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a268:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a26c:	f022 0203 	bic.w	r2, r2, #3
 800a270:	4302      	orrs	r2, r0
 800a272:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a276:	079f      	lsls	r7, r3, #30
 800a278:	d508      	bpl.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a27a:	4997      	ldr	r1, [pc, #604]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a27c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800a27e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a282:	f022 020c 	bic.w	r2, r2, #12
 800a286:	4302      	orrs	r2, r0
 800a288:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a28c:	0758      	lsls	r0, r3, #29
 800a28e:	d508      	bpl.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a290:	4991      	ldr	r1, [pc, #580]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a292:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a294:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a298:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800a29c:	4302      	orrs	r2, r0
 800a29e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a2a2:	0719      	lsls	r1, r3, #28
 800a2a4:	d508      	bpl.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a2a6:	498c      	ldr	r1, [pc, #560]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a2a8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800a2aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a2ae:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800a2b2:	4302      	orrs	r2, r0
 800a2b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a2b8:	06da      	lsls	r2, r3, #27
 800a2ba:	d508      	bpl.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a2bc:	4986      	ldr	r1, [pc, #536]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a2be:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a2c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a2c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a2c8:	4302      	orrs	r2, r0
 800a2ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2ce:	069f      	lsls	r7, r3, #26
 800a2d0:	d508      	bpl.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2d2:	4981      	ldr	r1, [pc, #516]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a2d4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800a2d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a2da:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a2de:	4302      	orrs	r2, r0
 800a2e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a2e4:	0598      	lsls	r0, r3, #22
 800a2e6:	d508      	bpl.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2e8:	497b      	ldr	r1, [pc, #492]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a2ea:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800a2ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a2f0:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800a2f4:	4302      	orrs	r2, r0
 800a2f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a2fa:	0559      	lsls	r1, r3, #21
 800a2fc:	d508      	bpl.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2fe:	4976      	ldr	r1, [pc, #472]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a300:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800a302:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a306:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800a30a:	4302      	orrs	r2, r0
 800a30c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a310:	065a      	lsls	r2, r3, #25
 800a312:	d508      	bpl.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a314:	4970      	ldr	r1, [pc, #448]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a316:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800a318:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a31c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800a320:	4302      	orrs	r2, r0
 800a322:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a326:	061f      	lsls	r7, r3, #24
 800a328:	d508      	bpl.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x164>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a32a:	496b      	ldr	r1, [pc, #428]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a32e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a332:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a336:	4302      	orrs	r2, r0
 800a338:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a33c:	05d8      	lsls	r0, r3, #23
 800a33e:	d508      	bpl.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a340:	4965      	ldr	r1, [pc, #404]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a342:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800a344:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a348:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800a34c:	4302      	orrs	r2, r0
 800a34e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a352:	02d9      	lsls	r1, r3, #11
 800a354:	d508      	bpl.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a356:	4960      	ldr	r1, [pc, #384]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a358:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800a35a:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a35e:	f022 0203 	bic.w	r2, r2, #3
 800a362:	4302      	orrs	r2, r0
 800a364:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a368:	049a      	lsls	r2, r3, #18
 800a36a:	d510      	bpl.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a36c:	495a      	ldr	r1, [pc, #360]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a36e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a370:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a374:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800a378:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a37a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a37e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a382:	f000 815c 	beq.w	800a63e <HAL_RCCEx_PeriphCLKConfig+0x466>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a386:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a38a:	f000 8198 	beq.w	800a6be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a38e:	031f      	lsls	r7, r3, #12
 800a390:	d51a      	bpl.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a392:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800a394:	4a50      	ldr	r2, [pc, #320]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a396:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800a39a:	f8d2 109c 	ldr.w	r1, [r2, #156]	@ 0x9c
 800a39e:	f000 8153 	beq.w	800a648 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800a3a2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800a3a6:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
 800a3aa:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800a3ae:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800a3b2:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a3b4:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a3b8:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a3bc:	f000 8195 	beq.w	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a3c0:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a3c4:	f000 819b 	beq.w	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x526>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a3c8:	0358      	lsls	r0, r3, #13
 800a3ca:	d510      	bpl.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3cc:	4942      	ldr	r1, [pc, #264]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a3ce:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800a3d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a3d4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800a3d8:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a3da:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3de:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a3e2:	f000 813a 	beq.w	800a65a <HAL_RCCEx_PeriphCLKConfig+0x482>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a3e6:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a3ea:	f000 8173 	beq.w	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3ee:	0459      	lsls	r1, r3, #17
 800a3f0:	d50d      	bpl.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3f2:	4839      	ldr	r0, [pc, #228]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a3f4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800a3f8:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800a3fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a400:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a402:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a406:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a40a:	f000 813e 	beq.w	800a68a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a40e:	03da      	lsls	r2, r3, #15
 800a410:	d509      	bpl.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a412:	4931      	ldr	r1, [pc, #196]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a414:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800a418:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a41c:	f022 0204 	bic.w	r2, r2, #4
 800a420:	4302      	orrs	r2, r0
 800a422:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a426:	029f      	lsls	r7, r3, #10
 800a428:	d509      	bpl.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a42a:	492b      	ldr	r1, [pc, #172]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a42c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800a430:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a434:	f022 0218 	bic.w	r2, r2, #24
 800a438:	4302      	orrs	r2, r0
 800a43a:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a43e:	0258      	lsls	r0, r3, #9
 800a440:	f100 80b7 	bmi.w	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a444:	021a      	lsls	r2, r3, #8
 800a446:	d50d      	bpl.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a448:	4823      	ldr	r0, [pc, #140]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a44a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800a44e:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800a452:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a456:	430a      	orrs	r2, r1
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800a458:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a45c:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800a460:	f000 8108 	beq.w	800a674 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a464:	01db      	lsls	r3, r3, #7
 800a466:	d50d      	bpl.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a468:	4a1b      	ldr	r2, [pc, #108]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a46a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800a46e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800a472:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a476:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a47c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a480:	f000 80f0 	beq.w	800a664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
}
 800a484:	4628      	mov	r0, r5
 800a486:	b002      	add	sp, #8
 800a488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 800a48c:	2960      	cmp	r1, #96	@ 0x60
 800a48e:	d002      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800a490:	2980      	cmp	r1, #128	@ 0x80
 800a492:	f040 8143 	bne.w	800a71c <HAL_RCCEx_PeriphCLKConfig+0x544>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a496:	4810      	ldr	r0, [pc, #64]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a498:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800a49c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a4a6:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4a8:	f04f 0500 	mov.w	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a4ac:	f53f aeb4 	bmi.w	800a218 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a4b0:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4b2:	0399      	lsls	r1, r3, #14
 800a4b4:	f57f aed4 	bpl.w	800a260 <HAL_RCCEx_PeriphCLKConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a4b8:	4b07      	ldr	r3, [pc, #28]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a4ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a4bc:	00d2      	lsls	r2, r2, #3
 800a4be:	d56c      	bpl.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    FlagStatus       pwrclkchanged = RESET;
 800a4c0:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4c4:	4f05      	ldr	r7, [pc, #20]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4cc:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a4ce:	f7fc feb7 	bl	8007240 <HAL_GetTick>
 800a4d2:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a4d4:	e00b      	b.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x316>
 800a4d6:	bf00      	nop
 800a4d8:	40021000 	.word	0x40021000
 800a4dc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4e0:	f7fc feae 	bl	8007240 <HAL_GetTick>
 800a4e4:	eba0 0309 	sub.w	r3, r0, r9
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	f200 808c 	bhi.w	800a606 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	05db      	lsls	r3, r3, #23
 800a4f2:	d5f5      	bpl.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    if(ret == HAL_OK)
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	f040 810d 	bne.w	800a714 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a4fa:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a720 <HAL_RCCEx_PeriphCLKConfig+0x548>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a4fe:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a502:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a506:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800a50a:	d026      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d024      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x382>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a510:	f8da 1090 	ldr.w	r1, [sl, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800a514:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a51c:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a520:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a528:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a52c:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a52e:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 800a532:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a536:	d510      	bpl.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x382>
        tickstart = HAL_GetTick();
 800a538:	f7fc fe82 	bl	8007240 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a53c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800a540:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a542:	e004      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x376>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a544:	f7fc fe7c 	bl	8007240 <HAL_GetTick>
 800a548:	1bc0      	subs	r0, r0, r7
 800a54a:	4548      	cmp	r0, r9
 800a54c:	d85b      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a54e:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a552:	0799      	lsls	r1, r3, #30
 800a554:	d5f6      	bpl.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a556:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800a55a:	4971      	ldr	r1, [pc, #452]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a55c:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800a560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a564:	4313      	orrs	r3, r2
 800a566:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a56a:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800a56c:	f1b8 0f00 	cmp.w	r8, #0
 800a570:	f43f ae76 	beq.w	800a260 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a574:	496a      	ldr	r1, [pc, #424]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a576:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800a578:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a57c:	658a      	str	r2, [r1, #88]	@ 0x58
 800a57e:	e66f      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a580:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 800a584:	d003      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a586:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a58a:	f040 80c5 	bne.w	800a718 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a58e:	462e      	mov	r6, r5
    if(ret == HAL_OK)
 800a590:	2e00      	cmp	r6, #0
 800a592:	f43f ae59 	beq.w	800a248 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800a596:	4635      	mov	r5, r6
 800a598:	e78b      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a59a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a59c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a5a0:	659a      	str	r2, [r3, #88]	@ 0x58
 800a5a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a5ac:	f04f 0801 	mov.w	r8, #1
 800a5b0:	e788      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_PLLSAI2_DISABLE();
 800a5b2:	4f5b      	ldr	r7, [pc, #364]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5ba:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a5bc:	f7fc fe40 	bl	8007240 <HAL_GetTick>
 800a5c0:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a5c2:	e006      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a5c4:	f7fc fe3c 	bl	8007240 <HAL_GetTick>
 800a5c8:	eba0 0308 	sub.w	r3, r0, r8
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	f200 8091 	bhi.w	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	0099      	lsls	r1, r3, #2
 800a5d6:	d4f5      	bmi.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    if(ret == HAL_OK)
 800a5d8:	2e00      	cmp	r6, #0
 800a5da:	f040 808e 	bne.w	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x522>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800a5de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5e2:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800a5e6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a5f0:	2102      	movs	r1, #2
 800a5f2:	f104 0020 	add.w	r0, r4, #32
 800a5f6:	f7ff fd69 	bl	800a0cc <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a5fa:	6823      	ldr	r3, [r4, #0]
    if(ret != HAL_OK)
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f43f af21 	beq.w	800a444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a602:	4605      	mov	r5, r0
 800a604:	e71e      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        ret = HAL_TIMEOUT;
 800a606:	2503      	movs	r5, #3
 800a608:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a60a:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800a60c:	f1b8 0f00 	cmp.w	r8, #0
 800a610:	f43f ae26 	beq.w	800a260 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a614:	4942      	ldr	r1, [pc, #264]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a616:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800a618:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a61c:	658a      	str	r2, [r1, #88]	@ 0x58
 800a61e:	e61f      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x88>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a620:	3004      	adds	r0, #4
 800a622:	f7ff fccd 	bl	8009fc0 <RCCEx_PLLSAI1_Config>
 800a626:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a628:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a62a:	2d00      	cmp	r5, #0
 800a62c:	f47f adf1 	bne.w	800a212 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800a630:	e036      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a632:	1d20      	adds	r0, r4, #4
 800a634:	f7ff fcc4 	bl	8009fc0 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a638:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a63a:	4606      	mov	r6, r0
      break;
 800a63c:	e601      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a63e:	68ca      	ldr	r2, [r1, #12]
 800a640:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a644:	60ca      	str	r2, [r1, #12]
 800a646:	e6a2      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a648:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800a64c:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a650:	68d1      	ldr	r1, [r2, #12]
 800a652:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a656:	60d1      	str	r1, [r2, #12]
 800a658:	e6b6      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a65a:	68ca      	ldr	r2, [r1, #12]
 800a65c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a660:	60ca      	str	r2, [r1, #12]
 800a662:	e6c4      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a664:	68d3      	ldr	r3, [r2, #12]
}
 800a666:	4628      	mov	r0, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a668:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a66c:	60d3      	str	r3, [r2, #12]
}
 800a66e:	b002      	add	sp, #8
 800a670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800a674:	2101      	movs	r1, #1
 800a676:	f104 0020 	add.w	r0, r4, #32
 800a67a:	f7ff fd27 	bl	800a0cc <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a67e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800a680:	2800      	cmp	r0, #0
 800a682:	f43f aeef 	beq.w	800a464 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a686:	4605      	mov	r5, r0
 800a688:	e6ec      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a68a:	2102      	movs	r1, #2
 800a68c:	1d20      	adds	r0, r4, #4
 800a68e:	f7ff fc97 	bl	8009fc0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a692:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800a694:	4606      	mov	r6, r0
 800a696:	2800      	cmp	r0, #0
 800a698:	f43f aeb9 	beq.w	800a40e <HAL_RCCEx_PeriphCLKConfig+0x236>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a69c:	4605      	mov	r5, r0
 800a69e:	e6b6      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x236>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6a0:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800a6a2:	e6f8      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a6a4:	481e      	ldr	r0, [pc, #120]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a6a6:	68c2      	ldr	r2, [r0, #12]
 800a6a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a6ac:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 800a6ae:	e6f2      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a6b0:	491b      	ldr	r1, [pc, #108]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a6b2:	68ca      	ldr	r2, [r1, #12]
 800a6b4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a6b8:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 800a6ba:	462e      	mov	r6, r5
 800a6bc:	e768      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a6be:	2101      	movs	r1, #1
 800a6c0:	1d20      	adds	r0, r4, #4
 800a6c2:	f7ff fc7d 	bl	8009fc0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a6c6:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	f43f ae5f 	beq.w	800a38e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	e65c      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	1d20      	adds	r0, r4, #4
 800a6d8:	f7ff fc72 	bl	8009fc0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6dc:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800a6de:	4606      	mov	r6, r0
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	f43f ae84 	beq.w	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	e681      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6ea:	68d1      	ldr	r1, [r2, #12]
 800a6ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800a6f0:	60d1      	str	r1, [r2, #12]
 800a6f2:	e669      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        ret = HAL_TIMEOUT;
 800a6f4:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	e6a4      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a6fa:	4635      	mov	r5, r6
 800a6fc:	e7fb      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a6fe:	2101      	movs	r1, #1
 800a700:	1d20      	adds	r0, r4, #4
 800a702:	f7ff fc5d 	bl	8009fc0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a706:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800a708:	4606      	mov	r6, r0
 800a70a:	2800      	cmp	r0, #0
 800a70c:	f43f ae5c 	beq.w	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a710:	4605      	mov	r5, r0
 800a712:	e659      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a714:	4635      	mov	r5, r6
 800a716:	e778      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a718:	2501      	movs	r5, #1
 800a71a:	e6c9      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a71c:	2501      	movs	r5, #1
 800a71e:	e578      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800a720:	40021000 	.word	0x40021000

0800a724 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a724:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a728:	4aa1      	ldr	r2, [pc, #644]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a72a:	d03b      	beq.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a72c:	68d3      	ldr	r3, [r2, #12]
 800a72e:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 800a732:	2b02      	cmp	r3, #2
 800a734:	f000 80e9 	beq.w	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a738:	2b03      	cmp	r3, #3
 800a73a:	f000 80cb 	beq.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800a73e:	2b01      	cmp	r3, #1
 800a740:	f000 80cf 	beq.w	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a744:	2100      	movs	r1, #0
    switch(PeriphClk)
 800a746:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800a74a:	f000 8102 	beq.w	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800a74e:	d85b      	bhi.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a750:	2820      	cmp	r0, #32
 800a752:	d839      	bhi.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800a754:	2800      	cmp	r0, #0
 800a756:	f000 80bc 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800a75a:	3801      	subs	r0, #1
 800a75c:	281f      	cmp	r0, #31
 800a75e:	d831      	bhi.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800a760:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a764:	01520178 	.word	0x01520178
 800a768:	01880030 	.word	0x01880030
 800a76c:	00300030 	.word	0x00300030
 800a770:	01160030 	.word	0x01160030
 800a774:	00300030 	.word	0x00300030
 800a778:	00300030 	.word	0x00300030
 800a77c:	00300030 	.word	0x00300030
 800a780:	012e0030 	.word	0x012e0030
 800a784:	00300030 	.word	0x00300030
 800a788:	00300030 	.word	0x00300030
 800a78c:	00300030 	.word	0x00300030
 800a790:	00300030 	.word	0x00300030
 800a794:	00300030 	.word	0x00300030
 800a798:	00300030 	.word	0x00300030
 800a79c:	00300030 	.word	0x00300030
 800a7a0:	01400030 	.word	0x01400030
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a7a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a7a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    switch(srcclk)
 800a7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7b0:	f000 80df 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 800a7b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7b8:	f000 80e3 	beq.w	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800a7bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7c0:	f000 80ae 	beq.w	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
  uint32_t frequency = 0U;
 800a7c4:	2000      	movs	r0, #0
  return(frequency);
 800a7c6:	4770      	bx	lr
    switch(PeriphClk)
 800a7c8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a7cc:	f000 80ae 	beq.w	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a7d0:	d933      	bls.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800a7d2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800a7d6:	d1f5      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a7d8:	4a75      	ldr	r2, [pc, #468]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a7da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a7de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
        switch(srcclk)
 800a7e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a7e6:	f000 80ad 	beq.w	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800a7ea:	f200 8218 	bhi.w	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a7ee:	b3b3      	cbz	r3, 800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a7f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7f4:	d1e6      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a7f6:	4b6e      	ldr	r3, [pc, #440]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a7f8:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
          frequency = LSI_VALUE;
 800a7fc:	f010 0002 	ands.w	r0, r0, #2
 800a800:	bf18      	it	ne
 800a802:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800a806:	4770      	bx	lr
    switch(PeriphClk)
 800a808:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 800a80c:	f000 817e 	beq.w	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a810:	d82f      	bhi.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 800a812:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800a816:	f000 8179 	beq.w	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a81a:	d922      	bls.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800a81c:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800a820:	f000 81e6 	beq.w	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800a824:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a828:	d1cc      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a82a:	4b61      	ldr	r3, [pc, #388]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a82c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a830:	075a      	lsls	r2, r3, #29
 800a832:	f140 811d 	bpl.w	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          frequency = HAL_RCC_GetSysClockFreq();
 800a836:	f7fe be7f 	b.w	8009538 <HAL_RCC_GetSysClockFreq>
    switch(PeriphClk)
 800a83a:	2840      	cmp	r0, #64	@ 0x40
 800a83c:	f000 8148 	beq.w	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800a840:	2880      	cmp	r0, #128	@ 0x80
 800a842:	d1bf      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a844:	4a5a      	ldr	r2, [pc, #360]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a846:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a84a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
        switch(srcclk)
 800a84e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a852:	d0f0      	beq.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a858:	d074      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1b2      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a85e:	f7ff bae5 	b.w	8009e2c <HAL_RCC_GetPCLK1Freq>
    switch(PeriphClk)
 800a862:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800a866:	d002      	beq.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a868:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800a86c:	d1aa      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a86e:	f7ff bb01 	b.w	8009e74 <RCCEx_GetSAIxPeriphCLKFreq>
    switch(PeriphClk)
 800a872:	f5b0 1f00 	cmp.w	r0, #2097152	@ 0x200000
 800a876:	f000 8139 	beq.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800a87a:	d912      	bls.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a87c:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800a880:	d1a0      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a882:	4a4b      	ldr	r2, [pc, #300]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a884:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800a888:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
        switch(srcclk)
 800a88c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a890:	f000 8101 	beq.w	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a898:	f000 8206 	beq.w	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d191      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800a8a0:	e7c9      	b.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    switch(PeriphClk)
 800a8a2:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 800a8a6:	f000 8175 	beq.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 800a8aa:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 800a8ae:	d189      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a8b0:	4b3f      	ldr	r3, [pc, #252]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a8b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8b6:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d0bb      	beq.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d1cb      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8c2:	4a3b      	ldr	r2, [pc, #236]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
            frequency = HSI_VALUE;
 800a8c4:	4b3b      	ldr	r3, [pc, #236]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8c6:	6810      	ldr	r0, [r2, #0]
            frequency = HSI_VALUE;
 800a8c8:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800a8cc:	bf18      	it	ne
 800a8ce:	4618      	movne	r0, r3
 800a8d0:	4770      	bx	lr
}
 800a8d2:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8d4:	6811      	ldr	r1, [r2, #0]
        pllvco = HSI_VALUE;
 800a8d6:	4a37      	ldr	r2, [pc, #220]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a8d8:	f411 3100 	ands.w	r1, r1, #131072	@ 0x20000
 800a8dc:	bf18      	it	ne
 800a8de:	4611      	movne	r1, r2
 800a8e0:	e731      	b.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a8e2:	6811      	ldr	r1, [r2, #0]
 800a8e4:	f011 0102 	ands.w	r1, r1, #2
 800a8e8:	f43f af2d 	beq.w	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a8ec:	6813      	ldr	r3, [r2, #0]
 800a8ee:	071b      	lsls	r3, r3, #28
 800a8f0:	bf4c      	ite	mi
 800a8f2:	6813      	ldrmi	r3, [r2, #0]
 800a8f4:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	@ 0x94
 800a8f8:	4a2f      	ldr	r2, [pc, #188]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8fa:	bf4c      	ite	mi
 800a8fc:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 800a900:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800a904:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a908:	e71d      	b.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a90a:	6811      	ldr	r1, [r2, #0]
        pllvco = HSI_VALUE;
 800a90c:	4a29      	ldr	r2, [pc, #164]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a90e:	f411 6180 	ands.w	r1, r1, #1024	@ 0x400
 800a912:	bf18      	it	ne
 800a914:	4611      	movne	r1, r2
 800a916:	e716      	b.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 800a918:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a91c:	f47f af52 	bne.w	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a920:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
 800a924:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800a928:	03c0      	lsls	r0, r0, #15
 800a92a:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a92c:	4a20      	ldr	r2, [pc, #128]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a92e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a932:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
        switch(srcclk)
 800a936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a93a:	f43f af7c 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a93e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a942:	d18a      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a944:	6810      	ldr	r0, [r2, #0]
            frequency = HSI_VALUE;
 800a946:	4b1b      	ldr	r3, [pc, #108]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a948:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800a94c:	bf18      	it	ne
 800a94e:	4618      	movne	r0, r3
 800a950:	4770      	bx	lr
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a952:	4a17      	ldr	r2, [pc, #92]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a954:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a958:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
        switch(srcclk)
 800a95c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a960:	d0f0      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800a962:	d8d9      	bhi.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a964:	2b00      	cmp	r3, #0
 800a966:	f43f af7a 	beq.w	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a96a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a96e:	f47f af29 	bne.w	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a972:	f8d2 0094 	ldr.w	r0, [r2, #148]	@ 0x94
          frequency = LSI_VALUE;
 800a976:	f010 0002 	ands.w	r0, r0, #2
 800a97a:	bf18      	it	ne
 800a97c:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800a980:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a982:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 32U;
 800a984:	4b0d      	ldr	r3, [pc, #52]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a986:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800a98a:	bf18      	it	ne
 800a98c:	4618      	movne	r0, r3
 800a98e:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a990:	4a07      	ldr	r2, [pc, #28]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a992:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a996:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        switch(srcclk)
 800a99a:	2b80      	cmp	r3, #128	@ 0x80
 800a99c:	d0d2      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800a99e:	f200 8093 	bhi.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f43f af5b 	beq.w	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a9a8:	2b40      	cmp	r3, #64	@ 0x40
 800a9aa:	f43f af44 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a9ae:	e709      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800a9b0:	40021000 	.word	0x40021000
 800a9b4:	00f42400 	.word	0x00f42400
 800a9b8:	08015480 	.word	0x08015480
 800a9bc:	0007a120 	.word	0x0007a120
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a9c0:	4ab7      	ldr	r2, [pc, #732]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800a9c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a9c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
        switch(srcclk)
 800a9ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9ce:	d0b9      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800a9d0:	f200 811b 	bhi.w	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f43f af42 	beq.w	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a9da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9de:	f43f af2a 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a9e2:	e6ef      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a9e4:	4aae      	ldr	r2, [pc, #696]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800a9e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a9ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
        switch(srcclk)
 800a9ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9f2:	d0a7      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800a9f4:	f200 810e 	bhi.w	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f43f af30 	beq.w	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a9fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa02:	f43f af18 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800aa06:	e6dd      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800aa08:	4ba5      	ldr	r3, [pc, #660]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aa0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa0e:	f003 030c 	and.w	r3, r3, #12
 800aa12:	2b0c      	cmp	r3, #12
 800aa14:	f63f aed6 	bhi.w	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800aa18:	a201      	add	r2, pc, #4	@ (adr r2, 800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800aa1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1e:	bf00      	nop
 800aa20:	0800a85f 	.word	0x0800a85f
 800aa24:	0800a7c5 	.word	0x0800a7c5
 800aa28:	0800a7c5 	.word	0x0800a7c5
 800aa2c:	0800a7c5 	.word	0x0800a7c5
 800aa30:	0800a837 	.word	0x0800a837
 800aa34:	0800a7c5 	.word	0x0800a7c5
 800aa38:	0800a7c5 	.word	0x0800a7c5
 800aa3c:	0800a7c5 	.word	0x0800a7c5
 800aa40:	0800a8c3 	.word	0x0800a8c3
 800aa44:	0800a7c5 	.word	0x0800a7c5
 800aa48:	0800a7c5 	.word	0x0800a7c5
 800aa4c:	0800a7c5 	.word	0x0800a7c5
 800aa50:	0800aabb 	.word	0x0800aabb
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800aa54:	4a92      	ldr	r2, [pc, #584]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aa56:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aa5a:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	f43f af70 	beq.w	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	f43f af5b 	beq.w	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	f43f aee3 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HAL_RCC_GetPCLK2Freq();
 800aa70:	f7ff b9ee 	b.w	8009e50 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800aa74:	4a8a      	ldr	r2, [pc, #552]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aa76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aa7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        switch(srcclk)
 800aa7e:	2b20      	cmp	r3, #32
 800aa80:	f43f af60 	beq.w	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800aa84:	f200 80d0 	bhi.w	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f43f aee8 	beq.w	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800aa8e:	2b10      	cmp	r3, #16
 800aa90:	f43f aed1 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800aa94:	e696      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800aa96:	6810      	ldr	r0, [r2, #0]
 800aa98:	f010 0002 	ands.w	r0, r0, #2
 800aa9c:	f43f af19 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800aaa0:	6813      	ldr	r3, [r2, #0]
 800aaa2:	f013 0f08 	tst.w	r3, #8
 800aaa6:	4b7e      	ldr	r3, [pc, #504]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aaa8:	f000 80f5 	beq.w	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800aab2:	4a7c      	ldr	r2, [pc, #496]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800aab4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aab8:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aaba:	4b79      	ldr	r3, [pc, #484]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aabc:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800aac0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800aac4:	03c0      	lsls	r0, r0, #15
 800aac6:	4770      	bx	lr
 800aac8:	2bc0      	cmp	r3, #192	@ 0xc0
 800aaca:	f43f af29 	beq.w	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800aace:	e679      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800aad0:	4a73      	ldr	r2, [pc, #460]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aad2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aad6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
        switch(srcclk)
 800aada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aade:	f43f aeaa 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800aae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aae6:	f47f aeb8 	bne.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 800aaea:	e72b      	b.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800aaec:	4a6c      	ldr	r2, [pc, #432]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aaee:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800aaf2:	f003 0318 	and.w	r3, r3, #24
        switch(srcclk)
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	f43f af24 	beq.w	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800aafc:	2b10      	cmp	r3, #16
 800aafe:	d039      	beq.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f47f ae5f 	bne.w	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800ab06:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ab0a:	e6b0      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800ab0c:	4a64      	ldr	r2, [pc, #400]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ab0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ab12:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
        switch(srcclk)
 800ab16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab1a:	f000 80ef 	beq.w	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 800ab1e:	d825      	bhi.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 80e3 	beq.w	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 800ab26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab2a:	f47f ae4b 	bne.w	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800ab2e:	6810      	ldr	r0, [r2, #0]
 800ab30:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ab34:	f43f aecd 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800ab38:	6910      	ldr	r0, [r2, #16]
 800ab3a:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800ab3e:	f43f aec8 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ab42:	6910      	ldr	r0, [r2, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ab44:	f8d2 c010 	ldr.w	ip, [r2, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ab48:	6913      	ldr	r3, [r2, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ab4a:	f3cc 1c03 	ubfx	ip, ip, #4, #4
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ab4e:	f3c0 2206 	ubfx	r2, r0, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ab52:	f3c3 5341 	ubfx	r3, r3, #21, #2
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ab56:	3301      	adds	r3, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ab58:	fb01 f002 	mul.w	r0, r1, r2
 800ab5c:	f10c 0c01 	add.w	ip, ip, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ab60:	005b      	lsls	r3, r3, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ab62:	fbb0 f0fc 	udiv	r0, r0, ip
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ab66:	fbb0 f0f3 	udiv	r0, r0, r3
 800ab6a:	4770      	bx	lr
 800ab6c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ab70:	f47f ae28 	bne.w	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ab74:	6810      	ldr	r0, [r2, #0]
 800ab76:	f010 0002 	ands.w	r0, r0, #2
 800ab7a:	f43f aeaa 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ab7e:	6813      	ldr	r3, [r2, #0]
 800ab80:	071b      	lsls	r3, r3, #28
 800ab82:	bf4b      	itete	mi
 800ab84:	6813      	ldrmi	r3, [r2, #0]
 800ab86:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	@ 0x94
 800ab8a:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 800ab8e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800ab92:	e78e      	b.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800ab94:	4a42      	ldr	r2, [pc, #264]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ab96:	f8d2 009c 	ldr.w	r0, [r2, #156]	@ 0x9c
 800ab9a:	f410 4080 	ands.w	r0, r0, #16384	@ 0x4000
 800ab9e:	d047      	beq.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800aba0:	6810      	ldr	r0, [r2, #0]
 800aba2:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800aba6:	f43f ae94 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800abaa:	68d0      	ldr	r0, [r2, #12]
 800abac:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 800abb0:	f43f ae8f 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
{
 800abb4:	b430      	push	{r4, r5}
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800abb6:	4614      	mov	r4, r2
 800abb8:	68d3      	ldr	r3, [r2, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800abba:	68d2      	ldr	r2, [r2, #12]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800abbc:	68e5      	ldr	r5, [r4, #12]
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800abbe:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800abc2:	f3c2 1203 	ubfx	r2, r2, #4, #4
            if(pllp == 0U)
 800abc6:	ea5f 6cd5 	movs.w	ip, r5, lsr #27
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800abca:	fb01 f003 	mul.w	r0, r1, r3
 800abce:	f102 0201 	add.w	r2, r2, #1
 800abd2:	fbb0 f0f2 	udiv	r0, r0, r2
            if(pllp == 0U)
 800abd6:	d107      	bne.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800abd8:	68e3      	ldr	r3, [r4, #12]
                pllp = 17U;
 800abda:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800abde:	bf0c      	ite	eq
 800abe0:	f04f 0c07 	moveq.w	ip, #7
 800abe4:	f04f 0c11 	movne.w	ip, #17
            frequency = (pllvco / pllp);
 800abe8:	fbb0 f0fc 	udiv	r0, r0, ip
}
 800abec:	bc30      	pop	{r4, r5}
 800abee:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800abf0:	4a2b      	ldr	r2, [pc, #172]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800abf2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800abf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch(srcclk)
 800abfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abfe:	d062      	beq.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
 800ac00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac04:	f43f ae17 	beq.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800ac08:	e5dc      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800ac0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac0e:	f43f ae87 	beq.w	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ac12:	e5d7      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800ac14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac18:	f43f ae82 	beq.w	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ac1c:	e5d2      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800ac1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ac22:	f43f ae7d 	beq.w	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ac26:	e5cd      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800ac28:	2b30      	cmp	r3, #48	@ 0x30
 800ac2a:	f43f ae79 	beq.w	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ac2e:	e5c9      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800ac30:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ac34:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
        switch(srcclk)
 800ac38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac3c:	d034      	beq.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800ac3e:	d819      	bhi.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d070      	beq.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 800ac44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac48:	d176      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800ac4a:	4b15      	ldr	r3, [pc, #84]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ac52:	f43f ae3e 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800ac56:	6918      	ldr	r0, [r3, #16]
 800ac58:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800ac5c:	f43f ae39 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ac60:	691a      	ldr	r2, [r3, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ac62:	6918      	ldr	r0, [r3, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ac64:	691b      	ldr	r3, [r3, #16]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ac66:	f3c2 2206 	ubfx	r2, r2, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ac6a:	f3c3 5341 	ubfx	r3, r3, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ac6e:	f3c0 1c03 	ubfx	ip, r0, #4, #4
 800ac72:	e770      	b.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ac74:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ac78:	f47f ae2b 	bne.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ac7c:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
 800ac80:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	f010 0002 	ands.w	r0, r0, #2
 800ac8a:	f43f ae22 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	0711      	lsls	r1, r2, #28
 800ac92:	f53f af0b 	bmi.w	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x388>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ac96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac9a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800ac9e:	e708      	b.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800aca0:	40021000 	.word	0x40021000
 800aca4:	08015480 	.word	0x08015480
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800aca8:	6810      	ldr	r0, [r2, #0]
 800acaa:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800acae:	f43f ae10 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800acb2:	4b22      	ldr	r3, [pc, #136]	@ (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 800acb4:	68d8      	ldr	r0, [r3, #12]
 800acb6:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800acba:	f43f ae0a 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800acbe:	68da      	ldr	r2, [r3, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800acc0:	68d8      	ldr	r0, [r3, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	e7cf      	b.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800acc6:	6810      	ldr	r0, [r2, #0]
 800acc8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800accc:	f43f ae01 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800acd0:	6910      	ldr	r0, [r2, #16]
 800acd2:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 800acd6:	f43f adfc 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800acda:	4b18      	ldr	r3, [pc, #96]	@ (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 800acdc:	691a      	ldr	r2, [r3, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800acde:	6918      	ldr	r0, [r3, #16]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800ace0:	691b      	ldr	r3, [r3, #16]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ace2:	f3c2 2206 	ubfx	r2, r2, #8, #7
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800ace6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800acea:	e7c0      	b.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800acec:	f8d2 0098 	ldr.w	r0, [r2, #152]	@ 0x98
            frequency = HSI48_VALUE;
 800acf0:	4b13      	ldr	r3, [pc, #76]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
 800acf2:	f010 0002 	ands.w	r0, r0, #2
 800acf6:	bf18      	it	ne
 800acf8:	4618      	movne	r0, r3
 800acfa:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800acfc:	6810      	ldr	r0, [r2, #0]
 800acfe:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800ad02:	f43f ade6 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800ad06:	68d0      	ldr	r0, [r2, #12]
 800ad08:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800ad0c:	f43f ade1 	beq.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad10:	68d0      	ldr	r0, [r2, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad12:	f8d2 c00c 	ldr.w	ip, [r2, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ad16:	68d3      	ldr	r3, [r2, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad18:	f3cc 1c03 	ubfx	ip, ip, #4, #4
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad1c:	f3c0 2206 	ubfx	r2, r0, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ad20:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800ad24:	e717      	b.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800ad26:	4a05      	ldr	r2, [pc, #20]	@ (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
            frequency = HSI48_VALUE;
 800ad28:	4b05      	ldr	r3, [pc, #20]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800ad2a:	f8d2 0098 	ldr.w	r0, [r2, #152]	@ 0x98
            frequency = HSI48_VALUE;
 800ad2e:	f010 0002 	ands.w	r0, r0, #2
 800ad32:	bf18      	it	ne
 800ad34:	4618      	movne	r0, r3
 800ad36:	4770      	bx	lr
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	40021000 	.word	0x40021000
 800ad40:	02dc6c00 	.word	0x02dc6c00

0800ad44 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 800ad44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	b086      	sub	sp, #24
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ad4e:	f7fc fa77 	bl	8007240 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ad52:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800ad54:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ad56:	6828      	ldr	r0, [r5, #0]
 800ad58:	f002 faf0 	bl	800d33c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	b118      	cbz	r0, 800ad68 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800ad60:	4620      	mov	r0, r4
 800ad62:	b006      	add	sp, #24
 800ad64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ad68:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800ad6a:	6828      	ldr	r0, [r5, #0]
 800ad6c:	0409      	lsls	r1, r1, #16
 800ad6e:	f002 ffeb 	bl	800dd48 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad72:	4604      	mov	r4, r0
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1f3      	bne.n	800ad60 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7c:	2308      	movs	r3, #8
 800ad7e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ad82:	2230      	movs	r2, #48	@ 0x30
 800ad84:	2302      	movs	r3, #2
 800ad86:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ad8a:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ad90:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ad92:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ad96:	f002 fabb 	bl	800d310 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ad9a:	6828      	ldr	r0, [r5, #0]
 800ad9c:	f003 f95a 	bl	800e054 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ada0:	4604      	mov	r4, r0
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d1dc      	bne.n	800ad60 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ada6:	4682      	mov	sl, r0
 800ada8:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800adaa:	f240 582a 	movw	r8, #1322	@ 0x52a
 800adae:	e004      	b.n	800adba <SD_FindSCR.constprop.0+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800adb0:	f7fc fa46 	bl	8007240 <HAL_GetTick>
 800adb4:	1b83      	subs	r3, r0, r6
 800adb6:	3301      	adds	r3, #1
 800adb8:	d024      	beq.n	800ae04 <SD_FindSCR.constprop.0+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800adba:	6828      	ldr	r0, [r5, #0]
 800adbc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800adbe:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800adc2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800adc4:	d10c      	bne.n	800ade0 <SD_FindSCR.constprop.0+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800adc6:	0319      	lsls	r1, r3, #12
 800adc8:	d4f2      	bmi.n	800adb0 <SD_FindSCR.constprop.0+0x6c>
 800adca:	2c00      	cmp	r4, #0
 800adcc:	d1f0      	bne.n	800adb0 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800adce:	f002 fa81 	bl	800d2d4 <SDMMC_ReadFIFO>
 800add2:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800add4:	6828      	ldr	r0, [r5, #0]
 800add6:	f002 fa7d 	bl	800d2d4 <SDMMC_ReadFIFO>
      index++;
 800adda:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800addc:	4682      	mov	sl, r0
      index++;
 800adde:	e7e7      	b.n	800adb0 <SD_FindSCR.constprop.0+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ade0:	071a      	lsls	r2, r3, #28
 800ade2:	d415      	bmi.n	800ae10 <SD_FindSCR.constprop.0+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ade4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ade6:	079b      	lsls	r3, r3, #30
 800ade8:	d40f      	bmi.n	800ae0a <SD_FindSCR.constprop.0+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800adea:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800adec:	f014 0420 	ands.w	r4, r4, #32
 800adf0:	d111      	bne.n	800ae16 <SD_FindSCR.constprop.0+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800adf2:	490a      	ldr	r1, [pc, #40]	@ (800ae1c <SD_FindSCR.constprop.0+0xd8>)
 800adf4:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800adf6:	fa9a f28a 	rev.w	r2, sl
 800adfa:	fa99 f389 	rev.w	r3, r9
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800adfe:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800ae02:	e7ad      	b.n	800ad60 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800ae04:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800ae08:	e7aa      	b.n	800ad60 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ae0a:	2402      	movs	r4, #2
 800ae0c:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ae0e:	e7a7      	b.n	800ad60 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ae10:	2408      	movs	r4, #8
 800ae12:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ae14:	e7a4      	b.n	800ad60 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ae16:	2420      	movs	r4, #32
 800ae18:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800ae1a:	e7a1      	b.n	800ad60 <SD_FindSCR.constprop.0+0x1c>
 800ae1c:	18000f3a 	.word	0x18000f3a

0800ae20 <HAL_SD_MspInit>:
}
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop

0800ae24 <HAL_SD_ReadBlocks_DMA>:
{
 800ae24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae26:	4604      	mov	r4, r0
 800ae28:	b087      	sub	sp, #28
  if(NULL == pData)
 800ae2a:	2900      	cmp	r1, #0
 800ae2c:	d052      	beq.n	800aed4 <HAL_SD_ReadBlocks_DMA+0xb0>
  if(hsd->State == HAL_SD_STATE_READY)
 800ae2e:	461f      	mov	r7, r3
 800ae30:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d13d      	bne.n	800aeb4 <HAL_SD_ReadBlocks_DMA+0x90>
 800ae38:	4616      	mov	r6, r2
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ae3a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800ae3c:	460d      	mov	r5, r1
 800ae3e:	19f1      	adds	r1, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae40:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ae42:	4291      	cmp	r1, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae44:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ae46:	d838      	bhi.n	800aeba <HAL_SD_ReadBlocks_DMA+0x96>
    hsd->Instance->DCTRL = 0U;
 800ae48:	6800      	ldr	r0, [r0, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ae4a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800ae4c:	2103      	movs	r1, #3
 800ae4e:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800ae52:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ae54:	027b      	lsls	r3, r7, #9
 800ae56:	62e3      	str	r3, [r4, #44]	@ 0x2c
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ae58:	9301      	str	r3, [sp, #4]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae5a:	2300      	movs	r3, #0
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800ae5c:	e9cd 3304 	strd	r3, r3, [sp, #16]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae60:	f04f 33ff 	mov.w	r3, #4294967295
 800ae64:	9300      	str	r3, [sp, #0]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ae66:	2190      	movs	r1, #144	@ 0x90
 800ae68:	2302      	movs	r3, #2
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ae6a:	2a01      	cmp	r2, #1
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ae6c:	e9cd 1302 	strd	r1, r3, [sp, #8]
      hsd->pRxBuffPtr = pData;
 800ae70:	62a5      	str	r5, [r4, #40]	@ 0x28
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae72:	4669      	mov	r1, sp
        add *= 512U;
 800ae74:	bf18      	it	ne
 800ae76:	0276      	lslne	r6, r6, #9
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae78:	f002 fa4a 	bl	800d310 <SDMMC_ConfigData>
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ae7c:	6820      	ldr	r0, [r4, #0]
 800ae7e:	68c3      	ldr	r3, [r0, #12]
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ae80:	2201      	movs	r2, #1
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ae82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
      if(NumberOfBlocks > 1U)
 800ae86:	4297      	cmp	r7, r2
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ae88:	60c3      	str	r3, [r0, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ae8a:	6585      	str	r5, [r0, #88]	@ 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ae8c:	6502      	str	r2, [r0, #80]	@ 0x50
      if(NumberOfBlocks > 1U)
 800ae8e:	d926      	bls.n	800aede <HAL_SD_ReadBlocks_DMA+0xba>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ae90:	2382      	movs	r3, #130	@ 0x82
 800ae92:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ae94:	4631      	mov	r1, r6
 800ae96:	f002 fb9d 	bl	800d5d4 <SDMMC_CmdReadMultiBlock>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae9a:	6823      	ldr	r3, [r4, #0]
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae9c:	b1a0      	cbz	r0, 800aec8 <HAL_SD_ReadBlocks_DMA+0xa4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae9e:	4a13      	ldr	r2, [pc, #76]	@ (800aeec <HAL_SD_ReadBlocks_DMA+0xc8>)
 800aea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800aea2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aea4:	2101      	movs	r1, #1
        hsd->ErrorCode |= errorstate;
 800aea6:	4303      	orrs	r3, r0
        hsd->Context = SD_CONTEXT_NONE;
 800aea8:	2200      	movs	r2, #0
        hsd->ErrorCode |= errorstate;
 800aeaa:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aeac:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aeb0:	6322      	str	r2, [r4, #48]	@ 0x30
        return HAL_ERROR;
 800aeb2:	e006      	b.n	800aec2 <HAL_SD_ReadBlocks_DMA+0x9e>
    return HAL_BUSY;
 800aeb4:	2002      	movs	r0, #2
}
 800aeb6:	b007      	add	sp, #28
 800aeb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aeba:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800aebc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aec0:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800aec2:	2001      	movs	r0, #1
}
 800aec4:	b007      	add	sp, #28
 800aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800aec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aeca:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800aece:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800aed0:	b007      	add	sp, #28
 800aed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aed4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800aed6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aeda:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800aedc:	e7f1      	b.n	800aec2 <HAL_SD_ReadBlocks_DMA+0x9e>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aede:	2381      	movs	r3, #129	@ 0x81
 800aee0:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aee2:	4631      	mov	r1, r6
 800aee4:	f002 fad0 	bl	800d488 <SDMMC_CmdReadSingleBlock>
 800aee8:	e7d7      	b.n	800ae9a <HAL_SD_ReadBlocks_DMA+0x76>
 800aeea:	bf00      	nop
 800aeec:	1fe00fff 	.word	0x1fe00fff

0800aef0 <HAL_SD_WriteBlocks_DMA>:
{
 800aef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef4:	4604      	mov	r4, r0
 800aef6:	b086      	sub	sp, #24
  if(NULL == pData)
 800aef8:	2900      	cmp	r1, #0
 800aefa:	d056      	beq.n	800afaa <HAL_SD_WriteBlocks_DMA+0xba>
  if(hsd->State == HAL_SD_STATE_READY)
 800aefc:	461f      	mov	r7, r3
 800aefe:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800af02:	2b01      	cmp	r3, #1
 800af04:	d13e      	bne.n	800af84 <HAL_SD_WriteBlocks_DMA+0x94>
 800af06:	4616      	mov	r6, r2
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800af08:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800af0a:	460d      	mov	r5, r1
 800af0c:	19f1      	adds	r1, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af0e:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800af10:	4291      	cmp	r1, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af12:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800af14:	d83a      	bhi.n	800af8c <HAL_SD_WriteBlocks_DMA+0x9c>
    hsd->Instance->DCTRL = 0U;
 800af16:	6800      	ldr	r0, [r0, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800af18:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800af1a:	2103      	movs	r1, #3
 800af1c:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800af20:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800af22:	027b      	lsls	r3, r7, #9
 800af24:	6263      	str	r3, [r4, #36]	@ 0x24
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800af26:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800af28:	2300      	movs	r3, #0
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800af2a:	2a01      	cmp	r2, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af2c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800af30:	9305      	str	r3, [sp, #20]
    hsd->pTxBuffPtr = pData;
 800af32:	6225      	str	r5, [r4, #32]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af34:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800af38:	f04f 0890 	mov.w	r8, #144	@ 0x90
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af3c:	4669      	mov	r1, sp
      add *= 512U;
 800af3e:	bf18      	it	ne
 800af40:	0276      	lslne	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af42:	9300      	str	r3, [sp, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800af44:	f8cd 8008 	str.w	r8, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af48:	f002 f9e2 	bl	800d310 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800af4c:	6820      	ldr	r0, [r4, #0]
 800af4e:	68c3      	ldr	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800af50:	2201      	movs	r2, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800af52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
    if(NumberOfBlocks > 1U)
 800af56:	4297      	cmp	r7, r2
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800af58:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800af5a:	6585      	str	r5, [r0, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800af5c:	6502      	str	r2, [r0, #80]	@ 0x50
    if(NumberOfBlocks > 1U)
 800af5e:	d929      	bls.n	800afb4 <HAL_SD_WriteBlocks_DMA+0xc4>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800af60:	23a0      	movs	r3, #160	@ 0xa0
 800af62:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800af64:	4631      	mov	r1, r6
 800af66:	f002 fc81 	bl	800d86c <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af6a:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af6c:	b1b0      	cbz	r0, 800af9c <HAL_SD_WriteBlocks_DMA+0xac>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af6e:	4a14      	ldr	r2, [pc, #80]	@ (800afc0 <HAL_SD_WriteBlocks_DMA+0xd0>)
 800af70:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800af72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af74:	2101      	movs	r1, #1
      hsd->ErrorCode |= errorstate;
 800af76:	4303      	orrs	r3, r0
      hsd->Context = SD_CONTEXT_NONE;
 800af78:	2200      	movs	r2, #0
      hsd->ErrorCode |= errorstate;
 800af7a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af7c:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af80:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 800af82:	e007      	b.n	800af94 <HAL_SD_WriteBlocks_DMA+0xa4>
    return HAL_BUSY;
 800af84:	2002      	movs	r0, #2
}
 800af86:	b006      	add	sp, #24
 800af88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800af8c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800af8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800af92:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800af94:	2001      	movs	r0, #1
}
 800af96:	b006      	add	sp, #24
 800af98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800af9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af9e:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800afa2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800afa4:	b006      	add	sp, #24
 800afa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800afaa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800afac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800afb0:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800afb2:	e7ef      	b.n	800af94 <HAL_SD_WriteBlocks_DMA+0xa4>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800afb4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800afb8:	4631      	mov	r1, r6
 800afba:	f002 fbb1 	bl	800d720 <SDMMC_CmdWriteSingleBlock>
 800afbe:	e7d4      	b.n	800af6a <HAL_SD_WriteBlocks_DMA+0x7a>
 800afc0:	1fe00fff 	.word	0x1fe00fff

0800afc4 <HAL_SD_ErrorCallback>:
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop

0800afc8 <HAL_SD_IRQHandler>:
{
 800afc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afcc:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800afce:	6800      	ldr	r0, [r0, #0]
  uint32_t context = hsd->Context;
 800afd0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800afd2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800afd4:	041b      	lsls	r3, r3, #16
{
 800afd6:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800afd8:	d52e      	bpl.n	800b038 <HAL_SD_IRQHandler+0x70>
 800afda:	072f      	lsls	r7, r5, #28
 800afdc:	f100 80ec 	bmi.w	800b1b8 <HAL_SD_IRQHandler+0x1f0>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800afe0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800afe2:	05db      	lsls	r3, r3, #23
 800afe4:	d57f      	bpl.n	800b0e6 <HAL_SD_IRQHandler+0x11e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800afe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afea:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800afec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800afee:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800aff2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800aff6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800aff8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800affa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800affe:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b000:	68c3      	ldr	r3, [r0, #12]
 800b002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b006:	60c3      	str	r3, [r0, #12]
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b008:	062b      	lsls	r3, r5, #24
 800b00a:	d512      	bpl.n	800b032 <HAL_SD_IRQHandler+0x6a>
      hsd->Instance->DLEN = 0;
 800b00c:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b00e:	f015 0f22 	tst.w	r5, #34	@ 0x22
      hsd->Instance->DLEN = 0;
 800b012:	6283      	str	r3, [r0, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800b014:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b016:	6503      	str	r3, [r0, #80]	@ 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b018:	f040 8107 	bne.w	800b22a <HAL_SD_IRQHandler+0x262>
      hsd->State = HAL_SD_STATE_READY;
 800b01c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b01e:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b020:	f015 0f30 	tst.w	r5, #48	@ 0x30
      hsd->State = HAL_SD_STATE_READY;
 800b024:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b028:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b02a:	f040 80fa 	bne.w	800b222 <HAL_SD_IRQHandler+0x25a>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b02e:	07af      	lsls	r7, r5, #30
 800b030:	d126      	bne.n	800b080 <HAL_SD_IRQHandler+0xb8>
}
 800b032:	b002      	add	sp, #8
 800b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b038:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b03a:	05de      	lsls	r6, r3, #23
 800b03c:	d526      	bpl.n	800b08c <HAL_SD_IRQHandler+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b03e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b042:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800b044:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b046:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800b04a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800b04e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b050:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b056:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b058:	68c3      	ldr	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800b05a:	0729      	lsls	r1, r5, #28
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b05c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b060:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800b062:	d5d1      	bpl.n	800b008 <HAL_SD_IRQHandler+0x40>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b064:	f015 0f22 	tst.w	r5, #34	@ 0x22
 800b068:	f040 80bf 	bne.w	800b1ea <HAL_SD_IRQHandler+0x222>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b06c:	4b7a      	ldr	r3, [pc, #488]	@ (800b258 <HAL_SD_IRQHandler+0x290>)
 800b06e:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b070:	2201      	movs	r2, #1
 800b072:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b076:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b078:	07aa      	lsls	r2, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 800b07a:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b07c:	f000 80af 	beq.w	800b1de <HAL_SD_IRQHandler+0x216>
        HAL_SD_RxCpltCallback(hsd);
 800b080:	4620      	mov	r0, r4
 800b082:	f7fc f86f 	bl	8007164 <HAL_SD_RxCpltCallback>
}
 800b086:	b002      	add	sp, #8
 800b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b08c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b08e:	045e      	lsls	r6, r3, #17
 800b090:	d52a      	bpl.n	800b0e8 <HAL_SD_IRQHandler+0x120>
 800b092:	0729      	lsls	r1, r5, #28
 800b094:	d528      	bpl.n	800b0e8 <HAL_SD_IRQHandler+0x120>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 800b096:	6a66      	ldr	r6, [r4, #36]	@ 0x24

  if (dataremaining > 0U)
 800b098:	2e00      	cmp	r6, #0
 800b09a:	d0ca      	beq.n	800b032 <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pTxBuffPtr;
 800b09c:	6a27      	ldr	r7, [r4, #32]
 800b09e:	f107 0804 	add.w	r8, r7, #4
 800b0a2:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 800b0a6:	e000      	b.n	800b0aa <HAL_SD_IRQHandler+0xe2>
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b0a8:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800b0aa:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 800b0ae:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800b0b0:	f818 2c03 	ldrb.w	r2, [r8, #-3]
 800b0b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b0b8:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800b0ba:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 800b0be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0c2:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800b0c4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b0c8:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 800b0ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    for(count = 0U; count < 8U; count++)
 800b0ce:	f108 0804 	add.w	r8, r8, #4
      data |= ((uint32_t)(*tmp) << 24U);
 800b0d2:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b0d4:	f002 f902 	bl	800d2dc <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b0d8:	45a8      	cmp	r8, r5
 800b0da:	d1e5      	bne.n	800b0a8 <HAL_SD_IRQHandler+0xe0>
      tmp++;
 800b0dc:	3720      	adds	r7, #32
      dataremaining--;
 800b0de:	3e20      	subs	r6, #32
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
 800b0e0:	e9c4 7608 	strd	r7, r6, [r4, #32]
  }
}
 800b0e4:	e7a5      	b.n	800b032 <HAL_SD_IRQHandler+0x6a>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b0e6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b0e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b0ea:	f013 0f3a 	tst.w	r3, #58	@ 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b0ee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b0f0:	d04f      	beq.n	800b192 <HAL_SD_IRQHandler+0x1ca>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b0f2:	079a      	lsls	r2, r3, #30
 800b0f4:	d503      	bpl.n	800b0fe <HAL_SD_IRQHandler+0x136>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b0f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b0f8:	f043 0302 	orr.w	r3, r3, #2
 800b0fc:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b0fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b100:	071b      	lsls	r3, r3, #28
 800b102:	d503      	bpl.n	800b10c <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b104:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b106:	f043 0308 	orr.w	r3, r3, #8
 800b10a:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b10c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b10e:	069f      	lsls	r7, r3, #26
 800b110:	d503      	bpl.n	800b11a <HAL_SD_IRQHandler+0x152>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b112:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b114:	f043 0320 	orr.w	r3, r3, #32
 800b118:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b11a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b11c:	06de      	lsls	r6, r3, #27
 800b11e:	d503      	bpl.n	800b128 <HAL_SD_IRQHandler+0x160>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b120:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b122:	f043 0310 	orr.w	r3, r3, #16
 800b126:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b128:	4b4b      	ldr	r3, [pc, #300]	@ (800b258 <HAL_SD_IRQHandler+0x290>)
 800b12a:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b12c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b12e:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 800b132:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b134:	68c3      	ldr	r3, [r0, #12]
 800b136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b13a:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800b13c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800b13e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b142:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800b144:	68c3      	ldr	r3, [r0, #12]
 800b146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b14a:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b14c:	f002 fc34 	bl	800d9b8 <SDMMC_CmdStopTransfer>
 800b150:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b152:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b154:	4302      	orrs	r2, r0
 800b156:	63a2      	str	r2, [r4, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b15e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b160:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    if((context & SD_CONTEXT_IT) != 0U)
 800b164:	f015 0208 	ands.w	r2, r5, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b168:	6399      	str	r1, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b16a:	d144      	bne.n	800b1f6 <HAL_SD_IRQHandler+0x22e>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b16c:	0628      	lsls	r0, r5, #24
 800b16e:	f57f af60 	bpl.w	800b032 <HAL_SD_IRQHandler+0x6a>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b172:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b174:	2900      	cmp	r1, #0
 800b176:	f43f af5c 	beq.w	800b032 <HAL_SD_IRQHandler+0x6a>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b17a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
        hsd->State = HAL_SD_STATE_READY;
 800b17c:	2501      	movs	r5, #1
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b17e:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 800b182:	63d9      	str	r1, [r3, #60]	@ 0x3c
        HAL_SD_ErrorCallback(hsd);
 800b184:	4620      	mov	r0, r4
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b186:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b188:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
        HAL_SD_ErrorCallback(hsd);
 800b18c:	f7ff ff1a 	bl	800afc4 <HAL_SD_ErrorCallback>
 800b190:	e74f      	b.n	800b032 <HAL_SD_IRQHandler+0x6a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b192:	00d9      	lsls	r1, r3, #3
 800b194:	f57f af4d 	bpl.w	800b032 <HAL_SD_IRQHandler+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b198:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b19c:	6383      	str	r3, [r0, #56]	@ 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b19e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800b1a0:	075a      	lsls	r2, r3, #29
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b1a2:	f005 0520 	and.w	r5, r5, #32
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800b1a6:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b1a8:	d42e      	bmi.n	800b208 <HAL_SD_IRQHandler+0x240>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b1aa:	2d00      	cmp	r5, #0
 800b1ac:	d04f      	beq.n	800b24e <HAL_SD_IRQHandler+0x286>
}
 800b1ae:	b002      	add	sp, #8
 800b1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800b1b4:	f000 bcbe 	b.w	800bb34 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
  tmp = hsd->pRxBuffPtr;
 800b1b8:	e9d4 570a 	ldrd	r5, r7, [r4, #40]	@ 0x28
  if (dataremaining > 0U)
 800b1bc:	2f00      	cmp	r7, #0
 800b1be:	f43f af38 	beq.w	800b032 <HAL_SD_IRQHandler+0x6a>
 800b1c2:	f105 0620 	add.w	r6, r5, #32
 800b1c6:	e000      	b.n	800b1ca <HAL_SD_IRQHandler+0x202>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b1c8:	6820      	ldr	r0, [r4, #0]
 800b1ca:	f002 f883 	bl	800d2d4 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800b1ce:	f845 0b04 	str.w	r0, [r5], #4
    for(count = 0U; count < 8U; count++)
 800b1d2:	42ae      	cmp	r6, r5
 800b1d4:	d1f8      	bne.n	800b1c8 <HAL_SD_IRQHandler+0x200>
      dataremaining--;
 800b1d6:	3f20      	subs	r7, #32
    hsd->RxXferSize = dataremaining;
 800b1d8:	e9c4 670a 	strd	r6, r7, [r4, #40]	@ 0x28
 800b1dc:	e729      	b.n	800b032 <HAL_SD_IRQHandler+0x6a>
        HAL_SD_TxCpltCallback(hsd);
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f7fb ffbc 	bl	800715c <HAL_SD_TxCpltCallback>
}
 800b1e4:	b002      	add	sp, #8
 800b1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b1ea:	f002 fbe5 	bl	800d9b8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	b980      	cbnz	r0, 800b214 <HAL_SD_IRQHandler+0x24c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b1f2:	6820      	ldr	r0, [r4, #0]
 800b1f4:	e73a      	b.n	800b06c <HAL_SD_IRQHandler+0xa4>
      hsd->State = HAL_SD_STATE_READY;
 800b1f6:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b1f8:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800b1fa:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      HAL_SD_ErrorCallback(hsd);
 800b1fe:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 800b200:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800b202:	f7ff fedf 	bl	800afc4 <HAL_SD_ErrorCallback>
 800b206:	e714      	b.n	800b032 <HAL_SD_IRQHandler+0x6a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b208:	b1e5      	cbz	r5, 800b244 <HAL_SD_IRQHandler+0x27c>
}
 800b20a:	b002      	add	sp, #8
 800b20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800b210:	f000 bc8e 	b.w	800bb30 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
          hsd->ErrorCode |= errorstate;
 800b214:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b216:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 800b218:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800b21a:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800b21c:	f7ff fed2 	bl	800afc4 <HAL_SD_ErrorCallback>
 800b220:	e7e7      	b.n	800b1f2 <HAL_SD_IRQHandler+0x22a>
        HAL_SD_TxCpltCallback(hsd);
 800b222:	4620      	mov	r0, r4
 800b224:	f7fb ff9a 	bl	800715c <HAL_SD_TxCpltCallback>
 800b228:	e701      	b.n	800b02e <HAL_SD_IRQHandler+0x66>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b22a:	f002 fbc5 	bl	800d9b8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b22e:	4603      	mov	r3, r0
 800b230:	2800      	cmp	r0, #0
 800b232:	f43f aef3 	beq.w	800b01c <HAL_SD_IRQHandler+0x54>
          hsd->ErrorCode |= errorstate;
 800b236:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b238:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 800b23a:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800b23c:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800b23e:	f7ff fec1 	bl	800afc4 <HAL_SD_ErrorCallback>
 800b242:	e6eb      	b.n	800b01c <HAL_SD_IRQHandler+0x54>
}
 800b244:	b002      	add	sp, #8
 800b246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800b24a:	f000 bc6d 	b.w	800bb28 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800b24e:	b002      	add	sp, #8
 800b250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800b254:	f000 bc6a 	b.w	800bb2c <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 800b258:	18000f3a 	.word	0x18000f3a

0800b25c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b25c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
{
 800b25e:	b410      	push	{r4}
 800b260:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b262:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b264:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b268:	700c      	strb	r4, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b26a:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b26c:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b270:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b274:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b276:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b278:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b27c:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b27e:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b280:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b282:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b284:	0d14      	lsrs	r4, r2, #20
 800b286:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b288:	f3c2 4403 	ubfx	r4, r2, #16, #4
 800b28c:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b28e:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 800b292:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b294:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800b298:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b29a:	f3c2 3440 	ubfx	r4, r2, #13, #1
 800b29e:	72cc      	strb	r4, [r1, #11]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b2a0:	2000      	movs	r0, #0
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b2a2:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800b2a6:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b2a8:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800b2aa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d16f      	bne.n	800b390 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b2b0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b2b2:	f640 74fc 	movw	r4, #4092	@ 0xffc
 800b2b6:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 800b2ba:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b2be:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b2c2:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b2c4:	750c      	strb	r4, [r1, #20]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b2c6:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b2ca:	f3c0 6402 	ubfx	r4, r0, #24, #3
 800b2ce:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b2d0:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b2d2:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b2d6:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b2da:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b2dc:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b2de:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b2e0:	7e0a      	ldrb	r2, [r1, #24]
 800b2e2:	f002 0207 	and.w	r2, r2, #7
 800b2e6:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b2e8:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b2ea:	4094      	lsls	r4, r2
 800b2ec:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b2ee:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f00c 0c0f 	and.w	ip, ip, #15
 800b2f8:	fa02 f20c 	lsl.w	r2, r2, ip
 800b2fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b2fe:	0a52      	lsrs	r2, r2, #9
 800b300:	fb04 f202 	mul.w	r2, r4, r2
 800b304:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b306:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800b30a:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b30e:	659c      	str	r4, [r3, #88]	@ 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b310:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b312:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b316:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b31a:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b31c:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b320:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b322:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b326:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b328:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b32a:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b32e:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b332:	778c      	strb	r4, [r1, #30]
  pCSD->Reserved3 = 0;
 800b334:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b336:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b338:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b33c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b340:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->Reserved3 = 0;
 800b344:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b348:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b34c:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b350:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b354:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b358:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b35c:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b360:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b364:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b368:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b36c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b370:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b374:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b378:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b37c:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 800b380:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b382:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800b386:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 800b38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b38e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b390:	2801      	cmp	r0, #1
 800b392:	d10f      	bne.n	800b3b4 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b394:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b396:	0412      	lsls	r2, r2, #16
 800b398:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800b39c:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800b3a0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b3a2:	690a      	ldr	r2, [r1, #16]
 800b3a4:	3201      	adds	r2, #1
 800b3a6:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 800b3a8:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b3ac:	e9c3 4214 	strd	r4, r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b3b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b3b2:	e7a8      	b.n	800b306 <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	4906      	ldr	r1, [pc, #24]	@ (800b3d0 <HAL_SD_GetCardCSD+0x174>)
 800b3b8:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b3bc:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3be:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b3c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b3c4:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b3c8:	4608      	mov	r0, r1
}
 800b3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	1fe00fff 	.word	0x1fe00fff

0800b3d4 <HAL_SD_InitCard>:
{
 800b3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b3d8:	2200      	movs	r2, #0
{
 800b3da:	b098      	sub	sp, #96	@ 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b3dc:	2300      	movs	r3, #0
{
 800b3de:	4604      	mov	r4, r0
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b3e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b3e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b3e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b3ec:	f7ff f99a 	bl	800a724 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d070      	beq.n	800b4d6 <HAL_SD_InitCard+0x102>
  Init.Transceiver = hsd->Init.Transceiver;
 800b3f4:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b3f6:	4aa6      	ldr	r2, [pc, #664]	@ (800b690 <HAL_SD_InitCard+0x2bc>)
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b3f8:	6827      	ldr	r7, [r4, #0]
  Init.Transceiver = hsd->Init.Transceiver;
 800b3fa:	930b      	str	r3, [sp, #44]	@ 0x2c
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b3fc:	0a06      	lsrs	r6, r0, #8
 800b3fe:	fba2 2606 	umull	r2, r6, r2, r6
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b402:	2b01      	cmp	r3, #1
 800b404:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b406:	ea4f 1616 	mov.w	r6, r6, lsr #4
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b40a:	d05f      	beq.n	800b4cc <HAL_SD_InitCard+0xf8>
  status = SDMMC_Init(hsd->Instance, Init);
 800b40c:	960a      	str	r6, [sp, #40]	@ 0x28
 800b40e:	aa09      	add	r2, sp, #36	@ 0x24
 800b410:	ca07      	ldmia	r2, {r0, r1, r2}
 800b412:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b416:	ab06      	add	r3, sp, #24
 800b418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b41a:	4638      	mov	r0, r7
 800b41c:	f001 ff3e 	bl	800d29c <SDMMC_Init>
  if(status != HAL_OK)
 800b420:	b120      	cbz	r0, 800b42c <HAL_SD_InitCard+0x58>
      return HAL_ERROR;
 800b422:	2501      	movs	r5, #1
}
 800b424:	4628      	mov	r0, r5
 800b426:	b018      	add	sp, #96	@ 0x60
 800b428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = SDMMC_PowerState_ON(hsd->Instance);
 800b42c:	6820      	ldr	r0, [r4, #0]
 800b42e:	f001 ff5b 	bl	800d2e8 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800b432:	4607      	mov	r7, r0
 800b434:	2800      	cmp	r0, #0
 800b436:	d1f4      	bne.n	800b422 <HAL_SD_InitCard+0x4e>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b438:	0076      	lsls	r6, r6, #1
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b43a:	4896      	ldr	r0, [pc, #600]	@ (800b694 <HAL_SD_InitCard+0x2c0>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b43c:	fbb5 f5f6 	udiv	r5, r5, r6
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b440:	fbb0 f0f5 	udiv	r0, r0, r5
 800b444:	3001      	adds	r0, #1
 800b446:	f7fb ff01 	bl	800724c <HAL_Delay>
  __IO uint32_t count = 0U;
 800b44a:	9705      	str	r7, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 800b44c:	f7fb fef8 	bl	8007240 <HAL_GetTick>
 800b450:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b452:	6820      	ldr	r0, [r4, #0]
 800b454:	f002 fc0a 	bl	800dc6c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b458:	4605      	mov	r5, r0
 800b45a:	bb80      	cbnz	r0, 800b4be <HAL_SD_InitCard+0xea>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b45c:	6820      	ldr	r0, [r4, #0]
 800b45e:	f002 fc31 	bl	800dcc4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b462:	2800      	cmp	r0, #0
 800b464:	f040 80d2 	bne.w	800b60c <HAL_SD_InitCard+0x238>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b468:	2301      	movs	r3, #1
 800b46a:	6423      	str	r3, [r4, #64]	@ 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b46c:	6820      	ldr	r0, [r4, #0]
 800b46e:	2100      	movs	r1, #0
 800b470:	f002 fc6a 	bl	800dd48 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b474:	2800      	cmp	r0, #0
 800b476:	d135      	bne.n	800b4e4 <HAL_SD_InitCard+0x110>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b478:	9b05      	ldr	r3, [sp, #20]
 800b47a:	f64f 77fe 	movw	r7, #65534	@ 0xfffe
 800b47e:	42bb      	cmp	r3, r7
 800b480:	f200 80d1 	bhi.w	800b626 <HAL_SD_InitCard+0x252>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b484:	f8df 8214 	ldr.w	r8, [pc, #532]	@ 800b69c <HAL_SD_InitCard+0x2c8>
 800b488:	e011      	b.n	800b4ae <HAL_SD_InitCard+0xda>
 800b48a:	6820      	ldr	r0, [r4, #0]
 800b48c:	f002 fd02 	bl	800de94 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b490:	4601      	mov	r1, r0
 800b492:	bb38      	cbnz	r0, 800b4e4 <HAL_SD_InitCard+0x110>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b494:	6820      	ldr	r0, [r4, #0]
 800b496:	f001 ff37 	bl	800d308 <SDMMC_GetResponse>
    count++;
 800b49a:	9a05      	ldr	r2, [sp, #20]
 800b49c:	3201      	adds	r2, #1
 800b49e:	9205      	str	r2, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b4a0:	9a05      	ldr	r2, [sp, #20]
 800b4a2:	42ba      	cmp	r2, r7
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4a4:	4603      	mov	r3, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b4a6:	ea4f 71d0 	mov.w	r1, r0, lsr #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b4aa:	d81e      	bhi.n	800b4ea <HAL_SD_InitCard+0x116>
 800b4ac:	b9e9      	cbnz	r1, 800b4ea <HAL_SD_InitCard+0x116>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	6820      	ldr	r0, [r4, #0]
 800b4b2:	f002 fc49 	bl	800dd48 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b4b6:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d0e5      	beq.n	800b48a <HAL_SD_InitCard+0xb6>
    hsd->State = HAL_SD_STATE_READY;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b4c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b4c6:	432b      	orrs	r3, r5
 800b4c8:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800b4ca:	e7aa      	b.n	800b422 <HAL_SD_InitCard+0x4e>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	f043 0310 	orr.w	r3, r3, #16
 800b4d2:	603b      	str	r3, [r7, #0]
 800b4d4:	e79a      	b.n	800b40c <HAL_SD_InitCard+0x38>
      hsd->State = HAL_SD_STATE_READY;
 800b4d6:	2201      	movs	r2, #1
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b4d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
      hsd->State = HAL_SD_STATE_READY;
 800b4dc:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b4e0:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 800b4e2:	e79e      	b.n	800b422 <HAL_SD_InitCard+0x4e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800b4e8:	e7e9      	b.n	800b4be <HAL_SD_InitCard+0xea>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b4ea:	9905      	ldr	r1, [sp, #20]
 800b4ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b4f0:	4291      	cmp	r1, r2
 800b4f2:	f200 80a2 	bhi.w	800b63a <HAL_SD_InitCard+0x266>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b4f6:	005f      	lsls	r7, r3, #1
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b4f8:	6820      	ldr	r0, [r4, #0]
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b4fa:	f140 8098 	bpl.w	800b62e <HAL_SD_InitCard+0x25a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b4fe:	2201      	movs	r2, #1
 800b500:	63e2      	str	r2, [r4, #60]	@ 0x3c
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b502:	69a2      	ldr	r2, [r4, #24]
 800b504:	2a01      	cmp	r2, #1
 800b506:	f000 809b 	beq.w	800b640 <HAL_SD_InitCard+0x26c>
  uint16_t sd_rca = 1U;
 800b50a:	2301      	movs	r3, #1
 800b50c:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b510:	f001 fef6 	bl	800d300 <SDMMC_GetPowerState>
 800b514:	b340      	cbz	r0, 800b568 <HAL_SD_InitCard+0x194>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b516:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b518:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d12d      	bne.n	800b57a <HAL_SD_InitCard+0x1a6>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b51e:	2104      	movs	r1, #4
 800b520:	f001 fef2 	bl	800d308 <SDMMC_GetResponse>
 800b524:	0d00      	lsrs	r0, r0, #20
 800b526:	6460      	str	r0, [r4, #68]	@ 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b528:	a90d      	add	r1, sp, #52	@ 0x34
 800b52a:	4620      	mov	r0, r4
 800b52c:	f7ff fe96 	bl	800b25c <HAL_SD_GetCardCSD>
 800b530:	4605      	mov	r5, r0
 800b532:	2800      	cmp	r0, #0
 800b534:	d17e      	bne.n	800b634 <HAL_SD_InitCard+0x260>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b536:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b538:	6820      	ldr	r0, [r4, #0]
 800b53a:	0412      	lsls	r2, r2, #16
 800b53c:	462b      	mov	r3, r5
 800b53e:	f002 faef 	bl	800db20 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b542:	b998      	cbnz	r0, 800b56c <HAL_SD_InitCard+0x198>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b544:	6820      	ldr	r0, [r4, #0]
 800b546:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b54a:	f001 fef7 	bl	800d33c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b54e:	2800      	cmp	r0, #0
 800b550:	f43f af68 	beq.w	800b424 <HAL_SD_InitCard+0x50>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	4a50      	ldr	r2, [pc, #320]	@ (800b698 <HAL_SD_InitCard+0x2c4>)
 800b558:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b55a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b55c:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 800b55e:	4303      	orrs	r3, r0
 800b560:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b562:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b566:	e75c      	b.n	800b422 <HAL_SD_InitCard+0x4e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b568:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800b56c:	2301      	movs	r3, #1
 800b56e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b572:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b574:	4303      	orrs	r3, r0
 800b576:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800b578:	e753      	b.n	800b422 <HAL_SD_InitCard+0x4e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b57a:	f002 fe13 	bl	800e1a4 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b57e:	2800      	cmp	r0, #0
 800b580:	d1f4      	bne.n	800b56c <HAL_SD_InitCard+0x198>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b582:	4601      	mov	r1, r0
 800b584:	6820      	ldr	r0, [r4, #0]
 800b586:	f001 febf 	bl	800d308 <SDMMC_GetResponse>
 800b58a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b58c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b58e:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b590:	6820      	ldr	r0, [r4, #0]
 800b592:	f001 feb9 	bl	800d308 <SDMMC_GetResponse>
 800b596:	4603      	mov	r3, r0
 800b598:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b59a:	2108      	movs	r1, #8
 800b59c:	6820      	ldr	r0, [r4, #0]
 800b59e:	f001 feb3 	bl	800d308 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5a2:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b5a4:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5a6:	6820      	ldr	r0, [r4, #0]
 800b5a8:	f001 feae 	bl	800d308 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5ae:	67e0      	str	r0, [r4, #124]	@ 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5b0:	2b03      	cmp	r3, #3
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b5b2:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5b4:	d0b3      	beq.n	800b51e <HAL_SD_InitCard+0x14a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b5b6:	f10d 0112 	add.w	r1, sp, #18
 800b5ba:	f002 fe73 	bl	800e2a4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d1d4      	bne.n	800b56c <HAL_SD_InitCard+0x198>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5c4:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d0a9      	beq.n	800b51e <HAL_SD_InitCard+0x14a>
    hsd->SdCard.RelCardAdd = sd_rca;
 800b5ca:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800b5ce:	64a1      	str	r1, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5d0:	0409      	lsls	r1, r1, #16
 800b5d2:	f002 fe27 	bl	800e224 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d1c8      	bne.n	800b56c <HAL_SD_InitCard+0x198>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b5da:	4601      	mov	r1, r0
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	f001 fe93 	bl	800d308 <SDMMC_GetResponse>
 800b5e2:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b5e4:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b5e6:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b5e8:	6820      	ldr	r0, [r4, #0]
 800b5ea:	f001 fe8d 	bl	800d308 <SDMMC_GetResponse>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b5f2:	2108      	movs	r1, #8
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	f001 fe87 	bl	800d308 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5fa:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b5fc:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5fe:	6820      	ldr	r0, [r4, #0]
 800b600:	f001 fe82 	bl	800d308 <SDMMC_GetResponse>
 800b604:	4603      	mov	r3, r0
 800b606:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	e788      	b.n	800b51e <HAL_SD_InitCard+0x14a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b60c:	6425      	str	r5, [r4, #64]	@ 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	f002 fb2c 	bl	800dc6c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b614:	4605      	mov	r5, r0
 800b616:	2800      	cmp	r0, #0
 800b618:	f47f af51 	bne.w	800b4be <HAL_SD_InitCard+0xea>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b61c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b61e:	2b01      	cmp	r3, #1
 800b620:	f47f af2a 	bne.w	800b478 <HAL_SD_InitCard+0xa4>
 800b624:	e722      	b.n	800b46c <HAL_SD_InitCard+0x98>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b626:	9b05      	ldr	r3, [sp, #20]
 800b628:	42bb      	cmp	r3, r7
 800b62a:	d806      	bhi.n	800b63a <HAL_SD_InitCard+0x266>
 800b62c:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardType = CARD_SDSC;
 800b62e:	2300      	movs	r3, #0
 800b630:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b632:	e76a      	b.n	800b50a <HAL_SD_InitCard+0x136>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b634:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800b638:	e798      	b.n	800b56c <HAL_SD_InitCard+0x198>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b63a:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800b63e:	e73e      	b.n	800b4be <HAL_SD_InitCard+0xea>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b640:	01dd      	lsls	r5, r3, #7
 800b642:	f57f af62 	bpl.w	800b50a <HAL_SD_InitCard+0x136>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b646:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b648:	f44f 7200 	mov.w	r2, #512	@ 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b64c:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b650:	65e2      	str	r2, [r4, #92]	@ 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b652:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b654:	f002 ffcc 	bl	800e5f0 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b658:	4605      	mov	r5, r0
 800b65a:	b128      	cbz	r0, 800b668 <HAL_SD_InitCard+0x294>
 800b65c:	e72f      	b.n	800b4be <HAL_SD_InitCard+0xea>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b65e:	f7fb fdef 	bl	8007240 <HAL_GetTick>
 800b662:	1b83      	subs	r3, r0, r6
 800b664:	3301      	adds	r3, #1
 800b666:	d030      	beq.n	800b6ca <HAL_SD_InitCard+0x2f6>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800b668:	6823      	ldr	r3, [r4, #0]
 800b66a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b66c:	0150      	lsls	r0, r2, #5
 800b66e:	d5f6      	bpl.n	800b65e <HAL_SD_InitCard+0x28a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800b670:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800b674:	639a      	str	r2, [r3, #56]	@ 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800b676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b678:	02d9      	lsls	r1, r3, #11
 800b67a:	f57f af33 	bpl.w	800b4e4 <HAL_SD_InitCard+0x110>
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800b67e:	2001      	movs	r0, #1
 800b680:	f000 fa50 	bl	800bb24 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800b684:	6820      	ldr	r0, [r4, #0]
 800b686:	6803      	ldr	r3, [r0, #0]
 800b688:	f043 0304 	orr.w	r3, r3, #4
 800b68c:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b68e:	e00d      	b.n	800b6ac <HAL_SD_InitCard+0x2d8>
 800b690:	014f8b59 	.word	0x014f8b59
 800b694:	00012110 	.word	0x00012110
 800b698:	1fe00fff 	.word	0x1fe00fff
 800b69c:	c1100000 	.word	0xc1100000
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6a0:	f7fb fdce 	bl	8007240 <HAL_GetTick>
 800b6a4:	1b83      	subs	r3, r0, r6
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	d00f      	beq.n	800b6ca <HAL_SD_InitCard+0x2f6>
 800b6aa:	6820      	ldr	r0, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b6ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b6ae:	019a      	lsls	r2, r3, #6
 800b6b0:	d5f6      	bpl.n	800b6a0 <HAL_SD_InitCard+0x2cc>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800b6b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b6b6:	6383      	str	r3, [r0, #56]	@ 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800b6b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b6ba:	02db      	lsls	r3, r3, #11
 800b6bc:	d4bd      	bmi.n	800b63a <HAL_SD_InitCard+0x266>
          hsd->Instance->POWER = 0x13U;
 800b6be:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b6c0:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 800b6c4:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b6c6:	6383      	str	r3, [r0, #56]	@ 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6c8:	e71f      	b.n	800b50a <HAL_SD_InitCard+0x136>
            return HAL_SD_ERROR_TIMEOUT;
 800b6ca:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 800b6ce:	e6f6      	b.n	800b4be <HAL_SD_InitCard+0xea>

0800b6d0 <HAL_SD_GetCardStatus>:
{
 800b6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6d4:	b097      	sub	sp, #92	@ 0x5c
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800b6da:	f7fb fdb1 	bl	8007240 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6de:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800b6e0:	4607      	mov	r7, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6e2:	6820      	ldr	r0, [r4, #0]
 800b6e4:	f001 fe10 	bl	800d308 <SDMMC_GetResponse>
 800b6e8:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b6ec:	6820      	ldr	r0, [r4, #0]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6ee:	d15a      	bne.n	800b7a6 <HAL_SD_GetCardStatus+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b6f0:	2140      	movs	r1, #64	@ 0x40
 800b6f2:	f001 fe23 	bl	800d33c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	b1e0      	cbz	r0, 800b734 <HAL_SD_GetCardStatus+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b6fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6fc:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b6fe:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b700:	4a59      	ldr	r2, [pc, #356]	@ (800b868 <HAL_SD_GetCardStatus+0x198>)
 800b702:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b704:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b706:	2101      	movs	r1, #1
    hsd->ErrorCode |= errorstate;
 800b708:	4313      	orrs	r3, r2
 800b70a:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800b70c:	460e      	mov	r6, r1
    hsd->State = HAL_SD_STATE_READY;
 800b70e:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b716:	f001 fe11 	bl	800d33c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b71a:	b138      	cbz	r0, 800b72c <HAL_SD_GetCardStatus+0x5c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	4952      	ldr	r1, [pc, #328]	@ (800b868 <HAL_SD_GetCardStatus+0x198>)
 800b720:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b722:	2301      	movs	r3, #1
    hsd->ErrorCode = errorstate;
 800b724:	63a0      	str	r0, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800b726:	461e      	mov	r6, r3
    hsd->State = HAL_SD_STATE_READY;
 800b728:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800b72c:	4630      	mov	r0, r6
 800b72e:	b017      	add	sp, #92	@ 0x5c
 800b730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b734:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b736:	6820      	ldr	r0, [r4, #0]
 800b738:	0409      	lsls	r1, r1, #16
 800b73a:	f002 fb05 	bl	800dd48 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b73e:	4603      	mov	r3, r0
 800b740:	2800      	cmp	r0, #0
 800b742:	d1da      	bne.n	800b6fa <HAL_SD_GetCardStatus+0x2a>
  config.DataLength    = 64U;
 800b744:	f04f 32ff 	mov.w	r2, #4294967295
 800b748:	2340      	movs	r3, #64	@ 0x40
 800b74a:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b74e:	2260      	movs	r2, #96	@ 0x60
 800b750:	2302      	movs	r3, #2
 800b752:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b756:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b758:	2301      	movs	r3, #1
 800b75a:	2200      	movs	r2, #0
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b75c:	6820      	ldr	r0, [r4, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b75e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b762:	f001 fdd5 	bl	800d310 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b766:	6820      	ldr	r0, [r4, #0]
 800b768:	f002 fe9a 	bl	800e4a0 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b76c:	4603      	mov	r3, r0
 800b76e:	2800      	cmp	r0, #0
 800b770:	d1c3      	bne.n	800b6fa <HAL_SD_GetCardStatus+0x2a>
  uint32_t *pData = pSDstatus;
 800b772:	ae06      	add	r6, sp, #24
 800b774:	e004      	b.n	800b780 <HAL_SD_GetCardStatus+0xb0>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b776:	f7fb fd63 	bl	8007240 <HAL_GetTick>
 800b77a:	1bc0      	subs	r0, r0, r7
 800b77c:	3001      	adds	r0, #1
 800b77e:	d015      	beq.n	800b7ac <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b780:	6820      	ldr	r0, [r4, #0]
 800b782:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b784:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b788:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b78a:	d113      	bne.n	800b7b4 <HAL_SD_GetCardStatus+0xe4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b78c:	041b      	lsls	r3, r3, #16
 800b78e:	d5f2      	bpl.n	800b776 <HAL_SD_GetCardStatus+0xa6>
 800b790:	f106 0820 	add.w	r8, r6, #32
 800b794:	e000      	b.n	800b798 <HAL_SD_GetCardStatus+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b796:	6820      	ldr	r0, [r4, #0]
 800b798:	f001 fd9c 	bl	800d2d4 <SDMMC_ReadFIFO>
 800b79c:	f846 0b04 	str.w	r0, [r6], #4
      for(count = 0U; count < 8U; count++)
 800b7a0:	4546      	cmp	r6, r8
 800b7a2:	d1f8      	bne.n	800b796 <HAL_SD_GetCardStatus+0xc6>
 800b7a4:	e7e7      	b.n	800b776 <HAL_SD_GetCardStatus+0xa6>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b7a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b7aa:	e7a9      	b.n	800b700 <HAL_SD_GetCardStatus+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7ac:	6820      	ldr	r0, [r4, #0]
 800b7ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b7b2:	e7a5      	b.n	800b700 <HAL_SD_GetCardStatus+0x30>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b7b4:	0719      	lsls	r1, r3, #28
 800b7b6:	d450      	bmi.n	800b85a <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b7b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b7ba:	079a      	lsls	r2, r3, #30
 800b7bc:	d44f      	bmi.n	800b85e <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b7be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b7c0:	069b      	lsls	r3, r3, #26
 800b7c2:	d50a      	bpl.n	800b7da <HAL_SD_GetCardStatus+0x10a>
 800b7c4:	e04d      	b.n	800b862 <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b7c6:	f001 fd85 	bl	800d2d4 <SDMMC_ReadFIFO>
 800b7ca:	f846 0b04 	str.w	r0, [r6], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b7ce:	f7fb fd37 	bl	8007240 <HAL_GetTick>
 800b7d2:	1bc0      	subs	r0, r0, r7
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	d0e9      	beq.n	800b7ac <HAL_SD_GetCardStatus+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7d8:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b7da:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b7dc:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800b7e0:	d1f1      	bne.n	800b7c6 <HAL_SD_GetCardStatus+0xf6>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b7e2:	9906      	ldr	r1, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b7e4:	4a21      	ldr	r2, [pc, #132]	@ (800b86c <HAL_SD_GetCardStatus+0x19c>)
 800b7e6:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b7e8:	0a0a      	lsrs	r2, r1, #8
  HAL_StatusTypeDef status = HAL_OK;
 800b7ea:	461e      	mov	r6, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b7ec:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b7f0:	e9dd c308 	ldrd	ip, r3, [sp, #32]
 800b7f4:	9f07      	ldr	r7, [sp, #28]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b7f6:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 800b7fa:	b292      	uxth	r2, r2
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b7fc:	f3c1 1981 	ubfx	r9, r1, #6, #2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b800:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b804:	f885 9000 	strb.w	r9, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b808:	fa97 f887 	rev.w	r8, r7
 800b80c:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b80e:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b810:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b814:	f8c5 8004 	str.w	r8, [r5, #4]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b818:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b81c:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b81e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 800b822:	726a      	strb	r2, [r5, #9]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b824:	fa5f fe83 	uxtb.w	lr, r3
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b828:	f3cc 5203 	ubfx	r2, ip, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b82c:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b830:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b832:	ea47 070e 	orr.w	r7, r7, lr
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b836:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b83a:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b83c:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b83e:	f3c3 2201 	ubfx	r2, r3, #8, #2
 800b842:	73ea      	strb	r2, [r5, #15]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b844:	f89d e02b 	ldrb.w	lr, [sp, #43]	@ 0x2b
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b848:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b84c:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b850:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b852:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b854:	f885 e012 	strb.w	lr, [r5, #18]
 800b858:	e75b      	b.n	800b712 <HAL_SD_GetCardStatus+0x42>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b85a:	2308      	movs	r3, #8
 800b85c:	e750      	b.n	800b700 <HAL_SD_GetCardStatus+0x30>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b85e:	2302      	movs	r3, #2
 800b860:	e74e      	b.n	800b700 <HAL_SD_GetCardStatus+0x30>
    return HAL_SD_ERROR_RX_OVERRUN;
 800b862:	2320      	movs	r3, #32
 800b864:	e74c      	b.n	800b700 <HAL_SD_GetCardStatus+0x30>
 800b866:	bf00      	nop
 800b868:	1fe00fff 	.word	0x1fe00fff
 800b86c:	18000f3a 	.word	0x18000f3a

0800b870 <HAL_SD_GetCardInfo>:
{
 800b870:	b4f0      	push	{r4, r5, r6, r7}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b872:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	@ 0x3c
 800b876:	e9d0 6511 	ldrd	r6, r5, [r0, #68]	@ 0x44
 800b87a:	e9d0 4213 	ldrd	r4, r2, [r0, #76]	@ 0x4c
 800b87e:	e9d0 3015 	ldrd	r3, r0, [r0, #84]	@ 0x54
 800b882:	e9c1 c700 	strd	ip, r7, [r1]
 800b886:	e9c1 6502 	strd	r6, r5, [r1, #8]
 800b88a:	e9c1 4204 	strd	r4, r2, [r1, #16]
 800b88e:	61c8      	str	r0, [r1, #28]
}
 800b890:	bcf0      	pop	{r4, r5, r6, r7}
 800b892:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b894:	618b      	str	r3, [r1, #24]
}
 800b896:	4770      	bx	lr

0800b898 <HAL_SD_ConfigWideBusOperation>:
{
 800b898:	b530      	push	{r4, r5, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b89a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 800b89c:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b89e:	4293      	cmp	r3, r2
{
 800b8a0:	b08b      	sub	sp, #44	@ 0x2c
 800b8a2:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 800b8a4:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
{
 800b8a8:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8aa:	d044      	beq.n	800b936 <HAL_SD_ConfigWideBusOperation+0x9e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b8ac:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800b8b0:	d041      	beq.n	800b936 <HAL_SD_ConfigWideBusOperation+0x9e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b8b2:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800b8b6:	f000 8081 	beq.w	800b9bc <HAL_SD_ConfigWideBusOperation+0x124>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b8ba:	2900      	cmp	r1, #0
 800b8bc:	d05f      	beq.n	800b97e <HAL_SD_ConfigWideBusOperation+0xe6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b8be:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b8c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b8c4:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b8c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d13b      	bne.n	800b944 <HAL_SD_ConfigWideBusOperation+0xac>
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b8cc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b8d0:	f7fe ff28 	bl	800a724 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d04b      	beq.n	800b970 <HAL_SD_ConfigWideBusOperation+0xd8>
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b8d8:	4b52      	ldr	r3, [pc, #328]	@ (800ba24 <HAL_SD_ConfigWideBusOperation+0x18c>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b8da:	6861      	ldr	r1, [r4, #4]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b8dc:	6962      	ldr	r2, [r4, #20]
      Init.BusWide             = WideMode;
 800b8de:	9506      	str	r5, [sp, #24]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b8e0:	9104      	str	r1, [sp, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b8e2:	fba3 5300 	umull	r5, r3, r3, r0
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b8e6:	6921      	ldr	r1, [r4, #16]
 800b8e8:	9107      	str	r1, [sp, #28]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b8ea:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b8ee:	68a1      	ldr	r1, [r4, #8]
 800b8f0:	9105      	str	r1, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b8f2:	ea4f 6513 	mov.w	r5, r3, lsr #24
 800b8f6:	d20e      	bcs.n	800b916 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b8f8:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800b8fa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b8fe:	d00a      	beq.n	800b916 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b900:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b904:	d07c      	beq.n	800ba00 <HAL_SD_ConfigWideBusOperation+0x168>
        if (hsd->Init.ClockDiv == 0U)
 800b906:	b112      	cbz	r2, 800b90e <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b908:	0053      	lsls	r3, r2, #1
 800b90a:	fbb0 f0f3 	udiv	r0, r0, r3
 800b90e:	4b46      	ldr	r3, [pc, #280]	@ (800ba28 <HAL_SD_ConfigWideBusOperation+0x190>)
 800b910:	4298      	cmp	r0, r3
 800b912:	bf88      	it	hi
 800b914:	462a      	movhi	r2, r5
      Init.Transceiver = hsd->Init.Transceiver;
 800b916:	69a3      	ldr	r3, [r4, #24]
 800b918:	e9cd 2308 	strd	r2, r3, [sp, #32]
      (void)SDMMC_Init(hsd->Instance, Init);
 800b91c:	ab0a      	add	r3, sp, #40	@ 0x28
 800b91e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800b922:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b926:	ab04      	add	r3, sp, #16
 800b928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b92a:	6820      	ldr	r0, [r4, #0]
 800b92c:	f001 fcb6 	bl	800d29c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800b930:	2500      	movs	r5, #0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b932:	6820      	ldr	r0, [r4, #0]
 800b934:	e00a      	b.n	800b94c <HAL_SD_ConfigWideBusOperation+0xb4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b936:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b93c:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b93e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c3      	beq.n	800b8cc <HAL_SD_ConfigWideBusOperation+0x34>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b944:	6820      	ldr	r0, [r4, #0]
 800b946:	4b39      	ldr	r3, [pc, #228]	@ (800ba2c <HAL_SD_ConfigWideBusOperation+0x194>)
 800b948:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800b94a:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b94c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b950:	f001 fcf4 	bl	800d33c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b954:	b130      	cbz	r0, 800b964 <HAL_SD_ConfigWideBusOperation+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	4a34      	ldr	r2, [pc, #208]	@ (800ba2c <HAL_SD_ConfigWideBusOperation+0x194>)
 800b95a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b95c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b95e:	4303      	orrs	r3, r0
    status = HAL_ERROR;
 800b960:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 800b962:	63a3      	str	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 800b964:	2301      	movs	r3, #1
}
 800b966:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800b968:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800b96c:	b00b      	add	sp, #44	@ 0x2c
 800b96e:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b970:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      (void)SDMMC_Init(hsd->Instance, Init);
 800b972:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b974:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b978:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800b97a:	2501      	movs	r5, #1
 800b97c:	e7e6      	b.n	800b94c <HAL_SD_ConfigWideBusOperation+0xb4>
  uint32_t scr[2U] = {0UL, 0UL};
 800b97e:	2200      	movs	r2, #0
 800b980:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b982:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800b984:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b988:	f001 fcbe 	bl	800d308 <SDMMC_GetResponse>
 800b98c:	0182      	lsls	r2, r0, #6
 800b98e:	d434      	bmi.n	800b9fa <HAL_SD_ConfigWideBusOperation+0x162>
  errorstate = SD_FindSCR(hsd, scr);
 800b990:	a904      	add	r1, sp, #16
 800b992:	4620      	mov	r0, r4
 800b994:	f7ff f9d6 	bl	800ad44 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b998:	b960      	cbnz	r0, 800b9b4 <HAL_SD_ConfigWideBusOperation+0x11c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b99a:	9b05      	ldr	r3, [sp, #20]
 800b99c:	03db      	lsls	r3, r3, #15
 800b99e:	d535      	bpl.n	800ba0c <HAL_SD_ConfigWideBusOperation+0x174>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9a0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b9a2:	6820      	ldr	r0, [r4, #0]
 800b9a4:	0409      	lsls	r1, r1, #16
 800b9a6:	f002 f9cf 	bl	800dd48 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9aa:	b918      	cbnz	r0, 800b9b4 <HAL_SD_ConfigWideBusOperation+0x11c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b9ac:	4601      	mov	r1, r0
 800b9ae:	6820      	ldr	r0, [r4, #0]
 800b9b0:	f002 faaa 	bl	800df08 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800b9b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b9b6:	4303      	orrs	r3, r0
 800b9b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b9ba:	e7c0      	b.n	800b93e <HAL_SD_ConfigWideBusOperation+0xa6>
  uint32_t scr[2U] = {0UL, 0UL};
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b9c0:	6800      	ldr	r0, [r0, #0]
 800b9c2:	2100      	movs	r1, #0
  uint32_t scr[2U] = {0UL, 0UL};
 800b9c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b9c8:	f001 fc9e 	bl	800d308 <SDMMC_GetResponse>
 800b9cc:	0180      	lsls	r0, r0, #6
 800b9ce:	d414      	bmi.n	800b9fa <HAL_SD_ConfigWideBusOperation+0x162>
  errorstate = SD_FindSCR(hsd, scr);
 800b9d0:	a904      	add	r1, sp, #16
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f7ff f9b6 	bl	800ad44 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d1eb      	bne.n	800b9b4 <HAL_SD_ConfigWideBusOperation+0x11c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b9dc:	9b05      	ldr	r3, [sp, #20]
 800b9de:	0359      	lsls	r1, r3, #13
 800b9e0:	d514      	bpl.n	800ba0c <HAL_SD_ConfigWideBusOperation+0x174>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b9e4:	6820      	ldr	r0, [r4, #0]
 800b9e6:	0409      	lsls	r1, r1, #16
 800b9e8:	f002 f9ae 	bl	800dd48 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d1e1      	bne.n	800b9b4 <HAL_SD_ConfigWideBusOperation+0x11c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b9f0:	6820      	ldr	r0, [r4, #0]
 800b9f2:	2102      	movs	r1, #2
 800b9f4:	f002 fa88 	bl	800df08 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9f8:	e7dc      	b.n	800b9b4 <HAL_SD_ConfigWideBusOperation+0x11c>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b9fa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b9fe:	e7d9      	b.n	800b9b4 <HAL_SD_ConfigWideBusOperation+0x11c>
        if (hsd->Init.ClockDiv == 0U)
 800ba00:	b93a      	cbnz	r2, 800ba12 <HAL_SD_ConfigWideBusOperation+0x17a>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ba02:	490b      	ldr	r1, [pc, #44]	@ (800ba30 <HAL_SD_ConfigWideBusOperation+0x198>)
 800ba04:	4288      	cmp	r0, r1
 800ba06:	d986      	bls.n	800b916 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ba08:	0e5a      	lsrs	r2, r3, #25
 800ba0a:	e784      	b.n	800b916 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba0c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800ba10:	e7d0      	b.n	800b9b4 <HAL_SD_ConfigWideBusOperation+0x11c>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ba12:	0051      	lsls	r1, r2, #1
 800ba14:	fbb0 f1f1 	udiv	r1, r0, r1
 800ba18:	4805      	ldr	r0, [pc, #20]	@ (800ba30 <HAL_SD_ConfigWideBusOperation+0x198>)
 800ba1a:	4281      	cmp	r1, r0
 800ba1c:	f67f af7b 	bls.w	800b916 <HAL_SD_ConfigWideBusOperation+0x7e>
 800ba20:	e7f2      	b.n	800ba08 <HAL_SD_ConfigWideBusOperation+0x170>
 800ba22:	bf00      	nop
 800ba24:	55e63b89 	.word	0x55e63b89
 800ba28:	017d7840 	.word	0x017d7840
 800ba2c:	1fe00fff 	.word	0x1fe00fff
 800ba30:	02faf080 	.word	0x02faf080

0800ba34 <HAL_SD_Init>:
{
 800ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba36:	b087      	sub	sp, #28
  if(hsd == NULL)
 800ba38:	b168      	cbz	r0, 800ba56 <HAL_SD_Init+0x22>
  if(hsd->State == HAL_SD_STATE_RESET)
 800ba3a:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800ba3e:	4604      	mov	r4, r0
 800ba40:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d043      	beq.n	800bad0 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_BUSY;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f7ff fcc0 	bl	800b3d4 <HAL_SD_InitCard>
 800ba54:	b118      	cbz	r0, 800ba5e <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 800ba56:	2601      	movs	r6, #1
}
 800ba58:	4630      	mov	r0, r6
 800ba5a:	b007      	add	sp, #28
 800ba5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ba5e:	a901      	add	r1, sp, #4
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7ff fe35 	bl	800b6d0 <HAL_SD_GetCardStatus>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d1f5      	bne.n	800ba56 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ba6a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800ba6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ba70:	f89d 2015 	ldrb.w	r2, [sp, #21]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ba74:	2901      	cmp	r1, #1
  speedgrade = CardStatus.UhsSpeedGrade;
 800ba76:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ba78:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ba7a:	d037      	beq.n	800baec <HAL_SD_Init+0xb8>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ba7c:	65e0      	str	r0, [r4, #92]	@ 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ba7e:	68e1      	ldr	r1, [r4, #12]
 800ba80:	4620      	mov	r0, r4
 800ba82:	f7ff ff09 	bl	800b898 <HAL_SD_ConfigWideBusOperation>
 800ba86:	4606      	mov	r6, r0
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d1e4      	bne.n	800ba56 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 800ba8c:	f7fb fbd8 	bl	8007240 <HAL_GetTick>
 800ba90:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ba92:	e007      	b.n	800baa4 <HAL_SD_Init+0x70>
    hsd->ErrorCode |= errorstate;
 800ba94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ba96:	4303      	orrs	r3, r0
 800ba98:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800ba9a:	f7fb fbd1 	bl	8007240 <HAL_GetTick>
 800ba9e:	1bc3      	subs	r3, r0, r7
 800baa0:	3301      	adds	r3, #1
 800baa2:	d019      	beq.n	800bad8 <HAL_SD_Init+0xa4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800baa4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800baa6:	6820      	ldr	r0, [r4, #0]
 800baa8:	0409      	lsls	r1, r1, #16
 800baaa:	f002 fc53 	bl	800e354 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800baae:	4605      	mov	r5, r0
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bab0:	4601      	mov	r1, r0
  if(errorstate != HAL_SD_ERROR_NONE)
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d1ee      	bne.n	800ba94 <HAL_SD_Init+0x60>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bab6:	6820      	ldr	r0, [r4, #0]
 800bab8:	f001 fc26 	bl	800d308 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800babc:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bac0:	2804      	cmp	r0, #4
 800bac2:	d1ea      	bne.n	800ba9a <HAL_SD_Init+0x66>
  hsd->State = HAL_SD_STATE_READY;
 800bac4:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bac6:	63a5      	str	r5, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800bac8:	6325      	str	r5, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800baca:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  return HAL_OK;
 800bace:	e7c3      	b.n	800ba58 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 800bad0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800bad2:	f7ff f9a5 	bl	800ae20 <HAL_SD_MspInit>
 800bad6:	e7b7      	b.n	800ba48 <HAL_SD_Init+0x14>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bad8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 800badc:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800bade:	2300      	movs	r3, #0
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bae0:	63a1      	str	r1, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800bae2:	2603      	movs	r6, #3
      hsd->State= HAL_SD_STATE_READY;
 800bae4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bae8:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 800baea:	e7b5      	b.n	800ba58 <HAL_SD_Init+0x24>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800baec:	4313      	orrs	r3, r2
 800baee:	bf14      	ite	ne
 800baf0:	f44f 7000 	movne.w	r0, #512	@ 0x200
 800baf4:	f44f 7080 	moveq.w	r0, #256	@ 0x100
 800baf8:	e7c0      	b.n	800ba7c <HAL_SD_Init+0x48>
 800bafa:	bf00      	nop

0800bafc <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bafc:	6c81      	ldr	r1, [r0, #72]	@ 0x48
{
 800bafe:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb00:	0409      	lsls	r1, r1, #16
{
 800bb02:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb04:	6800      	ldr	r0, [r0, #0]
 800bb06:	f002 fc25 	bl	800e354 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	b120      	cbz	r0, 800bb18 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800bb0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bb10:	430b      	orrs	r3, r1
 800bb12:	2000      	movs	r0, #0
 800bb14:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800bb16:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb18:	6820      	ldr	r0, [r4, #0]
 800bb1a:	f001 fbf5 	bl	800d308 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bb1e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800bb22:	bd10      	pop	{r4, pc}

0800bb24 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop

0800bb28 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop

0800bb2c <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
/**
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop

0800bb30 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
/**
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop

0800bb34 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
/**
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop

0800bb38 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	460d      	mov	r5, r1
 800bb3e:	4616      	mov	r6, r2
 800bb40:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bb42:	f7fb fb7d 	bl	8007240 <HAL_GetTick>
 800bb46:	442e      	add	r6, r5
 800bb48:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 800bb4a:	f7fb fb79 	bl	8007240 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bb4e:	4b2f      	ldr	r3, [pc, #188]	@ (800bc0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)

  while ((hspi->Instance->SR & Fifo) != State)
 800bb50:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bb58:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bb5c:	0d1b      	lsrs	r3, r3, #20
 800bb5e:	fb06 f303 	mul.w	r3, r6, r3
 800bb62:	3501      	adds	r5, #1
 800bb64:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800bb66:	bf18      	it	ne
 800bb68:	4607      	movne	r7, r0
 800bb6a:	d120      	bne.n	800bbae <SPI_WaitFifoStateUntilTimeout.constprop.0+0x76>
 800bb6c:	6893      	ldr	r3, [r2, #8]
 800bb6e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bb72:	d007      	beq.n	800bb84 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bb74:	7b13      	ldrb	r3, [r2, #12]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800bb7a:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bb7c:	6893      	ldr	r3, [r2, #8]
 800bb7e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bb82:	d1f7      	bne.n	800bb74 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3c>
      }      
      count--;
    }
  }

  return HAL_OK;
 800bb84:	2000      	movs	r0, #0
}
 800bb86:	b003      	add	sp, #12
 800bb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bb8a:	7b13      	ldrb	r3, [r2, #12]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 800bb90:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bb92:	f7fb fb55 	bl	8007240 <HAL_GetTick>
 800bb96:	1bc0      	subs	r0, r0, r7
 800bb98:	42b0      	cmp	r0, r6
 800bb9a:	d20d      	bcs.n	800bbb8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x80>
      if(count == 0U)
 800bb9c:	9a01      	ldr	r2, [sp, #4]
      count--;
 800bb9e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800bba0:	2a00      	cmp	r2, #0
      count--;
 800bba2:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((hspi->Instance->SR & Fifo) != State)
 800bba6:	6822      	ldr	r2, [r4, #0]
      count--;
 800bba8:	9301      	str	r3, [sp, #4]
        tmp_timeout = 0U;
 800bbaa:	bf08      	it	eq
 800bbac:	2600      	moveq	r6, #0
  while ((hspi->Instance->SR & Fifo) != State)
 800bbae:	6893      	ldr	r3, [r2, #8]
 800bbb0:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bbb4:	d1e9      	bne.n	800bb8a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x52>
 800bbb6:	e7e5      	b.n	800bb84 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbb8:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bbbc:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbbe:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bbc2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bbc6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbc8:	d013      	beq.n	800bbf2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bbca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bbcc:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800bbd0:	d107      	bne.n	800bbe2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bbe0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800bbe2:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800bbe4:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800bbe6:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800bbea:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800bbee:	2003      	movs	r0, #3
 800bbf0:	e7c9      	b.n	800bb86 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbf2:	68a2      	ldr	r2, [r4, #8]
 800bbf4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800bbf8:	d002      	beq.n	800bc00 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bbfa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800bbfe:	d1e4      	bne.n	800bbca <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	e7df      	b.n	800bbca <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 800bc0a:	bf00      	nop
 800bc0c:	200001e0 	.word	0x200001e0

0800bc10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	b083      	sub	sp, #12
 800bc16:	460e      	mov	r6, r1
 800bc18:	eb01 0902 	add.w	r9, r1, r2
 800bc1c:	4617      	mov	r7, r2
 800bc1e:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bc20:	f7fb fb0e 	bl	8007240 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bc24:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 800bd4c <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bc28:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 800bc2c:	f7fb fb08 	bl	8007240 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bc30:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 800bc34:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bc36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bc3a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bc3e:	0d1b      	lsrs	r3, r3, #20
 800bc40:	fb0a f303 	mul.w	r3, sl, r3
 800bc44:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bc46:	1c73      	adds	r3, r6, #1
 800bc48:	bf18      	it	ne
 800bc4a:	4683      	movne	fp, r0
 800bc4c:	d130      	bne.n	800bcb0 <SPI_EndRxTxTransaction+0xa0>
 800bc4e:	68a3      	ldr	r3, [r4, #8]
 800bc50:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800bc54:	d1fb      	bne.n	800bc4e <SPI_EndRxTxTransaction+0x3e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc56:	f7fb faf3 	bl	8007240 <HAL_GetTick>
 800bc5a:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 800bc5e:	f7fb faef 	bl	8007240 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc62:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc66:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc68:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800bc6c:	fb09 f303 	mul.w	r3, r9, r3
 800bc70:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 800bc72:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc74:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc76:	d130      	bne.n	800bcda <SPI_EndRxTxTransaction+0xca>
 800bc78:	68a3      	ldr	r3, [r4, #8]
 800bc7a:	061a      	lsls	r2, r3, #24
 800bc7c:	d4fc      	bmi.n	800bc78 <SPI_EndRxTxTransaction+0x68>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc7e:	463a      	mov	r2, r7
 800bc80:	4631      	mov	r1, r6
 800bc82:	4628      	mov	r0, r5
 800bc84:	f7ff ff58 	bl	800bb38 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800bc88:	bb58      	cbnz	r0, 800bce2 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800bc8a:	b003      	add	sp, #12
 800bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc90:	f7fb fad6 	bl	8007240 <HAL_GetTick>
 800bc94:	eba0 000b 	sub.w	r0, r0, fp
 800bc98:	4550      	cmp	r0, sl
 800bc9a:	d22a      	bcs.n	800bcf2 <SPI_EndRxTxTransaction+0xe2>
      if(count == 0U)
 800bc9c:	9a00      	ldr	r2, [sp, #0]
      count--;
 800bc9e:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bca0:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800bca2:	2a00      	cmp	r2, #0
      count--;
 800bca4:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800bca8:	bf08      	it	eq
 800bcaa:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800bcae:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800bcb6:	d1eb      	bne.n	800bc90 <SPI_EndRxTxTransaction+0x80>
 800bcb8:	e7cd      	b.n	800bc56 <SPI_EndRxTxTransaction+0x46>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bcba:	f7fb fac1 	bl	8007240 <HAL_GetTick>
 800bcbe:	eba0 0008 	sub.w	r0, r0, r8
 800bcc2:	4581      	cmp	r9, r0
 800bcc4:	d915      	bls.n	800bcf2 <SPI_EndRxTxTransaction+0xe2>
      if(count == 0U)
 800bcc6:	9a01      	ldr	r2, [sp, #4]
      count--;
 800bcc8:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcca:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800bccc:	2a00      	cmp	r2, #0
      count--;
 800bcce:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800bcd2:	bf08      	it	eq
 800bcd4:	f04f 0900 	moveq.w	r9, #0
      count--;
 800bcd8:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	061b      	lsls	r3, r3, #24
 800bcde:	d4ec      	bmi.n	800bcba <SPI_EndRxTxTransaction+0xaa>
 800bce0:	e7cd      	b.n	800bc7e <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bce2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800bce4:	f043 0320 	orr.w	r3, r3, #32
 800bce8:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bcea:	2003      	movs	r0, #3
}
 800bcec:	b003      	add	sp, #12
 800bcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcf2:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bcf6:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcf8:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bcfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bd00:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd02:	d016      	beq.n	800bd32 <SPI_EndRxTxTransaction+0x122>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd04:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800bd06:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800bd0a:	d107      	bne.n	800bd1c <SPI_EndRxTxTransaction+0x10c>
          SPI_RESET_CRC(hspi);
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bd1a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd22:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800bd24:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd26:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800bd2a:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd2e:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bd30:	e7db      	b.n	800bcea <SPI_EndRxTxTransaction+0xda>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd32:	68aa      	ldr	r2, [r5, #8]
 800bd34:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800bd38:	d002      	beq.n	800bd40 <SPI_EndRxTxTransaction+0x130>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd3a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800bd3e:	d1e1      	bne.n	800bd04 <SPI_EndRxTxTransaction+0xf4>
          __HAL_SPI_DISABLE(hspi);
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd46:	601a      	str	r2, [r3, #0]
 800bd48:	e7dc      	b.n	800bd04 <SPI_EndRxTxTransaction+0xf4>
 800bd4a:	bf00      	nop
 800bd4c:	200001e0 	.word	0x200001e0

0800bd50 <HAL_SPI_MspInit>:
}
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop

0800bd54 <HAL_SPI_Init>:
  if (hspi == NULL)
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d074      	beq.n	800be42 <HAL_SPI_Init+0xee>
{
 800bd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bd5e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d053      	beq.n	800be0c <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd64:	2300      	movs	r3, #0
 800bd66:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd6a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd6e:	2200      	movs	r2, #0
 800bd70:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd72:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d057      	beq.n	800be2a <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 800bd7a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd7c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800bd7e:	2302      	movs	r3, #2
 800bd80:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800bd84:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd86:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800bd8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd8e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd90:	d842      	bhi.n	800be18 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bd92:	d151      	bne.n	800be38 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bd94:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd96:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bd9a:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800bd9e:	6862      	ldr	r2, [r4, #4]
 800bda0:	68a3      	ldr	r3, [r4, #8]
 800bda2:	69a6      	ldr	r6, [r4, #24]
 800bda4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800bda8:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 800bdac:	431a      	orrs	r2, r3
 800bdae:	6923      	ldr	r3, [r4, #16]
 800bdb0:	f003 0302 	and.w	r3, r3, #2
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	6962      	ldr	r2, [r4, #20]
 800bdb8:	f002 0201 	and.w	r2, r2, #1
 800bdbc:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bdbe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdc0:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 800bdc4:	f003 0308 	and.w	r3, r3, #8
 800bdc8:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bdcc:	69e3      	ldr	r3, [r4, #28]
 800bdce:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 800bdd2:	6a23      	ldr	r3, [r4, #32]
 800bdd4:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 800bdd8:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 800bddc:	4313      	orrs	r3, r2
 800bdde:	ea43 0308 	orr.w	r3, r3, r8
 800bde2:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bde4:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bde6:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bde8:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bdec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bdee:	f000 0010 	and.w	r0, r0, #16
 800bdf2:	ea4e 0306 	orr.w	r3, lr, r6
 800bdf6:	4303      	orrs	r3, r0
 800bdf8:	ea43 030c 	orr.w	r3, r3, ip
 800bdfc:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bdfe:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800be00:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be02:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be04:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800be08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be0c:	6863      	ldr	r3, [r4, #4]
 800be0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800be12:	d0aa      	beq.n	800bd6a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800be14:	61e0      	str	r0, [r4, #28]
 800be16:	e7a8      	b.n	800bd6a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800be18:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 800be1c:	d113      	bne.n	800be46 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be1e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800be20:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be24:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800be28:	e7b9      	b.n	800bd9e <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 800be2a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800be2c:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800be30:	f7ff ff8e 	bl	800bd50 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be34:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800be36:	e7a0      	b.n	800bd7a <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800be38:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be3c:	2500      	movs	r5, #0
 800be3e:	62a5      	str	r5, [r4, #40]	@ 0x28
 800be40:	e7ad      	b.n	800bd9e <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 800be42:	2001      	movs	r0, #1
}
 800be44:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800be46:	f04f 0c00 	mov.w	ip, #0
 800be4a:	e7f7      	b.n	800be3c <HAL_SPI_Init+0xe8>

0800be4c <HAL_SPI_MspDeInit>:
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop

0800be50 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800be50:	b190      	cbz	r0, 800be78 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800be52:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800be54:	2302      	movs	r3, #2
{
 800be56:	b510      	push	{r4, lr}
  hspi->State = HAL_SPI_STATE_BUSY;
 800be58:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800be5c:	6813      	ldr	r3, [r2, #0]
 800be5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be62:	4604      	mov	r4, r0
 800be64:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800be66:	f7ff fff1 	bl	800be4c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be6a:	2000      	movs	r0, #0
 800be6c:	6620      	str	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 800be6e:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800be72:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
}
 800be76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800be78:	2001      	movs	r0, #1
}
 800be7a:	4770      	bx	lr

0800be7c <HAL_SPI_Transmit>:
{
 800be7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be80:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800be82:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 800be86:	2801      	cmp	r0, #1
{
 800be88:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800be8a:	d075      	beq.n	800bf78 <HAL_SPI_Transmit+0xfc>
 800be8c:	461d      	mov	r5, r3
 800be8e:	2301      	movs	r3, #1
 800be90:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800be94:	4688      	mov	r8, r1
 800be96:	4617      	mov	r7, r2
 800be98:	f7fb f9d2 	bl	8007240 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800be9c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800bea0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800bea2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800bea4:	b2d8      	uxtb	r0, r3
 800bea6:	d009      	beq.n	800bebc <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800bea8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800beaa:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800beac:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800beae:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800beb2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800beb6:	b002      	add	sp, #8
 800beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800bebc:	f1b8 0f00 	cmp.w	r8, #0
 800bec0:	d0f3      	beq.n	800beaa <HAL_SPI_Transmit+0x2e>
 800bec2:	2f00      	cmp	r7, #0
 800bec4:	d0f1      	beq.n	800beaa <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bec6:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800bec8:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800beca:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bece:	2200      	movs	r2, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bed0:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bed2:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bed6:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 800beda:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bede:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 800bee0:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800bee2:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bee4:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800bee6:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800beea:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 800beee:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bef0:	d06a      	beq.n	800bfc8 <HAL_SPI_Transmit+0x14c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	0652      	lsls	r2, r2, #25
 800bef6:	d403      	bmi.n	800bf00 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800befe:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf00:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf02:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf04:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800bf08:	d93a      	bls.n	800bf80 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf0a:	2900      	cmp	r1, #0
 800bf0c:	f000 8099 	beq.w	800c042 <HAL_SPI_Transmit+0x1c6>
 800bf10:	2f01      	cmp	r7, #1
 800bf12:	f000 8096 	beq.w	800c042 <HAL_SPI_Transmit+0x1c6>
    while (hspi->TxXferCount > 0U)
 800bf16:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800bf18:	b292      	uxth	r2, r2
 800bf1a:	b1ba      	cbz	r2, 800bf4c <HAL_SPI_Transmit+0xd0>
 800bf1c:	1c6a      	adds	r2, r5, #1
 800bf1e:	f040 8087 	bne.w	800c030 <HAL_SPI_Transmit+0x1b4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf22:	689a      	ldr	r2, [r3, #8]
 800bf24:	0797      	lsls	r7, r2, #30
 800bf26:	f140 80a4 	bpl.w	800c072 <HAL_SPI_Transmit+0x1f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf2a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bf2c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800bf30:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800bf32:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf36:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800bf38:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf3c:	fa1f fc8c 	uxth.w	ip, ip
 800bf40:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800bf44:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800bf46:	b292      	uxth	r2, r2
 800bf48:	2a00      	cmp	r2, #0
 800bf4a:	d1ea      	bne.n	800bf22 <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bf4c:	4632      	mov	r2, r6
 800bf4e:	4629      	mov	r1, r5
 800bf50:	4620      	mov	r0, r4
 800bf52:	f7ff fe5d 	bl	800bc10 <SPI_EndRxTxTransaction>
 800bf56:	b108      	cbz	r0, 800bf5c <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bf58:	2320      	movs	r3, #32
 800bf5a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bf5c:	68a3      	ldr	r3, [r4, #8]
 800bf5e:	b933      	cbnz	r3, 800bf6e <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf60:	6822      	ldr	r2, [r4, #0]
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	68d3      	ldr	r3, [r2, #12]
 800bf66:	9301      	str	r3, [sp, #4]
 800bf68:	6893      	ldr	r3, [r2, #8]
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf6e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800bf70:	3800      	subs	r0, #0
 800bf72:	bf18      	it	ne
 800bf74:	2001      	movne	r0, #1
error:
 800bf76:	e798      	b.n	800beaa <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800bf78:	2002      	movs	r0, #2
}
 800bf7a:	b002      	add	sp, #8
 800bf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf80:	2900      	cmp	r1, #0
 800bf82:	d068      	beq.n	800c056 <HAL_SPI_Transmit+0x1da>
 800bf84:	2f01      	cmp	r7, #1
 800bf86:	d066      	beq.n	800c056 <HAL_SPI_Transmit+0x1da>
    while (hspi->TxXferCount > 0U)
 800bf88:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d0dd      	beq.n	800bf4c <HAL_SPI_Transmit+0xd0>
 800bf90:	1c68      	adds	r0, r5, #1
 800bf92:	d012      	beq.n	800bfba <HAL_SPI_Transmit+0x13e>
 800bf94:	e033      	b.n	800bffe <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 800bf96:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf98:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf9e:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 800bfa0:	d970      	bls.n	800c084 <HAL_SPI_Transmit+0x208>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfa2:	f831 3b02 	ldrh.w	r3, [r1], #2
 800bfa6:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800bfa8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfaa:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800bfac:	3b02      	subs	r3, #2
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800bfb2:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800bfb4:	b289      	uxth	r1, r1
 800bfb6:	2900      	cmp	r1, #0
 800bfb8:	d0c8      	beq.n	800bf4c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfba:	6822      	ldr	r2, [r4, #0]
 800bfbc:	6893      	ldr	r3, [r2, #8]
 800bfbe:	0799      	lsls	r1, r3, #30
 800bfc0:	d4e9      	bmi.n	800bf96 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfc2:	f7fb f93d 	bl	8007240 <HAL_GetTick>
 800bfc6:	e7f4      	b.n	800bfb2 <HAL_SPI_Transmit+0x136>
    __HAL_SPI_DISABLE(hspi);
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bfce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	e78b      	b.n	800bef2 <HAL_SPI_Transmit+0x76>
        if (hspi->TxXferCount > 1U)
 800bfda:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfdc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800bfde:	b292      	uxth	r2, r2
 800bfe0:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfe2:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 800bfe4:	d963      	bls.n	800c0ae <HAL_SPI_Transmit+0x232>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfe6:	f831 2b02 	ldrh.w	r2, [r1], #2
 800bfea:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800bfec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfee:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800bff0:	3b02      	subs	r3, #2
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800bff6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d0a6      	beq.n	800bf4c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	0792      	lsls	r2, r2, #30
 800c004:	d4e9      	bmi.n	800bfda <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c006:	f7fb f91b 	bl	8007240 <HAL_GetTick>
 800c00a:	1b83      	subs	r3, r0, r6
 800c00c:	42ab      	cmp	r3, r5
 800c00e:	d3f2      	bcc.n	800bff6 <HAL_SPI_Transmit+0x17a>
          errorcode = HAL_TIMEOUT;
 800c010:	2003      	movs	r0, #3
 800c012:	e74a      	b.n	800beaa <HAL_SPI_Transmit+0x2e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c014:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c016:	f832 3b02 	ldrh.w	r3, [r2], #2
 800c01a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800c01c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c01e:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c020:	3b01      	subs	r3, #1
 800c022:	b29b      	uxth	r3, r3
 800c024:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800c026:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c028:	b29b      	uxth	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d08e      	beq.n	800bf4c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c02e:	6820      	ldr	r0, [r4, #0]
 800c030:	6883      	ldr	r3, [r0, #8]
 800c032:	0799      	lsls	r1, r3, #30
 800c034:	d4ee      	bmi.n	800c014 <HAL_SPI_Transmit+0x198>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c036:	f7fb f903 	bl	8007240 <HAL_GetTick>
 800c03a:	1b83      	subs	r3, r0, r6
 800c03c:	42ab      	cmp	r3, r5
 800c03e:	d3f2      	bcc.n	800c026 <HAL_SPI_Transmit+0x1aa>
 800c040:	e7e6      	b.n	800c010 <HAL_SPI_Transmit+0x194>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c042:	4641      	mov	r1, r8
 800c044:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c048:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800c04a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c04c:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800c04e:	3a01      	subs	r2, #1
 800c050:	b292      	uxth	r2, r2
 800c052:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 800c054:	e75f      	b.n	800bf16 <HAL_SPI_Transmit+0x9a>
      if (hspi->TxXferCount > 1U)
 800c056:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800c058:	b292      	uxth	r2, r2
 800c05a:	2a01      	cmp	r2, #1
 800c05c:	d91c      	bls.n	800c098 <HAL_SPI_Transmit+0x21c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c05e:	4641      	mov	r1, r8
 800c060:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c064:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800c066:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c068:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c06a:	3b02      	subs	r3, #2
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c070:	e78a      	b.n	800bf88 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c072:	f7fb f8e5 	bl	8007240 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800c076:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c078:	b29b      	uxth	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f43f af66 	beq.w	800bf4c <HAL_SPI_Transmit+0xd0>
 800c080:	6823      	ldr	r3, [r4, #0]
 800c082:	e74e      	b.n	800bf22 <HAL_SPI_Transmit+0xa6>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c084:	7803      	ldrb	r3, [r0, #0]
 800c086:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800c088:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c08a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c08c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c08e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c090:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c092:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c094:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c096:	e78c      	b.n	800bfb2 <HAL_SPI_Transmit+0x136>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c098:	f898 2000 	ldrb.w	r2, [r8]
 800c09c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800c09e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr ++;
 800c0a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c0a2:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800c0a4:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800c0a6:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800c0a8:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c0aa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c0ac:	e76c      	b.n	800bf88 <HAL_SPI_Transmit+0x10c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c0ae:	7802      	ldrb	r2, [r0, #0]
 800c0b0:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800c0b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c0b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c0b6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c0b8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c0ba:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c0bc:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c0be:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c0c0:	e799      	b.n	800bff6 <HAL_SPI_Transmit+0x17a>
 800c0c2:	bf00      	nop

0800c0c4 <HAL_SPI_TransmitReceive>:
{
 800c0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800c0ca:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
{
 800c0ce:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 800c0d0:	2801      	cmp	r0, #1
 800c0d2:	f000 809e 	beq.w	800c212 <HAL_SPI_TransmitReceive+0x14e>
 800c0d6:	461f      	mov	r7, r3
 800c0d8:	2301      	movs	r3, #1
 800c0da:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800c0de:	4689      	mov	r9, r1
 800c0e0:	4690      	mov	r8, r2
 800c0e2:	f7fb f8ad 	bl	8007240 <HAL_GetTick>
 800c0e6:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800c0e8:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 800c0ec:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c0ee:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800c0f0:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c0f2:	d010      	beq.n	800c116 <HAL_SPI_TransmitReceive+0x52>
 800c0f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c0f8:	d008      	beq.n	800c10c <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800c0fa:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c0fc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c0fe:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c100:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800c104:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800c108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c10c:	68a2      	ldr	r2, [r4, #8]
 800c10e:	2a00      	cmp	r2, #0
 800c110:	d1f3      	bne.n	800c0fa <HAL_SPI_TransmitReceive+0x36>
 800c112:	2904      	cmp	r1, #4
 800c114:	d1f1      	bne.n	800c0fa <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c116:	f1b9 0f00 	cmp.w	r9, #0
 800c11a:	f000 80d4 	beq.w	800c2c6 <HAL_SPI_TransmitReceive+0x202>
 800c11e:	f1b8 0f00 	cmp.w	r8, #0
 800c122:	f000 80d0 	beq.w	800c2c6 <HAL_SPI_TransmitReceive+0x202>
 800c126:	2f00      	cmp	r7, #0
 800c128:	f000 80cd 	beq.w	800c2c6 <HAL_SPI_TransmitReceive+0x202>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c12c:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c130:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c132:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c136:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c138:	bf1c      	itt	ne
 800c13a:	2205      	movne	r2, #5
 800c13c:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c140:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c142:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c146:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800c148:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 800c14c:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c150:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 800c152:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c156:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c15a:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c15c:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c15e:	d85b      	bhi.n	800c218 <HAL_SPI_TransmitReceive+0x154>
 800c160:	2f01      	cmp	r7, #1
 800c162:	f000 8124 	beq.w	800c3ae <HAL_SPI_TransmitReceive+0x2ea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c166:	6851      	ldr	r1, [r2, #4]
 800c168:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800c16c:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c16e:	6811      	ldr	r1, [r2, #0]
 800c170:	0649      	lsls	r1, r1, #25
 800c172:	d403      	bmi.n	800c17c <HAL_SPI_TransmitReceive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 800c174:	6811      	ldr	r1, [r2, #0]
 800c176:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c17a:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c17c:	b96b      	cbnz	r3, 800c19a <HAL_SPI_TransmitReceive+0xd6>
      if (hspi->TxXferCount > 1U)
 800c17e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c180:	b29b      	uxth	r3, r3
 800c182:	2b01      	cmp	r3, #1
 800c184:	f240 80fd 	bls.w	800c382 <HAL_SPI_TransmitReceive+0x2be>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c188:	4649      	mov	r1, r9
 800c18a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c18e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 800c190:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c192:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c194:	3b02      	subs	r3, #2
 800c196:	b29b      	uxth	r3, r3
 800c198:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800c19a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c19c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	b92b      	cbnz	r3, 800c1ae <HAL_SPI_TransmitReceive+0xea>
 800c1a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 8082 	beq.w	800c2b2 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c1ae:	6821      	ldr	r1, [r4, #0]
 800c1b0:	688b      	ldr	r3, [r1, #8]
 800c1b2:	079a      	lsls	r2, r3, #30
 800c1b4:	d506      	bpl.n	800c1c4 <HAL_SPI_TransmitReceive+0x100>
 800c1b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	b11b      	cbz	r3, 800c1c4 <HAL_SPI_TransmitReceive+0x100>
 800c1bc:	2f00      	cmp	r7, #0
 800c1be:	f040 8095 	bne.w	800c2ec <HAL_SPI_TransmitReceive+0x228>
        txallowed = 0U;
 800c1c2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c1c4:	688b      	ldr	r3, [r1, #8]
 800c1c6:	f013 0301 	ands.w	r3, r3, #1
 800c1ca:	d019      	beq.n	800c200 <HAL_SPI_TransmitReceive+0x13c>
 800c1cc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c1d0:	b292      	uxth	r2, r2
 800c1d2:	b1aa      	cbz	r2, 800c200 <HAL_SPI_TransmitReceive+0x13c>
        if (hspi->RxXferCount > 1U)
 800c1d4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1d8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 800c1da:	b280      	uxth	r0, r0
 800c1dc:	2801      	cmp	r0, #1
 800c1de:	d979      	bls.n	800c2d4 <HAL_SPI_TransmitReceive+0x210>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1e0:	68c8      	ldr	r0, [r1, #12]
 800c1e2:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1e6:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800c1e8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c1ec:	3a02      	subs	r2, #2
 800c1ee:	b292      	uxth	r2, r2
 800c1f0:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800c1f4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c1f8:	b292      	uxth	r2, r2
 800c1fa:	2a01      	cmp	r2, #1
 800c1fc:	d965      	bls.n	800c2ca <HAL_SPI_TransmitReceive+0x206>
        txallowed = 1U;
 800c1fe:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c200:	f7fb f81e 	bl	8007240 <HAL_GetTick>
 800c204:	1b40      	subs	r0, r0, r5
 800c206:	42b0      	cmp	r0, r6
 800c208:	d3c8      	bcc.n	800c19c <HAL_SPI_TransmitReceive+0xd8>
 800c20a:	1c73      	adds	r3, r6, #1
 800c20c:	d0c6      	beq.n	800c19c <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 800c20e:	2003      	movs	r0, #3
 800c210:	e774      	b.n	800c0fc <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800c212:	2002      	movs	r0, #2
}
 800c214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c218:	6851      	ldr	r1, [r2, #4]
 800c21a:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800c21e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c220:	6811      	ldr	r1, [r2, #0]
 800c222:	0648      	lsls	r0, r1, #25
 800c224:	d403      	bmi.n	800c22e <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 800c226:	6811      	ldr	r1, [r2, #0]
 800c228:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c22c:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f040 8082 	bne.w	800c338 <HAL_SPI_TransmitReceive+0x274>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c234:	4649      	mov	r1, r9
 800c236:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c23a:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800c23c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c23e:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800c240:	3b01      	subs	r3, #1
 800c242:	b29b      	uxth	r3, r3
 800c244:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c246:	1c73      	adds	r3, r6, #1
{
 800c248:	f04f 0701 	mov.w	r7, #1
 800c24c:	d028      	beq.n	800c2a0 <HAL_SPI_TransmitReceive+0x1dc>
 800c24e:	e06e      	b.n	800c32e <HAL_SPI_TransmitReceive+0x26a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c250:	6822      	ldr	r2, [r4, #0]
 800c252:	6893      	ldr	r3, [r2, #8]
 800c254:	0798      	lsls	r0, r3, #30
 800c256:	d50d      	bpl.n	800c274 <HAL_SPI_TransmitReceive+0x1b0>
 800c258:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	b153      	cbz	r3, 800c274 <HAL_SPI_TransmitReceive+0x1b0>
 800c25e:	b147      	cbz	r7, 800c272 <HAL_SPI_TransmitReceive+0x1ae>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c260:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c262:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c266:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c268:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c26a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c26c:	3b01      	subs	r3, #1
 800c26e:	b29b      	uxth	r3, r3
 800c270:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 800c272:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c274:	6893      	ldr	r3, [r2, #8]
 800c276:	f013 0301 	ands.w	r3, r3, #1
 800c27a:	d00f      	beq.n	800c29c <HAL_SPI_TransmitReceive+0x1d8>
 800c27c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800c280:	b289      	uxth	r1, r1
 800c282:	b159      	cbz	r1, 800c29c <HAL_SPI_TransmitReceive+0x1d8>
        txallowed = 1U;
 800c284:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c286:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c288:	68d2      	ldr	r2, [r2, #12]
 800c28a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c28e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c290:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c294:	3b01      	subs	r3, #1
 800c296:	b29b      	uxth	r3, r3
 800c298:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c29c:	f7fa ffd0 	bl	8007240 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2a0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1d3      	bne.n	800c250 <HAL_SPI_TransmitReceive+0x18c>
 800c2a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1ce      	bne.n	800c250 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f7ff fcaa 	bl	800bc10 <SPI_EndRxTxTransaction>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f43f af1d 	beq.w	800c0fc <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2c2:	2320      	movs	r3, #32
 800c2c4:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	e718      	b.n	800c0fc <HAL_SPI_TransmitReceive+0x38>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c2ca:	684a      	ldr	r2, [r1, #4]
 800c2cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c2d0:	604a      	str	r2, [r1, #4]
 800c2d2:	e794      	b.n	800c1fe <HAL_SPI_TransmitReceive+0x13a>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c2d4:	7b09      	ldrb	r1, [r1, #12]
 800c2d6:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 800c2d8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c2da:	3201      	adds	r2, #1
 800c2dc:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 800c2de:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c2e2:	3a01      	subs	r2, #1
 800c2e4:	b292      	uxth	r2, r2
 800c2e6:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 800c2ea:	e788      	b.n	800c1fe <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 800c2ec:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800c2f0:	b292      	uxth	r2, r2
 800c2f2:	2a01      	cmp	r2, #1
 800c2f4:	d950      	bls.n	800c398 <HAL_SPI_TransmitReceive+0x2d4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2f6:	f833 2b02 	ldrh.w	r2, [r3], #2
 800c2fa:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2fc:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c2fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c300:	3b02      	subs	r3, #2
 800c302:	b29b      	uxth	r3, r3
 800c304:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c306:	e75c      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0xfe>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c308:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d0cf      	beq.n	800c2b2 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c312:	6822      	ldr	r2, [r4, #0]
 800c314:	6893      	ldr	r3, [r2, #8]
 800c316:	0799      	lsls	r1, r3, #30
 800c318:	d423      	bmi.n	800c362 <HAL_SPI_TransmitReceive+0x29e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c31a:	6893      	ldr	r3, [r2, #8]
 800c31c:	f013 0301 	ands.w	r3, r3, #1
 800c320:	d10d      	bne.n	800c33e <HAL_SPI_TransmitReceive+0x27a>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c322:	f7fa ff8d 	bl	8007240 <HAL_GetTick>
 800c326:	1b40      	subs	r0, r0, r5
 800c328:	42b0      	cmp	r0, r6
 800c32a:	f4bf af70 	bcs.w	800c20e <HAL_SPI_TransmitReceive+0x14a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c32e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c330:	b29b      	uxth	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1ed      	bne.n	800c312 <HAL_SPI_TransmitReceive+0x24e>
 800c336:	e7e7      	b.n	800c308 <HAL_SPI_TransmitReceive+0x244>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c338:	2f01      	cmp	r7, #1
 800c33a:	d184      	bne.n	800c246 <HAL_SPI_TransmitReceive+0x182>
 800c33c:	e77a      	b.n	800c234 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c33e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800c342:	b289      	uxth	r1, r1
 800c344:	2900      	cmp	r1, #0
 800c346:	d0ec      	beq.n	800c322 <HAL_SPI_TransmitReceive+0x25e>
        txallowed = 1U;
 800c348:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c34a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c34c:	68d2      	ldr	r2, [r2, #12]
 800c34e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c352:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c354:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c358:	3b01      	subs	r3, #1
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800c360:	e7df      	b.n	800c322 <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c362:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c364:	b29b      	uxth	r3, r3
 800c366:	2b00      	cmp	r3, #0
 800c368:	d0d7      	beq.n	800c31a <HAL_SPI_TransmitReceive+0x256>
 800c36a:	b147      	cbz	r7, 800c37e <HAL_SPI_TransmitReceive+0x2ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c36c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c36e:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c372:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c374:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c376:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c378:	3b01      	subs	r3, #1
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800c37e:	2700      	movs	r7, #0
 800c380:	e7cb      	b.n	800c31a <HAL_SPI_TransmitReceive+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c382:	f899 3000 	ldrb.w	r3, [r9]
 800c386:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800c388:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800c38a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c38c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800c38e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800c390:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800c392:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c394:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c396:	e700      	b.n	800c19a <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800c39c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c39e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c3a0:	6821      	ldr	r1, [r4, #0]
          hspi->TxXferCount--;
 800c3a2:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c3a4:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c3a6:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c3a8:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c3aa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c3ac:	e709      	b.n	800c1c2 <HAL_SPI_TransmitReceive+0xfe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c3ae:	6853      	ldr	r3, [r2, #4]
 800c3b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c3b4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3b6:	6813      	ldr	r3, [r2, #0]
 800c3b8:	0659      	lsls	r1, r3, #25
 800c3ba:	f53f aee0 	bmi.w	800c17e <HAL_SPI_TransmitReceive+0xba>
    __HAL_SPI_ENABLE(hspi);
 800c3be:	6813      	ldr	r3, [r2, #0]
 800c3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3c4:	6013      	str	r3, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3c6:	e6da      	b.n	800c17e <HAL_SPI_TransmitReceive+0xba>

0800c3c8 <HAL_SPI_Receive>:
{
 800c3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3cc:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c3ce:	6843      	ldr	r3, [r0, #4]
 800c3d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4617      	mov	r7, r2
 800c3da:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c3dc:	f000 8090 	beq.w	800c500 <HAL_SPI_Receive+0x138>
  __HAL_LOCK(hspi);
 800c3e0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	f000 8098 	beq.w	800c51a <HAL_SPI_Receive+0x152>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800c3f0:	f7fa ff26 	bl	8007240 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800c3f4:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800c3f8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800c3fa:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800c3fc:	b2d8      	uxtb	r0, r3
 800c3fe:	d009      	beq.n	800c414 <HAL_SPI_Receive+0x4c>
    errorcode = HAL_BUSY;
 800c400:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c402:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c404:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c406:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800c40a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800c40e:	b004      	add	sp, #16
 800c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800c414:	f1b8 0f00 	cmp.w	r8, #0
 800c418:	d0f3      	beq.n	800c402 <HAL_SPI_Receive+0x3a>
 800c41a:	2f00      	cmp	r7, #0
 800c41c:	d0f1      	beq.n	800c402 <HAL_SPI_Receive+0x3a>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c41e:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c420:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c422:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c426:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c428:	2004      	movs	r0, #4
 800c42a:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c42e:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c432:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxXferCount = Size;
 800c434:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800c438:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800c43a:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c43e:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800c440:	87a3      	strh	r3, [r4, #60]	@ 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c442:	6848      	ldr	r0, [r1, #4]
  hspi->RxXferSize  = Size;
 800c444:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c448:	460b      	mov	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c44a:	f240 80dc 	bls.w	800c606 <HAL_SPI_Receive+0x23e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c44e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800c452:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c454:	68a0      	ldr	r0, [r4, #8]
 800c456:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c45a:	f000 80e0 	beq.w	800c61e <HAL_SPI_Receive+0x256>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c45e:	6808      	ldr	r0, [r1, #0]
 800c460:	0640      	lsls	r0, r0, #25
 800c462:	d45e      	bmi.n	800c522 <HAL_SPI_Receive+0x15a>
    __HAL_SPI_ENABLE(hspi);
 800c464:	6808      	ldr	r0, [r1, #0]
 800c466:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800c46a:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c46c:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800c470:	d857      	bhi.n	800c522 <HAL_SPI_Receive+0x15a>
    while (hspi->RxXferCount > 0U)
 800c472:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c476:	b292      	uxth	r2, r2
 800c478:	b1fa      	cbz	r2, 800c4ba <HAL_SPI_Receive+0xf2>
 800c47a:	1c68      	adds	r0, r5, #1
 800c47c:	d013      	beq.n	800c4a6 <HAL_SPI_Receive+0xde>
 800c47e:	e0b8      	b.n	800c5f2 <HAL_SPI_Receive+0x22a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c480:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c482:	7b1b      	ldrb	r3, [r3, #12]
 800c484:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c486:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c48a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c48c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c490:	fa1f fc8c 	uxth.w	ip, ip
 800c494:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c498:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c49c:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 800c49e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4a0:	6422      	str	r2, [r4, #64]	@ 0x40
    while (hspi->RxXferCount > 0U)
 800c4a2:	b153      	cbz	r3, 800c4ba <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	689a      	ldr	r2, [r3, #8]
 800c4a8:	07d1      	lsls	r1, r2, #31
 800c4aa:	d4e9      	bmi.n	800c480 <HAL_SPI_Receive+0xb8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4ac:	f7fa fec8 	bl	8007240 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800c4b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1f4      	bne.n	800c4a4 <HAL_SPI_Receive+0xdc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4ba:	6863      	ldr	r3, [r4, #4]
 800c4bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c4c0:	f000 80ba 	beq.w	800c638 <HAL_SPI_Receive+0x270>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c4c4:	f7fa febc 	bl	8007240 <HAL_GetTick>
 800c4c8:	19af      	adds	r7, r5, r6
 800c4ca:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800c4cc:	f7fa feb8 	bl	8007240 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c4d0:	4b80      	ldr	r3, [pc, #512]	@ (800c6d4 <HAL_SPI_Receive+0x30c>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4d2:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800c4da:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c4dc:	fb07 f303 	mul.w	r3, r7, r3
 800c4e0:	1c68      	adds	r0, r5, #1
 800c4e2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4e4:	d16e      	bne.n	800c5c4 <HAL_SPI_Receive+0x1fc>
 800c4e6:	6893      	ldr	r3, [r2, #8]
 800c4e8:	0619      	lsls	r1, r3, #24
 800c4ea:	d4fc      	bmi.n	800c4e6 <HAL_SPI_Receive+0x11e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4ec:	6863      	ldr	r3, [r4, #4]
 800c4ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c4f2:	f000 80af 	beq.w	800c654 <HAL_SPI_Receive+0x28c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4f6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800c4f8:	3800      	subs	r0, #0
 800c4fa:	bf18      	it	ne
 800c4fc:	2001      	movne	r0, #1
error :
 800c4fe:	e780      	b.n	800c402 <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c500:	6883      	ldr	r3, [r0, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	f47f af6c 	bne.w	800c3e0 <HAL_SPI_Receive+0x18>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c508:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c50a:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c50c:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c50e:	f880 505d 	strb.w	r5, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c512:	460a      	mov	r2, r1
 800c514:	f7ff fdd6 	bl	800c0c4 <HAL_SPI_TransmitReceive>
 800c518:	e779      	b.n	800c40e <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 800c51a:	2002      	movs	r0, #2
}
 800c51c:	b004      	add	sp, #16
 800c51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (hspi->RxXferCount > 0U)
 800c522:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c526:	b292      	uxth	r2, r2
 800c528:	2a00      	cmp	r2, #0
 800c52a:	d0c6      	beq.n	800c4ba <HAL_SPI_Receive+0xf2>
 800c52c:	1c6a      	adds	r2, r5, #1
 800c52e:	d131      	bne.n	800c594 <HAL_SPI_Receive+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c530:	688b      	ldr	r3, [r1, #8]
 800c532:	07df      	lsls	r7, r3, #31
 800c534:	d514      	bpl.n	800c560 <HAL_SPI_Receive+0x198>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c536:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c538:	68ca      	ldr	r2, [r1, #12]
 800c53a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 800c53e:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c542:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c544:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c548:	fa1f fc8c 	uxth.w	ip, ip
 800c54c:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c550:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c554:	b29b      	uxth	r3, r3
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0af      	beq.n	800c4ba <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c55a:	688b      	ldr	r3, [r1, #8]
 800c55c:	07df      	lsls	r7, r3, #31
 800c55e:	d4ea      	bmi.n	800c536 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c560:	f7fa fe6e 	bl	8007240 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800c564:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c568:	b29b      	uxth	r3, r3
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d0a5      	beq.n	800c4ba <HAL_SPI_Receive+0xf2>
 800c56e:	6821      	ldr	r1, [r4, #0]
 800c570:	e7de      	b.n	800c530 <HAL_SPI_Receive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c572:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800c57a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c57e:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c580:	3b01      	subs	r3, #1
 800c582:	b29b      	uxth	r3, r3
 800c584:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c588:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d093      	beq.n	800c4ba <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	689a      	ldr	r2, [r3, #8]
 800c596:	07d7      	lsls	r7, r2, #31
 800c598:	d4eb      	bmi.n	800c572 <HAL_SPI_Receive+0x1aa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c59a:	f7fa fe51 	bl	8007240 <HAL_GetTick>
 800c59e:	1b83      	subs	r3, r0, r6
 800c5a0:	42ab      	cmp	r3, r5
 800c5a2:	d22e      	bcs.n	800c602 <HAL_SPI_Receive+0x23a>
 800c5a4:	e7f0      	b.n	800c588 <HAL_SPI_Receive+0x1c0>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c5a6:	f7fa fe4b 	bl	8007240 <HAL_GetTick>
 800c5aa:	eba0 0008 	sub.w	r0, r0, r8
 800c5ae:	42b8      	cmp	r0, r7
 800c5b0:	d267      	bcs.n	800c682 <HAL_SPI_Receive+0x2ba>
      if(count == 0U)
 800c5b2:	9a03      	ldr	r2, [sp, #12]
      count--;
 800c5b4:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800c5b6:	2a00      	cmp	r2, #0
      count--;
 800c5b8:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c5bc:	6822      	ldr	r2, [r4, #0]
      count--;
 800c5be:	9303      	str	r3, [sp, #12]
        tmp_timeout = 0U;
 800c5c0:	bf08      	it	eq
 800c5c2:	2700      	moveq	r7, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c5c4:	6893      	ldr	r3, [r2, #8]
 800c5c6:	061b      	lsls	r3, r3, #24
 800c5c8:	d4ed      	bmi.n	800c5a6 <HAL_SPI_Receive+0x1de>
 800c5ca:	e78f      	b.n	800c4ec <HAL_SPI_Receive+0x124>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c5cc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c5ce:	7b1b      	ldrb	r3, [r3, #12]
 800c5d0:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c5d2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5d6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c5d8:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5da:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800c5dc:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5de:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c5e0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c5e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f43f af65 	beq.w	800c4ba <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	689a      	ldr	r2, [r3, #8]
 800c5f4:	07d2      	lsls	r2, r2, #31
 800c5f6:	d4e9      	bmi.n	800c5cc <HAL_SPI_Receive+0x204>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5f8:	f7fa fe22 	bl	8007240 <HAL_GetTick>
 800c5fc:	1b83      	subs	r3, r0, r6
 800c5fe:	42ab      	cmp	r3, r5
 800c600:	d3f0      	bcc.n	800c5e4 <HAL_SPI_Receive+0x21c>
          errorcode = HAL_TIMEOUT;
 800c602:	2003      	movs	r0, #3
 800c604:	e6fd      	b.n	800c402 <HAL_SPI_Receive+0x3a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c606:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800c60a:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c60c:	68a0      	ldr	r0, [r4, #8]
 800c60e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c612:	d004      	beq.n	800c61e <HAL_SPI_Receive+0x256>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c614:	6808      	ldr	r0, [r1, #0]
 800c616:	0647      	lsls	r7, r0, #25
 800c618:	f57f af24 	bpl.w	800c464 <HAL_SPI_Receive+0x9c>
 800c61c:	e729      	b.n	800c472 <HAL_SPI_Receive+0xaa>
    __HAL_SPI_DISABLE(hspi);
 800c61e:	6808      	ldr	r0, [r1, #0]
 800c620:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800c624:	6008      	str	r0, [r1, #0]
    SPI_1LINE_RX(hspi);
 800c626:	6808      	ldr	r0, [r1, #0]
 800c628:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 800c62c:	6008      	str	r0, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c62e:	6808      	ldr	r0, [r1, #0]
 800c630:	0640      	lsls	r0, r0, #25
 800c632:	f53f af1b 	bmi.w	800c46c <HAL_SPI_Receive+0xa4>
 800c636:	e715      	b.n	800c464 <HAL_SPI_Receive+0x9c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c638:	68a3      	ldr	r3, [r4, #8]
 800c63a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c63e:	d003      	beq.n	800c648 <HAL_SPI_Receive+0x280>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c644:	f47f af3e 	bne.w	800c4c4 <HAL_SPI_Receive+0xfc>
    __HAL_SPI_DISABLE(hspi);
 800c648:	6822      	ldr	r2, [r4, #0]
 800c64a:	6813      	ldr	r3, [r2, #0]
 800c64c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c650:	6013      	str	r3, [r2, #0]
 800c652:	e737      	b.n	800c4c4 <HAL_SPI_Receive+0xfc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c654:	68a3      	ldr	r3, [r4, #8]
 800c656:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c65a:	d003      	beq.n	800c664 <HAL_SPI_Receive+0x29c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c65c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c660:	f47f af49 	bne.w	800c4f6 <HAL_SPI_Receive+0x12e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c664:	4632      	mov	r2, r6
 800c666:	4629      	mov	r1, r5
 800c668:	4620      	mov	r0, r4
 800c66a:	f7ff fa65 	bl	800bb38 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c66e:	2800      	cmp	r0, #0
 800c670:	f43f af41 	beq.w	800c4f6 <HAL_SPI_Receive+0x12e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c674:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800c676:	f043 0320 	orr.w	r3, r3, #32
 800c67a:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c67c:	2320      	movs	r3, #32
 800c67e:	6623      	str	r3, [r4, #96]	@ 0x60
 800c680:	e739      	b.n	800c4f6 <HAL_SPI_Receive+0x12e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c682:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c686:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c688:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c68c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c690:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c692:	d013      	beq.n	800c6bc <HAL_SPI_Receive+0x2f4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c694:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c696:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800c69a:	d107      	bne.n	800c6ac <HAL_SPI_Receive+0x2e4>
          SPI_RESET_CRC(hspi);
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c6aa:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6b2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800c6b4:	f043 0320 	orr.w	r3, r3, #32
 800c6b8:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c6ba:	e7df      	b.n	800c67c <HAL_SPI_Receive+0x2b4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6bc:	68a2      	ldr	r2, [r4, #8]
 800c6be:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800c6c2:	d002      	beq.n	800c6ca <HAL_SPI_Receive+0x302>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6c4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c6c8:	d1e4      	bne.n	800c694 <HAL_SPI_Receive+0x2cc>
          __HAL_SPI_DISABLE(hspi);
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	e7df      	b.n	800c694 <HAL_SPI_Receive+0x2cc>
 800c6d4:	200001e0 	.word	0x200001e0

0800c6d8 <HAL_SPI_GetState>:
  return hspi->State;
 800c6d8:	f890 005d 	ldrb.w	r0, [r0, #93]	@ 0x5d
}
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop

0800c6e0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop

0800c6e4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	f000 8084 	beq.w	800c7f2 <HAL_TIM_Base_Init+0x10e>
{
 800c6ea:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c6ec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d070      	beq.n	800c7dc <HAL_TIM_Base_Init+0xf8>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6fa:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6fc:	493e      	ldr	r1, [pc, #248]	@ (800c7f8 <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c6fe:	2302      	movs	r3, #2
 800c700:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c704:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800c706:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c708:	d054      	beq.n	800c7b4 <HAL_TIM_Base_Init+0xd0>
 800c70a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800c70e:	d024      	beq.n	800c75a <HAL_TIM_Base_Init+0x76>
 800c710:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 800c714:	428a      	cmp	r2, r1
 800c716:	d020      	beq.n	800c75a <HAL_TIM_Base_Init+0x76>
 800c718:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c71c:	428a      	cmp	r2, r1
 800c71e:	d01c      	beq.n	800c75a <HAL_TIM_Base_Init+0x76>
 800c720:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c724:	428a      	cmp	r2, r1
 800c726:	d018      	beq.n	800c75a <HAL_TIM_Base_Init+0x76>
 800c728:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 800c72c:	428a      	cmp	r2, r1
 800c72e:	d041      	beq.n	800c7b4 <HAL_TIM_Base_Init+0xd0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c730:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 800c734:	428a      	cmp	r2, r1
 800c736:	d056      	beq.n	800c7e6 <HAL_TIM_Base_Init+0x102>
 800c738:	4930      	ldr	r1, [pc, #192]	@ (800c7fc <HAL_TIM_Base_Init+0x118>)
 800c73a:	428a      	cmp	r2, r1
 800c73c:	d053      	beq.n	800c7e6 <HAL_TIM_Base_Init+0x102>
 800c73e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c742:	428a      	cmp	r2, r1
 800c744:	d04f      	beq.n	800c7e6 <HAL_TIM_Base_Init+0x102>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c746:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c748:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c74a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c74c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c750:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800c752:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c754:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c756:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c758:	e010      	b.n	800c77c <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 800c75a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c75c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c75e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c762:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800c764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c768:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c76a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c76c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c770:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c772:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800c774:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800c776:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c778:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c77a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c77c:	2301      	movs	r3, #1
 800c77e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c780:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c784:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c788:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c78c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c790:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c79c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c7a0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c7a4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c7a8:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c7ac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800c7b0:	2000      	movs	r0, #0
}
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800c7b4:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7b6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c7bc:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7c2:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7c4:	69a1      	ldr	r1, [r4, #24]
 800c7c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7ca:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800c7cc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c7d2:	6863      	ldr	r3, [r4, #4]
 800c7d4:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800c7d6:	6963      	ldr	r3, [r4, #20]
 800c7d8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7da:	e7cf      	b.n	800c77c <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 800c7dc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c7e0:	f7ff ff7e 	bl	800c6e0 <HAL_TIM_Base_MspInit>
 800c7e4:	e789      	b.n	800c6fa <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7e6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7e8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7ee:	4303      	orrs	r3, r0
 800c7f0:	e7e9      	b.n	800c7c6 <HAL_TIM_Base_Init+0xe2>
    return HAL_ERROR;
 800c7f2:	2001      	movs	r0, #1
}
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	40012c00 	.word	0x40012c00
 800c7fc:	40014400 	.word	0x40014400

0800c800 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c800:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c804:	2b01      	cmp	r3, #1
 800c806:	d126      	bne.n	800c856 <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c808:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c80a:	4919      	ldr	r1, [pc, #100]	@ (800c870 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c80c:	2202      	movs	r2, #2
 800c80e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c812:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c814:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c816:	f042 0201 	orr.w	r2, r2, #1
 800c81a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c81c:	d01d      	beq.n	800c85a <HAL_TIM_Base_Start_IT+0x5a>
 800c81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c822:	d01a      	beq.n	800c85a <HAL_TIM_Base_Start_IT+0x5a>
 800c824:	4a13      	ldr	r2, [pc, #76]	@ (800c874 <HAL_TIM_Base_Start_IT+0x74>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d017      	beq.n	800c85a <HAL_TIM_Base_Start_IT+0x5a>
 800c82a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c82e:	4293      	cmp	r3, r2
 800c830:	d013      	beq.n	800c85a <HAL_TIM_Base_Start_IT+0x5a>
 800c832:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c836:	4293      	cmp	r3, r2
 800c838:	d00f      	beq.n	800c85a <HAL_TIM_Base_Start_IT+0x5a>
 800c83a:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c83e:	4293      	cmp	r3, r2
 800c840:	d00b      	beq.n	800c85a <HAL_TIM_Base_Start_IT+0x5a>
 800c842:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800c846:	4293      	cmp	r3, r2
 800c848:	d007      	beq.n	800c85a <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	f042 0201 	orr.w	r2, r2, #1
 800c850:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c852:	2000      	movs	r0, #0
 800c854:	4770      	bx	lr
    return HAL_ERROR;
 800c856:	2001      	movs	r0, #1
}
 800c858:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c85a:	6899      	ldr	r1, [r3, #8]
 800c85c:	4a06      	ldr	r2, [pc, #24]	@ (800c878 <HAL_TIM_Base_Start_IT+0x78>)
 800c85e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c860:	2a06      	cmp	r2, #6
 800c862:	d0f6      	beq.n	800c852 <HAL_TIM_Base_Start_IT+0x52>
 800c864:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c868:	d1ef      	bne.n	800c84a <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 800c86a:	2000      	movs	r0, #0
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	40012c00 	.word	0x40012c00
 800c874:	40000400 	.word	0x40000400
 800c878:	00010007 	.word	0x00010007

0800c87c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c87c:	6803      	ldr	r3, [r0, #0]
 800c87e:	68da      	ldr	r2, [r3, #12]
 800c880:	f022 0201 	bic.w	r2, r2, #1
 800c884:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800c886:	6a1a      	ldr	r2, [r3, #32]
 800c888:	f241 1111 	movw	r1, #4369	@ 0x1111
 800c88c:	420a      	tst	r2, r1
 800c88e:	d108      	bne.n	800c8a2 <HAL_TIM_Base_Stop_IT+0x26>
 800c890:	6a19      	ldr	r1, [r3, #32]
 800c892:	f240 4244 	movw	r2, #1092	@ 0x444
 800c896:	4211      	tst	r1, r2
 800c898:	d103      	bne.n	800c8a2 <HAL_TIM_Base_Stop_IT+0x26>
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	f022 0201 	bic.w	r2, r2, #1
 800c8a0:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	4770      	bx	lr

0800c8ac <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop

0800c8b0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop

0800c8b4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop

0800c8b8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop

0800c8bc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8bc:	6803      	ldr	r3, [r0, #0]
 800c8be:	691a      	ldr	r2, [r3, #16]
 800c8c0:	0791      	lsls	r1, r2, #30
{
 800c8c2:	b510      	push	{r4, lr}
 800c8c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8c6:	d502      	bpl.n	800c8ce <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8c8:	68da      	ldr	r2, [r3, #12]
 800c8ca:	0792      	lsls	r2, r2, #30
 800c8cc:	d468      	bmi.n	800c9a0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8ce:	691a      	ldr	r2, [r3, #16]
 800c8d0:	0752      	lsls	r2, r2, #29
 800c8d2:	d502      	bpl.n	800c8da <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	0750      	lsls	r0, r2, #29
 800c8d8:	d44f      	bmi.n	800c97a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8da:	691a      	ldr	r2, [r3, #16]
 800c8dc:	0711      	lsls	r1, r2, #28
 800c8de:	d502      	bpl.n	800c8e6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	0712      	lsls	r2, r2, #28
 800c8e4:	d437      	bmi.n	800c956 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c8e6:	691a      	ldr	r2, [r3, #16]
 800c8e8:	06d0      	lsls	r0, r2, #27
 800c8ea:	d502      	bpl.n	800c8f2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	06d1      	lsls	r1, r2, #27
 800c8f0:	d41e      	bmi.n	800c930 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c8f2:	691a      	ldr	r2, [r3, #16]
 800c8f4:	07d2      	lsls	r2, r2, #31
 800c8f6:	d502      	bpl.n	800c8fe <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	07d0      	lsls	r0, r2, #31
 800c8fc:	d469      	bmi.n	800c9d2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8fe:	691a      	ldr	r2, [r3, #16]
 800c900:	0611      	lsls	r1, r2, #24
 800c902:	d502      	bpl.n	800c90a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	0612      	lsls	r2, r2, #24
 800c908:	d46b      	bmi.n	800c9e2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c90a:	691a      	ldr	r2, [r3, #16]
 800c90c:	05d0      	lsls	r0, r2, #23
 800c90e:	d502      	bpl.n	800c916 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	0611      	lsls	r1, r2, #24
 800c914:	d46d      	bmi.n	800c9f2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c916:	691a      	ldr	r2, [r3, #16]
 800c918:	0652      	lsls	r2, r2, #25
 800c91a:	d502      	bpl.n	800c922 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c91c:	68da      	ldr	r2, [r3, #12]
 800c91e:	0650      	lsls	r0, r2, #25
 800c920:	d46f      	bmi.n	800ca02 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c922:	691a      	ldr	r2, [r3, #16]
 800c924:	0691      	lsls	r1, r2, #26
 800c926:	d502      	bpl.n	800c92e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c928:	68da      	ldr	r2, [r3, #12]
 800c92a:	0692      	lsls	r2, r2, #26
 800c92c:	d449      	bmi.n	800c9c2 <HAL_TIM_IRQHandler+0x106>
}
 800c92e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c930:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c934:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c936:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c938:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c93a:	69db      	ldr	r3, [r3, #28]
 800c93c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c940:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c942:	d16f      	bne.n	800ca24 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c944:	f7ff ffb2 	bl	800c8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c948:	4620      	mov	r0, r4
 800c94a:	f7ff ffb3 	bl	800c8b4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c94e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c950:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c952:	7722      	strb	r2, [r4, #28]
 800c954:	e7cd      	b.n	800c8f2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c956:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c95a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c95c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c95e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800c964:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c966:	d15a      	bne.n	800ca1e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c968:	f7ff ffa0 	bl	800c8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c96c:	4620      	mov	r0, r4
 800c96e:	f7ff ffa1 	bl	800c8b4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c972:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c974:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c976:	7722      	strb	r2, [r4, #28]
 800c978:	e7b5      	b.n	800c8e6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c97a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c97e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c980:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c982:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c98a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c98c:	d144      	bne.n	800ca18 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c98e:	f7ff ff8d 	bl	800c8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c992:	4620      	mov	r0, r4
 800c994:	f7ff ff8e 	bl	800c8b4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c998:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c99a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c99c:	7722      	strb	r2, [r4, #28]
 800c99e:	e79c      	b.n	800c8da <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9a0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9a4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9a6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9a8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	0799      	lsls	r1, r3, #30
 800c9ae:	d130      	bne.n	800ca12 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9b0:	f7ff ff7c 	bl	800c8ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f7ff ff7d 	bl	800c8b4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c9bc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9be:	7722      	strb	r2, [r4, #28]
 800c9c0:	e785      	b.n	800c8ce <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9c2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c9c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9c8:	611a      	str	r2, [r3, #16]
}
 800c9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c9ce:	f000 b87d 	b.w	800cacc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9d2:	f06f 0201 	mvn.w	r2, #1
 800c9d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f7f4 fbb3 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	e78d      	b.n	800c8fe <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9e2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c9e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f000 f871 	bl	800cad0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	e78b      	b.n	800c90a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f000 f86b 	bl	800cad4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	e789      	b.n	800c916 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ca06:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f7ff ff55 	bl	800c8b8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	e787      	b.n	800c922 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800ca12:	f7ff ff4d 	bl	800c8b0 <HAL_TIM_IC_CaptureCallback>
 800ca16:	e7d0      	b.n	800c9ba <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca18:	f7ff ff4a 	bl	800c8b0 <HAL_TIM_IC_CaptureCallback>
 800ca1c:	e7bc      	b.n	800c998 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca1e:	f7ff ff47 	bl	800c8b0 <HAL_TIM_IC_CaptureCallback>
 800ca22:	e7a6      	b.n	800c972 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca24:	f7ff ff44 	bl	800c8b0 <HAL_TIM_IC_CaptureCallback>
 800ca28:	e791      	b.n	800c94e <HAL_TIM_IRQHandler+0x92>
 800ca2a:	bf00      	nop

0800ca2c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca2c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800ca30:	2a01      	cmp	r2, #1
 800ca32:	d044      	beq.n	800cabe <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca34:	6802      	ldr	r2, [r0, #0]
{
 800ca36:	b470      	push	{r4, r5, r6}
 800ca38:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca3a:	4e22      	ldr	r6, [pc, #136]	@ (800cac4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ca3c:	2002      	movs	r0, #2
 800ca3e:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca42:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 800ca44:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca46:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800ca48:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca4a:	d026      	beq.n	800ca9a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800ca4c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 800ca50:	42b2      	cmp	r2, r6
 800ca52:	d02b      	beq.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca54:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca58:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca5a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800ca5e:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca60:	d00e      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ca62:	4819      	ldr	r0, [pc, #100]	@ (800cac8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800ca64:	4282      	cmp	r2, r0
 800ca66:	d00b      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ca68:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800ca6c:	4282      	cmp	r2, r0
 800ca6e:	d007      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ca70:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800ca74:	4282      	cmp	r2, r0
 800ca76:	d003      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ca78:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 800ca7c:	4282      	cmp	r2, r0
 800ca7e:	d104      	bne.n	800ca8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca80:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca82:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca86:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca88:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800ca8a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800ca92:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800ca96:	bc70      	pop	{r4, r5, r6}
 800ca98:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca9a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca9c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800caa0:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800caa2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caa6:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800caa8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caaa:	e7e9      	b.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800caac:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800caae:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cab2:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800cab4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cab8:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 800caba:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cabc:	e7e0      	b.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 800cabe:	2002      	movs	r0, #2
}
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	40012c00 	.word	0x40012c00
 800cac8:	40000400 	.word	0x40000400

0800cacc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop

0800cad0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop

0800cad4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop

0800cad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cad8:	b570      	push	{r4, r5, r6, lr}
 800cada:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800cadc:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cade:	6882      	ldr	r2, [r0, #8]
 800cae0:	6900      	ldr	r0, [r0, #16]
 800cae2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cae4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cae6:	4302      	orrs	r2, r0
 800cae8:	430a      	orrs	r2, r1
 800caea:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800caec:	49a1      	ldr	r1, [pc, #644]	@ (800cd74 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800caee:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800caf0:	4029      	ands	r1, r5
 800caf2:	430a      	orrs	r2, r1
 800caf4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	68e1      	ldr	r1, [r4, #12]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cafa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cafc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800cb00:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb02:	499d      	ldr	r1, [pc, #628]	@ (800cd78 <UART_SetConfig+0x2a0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb04:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb06:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb08:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb0a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb0c:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800cb10:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb14:	f000 80d3 	beq.w	800ccbe <UART_SetConfig+0x1e6>
    tmpreg |= huart->Init.OneBitSampling;
 800cb18:	6a26      	ldr	r6, [r4, #32]
 800cb1a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb1c:	430a      	orrs	r2, r1
 800cb1e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb22:	f022 020f 	bic.w	r2, r2, #15
 800cb26:	432a      	orrs	r2, r5
 800cb28:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb2a:	4a94      	ldr	r2, [pc, #592]	@ (800cd7c <UART_SetConfig+0x2a4>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d039      	beq.n	800cba4 <UART_SetConfig+0xcc>
 800cb30:	4a93      	ldr	r2, [pc, #588]	@ (800cd80 <UART_SetConfig+0x2a8>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d012      	beq.n	800cb5c <UART_SetConfig+0x84>
 800cb36:	4a93      	ldr	r2, [pc, #588]	@ (800cd84 <UART_SetConfig+0x2ac>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	f000 80a8 	beq.w	800cc8e <UART_SetConfig+0x1b6>
 800cb3e:	4a92      	ldr	r2, [pc, #584]	@ (800cd88 <UART_SetConfig+0x2b0>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d043      	beq.n	800cbcc <UART_SetConfig+0xf4>
 800cb44:	4a91      	ldr	r2, [pc, #580]	@ (800cd8c <UART_SetConfig+0x2b4>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	f000 8091 	beq.w	800cc6e <UART_SetConfig+0x196>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 800cb4c:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb4e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800cb50:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 800cb54:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 800cb58:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 800cb5a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb5c:	4b8c      	ldr	r3, [pc, #560]	@ (800cd90 <UART_SetConfig+0x2b8>)
 800cb5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb62:	f003 030c 	and.w	r3, r3, #12
 800cb66:	2b0c      	cmp	r3, #12
 800cb68:	d8f0      	bhi.n	800cb4c <UART_SetConfig+0x74>
 800cb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb70 <UART_SetConfig+0x98>)
 800cb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb70:	0800cc83 	.word	0x0800cc83
 800cb74:	0800cb4d 	.word	0x0800cb4d
 800cb78:	0800cb4d 	.word	0x0800cb4d
 800cb7c:	0800cb4d 	.word	0x0800cb4d
 800cb80:	0800cbe5 	.word	0x0800cbe5
 800cb84:	0800cb4d 	.word	0x0800cb4d
 800cb88:	0800cb4d 	.word	0x0800cb4d
 800cb8c:	0800cb4d 	.word	0x0800cb4d
 800cb90:	0800cc2f 	.word	0x0800cc2f
 800cb94:	0800cb4d 	.word	0x0800cb4d
 800cb98:	0800cb4d 	.word	0x0800cb4d
 800cb9c:	0800cb4d 	.word	0x0800cb4d
 800cba0:	0800cbfd 	.word	0x0800cbfd
 800cba4:	4b7a      	ldr	r3, [pc, #488]	@ (800cd90 <UART_SetConfig+0x2b8>)
 800cba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbaa:	f003 0303 	and.w	r3, r3, #3
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d03d      	beq.n	800cc2e <UART_SetConfig+0x156>
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d022      	beq.n	800cbfc <UART_SetConfig+0x124>
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d014      	beq.n	800cbe4 <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cbba:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cbbe:	f000 80d0 	beq.w	800cd62 <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbc2:	f7fd f945 	bl	8009e50 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800cbc6:	b9a8      	cbnz	r0, 800cbf4 <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e7c0      	b.n	800cb4e <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbcc:	4b70      	ldr	r3, [pc, #448]	@ (800cd90 <UART_SetConfig+0x2b8>)
 800cbce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cbd6:	2b80      	cmp	r3, #128	@ 0x80
 800cbd8:	d029      	beq.n	800cc2e <UART_SetConfig+0x156>
 800cbda:	d865      	bhi.n	800cca8 <UART_SetConfig+0x1d0>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d050      	beq.n	800cc82 <UART_SetConfig+0x1aa>
 800cbe0:	2b40      	cmp	r3, #64	@ 0x40
 800cbe2:	d1b3      	bne.n	800cb4c <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cbe4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cbe8:	f000 80c0 	beq.w	800cd6c <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetSysClockFreq();
 800cbec:	f7fc fca4 	bl	8009538 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d0e9      	beq.n	800cbc8 <UART_SetConfig+0xf0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbf4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cbf6:	e006      	b.n	800cc06 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbf8:	2b30      	cmp	r3, #48	@ 0x30
 800cbfa:	d1a7      	bne.n	800cb4c <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cbfc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cc00:	d019      	beq.n	800cc36 <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 800cc02:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc06:	6863      	ldr	r3, [r4, #4]
 800cc08:	4a62      	ldr	r2, [pc, #392]	@ (800cd94 <UART_SetConfig+0x2bc>)
 800cc0a:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 800cc0e:	fbb0 f0f2 	udiv	r0, r0, r2
 800cc12:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800cc16:	fbb0 f0f3 	udiv	r0, r0, r3
 800cc1a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc1c:	f1a0 0210 	sub.w	r2, r0, #16
 800cc20:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d891      	bhi.n	800cb4c <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	60d8      	str	r0, [r3, #12]
 800cc2c:	e7cc      	b.n	800cbc8 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc2e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800cc32:	4859      	ldr	r0, [pc, #356]	@ (800cd98 <UART_SetConfig+0x2c0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc34:	d1e7      	bne.n	800cc06 <UART_SetConfig+0x12e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc36:	6862      	ldr	r2, [r4, #4]
 800cc38:	4b56      	ldr	r3, [pc, #344]	@ (800cd94 <UART_SetConfig+0x2bc>)
 800cc3a:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800cc3e:	fbb0 f0f1 	udiv	r0, r0, r1
 800cc42:	0853      	lsrs	r3, r2, #1
 800cc44:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800cc48:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc4c:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc4e:	f1a2 0010 	sub.w	r0, r2, #16
 800cc52:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 800cc56:	4288      	cmp	r0, r1
 800cc58:	f63f af78 	bhi.w	800cb4c <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc5c:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 800cc60:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc62:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc64:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	60cb      	str	r3, [r1, #12]
 800cc6c:	e7ac      	b.n	800cbc8 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc6e:	4b48      	ldr	r3, [pc, #288]	@ (800cd90 <UART_SetConfig+0x2b8>)
 800cc70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc7c:	d0d7      	beq.n	800cc2e <UART_SetConfig+0x156>
 800cc7e:	d81a      	bhi.n	800ccb6 <UART_SetConfig+0x1de>
 800cc80:	b9ab      	cbnz	r3, 800ccae <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc82:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cc86:	d065      	beq.n	800cd54 <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc88:	f7fd f8d0 	bl	8009e2c <HAL_RCC_GetPCLK1Freq>
        break;
 800cc8c:	e79b      	b.n	800cbc6 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc8e:	4b40      	ldr	r3, [pc, #256]	@ (800cd90 <UART_SetConfig+0x2b8>)
 800cc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cc98:	2b20      	cmp	r3, #32
 800cc9a:	d0c8      	beq.n	800cc2e <UART_SetConfig+0x156>
 800cc9c:	d8ac      	bhi.n	800cbf8 <UART_SetConfig+0x120>
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d0ef      	beq.n	800cc82 <UART_SetConfig+0x1aa>
 800cca2:	2b10      	cmp	r3, #16
 800cca4:	d09e      	beq.n	800cbe4 <UART_SetConfig+0x10c>
 800cca6:	e751      	b.n	800cb4c <UART_SetConfig+0x74>
 800cca8:	2bc0      	cmp	r3, #192	@ 0xc0
 800ccaa:	d0a7      	beq.n	800cbfc <UART_SetConfig+0x124>
 800ccac:	e74e      	b.n	800cb4c <UART_SetConfig+0x74>
 800ccae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccb2:	d097      	beq.n	800cbe4 <UART_SetConfig+0x10c>
 800ccb4:	e74a      	b.n	800cb4c <UART_SetConfig+0x74>
 800ccb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ccba:	d09f      	beq.n	800cbfc <UART_SetConfig+0x124>
 800ccbc:	e746      	b.n	800cb4c <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ccbe:	4311      	orrs	r1, r2
 800ccc0:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ccc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccc4:	4932      	ldr	r1, [pc, #200]	@ (800cd90 <UART_SetConfig+0x2b8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ccc6:	f022 020f 	bic.w	r2, r2, #15
 800ccca:	432a      	orrs	r2, r5
 800cccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccce:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800ccd2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ccd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccda:	d045      	beq.n	800cd68 <UART_SetConfig+0x290>
 800ccdc:	d833      	bhi.n	800cd46 <UART_SetConfig+0x26e>
 800ccde:	b37b      	cbz	r3, 800cd40 <UART_SetConfig+0x268>
 800cce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cce4:	f47f af32 	bne.w	800cb4c <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 800cce8:	f7fc fc26 	bl	8009538 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800ccec:	2800      	cmp	r0, #0
 800ccee:	f43f af6b 	beq.w	800cbc8 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ccf2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccf4:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ccf6:	4b27      	ldr	r3, [pc, #156]	@ (800cd94 <UART_SetConfig+0x2bc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccf8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ccfc:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 800cd00:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd04:	4299      	cmp	r1, r3
 800cd06:	f63f af21 	bhi.w	800cb4c <UART_SetConfig+0x74>
 800cd0a:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 800cd0e:	f63f af1d 	bhi.w	800cb4c <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd12:	2300      	movs	r3, #0
 800cd14:	4619      	mov	r1, r3
 800cd16:	f7f3 ff5f 	bl	8000bd8 <__aeabi_uldivmod>
 800cd1a:	0872      	lsrs	r2, r6, #1
 800cd1c:	0203      	lsls	r3, r0, #8
 800cd1e:	0209      	lsls	r1, r1, #8
 800cd20:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800cd24:	1898      	adds	r0, r3, r2
 800cd26:	f141 0100 	adc.w	r1, r1, #0
 800cd2a:	4632      	mov	r2, r6
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	f7f3 ff53 	bl	8000bd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cd32:	4b1a      	ldr	r3, [pc, #104]	@ (800cd9c <UART_SetConfig+0x2c4>)
 800cd34:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	f63f af07 	bhi.w	800cb4c <UART_SetConfig+0x74>
 800cd3e:	e773      	b.n	800cc28 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd40:	f7fd f874 	bl	8009e2c <HAL_RCC_GetPCLK1Freq>
        break;
 800cd44:	e7d2      	b.n	800ccec <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cd4a:	f47f aeff 	bne.w	800cb4c <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 800cd4e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cd52:	e7cf      	b.n	800ccf4 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd54:	f7fd f86a 	bl	8009e2c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	f43f af35 	beq.w	800cbc8 <UART_SetConfig+0xf0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd5e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cd60:	e769      	b.n	800cc36 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd62:	f7fd f875 	bl	8009e50 <HAL_RCC_GetPCLK2Freq>
        break;
 800cd66:	e7f7      	b.n	800cd58 <UART_SetConfig+0x280>
        pclk = (uint32_t) HSI_VALUE;
 800cd68:	480b      	ldr	r0, [pc, #44]	@ (800cd98 <UART_SetConfig+0x2c0>)
 800cd6a:	e7c3      	b.n	800ccf4 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 800cd6c:	f7fc fbe4 	bl	8009538 <HAL_RCC_GetSysClockFreq>
        break;
 800cd70:	e7f2      	b.n	800cd58 <UART_SetConfig+0x280>
 800cd72:	bf00      	nop
 800cd74:	cfff69f3 	.word	0xcfff69f3
 800cd78:	40008000 	.word	0x40008000
 800cd7c:	40013800 	.word	0x40013800
 800cd80:	40004400 	.word	0x40004400
 800cd84:	40004800 	.word	0x40004800
 800cd88:	40004c00 	.word	0x40004c00
 800cd8c:	40005000 	.word	0x40005000
 800cd90:	40021000 	.word	0x40021000
 800cd94:	080154c8 	.word	0x080154c8
 800cd98:	00f42400 	.word	0x00f42400
 800cd9c:	000ffcff 	.word	0x000ffcff

0800cda0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cda0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800cda2:	07da      	lsls	r2, r3, #31
{
 800cda4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cda6:	d506      	bpl.n	800cdb6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cda8:	6801      	ldr	r1, [r0, #0]
 800cdaa:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800cdac:	684a      	ldr	r2, [r1, #4]
 800cdae:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800cdb2:	4322      	orrs	r2, r4
 800cdb4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdb6:	079c      	lsls	r4, r3, #30
 800cdb8:	d506      	bpl.n	800cdc8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdba:	6801      	ldr	r1, [r0, #0]
 800cdbc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800cdbe:	684a      	ldr	r2, [r1, #4]
 800cdc0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800cdc4:	4322      	orrs	r2, r4
 800cdc6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdc8:	0759      	lsls	r1, r3, #29
 800cdca:	d506      	bpl.n	800cdda <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cdcc:	6801      	ldr	r1, [r0, #0]
 800cdce:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800cdd0:	684a      	ldr	r2, [r1, #4]
 800cdd2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800cdd6:	4322      	orrs	r2, r4
 800cdd8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdda:	071a      	lsls	r2, r3, #28
 800cddc:	d506      	bpl.n	800cdec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdde:	6801      	ldr	r1, [r0, #0]
 800cde0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800cde2:	684a      	ldr	r2, [r1, #4]
 800cde4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cde8:	4322      	orrs	r2, r4
 800cdea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cdec:	06dc      	lsls	r4, r3, #27
 800cdee:	d506      	bpl.n	800cdfe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cdf0:	6801      	ldr	r1, [r0, #0]
 800cdf2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800cdf4:	688a      	ldr	r2, [r1, #8]
 800cdf6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cdfa:	4322      	orrs	r2, r4
 800cdfc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cdfe:	0699      	lsls	r1, r3, #26
 800ce00:	d506      	bpl.n	800ce10 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce02:	6801      	ldr	r1, [r0, #0]
 800ce04:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800ce06:	688a      	ldr	r2, [r1, #8]
 800ce08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce0c:	4322      	orrs	r2, r4
 800ce0e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce10:	065a      	lsls	r2, r3, #25
 800ce12:	d509      	bpl.n	800ce28 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce14:	6801      	ldr	r1, [r0, #0]
 800ce16:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800ce18:	684a      	ldr	r2, [r1, #4]
 800ce1a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800ce1e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce20:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce24:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce26:	d00b      	beq.n	800ce40 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce28:	061b      	lsls	r3, r3, #24
 800ce2a:	d506      	bpl.n	800ce3a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce2c:	6802      	ldr	r2, [r0, #0]
 800ce2e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ce30:	6853      	ldr	r3, [r2, #4]
 800ce32:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800ce36:	430b      	orrs	r3, r1
 800ce38:	6053      	str	r3, [r2, #4]
  }
}
 800ce3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce3e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce40:	684a      	ldr	r2, [r1, #4]
 800ce42:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800ce44:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800ce48:	4322      	orrs	r2, r4
 800ce4a:	604a      	str	r2, [r1, #4]
 800ce4c:	e7ec      	b.n	800ce28 <UART_AdvFeatureConfig+0x88>
 800ce4e:	bf00      	nop

0800ce50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce50:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce52:	2300      	movs	r3, #0
{
 800ce54:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce56:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce5a:	f7fa f9f1 	bl	8007240 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800ce64:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce66:	d40e      	bmi.n	800ce86 <UART_CheckIdleState+0x36>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	0752      	lsls	r2, r2, #29
 800ce6c:	d42f      	bmi.n	800cece <UART_CheckIdleState+0x7e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce6e:	2220      	movs	r2, #32
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce70:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800ce72:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800ce76:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800ce78:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce7c:	66e3      	str	r3, [r4, #108]	@ 0x6c
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce7e:	2300      	movs	r3, #0
 800ce80:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800ce84:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce86:	69da      	ldr	r2, [r3, #28]
 800ce88:	0292      	lsls	r2, r2, #10
 800ce8a:	d4ed      	bmi.n	800ce68 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce8c:	f7fa f9d8 	bl	8007240 <HAL_GetTick>
 800ce90:	1b43      	subs	r3, r0, r5
 800ce92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ce96:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce98:	d22a      	bcs.n	800cef0 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	0750      	lsls	r0, r2, #29
 800ce9e:	d5f2      	bpl.n	800ce86 <UART_CheckIdleState+0x36>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cea0:	69da      	ldr	r2, [r3, #28]
 800cea2:	0511      	lsls	r1, r2, #20
 800cea4:	d5ef      	bpl.n	800ce86 <UART_CheckIdleState+0x36>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ceaa:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ceac:	6819      	ldr	r1, [r3, #0]
 800ceae:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 800ceb2:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceb4:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800ceb6:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceb8:	f021 0101 	bic.w	r1, r1, #1
 800cebc:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800cebe:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cec2:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cec6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800ceca:	2003      	movs	r0, #3
 800cecc:	e7d7      	b.n	800ce7e <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cece:	69db      	ldr	r3, [r3, #28]
 800ced0:	0258      	lsls	r0, r3, #9
 800ced2:	d4cc      	bmi.n	800ce6e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ced4:	f7fa f9b4 	bl	8007240 <HAL_GetTick>
 800ced8:	1b43      	subs	r3, r0, r5
 800ceda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cede:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cee0:	d206      	bcs.n	800cef0 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	0751      	lsls	r1, r2, #29
 800cee6:	d5f2      	bpl.n	800cece <UART_CheckIdleState+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cee8:	69da      	ldr	r2, [r3, #28]
 800ceea:	0512      	lsls	r2, r2, #20
 800ceec:	d5ef      	bpl.n	800cece <UART_CheckIdleState+0x7e>
 800ceee:	e7da      	b.n	800cea6 <UART_CheckIdleState+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800cef6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cef8:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800cefa:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cefc:	f022 0201 	bic.w	r2, r2, #1
 800cf00:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800cf02:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cf06:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800cf0a:	e7de      	b.n	800ceca <UART_CheckIdleState+0x7a>

0800cf0c <HAL_UART_Init>:
  if (huart == NULL)
 800cf0c:	b380      	cbz	r0, 800cf70 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800cf0e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800cf12:	b510      	push	{r4, lr}
 800cf14:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800cf16:	b333      	cbz	r3, 800cf66 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800cf18:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cf1a:	2324      	movs	r3, #36	@ 0x24
 800cf1c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800cf20:	6813      	ldr	r3, [r2, #0]
 800cf22:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf26:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800cf28:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf2a:	f7ff fdd5 	bl	800cad8 <UART_SetConfig>
 800cf2e:	2801      	cmp	r0, #1
 800cf30:	d017      	beq.n	800cf62 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf32:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cf34:	b98b      	cbnz	r3, 800cf5a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	685a      	ldr	r2, [r3, #4]
 800cf3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cf3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf40:	689a      	ldr	r2, [r3, #8]
 800cf42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cf46:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800cf4e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800cf50:	601a      	str	r2, [r3, #0]
}
 800cf52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800cf56:	f7ff bf7b 	b.w	800ce50 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f7ff ff20 	bl	800cda0 <UART_AdvFeatureConfig>
 800cf60:	e7e9      	b.n	800cf36 <HAL_UART_Init+0x2a>
}
 800cf62:	2001      	movs	r0, #1
 800cf64:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800cf66:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800cf6a:	f7f4 fa2d 	bl	80013c8 <HAL_UART_MspInit>
 800cf6e:	e7d3      	b.n	800cf18 <HAL_UART_Init+0xc>
}
 800cf70:	2001      	movs	r0, #1
 800cf72:	4770      	bx	lr

0800cf74 <UART_WaitOnFlagUntilTimeout>:
{
 800cf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf78:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf7c:	6804      	ldr	r4, [r0, #0]
 800cf7e:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 800cf82:	460d      	mov	r5, r1
 800cf84:	4616      	mov	r6, r2
 800cf86:	d10a      	bne.n	800cf9e <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf88:	69e3      	ldr	r3, [r4, #28]
 800cf8a:	ea35 0303 	bics.w	r3, r5, r3
 800cf8e:	bf0c      	ite	eq
 800cf90:	2301      	moveq	r3, #1
 800cf92:	2300      	movne	r3, #0
 800cf94:	42b3      	cmp	r3, r6
 800cf96:	d0f7      	beq.n	800cf88 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800cf98:	2000      	movs	r0, #0
}
 800cf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfa2:	69e2      	ldr	r2, [r4, #28]
 800cfa4:	ea35 0202 	bics.w	r2, r5, r2
 800cfa8:	bf0c      	ite	eq
 800cfaa:	2301      	moveq	r3, #1
 800cfac:	2300      	movne	r3, #0
 800cfae:	42b3      	cmp	r3, r6
 800cfb0:	d1f2      	bne.n	800cf98 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfb2:	f7fa f945 	bl	8007240 <HAL_GetTick>
 800cfb6:	eba0 0009 	sub.w	r0, r0, r9
 800cfba:	4540      	cmp	r0, r8
 800cfbc:	d821      	bhi.n	800d002 <UART_WaitOnFlagUntilTimeout+0x8e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfbe:	683c      	ldr	r4, [r7, #0]
 800cfc0:	4623      	mov	r3, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfc2:	f1b8 0f00 	cmp.w	r8, #0
 800cfc6:	d01d      	beq.n	800d004 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfc8:	6823      	ldr	r3, [r4, #0]
 800cfca:	0759      	lsls	r1, r3, #29
 800cfcc:	d5e9      	bpl.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfce:	69e3      	ldr	r3, [r4, #28]
 800cfd0:	051a      	lsls	r2, r3, #20
 800cfd2:	d5e6      	bpl.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cfd8:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cfda:	6822      	ldr	r2, [r4, #0]
 800cfdc:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800cfe0:	6022      	str	r2, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfe2:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800cfe4:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfe6:	f022 0201 	bic.w	r2, r2, #1
 800cfea:	60a2      	str	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800cfec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cff4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800cff8:	2300      	movs	r3, #0
 800cffa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 800cffe:	2003      	movs	r0, #3
 800d000:	e7cb      	b.n	800cf9a <UART_WaitOnFlagUntilTimeout+0x26>
 800d002:	683b      	ldr	r3, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800d00a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d00c:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d00e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d010:	f022 0201 	bic.w	r2, r2, #1
 800d014:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d016:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d01a:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
        return HAL_TIMEOUT;
 800d01e:	e7eb      	b.n	800cff8 <UART_WaitOnFlagUntilTimeout+0x84>

0800d020 <HAL_UART_Transmit>:
{
 800d020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d024:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800d026:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800d02a:	2820      	cmp	r0, #32
{
 800d02c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800d02e:	d17d      	bne.n	800d12c <HAL_UART_Transmit+0x10c>
    if ((pData == NULL) || (Size == 0U))
 800d030:	4689      	mov	r9, r1
 800d032:	2900      	cmp	r1, #0
 800d034:	d047      	beq.n	800d0c6 <HAL_UART_Transmit+0xa6>
 800d036:	4617      	mov	r7, r2
 800d038:	2a00      	cmp	r2, #0
 800d03a:	d044      	beq.n	800d0c6 <HAL_UART_Transmit+0xa6>
 800d03c:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800d03e:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800d042:	2b01      	cmp	r3, #1
 800d044:	d072      	beq.n	800d12c <HAL_UART_Transmit+0x10c>
 800d046:	2301      	movs	r3, #1
 800d048:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d04c:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d050:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d052:	f8c4 808c 	str.w	r8, [r4, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d056:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    tickstart = HAL_GetTick();
 800d05a:	f7fa f8f1 	bl	8007240 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d05e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800d060:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800d068:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 800d06c:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d06e:	d061      	beq.n	800d134 <HAL_UART_Transmit+0x114>
      pdata16bits = NULL;
 800d070:	4647      	mov	r7, r8
    while (huart->TxXferCount > 0U)
 800d072:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
    __HAL_UNLOCK(huart);
 800d076:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800d078:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800d07a:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    while (huart->TxXferCount > 0U)
 800d07e:	b1b3      	cbz	r3, 800d0ae <HAL_UART_Transmit+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d080:	6823      	ldr	r3, [r4, #0]
 800d082:	1c6a      	adds	r2, r5, #1
 800d084:	d123      	bne.n	800d0ce <HAL_UART_Transmit+0xae>
 800d086:	69da      	ldr	r2, [r3, #28]
 800d088:	0611      	lsls	r1, r2, #24
 800d08a:	d5fc      	bpl.n	800d086 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 800d08c:	f1b9 0f00 	cmp.w	r9, #0
 800d090:	d047      	beq.n	800d122 <HAL_UART_Transmit+0x102>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d092:	f819 2b01 	ldrb.w	r2, [r9], #1
 800d096:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800d098:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800d09c:	3a01      	subs	r2, #1
 800d09e:	b292      	uxth	r2, r2
 800d0a0:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d0a4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800d0a8:	b292      	uxth	r2, r2
 800d0aa:	2a00      	cmp	r2, #0
 800d0ac:	d1e9      	bne.n	800d082 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0ae:	9500      	str	r5, [sp, #0]
 800d0b0:	4633      	mov	r3, r6
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	2140      	movs	r1, #64	@ 0x40
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f7ff ff5c 	bl	800cf74 <UART_WaitOnFlagUntilTimeout>
 800d0bc:	bb68      	cbnz	r0, 800d11a <HAL_UART_Transmit+0xfa>
    huart->gState = HAL_UART_STATE_READY;
 800d0be:	2320      	movs	r3, #32
 800d0c0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_OK;
 800d0c4:	e000      	b.n	800d0c8 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 800d0c6:	2001      	movs	r0, #1
}
 800d0c8:	b003      	add	sp, #12
 800d0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0ce:	69da      	ldr	r2, [r3, #28]
 800d0d0:	f012 0880 	ands.w	r8, r2, #128	@ 0x80
 800d0d4:	d1da      	bne.n	800d08c <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0d6:	f7fa f8b3 	bl	8007240 <HAL_GetTick>
 800d0da:	1b80      	subs	r0, r0, r6
 800d0dc:	4285      	cmp	r5, r0
 800d0de:	d32f      	bcc.n	800d140 <HAL_UART_Transmit+0x120>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0e0:	6823      	ldr	r3, [r4, #0]
 800d0e2:	461a      	mov	r2, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0e4:	b36d      	cbz	r5, 800d142 <HAL_UART_Transmit+0x122>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	0752      	lsls	r2, r2, #29
 800d0ea:	d5f0      	bpl.n	800d0ce <HAL_UART_Transmit+0xae>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0ec:	69da      	ldr	r2, [r3, #28]
 800d0ee:	0510      	lsls	r0, r2, #20
 800d0f0:	d5ed      	bpl.n	800d0ce <HAL_UART_Transmit+0xae>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d0f6:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d0f8:	6819      	ldr	r1, [r3, #0]
 800d0fa:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 800d0fe:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d100:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d102:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d104:	f021 0101 	bic.w	r1, r1, #1
 800d108:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d10a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800d10e:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d112:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d116:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        return HAL_TIMEOUT;
 800d11a:	2003      	movs	r0, #3
}
 800d11c:	b003      	add	sp, #12
 800d11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d122:	f837 2b02 	ldrh.w	r2, [r7], #2
 800d126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d12a:	e7b4      	b.n	800d096 <HAL_UART_Transmit+0x76>
    __HAL_LOCK(huart);
 800d12c:	2002      	movs	r0, #2
}
 800d12e:	b003      	add	sp, #12
 800d130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d19a      	bne.n	800d070 <HAL_UART_Transmit+0x50>
 800d13a:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800d13c:	4699      	mov	r9, r3
 800d13e:	e798      	b.n	800d072 <HAL_UART_Transmit+0x52>
 800d140:	6822      	ldr	r2, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d142:	6813      	ldr	r3, [r2, #0]
 800d144:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d148:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d14a:	6893      	ldr	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d14c:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800d14e:	2000      	movs	r0, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d150:	f023 0301 	bic.w	r3, r3, #1
 800d154:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d156:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        __HAL_UNLOCK(huart);
 800d15a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d15e:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800d162:	2003      	movs	r0, #3
 800d164:	e7da      	b.n	800d11c <HAL_UART_Transmit+0xfc>
 800d166:	bf00      	nop

0800d168 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d168:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d017      	beq.n	800d1a0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d170:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d172:	2324      	movs	r3, #36	@ 0x24
{
 800d174:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800d176:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d17a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d17c:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d17e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800d180:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d184:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800d188:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d18a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d18c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d18e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 800d192:	2220      	movs	r2, #32
 800d194:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 800d198:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800d19c:	4618      	mov	r0, r3
}
 800d19e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800d1a0:	2002      	movs	r0, #2
}
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1a4:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800d1a8:	2a01      	cmp	r2, #1
 800d1aa:	d035      	beq.n	800d218 <HAL_UARTEx_SetTxFifoThreshold+0x74>

  huart->gState = HAL_UART_STATE_BUSY;
 800d1ac:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1ae:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d1b0:	2024      	movs	r0, #36	@ 0x24
{
 800d1b2:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800d1b4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1b8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1ba:	6810      	ldr	r0, [r2, #0]
 800d1bc:	f020 0001 	bic.w	r0, r0, #1
 800d1c0:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1c2:	6890      	ldr	r0, [r2, #8]
 800d1c4:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800d1c8:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1ca:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1cc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1ce:	b300      	cbz	r0, 800d212 <HAL_UARTEx_SetTxFifoThreshold+0x6e>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1d0:	6890      	ldr	r0, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1d2:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1d4:	4d11      	ldr	r5, [pc, #68]	@ (800d21c <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1d6:	0f49      	lsrs	r1, r1, #29
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1d8:	f3c0 6c42 	ubfx	ip, r0, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1dc:	5c68      	ldrb	r0, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d1de:	4429      	add	r1, r5
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1e0:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d1e2:	7a09      	ldrb	r1, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1e4:	fbb0 f0f1 	udiv	r0, r0, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1e8:	f815 100c 	ldrb.w	r1, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1ec:	4465      	add	r5, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1ee:	00c9      	lsls	r1, r1, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1f0:	7a2d      	ldrb	r5, [r5, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1f2:	fbb1 f1f5 	udiv	r1, r1, r5
 800d1f6:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800d1fa:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800d1fc:	2520      	movs	r5, #32
 800d1fe:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d202:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800d204:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800d208:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d20a:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 800d20e:	bc30      	pop	{r4, r5}
 800d210:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800d212:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d214:	4608      	mov	r0, r1
 800d216:	e7ee      	b.n	800d1f6 <HAL_UARTEx_SetTxFifoThreshold+0x52>
  __HAL_LOCK(huart);
 800d218:	2002      	movs	r0, #2
}
 800d21a:	4770      	bx	lr
 800d21c:	080154e0 	.word	0x080154e0

0800d220 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800d220:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800d224:	2a01      	cmp	r2, #1
 800d226:	d035      	beq.n	800d294 <HAL_UARTEx_SetRxFifoThreshold+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 800d228:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d22a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d22c:	2024      	movs	r0, #36	@ 0x24
{
 800d22e:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800d230:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d234:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d236:	6810      	ldr	r0, [r2, #0]
 800d238:	f020 0001 	bic.w	r0, r0, #1
 800d23c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d23e:	6890      	ldr	r0, [r2, #8]
 800d240:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800d244:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d246:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d248:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d24a:	b300      	cbz	r0, 800d28e <HAL_UARTEx_SetRxFifoThreshold+0x6e>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d24c:	6890      	ldr	r0, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d24e:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d250:	4d11      	ldr	r5, [pc, #68]	@ (800d298 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d252:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d254:	f3c0 6c42 	ubfx	ip, r0, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d258:	5c68      	ldrb	r0, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d25a:	4429      	add	r1, r5
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d25c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d25e:	7a09      	ldrb	r1, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d260:	fbb0 f0f1 	udiv	r0, r0, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d264:	f815 100c 	ldrb.w	r1, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800d268:	4465      	add	r5, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d26a:	00c9      	lsls	r1, r1, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d26c:	7a2d      	ldrb	r5, [r5, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d26e:	fbb1 f1f5 	udiv	r1, r1, r5
 800d272:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800d276:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800d278:	2520      	movs	r5, #32
 800d27a:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d27e:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800d280:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800d284:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d286:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 800d28a:	bc30      	pop	{r4, r5}
 800d28c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800d28e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d290:	4608      	mov	r0, r1
 800d292:	e7ee      	b.n	800d272 <HAL_UARTEx_SetRxFifoThreshold+0x52>
  __HAL_LOCK(huart);
 800d294:	2002      	movs	r0, #2
}
 800d296:	4770      	bx	lr
 800d298:	080154e0 	.word	0x080154e0

0800d29c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d29c:	b084      	sub	sp, #16
 800d29e:	b410      	push	{r4}
 800d2a0:	f10d 0c08 	add.w	ip, sp, #8
 800d2a4:	e88c 000e 	stmia.w	ip, {r1, r2, r3}

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800d2a8:	460b      	mov	r3, r1
             Init.ClockPowerSave      |\
 800d2aa:	e9dd 4103 	ldrd	r4, r1, [sp, #12]
{
 800d2ae:	4602      	mov	r2, r0
  tmpreg |= (Init.ClockEdge           |\
 800d2b0:	4323      	orrs	r3, r4
             Init.BusWide             |\
 800d2b2:	9805      	ldr	r0, [sp, #20]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d2b4:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      |\
 800d2b6:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800d2b8:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             |\
 800d2ba:	4303      	orrs	r3, r0
             Init.HardwareFlowControl |\
 800d2bc:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d2be:	4904      	ldr	r1, [pc, #16]	@ (800d2d0 <SDMMC_Init+0x34>)
 800d2c0:	4021      	ands	r1, r4

  return HAL_OK;
}
 800d2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d2c6:	430b      	orrs	r3, r1
}
 800d2c8:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d2ca:	6053      	str	r3, [r2, #4]
}
 800d2cc:	b004      	add	sp, #16
 800d2ce:	4770      	bx	lr
 800d2d0:	ffc02c00 	.word	0xffc02c00

0800d2d4 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d2d4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop

0800d2dc <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d2dc:	680b      	ldr	r3, [r1, #0]
 800d2de:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop

0800d2e8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d2e8:	b508      	push	{r3, lr}
 800d2ea:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d2ec:	2002      	movs	r0, #2
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	f042 0203 	orr.w	r2, r2, #3
 800d2f4:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 800d2f6:	f7f9 ffa9 	bl	800724c <HAL_Delay>

  return HAL_OK;
}
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	bd08      	pop	{r3, pc}
 800d2fe:	bf00      	nop

0800d300 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d300:	6800      	ldr	r0, [r0, #0]
}
 800d302:	f000 0003 	and.w	r0, r0, #3
 800d306:	4770      	bx	lr

0800d308 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d308:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800d30a:	5840      	ldr	r0, [r0, r1]
}
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop

0800d310 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d310:	b410      	push	{r4}

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d312:	e9d1 4200 	ldrd	r4, r2, [r1]

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d316:	688b      	ldr	r3, [r1, #8]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d318:	6244      	str	r4, [r0, #36]	@ 0x24
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d31a:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 800d31c:	6282      	str	r2, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d31e:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
                       Data->TransferMode  |\
 800d320:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d324:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
                       Data->TransferDir   |\
 800d326:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d328:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
                       Data->TransferMode  |\
 800d32c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d32e:	4313      	orrs	r3, r2
 800d330:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 800d332:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d336:	2000      	movs	r0, #0
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop

0800d33c <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d33c:	4a4c      	ldr	r2, [pc, #304]	@ (800d470 <SDMMC_CmdBlockLength+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d33e:	4b4d      	ldr	r3, [pc, #308]	@ (800d474 <SDMMC_CmdBlockLength+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d340:	6812      	ldr	r2, [r2, #0]
{
 800d342:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d344:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d346:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d348:	494b      	ldr	r1, [pc, #300]	@ (800d478 <SDMMC_CmdBlockLength+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d34a:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d34c:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d350:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d354:	0a52      	lsrs	r2, r2, #9
 800d356:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d35a:	f043 0310 	orr.w	r3, r3, #16
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d35e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d362:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800d364:	b152      	cbz	r2, 800d37c <SDMMC_CmdBlockLength+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d366:	4945      	ldr	r1, [pc, #276]	@ (800d47c <SDMMC_CmdBlockLength+0x140>)
 800d368:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d36a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d36c:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d36e:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d372:	d001      	beq.n	800d378 <SDMMC_CmdBlockLength+0x3c>
 800d374:	0492      	lsls	r2, r2, #18
 800d376:	d506      	bpl.n	800d386 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800d378:	1c5c      	adds	r4, r3, #1
 800d37a:	d1f6      	bne.n	800d36a <SDMMC_CmdBlockLength+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d37c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d384:	4770      	bx	lr
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d386:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d388:	075c      	lsls	r4, r3, #29
 800d38a:	d43c      	bmi.n	800d406 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d38c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d38e:	07d9      	lsls	r1, r3, #31
 800d390:	d407      	bmi.n	800d3a2 <SDMMC_CmdBlockLength+0x66>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d392:	4b3b      	ldr	r3, [pc, #236]	@ (800d480 <SDMMC_CmdBlockLength+0x144>)
 800d394:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d396:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b10      	cmp	r3, #16
 800d39c:	d004      	beq.n	800d3a8 <SDMMC_CmdBlockLength+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d39e:	2001      	movs	r0, #1
 800d3a0:	e7ee      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3a6:	e7fa      	b.n	800d39e <SDMMC_CmdBlockLength+0x62>
  return (*(__IO uint32_t *) tmp);
 800d3a8:	6943      	ldr	r3, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d3aa:	4836      	ldr	r0, [pc, #216]	@ (800d484 <SDMMC_CmdBlockLength+0x148>)
 800d3ac:	4018      	ands	r0, r3
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d0e6      	beq.n	800d380 <SDMMC_CmdBlockLength+0x44>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	db2b      	blt.n	800d40e <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d3b6:	005a      	lsls	r2, r3, #1
 800d3b8:	d42c      	bmi.n	800d414 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d3ba:	009c      	lsls	r4, r3, #2
 800d3bc:	d42c      	bmi.n	800d418 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d3be:	00d9      	lsls	r1, r3, #3
 800d3c0:	d42c      	bmi.n	800d41c <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d3c2:	011a      	lsls	r2, r3, #4
 800d3c4:	d42d      	bmi.n	800d422 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d3c6:	015c      	lsls	r4, r3, #5
 800d3c8:	d42e      	bmi.n	800d428 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d3ca:	01d9      	lsls	r1, r3, #7
 800d3cc:	d42f      	bmi.n	800d42e <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d3ce:	021a      	lsls	r2, r3, #8
 800d3d0:	d430      	bmi.n	800d434 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d3d2:	025c      	lsls	r4, r3, #9
 800d3d4:	d431      	bmi.n	800d43a <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d3d6:	0299      	lsls	r1, r3, #10
 800d3d8:	d43b      	bmi.n	800d452 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d3da:	02da      	lsls	r2, r3, #11
 800d3dc:	d436      	bmi.n	800d44c <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d3de:	035c      	lsls	r4, r3, #13
 800d3e0:	d431      	bmi.n	800d446 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d3e2:	0399      	lsls	r1, r3, #14
 800d3e4:	d42c      	bmi.n	800d440 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d3e6:	03da      	lsls	r2, r3, #15
 800d3e8:	d43f      	bmi.n	800d46a <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d3ea:	041c      	lsls	r4, r3, #16
 800d3ec:	d43a      	bmi.n	800d464 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d3ee:	0459      	lsls	r1, r3, #17
 800d3f0:	d435      	bmi.n	800d45e <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d3f2:	049a      	lsls	r2, r3, #18
 800d3f4:	d430      	bmi.n	800d458 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d3f6:	f013 0f08 	tst.w	r3, #8
 800d3fa:	bf0c      	ite	eq
 800d3fc:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d400:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d404:	e7bc      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d406:	2304      	movs	r3, #4
 800d408:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d40a:	4618      	mov	r0, r3
 800d40c:	e7b8      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d40e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d412:	e7b5      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d414:	2040      	movs	r0, #64	@ 0x40
 800d416:	e7b3      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d418:	2080      	movs	r0, #128	@ 0x80
 800d41a:	e7b1      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d41c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d420:	e7ae      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d422:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d426:	e7ab      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d428:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d42c:	e7a8      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d42e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d432:	e7a5      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d434:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d438:	e7a2      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d43a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d43e:	e79f      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d440:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d444:	e79c      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d446:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d44a:	e799      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d44c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d450:	e796      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d452:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d456:	e793      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d458:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d45c:	e790      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d45e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d462:	e78d      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d464:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d468:	e78a      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d46a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d46e:	e787      	b.n	800d380 <SDMMC_CmdBlockLength+0x44>
 800d470:	200001e0 	.word	0x200001e0
 800d474:	fffee0c0 	.word	0xfffee0c0
 800d478:	10624dd3 	.word	0x10624dd3
 800d47c:	00200045 	.word	0x00200045
 800d480:	002000c5 	.word	0x002000c5
 800d484:	fdffe008 	.word	0xfdffe008

0800d488 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d488:	4a4c      	ldr	r2, [pc, #304]	@ (800d5bc <SDMMC_CmdReadSingleBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d48a:	4b4d      	ldr	r3, [pc, #308]	@ (800d5c0 <SDMMC_CmdReadSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d48c:	6812      	ldr	r2, [r2, #0]
{
 800d48e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d490:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d492:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d494:	494b      	ldr	r1, [pc, #300]	@ (800d5c4 <SDMMC_CmdReadSingleBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d496:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d498:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d49c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d4a0:	0a52      	lsrs	r2, r2, #9
 800d4a2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d4a6:	f043 0311 	orr.w	r3, r3, #17
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d4aa:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d4ae:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d4b0:	b152      	cbz	r2, 800d4c8 <SDMMC_CmdReadSingleBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d4b2:	4945      	ldr	r1, [pc, #276]	@ (800d5c8 <SDMMC_CmdReadSingleBlock+0x140>)
 800d4b4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d4b6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d4b8:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d4ba:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d4be:	d001      	beq.n	800d4c4 <SDMMC_CmdReadSingleBlock+0x3c>
 800d4c0:	0492      	lsls	r2, r2, #18
 800d4c2:	d506      	bpl.n	800d4d2 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800d4c4:	1c5c      	adds	r4, r3, #1
 800d4c6:	d1f6      	bne.n	800d4b6 <SDMMC_CmdReadSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d4c8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4d0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d4d2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d4d4:	075c      	lsls	r4, r3, #29
 800d4d6:	d43c      	bmi.n	800d552 <SDMMC_CmdReadSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d4d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d4da:	07d9      	lsls	r1, r3, #31
 800d4dc:	d407      	bmi.n	800d4ee <SDMMC_CmdReadSingleBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4de:	4b3b      	ldr	r3, [pc, #236]	@ (800d5cc <SDMMC_CmdReadSingleBlock+0x144>)
 800d4e0:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d4e2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b11      	cmp	r3, #17
 800d4e8:	d004      	beq.n	800d4f4 <SDMMC_CmdReadSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4ea:	2001      	movs	r0, #1
 800d4ec:	e7ee      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4f2:	e7fa      	b.n	800d4ea <SDMMC_CmdReadSingleBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d4f4:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d4f6:	4836      	ldr	r0, [pc, #216]	@ (800d5d0 <SDMMC_CmdReadSingleBlock+0x148>)
 800d4f8:	4018      	ands	r0, r3
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d0e6      	beq.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	db2b      	blt.n	800d55a <SDMMC_CmdReadSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d502:	005a      	lsls	r2, r3, #1
 800d504:	d42c      	bmi.n	800d560 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d506:	009c      	lsls	r4, r3, #2
 800d508:	d42c      	bmi.n	800d564 <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d50a:	00d9      	lsls	r1, r3, #3
 800d50c:	d42c      	bmi.n	800d568 <SDMMC_CmdReadSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d50e:	011a      	lsls	r2, r3, #4
 800d510:	d42d      	bmi.n	800d56e <SDMMC_CmdReadSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d512:	015c      	lsls	r4, r3, #5
 800d514:	d42e      	bmi.n	800d574 <SDMMC_CmdReadSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d516:	01d9      	lsls	r1, r3, #7
 800d518:	d42f      	bmi.n	800d57a <SDMMC_CmdReadSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d51a:	021a      	lsls	r2, r3, #8
 800d51c:	d430      	bmi.n	800d580 <SDMMC_CmdReadSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d51e:	025c      	lsls	r4, r3, #9
 800d520:	d431      	bmi.n	800d586 <SDMMC_CmdReadSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d522:	0299      	lsls	r1, r3, #10
 800d524:	d43b      	bmi.n	800d59e <SDMMC_CmdReadSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d526:	02da      	lsls	r2, r3, #11
 800d528:	d436      	bmi.n	800d598 <SDMMC_CmdReadSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d52a:	035c      	lsls	r4, r3, #13
 800d52c:	d431      	bmi.n	800d592 <SDMMC_CmdReadSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d52e:	0399      	lsls	r1, r3, #14
 800d530:	d42c      	bmi.n	800d58c <SDMMC_CmdReadSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d532:	03da      	lsls	r2, r3, #15
 800d534:	d43f      	bmi.n	800d5b6 <SDMMC_CmdReadSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d536:	041c      	lsls	r4, r3, #16
 800d538:	d43a      	bmi.n	800d5b0 <SDMMC_CmdReadSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d53a:	0459      	lsls	r1, r3, #17
 800d53c:	d435      	bmi.n	800d5aa <SDMMC_CmdReadSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d53e:	049a      	lsls	r2, r3, #18
 800d540:	d430      	bmi.n	800d5a4 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d542:	f013 0f08 	tst.w	r3, #8
 800d546:	bf0c      	ite	eq
 800d548:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d54c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d550:	e7bc      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d552:	2304      	movs	r3, #4
 800d554:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d556:	4618      	mov	r0, r3
 800d558:	e7b8      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d55a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d55e:	e7b5      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d560:	2040      	movs	r0, #64	@ 0x40
 800d562:	e7b3      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d564:	2080      	movs	r0, #128	@ 0x80
 800d566:	e7b1      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d568:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d56c:	e7ae      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d56e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d572:	e7ab      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d574:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d578:	e7a8      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d57a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d57e:	e7a5      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d580:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d584:	e7a2      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d586:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d58a:	e79f      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d58c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d590:	e79c      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d592:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d596:	e799      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d598:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d59c:	e796      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d59e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d5a2:	e793      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d5a4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d5a8:	e790      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d5aa:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d5ae:	e78d      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d5b0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d5b4:	e78a      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d5b6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d5ba:	e787      	b.n	800d4cc <SDMMC_CmdReadSingleBlock+0x44>
 800d5bc:	200001e0 	.word	0x200001e0
 800d5c0:	fffee0c0 	.word	0xfffee0c0
 800d5c4:	10624dd3 	.word	0x10624dd3
 800d5c8:	00200045 	.word	0x00200045
 800d5cc:	002000c5 	.word	0x002000c5
 800d5d0:	fdffe008 	.word	0xfdffe008

0800d5d4 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d5d4:	4a4c      	ldr	r2, [pc, #304]	@ (800d708 <SDMMC_CmdReadMultiBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5d6:	4b4d      	ldr	r3, [pc, #308]	@ (800d70c <SDMMC_CmdReadMultiBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d5d8:	6812      	ldr	r2, [r2, #0]
{
 800d5da:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d5dc:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5de:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d5e0:	494b      	ldr	r1, [pc, #300]	@ (800d710 <SDMMC_CmdReadMultiBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5e2:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d5e4:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5e8:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d5ec:	0a52      	lsrs	r2, r2, #9
 800d5ee:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5f2:	f043 0312 	orr.w	r3, r3, #18
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d5f6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5fa:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d5fc:	b152      	cbz	r2, 800d614 <SDMMC_CmdReadMultiBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d5fe:	4945      	ldr	r1, [pc, #276]	@ (800d714 <SDMMC_CmdReadMultiBlock+0x140>)
 800d600:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d602:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d604:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d606:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d60a:	d001      	beq.n	800d610 <SDMMC_CmdReadMultiBlock+0x3c>
 800d60c:	0492      	lsls	r2, r2, #18
 800d60e:	d506      	bpl.n	800d61e <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800d610:	1c5c      	adds	r4, r3, #1
 800d612:	d1f6      	bne.n	800d602 <SDMMC_CmdReadMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d614:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d61c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d61e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d620:	075c      	lsls	r4, r3, #29
 800d622:	d43c      	bmi.n	800d69e <SDMMC_CmdReadMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d624:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d626:	07d9      	lsls	r1, r3, #31
 800d628:	d407      	bmi.n	800d63a <SDMMC_CmdReadMultiBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d62a:	4b3b      	ldr	r3, [pc, #236]	@ (800d718 <SDMMC_CmdReadMultiBlock+0x144>)
 800d62c:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d62e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b12      	cmp	r3, #18
 800d634:	d004      	beq.n	800d640 <SDMMC_CmdReadMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d636:	2001      	movs	r0, #1
 800d638:	e7ee      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d63a:	2301      	movs	r3, #1
 800d63c:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d63e:	e7fa      	b.n	800d636 <SDMMC_CmdReadMultiBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d640:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d642:	4836      	ldr	r0, [pc, #216]	@ (800d71c <SDMMC_CmdReadMultiBlock+0x148>)
 800d644:	4018      	ands	r0, r3
 800d646:	2800      	cmp	r0, #0
 800d648:	d0e6      	beq.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	db2b      	blt.n	800d6a6 <SDMMC_CmdReadMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d64e:	005a      	lsls	r2, r3, #1
 800d650:	d42c      	bmi.n	800d6ac <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d652:	009c      	lsls	r4, r3, #2
 800d654:	d42c      	bmi.n	800d6b0 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d656:	00d9      	lsls	r1, r3, #3
 800d658:	d42c      	bmi.n	800d6b4 <SDMMC_CmdReadMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d65a:	011a      	lsls	r2, r3, #4
 800d65c:	d42d      	bmi.n	800d6ba <SDMMC_CmdReadMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d65e:	015c      	lsls	r4, r3, #5
 800d660:	d42e      	bmi.n	800d6c0 <SDMMC_CmdReadMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d662:	01d9      	lsls	r1, r3, #7
 800d664:	d42f      	bmi.n	800d6c6 <SDMMC_CmdReadMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d666:	021a      	lsls	r2, r3, #8
 800d668:	d430      	bmi.n	800d6cc <SDMMC_CmdReadMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d66a:	025c      	lsls	r4, r3, #9
 800d66c:	d431      	bmi.n	800d6d2 <SDMMC_CmdReadMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d66e:	0299      	lsls	r1, r3, #10
 800d670:	d43b      	bmi.n	800d6ea <SDMMC_CmdReadMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d672:	02da      	lsls	r2, r3, #11
 800d674:	d436      	bmi.n	800d6e4 <SDMMC_CmdReadMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d676:	035c      	lsls	r4, r3, #13
 800d678:	d431      	bmi.n	800d6de <SDMMC_CmdReadMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d67a:	0399      	lsls	r1, r3, #14
 800d67c:	d42c      	bmi.n	800d6d8 <SDMMC_CmdReadMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d67e:	03da      	lsls	r2, r3, #15
 800d680:	d43f      	bmi.n	800d702 <SDMMC_CmdReadMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d682:	041c      	lsls	r4, r3, #16
 800d684:	d43a      	bmi.n	800d6fc <SDMMC_CmdReadMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d686:	0459      	lsls	r1, r3, #17
 800d688:	d435      	bmi.n	800d6f6 <SDMMC_CmdReadMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d68a:	049a      	lsls	r2, r3, #18
 800d68c:	d430      	bmi.n	800d6f0 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d68e:	f013 0f08 	tst.w	r3, #8
 800d692:	bf0c      	ite	eq
 800d694:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d698:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d69c:	e7bc      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d69e:	2304      	movs	r3, #4
 800d6a0:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	e7b8      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d6a6:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d6aa:	e7b5      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d6ac:	2040      	movs	r0, #64	@ 0x40
 800d6ae:	e7b3      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d6b0:	2080      	movs	r0, #128	@ 0x80
 800d6b2:	e7b1      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d6b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d6b8:	e7ae      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d6ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d6be:	e7ab      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d6c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d6c4:	e7a8      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d6c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d6ca:	e7a5      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d6cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d6d0:	e7a2      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d6d2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d6d6:	e79f      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d6d8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d6dc:	e79c      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d6de:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d6e2:	e799      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d6e4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d6e8:	e796      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d6ea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d6ee:	e793      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d6f0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d6f4:	e790      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d6f6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d6fa:	e78d      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d6fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d700:	e78a      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d702:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d706:	e787      	b.n	800d618 <SDMMC_CmdReadMultiBlock+0x44>
 800d708:	200001e0 	.word	0x200001e0
 800d70c:	fffee0c0 	.word	0xfffee0c0
 800d710:	10624dd3 	.word	0x10624dd3
 800d714:	00200045 	.word	0x00200045
 800d718:	002000c5 	.word	0x002000c5
 800d71c:	fdffe008 	.word	0xfdffe008

0800d720 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d720:	4a4c      	ldr	r2, [pc, #304]	@ (800d854 <SDMMC_CmdWriteSingleBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d722:	4b4d      	ldr	r3, [pc, #308]	@ (800d858 <SDMMC_CmdWriteSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d724:	6812      	ldr	r2, [r2, #0]
{
 800d726:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d728:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d72a:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d72c:	494b      	ldr	r1, [pc, #300]	@ (800d85c <SDMMC_CmdWriteSingleBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d72e:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d730:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d734:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d738:	0a52      	lsrs	r2, r2, #9
 800d73a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d73e:	f043 0318 	orr.w	r3, r3, #24
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d742:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d746:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d748:	b152      	cbz	r2, 800d760 <SDMMC_CmdWriteSingleBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d74a:	4945      	ldr	r1, [pc, #276]	@ (800d860 <SDMMC_CmdWriteSingleBlock+0x140>)
 800d74c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d74e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d750:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d752:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d756:	d001      	beq.n	800d75c <SDMMC_CmdWriteSingleBlock+0x3c>
 800d758:	0492      	lsls	r2, r2, #18
 800d75a:	d506      	bpl.n	800d76a <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800d75c:	1c5c      	adds	r4, r3, #1
 800d75e:	d1f6      	bne.n	800d74e <SDMMC_CmdWriteSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d760:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d764:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d768:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d76a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d76c:	075c      	lsls	r4, r3, #29
 800d76e:	d43c      	bmi.n	800d7ea <SDMMC_CmdWriteSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d770:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d772:	07d9      	lsls	r1, r3, #31
 800d774:	d407      	bmi.n	800d786 <SDMMC_CmdWriteSingleBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d776:	4b3b      	ldr	r3, [pc, #236]	@ (800d864 <SDMMC_CmdWriteSingleBlock+0x144>)
 800d778:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d77a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b18      	cmp	r3, #24
 800d780:	d004      	beq.n	800d78c <SDMMC_CmdWriteSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d782:	2001      	movs	r0, #1
 800d784:	e7ee      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d786:	2301      	movs	r3, #1
 800d788:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d78a:	e7fa      	b.n	800d782 <SDMMC_CmdWriteSingleBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d78c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d78e:	4836      	ldr	r0, [pc, #216]	@ (800d868 <SDMMC_CmdWriteSingleBlock+0x148>)
 800d790:	4018      	ands	r0, r3
 800d792:	2800      	cmp	r0, #0
 800d794:	d0e6      	beq.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d796:	2b00      	cmp	r3, #0
 800d798:	db2b      	blt.n	800d7f2 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d79a:	005a      	lsls	r2, r3, #1
 800d79c:	d42c      	bmi.n	800d7f8 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d79e:	009c      	lsls	r4, r3, #2
 800d7a0:	d42c      	bmi.n	800d7fc <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d7a2:	00d9      	lsls	r1, r3, #3
 800d7a4:	d42c      	bmi.n	800d800 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d7a6:	011a      	lsls	r2, r3, #4
 800d7a8:	d42d      	bmi.n	800d806 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d7aa:	015c      	lsls	r4, r3, #5
 800d7ac:	d42e      	bmi.n	800d80c <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d7ae:	01d9      	lsls	r1, r3, #7
 800d7b0:	d42f      	bmi.n	800d812 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d7b2:	021a      	lsls	r2, r3, #8
 800d7b4:	d430      	bmi.n	800d818 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7b6:	025c      	lsls	r4, r3, #9
 800d7b8:	d431      	bmi.n	800d81e <SDMMC_CmdWriteSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d7ba:	0299      	lsls	r1, r3, #10
 800d7bc:	d43b      	bmi.n	800d836 <SDMMC_CmdWriteSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7be:	02da      	lsls	r2, r3, #11
 800d7c0:	d436      	bmi.n	800d830 <SDMMC_CmdWriteSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d7c2:	035c      	lsls	r4, r3, #13
 800d7c4:	d431      	bmi.n	800d82a <SDMMC_CmdWriteSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d7c6:	0399      	lsls	r1, r3, #14
 800d7c8:	d42c      	bmi.n	800d824 <SDMMC_CmdWriteSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d7ca:	03da      	lsls	r2, r3, #15
 800d7cc:	d43f      	bmi.n	800d84e <SDMMC_CmdWriteSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d7ce:	041c      	lsls	r4, r3, #16
 800d7d0:	d43a      	bmi.n	800d848 <SDMMC_CmdWriteSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d7d2:	0459      	lsls	r1, r3, #17
 800d7d4:	d435      	bmi.n	800d842 <SDMMC_CmdWriteSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d7d6:	049a      	lsls	r2, r3, #18
 800d7d8:	d430      	bmi.n	800d83c <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d7da:	f013 0f08 	tst.w	r3, #8
 800d7de:	bf0c      	ite	eq
 800d7e0:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d7e4:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d7e8:	e7bc      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7ea:	2304      	movs	r3, #4
 800d7ec:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	e7b8      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d7f2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d7f6:	e7b5      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d7f8:	2040      	movs	r0, #64	@ 0x40
 800d7fa:	e7b3      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d7fc:	2080      	movs	r0, #128	@ 0x80
 800d7fe:	e7b1      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d800:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d804:	e7ae      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d806:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d80a:	e7ab      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d80c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d810:	e7a8      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d812:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d816:	e7a5      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d818:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d81c:	e7a2      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d81e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d822:	e79f      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d824:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d828:	e79c      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d82a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d82e:	e799      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d830:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d834:	e796      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d836:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d83a:	e793      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d83c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d840:	e790      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d842:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d846:	e78d      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d848:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d84c:	e78a      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d84e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d852:	e787      	b.n	800d764 <SDMMC_CmdWriteSingleBlock+0x44>
 800d854:	200001e0 	.word	0x200001e0
 800d858:	fffee0c0 	.word	0xfffee0c0
 800d85c:	10624dd3 	.word	0x10624dd3
 800d860:	00200045 	.word	0x00200045
 800d864:	002000c5 	.word	0x002000c5
 800d868:	fdffe008 	.word	0xfdffe008

0800d86c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d86c:	4a4c      	ldr	r2, [pc, #304]	@ (800d9a0 <SDMMC_CmdWriteMultiBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d86e:	4b4d      	ldr	r3, [pc, #308]	@ (800d9a4 <SDMMC_CmdWriteMultiBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d870:	6812      	ldr	r2, [r2, #0]
{
 800d872:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d874:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d876:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d878:	494b      	ldr	r1, [pc, #300]	@ (800d9a8 <SDMMC_CmdWriteMultiBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d87a:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d87c:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d880:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d884:	0a52      	lsrs	r2, r2, #9
 800d886:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d88a:	f043 0319 	orr.w	r3, r3, #25
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d88e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d892:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d894:	b152      	cbz	r2, 800d8ac <SDMMC_CmdWriteMultiBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d896:	4945      	ldr	r1, [pc, #276]	@ (800d9ac <SDMMC_CmdWriteMultiBlock+0x140>)
 800d898:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d89a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d89c:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d89e:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d8a2:	d001      	beq.n	800d8a8 <SDMMC_CmdWriteMultiBlock+0x3c>
 800d8a4:	0492      	lsls	r2, r2, #18
 800d8a6:	d506      	bpl.n	800d8b6 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800d8a8:	1c5c      	adds	r4, r3, #1
 800d8aa:	d1f6      	bne.n	800d89a <SDMMC_CmdWriteMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d8ac:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8b4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d8b8:	075c      	lsls	r4, r3, #29
 800d8ba:	d43c      	bmi.n	800d936 <SDMMC_CmdWriteMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8bc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d8be:	07d9      	lsls	r1, r3, #31
 800d8c0:	d407      	bmi.n	800d8d2 <SDMMC_CmdWriteMultiBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8c2:	4b3b      	ldr	r3, [pc, #236]	@ (800d9b0 <SDMMC_CmdWriteMultiBlock+0x144>)
 800d8c4:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d8c6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b19      	cmp	r3, #25
 800d8cc:	d004      	beq.n	800d8d8 <SDMMC_CmdWriteMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	e7ee      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8d6:	e7fa      	b.n	800d8ce <SDMMC_CmdWriteMultiBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d8d8:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d8da:	4836      	ldr	r0, [pc, #216]	@ (800d9b4 <SDMMC_CmdWriteMultiBlock+0x148>)
 800d8dc:	4018      	ands	r0, r3
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d0e6      	beq.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	db2b      	blt.n	800d93e <SDMMC_CmdWriteMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d8e6:	005a      	lsls	r2, r3, #1
 800d8e8:	d42c      	bmi.n	800d944 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d8ea:	009c      	lsls	r4, r3, #2
 800d8ec:	d42c      	bmi.n	800d948 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d8ee:	00d9      	lsls	r1, r3, #3
 800d8f0:	d42c      	bmi.n	800d94c <SDMMC_CmdWriteMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d8f2:	011a      	lsls	r2, r3, #4
 800d8f4:	d42d      	bmi.n	800d952 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d8f6:	015c      	lsls	r4, r3, #5
 800d8f8:	d42e      	bmi.n	800d958 <SDMMC_CmdWriteMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d8fa:	01d9      	lsls	r1, r3, #7
 800d8fc:	d42f      	bmi.n	800d95e <SDMMC_CmdWriteMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8fe:	021a      	lsls	r2, r3, #8
 800d900:	d430      	bmi.n	800d964 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d902:	025c      	lsls	r4, r3, #9
 800d904:	d431      	bmi.n	800d96a <SDMMC_CmdWriteMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d906:	0299      	lsls	r1, r3, #10
 800d908:	d43b      	bmi.n	800d982 <SDMMC_CmdWriteMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d90a:	02da      	lsls	r2, r3, #11
 800d90c:	d436      	bmi.n	800d97c <SDMMC_CmdWriteMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d90e:	035c      	lsls	r4, r3, #13
 800d910:	d431      	bmi.n	800d976 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d912:	0399      	lsls	r1, r3, #14
 800d914:	d42c      	bmi.n	800d970 <SDMMC_CmdWriteMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d916:	03da      	lsls	r2, r3, #15
 800d918:	d43f      	bmi.n	800d99a <SDMMC_CmdWriteMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d91a:	041c      	lsls	r4, r3, #16
 800d91c:	d43a      	bmi.n	800d994 <SDMMC_CmdWriteMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d91e:	0459      	lsls	r1, r3, #17
 800d920:	d435      	bmi.n	800d98e <SDMMC_CmdWriteMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d922:	049a      	lsls	r2, r3, #18
 800d924:	d430      	bmi.n	800d988 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d926:	f013 0f08 	tst.w	r3, #8
 800d92a:	bf0c      	ite	eq
 800d92c:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d930:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d934:	e7bc      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d936:	2304      	movs	r3, #4
 800d938:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d93a:	4618      	mov	r0, r3
 800d93c:	e7b8      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d93e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d942:	e7b5      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d944:	2040      	movs	r0, #64	@ 0x40
 800d946:	e7b3      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d948:	2080      	movs	r0, #128	@ 0x80
 800d94a:	e7b1      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d94c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d950:	e7ae      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d952:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d956:	e7ab      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d958:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d95c:	e7a8      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d95e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d962:	e7a5      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d964:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d968:	e7a2      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d96a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d96e:	e79f      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d970:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d974:	e79c      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d976:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d97a:	e799      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d97c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d980:	e796      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d982:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d986:	e793      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d988:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d98c:	e790      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d98e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d992:	e78d      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d994:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d998:	e78a      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d99a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d99e:	e787      	b.n	800d8b0 <SDMMC_CmdWriteMultiBlock+0x44>
 800d9a0:	200001e0 	.word	0x200001e0
 800d9a4:	fffee0c0 	.word	0xfffee0c0
 800d9a8:	10624dd3 	.word	0x10624dd3
 800d9ac:	00200045 	.word	0x00200045
 800d9b0:	002000c5 	.word	0x002000c5
 800d9b4:	fdffe008 	.word	0xfdffe008

0800d9b8 <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d9b8:	68c3      	ldr	r3, [r0, #12]
{
 800d9ba:	4601      	mov	r1, r0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d9bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
{
 800d9c0:	b410      	push	{r4}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d9c2:	60cb      	str	r3, [r1, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d9c4:	68ca      	ldr	r2, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9c6:	4c4f      	ldr	r4, [pc, #316]	@ (800db04 <SDMMC_CmdStopTransfer+0x14c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9c8:	4b4f      	ldr	r3, [pc, #316]	@ (800db08 <SDMMC_CmdStopTransfer+0x150>)
  SDMMCx->ARG = Command->Argument;
 800d9ca:	2000      	movs	r0, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d9cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9d0:	60ca      	str	r2, [r1, #12]
  SDMMCx->ARG = Command->Argument;
 800d9d2:	6088      	str	r0, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9d4:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9d6:	6822      	ldr	r2, [r4, #0]
 800d9d8:	4c4c      	ldr	r4, [pc, #304]	@ (800db0c <SDMMC_CmdStopTransfer+0x154>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9da:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9dc:	484c      	ldr	r0, [pc, #304]	@ (800db10 <SDMMC_CmdStopTransfer+0x158>)
 800d9de:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9e2:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9e6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9e8:	f043 030c 	orr.w	r3, r3, #12
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9ec:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9f0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800d9f2:	b152      	cbz	r2, 800da0a <SDMMC_CmdStopTransfer+0x52>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d9f4:	4847      	ldr	r0, [pc, #284]	@ (800db14 <SDMMC_CmdStopTransfer+0x15c>)
 800d9f6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d9f8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d9fa:	4202      	tst	r2, r0
    if (count-- == 0U)
 800d9fc:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800da00:	d001      	beq.n	800da06 <SDMMC_CmdStopTransfer+0x4e>
 800da02:	0494      	lsls	r4, r2, #18
 800da04:	d50a      	bpl.n	800da1c <SDMMC_CmdStopTransfer+0x64>
    if (count-- == 0U)
 800da06:	1c5a      	adds	r2, r3, #1
 800da08:	d1f6      	bne.n	800d9f8 <SDMMC_CmdStopTransfer+0x40>
      return SDMMC_ERROR_TIMEOUT;
 800da0a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800da0e:	68cb      	ldr	r3, [r1, #12]
}
 800da10:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800da14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da18:	60cb      	str	r3, [r1, #12]
}
 800da1a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da1c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800da1e:	075a      	lsls	r2, r3, #29
 800da20:	d43c      	bmi.n	800da9c <SDMMC_CmdStopTransfer+0xe4>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da22:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800da24:	07db      	lsls	r3, r3, #31
 800da26:	d407      	bmi.n	800da38 <SDMMC_CmdStopTransfer+0x80>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da28:	4b3b      	ldr	r3, [pc, #236]	@ (800db18 <SDMMC_CmdStopTransfer+0x160>)
 800da2a:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800da2c:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b0c      	cmp	r3, #12
 800da32:	d004      	beq.n	800da3e <SDMMC_CmdStopTransfer+0x86>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da34:	2001      	movs	r0, #1
 800da36:	e7ea      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da38:	2301      	movs	r3, #1
 800da3a:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da3c:	e7fa      	b.n	800da34 <SDMMC_CmdStopTransfer+0x7c>
  return (*(__IO uint32_t *) tmp);
 800da3e:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800da40:	4836      	ldr	r0, [pc, #216]	@ (800db1c <SDMMC_CmdStopTransfer+0x164>)
 800da42:	4018      	ands	r0, r3
 800da44:	2800      	cmp	r0, #0
 800da46:	d0e2      	beq.n	800da0e <SDMMC_CmdStopTransfer+0x56>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800da48:	2b00      	cmp	r3, #0
 800da4a:	db2a      	blt.n	800daa2 <SDMMC_CmdStopTransfer+0xea>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da4c:	005c      	lsls	r4, r3, #1
 800da4e:	d42b      	bmi.n	800daa8 <SDMMC_CmdStopTransfer+0xf0>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da50:	009a      	lsls	r2, r3, #2
 800da52:	d42b      	bmi.n	800daac <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da54:	00dc      	lsls	r4, r3, #3
 800da56:	d42b      	bmi.n	800dab0 <SDMMC_CmdStopTransfer+0xf8>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da58:	011a      	lsls	r2, r3, #4
 800da5a:	d42c      	bmi.n	800dab6 <SDMMC_CmdStopTransfer+0xfe>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da5c:	015c      	lsls	r4, r3, #5
 800da5e:	d42d      	bmi.n	800dabc <SDMMC_CmdStopTransfer+0x104>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da60:	01da      	lsls	r2, r3, #7
 800da62:	d42e      	bmi.n	800dac2 <SDMMC_CmdStopTransfer+0x10a>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da64:	021c      	lsls	r4, r3, #8
 800da66:	d42f      	bmi.n	800dac8 <SDMMC_CmdStopTransfer+0x110>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da68:	025a      	lsls	r2, r3, #9
 800da6a:	d430      	bmi.n	800dace <SDMMC_CmdStopTransfer+0x116>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da6c:	029c      	lsls	r4, r3, #10
 800da6e:	d43a      	bmi.n	800dae6 <SDMMC_CmdStopTransfer+0x12e>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da70:	02da      	lsls	r2, r3, #11
 800da72:	d435      	bmi.n	800dae0 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da74:	035c      	lsls	r4, r3, #13
 800da76:	d430      	bmi.n	800dada <SDMMC_CmdStopTransfer+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da78:	039a      	lsls	r2, r3, #14
 800da7a:	d42b      	bmi.n	800dad4 <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da7c:	03dc      	lsls	r4, r3, #15
 800da7e:	d43e      	bmi.n	800dafe <SDMMC_CmdStopTransfer+0x146>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da80:	041a      	lsls	r2, r3, #16
 800da82:	d439      	bmi.n	800daf8 <SDMMC_CmdStopTransfer+0x140>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da84:	045c      	lsls	r4, r3, #17
 800da86:	d434      	bmi.n	800daf2 <SDMMC_CmdStopTransfer+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da88:	049a      	lsls	r2, r3, #18
 800da8a:	d42f      	bmi.n	800daec <SDMMC_CmdStopTransfer+0x134>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da8c:	f013 0f08 	tst.w	r3, #8
 800da90:	bf0c      	ite	eq
 800da92:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800da96:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800da9a:	e7b8      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da9c:	2004      	movs	r0, #4
 800da9e:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daa0:	e7b5      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800daa2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800daa6:	e7b2      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800daa8:	2040      	movs	r0, #64	@ 0x40
 800daaa:	e7b0      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800daac:	2080      	movs	r0, #128	@ 0x80
 800daae:	e7ae      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dab0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dab4:	e7ab      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dab6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800daba:	e7a8      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dabc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dac0:	e7a5      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dac2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dac6:	e7a2      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dac8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dacc:	e79f      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dace:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dad2:	e79c      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dad4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dad8:	e799      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dada:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dade:	e796      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CC_ERR;
 800dae0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800dae4:	e793      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dae6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800daea:	e790      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ERASE_RESET;
 800daec:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800daf0:	e78d      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800daf2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800daf6:	e78a      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800daf8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dafc:	e787      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dafe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800db02:	e784      	b.n	800da0e <SDMMC_CmdStopTransfer+0x56>
 800db04:	200001e0 	.word	0x200001e0
 800db08:	fffee0c0 	.word	0xfffee0c0
 800db0c:	05f5e100 	.word	0x05f5e100
 800db10:	10624dd3 	.word	0x10624dd3
 800db14:	00200045 	.word	0x00200045
 800db18:	002000c5 	.word	0x002000c5
 800db1c:	fdffe008 	.word	0xfdffe008

0800db20 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db20:	494c      	ldr	r1, [pc, #304]	@ (800dc54 <SDMMC_CmdSelDesel+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db22:	4b4d      	ldr	r3, [pc, #308]	@ (800dc58 <SDMMC_CmdSelDesel+0x138>)
{
 800db24:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800db26:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db28:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db2a:	680a      	ldr	r2, [r1, #0]
 800db2c:	494b      	ldr	r1, [pc, #300]	@ (800dc5c <SDMMC_CmdSelDesel+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db2e:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db30:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db34:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db38:	0a52      	lsrs	r2, r2, #9
 800db3a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db3e:	f043 0307 	orr.w	r3, r3, #7
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db42:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db46:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800db48:	b152      	cbz	r2, 800db60 <SDMMC_CmdSelDesel+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800db4a:	4945      	ldr	r1, [pc, #276]	@ (800dc60 <SDMMC_CmdSelDesel+0x140>)
 800db4c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800db4e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800db50:	420a      	tst	r2, r1
    if (count-- == 0U)
 800db52:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800db56:	d001      	beq.n	800db5c <SDMMC_CmdSelDesel+0x3c>
 800db58:	0492      	lsls	r2, r2, #18
 800db5a:	d506      	bpl.n	800db6a <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800db5c:	1c5c      	adds	r4, r3, #1
 800db5e:	d1f6      	bne.n	800db4e <SDMMC_CmdSelDesel+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800db60:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800db64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db68:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db6a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800db6c:	075c      	lsls	r4, r3, #29
 800db6e:	d43c      	bmi.n	800dbea <SDMMC_CmdSelDesel+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db70:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800db72:	07d9      	lsls	r1, r3, #31
 800db74:	d407      	bmi.n	800db86 <SDMMC_CmdSelDesel+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db76:	4b3b      	ldr	r3, [pc, #236]	@ (800dc64 <SDMMC_CmdSelDesel+0x144>)
 800db78:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800db7a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	2b07      	cmp	r3, #7
 800db80:	d004      	beq.n	800db8c <SDMMC_CmdSelDesel+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db82:	2001      	movs	r0, #1
 800db84:	e7ee      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db86:	2301      	movs	r3, #1
 800db88:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db8a:	e7fa      	b.n	800db82 <SDMMC_CmdSelDesel+0x62>
  return (*(__IO uint32_t *) tmp);
 800db8c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800db8e:	4836      	ldr	r0, [pc, #216]	@ (800dc68 <SDMMC_CmdSelDesel+0x148>)
 800db90:	4018      	ands	r0, r3
 800db92:	2800      	cmp	r0, #0
 800db94:	d0e6      	beq.n	800db64 <SDMMC_CmdSelDesel+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800db96:	2b00      	cmp	r3, #0
 800db98:	db2b      	blt.n	800dbf2 <SDMMC_CmdSelDesel+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800db9a:	005a      	lsls	r2, r3, #1
 800db9c:	d42c      	bmi.n	800dbf8 <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800db9e:	009c      	lsls	r4, r3, #2
 800dba0:	d42c      	bmi.n	800dbfc <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dba2:	00d9      	lsls	r1, r3, #3
 800dba4:	d42c      	bmi.n	800dc00 <SDMMC_CmdSelDesel+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dba6:	011a      	lsls	r2, r3, #4
 800dba8:	d42d      	bmi.n	800dc06 <SDMMC_CmdSelDesel+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dbaa:	015c      	lsls	r4, r3, #5
 800dbac:	d42e      	bmi.n	800dc0c <SDMMC_CmdSelDesel+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dbae:	01d9      	lsls	r1, r3, #7
 800dbb0:	d42f      	bmi.n	800dc12 <SDMMC_CmdSelDesel+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dbb2:	021a      	lsls	r2, r3, #8
 800dbb4:	d430      	bmi.n	800dc18 <SDMMC_CmdSelDesel+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dbb6:	025c      	lsls	r4, r3, #9
 800dbb8:	d431      	bmi.n	800dc1e <SDMMC_CmdSelDesel+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dbba:	0299      	lsls	r1, r3, #10
 800dbbc:	d43b      	bmi.n	800dc36 <SDMMC_CmdSelDesel+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dbbe:	02da      	lsls	r2, r3, #11
 800dbc0:	d436      	bmi.n	800dc30 <SDMMC_CmdSelDesel+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dbc2:	035c      	lsls	r4, r3, #13
 800dbc4:	d431      	bmi.n	800dc2a <SDMMC_CmdSelDesel+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dbc6:	0399      	lsls	r1, r3, #14
 800dbc8:	d42c      	bmi.n	800dc24 <SDMMC_CmdSelDesel+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dbca:	03da      	lsls	r2, r3, #15
 800dbcc:	d43f      	bmi.n	800dc4e <SDMMC_CmdSelDesel+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dbce:	041c      	lsls	r4, r3, #16
 800dbd0:	d43a      	bmi.n	800dc48 <SDMMC_CmdSelDesel+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dbd2:	0459      	lsls	r1, r3, #17
 800dbd4:	d435      	bmi.n	800dc42 <SDMMC_CmdSelDesel+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dbd6:	049a      	lsls	r2, r3, #18
 800dbd8:	d430      	bmi.n	800dc3c <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dbda:	f013 0f08 	tst.w	r3, #8
 800dbde:	bf0c      	ite	eq
 800dbe0:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800dbe4:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800dbe8:	e7bc      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbea:	2304      	movs	r3, #4
 800dbec:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbee:	4618      	mov	r0, r3
 800dbf0:	e7b8      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dbf2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800dbf6:	e7b5      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dbf8:	2040      	movs	r0, #64	@ 0x40
 800dbfa:	e7b3      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dbfc:	2080      	movs	r0, #128	@ 0x80
 800dbfe:	e7b1      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dc00:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dc04:	e7ae      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dc06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dc0a:	e7ab      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dc0c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dc10:	e7a8      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dc12:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dc16:	e7a5      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc18:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dc1c:	e7a2      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc1e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dc22:	e79f      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dc24:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dc28:	e79c      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dc2a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dc2e:	e799      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CC_ERR;
 800dc30:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800dc34:	e796      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc36:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dc3a:	e793      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800dc3c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800dc40:	e790      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dc42:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dc46:	e78d      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dc48:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dc4c:	e78a      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc4e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800dc52:	e787      	b.n	800db64 <SDMMC_CmdSelDesel+0x44>
 800dc54:	200001e0 	.word	0x200001e0
 800dc58:	fffee0c0 	.word	0xfffee0c0
 800dc5c:	10624dd3 	.word	0x10624dd3
 800dc60:	00200045 	.word	0x00200045
 800dc64:	002000c5 	.word	0x002000c5
 800dc68:	fdffe008 	.word	0xfdffe008

0800dc6c <SDMMC_CmdGoIdleState>:
  SDMMCx->ARG = Command->Argument;
 800dc6c:	2200      	movs	r2, #0
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc6e:	4b11      	ldr	r3, [pc, #68]	@ (800dcb4 <SDMMC_CmdGoIdleState+0x48>)
 800dc70:	4911      	ldr	r1, [pc, #68]	@ (800dcb8 <SDMMC_CmdGoIdleState+0x4c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
{
 800dc74:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dc76:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc78:	68c4      	ldr	r4, [r0, #12]
 800dc7a:	4a10      	ldr	r2, [pc, #64]	@ (800dcbc <SDMMC_CmdGoIdleState+0x50>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc7c:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc80:	4022      	ands	r2, r4
 800dc82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc86:	0a5b      	lsrs	r3, r3, #9
 800dc88:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc8c:	60c2      	str	r2, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc8e:	fb01 f303 	mul.w	r3, r1, r3
 800dc92:	e002      	b.n	800dc9a <SDMMC_CmdGoIdleState+0x2e>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc94:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800dc96:	0612      	lsls	r2, r2, #24
 800dc98:	d406      	bmi.n	800dca8 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	d2fa      	bcs.n	800dc94 <SDMMC_CmdGoIdleState+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800dc9e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dca6:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dca8:	4b05      	ldr	r3, [pc, #20]	@ (800dcc0 <SDMMC_CmdGoIdleState+0x54>)
 800dcaa:	6383      	str	r3, [r0, #56]	@ 0x38
}
 800dcac:	f85d 4b04 	ldr.w	r4, [sp], #4

  return SDMMC_ERROR_NONE;
 800dcb0:	2000      	movs	r0, #0
}
 800dcb2:	4770      	bx	lr
 800dcb4:	200001e0 	.word	0x200001e0
 800dcb8:	10624dd3 	.word	0x10624dd3
 800dcbc:	fffee0c0 	.word	0xfffee0c0
 800dcc0:	002000c5 	.word	0x002000c5

0800dcc4 <SDMMC_CmdOperCond>:
  SDMMCx->ARG = Command->Argument;
 800dcc4:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcc8:	4a1c      	ldr	r2, [pc, #112]	@ (800dd3c <SDMMC_CmdOperCond+0x78>)
{
 800dcca:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dccc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dcce:	68c4      	ldr	r4, [r0, #12]
 800dcd0:	4b1b      	ldr	r3, [pc, #108]	@ (800dd40 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcd2:	6812      	ldr	r2, [r2, #0]
{
 800dcd4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcd6:	481b      	ldr	r0, [pc, #108]	@ (800dd44 <SDMMC_CmdOperCond+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dcd8:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcda:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dcde:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dce2:	0a52      	lsrs	r2, r2, #9
 800dce4:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dce8:	f043 0308 	orr.w	r3, r3, #8
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcec:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dcf0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800dcf2:	1e53      	subs	r3, r2, #1
 800dcf4:	b14a      	cbz	r2, 800dd0a <SDMMC_CmdOperCond+0x46>
    sta_reg = SDMMCx->STA;
 800dcf6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcf8:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800dcfc:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd00:	d001      	beq.n	800dd06 <SDMMC_CmdOperCond+0x42>
 800dd02:	0490      	lsls	r0, r2, #18
 800dd04:	d506      	bpl.n	800dd14 <SDMMC_CmdOperCond+0x50>
    if (count-- == 0U)
 800dd06:	1c5c      	adds	r4, r3, #1
 800dd08:	d1f5      	bne.n	800dcf6 <SDMMC_CmdOperCond+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800dd0a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dd0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd12:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd14:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800dd16:	075a      	lsls	r2, r3, #29
 800dd18:	d40c      	bmi.n	800dd34 <SDMMC_CmdOperCond+0x70>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd1a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800dd1c:	f010 0001 	ands.w	r0, r0, #1
 800dd20:	d105      	bne.n	800dd2e <SDMMC_CmdOperCond+0x6a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dd22:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800dd24:	065b      	lsls	r3, r3, #25
 800dd26:	d5f2      	bpl.n	800dd0e <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dd28:	2340      	movs	r3, #64	@ 0x40
 800dd2a:	638b      	str	r3, [r1, #56]	@ 0x38
 800dd2c:	e7ef      	b.n	800dd0e <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd2e:	2301      	movs	r3, #1
 800dd30:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd32:	e7ec      	b.n	800dd0e <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd34:	2004      	movs	r0, #4
 800dd36:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd38:	e7e9      	b.n	800dd0e <SDMMC_CmdOperCond+0x4a>
 800dd3a:	bf00      	nop
 800dd3c:	200001e0 	.word	0x200001e0
 800dd40:	fffee0c0 	.word	0xfffee0c0
 800dd44:	10624dd3 	.word	0x10624dd3

0800dd48 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd48:	4a4c      	ldr	r2, [pc, #304]	@ (800de7c <SDMMC_CmdAppCommand+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd4a:	4b4d      	ldr	r3, [pc, #308]	@ (800de80 <SDMMC_CmdAppCommand+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd4c:	6812      	ldr	r2, [r2, #0]
{
 800dd4e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dd50:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd52:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd54:	494b      	ldr	r1, [pc, #300]	@ (800de84 <SDMMC_CmdAppCommand+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd56:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd58:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd5c:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd60:	0a52      	lsrs	r2, r2, #9
 800dd62:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd66:	f043 0317 	orr.w	r3, r3, #23
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd6a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd6e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dd70:	b152      	cbz	r2, 800dd88 <SDMMC_CmdAppCommand+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dd72:	4945      	ldr	r1, [pc, #276]	@ (800de88 <SDMMC_CmdAppCommand+0x140>)
 800dd74:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800dd76:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dd78:	420a      	tst	r2, r1
    if (count-- == 0U)
 800dd7a:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dd7e:	d001      	beq.n	800dd84 <SDMMC_CmdAppCommand+0x3c>
 800dd80:	0492      	lsls	r2, r2, #18
 800dd82:	d506      	bpl.n	800dd92 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800dd84:	1c5c      	adds	r4, r3, #1
 800dd86:	d1f6      	bne.n	800dd76 <SDMMC_CmdAppCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800dd88:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dd8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd90:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd92:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dd94:	075c      	lsls	r4, r3, #29
 800dd96:	d43c      	bmi.n	800de12 <SDMMC_CmdAppCommand+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd98:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dd9a:	07d9      	lsls	r1, r3, #31
 800dd9c:	d407      	bmi.n	800ddae <SDMMC_CmdAppCommand+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd9e:	4b3b      	ldr	r3, [pc, #236]	@ (800de8c <SDMMC_CmdAppCommand+0x144>)
 800dda0:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dda2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2b37      	cmp	r3, #55	@ 0x37
 800dda8:	d004      	beq.n	800ddb4 <SDMMC_CmdAppCommand+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddaa:	2001      	movs	r0, #1
 800ddac:	e7ee      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ddae:	2301      	movs	r3, #1
 800ddb0:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddb2:	e7fa      	b.n	800ddaa <SDMMC_CmdAppCommand+0x62>
  return (*(__IO uint32_t *) tmp);
 800ddb4:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ddb6:	4836      	ldr	r0, [pc, #216]	@ (800de90 <SDMMC_CmdAppCommand+0x148>)
 800ddb8:	4018      	ands	r0, r3
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	d0e6      	beq.n	800dd8c <SDMMC_CmdAppCommand+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	db2b      	blt.n	800de1a <SDMMC_CmdAppCommand+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ddc2:	005a      	lsls	r2, r3, #1
 800ddc4:	d42c      	bmi.n	800de20 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ddc6:	009c      	lsls	r4, r3, #2
 800ddc8:	d42c      	bmi.n	800de24 <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ddca:	00d9      	lsls	r1, r3, #3
 800ddcc:	d42c      	bmi.n	800de28 <SDMMC_CmdAppCommand+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ddce:	011a      	lsls	r2, r3, #4
 800ddd0:	d42d      	bmi.n	800de2e <SDMMC_CmdAppCommand+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ddd2:	015c      	lsls	r4, r3, #5
 800ddd4:	d42e      	bmi.n	800de34 <SDMMC_CmdAppCommand+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ddd6:	01d9      	lsls	r1, r3, #7
 800ddd8:	d42f      	bmi.n	800de3a <SDMMC_CmdAppCommand+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ddda:	021a      	lsls	r2, r3, #8
 800dddc:	d430      	bmi.n	800de40 <SDMMC_CmdAppCommand+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ddde:	025c      	lsls	r4, r3, #9
 800dde0:	d431      	bmi.n	800de46 <SDMMC_CmdAppCommand+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dde2:	0299      	lsls	r1, r3, #10
 800dde4:	d43b      	bmi.n	800de5e <SDMMC_CmdAppCommand+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dde6:	02da      	lsls	r2, r3, #11
 800dde8:	d436      	bmi.n	800de58 <SDMMC_CmdAppCommand+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ddea:	035c      	lsls	r4, r3, #13
 800ddec:	d431      	bmi.n	800de52 <SDMMC_CmdAppCommand+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ddee:	0399      	lsls	r1, r3, #14
 800ddf0:	d42c      	bmi.n	800de4c <SDMMC_CmdAppCommand+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ddf2:	03da      	lsls	r2, r3, #15
 800ddf4:	d43f      	bmi.n	800de76 <SDMMC_CmdAppCommand+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ddf6:	041c      	lsls	r4, r3, #16
 800ddf8:	d43a      	bmi.n	800de70 <SDMMC_CmdAppCommand+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ddfa:	0459      	lsls	r1, r3, #17
 800ddfc:	d435      	bmi.n	800de6a <SDMMC_CmdAppCommand+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ddfe:	049a      	lsls	r2, r3, #18
 800de00:	d430      	bmi.n	800de64 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800de02:	f013 0f08 	tst.w	r3, #8
 800de06:	bf0c      	ite	eq
 800de08:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800de0c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800de10:	e7bc      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de12:	2304      	movs	r3, #4
 800de14:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de16:	4618      	mov	r0, r3
 800de18:	e7b8      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800de1a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800de1e:	e7b5      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800de20:	2040      	movs	r0, #64	@ 0x40
 800de22:	e7b3      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800de24:	2080      	movs	r0, #128	@ 0x80
 800de26:	e7b1      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800de28:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800de2c:	e7ae      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800de2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800de32:	e7ab      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800de34:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800de38:	e7a8      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800de3a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800de3e:	e7a5      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de40:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800de44:	e7a2      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de46:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800de4a:	e79f      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800de4c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800de50:	e79c      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800de52:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800de56:	e799      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CC_ERR;
 800de58:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800de5c:	e796      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800de5e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800de62:	e793      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800de64:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800de68:	e790      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800de6a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800de6e:	e78d      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800de70:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800de74:	e78a      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800de76:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800de7a:	e787      	b.n	800dd8c <SDMMC_CmdAppCommand+0x44>
 800de7c:	200001e0 	.word	0x200001e0
 800de80:	fffee0c0 	.word	0xfffee0c0
 800de84:	10624dd3 	.word	0x10624dd3
 800de88:	00200045 	.word	0x00200045
 800de8c:	002000c5 	.word	0x002000c5
 800de90:	fdffe008 	.word	0xfdffe008

0800de94 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de94:	4a18      	ldr	r2, [pc, #96]	@ (800def8 <SDMMC_CmdAppOperCommand+0x64>)
  SDMMCx->ARG = Command->Argument;
 800de96:	6081      	str	r1, [r0, #8]
{
 800de98:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de9a:	4918      	ldr	r1, [pc, #96]	@ (800defc <SDMMC_CmdAppOperCommand+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de9c:	68c0      	ldr	r0, [r0, #12]
 800de9e:	4b18      	ldr	r3, [pc, #96]	@ (800df00 <SDMMC_CmdAppOperCommand+0x6c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dea0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dea2:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dea4:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dea8:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800deac:	0a52      	lsrs	r2, r2, #9
 800deae:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800deb2:	f043 0309 	orr.w	r3, r3, #9
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800deb6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800deba:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800debe:	1e53      	subs	r3, r2, #1
 800dec0:	b152      	cbz	r2, 800ded8 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800dec2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dec6:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800deca:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dece:	d001      	beq.n	800ded4 <SDMMC_CmdAppOperCommand+0x40>
 800ded0:	0492      	lsls	r2, r2, #18
 800ded2:	d504      	bpl.n	800dede <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800ded4:	1c59      	adds	r1, r3, #1
 800ded6:	d1f4      	bne.n	800dec2 <SDMMC_CmdAppOperCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800ded8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dedc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dede:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800dee2:	f010 0004 	ands.w	r0, r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dee6:	bf15      	itete	ne
 800dee8:	2004      	movne	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800deea:	4b06      	ldreq	r3, [pc, #24]	@ (800df04 <SDMMC_CmdAppOperCommand+0x70>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800deec:	f8cc 0038 	strne.w	r0, [ip, #56]	@ 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800def0:	f8cc 3038 	streq.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	200001e0 	.word	0x200001e0
 800defc:	10624dd3 	.word	0x10624dd3
 800df00:	fffee0c0 	.word	0xfffee0c0
 800df04:	002000c5 	.word	0x002000c5

0800df08 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df08:	4a4c      	ldr	r2, [pc, #304]	@ (800e03c <SDMMC_CmdBusWidth+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df0a:	4b4d      	ldr	r3, [pc, #308]	@ (800e040 <SDMMC_CmdBusWidth+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df0c:	6812      	ldr	r2, [r2, #0]
{
 800df0e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800df10:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df12:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df14:	494b      	ldr	r1, [pc, #300]	@ (800e044 <SDMMC_CmdBusWidth+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df16:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df18:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df1c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df20:	0a52      	lsrs	r2, r2, #9
 800df22:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df26:	f043 0306 	orr.w	r3, r3, #6
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df2a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df2e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800df30:	b152      	cbz	r2, 800df48 <SDMMC_CmdBusWidth+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800df32:	4945      	ldr	r1, [pc, #276]	@ (800e048 <SDMMC_CmdBusWidth+0x140>)
 800df34:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800df36:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800df38:	420a      	tst	r2, r1
    if (count-- == 0U)
 800df3a:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800df3e:	d001      	beq.n	800df44 <SDMMC_CmdBusWidth+0x3c>
 800df40:	0492      	lsls	r2, r2, #18
 800df42:	d506      	bpl.n	800df52 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800df44:	1c5c      	adds	r4, r3, #1
 800df46:	d1f6      	bne.n	800df36 <SDMMC_CmdBusWidth+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800df48:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800df4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df50:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df52:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800df54:	075c      	lsls	r4, r3, #29
 800df56:	d43c      	bmi.n	800dfd2 <SDMMC_CmdBusWidth+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df58:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800df5a:	07d9      	lsls	r1, r3, #31
 800df5c:	d407      	bmi.n	800df6e <SDMMC_CmdBusWidth+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df5e:	4b3b      	ldr	r3, [pc, #236]	@ (800e04c <SDMMC_CmdBusWidth+0x144>)
 800df60:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800df62:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b06      	cmp	r3, #6
 800df68:	d004      	beq.n	800df74 <SDMMC_CmdBusWidth+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df6a:	2001      	movs	r0, #1
 800df6c:	e7ee      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df6e:	2301      	movs	r3, #1
 800df70:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df72:	e7fa      	b.n	800df6a <SDMMC_CmdBusWidth+0x62>
  return (*(__IO uint32_t *) tmp);
 800df74:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df76:	4836      	ldr	r0, [pc, #216]	@ (800e050 <SDMMC_CmdBusWidth+0x148>)
 800df78:	4018      	ands	r0, r3
 800df7a:	2800      	cmp	r0, #0
 800df7c:	d0e6      	beq.n	800df4c <SDMMC_CmdBusWidth+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df7e:	2b00      	cmp	r3, #0
 800df80:	db2b      	blt.n	800dfda <SDMMC_CmdBusWidth+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df82:	005a      	lsls	r2, r3, #1
 800df84:	d42c      	bmi.n	800dfe0 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df86:	009c      	lsls	r4, r3, #2
 800df88:	d42c      	bmi.n	800dfe4 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df8a:	00d9      	lsls	r1, r3, #3
 800df8c:	d42c      	bmi.n	800dfe8 <SDMMC_CmdBusWidth+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df8e:	011a      	lsls	r2, r3, #4
 800df90:	d42d      	bmi.n	800dfee <SDMMC_CmdBusWidth+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800df92:	015c      	lsls	r4, r3, #5
 800df94:	d42e      	bmi.n	800dff4 <SDMMC_CmdBusWidth+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800df96:	01d9      	lsls	r1, r3, #7
 800df98:	d42f      	bmi.n	800dffa <SDMMC_CmdBusWidth+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800df9a:	021a      	lsls	r2, r3, #8
 800df9c:	d430      	bmi.n	800e000 <SDMMC_CmdBusWidth+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800df9e:	025c      	lsls	r4, r3, #9
 800dfa0:	d431      	bmi.n	800e006 <SDMMC_CmdBusWidth+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dfa2:	0299      	lsls	r1, r3, #10
 800dfa4:	d43b      	bmi.n	800e01e <SDMMC_CmdBusWidth+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dfa6:	02da      	lsls	r2, r3, #11
 800dfa8:	d436      	bmi.n	800e018 <SDMMC_CmdBusWidth+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dfaa:	035c      	lsls	r4, r3, #13
 800dfac:	d431      	bmi.n	800e012 <SDMMC_CmdBusWidth+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dfae:	0399      	lsls	r1, r3, #14
 800dfb0:	d42c      	bmi.n	800e00c <SDMMC_CmdBusWidth+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dfb2:	03da      	lsls	r2, r3, #15
 800dfb4:	d43f      	bmi.n	800e036 <SDMMC_CmdBusWidth+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dfb6:	041c      	lsls	r4, r3, #16
 800dfb8:	d43a      	bmi.n	800e030 <SDMMC_CmdBusWidth+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dfba:	0459      	lsls	r1, r3, #17
 800dfbc:	d435      	bmi.n	800e02a <SDMMC_CmdBusWidth+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dfbe:	049a      	lsls	r2, r3, #18
 800dfc0:	d430      	bmi.n	800e024 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dfc2:	f013 0f08 	tst.w	r3, #8
 800dfc6:	bf0c      	ite	eq
 800dfc8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800dfcc:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800dfd0:	e7bc      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfd2:	2304      	movs	r3, #4
 800dfd4:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	e7b8      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dfda:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800dfde:	e7b5      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dfe0:	2040      	movs	r0, #64	@ 0x40
 800dfe2:	e7b3      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dfe4:	2080      	movs	r0, #128	@ 0x80
 800dfe6:	e7b1      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dfe8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dfec:	e7ae      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dfee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dff2:	e7ab      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dff4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dff8:	e7a8      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dffa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dffe:	e7a5      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e000:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e004:	e7a2      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e006:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e00a:	e79f      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e00c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e010:	e79c      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e012:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e016:	e799      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CC_ERR;
 800e018:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e01c:	e796      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e01e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e022:	e793      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800e024:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e028:	e790      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e02a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e02e:	e78d      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e030:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e034:	e78a      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e036:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e03a:	e787      	b.n	800df4c <SDMMC_CmdBusWidth+0x44>
 800e03c:	200001e0 	.word	0x200001e0
 800e040:	fffee0c0 	.word	0xfffee0c0
 800e044:	10624dd3 	.word	0x10624dd3
 800e048:	00200045 	.word	0x00200045
 800e04c:	002000c5 	.word	0x002000c5
 800e050:	fdffe008 	.word	0xfdffe008

0800e054 <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 800e054:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e056:	4a4d      	ldr	r2, [pc, #308]	@ (800e18c <SDMMC_CmdSendSCR+0x138>)
 800e058:	494d      	ldr	r1, [pc, #308]	@ (800e190 <SDMMC_CmdSendSCR+0x13c>)
 800e05a:	6812      	ldr	r2, [r2, #0]
{
 800e05c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e05e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e060:	68c4      	ldr	r4, [r0, #12]
 800e062:	4b4c      	ldr	r3, [pc, #304]	@ (800e194 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e064:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e068:	4023      	ands	r3, r4
 800e06a:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e06e:	0a52      	lsrs	r2, r2, #9
 800e070:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e074:	f043 0313 	orr.w	r3, r3, #19
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e078:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e07c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e07e:	b152      	cbz	r2, 800e096 <SDMMC_CmdSendSCR+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e080:	4945      	ldr	r1, [pc, #276]	@ (800e198 <SDMMC_CmdSendSCR+0x144>)
 800e082:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e084:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e086:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e088:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e08c:	d001      	beq.n	800e092 <SDMMC_CmdSendSCR+0x3e>
 800e08e:	0492      	lsls	r2, r2, #18
 800e090:	d506      	bpl.n	800e0a0 <SDMMC_CmdSendSCR+0x4c>
    if (count-- == 0U)
 800e092:	1c5c      	adds	r4, r3, #1
 800e094:	d1f6      	bne.n	800e084 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e096:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e09a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e09e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e0a2:	075c      	lsls	r4, r3, #29
 800e0a4:	d43c      	bmi.n	800e120 <SDMMC_CmdSendSCR+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0a6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e0a8:	07d9      	lsls	r1, r3, #31
 800e0aa:	d407      	bmi.n	800e0bc <SDMMC_CmdSendSCR+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0ac:	4b3b      	ldr	r3, [pc, #236]	@ (800e19c <SDMMC_CmdSendSCR+0x148>)
 800e0ae:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e0b0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	2b33      	cmp	r3, #51	@ 0x33
 800e0b6:	d004      	beq.n	800e0c2 <SDMMC_CmdSendSCR+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0b8:	2001      	movs	r0, #1
 800e0ba:	e7ee      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0bc:	2301      	movs	r3, #1
 800e0be:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0c0:	e7fa      	b.n	800e0b8 <SDMMC_CmdSendSCR+0x64>
  return (*(__IO uint32_t *) tmp);
 800e0c2:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e0c4:	4836      	ldr	r0, [pc, #216]	@ (800e1a0 <SDMMC_CmdSendSCR+0x14c>)
 800e0c6:	4018      	ands	r0, r3
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d0e6      	beq.n	800e09a <SDMMC_CmdSendSCR+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	db2b      	blt.n	800e128 <SDMMC_CmdSendSCR+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e0d0:	005a      	lsls	r2, r3, #1
 800e0d2:	d42c      	bmi.n	800e12e <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e0d4:	009c      	lsls	r4, r3, #2
 800e0d6:	d42c      	bmi.n	800e132 <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e0d8:	00d9      	lsls	r1, r3, #3
 800e0da:	d42c      	bmi.n	800e136 <SDMMC_CmdSendSCR+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e0dc:	011a      	lsls	r2, r3, #4
 800e0de:	d42d      	bmi.n	800e13c <SDMMC_CmdSendSCR+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e0e0:	015c      	lsls	r4, r3, #5
 800e0e2:	d42e      	bmi.n	800e142 <SDMMC_CmdSendSCR+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e0e4:	01d9      	lsls	r1, r3, #7
 800e0e6:	d42f      	bmi.n	800e148 <SDMMC_CmdSendSCR+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e0e8:	021a      	lsls	r2, r3, #8
 800e0ea:	d430      	bmi.n	800e14e <SDMMC_CmdSendSCR+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e0ec:	025c      	lsls	r4, r3, #9
 800e0ee:	d431      	bmi.n	800e154 <SDMMC_CmdSendSCR+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e0f0:	0299      	lsls	r1, r3, #10
 800e0f2:	d43b      	bmi.n	800e16c <SDMMC_CmdSendSCR+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e0f4:	02da      	lsls	r2, r3, #11
 800e0f6:	d436      	bmi.n	800e166 <SDMMC_CmdSendSCR+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e0f8:	035c      	lsls	r4, r3, #13
 800e0fa:	d431      	bmi.n	800e160 <SDMMC_CmdSendSCR+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e0fc:	0399      	lsls	r1, r3, #14
 800e0fe:	d42c      	bmi.n	800e15a <SDMMC_CmdSendSCR+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e100:	03da      	lsls	r2, r3, #15
 800e102:	d43f      	bmi.n	800e184 <SDMMC_CmdSendSCR+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e104:	041c      	lsls	r4, r3, #16
 800e106:	d43a      	bmi.n	800e17e <SDMMC_CmdSendSCR+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e108:	0459      	lsls	r1, r3, #17
 800e10a:	d435      	bmi.n	800e178 <SDMMC_CmdSendSCR+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e10c:	049a      	lsls	r2, r3, #18
 800e10e:	d430      	bmi.n	800e172 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e110:	f013 0f08 	tst.w	r3, #8
 800e114:	bf0c      	ite	eq
 800e116:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e11a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e11e:	e7bc      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e120:	2304      	movs	r3, #4
 800e122:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e124:	4618      	mov	r0, r3
 800e126:	e7b8      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e128:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e12c:	e7b5      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e12e:	2040      	movs	r0, #64	@ 0x40
 800e130:	e7b3      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e132:	2080      	movs	r0, #128	@ 0x80
 800e134:	e7b1      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e136:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e13a:	e7ae      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e13c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e140:	e7ab      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e142:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e146:	e7a8      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e148:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e14c:	e7a5      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e14e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e152:	e7a2      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e154:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e158:	e79f      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e15a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e15e:	e79c      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e160:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e164:	e799      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CC_ERR;
 800e166:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e16a:	e796      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e16c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e170:	e793      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800e172:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e176:	e790      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e178:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e17c:	e78d      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e17e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e182:	e78a      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e184:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e188:	e787      	b.n	800e09a <SDMMC_CmdSendSCR+0x46>
 800e18a:	bf00      	nop
 800e18c:	200001e0 	.word	0x200001e0
 800e190:	10624dd3 	.word	0x10624dd3
 800e194:	fffee0c0 	.word	0xfffee0c0
 800e198:	00200045 	.word	0x00200045
 800e19c:	002000c5 	.word	0x002000c5
 800e1a0:	fdffe008 	.word	0xfdffe008

0800e1a4 <SDMMC_CmdSendCID>:
  SDMMCx->ARG = Command->Argument;
 800e1a4:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1a6:	4a1b      	ldr	r2, [pc, #108]	@ (800e214 <SDMMC_CmdSendCID+0x70>)
{
 800e1a8:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e1aa:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1ac:	68c4      	ldr	r4, [r0, #12]
 800e1ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e218 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1b0:	6812      	ldr	r2, [r2, #0]
{
 800e1b2:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1b4:	4819      	ldr	r0, [pc, #100]	@ (800e21c <SDMMC_CmdSendCID+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1b6:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1b8:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1bc:	f443 5398 	orr.w	r3, r3, #4864	@ 0x1300
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1c0:	0a52      	lsrs	r2, r2, #9
 800e1c2:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1c6:	f043 0302 	orr.w	r3, r3, #2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1ca:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1ce:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800e1d0:	1e53      	subs	r3, r2, #1
 800e1d2:	b14a      	cbz	r2, 800e1e8 <SDMMC_CmdSendCID+0x44>
    sta_reg = SDMMCx->STA;
 800e1d4:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1d6:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e1da:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1de:	d001      	beq.n	800e1e4 <SDMMC_CmdSendCID+0x40>
 800e1e0:	0492      	lsls	r2, r2, #18
 800e1e2:	d506      	bpl.n	800e1f2 <SDMMC_CmdSendCID+0x4e>
    if (count-- == 0U)
 800e1e4:	1c58      	adds	r0, r3, #1
 800e1e6:	d1f5      	bne.n	800e1d4 <SDMMC_CmdSendCID+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e1e8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1f0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1f2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800e1f4:	075b      	lsls	r3, r3, #29
 800e1f6:	d409      	bmi.n	800e20c <SDMMC_CmdSendCID+0x68>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1f8:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800e1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1fe:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e202:	bf0c      	ite	eq
 800e204:	4b06      	ldreq	r3, [pc, #24]	@ (800e220 <SDMMC_CmdSendCID+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e206:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e208:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800e20a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e20c:	2004      	movs	r0, #4
 800e20e:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e210:	e7ec      	b.n	800e1ec <SDMMC_CmdSendCID+0x48>
 800e212:	bf00      	nop
 800e214:	200001e0 	.word	0x200001e0
 800e218:	fffee0c0 	.word	0xfffee0c0
 800e21c:	10624dd3 	.word	0x10624dd3
 800e220:	002000c5 	.word	0x002000c5

0800e224 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e224:	4a1b      	ldr	r2, [pc, #108]	@ (800e294 <SDMMC_CmdSendCSD+0x70>)
  SDMMCx->ARG = Command->Argument;
 800e226:	6081      	str	r1, [r0, #8]
{
 800e228:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e22a:	491b      	ldr	r1, [pc, #108]	@ (800e298 <SDMMC_CmdSendCSD+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e22c:	68c0      	ldr	r0, [r0, #12]
 800e22e:	4b1b      	ldr	r3, [pc, #108]	@ (800e29c <SDMMC_CmdSendCSD+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e230:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e232:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e234:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e238:	f443 5398 	orr.w	r3, r3, #4864	@ 0x1300
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e23c:	0a52      	lsrs	r2, r2, #9
 800e23e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e242:	f043 0309 	orr.w	r3, r3, #9
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e246:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e24a:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800e24e:	1e53      	subs	r3, r2, #1
 800e250:	b152      	cbz	r2, 800e268 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800e252:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e256:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e25a:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e25e:	d001      	beq.n	800e264 <SDMMC_CmdSendCSD+0x40>
 800e260:	0492      	lsls	r2, r2, #18
 800e262:	d504      	bpl.n	800e26e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800e264:	1c59      	adds	r1, r3, #1
 800e266:	d1f4      	bne.n	800e252 <SDMMC_CmdSendCSD+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e268:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e26c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e26e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800e272:	075b      	lsls	r3, r3, #29
 800e274:	d409      	bmi.n	800e28a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e276:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800e27a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e27e:	bf0c      	ite	eq
 800e280:	4b07      	ldreq	r3, [pc, #28]	@ (800e2a0 <SDMMC_CmdSendCSD+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e282:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e284:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800e288:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e28a:	2004      	movs	r0, #4
 800e28c:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	200001e0 	.word	0x200001e0
 800e298:	10624dd3 	.word	0x10624dd3
 800e29c:	fffee0c0 	.word	0xfffee0c0
 800e2a0:	002000c5 	.word	0x002000c5

0800e2a4 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800e2a4:	2300      	movs	r3, #0
{
 800e2a6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e2a8:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2aa:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2ac:	4a25      	ldr	r2, [pc, #148]	@ (800e344 <SDMMC_CmdSetRelAdd+0xa0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2ae:	4b26      	ldr	r3, [pc, #152]	@ (800e348 <SDMMC_CmdSetRelAdd+0xa4>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2b0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2b2:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2b4:	4c25      	ldr	r4, [pc, #148]	@ (800e34c <SDMMC_CmdSetRelAdd+0xa8>)
 800e2b6:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2ba:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2be:	0a52      	lsrs	r2, r2, #9
 800e2c0:	f241 3488 	movw	r4, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2c4:	f043 0303 	orr.w	r3, r3, #3
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2c8:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2cc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e2ce:	1e53      	subs	r3, r2, #1
 800e2d0:	b14a      	cbz	r2, 800e2e6 <SDMMC_CmdSetRelAdd+0x42>
    sta_reg = SDMMCx->STA;
 800e2d2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2d4:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e2d8:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2dc:	d001      	beq.n	800e2e2 <SDMMC_CmdSetRelAdd+0x3e>
 800e2de:	0492      	lsls	r2, r2, #18
 800e2e0:	d506      	bpl.n	800e2f0 <SDMMC_CmdSetRelAdd+0x4c>
    if (count-- == 0U)
 800e2e2:	1c5c      	adds	r4, r3, #1
 800e2e4:	d1f5      	bne.n	800e2d2 <SDMMC_CmdSetRelAdd+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e2e6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2ee:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e2f2:	075b      	lsls	r3, r3, #29
 800e2f4:	d41b      	bmi.n	800e32e <SDMMC_CmdSetRelAdd+0x8a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e2f6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e2f8:	07dc      	lsls	r4, r3, #31
 800e2fa:	d405      	bmi.n	800e308 <SDMMC_CmdSetRelAdd+0x64>
  return (uint8_t)(SDMMCx->RESPCMD);
 800e2fc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	2b03      	cmp	r3, #3
 800e302:	d004      	beq.n	800e30e <SDMMC_CmdSetRelAdd+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e304:	2001      	movs	r0, #1
 800e306:	e7f0      	b.n	800e2ea <SDMMC_CmdSetRelAdd+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e308:	2301      	movs	r3, #1
 800e30a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e30c:	e7fa      	b.n	800e304 <SDMMC_CmdSetRelAdd+0x60>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e30e:	4b10      	ldr	r3, [pc, #64]	@ (800e350 <SDMMC_CmdSetRelAdd+0xac>)
 800e310:	6383      	str	r3, [r0, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800e312:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e314:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800e318:	d010      	beq.n	800e33c <SDMMC_CmdSetRelAdd+0x98>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e31a:	045a      	lsls	r2, r3, #17
 800e31c:	d40b      	bmi.n	800e336 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e31e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800e322:	bf0c      	ite	eq
 800e324:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e328:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800e32c:	e7dd      	b.n	800e2ea <SDMMC_CmdSetRelAdd+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e32e:	2304      	movs	r3, #4
 800e330:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e332:	4618      	mov	r0, r3
 800e334:	e7d9      	b.n	800e2ea <SDMMC_CmdSetRelAdd+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e336:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e33a:	e7d6      	b.n	800e2ea <SDMMC_CmdSetRelAdd+0x46>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e33c:	0c1b      	lsrs	r3, r3, #16
 800e33e:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800e340:	e7d3      	b.n	800e2ea <SDMMC_CmdSetRelAdd+0x46>
 800e342:	bf00      	nop
 800e344:	200001e0 	.word	0x200001e0
 800e348:	fffee0c0 	.word	0xfffee0c0
 800e34c:	10624dd3 	.word	0x10624dd3
 800e350:	002000c5 	.word	0x002000c5

0800e354 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e354:	4a4c      	ldr	r2, [pc, #304]	@ (800e488 <SDMMC_CmdSendStatus+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e356:	4b4d      	ldr	r3, [pc, #308]	@ (800e48c <SDMMC_CmdSendStatus+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e358:	6812      	ldr	r2, [r2, #0]
{
 800e35a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e35c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e35e:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e360:	494b      	ldr	r1, [pc, #300]	@ (800e490 <SDMMC_CmdSendStatus+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e362:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e364:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e368:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e36c:	0a52      	lsrs	r2, r2, #9
 800e36e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e372:	f043 030d 	orr.w	r3, r3, #13
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e376:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e37a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e37c:	b152      	cbz	r2, 800e394 <SDMMC_CmdSendStatus+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e37e:	4945      	ldr	r1, [pc, #276]	@ (800e494 <SDMMC_CmdSendStatus+0x140>)
 800e380:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e382:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e384:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e386:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e38a:	d001      	beq.n	800e390 <SDMMC_CmdSendStatus+0x3c>
 800e38c:	0492      	lsls	r2, r2, #18
 800e38e:	d506      	bpl.n	800e39e <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800e390:	1c5c      	adds	r4, r3, #1
 800e392:	d1f6      	bne.n	800e382 <SDMMC_CmdSendStatus+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e394:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e39c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e39e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e3a0:	075c      	lsls	r4, r3, #29
 800e3a2:	d43c      	bmi.n	800e41e <SDMMC_CmdSendStatus+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e3a6:	07d9      	lsls	r1, r3, #31
 800e3a8:	d407      	bmi.n	800e3ba <SDMMC_CmdSendStatus+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3aa:	4b3b      	ldr	r3, [pc, #236]	@ (800e498 <SDMMC_CmdSendStatus+0x144>)
 800e3ac:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e3ae:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b0d      	cmp	r3, #13
 800e3b4:	d004      	beq.n	800e3c0 <SDMMC_CmdSendStatus+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3b6:	2001      	movs	r0, #1
 800e3b8:	e7ee      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3be:	e7fa      	b.n	800e3b6 <SDMMC_CmdSendStatus+0x62>
  return (*(__IO uint32_t *) tmp);
 800e3c0:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e3c2:	4836      	ldr	r0, [pc, #216]	@ (800e49c <SDMMC_CmdSendStatus+0x148>)
 800e3c4:	4018      	ands	r0, r3
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d0e6      	beq.n	800e398 <SDMMC_CmdSendStatus+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	db2b      	blt.n	800e426 <SDMMC_CmdSendStatus+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e3ce:	005a      	lsls	r2, r3, #1
 800e3d0:	d42c      	bmi.n	800e42c <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e3d2:	009c      	lsls	r4, r3, #2
 800e3d4:	d42c      	bmi.n	800e430 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e3d6:	00d9      	lsls	r1, r3, #3
 800e3d8:	d42c      	bmi.n	800e434 <SDMMC_CmdSendStatus+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e3da:	011a      	lsls	r2, r3, #4
 800e3dc:	d42d      	bmi.n	800e43a <SDMMC_CmdSendStatus+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e3de:	015c      	lsls	r4, r3, #5
 800e3e0:	d42e      	bmi.n	800e440 <SDMMC_CmdSendStatus+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e3e2:	01d9      	lsls	r1, r3, #7
 800e3e4:	d42f      	bmi.n	800e446 <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e3e6:	021a      	lsls	r2, r3, #8
 800e3e8:	d430      	bmi.n	800e44c <SDMMC_CmdSendStatus+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e3ea:	025c      	lsls	r4, r3, #9
 800e3ec:	d431      	bmi.n	800e452 <SDMMC_CmdSendStatus+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e3ee:	0299      	lsls	r1, r3, #10
 800e3f0:	d43b      	bmi.n	800e46a <SDMMC_CmdSendStatus+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e3f2:	02da      	lsls	r2, r3, #11
 800e3f4:	d436      	bmi.n	800e464 <SDMMC_CmdSendStatus+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e3f6:	035c      	lsls	r4, r3, #13
 800e3f8:	d431      	bmi.n	800e45e <SDMMC_CmdSendStatus+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e3fa:	0399      	lsls	r1, r3, #14
 800e3fc:	d42c      	bmi.n	800e458 <SDMMC_CmdSendStatus+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e3fe:	03da      	lsls	r2, r3, #15
 800e400:	d43f      	bmi.n	800e482 <SDMMC_CmdSendStatus+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e402:	041c      	lsls	r4, r3, #16
 800e404:	d43a      	bmi.n	800e47c <SDMMC_CmdSendStatus+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e406:	0459      	lsls	r1, r3, #17
 800e408:	d435      	bmi.n	800e476 <SDMMC_CmdSendStatus+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e40a:	049a      	lsls	r2, r3, #18
 800e40c:	d430      	bmi.n	800e470 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e40e:	f013 0f08 	tst.w	r3, #8
 800e412:	bf0c      	ite	eq
 800e414:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e418:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e41c:	e7bc      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e41e:	2304      	movs	r3, #4
 800e420:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e422:	4618      	mov	r0, r3
 800e424:	e7b8      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e426:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e42a:	e7b5      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e42c:	2040      	movs	r0, #64	@ 0x40
 800e42e:	e7b3      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e430:	2080      	movs	r0, #128	@ 0x80
 800e432:	e7b1      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e434:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e438:	e7ae      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e43a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e43e:	e7ab      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e440:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e444:	e7a8      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e446:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e44a:	e7a5      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e44c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e450:	e7a2      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e452:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e456:	e79f      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e458:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e45c:	e79c      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e45e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e462:	e799      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CC_ERR;
 800e464:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e468:	e796      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e46a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e46e:	e793      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800e470:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e474:	e790      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e476:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e47a:	e78d      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e47c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e480:	e78a      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e482:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e486:	e787      	b.n	800e398 <SDMMC_CmdSendStatus+0x44>
 800e488:	200001e0 	.word	0x200001e0
 800e48c:	fffee0c0 	.word	0xfffee0c0
 800e490:	10624dd3 	.word	0x10624dd3
 800e494:	00200045 	.word	0x00200045
 800e498:	002000c5 	.word	0x002000c5
 800e49c:	fdffe008 	.word	0xfdffe008

0800e4a0 <SDMMC_CmdStatusRegister>:
  SDMMCx->ARG = Command->Argument;
 800e4a0:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e4a2:	4a4d      	ldr	r2, [pc, #308]	@ (800e5d8 <SDMMC_CmdStatusRegister+0x138>)
 800e4a4:	494d      	ldr	r1, [pc, #308]	@ (800e5dc <SDMMC_CmdStatusRegister+0x13c>)
 800e4a6:	6812      	ldr	r2, [r2, #0]
{
 800e4a8:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e4aa:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4ac:	68c4      	ldr	r4, [r0, #12]
 800e4ae:	4b4c      	ldr	r3, [pc, #304]	@ (800e5e0 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e4b0:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4b4:	4023      	ands	r3, r4
 800e4b6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e4ba:	0a52      	lsrs	r2, r2, #9
 800e4bc:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4c0:	f043 030d 	orr.w	r3, r3, #13
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e4c4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4c8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e4ca:	b152      	cbz	r2, 800e4e2 <SDMMC_CmdStatusRegister+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e4cc:	4945      	ldr	r1, [pc, #276]	@ (800e5e4 <SDMMC_CmdStatusRegister+0x144>)
 800e4ce:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e4d0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e4d2:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e4d4:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e4d8:	d001      	beq.n	800e4de <SDMMC_CmdStatusRegister+0x3e>
 800e4da:	0492      	lsls	r2, r2, #18
 800e4dc:	d506      	bpl.n	800e4ec <SDMMC_CmdStatusRegister+0x4c>
    if (count-- == 0U)
 800e4de:	1c5c      	adds	r4, r3, #1
 800e4e0:	d1f6      	bne.n	800e4d0 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e4e2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e4e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4ea:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e4ee:	075c      	lsls	r4, r3, #29
 800e4f0:	d43c      	bmi.n	800e56c <SDMMC_CmdStatusRegister+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e4f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e4f4:	07d9      	lsls	r1, r3, #31
 800e4f6:	d407      	bmi.n	800e508 <SDMMC_CmdStatusRegister+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e4f8:	4b3b      	ldr	r3, [pc, #236]	@ (800e5e8 <SDMMC_CmdStatusRegister+0x148>)
 800e4fa:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e4fc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b0d      	cmp	r3, #13
 800e502:	d004      	beq.n	800e50e <SDMMC_CmdStatusRegister+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e504:	2001      	movs	r0, #1
 800e506:	e7ee      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e508:	2301      	movs	r3, #1
 800e50a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e50c:	e7fa      	b.n	800e504 <SDMMC_CmdStatusRegister+0x64>
  return (*(__IO uint32_t *) tmp);
 800e50e:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e510:	4836      	ldr	r0, [pc, #216]	@ (800e5ec <SDMMC_CmdStatusRegister+0x14c>)
 800e512:	4018      	ands	r0, r3
 800e514:	2800      	cmp	r0, #0
 800e516:	d0e6      	beq.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e518:	2b00      	cmp	r3, #0
 800e51a:	db2b      	blt.n	800e574 <SDMMC_CmdStatusRegister+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e51c:	005a      	lsls	r2, r3, #1
 800e51e:	d42c      	bmi.n	800e57a <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e520:	009c      	lsls	r4, r3, #2
 800e522:	d42c      	bmi.n	800e57e <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e524:	00d9      	lsls	r1, r3, #3
 800e526:	d42c      	bmi.n	800e582 <SDMMC_CmdStatusRegister+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e528:	011a      	lsls	r2, r3, #4
 800e52a:	d42d      	bmi.n	800e588 <SDMMC_CmdStatusRegister+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e52c:	015c      	lsls	r4, r3, #5
 800e52e:	d42e      	bmi.n	800e58e <SDMMC_CmdStatusRegister+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e530:	01d9      	lsls	r1, r3, #7
 800e532:	d42f      	bmi.n	800e594 <SDMMC_CmdStatusRegister+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e534:	021a      	lsls	r2, r3, #8
 800e536:	d430      	bmi.n	800e59a <SDMMC_CmdStatusRegister+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e538:	025c      	lsls	r4, r3, #9
 800e53a:	d431      	bmi.n	800e5a0 <SDMMC_CmdStatusRegister+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e53c:	0299      	lsls	r1, r3, #10
 800e53e:	d43b      	bmi.n	800e5b8 <SDMMC_CmdStatusRegister+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e540:	02da      	lsls	r2, r3, #11
 800e542:	d436      	bmi.n	800e5b2 <SDMMC_CmdStatusRegister+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e544:	035c      	lsls	r4, r3, #13
 800e546:	d431      	bmi.n	800e5ac <SDMMC_CmdStatusRegister+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e548:	0399      	lsls	r1, r3, #14
 800e54a:	d42c      	bmi.n	800e5a6 <SDMMC_CmdStatusRegister+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e54c:	03da      	lsls	r2, r3, #15
 800e54e:	d43f      	bmi.n	800e5d0 <SDMMC_CmdStatusRegister+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e550:	041c      	lsls	r4, r3, #16
 800e552:	d43a      	bmi.n	800e5ca <SDMMC_CmdStatusRegister+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e554:	0459      	lsls	r1, r3, #17
 800e556:	d435      	bmi.n	800e5c4 <SDMMC_CmdStatusRegister+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e558:	049a      	lsls	r2, r3, #18
 800e55a:	d430      	bmi.n	800e5be <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e55c:	f013 0f08 	tst.w	r3, #8
 800e560:	bf0c      	ite	eq
 800e562:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e566:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e56a:	e7bc      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e56c:	2304      	movs	r3, #4
 800e56e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e570:	4618      	mov	r0, r3
 800e572:	e7b8      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e574:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e578:	e7b5      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e57a:	2040      	movs	r0, #64	@ 0x40
 800e57c:	e7b3      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e57e:	2080      	movs	r0, #128	@ 0x80
 800e580:	e7b1      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e582:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e586:	e7ae      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e588:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e58c:	e7ab      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e58e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e592:	e7a8      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e594:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e598:	e7a5      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e59a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e59e:	e7a2      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e5a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e5a4:	e79f      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e5a6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e5aa:	e79c      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e5ac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e5b0:	e799      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CC_ERR;
 800e5b2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e5b6:	e796      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e5b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e5bc:	e793      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800e5be:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e5c2:	e790      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e5c4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e5c8:	e78d      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e5ca:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e5ce:	e78a      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e5d0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e5d4:	e787      	b.n	800e4e6 <SDMMC_CmdStatusRegister+0x46>
 800e5d6:	bf00      	nop
 800e5d8:	200001e0 	.word	0x200001e0
 800e5dc:	10624dd3 	.word	0x10624dd3
 800e5e0:	fffee0c0 	.word	0xfffee0c0
 800e5e4:	00200045 	.word	0x00200045
 800e5e8:	002000c5 	.word	0x002000c5
 800e5ec:	fdffe008 	.word	0xfdffe008

0800e5f0 <SDMMC_CmdVoltageSwitch>:
  SDMMCx->ARG = Command->Argument;
 800e5f0:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e5f2:	4a4d      	ldr	r2, [pc, #308]	@ (800e728 <SDMMC_CmdVoltageSwitch+0x138>)
 800e5f4:	494d      	ldr	r1, [pc, #308]	@ (800e72c <SDMMC_CmdVoltageSwitch+0x13c>)
 800e5f6:	6812      	ldr	r2, [r2, #0]
{
 800e5f8:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e5fa:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5fc:	68c4      	ldr	r4, [r0, #12]
 800e5fe:	4b4c      	ldr	r3, [pc, #304]	@ (800e730 <SDMMC_CmdVoltageSwitch+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e600:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e604:	4023      	ands	r3, r4
 800e606:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e60a:	0a52      	lsrs	r2, r2, #9
 800e60c:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e610:	f043 030b 	orr.w	r3, r3, #11
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e614:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e618:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e61a:	b152      	cbz	r2, 800e632 <SDMMC_CmdVoltageSwitch+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e61c:	4945      	ldr	r1, [pc, #276]	@ (800e734 <SDMMC_CmdVoltageSwitch+0x144>)
 800e61e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e620:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e622:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e624:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e628:	d001      	beq.n	800e62e <SDMMC_CmdVoltageSwitch+0x3e>
 800e62a:	0492      	lsls	r2, r2, #18
 800e62c:	d506      	bpl.n	800e63c <SDMMC_CmdVoltageSwitch+0x4c>
    if (count-- == 0U)
 800e62e:	1c5c      	adds	r4, r3, #1
 800e630:	d1f6      	bne.n	800e620 <SDMMC_CmdVoltageSwitch+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e632:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e63a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e63c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e63e:	075c      	lsls	r4, r3, #29
 800e640:	d43c      	bmi.n	800e6bc <SDMMC_CmdVoltageSwitch+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e642:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e644:	07d9      	lsls	r1, r3, #31
 800e646:	d407      	bmi.n	800e658 <SDMMC_CmdVoltageSwitch+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e648:	4b3b      	ldr	r3, [pc, #236]	@ (800e738 <SDMMC_CmdVoltageSwitch+0x148>)
 800e64a:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e64c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	2b0b      	cmp	r3, #11
 800e652:	d004      	beq.n	800e65e <SDMMC_CmdVoltageSwitch+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e654:	2001      	movs	r0, #1
 800e656:	e7ee      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e658:	2301      	movs	r3, #1
 800e65a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e65c:	e7fa      	b.n	800e654 <SDMMC_CmdVoltageSwitch+0x64>
  return (*(__IO uint32_t *) tmp);
 800e65e:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e660:	4836      	ldr	r0, [pc, #216]	@ (800e73c <SDMMC_CmdVoltageSwitch+0x14c>)
 800e662:	4018      	ands	r0, r3
 800e664:	2800      	cmp	r0, #0
 800e666:	d0e6      	beq.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e668:	2b00      	cmp	r3, #0
 800e66a:	db2b      	blt.n	800e6c4 <SDMMC_CmdVoltageSwitch+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e66c:	005a      	lsls	r2, r3, #1
 800e66e:	d42c      	bmi.n	800e6ca <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e670:	009c      	lsls	r4, r3, #2
 800e672:	d42c      	bmi.n	800e6ce <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e674:	00d9      	lsls	r1, r3, #3
 800e676:	d42c      	bmi.n	800e6d2 <SDMMC_CmdVoltageSwitch+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e678:	011a      	lsls	r2, r3, #4
 800e67a:	d42d      	bmi.n	800e6d8 <SDMMC_CmdVoltageSwitch+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e67c:	015c      	lsls	r4, r3, #5
 800e67e:	d42e      	bmi.n	800e6de <SDMMC_CmdVoltageSwitch+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e680:	01d9      	lsls	r1, r3, #7
 800e682:	d42f      	bmi.n	800e6e4 <SDMMC_CmdVoltageSwitch+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e684:	021a      	lsls	r2, r3, #8
 800e686:	d430      	bmi.n	800e6ea <SDMMC_CmdVoltageSwitch+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e688:	025c      	lsls	r4, r3, #9
 800e68a:	d431      	bmi.n	800e6f0 <SDMMC_CmdVoltageSwitch+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e68c:	0299      	lsls	r1, r3, #10
 800e68e:	d43b      	bmi.n	800e708 <SDMMC_CmdVoltageSwitch+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e690:	02da      	lsls	r2, r3, #11
 800e692:	d436      	bmi.n	800e702 <SDMMC_CmdVoltageSwitch+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e694:	035c      	lsls	r4, r3, #13
 800e696:	d431      	bmi.n	800e6fc <SDMMC_CmdVoltageSwitch+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e698:	0399      	lsls	r1, r3, #14
 800e69a:	d42c      	bmi.n	800e6f6 <SDMMC_CmdVoltageSwitch+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e69c:	03da      	lsls	r2, r3, #15
 800e69e:	d43f      	bmi.n	800e720 <SDMMC_CmdVoltageSwitch+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e6a0:	041c      	lsls	r4, r3, #16
 800e6a2:	d43a      	bmi.n	800e71a <SDMMC_CmdVoltageSwitch+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e6a4:	0459      	lsls	r1, r3, #17
 800e6a6:	d435      	bmi.n	800e714 <SDMMC_CmdVoltageSwitch+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e6a8:	049a      	lsls	r2, r3, #18
 800e6aa:	d430      	bmi.n	800e70e <SDMMC_CmdVoltageSwitch+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e6ac:	f013 0f08 	tst.w	r3, #8
 800e6b0:	bf0c      	ite	eq
 800e6b2:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e6b6:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e6ba:	e7bc      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6bc:	2304      	movs	r3, #4
 800e6be:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	e7b8      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e6c4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e6c8:	e7b5      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e6ca:	2040      	movs	r0, #64	@ 0x40
 800e6cc:	e7b3      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e6ce:	2080      	movs	r0, #128	@ 0x80
 800e6d0:	e7b1      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e6d2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e6d6:	e7ae      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e6d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e6dc:	e7ab      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e6de:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e6e2:	e7a8      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e6e4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e6e8:	e7a5      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e6ea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e6ee:	e7a2      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e6f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e6f4:	e79f      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e6f6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e6fa:	e79c      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e6fc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e700:	e799      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CC_ERR;
 800e702:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e706:	e796      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e708:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e70c:	e793      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800e70e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e712:	e790      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e714:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e718:	e78d      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e71a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e71e:	e78a      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e720:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e724:	e787      	b.n	800e636 <SDMMC_CmdVoltageSwitch+0x46>
 800e726:	bf00      	nop
 800e728:	200001e0 	.word	0x200001e0
 800e72c:	10624dd3 	.word	0x10624dd3
 800e730:	fffee0c0 	.word	0xfffee0c0
 800e734:	00200045 	.word	0x00200045
 800e738:	002000c5 	.word	0x002000c5
 800e73c:	fdffe008 	.word	0xfdffe008

0800e740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e740:	4684      	mov	ip, r0
 800e742:	b084      	sub	sp, #16
 800e744:	a801      	add	r0, sp, #4
 800e746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e74a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800e74e:	4b17      	ldr	r3, [pc, #92]	@ (800e7ac <USB_CoreInit+0x6c>)
 800e750:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e754:	f8cc 200c 	str.w	r2, [ip, #12]
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e758:	3b01      	subs	r3, #1
 800e75a:	d024      	beq.n	800e7a6 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e75c:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800e760:	2a00      	cmp	r2, #0
 800e762:	daf9      	bge.n	800e758 <USB_CoreInit+0x18>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e764:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e768:	4a10      	ldr	r2, [pc, #64]	@ (800e7ac <USB_CoreInit+0x6c>)
 800e76a:	f043 0301 	orr.w	r3, r3, #1
 800e76e:	f8cc 3010 	str.w	r3, [ip, #16]

  do
  {
    if (++count > 200000U)
 800e772:	3a01      	subs	r2, #1
 800e774:	d017      	beq.n	800e7a6 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e776:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e77a:	f013 0301 	ands.w	r3, r3, #1
 800e77e:	d1f8      	bne.n	800e772 <USB_CoreInit+0x32>

  return HAL_OK;
 800e780:	4618      	mov	r0, r3
  if (cfg.battery_charging_enable == 0U)
 800e782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e784:	b93b      	cbnz	r3, 800e796 <USB_CoreInit+0x56>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e786:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800e78a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e78e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
}
 800e792:	b004      	add	sp, #16
 800e794:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e796:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800e79a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e79e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
}
 800e7a2:	b004      	add	sp, #16
 800e7a4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800e7a6:	2003      	movs	r0, #3
 800e7a8:	e7eb      	b.n	800e782 <USB_CoreInit+0x42>
 800e7aa:	bf00      	nop
 800e7ac:	00030d41 	.word	0x00030d41

0800e7b0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800e7b0:	2a02      	cmp	r2, #2
{
 800e7b2:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800e7b4:	d00a      	beq.n	800e7cc <USB_SetTurnaroundTime+0x1c>
 800e7b6:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e7ba:	68da      	ldr	r2, [r3, #12]
 800e7bc:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 800e7c0:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e7c2:	68da      	ldr	r2, [r3, #12]
 800e7c4:	430a      	orrs	r2, r1
}
 800e7c6:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e7c8:	60da      	str	r2, [r3, #12]
}
 800e7ca:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e7cc:	4a26      	ldr	r2, [pc, #152]	@ (800e868 <USB_SetTurnaroundTime+0xb8>)
 800e7ce:	4827      	ldr	r0, [pc, #156]	@ (800e86c <USB_SetTurnaroundTime+0xbc>)
 800e7d0:	440a      	add	r2, r1
 800e7d2:	4282      	cmp	r2, r0
 800e7d4:	d932      	bls.n	800e83c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e7d6:	4a26      	ldr	r2, [pc, #152]	@ (800e870 <USB_SetTurnaroundTime+0xc0>)
 800e7d8:	4826      	ldr	r0, [pc, #152]	@ (800e874 <USB_SetTurnaroundTime+0xc4>)
 800e7da:	440a      	add	r2, r1
 800e7dc:	4282      	cmp	r2, r0
 800e7de:	d930      	bls.n	800e842 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e7e0:	4825      	ldr	r0, [pc, #148]	@ (800e878 <USB_SetTurnaroundTime+0xc8>)
 800e7e2:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 800e7e6:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 800e7ea:	4282      	cmp	r2, r0
 800e7ec:	d92c      	bls.n	800e848 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e7ee:	4823      	ldr	r0, [pc, #140]	@ (800e87c <USB_SetTurnaroundTime+0xcc>)
 800e7f0:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 800e7f4:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 800e7f8:	4282      	cmp	r2, r0
 800e7fa:	d328      	bcc.n	800e84e <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e7fc:	4a20      	ldr	r2, [pc, #128]	@ (800e880 <USB_SetTurnaroundTime+0xd0>)
 800e7fe:	4821      	ldr	r0, [pc, #132]	@ (800e884 <USB_SetTurnaroundTime+0xd4>)
 800e800:	440a      	add	r2, r1
 800e802:	4282      	cmp	r2, r0
 800e804:	d926      	bls.n	800e854 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e806:	4a20      	ldr	r2, [pc, #128]	@ (800e888 <USB_SetTurnaroundTime+0xd8>)
 800e808:	4820      	ldr	r0, [pc, #128]	@ (800e88c <USB_SetTurnaroundTime+0xdc>)
 800e80a:	440a      	add	r2, r1
 800e80c:	4282      	cmp	r2, r0
 800e80e:	d324      	bcc.n	800e85a <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e810:	4a1f      	ldr	r2, [pc, #124]	@ (800e890 <USB_SetTurnaroundTime+0xe0>)
 800e812:	4820      	ldr	r0, [pc, #128]	@ (800e894 <USB_SetTurnaroundTime+0xe4>)
 800e814:	440a      	add	r2, r1
 800e816:	4282      	cmp	r2, r0
 800e818:	d3cd      	bcc.n	800e7b6 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e81a:	481f      	ldr	r0, [pc, #124]	@ (800e898 <USB_SetTurnaroundTime+0xe8>)
 800e81c:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 800e820:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 800e824:	4282      	cmp	r2, r0
 800e826:	d31b      	bcc.n	800e860 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e828:	4a1c      	ldr	r2, [pc, #112]	@ (800e89c <USB_SetTurnaroundTime+0xec>)
 800e82a:	481d      	ldr	r0, [pc, #116]	@ (800e8a0 <USB_SetTurnaroundTime+0xf0>)
 800e82c:	440a      	add	r2, r1
 800e82e:	4282      	cmp	r2, r0
 800e830:	bf2c      	ite	cs
 800e832:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 800e836:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 800e83a:	e7be      	b.n	800e7ba <USB_SetTurnaroundTime+0xa>
 800e83c:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 800e840:	e7bb      	b.n	800e7ba <USB_SetTurnaroundTime+0xa>
 800e842:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800e846:	e7b8      	b.n	800e7ba <USB_SetTurnaroundTime+0xa>
 800e848:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 800e84c:	e7b5      	b.n	800e7ba <USB_SetTurnaroundTime+0xa>
 800e84e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800e852:	e7b2      	b.n	800e7ba <USB_SetTurnaroundTime+0xa>
 800e854:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 800e858:	e7af      	b.n	800e7ba <USB_SetTurnaroundTime+0xa>
 800e85a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800e85e:	e7ac      	b.n	800e7ba <USB_SetTurnaroundTime+0xa>
 800e860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e864:	e7a9      	b.n	800e7ba <USB_SetTurnaroundTime+0xa>
 800e866:	bf00      	nop
 800e868:	ff275340 	.word	0xff275340
 800e86c:	000c34ff 	.word	0x000c34ff
 800e870:	ff1b1e40 	.word	0xff1b1e40
 800e874:	000f423f 	.word	0x000f423f
 800e878:	00124f7f 	.word	0x00124f7f
 800e87c:	0013d620 	.word	0x0013d620
 800e880:	fee5b660 	.word	0xfee5b660
 800e884:	0016e35f 	.word	0x0016e35f
 800e888:	feced300 	.word	0xfeced300
 800e88c:	001b7740 	.word	0x001b7740
 800e890:	feb35bc0 	.word	0xfeb35bc0
 800e894:	002191c0 	.word	0x002191c0
 800e898:	00387520 	.word	0x00387520
 800e89c:	fe5954e0 	.word	0xfe5954e0
 800e8a0:	00419ce0 	.word	0x00419ce0

0800e8a4 <USB_EnableGlobalInt>:
{
 800e8a4:	4603      	mov	r3, r0
}
 800e8a6:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e8a8:	689a      	ldr	r2, [r3, #8]
 800e8aa:	f042 0201 	orr.w	r2, r2, #1
 800e8ae:	609a      	str	r2, [r3, #8]
}
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop

0800e8b4 <USB_DisableGlobalInt>:
{
 800e8b4:	4603      	mov	r3, r0
}
 800e8b6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e8b8:	689a      	ldr	r2, [r3, #8]
 800e8ba:	f022 0201 	bic.w	r2, r2, #1
 800e8be:	609a      	str	r2, [r3, #8]
}
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop

0800e8c4 <USB_SetCurrentMode>:
{
 800e8c4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e8c6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e8c8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e8ca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e8ce:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e8d0:	d00b      	beq.n	800e8ea <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800e8d2:	b941      	cbnz	r1, 800e8e6 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e8d4:	68c3      	ldr	r3, [r0, #12]
 800e8d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8da:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800e8dc:	2032      	movs	r0, #50	@ 0x32
 800e8de:	f7f8 fcb5 	bl	800724c <HAL_Delay>
  return HAL_OK;
 800e8e2:	2000      	movs	r0, #0
}
 800e8e4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800e8e6:	2001      	movs	r0, #1
}
 800e8e8:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e8ea:	68c3      	ldr	r3, [r0, #12]
 800e8ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8f0:	60c3      	str	r3, [r0, #12]
 800e8f2:	e7f3      	b.n	800e8dc <USB_SetCurrentMode+0x18>

0800e8f4 <USB_DevInit>:
{
 800e8f4:	b084      	sub	sp, #16
 800e8f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8f8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e8fa:	ac06      	add	r4, sp, #24
 800e8fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800e900:	2200      	movs	r2, #0
 800e902:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 800e906:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 800e908:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 800e90c:	460c      	mov	r4, r1
 800e90e:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e912:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 800e916:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 800e91a:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 800e91e:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 800e922:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 800e926:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 800e92a:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 800e92e:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 800e932:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 800e936:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 800e93a:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 800e93e:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 800e942:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800e946:	2d00      	cmp	r5, #0
 800e948:	f040 80a1 	bne.w	800ea8e <USB_DevInit+0x19a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e94c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800e950:	f042 0202 	orr.w	r2, r2, #2
 800e954:	f8cc 2004 	str.w	r2, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e958:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800e95a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800e95e:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e960:	6802      	ldr	r2, [r0, #0]
 800e962:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e966:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e968:	6802      	ldr	r2, [r0, #0]
 800e96a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800e96e:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0U;
 800e970:	2200      	movs	r2, #0
 800e972:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e976:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800e97a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= speed;
 800e97e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800e982:	f042 0203 	orr.w	r2, r2, #3
 800e986:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e98a:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800e98e:	611a      	str	r2, [r3, #16]
 800e990:	4a43      	ldr	r2, [pc, #268]	@ (800eaa0 <USB_DevInit+0x1ac>)
    if (++count > 200000U)
 800e992:	3a01      	subs	r2, #1
 800e994:	f000 8082 	beq.w	800ea9c <USB_DevInit+0x1a8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e998:	6918      	ldr	r0, [r3, #16]
 800e99a:	f010 0020 	ands.w	r0, r0, #32
 800e99e:	d1f8      	bne.n	800e992 <USB_DevInit+0x9e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e9a0:	2210      	movs	r2, #16
 800e9a2:	611a      	str	r2, [r3, #16]
 800e9a4:	4a3e      	ldr	r2, [pc, #248]	@ (800eaa0 <USB_DevInit+0x1ac>)
    if (++count > 200000U)
 800e9a6:	3a01      	subs	r2, #1
 800e9a8:	d076      	beq.n	800ea98 <USB_DevInit+0x1a4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e9aa:	6919      	ldr	r1, [r3, #16]
 800e9ac:	06c9      	lsls	r1, r1, #27
 800e9ae:	d4fa      	bmi.n	800e9a6 <USB_DevInit+0xb2>
  USBx_DEVICE->DIEPMSK = 0U;
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	f8cc 1010 	str.w	r1, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e9b6:	f8cc 1014 	str.w	r1, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e9ba:	f8cc 101c 	str.w	r1, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9be:	b1fc      	cbz	r4, 800ea00 <USB_DevInit+0x10c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e9c0:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 800e9c4:	2e00      	cmp	r6, #0
 800e9c6:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 800e9ca:	db14      	blt.n	800e9f6 <USB_DevInit+0x102>
      USBx_INEP(i)->DIEPCTL = 0U;
 800e9cc:	2600      	movs	r6, #0
 800e9ce:	6016      	str	r6, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e9d0:	f04f 0e00 	mov.w	lr, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e9d4:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9d8:	3101      	adds	r1, #1
 800e9da:	42a1      	cmp	r1, r4
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e9dc:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e9e0:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9e2:	f102 0220 	add.w	r2, r2, #32
 800e9e6:	d030      	beq.n	800ea4a <USB_DevInit+0x156>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e9e8:	6816      	ldr	r6, [r2, #0]
 800e9ea:	2e00      	cmp	r6, #0
 800e9ec:	daee      	bge.n	800e9cc <USB_DevInit+0xd8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e9ee:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 800e9f2:	6016      	str	r6, [r2, #0]
 800e9f4:	e7f0      	b.n	800e9d8 <USB_DevInit+0xe4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e9f6:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 800e9fa:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
 800e9fe:	e7e7      	b.n	800e9d0 <USB_DevInit+0xdc>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ea00:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800ea04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ea08:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx->GINTMSK = 0U;
 800ea0c:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ea0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
  USBx->GINTMSK = 0U;
 800ea12:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ea14:	615a      	str	r2, [r3, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ea16:	6999      	ldr	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ea18:	4a22      	ldr	r2, [pc, #136]	@ (800eaa4 <USB_DevInit+0x1b0>)
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ea1a:	f041 0110 	orr.w	r1, r1, #16
 800ea1e:	6199      	str	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ea20:	6999      	ldr	r1, [r3, #24]
 800ea22:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 800ea24:	990c      	ldr	r1, [sp, #48]	@ 0x30
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ea26:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 800ea28:	b119      	cbz	r1, 800ea32 <USB_DevInit+0x13e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ea2a:	699a      	ldr	r2, [r3, #24]
 800ea2c:	f042 0208 	orr.w	r2, r2, #8
 800ea30:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ea32:	2d01      	cmp	r5, #1
 800ea34:	d105      	bne.n	800ea42 <USB_DevInit+0x14e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ea36:	699a      	ldr	r2, [r3, #24]
 800ea38:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800ea3c:	f042 0204 	orr.w	r2, r2, #4
 800ea40:	619a      	str	r2, [r3, #24]
}
 800ea42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea46:	b004      	add	sp, #16
 800ea48:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea4a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ea4e:	2900      	cmp	r1, #0
 800ea50:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 800ea54:	db15      	blt.n	800ea82 <USB_DevInit+0x18e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea56:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ea58:	2600      	movs	r6, #0
 800ea5a:	6016      	str	r6, [r2, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ea5c:	f04f 0e00 	mov.w	lr, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ea60:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea64:	3101      	adds	r1, #1
 800ea66:	42a1      	cmp	r1, r4
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ea68:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ea6c:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea6e:	f102 0220 	add.w	r2, r2, #32
 800ea72:	d0c5      	beq.n	800ea00 <USB_DevInit+0x10c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea74:	6816      	ldr	r6, [r2, #0]
 800ea76:	2e00      	cmp	r6, #0
 800ea78:	daee      	bge.n	800ea58 <USB_DevInit+0x164>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ea7a:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 800ea7e:	6016      	str	r6, [r2, #0]
 800ea80:	e7f0      	b.n	800ea64 <USB_DevInit+0x170>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ea82:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800ea86:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	e7e6      	b.n	800ea5c <USB_DevInit+0x168>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ea8e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800ea90:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800ea94:	6382      	str	r2, [r0, #56]	@ 0x38
 800ea96:	e76b      	b.n	800e970 <USB_DevInit+0x7c>
    ret = HAL_ERROR;
 800ea98:	2001      	movs	r0, #1
 800ea9a:	e789      	b.n	800e9b0 <USB_DevInit+0xbc>
 800ea9c:	2001      	movs	r0, #1
 800ea9e:	e77f      	b.n	800e9a0 <USB_DevInit+0xac>
 800eaa0:	00030d41 	.word	0x00030d41
 800eaa4:	803c3800 	.word	0x803c3800

0800eaa8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eaa8:	0189      	lsls	r1, r1, #6
 800eaaa:	f041 0120 	orr.w	r1, r1, #32
 800eaae:	4a06      	ldr	r2, [pc, #24]	@ (800eac8 <USB_FlushTxFifo+0x20>)
 800eab0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800eab2:	3a01      	subs	r2, #1
 800eab4:	d005      	beq.n	800eac2 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eab6:	6903      	ldr	r3, [r0, #16]
 800eab8:	f013 0320 	ands.w	r3, r3, #32
 800eabc:	d1f9      	bne.n	800eab2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800eabe:	4618      	mov	r0, r3
 800eac0:	4770      	bx	lr
      return HAL_TIMEOUT;
 800eac2:	2003      	movs	r0, #3
}
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop
 800eac8:	00030d41 	.word	0x00030d41

0800eacc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eacc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
    speed = 0xFU;
 800ead0:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ead4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
}
 800ead8:	bf14      	ite	ne
 800eada:	2002      	movne	r0, #2
 800eadc:	200f      	moveq	r0, #15
 800eade:	4770      	bx	lr

0800eae0 <USB_ActivateEndpoint>:
{
 800eae0:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800eae2:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eae4:	2301      	movs	r3, #1
 800eae6:	f002 0e0f 	and.w	lr, r2, #15
 800eaea:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 800eaee:	f891 e001 	ldrb.w	lr, [r1, #1]
 800eaf2:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eaf6:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eafa:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800eafe:	d01a      	beq.n	800eb36 <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eb00:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800eb04:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800eb08:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eb0c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800eb10:	041b      	lsls	r3, r3, #16
 800eb12:	d40e      	bmi.n	800eb32 <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eb14:	688b      	ldr	r3, [r1, #8]
 800eb16:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 800eb1a:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eb1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb20:	4323      	orrs	r3, r4
 800eb22:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800eb26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb2e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800eb32:	2000      	movs	r0, #0
 800eb34:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eb36:	f8dc 401c 	ldr.w	r4, [ip, #28]
 800eb3a:	4323      	orrs	r3, r4
 800eb3c:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eb40:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800eb44:	041c      	lsls	r4, r3, #16
 800eb46:	d4f4      	bmi.n	800eb32 <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb48:	688b      	ldr	r3, [r1, #8]
 800eb4a:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb4e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb54:	4323      	orrs	r3, r4
 800eb56:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800eb5a:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800eb5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb66:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	bd10      	pop	{r4, pc}
 800eb6e:	bf00      	nop

0800eb70 <USB_DeactivateEndpoint>:
{
 800eb70:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800eb72:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800eb74:	7849      	ldrb	r1, [r1, #1]
 800eb76:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb78:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800eb7c:	d02c      	beq.n	800ebd8 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb7e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800eb82:	2900      	cmp	r1, #0
 800eb84:	db1b      	blt.n	800ebbe <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eb86:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800eb8a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800eb8e:	f002 020f 	and.w	r2, r2, #15
 800eb92:	fa01 f202 	lsl.w	r2, r1, r2
 800eb96:	ea24 0402 	bic.w	r4, r4, r2
 800eb9a:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eb9e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800eba2:	4922      	ldr	r1, [pc, #136]	@ (800ec2c <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eba4:	ea24 0202 	bic.w	r2, r4, r2
 800eba8:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ebac:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 800ebb0:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ebb4:	4011      	ands	r1, r2
}
 800ebb6:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ebb8:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 800ebbc:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ebbe:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ebc2:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800ebc6:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ebca:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ebce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800ebd2:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 800ebd6:	e7d6      	b.n	800eb86 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebd8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800ebdc:	2900      	cmp	r1, #0
 800ebde:	da0b      	bge.n	800ebf8 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ebe0:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800ebe4:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800ebe8:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ebec:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800ebf0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800ebf4:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ebf8:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 800ebfc:	f002 040f 	and.w	r4, r2, #15
 800ec00:	2201      	movs	r2, #1
 800ec02:	40a2      	lsls	r2, r4
 800ec04:	ea21 0102 	bic.w	r1, r1, r2
 800ec08:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec0c:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ec10:	4907      	ldr	r1, [pc, #28]	@ (800ec30 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec12:	ea24 0202 	bic.w	r2, r4, r2
 800ec16:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ec1a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 800ec1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ec22:	4011      	ands	r1, r2
}
 800ec24:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ec26:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 800ec2a:	4770      	bx	lr
 800ec2c:	eff37800 	.word	0xeff37800
 800ec30:	ec337800 	.word	0xec337800

0800ec34 <USB_EPStartXfer>:
{
 800ec34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 800ec38:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ec3a:	780d      	ldrb	r5, [r1, #0]
    if (ep->xfer_len == 0U)
 800ec3c:	694b      	ldr	r3, [r1, #20]
    if (ep->type != EP_TYPE_ISOC)
 800ec3e:	f891 c003 	ldrb.w	ip, [r1, #3]
  if (ep->is_in == 1U)
 800ec42:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec44:	eb00 1245 	add.w	r2, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800ec48:	d046      	beq.n	800ecd8 <USB_EPStartXfer+0xa4>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ec4a:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ec4c:	f8d2 1b10 	ldr.w	r1, [r2, #2832]	@ 0xb10
 800ec50:	0cc9      	lsrs	r1, r1, #19
 800ec52:	04c9      	lsls	r1, r1, #19
 800ec54:	f8c2 1b10 	str.w	r1, [r2, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ec58:	f8d2 1b10 	ldr.w	r1, [r2, #2832]	@ 0xb10
 800ec5c:	f021 51ff 	bic.w	r1, r1, #534773760	@ 0x1fe00000
 800ec60:	f421 11c0 	bic.w	r1, r1, #1572864	@ 0x180000
 800ec64:	f8c2 1b10 	str.w	r1, [r2, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ec68:	f502 6130 	add.w	r1, r2, #2816	@ 0xb00
    if (ep->xfer_len == 0U)
 800ec6c:	b353      	cbz	r3, 800ecc4 <USB_EPStartXfer+0x90>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ec6e:	4d61      	ldr	r5, [pc, #388]	@ (800edf4 <USB_EPStartXfer+0x1c0>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ec70:	4423      	add	r3, r4
 800ec72:	3b01      	subs	r3, #1
 800ec74:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ec78:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 800ec7c:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ec7e:	fb04 f303 	mul.w	r3, r4, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ec82:	690c      	ldr	r4, [r1, #16]
 800ec84:	432c      	orrs	r4, r5
 800ec86:	610c      	str	r4, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ec88:	690c      	ldr	r4, [r1, #16]
 800ec8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec8e:	4323      	orrs	r3, r4
 800ec90:	610b      	str	r3, [r1, #16]
    if (ep->type == EP_TYPE_ISOC)
 800ec92:	f1bc 0f01 	cmp.w	ip, #1
 800ec96:	d10c      	bne.n	800ecb2 <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec98:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800ec9c:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eca0:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	@ 0xb00
 800eca4:	bf0c      	ite	eq
 800eca6:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ecaa:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 800ecae:	f8c2 3b00 	str.w	r3, [r2, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ecb2:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	@ 0xb00
 800ecb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ecba:	f8c2 3b00 	str.w	r3, [r2, #2816]	@ 0xb00
}
 800ecbe:	2000      	movs	r0, #0
 800ecc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ecc4:	690b      	ldr	r3, [r1, #16]
 800ecc6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800ecca:	431c      	orrs	r4, r3
 800eccc:	610c      	str	r4, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ecce:	690b      	ldr	r3, [r1, #16]
 800ecd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ecd4:	610b      	str	r3, [r1, #16]
 800ecd6:	e7dc      	b.n	800ec92 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ecd8:	f502 6e10 	add.w	lr, r2, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d13c      	bne.n	800ed5a <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ece0:	f8de 4010 	ldr.w	r4, [lr, #16]
 800ece4:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800ece8:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 800ecec:	f8ce 4010 	str.w	r4, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ecf0:	f8de 4010 	ldr.w	r4, [lr, #16]
 800ecf4:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800ecf8:	f8ce 4010 	str.w	r4, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ecfc:	f8de 4010 	ldr.w	r4, [lr, #16]
 800ed00:	0ce4      	lsrs	r4, r4, #19
 800ed02:	04e4      	lsls	r4, r4, #19
 800ed04:	f8ce 4010 	str.w	r4, [lr, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed08:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800ed0c:	f1bc 0f01 	cmp.w	ip, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed10:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800ed14:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800ed18:	d1d1      	bne.n	800ecbe <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ed1a:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 800ed1e:	f414 7f80 	tst.w	r4, #256	@ 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ed22:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
  count32b = ((uint32_t)len + 3U) / 4U;
 800ed26:	b29b      	uxth	r3, r3
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ed28:	bf0c      	ite	eq
 800ed2a:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ed2e:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
  count32b = ((uint32_t)len + 3U) / 4U;
 800ed32:	3303      	adds	r3, #3
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ed34:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800ed38:	68ca      	ldr	r2, [r1, #12]
  for (i = 0U; i < count32b; i++)
 800ed3a:	0899      	lsrs	r1, r3, #2
 800ed3c:	d0bf      	beq.n	800ecbe <USB_EPStartXfer+0x8a>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ed3e:	eb00 3305 	add.w	r3, r0, r5, lsl #12
 800ed42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed46:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800ed4a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ed4e:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < count32b; i++)
 800ed50:	4290      	cmp	r0, r2
 800ed52:	d1fa      	bne.n	800ed4a <USB_EPStartXfer+0x116>
}
 800ed54:	2000      	movs	r0, #0
 800ed56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed5a:	f8de 6010 	ldr.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ed5e:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed62:	0cf6      	lsrs	r6, r6, #19
 800ed64:	04f6      	lsls	r6, r6, #19
 800ed66:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed6a:	f8de 6010 	ldr.w	r6, [lr, #16]
 800ed6e:	f026 56ff 	bic.w	r6, r6, #534773760	@ 0x1fe00000
 800ed72:	f426 16c0 	bic.w	r6, r6, #1572864	@ 0x180000
 800ed76:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ed7a:	4e1e      	ldr	r6, [pc, #120]	@ (800edf4 <USB_EPStartXfer+0x1c0>)
 800ed7c:	f8de 8010 	ldr.w	r8, [lr, #16]
 800ed80:	eb09 0703 	add.w	r7, r9, r3
 800ed84:	3f01      	subs	r7, #1
 800ed86:	fbb7 f7f9 	udiv	r7, r7, r9
 800ed8a:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 800ed8e:	ea46 0608 	orr.w	r6, r6, r8
 800ed92:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ed96:	f8de 7010 	ldr.w	r7, [lr, #16]
 800ed9a:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800ed9e:	433e      	orrs	r6, r7
      if (ep->type == EP_TYPE_ISOC)
 800eda0:	f1bc 0f01 	cmp.w	ip, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eda4:	f8ce 6010 	str.w	r6, [lr, #16]
      if (ep->type == EP_TYPE_ISOC)
 800eda8:	d010      	beq.n	800edcc <USB_EPStartXfer+0x198>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800edaa:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800edae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800edb2:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800edb6:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 800edba:	f005 030f 	and.w	r3, r5, #15
 800edbe:	409c      	lsls	r4, r3
 800edc0:	4314      	orrs	r4, r2
 800edc2:	f8c0 4834 	str.w	r4, [r0, #2100]	@ 0x834
}
 800edc6:	2000      	movs	r0, #0
 800edc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800edcc:	f8de 4010 	ldr.w	r4, [lr, #16]
 800edd0:	f024 44c0 	bic.w	r4, r4, #1610612736	@ 0x60000000
 800edd4:	f8ce 4010 	str.w	r4, [lr, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800edd8:	f8de 4010 	ldr.w	r4, [lr, #16]
 800eddc:	f044 5400 	orr.w	r4, r4, #536870912	@ 0x20000000
 800ede0:	f8ce 4010 	str.w	r4, [lr, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ede4:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
 800ede8:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800edec:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800edf0:	e793      	b.n	800ed1a <USB_EPStartXfer+0xe6>
 800edf2:	bf00      	nop
 800edf4:	1ff80000 	.word	0x1ff80000

0800edf8 <USB_EP0StartXfer>:
{
 800edf8:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800edfa:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800edfc:	780a      	ldrb	r2, [r1, #0]
    if (ep->xfer_len == 0U)
 800edfe:	694c      	ldr	r4, [r1, #20]
  if (ep->is_in == 1U)
 800ee00:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee02:	eb00 1c42 	add.w	ip, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800ee06:	d022      	beq.n	800ee4e <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee08:	f8dc 2b10 	ldr.w	r2, [ip, #2832]	@ 0xb10
 800ee0c:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 800ee10:	0cd2      	lsrs	r2, r2, #19
 800ee12:	04d2      	lsls	r2, r2, #19
 800ee14:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee16:	691a      	ldr	r2, [r3, #16]
 800ee18:	f022 52ff 	bic.w	r2, r2, #534773760	@ 0x1fe00000
 800ee1c:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
 800ee20:	611a      	str	r2, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800ee22:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 800ee24:	b98c      	cbnz	r4, 800ee4a <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee26:	6919      	ldr	r1, [r3, #16]
 800ee28:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800ee2c:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ee2e:	6919      	ldr	r1, [r3, #16]
 800ee30:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800ee34:	430a      	orrs	r2, r1
 800ee36:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ee38:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800ee3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ee40:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800ee44:	2000      	movs	r0, #0
 800ee46:	bc30      	pop	{r4, r5}
 800ee48:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 800ee4a:	614a      	str	r2, [r1, #20]
 800ee4c:	e7eb      	b.n	800ee26 <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee4e:	f50c 6310 	add.w	r3, ip, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 800ee52:	b364      	cbz	r4, 800eeae <USB_EP0StartXfer+0xb6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee54:	691d      	ldr	r5, [r3, #16]
 800ee56:	0ced      	lsrs	r5, r5, #19
 800ee58:	04ed      	lsls	r5, r5, #19
 800ee5a:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee5c:	691d      	ldr	r5, [r3, #16]
 800ee5e:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 800ee62:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 800ee66:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800ee68:	688d      	ldr	r5, [r1, #8]
 800ee6a:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 800ee6c:	bf38      	it	cc
 800ee6e:	614d      	strcc	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee70:	6919      	ldr	r1, [r3, #16]
 800ee72:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800ee76:	6119      	str	r1, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 800ee78:	bf38      	it	cc
 800ee7a:	462c      	movcc	r4, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ee7c:	691d      	ldr	r5, [r3, #16]
 800ee7e:	f3c4 0112 	ubfx	r1, r4, #0, #19
 800ee82:	4329      	orrs	r1, r5
 800ee84:	6119      	str	r1, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee86:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 800ee8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ee8e:	f8cc 3900 	str.w	r3, [ip, #2304]	@ 0x900
    if (ep->xfer_len > 0U)
 800ee92:	2c00      	cmp	r4, #0
 800ee94:	d0d6      	beq.n	800ee44 <USB_EP0StartXfer+0x4c>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ee96:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
 800ee9a:	f002 020f 	and.w	r2, r2, #15
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4093      	lsls	r3, r2
 800eea2:	430b      	orrs	r3, r1
 800eea4:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
}
 800eea8:	bc30      	pop	{r4, r5}
 800eeaa:	2000      	movs	r0, #0
 800eeac:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eeae:	691a      	ldr	r2, [r3, #16]
 800eeb0:	f022 52ff 	bic.w	r2, r2, #534773760	@ 0x1fe00000
 800eeb4:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
 800eeb8:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eeba:	691a      	ldr	r2, [r3, #16]
 800eebc:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800eec0:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eec2:	691a      	ldr	r2, [r3, #16]
 800eec4:	0cd2      	lsrs	r2, r2, #19
 800eec6:	04d2      	lsls	r2, r2, #19
 800eec8:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eeca:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 800eece:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
}
 800eed2:	2000      	movs	r0, #0
 800eed4:	bc30      	pop	{r4, r5}
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eed6:	f8cc 3900 	str.w	r3, [ip, #2304]	@ 0x900
}
 800eeda:	4770      	bx	lr

0800eedc <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 800eedc:	3303      	adds	r3, #3
  for (i = 0U; i < count32b; i++)
 800eede:	089b      	lsrs	r3, r3, #2
 800eee0:	d009      	beq.n	800eef6 <USB_WritePacket+0x1a>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eee2:	3201      	adds	r2, #1
 800eee4:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800eee8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800eeec:	f851 3b04 	ldr.w	r3, [r1], #4
 800eef0:	6003      	str	r3, [r0, #0]
  for (i = 0U; i < count32b; i++)
 800eef2:	428a      	cmp	r2, r1
 800eef4:	d1fa      	bne.n	800eeec <USB_WritePacket+0x10>
}
 800eef6:	2000      	movs	r0, #0
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop

0800eefc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800eefc:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800eefe:	0892      	lsrs	r2, r2, #2
 800ef00:	d00a      	beq.n	800ef18 <USB_ReadPacket+0x1c>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ef02:	f500 5c80 	add.w	ip, r0, #4096	@ 0x1000
 800ef06:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800ef0a:	f8dc 3000 	ldr.w	r3, [ip]
 800ef0e:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800ef12:	4288      	cmp	r0, r1
 800ef14:	d1f9      	bne.n	800ef0a <USB_ReadPacket+0xe>
 800ef16:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800ef18:	4608      	mov	r0, r1
}
 800ef1a:	4770      	bx	lr

0800ef1c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800ef1c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ef1e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ef20:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef22:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800ef26:	d00c      	beq.n	800ef42 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef28:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800ef2c:	2a00      	cmp	r2, #0
 800ef2e:	db00      	blt.n	800ef32 <USB_EPSetStall+0x16>
 800ef30:	b9d3      	cbnz	r3, 800ef68 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef32:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800ef36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef3a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800ef3e:	2000      	movs	r0, #0
 800ef40:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef42:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800ef46:	2a00      	cmp	r2, #0
 800ef48:	db06      	blt.n	800ef58 <USB_EPSetStall+0x3c>
 800ef4a:	b12b      	cbz	r3, 800ef58 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ef4c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800ef50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef54:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ef58:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800ef5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef60:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800ef64:	2000      	movs	r0, #0
 800ef66:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ef68:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800ef6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef70:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800ef74:	e7dd      	b.n	800ef32 <USB_EPSetStall+0x16>
 800ef76:	bf00      	nop

0800ef78 <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef78:	78cb      	ldrb	r3, [r1, #3]
  if (ep->is_in == 1U)
 800ef7a:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ef7c:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef80:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 800ef82:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ef84:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef88:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800ef8a:	d011      	beq.n	800efb0 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ef8c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef90:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ef92:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800ef96:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef9a:	d901      	bls.n	800efa0 <USB_EPClearStall+0x28>
}
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efa0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800efa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efa8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800efac:	2000      	movs	r0, #0
 800efae:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800efb0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efb4:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800efb6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800efba:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efbe:	d8ed      	bhi.n	800ef9c <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efc0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800efc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efc8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800efcc:	2000      	movs	r0, #0
 800efce:	4770      	bx	lr

0800efd0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800efd0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800efd4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800efd8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800efdc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800efe0:	0109      	lsls	r1, r1, #4
 800efe2:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800efe6:	4319      	orrs	r1, r3
 800efe8:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800efec:	2000      	movs	r0, #0
 800efee:	4770      	bx	lr

0800eff0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eff0:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800eff4:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eff6:	f022 0203 	bic.w	r2, r2, #3
 800effa:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800effe:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f002:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f006:	f023 0302 	bic.w	r3, r3, #2
}
 800f00a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f00c:	604b      	str	r3, [r1, #4]
}
 800f00e:	4770      	bx	lr

0800f010 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f010:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800f014:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f016:	f022 0203 	bic.w	r2, r2, #3
 800f01a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f01e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f022:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f026:	f043 0302 	orr.w	r3, r3, #2
}
 800f02a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f02c:	604b      	str	r3, [r1, #4]
}
 800f02e:	4770      	bx	lr

0800f030 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800f030:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800f032:	6980      	ldr	r0, [r0, #24]
}
 800f034:	4010      	ands	r0, r2
 800f036:	4770      	bx	lr

0800f038 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f038:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800f03c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f040:	69c0      	ldr	r0, [r0, #28]
 800f042:	4018      	ands	r0, r3
}
 800f044:	0c00      	lsrs	r0, r0, #16
 800f046:	4770      	bx	lr

0800f048 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f048:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800f04c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f050:	69c0      	ldr	r0, [r0, #28]
 800f052:	4018      	ands	r0, r3
}
 800f054:	b280      	uxth	r0, r0
 800f056:	4770      	bx	lr

0800f058 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f058:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f05c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f060:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f064:	6940      	ldr	r0, [r0, #20]
}
 800f066:	4010      	ands	r0, r2
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop

0800f06c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800f06c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f070:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f074:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f078:	f001 010f 	and.w	r1, r1, #15
 800f07c:	40cb      	lsrs	r3, r1
 800f07e:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f080:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f084:	b2db      	uxtb	r3, r3
 800f086:	4313      	orrs	r3, r2
}
 800f088:	4018      	ands	r0, r3
 800f08a:	4770      	bx	lr

0800f08c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800f08c:	6940      	ldr	r0, [r0, #20]
}
 800f08e:	f000 0001 	and.w	r0, r0, #1
 800f092:	4770      	bx	lr

0800f094 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f094:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 800f098:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f09a:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 800f09e:	f022 0207 	bic.w	r2, r2, #7
 800f0a2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f0a6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f0aa:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f0ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 800f0b2:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f0b4:	604b      	str	r3, [r1, #4]
}
 800f0b6:	4770      	bx	lr

0800f0b8 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f0b8:	4a0c      	ldr	r2, [pc, #48]	@ (800f0ec <USB_EP0_OutStart+0x34>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f0ba:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f0bc:	4291      	cmp	r1, r2
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0be:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f0c2:	d903      	bls.n	800f0cc <USB_EP0_OutStart+0x14>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0c4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800f0c8:	2a00      	cmp	r2, #0
 800f0ca:	db0d      	blt.n	800f0e8 <USB_EP0_OutStart+0x30>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f0d0:	691a      	ldr	r2, [r3, #16]
 800f0d2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800f0d6:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f0d8:	691a      	ldr	r2, [r3, #16]
 800f0da:	f042 0218 	orr.w	r2, r2, #24
 800f0de:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f0e0:	691a      	ldr	r2, [r3, #16]
 800f0e2:	f042 42c0 	orr.w	r2, r2, #1610612736	@ 0x60000000
 800f0e6:	611a      	str	r2, [r3, #16]
}
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	4770      	bx	lr
 800f0ec:	4f54300a 	.word	0x4f54300a

0800f0f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f0f0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0f2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f0f6:	b184      	cbz	r4, 800f11a <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f0f8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 800f0fc:	b15b      	cbz	r3, 800f116 <USBD_CDC_EP0_RxReady+0x26>
 800f0fe:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800f102:	28ff      	cmp	r0, #255	@ 0xff
 800f104:	d007      	beq.n	800f116 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800f10c:	4621      	mov	r1, r4
 800f10e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800f110:	23ff      	movs	r3, #255	@ 0xff
 800f112:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f116:	2000      	movs	r0, #0
}
 800f118:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f11a:	2003      	movs	r0, #3
}
 800f11c:	bd10      	pop	{r4, pc}
 800f11e:	bf00      	nop

0800f120 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f120:	2343      	movs	r3, #67	@ 0x43
 800f122:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800f124:	4800      	ldr	r0, [pc, #0]	@ (800f128 <USBD_CDC_GetFSCfgDesc+0x8>)
 800f126:	4770      	bx	lr
 800f128:	200001ec 	.word	0x200001ec

0800f12c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f12c:	2343      	movs	r3, #67	@ 0x43
 800f12e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800f130:	4800      	ldr	r0, [pc, #0]	@ (800f134 <USBD_CDC_GetHSCfgDesc+0x8>)
 800f132:	4770      	bx	lr
 800f134:	20000230 	.word	0x20000230

0800f138 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f138:	2343      	movs	r3, #67	@ 0x43
 800f13a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800f13c:	4800      	ldr	r0, [pc, #0]	@ (800f140 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800f13e:	4770      	bx	lr
 800f140:	20000274 	.word	0x20000274

0800f144 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f144:	230a      	movs	r3, #10
 800f146:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800f148:	4800      	ldr	r0, [pc, #0]	@ (800f14c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800f14a:	4770      	bx	lr
 800f14c:	200002b8 	.word	0x200002b8

0800f150 <USBD_CDC_DataOut>:
{
 800f150:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f152:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
  if (pdev->pClassData == NULL)
 800f156:	b17d      	cbz	r5, 800f178 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f158:	4604      	mov	r4, r0
 800f15a:	f7f2 fb81 	bl	8001860 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f15e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f162:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f16a:	f8c5 220c 	str.w	r2, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f16e:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800f172:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f174:	2000      	movs	r0, #0
}
 800f176:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800f178:	2003      	movs	r0, #3
}
 800f17a:	bd38      	pop	{r3, r4, r5, pc}

0800f17c <USBD_CDC_DataIn>:
{
 800f17c:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800f17e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f182:	f8d0 42c4 	ldr.w	r4, [r0, #708]	@ 0x2c4
  if (pdev->pClassData == NULL)
 800f186:	b33d      	cbz	r5, 800f1d8 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f188:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800f18c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800f190:	4684      	mov	ip, r0
 800f192:	f8de 3018 	ldr.w	r3, [lr, #24]
 800f196:	460a      	mov	r2, r1
 800f198:	b96b      	cbnz	r3, 800f1b6 <USBD_CDC_DataIn+0x3a>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f19a:	f8dc 32c0 	ldr.w	r3, [ip, #704]	@ 0x2c0
 800f19e:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	f8c5 1214 	str.w	r1, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f1a6:	b123      	cbz	r3, 800f1b2 <USBD_CDC_DataIn+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f1a8:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 800f1ac:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800f1b0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f1b2:	2000      	movs	r0, #0
}
 800f1b4:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f1b6:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800f1ba:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800f1be:	6c64      	ldr	r4, [r4, #68]	@ 0x44
 800f1c0:	fbb3 f6f4 	udiv	r6, r3, r4
 800f1c4:	fb04 3316 	mls	r3, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1e6      	bne.n	800f19a <USBD_CDC_DataIn+0x1e>
    pdev->ep_in[epnum].total_length = 0U;
 800f1cc:	f8ce 3018 	str.w	r3, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	f7f2 fb2d 	bl	8001830 <USBD_LL_Transmit>
 800f1d6:	e7ec      	b.n	800f1b2 <USBD_CDC_DataIn+0x36>
    return (uint8_t)USBD_FAIL;
 800f1d8:	2003      	movs	r0, #3
}
 800f1da:	bd70      	pop	{r4, r5, r6, pc}

0800f1dc <USBD_CDC_Setup>:
{
 800f1dc:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f1de:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
{
 800f1e2:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800f1ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800f1ee:	b15d      	cbz	r5, 800f208 <USBD_CDC_Setup+0x2c>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1f0:	780b      	ldrb	r3, [r1, #0]
 800f1f2:	f013 0260 	ands.w	r2, r3, #96	@ 0x60
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	460c      	mov	r4, r1
 800f1fa:	d01d      	beq.n	800f238 <USBD_CDC_Setup+0x5c>
 800f1fc:	2a20      	cmp	r2, #32
 800f1fe:	d006      	beq.n	800f20e <USBD_CDC_Setup+0x32>
          USBD_CtlError(pdev, req);
 800f200:	4621      	mov	r1, r4
 800f202:	4630      	mov	r0, r6
 800f204:	f000 fd1c 	bl	800fc40 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800f208:	2003      	movs	r0, #3
}
 800f20a:	b002      	add	sp, #8
 800f20c:	bd70      	pop	{r4, r5, r6, pc}
      if (req->wLength != 0U)
 800f20e:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f210:	f891 c001 	ldrb.w	ip, [r1, #1]
      if (req->wLength != 0U)
 800f214:	b372      	cbz	r2, 800f274 <USBD_CDC_Setup+0x98>
        if ((req->bmRequest & 0x80U) != 0U)
 800f216:	061b      	lsls	r3, r3, #24
 800f218:	d54c      	bpl.n	800f2b4 <USBD_CDC_Setup+0xd8>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f21a:	f8d6 32c0 	ldr.w	r3, [r6, #704]	@ 0x2c0
 800f21e:	4629      	mov	r1, r5
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	4660      	mov	r0, ip
 800f224:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f226:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f228:	2a07      	cmp	r2, #7
 800f22a:	4629      	mov	r1, r5
 800f22c:	bf28      	it	cs
 800f22e:	2207      	movcs	r2, #7
 800f230:	4630      	mov	r0, r6
 800f232:	f000 fd39 	bl	800fca8 <USBD_CtlSendData>
 800f236:	e022      	b.n	800f27e <USBD_CDC_Setup+0xa2>
      switch (req->bRequest)
 800f238:	784b      	ldrb	r3, [r1, #1]
 800f23a:	2b0b      	cmp	r3, #11
 800f23c:	d8e0      	bhi.n	800f200 <USBD_CDC_Setup+0x24>
 800f23e:	a201      	add	r2, pc, #4	@ (adr r2, 800f244 <USBD_CDC_Setup+0x68>)
 800f240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f244:	0800f28d 	.word	0x0800f28d
 800f248:	0800f27f 	.word	0x0800f27f
 800f24c:	0800f201 	.word	0x0800f201
 800f250:	0800f201 	.word	0x0800f201
 800f254:	0800f201 	.word	0x0800f201
 800f258:	0800f201 	.word	0x0800f201
 800f25c:	0800f201 	.word	0x0800f201
 800f260:	0800f201 	.word	0x0800f201
 800f264:	0800f201 	.word	0x0800f201
 800f268:	0800f201 	.word	0x0800f201
 800f26c:	0800f2a1 	.word	0x0800f2a1
 800f270:	0800f283 	.word	0x0800f283
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f274:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 800f278:	4660      	mov	r0, ip
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 800f27e:	2000      	movs	r0, #0
 800f280:	e7c3      	b.n	800f20a <USBD_CDC_Setup+0x2e>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f282:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f286:	2b03      	cmp	r3, #3
 800f288:	d0f9      	beq.n	800f27e <USBD_CDC_Setup+0xa2>
 800f28a:	e7b9      	b.n	800f200 <USBD_CDC_Setup+0x24>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f28c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f290:	2b03      	cmp	r3, #3
 800f292:	d1b5      	bne.n	800f200 <USBD_CDC_Setup+0x24>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f294:	2202      	movs	r2, #2
 800f296:	f10d 0106 	add.w	r1, sp, #6
 800f29a:	f000 fd05 	bl	800fca8 <USBD_CtlSendData>
 800f29e:	e7ee      	b.n	800f27e <USBD_CDC_Setup+0xa2>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2a0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f2a4:	2b03      	cmp	r3, #3
 800f2a6:	d1ab      	bne.n	800f200 <USBD_CDC_Setup+0x24>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	f10d 0105 	add.w	r1, sp, #5
 800f2ae:	f000 fcfb 	bl	800fca8 <USBD_CtlSendData>
 800f2b2:	e7e4      	b.n	800f27e <USBD_CDC_Setup+0xa2>
          hcdc->CmdOpCode = req->bRequest;
 800f2b4:	f885 c200 	strb.w	ip, [r5, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f2b8:	f885 2201 	strb.w	r2, [r5, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f2bc:	4629      	mov	r1, r5
 800f2be:	f000 fd09 	bl	800fcd4 <USBD_CtlPrepareRx>
 800f2c2:	e7dc      	b.n	800f27e <USBD_CDC_Setup+0xa2>

0800f2c4 <USBD_CDC_DeInit>:
{
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f2c8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f2ca:	2181      	movs	r1, #129	@ 0x81
 800f2cc:	f7f2 fa6c 	bl	80017a8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f2d0:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f2d2:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	f7f2 fa67 	bl	80017a8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f2da:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f2de:	2182      	movs	r1, #130	@ 0x82
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f7f2 fa61 	bl	80017a8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800f2e6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f2ea:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassData != NULL)
 800f2ec:	b14b      	cbz	r3, 800f302 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f2ee:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f2f6:	f8d4 02bc 	ldr.w	r0, [r4, #700]	@ 0x2bc
 800f2fa:	f7f2 faeb 	bl	80018d4 <USBD_static_free>
    pdev->pClassData = NULL;
 800f2fe:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800f302:	2000      	movs	r0, #0
 800f304:	bd38      	pop	{r3, r4, r5, pc}
 800f306:	bf00      	nop

0800f308 <USBD_CDC_Init>:
{
 800f308:	b570      	push	{r4, r5, r6, lr}
 800f30a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f30c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f310:	f7f2 fadc 	bl	80018cc <USBD_static_malloc>
  if (hcdc == NULL)
 800f314:	4605      	mov	r5, r0
 800f316:	2800      	cmp	r0, #0
 800f318:	d049      	beq.n	800f3ae <USBD_CDC_Init+0xa6>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f31a:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800f31c:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f320:	b37b      	cbz	r3, 800f382 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f322:	2340      	movs	r3, #64	@ 0x40
 800f324:	2202      	movs	r2, #2
 800f326:	2181      	movs	r1, #129	@ 0x81
 800f328:	4620      	mov	r0, r4
 800f32a:	f7f2 fa2f 	bl	800178c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f32e:	2101      	movs	r1, #1
 800f330:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f332:	2340      	movs	r3, #64	@ 0x40
 800f334:	2202      	movs	r2, #2
 800f336:	4620      	mov	r0, r4
 800f338:	f7f2 fa28 	bl	800178c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f33c:	2601      	movs	r6, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f33e:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f340:	2308      	movs	r3, #8
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f342:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f346:	2182      	movs	r1, #130	@ 0x82
 800f348:	2203      	movs	r2, #3
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f34a:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f34e:	4620      	mov	r0, r4
 800f350:	f7f2 fa1c 	bl	800178c <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f354:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f358:	f8a4 604c 	strh.w	r6, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4798      	blx	r3
  hcdc->TxState = 0U;
 800f360:	2300      	movs	r3, #0
 800f362:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f366:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f36a:	7c23      	ldrb	r3, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f36c:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f370:	b9bb      	cbnz	r3, 800f3a2 <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f376:	4631      	mov	r1, r6
 800f378:	4620      	mov	r0, r4
 800f37a:	f7f2 fa65 	bl	8001848 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800f37e:	2000      	movs	r0, #0
}
 800f380:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f386:	2202      	movs	r2, #2
 800f388:	2181      	movs	r1, #129	@ 0x81
 800f38a:	4620      	mov	r0, r4
 800f38c:	f7f2 f9fe 	bl	800178c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f390:	2101      	movs	r1, #1
 800f392:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f394:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f398:	2202      	movs	r2, #2
 800f39a:	4620      	mov	r0, r4
 800f39c:	f7f2 f9f6 	bl	800178c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f3a0:	e7cc      	b.n	800f33c <USBD_CDC_Init+0x34>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f3a2:	2340      	movs	r3, #64	@ 0x40
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f7f2 fa4e 	bl	8001848 <USBD_LL_PrepareReceive>
 800f3ac:	e7e7      	b.n	800f37e <USBD_CDC_Init+0x76>
    pdev->pClassData = NULL;
 800f3ae:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800f3b2:	2002      	movs	r0, #2
}
 800f3b4:	bd70      	pop	{r4, r5, r6, pc}
 800f3b6:	bf00      	nop

0800f3b8 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800f3b8:	b119      	cbz	r1, 800f3c2 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800f3ba:	f8c0 12c0 	str.w	r1, [r0, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f3be:	2000      	movs	r0, #0
 800f3c0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f3c2:	2003      	movs	r0, #3
}
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop

0800f3c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3c8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f3cc:	b12b      	cbz	r3, 800f3da <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800f3ce:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f3d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f3da:	2003      	movs	r0, #3
}
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop

0800f3e0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3e0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f3e4:	b11b      	cbz	r3, 800f3ee <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800f3e6:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f3ee:	2003      	movs	r0, #3
}
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop

0800f3f4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3f4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc

  if (pdev->pClassData == NULL)
 800f3f8:	b18a      	cbz	r2, 800f41e <USBD_CDC_ReceivePacket+0x2a>
{
 800f3fa:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3fc:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f3fe:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f402:	b12b      	cbz	r3, 800f410 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f404:	2340      	movs	r3, #64	@ 0x40
 800f406:	2101      	movs	r1, #1
 800f408:	f7f2 fa1e 	bl	8001848 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f40c:	2000      	movs	r0, #0
}
 800f40e:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f414:	2101      	movs	r1, #1
 800f416:	f7f2 fa17 	bl	8001848 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800f41a:	2000      	movs	r0, #0
}
 800f41c:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 800f41e:	2003      	movs	r0, #3
}
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop

0800f424 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f424:	b178      	cbz	r0, 800f446 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f426:	2300      	movs	r3, #0
 800f428:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f42c:	f8c0 32c0 	str.w	r3, [r0, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f430:	f8c0 32cc 	str.w	r3, [r0, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f434:	b109      	cbz	r1, 800f43a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800f436:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f43a:	2301      	movs	r3, #1
 800f43c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 800f440:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f442:	f7f2 b965 	b.w	8001710 <USBD_LL_Init>

  return ret;
}
 800f446:	2003      	movs	r0, #3
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop

0800f44c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f44c:	b510      	push	{r4, lr}
 800f44e:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800f450:	2300      	movs	r3, #0
 800f452:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800f456:	b161      	cbz	r1, 800f472 <USBD_RegisterClass+0x26>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f458:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass = pclass;
 800f45a:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f45e:	4604      	mov	r4, r0
 800f460:	b123      	cbz	r3, 800f46c <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f462:	f10d 0006 	add.w	r0, sp, #6
 800f466:	4798      	blx	r3
 800f468:	f8c4 02cc 	str.w	r0, [r4, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f46c:	2000      	movs	r0, #0
}
 800f46e:	b002      	add	sp, #8
 800f470:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800f472:	2003      	movs	r0, #3
}
 800f474:	b002      	add	sp, #8
 800f476:	bd10      	pop	{r4, pc}

0800f478 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f478:	f7f2 b97c 	b.w	8001774 <USBD_LL_Start>

0800f47c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800f47c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f480:	b10b      	cbz	r3, 800f486 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4718      	bx	r3
  }

  return ret;
}
 800f486:	2003      	movs	r0, #3
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop

0800f48c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f48c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f48e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f492:	b10b      	cbz	r3, 800f498 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	4798      	blx	r3
  }

  return USBD_OK;
}
 800f498:	2000      	movs	r0, #0
 800f49a:	bd08      	pop	{r3, pc}

0800f49c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f4a0:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	f000 fbbf 	bl	800fc28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800f4aa:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 800f4ae:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 800f4b2:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800f4bc:	f001 031f 	and.w	r3, r1, #31
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d009      	beq.n	800f4d8 <USBD_LL_SetupStage+0x3c>
 800f4c4:	2b02      	cmp	r3, #2
 800f4c6:	d013      	beq.n	800f4f0 <USBD_LL_SetupStage+0x54>
 800f4c8:	b163      	cbz	r3, 800f4e4 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 800f4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f4d4:	f7f2 b974 	b.w	80017c0 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f4d8:	4629      	mov	r1, r5
 800f4da:	4620      	mov	r0, r4
}
 800f4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f4e0:	f000 bad4 	b.w	800fa8c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f4e4:	4629      	mov	r1, r5
 800f4e6:	4620      	mov	r0, r4
}
 800f4e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f4ec:	f000 b91e 	b.w	800f72c <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f4f0:	4629      	mov	r1, r5
 800f4f2:	4620      	mov	r0, r4
}
 800f4f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f4f8:	f000 bafc 	b.w	800faf4 <USBD_StdEPReq>

0800f4fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f4fc:	b510      	push	{r4, lr}
 800f4fe:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f500:	b931      	cbnz	r1, 800f510 <USBD_LL_DataOutStage+0x14>
 800f502:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f504:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800f508:	2a03      	cmp	r2, #3
 800f50a:	d00d      	beq.n	800f528 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 800f50c:	2000      	movs	r0, #0
 800f50e:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f510:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f514:	2b03      	cmp	r3, #3
 800f516:	d1f9      	bne.n	800f50c <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 800f518:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f51c:	699b      	ldr	r3, [r3, #24]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d0f4      	beq.n	800f50c <USBD_LL_DataOutStage+0x10>
}
 800f522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f526:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800f528:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 800f52c:	4291      	cmp	r1, r2
 800f52e:	d808      	bhi.n	800f542 <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f530:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f534:	2b03      	cmp	r3, #3
 800f536:	d00e      	beq.n	800f556 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800f538:	4620      	mov	r0, r4
 800f53a:	f000 fbe1 	bl	800fd00 <USBD_CtlSendStatus>
}
 800f53e:	2000      	movs	r0, #0
 800f540:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800f542:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f544:	428a      	cmp	r2, r1
 800f546:	bf28      	it	cs
 800f548:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800f54a:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f54e:	4619      	mov	r1, r3
 800f550:	f000 fbce 	bl	800fcf0 <USBD_CtlContinueRx>
 800f554:	e7da      	b.n	800f50c <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 800f556:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f55a:	691b      	ldr	r3, [r3, #16]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0eb      	beq.n	800f538 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 800f560:	4798      	blx	r3
 800f562:	e7e9      	b.n	800f538 <USBD_LL_DataOutStage+0x3c>

0800f564 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f568:	b951      	cbnz	r1, 800f580 <USBD_LL_DataInStage+0x1c>
 800f56a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f56c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800f570:	2a02      	cmp	r2, #2
 800f572:	d011      	beq.n	800f598 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f574:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d022      	beq.n	800f5c2 <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 800f57c:	2000      	movs	r0, #0
 800f57e:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f580:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f584:	2b03      	cmp	r3, #3
 800f586:	d1f9      	bne.n	800f57c <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 800f588:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f58c:	695b      	ldr	r3, [r3, #20]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d0f4      	beq.n	800f57c <USBD_LL_DataInStage+0x18>
}
 800f592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f596:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800f598:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800f59c:	42b2      	cmp	r2, r6
 800f59e:	460d      	mov	r5, r1
 800f5a0:	d814      	bhi.n	800f5cc <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800f5a2:	d01f      	beq.n	800f5e4 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5a4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d028      	beq.n	800f5fe <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5ac:	2180      	movs	r1, #128	@ 0x80
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	f7f2 f906 	bl	80017c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f000 fbaf 	bl	800fd18 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800f5ba:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d1dc      	bne.n	800f57c <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
}
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800f5cc:	1b92      	subs	r2, r2, r6
 800f5ce:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	f000 fb77 	bl	800fcc4 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f5d6:	462b      	mov	r3, r5
 800f5d8:	462a      	mov	r2, r5
 800f5da:	4629      	mov	r1, r5
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f7f2 f933 	bl	8001848 <USBD_LL_PrepareReceive>
 800f5e2:	e7c7      	b.n	800f574 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800f5e4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d8dc      	bhi.n	800f5a4 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 800f5ea:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d2d8      	bcs.n	800f5a4 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f5f2:	460a      	mov	r2, r1
 800f5f4:	f000 fb66 	bl	800fcc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f5f8:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 800f5fc:	e7eb      	b.n	800f5d6 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800f5fe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d0d1      	beq.n	800f5ac <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 800f608:	4620      	mov	r0, r4
 800f60a:	4798      	blx	r3
 800f60c:	e7ce      	b.n	800f5ac <USBD_LL_DataInStage+0x48>
 800f60e:	bf00      	nop

0800f610 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800f610:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800f614:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f616:	2201      	movs	r2, #1
 800f618:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
  pdev->dev_config = 0U;
 800f61c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800f61e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 800f622:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  if (pdev->pClass == NULL)
 800f626:	b1eb      	cbz	r3, 800f664 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800f628:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
{
 800f62c:	b570      	push	{r4, r5, r6, lr}
 800f62e:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800f630:	b112      	cbz	r2, 800f638 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	b103      	cbz	r3, 800f638 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f636:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f638:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f63a:	2200      	movs	r2, #0
 800f63c:	4611      	mov	r1, r2
 800f63e:	462b      	mov	r3, r5
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f640:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f642:	4620      	mov	r0, r4
 800f644:	f7f2 f8a2 	bl	800178c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f648:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f64c:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f650:	462b      	mov	r3, r5
 800f652:	2200      	movs	r2, #0
 800f654:	2180      	movs	r1, #128	@ 0x80
 800f656:	4620      	mov	r0, r4
 800f658:	f7f2 f898 	bl	800178c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f65c:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f65e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800f660:	2000      	movs	r0, #0
}
 800f662:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800f664:	2003      	movs	r0, #3
}
 800f666:	4770      	bx	lr

0800f668 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800f668:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800f66a:	2000      	movs	r0, #0
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop

0800f670 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800f670:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
{
 800f674:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f676:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 800f678:	b2d2      	uxtb	r2, r2
 800f67a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d

  return USBD_OK;
}
 800f67e:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f680:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
}
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop

0800f688 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f688:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f68c:	2b04      	cmp	r3, #4
 800f68e:	d104      	bne.n	800f69a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f690:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800f694:	b2db      	uxtb	r3, r3
 800f696:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800f69a:	2000      	movs	r0, #0
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop

0800f6a0 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800f6a0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800f6a4:	b162      	cbz	r2, 800f6c0 <USBD_LL_SOF+0x20>
{
 800f6a6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6a8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f6ac:	2b03      	cmp	r3, #3
 800f6ae:	d001      	beq.n	800f6b4 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800f6b0:	2000      	movs	r0, #0
}
 800f6b2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800f6b4:	69d3      	ldr	r3, [r2, #28]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d0fa      	beq.n	800f6b0 <USBD_LL_SOF+0x10>
      (void)pdev->pClass->SOF(pdev);
 800f6ba:	4798      	blx	r3
  return USBD_OK;
 800f6bc:	2000      	movs	r0, #0
}
 800f6be:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800f6c0:	2003      	movs	r0, #3
}
 800f6c2:	4770      	bx	lr

0800f6c4 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800f6c4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800f6c8:	b162      	cbz	r2, 800f6e4 <USBD_LL_IsoINIncomplete+0x20>
{
 800f6ca:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6cc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f6d0:	2b03      	cmp	r3, #3
 800f6d2:	d001      	beq.n	800f6d8 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800f6d4:	2000      	movs	r0, #0
}
 800f6d6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f6d8:	6a13      	ldr	r3, [r2, #32]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d0fa      	beq.n	800f6d4 <USBD_LL_IsoINIncomplete+0x10>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f6de:	4798      	blx	r3
  return USBD_OK;
 800f6e0:	2000      	movs	r0, #0
}
 800f6e2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800f6e4:	2003      	movs	r0, #3
}
 800f6e6:	4770      	bx	lr

0800f6e8 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800f6e8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800f6ec:	b162      	cbz	r2, 800f708 <USBD_LL_IsoOUTIncomplete+0x20>
{
 800f6ee:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6f0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f6f4:	2b03      	cmp	r3, #3
 800f6f6:	d001      	beq.n	800f6fc <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800f6f8:	2000      	movs	r0, #0
}
 800f6fa:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f6fc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d0fa      	beq.n	800f6f8 <USBD_LL_IsoOUTIncomplete+0x10>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f702:	4798      	blx	r3
  return USBD_OK;
 800f704:	2000      	movs	r0, #0
}
 800f706:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800f708:	2003      	movs	r0, #3
}
 800f70a:	4770      	bx	lr

0800f70c <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 800f70c:	2000      	movs	r0, #0
 800f70e:	4770      	bx	lr

0800f710 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 800f710:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f714:	2101      	movs	r1, #1
 800f716:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass != NULL)
 800f71a:	b12a      	cbz	r2, 800f728 <USBD_LL_DevDisconnected+0x18>
{
 800f71c:	b508      	push	{r3, lr}
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f71e:	6852      	ldr	r2, [r2, #4]
 800f720:	7901      	ldrb	r1, [r0, #4]
 800f722:	4790      	blx	r2
  }

  return USBD_OK;
}
 800f724:	2000      	movs	r0, #0
 800f726:	bd08      	pop	{r3, pc}
 800f728:	2000      	movs	r0, #0
 800f72a:	4770      	bx	lr

0800f72c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f72c:	b530      	push	{r4, r5, lr}
 800f72e:	780b      	ldrb	r3, [r1, #0]
 800f730:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f734:	2b20      	cmp	r3, #32
{
 800f736:	b083      	sub	sp, #12
 800f738:	460d      	mov	r5, r1
 800f73a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f73c:	d00e      	beq.n	800f75c <USBD_StdDevReq+0x30>
 800f73e:	2b40      	cmp	r3, #64	@ 0x40
 800f740:	d00c      	beq.n	800f75c <USBD_StdDevReq+0x30>
 800f742:	b1a3      	cbz	r3, 800f76e <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f744:	2180      	movs	r1, #128	@ 0x80
 800f746:	4620      	mov	r0, r4
 800f748:	f7f2 f83a 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f74c:	2100      	movs	r1, #0
 800f74e:	4620      	mov	r0, r4
 800f750:	f7f2 f836 	bl	80017c0 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800f754:	2500      	movs	r5, #0
}
 800f756:	4628      	mov	r0, r5
 800f758:	b003      	add	sp, #12
 800f75a:	bd30      	pop	{r4, r5, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f75c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	4629      	mov	r1, r5
 800f764:	4620      	mov	r0, r4
}
 800f766:	b003      	add	sp, #12
 800f768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f76c:	4718      	bx	r3
      switch (req->bRequest)
 800f76e:	784b      	ldrb	r3, [r1, #1]
 800f770:	2b09      	cmp	r3, #9
 800f772:	d8e7      	bhi.n	800f744 <USBD_StdDevReq+0x18>
 800f774:	a201      	add	r2, pc, #4	@ (adr r2, 800f77c <USBD_StdDevReq+0x50>)
 800f776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f77a:	bf00      	nop
 800f77c:	0800f7dd 	.word	0x0800f7dd
 800f780:	0800f805 	.word	0x0800f805
 800f784:	0800f745 	.word	0x0800f745
 800f788:	0800f823 	.word	0x0800f823
 800f78c:	0800f745 	.word	0x0800f745
 800f790:	0800f82b 	.word	0x0800f82b
 800f794:	0800f865 	.word	0x0800f865
 800f798:	0800f745 	.word	0x0800f745
 800f79c:	0800f8b9 	.word	0x0800f8b9
 800f7a0:	0800f7a5 	.word	0x0800f7a5
  cfgidx = (uint8_t)(req->wValue);
 800f7a4:	7889      	ldrb	r1, [r1, #2]
 800f7a6:	4db6      	ldr	r5, [pc, #728]	@ (800fa80 <USBD_StdDevReq+0x354>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f7a8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800f7aa:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f7ac:	f200 8148 	bhi.w	800fa40 <USBD_StdDevReq+0x314>
  switch (pdev->dev_state)
 800f7b0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f7b4:	2b02      	cmp	r3, #2
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	f000 8130 	beq.w	800fa1c <USBD_StdDevReq+0x2f0>
 800f7bc:	2a03      	cmp	r2, #3
 800f7be:	f000 810b 	beq.w	800f9d8 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7c2:	2180      	movs	r1, #128	@ 0x80
 800f7c4:	f7f1 fffc 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f7f1 fff8 	bl	80017c0 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7d0:	7829      	ldrb	r1, [r5, #0]
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f7ff fe5a 	bl	800f48c <USBD_ClrClassConfig>
    return USBD_FAIL;
 800f7d8:	2503      	movs	r5, #3
 800f7da:	e7bc      	b.n	800f756 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800f7dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	2b02      	cmp	r3, #2
 800f7e4:	d8ae      	bhi.n	800f744 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800f7e6:	88ca      	ldrh	r2, [r1, #6]
 800f7e8:	2a02      	cmp	r2, #2
 800f7ea:	d1ab      	bne.n	800f744 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 800f7ec:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800f7f0:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	bf0c      	ite	eq
 800f7f6:	2301      	moveq	r3, #1
 800f7f8:	2303      	movne	r3, #3
 800f7fa:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f7fe:	f000 fa53 	bl	800fca8 <USBD_CtlSendData>
      break;
 800f802:	e7a7      	b.n	800f754 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800f804:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f808:	3b01      	subs	r3, #1
 800f80a:	2b02      	cmp	r3, #2
 800f80c:	d89a      	bhi.n	800f744 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f80e:	884b      	ldrh	r3, [r1, #2]
 800f810:	2b01      	cmp	r3, #1
 800f812:	d19f      	bne.n	800f754 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800f814:	2300      	movs	r3, #0
 800f816:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f81a:	4620      	mov	r0, r4
 800f81c:	f000 fa70 	bl	800fd00 <USBD_CtlSendStatus>
 800f820:	e798      	b.n	800f754 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f822:	884b      	ldrh	r3, [r1, #2]
 800f824:	2b01      	cmp	r3, #1
 800f826:	d195      	bne.n	800f754 <USBD_StdDevReq+0x28>
 800f828:	e7f5      	b.n	800f816 <USBD_StdDevReq+0xea>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f82a:	888b      	ldrh	r3, [r1, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d189      	bne.n	800f744 <USBD_StdDevReq+0x18>
 800f830:	88cb      	ldrh	r3, [r1, #6]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d186      	bne.n	800f744 <USBD_StdDevReq+0x18>
 800f836:	884d      	ldrh	r5, [r1, #2]
 800f838:	2d7f      	cmp	r5, #127	@ 0x7f
 800f83a:	d883      	bhi.n	800f744 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f83c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f840:	2b03      	cmp	r3, #3
 800f842:	f43f af7f 	beq.w	800f744 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f846:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800f848:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f84c:	f7f1 ffe4 	bl	8001818 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f850:	4620      	mov	r0, r4
 800f852:	f000 fa55 	bl	800fd00 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800f856:	2d00      	cmp	r5, #0
 800f858:	f000 8114 	beq.w	800fa84 <USBD_StdDevReq+0x358>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f85c:	2302      	movs	r3, #2
 800f85e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800f862:	e777      	b.n	800f754 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800f864:	884a      	ldrh	r2, [r1, #2]
 800f866:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800f868:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800f86a:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 800f86c:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800f870:	2b0e      	cmp	r3, #14
 800f872:	f63f af67 	bhi.w	800f744 <USBD_StdDevReq+0x18>
 800f876:	a101      	add	r1, pc, #4	@ (adr r1, 800f87c <USBD_StdDevReq+0x150>)
 800f878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f87c:	0800f959 	.word	0x0800f959
 800f880:	0800f93f 	.word	0x0800f93f
 800f884:	0800f92d 	.word	0x0800f92d
 800f888:	0800f745 	.word	0x0800f745
 800f88c:	0800f745 	.word	0x0800f745
 800f890:	0800f917 	.word	0x0800f917
 800f894:	0800f969 	.word	0x0800f969
 800f898:	0800f745 	.word	0x0800f745
 800f89c:	0800f745 	.word	0x0800f745
 800f8a0:	0800f745 	.word	0x0800f745
 800f8a4:	0800f745 	.word	0x0800f745
 800f8a8:	0800f745 	.word	0x0800f745
 800f8ac:	0800f745 	.word	0x0800f745
 800f8b0:	0800f745 	.word	0x0800f745
 800f8b4:	0800f8df 	.word	0x0800f8df
  if (req->wLength != 1U)
 800f8b8:	88ca      	ldrh	r2, [r1, #6]
 800f8ba:	2a01      	cmp	r2, #1
 800f8bc:	f47f af42 	bne.w	800f744 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800f8c0:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 800f8c4:	2902      	cmp	r1, #2
 800f8c6:	b2cb      	uxtb	r3, r1
 800f8c8:	d87f      	bhi.n	800f9ca <USBD_StdDevReq+0x29e>
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f43f af3a 	beq.w	800f744 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800f8d0:	4601      	mov	r1, r0
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f8d8:	f000 f9e6 	bl	800fca8 <USBD_CtlSendData>
        break;
 800f8dc:	e73a      	b.n	800f754 <USBD_StdDevReq+0x28>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f8de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f8e2:	69db      	ldr	r3, [r3, #28]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f43f af2d 	beq.w	800f744 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f8ea:	7c20      	ldrb	r0, [r4, #16]
 800f8ec:	f10d 0106 	add.w	r1, sp, #6
 800f8f0:	4798      	blx	r3
  if (req->wLength != 0U)
 800f8f2:	88eb      	ldrh	r3, [r5, #6]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d090      	beq.n	800f81a <USBD_StdDevReq+0xee>
    if (len != 0U)
 800f8f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f8fc:	2a00      	cmp	r2, #0
 800f8fe:	f43f af21 	beq.w	800f744 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 800f902:	429a      	cmp	r2, r3
 800f904:	bf28      	it	cs
 800f906:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f908:	4601      	mov	r1, r0
 800f90a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800f90c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f910:	f000 f9ca 	bl	800fca8 <USBD_CtlSendData>
 800f914:	e71e      	b.n	800f754 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f916:	7c03      	ldrb	r3, [r0, #16]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f47f af13 	bne.w	800f744 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f91e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f922:	f10d 0006 	add.w	r0, sp, #6
 800f926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f928:	4798      	blx	r3
  if (err != 0U)
 800f92a:	e7e2      	b.n	800f8f2 <USBD_StdDevReq+0x1c6>
      switch ((uint8_t)(req->wValue))
 800f92c:	b2d2      	uxtb	r2, r2
 800f92e:	2a05      	cmp	r2, #5
 800f930:	f63f af08 	bhi.w	800f744 <USBD_StdDevReq+0x18>
 800f934:	e8df f002 	tbb	[pc, r2]
 800f938:	31373d43 	.word	0x31373d43
 800f93c:	252b      	.short	0x252b
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f93e:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f940:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f944:	2a00      	cmp	r2, #0
 800f946:	f040 808d 	bne.w	800fa64 <USBD_StdDevReq+0x338>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f94c:	f10d 0006 	add.w	r0, sp, #6
 800f950:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f952:	2302      	movs	r3, #2
 800f954:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800f956:	e7cc      	b.n	800f8f2 <USBD_StdDevReq+0x1c6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f958:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f95c:	7c00      	ldrb	r0, [r0, #16]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f10d 0106 	add.w	r1, sp, #6
 800f964:	4798      	blx	r3
  if (err != 0U)
 800f966:	e7c4      	b.n	800f8f2 <USBD_StdDevReq+0x1c6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f968:	7c03      	ldrb	r3, [r0, #16]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f47f aeea 	bne.w	800f744 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f970:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f974:	f10d 0006 	add.w	r0, sp, #6
 800f978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f97a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f97c:	2307      	movs	r3, #7
 800f97e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800f980:	e7b7      	b.n	800f8f2 <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f982:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f986:	699b      	ldr	r3, [r3, #24]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1ae      	bne.n	800f8ea <USBD_StdDevReq+0x1be>
 800f98c:	e6da      	b.n	800f744 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f98e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f992:	695b      	ldr	r3, [r3, #20]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d1a8      	bne.n	800f8ea <USBD_StdDevReq+0x1be>
 800f998:	e6d4      	b.n	800f744 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f99a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d1a2      	bne.n	800f8ea <USBD_StdDevReq+0x1be>
 800f9a4:	e6ce      	b.n	800f744 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f9a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d19c      	bne.n	800f8ea <USBD_StdDevReq+0x1be>
 800f9b0:	e6c8      	b.n	800f744 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f9b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d196      	bne.n	800f8ea <USBD_StdDevReq+0x1be>
 800f9bc:	e6c2      	b.n	800f744 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f9be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d190      	bne.n	800f8ea <USBD_StdDevReq+0x1be>
 800f9c8:	e6bc      	b.n	800f744 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800f9ca:	2b03      	cmp	r3, #3
 800f9cc:	f47f aeba 	bne.w	800f744 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f9d0:	1d01      	adds	r1, r0, #4
 800f9d2:	f000 f969 	bl	800fca8 <USBD_CtlSendData>
        break;
 800f9d6:	e6bd      	b.n	800f754 <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 800f9d8:	2900      	cmp	r1, #0
 800f9da:	d039      	beq.n	800fa50 <USBD_StdDevReq+0x324>
      else if (cfgidx != pdev->dev_config)
 800f9dc:	6841      	ldr	r1, [r0, #4]
 800f9de:	2901      	cmp	r1, #1
 800f9e0:	f43f af1b 	beq.w	800f81a <USBD_StdDevReq+0xee>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9e4:	b2c9      	uxtb	r1, r1
 800f9e6:	f7ff fd51 	bl	800f48c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f9ea:	7829      	ldrb	r1, [r5, #0]
 800f9ec:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f7ff fd44 	bl	800f47c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800f9f4:	4605      	mov	r5, r0
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	f43f af0f 	beq.w	800f81a <USBD_StdDevReq+0xee>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9fc:	2180      	movs	r1, #128	@ 0x80
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f7f1 fede 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa04:	2100      	movs	r1, #0
 800fa06:	4620      	mov	r0, r4
 800fa08:	f7f1 feda 	bl	80017c0 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa0c:	7921      	ldrb	r1, [r4, #4]
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f7ff fd3c 	bl	800f48c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa14:	2302      	movs	r3, #2
 800fa16:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fa1a:	e69c      	b.n	800f756 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800fa1c:	2900      	cmp	r1, #0
 800fa1e:	f43f aefc 	beq.w	800f81a <USBD_StdDevReq+0xee>
        pdev->dev_config = cfgidx;
 800fa22:	2101      	movs	r1, #1
 800fa24:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa26:	f7ff fd29 	bl	800f47c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	b308      	cbz	r0, 800fa72 <USBD_StdDevReq+0x346>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa2e:	2180      	movs	r1, #128	@ 0x80
 800fa30:	4620      	mov	r0, r4
 800fa32:	f7f1 fec5 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa36:	2100      	movs	r1, #0
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f7f1 fec1 	bl	80017c0 <USBD_LL_StallEP>
}
 800fa3e:	e68a      	b.n	800f756 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa40:	2180      	movs	r1, #128	@ 0x80
 800fa42:	f7f1 febd 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa46:	2100      	movs	r1, #0
 800fa48:	4620      	mov	r0, r4
 800fa4a:	f7f1 feb9 	bl	80017c0 <USBD_LL_StallEP>
    return USBD_FAIL;
 800fa4e:	e6c3      	b.n	800f7d8 <USBD_StdDevReq+0xac>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa50:	2302      	movs	r3, #2
 800fa52:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fa56:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa58:	f7ff fd18 	bl	800f48c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	f000 f94f 	bl	800fd00 <USBD_CtlSendStatus>
 800fa62:	e677      	b.n	800f754 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fa64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa66:	f10d 0006 	add.w	r0, sp, #6
 800fa6a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa6c:	2302      	movs	r3, #2
 800fa6e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800fa70:	e73f      	b.n	800f8f2 <USBD_StdDevReq+0x1c6>
          (void)USBD_CtlSendStatus(pdev);
 800fa72:	4620      	mov	r0, r4
 800fa74:	f000 f944 	bl	800fd00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fa78:	2303      	movs	r3, #3
 800fa7a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fa7e:	e669      	b.n	800f754 <USBD_StdDevReq+0x28>
 800fa80:	20002f14 	.word	0x20002f14
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fa84:	2301      	movs	r3, #1
 800fa86:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fa8a:	e663      	b.n	800f754 <USBD_StdDevReq+0x28>

0800fa8c <USBD_StdItfReq>:
{
 800fa8c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa8e:	780b      	ldrb	r3, [r1, #0]
 800fa90:	065a      	lsls	r2, r3, #25
{
 800fa92:	460d      	mov	r5, r1
 800fa94:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa96:	d50c      	bpl.n	800fab2 <USBD_StdItfReq+0x26>
 800fa98:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800fa9c:	2a40      	cmp	r2, #64	@ 0x40
 800fa9e:	d008      	beq.n	800fab2 <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800faa0:	2180      	movs	r1, #128	@ 0x80
 800faa2:	f7f1 fe8d 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800faa6:	2100      	movs	r1, #0
 800faa8:	4620      	mov	r0, r4
 800faaa:	f7f1 fe89 	bl	80017c0 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800faae:	2000      	movs	r0, #0
}
 800fab0:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800fab2:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800fab6:	3b01      	subs	r3, #1
 800fab8:	2b02      	cmp	r3, #2
 800faba:	d811      	bhi.n	800fae0 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fabc:	792b      	ldrb	r3, [r5, #4]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d80e      	bhi.n	800fae0 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fac2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800fac6:	4629      	mov	r1, r5
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	4620      	mov	r0, r4
 800facc:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800face:	88ea      	ldrh	r2, [r5, #6]
 800fad0:	2a00      	cmp	r2, #0
 800fad2:	d1ed      	bne.n	800fab0 <USBD_StdItfReq+0x24>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d1eb      	bne.n	800fab0 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800fad8:	4620      	mov	r0, r4
 800fada:	f000 f911 	bl	800fd00 <USBD_CtlSendStatus>
 800fade:	e7e6      	b.n	800faae <USBD_StdItfReq+0x22>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fae0:	2180      	movs	r1, #128	@ 0x80
 800fae2:	4620      	mov	r0, r4
 800fae4:	f7f1 fe6c 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fae8:	2100      	movs	r1, #0
 800faea:	4620      	mov	r0, r4
 800faec:	f7f1 fe68 	bl	80017c0 <USBD_LL_StallEP>
}
 800faf0:	e7dd      	b.n	800faae <USBD_StdItfReq+0x22>
 800faf2:	bf00      	nop

0800faf4 <USBD_StdEPReq>:
{
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 800faf8:	888a      	ldrh	r2, [r1, #4]
 800fafa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fafe:	2b20      	cmp	r3, #32
{
 800fb00:	460c      	mov	r4, r1
 800fb02:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb04:	d01b      	beq.n	800fb3e <USBD_StdEPReq+0x4a>
 800fb06:	2b40      	cmp	r3, #64	@ 0x40
 800fb08:	d019      	beq.n	800fb3e <USBD_StdEPReq+0x4a>
 800fb0a:	b303      	cbz	r3, 800fb4e <USBD_StdEPReq+0x5a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb0c:	2180      	movs	r1, #128	@ 0x80
 800fb0e:	4628      	mov	r0, r5
 800fb10:	f7f1 fe56 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb14:	2100      	movs	r1, #0
 800fb16:	4628      	mov	r0, r5
 800fb18:	f7f1 fe52 	bl	80017c0 <USBD_LL_StallEP>
}
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800fb20:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	d053      	beq.n	800fbd2 <USBD_StdEPReq+0xde>
 800fb2a:	2a03      	cmp	r2, #3
 800fb2c:	d1ee      	bne.n	800fb0c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fb2e:	8863      	ldrh	r3, [r4, #2]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1f3      	bne.n	800fb1c <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 800fb34:	064e      	lsls	r6, r1, #25
 800fb36:	d171      	bne.n	800fc1c <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800fb38:	4628      	mov	r0, r5
 800fb3a:	f000 f8e1 	bl	800fd00 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb3e:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
 800fb42:	4621      	mov	r1, r4
 800fb44:	4628      	mov	r0, r5
 800fb46:	689b      	ldr	r3, [r3, #8]
}
 800fb48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb4c:	4718      	bx	r3
      switch (req->bRequest)
 800fb4e:	7863      	ldrb	r3, [r4, #1]
 800fb50:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 800fb52:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800fb54:	d0e4      	beq.n	800fb20 <USBD_StdEPReq+0x2c>
 800fb56:	2b03      	cmp	r3, #3
 800fb58:	d02a      	beq.n	800fbb0 <USBD_StdEPReq+0xbc>
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1d6      	bne.n	800fb0c <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 800fb5e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	b2d8      	uxtb	r0, r3
 800fb66:	d03d      	beq.n	800fbe4 <USBD_StdEPReq+0xf0>
 800fb68:	2803      	cmp	r0, #3
 800fb6a:	d1cf      	bne.n	800fb0c <USBD_StdEPReq+0x18>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fb6c:	f001 030f 	and.w	r3, r1, #15
 800fb70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800fb74:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fb76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800fb7a:	d442      	bmi.n	800fc02 <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fb7c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d0c3      	beq.n	800fb0c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb84:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800fb88:	2414      	movs	r4, #20
 800fb8a:	fb04 5403 	mla	r4, r4, r3, r5
 800fb8e:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d040      	beq.n	800fc18 <USBD_StdEPReq+0x124>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fb96:	4628      	mov	r0, r5
 800fb98:	f7f1 fe2a 	bl	80017f0 <USBD_LL_IsStallEP>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d03b      	beq.n	800fc18 <USBD_StdEPReq+0x124>
 800fba0:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 800fba2:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fba4:	2202      	movs	r2, #2
 800fba6:	4621      	mov	r1, r4
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f000 f87d 	bl	800fca8 <USBD_CtlSendData>
              break;
 800fbae:	e7b5      	b.n	800fb1c <USBD_StdEPReq+0x28>
          switch (pdev->dev_state)
 800fbb0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fbb4:	2b02      	cmp	r3, #2
 800fbb6:	b2da      	uxtb	r2, r3
 800fbb8:	d00b      	beq.n	800fbd2 <USBD_StdEPReq+0xde>
 800fbba:	2a03      	cmp	r2, #3
 800fbbc:	d1a6      	bne.n	800fb0c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fbbe:	8863      	ldrh	r3, [r4, #2]
 800fbc0:	b91b      	cbnz	r3, 800fbca <USBD_StdEPReq+0xd6>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fbc2:	064a      	lsls	r2, r1, #25
 800fbc4:	d001      	beq.n	800fbca <USBD_StdEPReq+0xd6>
 800fbc6:	88e3      	ldrh	r3, [r4, #6]
 800fbc8:	b35b      	cbz	r3, 800fc22 <USBD_StdEPReq+0x12e>
              (void)USBD_CtlSendStatus(pdev);
 800fbca:	4628      	mov	r0, r5
 800fbcc:	f000 f898 	bl	800fd00 <USBD_CtlSendStatus>
              break;
 800fbd0:	e7a4      	b.n	800fb1c <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbd2:	064b      	lsls	r3, r1, #25
 800fbd4:	d09a      	beq.n	800fb0c <USBD_StdEPReq+0x18>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fbd6:	f7f1 fdf3 	bl	80017c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbda:	2180      	movs	r1, #128	@ 0x80
 800fbdc:	4628      	mov	r0, r5
 800fbde:	f7f1 fdef 	bl	80017c0 <USBD_LL_StallEP>
 800fbe2:	e79b      	b.n	800fb1c <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbe4:	0648      	lsls	r0, r1, #25
 800fbe6:	d191      	bne.n	800fb0c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbe8:	0611      	lsls	r1, r2, #24
 800fbea:	bf4c      	ite	mi
 800fbec:	f105 0114 	addmi.w	r1, r5, #20
 800fbf0:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fbf8:	2202      	movs	r2, #2
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f000 f854 	bl	800fca8 <USBD_CtlSendData>
              break;
 800fc00:	e78c      	b.n	800fb1c <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fc02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d081      	beq.n	800fb0c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc08:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800fc0c:	1c5c      	adds	r4, r3, #1
 800fc0e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800fc12:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800fc16:	e7bc      	b.n	800fb92 <USBD_StdEPReq+0x9e>
{
 800fc18:	2300      	movs	r3, #0
 800fc1a:	e7c2      	b.n	800fba2 <USBD_StdEPReq+0xae>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fc1c:	f7f1 fddc 	bl	80017d8 <USBD_LL_ClearStallEP>
 800fc20:	e78a      	b.n	800fb38 <USBD_StdEPReq+0x44>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc22:	f7f1 fdcd 	bl	80017c0 <USBD_LL_StallEP>
 800fc26:	e7d0      	b.n	800fbca <USBD_StdEPReq+0xd6>

0800fc28 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800fc28:	780b      	ldrb	r3, [r1, #0]
 800fc2a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800fc2c:	784b      	ldrb	r3, [r1, #1]
 800fc2e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 800fc30:	884b      	ldrh	r3, [r1, #2]
 800fc32:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 800fc34:	888b      	ldrh	r3, [r1, #4]
 800fc36:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 800fc38:	88cb      	ldrh	r3, [r1, #6]
 800fc3a:	80c3      	strh	r3, [r0, #6]
}
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop

0800fc40 <USBD_CtlError>:
{
 800fc40:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc42:	2180      	movs	r1, #128	@ 0x80
{
 800fc44:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc46:	f7f1 fdbb 	bl	80017c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	2100      	movs	r1, #0
}
 800fc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc52:	f7f1 bdb5 	b.w	80017c0 <USBD_LL_StallEP>
 800fc56:	bf00      	nop

0800fc58 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800fc58:	b308      	cbz	r0, 800fc9e <USBD_GetString+0x46>
{
 800fc5a:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800fc5c:	7803      	ldrb	r3, [r0, #0]
 800fc5e:	460e      	mov	r6, r1
 800fc60:	4614      	mov	r4, r2
 800fc62:	4605      	mov	r5, r0
 800fc64:	b1e3      	cbz	r3, 800fca0 <USBD_GetString+0x48>
 800fc66:	3001      	adds	r0, #1
 800fc68:	f7f0 fb1a 	bl	80002a0 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc6c:	1c43      	adds	r3, r0, #1
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	3301      	adds	r3, #1
 800fc72:	005b      	lsls	r3, r3, #1
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc78:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800fc7a:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc7c:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 800fc7e:	782c      	ldrb	r4, [r5, #0]
 800fc80:	b164      	cbz	r4, 800fc9c <USBD_GetString+0x44>
 800fc82:	4628      	mov	r0, r5
  idx++;
 800fc84:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800fc86:	2100      	movs	r1, #0
    idx++;
 800fc88:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800fc8a:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 800fc8c:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 800fc8e:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 800fc90:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 800fc94:	3302      	adds	r3, #2
 800fc96:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800fc98:	2c00      	cmp	r4, #0
 800fc9a:	d1f5      	bne.n	800fc88 <USBD_GetString+0x30>
}
 800fc9c:	bd70      	pop	{r4, r5, r6, pc}
 800fc9e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800fca0:	2202      	movs	r2, #2
 800fca2:	4613      	mov	r3, r2
 800fca4:	e7e7      	b.n	800fc76 <USBD_GetString+0x1e>
 800fca6:	bf00      	nop

0800fca8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fca8:	b508      	push	{r3, lr}
 800fcaa:	4613      	mov	r3, r2
 800fcac:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fcae:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 800fcb0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fcb4:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcb8:	2100      	movs	r1, #0
 800fcba:	f7f1 fdb9 	bl	8001830 <USBD_LL_Transmit>

  return USBD_OK;
}
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	bd08      	pop	{r3, pc}
 800fcc2:	bf00      	nop

0800fcc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fcc4:	b508      	push	{r3, lr}
 800fcc6:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcc8:	460a      	mov	r2, r1
 800fcca:	2100      	movs	r1, #0
 800fccc:	f7f1 fdb0 	bl	8001830 <USBD_LL_Transmit>

  return USBD_OK;
}
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	bd08      	pop	{r3, pc}

0800fcd4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fcd4:	b508      	push	{r3, lr}
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fcda:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 800fcdc:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fce0:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fce4:	2100      	movs	r1, #0
 800fce6:	f7f1 fdaf 	bl	8001848 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fcea:	2000      	movs	r0, #0
 800fcec:	bd08      	pop	{r3, pc}
 800fcee:	bf00      	nop

0800fcf0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fcf0:	b508      	push	{r3, lr}
 800fcf2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fcf4:	460a      	mov	r2, r1
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	f7f1 fda6 	bl	8001848 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	bd08      	pop	{r3, pc}

0800fd00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd00:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd02:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd04:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd06:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	f7f1 fd8f 	bl	8001830 <USBD_LL_Transmit>

  return USBD_OK;
}
 800fd12:	2000      	movs	r0, #0
 800fd14:	bd08      	pop	{r3, pc}
 800fd16:	bf00      	nop

0800fd18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd18:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd1a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd1c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd1e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd22:	461a      	mov	r2, r3
 800fd24:	4619      	mov	r1, r3
 800fd26:	f7f1 fd8f 	bl	8001848 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	bd08      	pop	{r3, pc}
 800fd2e:	bf00      	nop

0800fd30 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fd30:	4b03      	ldr	r3, [pc, #12]	@ (800fd40 <disk_status+0x10>)
 800fd32:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800fd36:	4403      	add	r3, r0
 800fd38:	6852      	ldr	r2, [r2, #4]
 800fd3a:	7a18      	ldrb	r0, [r3, #8]
 800fd3c:	6853      	ldr	r3, [r2, #4]
 800fd3e:	4718      	bx	r3
 800fd40:	20002f40 	.word	0x20002f40

0800fd44 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800fd44:	4b06      	ldr	r3, [pc, #24]	@ (800fd60 <disk_initialize+0x1c>)
 800fd46:	5c1a      	ldrb	r2, [r3, r0]
 800fd48:	b942      	cbnz	r2, 800fd5c <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fd4a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 800fd4e:	2101      	movs	r1, #1
 800fd50:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fd52:	6852      	ldr	r2, [r2, #4]
 800fd54:	4403      	add	r3, r0
 800fd56:	6812      	ldr	r2, [r2, #0]
 800fd58:	7a18      	ldrb	r0, [r3, #8]
 800fd5a:	4710      	bx	r2
  }
  return stat;
}
 800fd5c:	2000      	movs	r0, #0
 800fd5e:	4770      	bx	lr
 800fd60:	20002f40 	.word	0x20002f40

0800fd64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fd64:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fd66:	4c05      	ldr	r4, [pc, #20]	@ (800fd7c <disk_read+0x18>)
 800fd68:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800fd6c:	4404      	add	r4, r0
 800fd6e:	686d      	ldr	r5, [r5, #4]
 800fd70:	7a20      	ldrb	r0, [r4, #8]
 800fd72:	68ac      	ldr	r4, [r5, #8]
 800fd74:	46a4      	mov	ip, r4
  return res;
}
 800fd76:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fd78:	4760      	bx	ip
 800fd7a:	bf00      	nop
 800fd7c:	20002f40 	.word	0x20002f40

0800fd80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fd80:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fd82:	4c05      	ldr	r4, [pc, #20]	@ (800fd98 <disk_write+0x18>)
 800fd84:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800fd88:	4404      	add	r4, r0
 800fd8a:	686d      	ldr	r5, [r5, #4]
 800fd8c:	7a20      	ldrb	r0, [r4, #8]
 800fd8e:	68ec      	ldr	r4, [r5, #12]
 800fd90:	46a4      	mov	ip, r4
  return res;
}
 800fd92:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fd94:	4760      	bx	ip
 800fd96:	bf00      	nop
 800fd98:	20002f40 	.word	0x20002f40

0800fd9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fd9c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fd9e:	f04f 36ff 	mov.w	r6, #4294967295
 800fda2:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fda4:	42b1      	cmp	r1, r6
{
 800fda6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fda8:	70c3      	strb	r3, [r0, #3]
 800fdaa:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fdac:	d122      	bne.n	800fdf4 <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fdae:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800fdb2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d11a      	bne.n	800fdf0 <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fdba:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800fdbe:	2be9      	cmp	r3, #233	@ 0xe9
 800fdc0:	d007      	beq.n	800fdd2 <check_fs+0x36>
 800fdc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fdc4:	4a13      	ldr	r2, [pc, #76]	@ (800fe14 <check_fs+0x78>)
 800fdc6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d001      	beq.n	800fdd2 <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fdce:	2002      	movs	r0, #2
}
 800fdd0:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800fdd2:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fdd6:	4a10      	ldr	r2, [pc, #64]	@ (800fe18 <check_fs+0x7c>)
 800fdd8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d017      	beq.n	800fe10 <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800fde0:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fde4:	4b0d      	ldr	r3, [pc, #52]	@ (800fe1c <check_fs+0x80>)
 800fde6:	1ac0      	subs	r0, r0, r3
 800fde8:	bf18      	it	ne
 800fdea:	2001      	movne	r0, #1
 800fdec:	0040      	lsls	r0, r0, #1
}
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fdf0:	2003      	movs	r0, #3
}
 800fdf2:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fdf4:	460d      	mov	r5, r1
 800fdf6:	460a      	mov	r2, r1
 800fdf8:	7840      	ldrb	r0, [r0, #1]
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fe00:	f7ff ffb0 	bl	800fd64 <disk_read>
 800fe04:	b110      	cbz	r0, 800fe0c <check_fs+0x70>
			fs->winsect = sector;
 800fe06:	62e6      	str	r6, [r4, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fe08:	2004      	movs	r0, #4
}
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800fe0c:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 800fe0e:	e7ce      	b.n	800fdae <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fe10:	2000      	movs	r0, #0
}
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	009000eb 	.word	0x009000eb
 800fe18:	00544146 	.word	0x00544146
 800fe1c:	33544146 	.word	0x33544146

0800fe20 <move_window>:
{
 800fe20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe24:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800fe26:	428e      	cmp	r6, r1
 800fe28:	d102      	bne.n	800fe30 <move_window+0x10>
	FRESULT res = FR_OK;
 800fe2a:	2000      	movs	r0, #0
}
 800fe2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe30:	4604      	mov	r4, r0
 800fe32:	460d      	mov	r5, r1
 800fe34:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fe36:	7840      	ldrb	r0, [r0, #1]
 800fe38:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe3c:	b963      	cbnz	r3, 800fe58 <move_window+0x38>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fe3e:	462a      	mov	r2, r5
 800fe40:	2301      	movs	r3, #1
 800fe42:	4639      	mov	r1, r7
 800fe44:	f7ff ff8e 	bl	800fd64 <disk_read>
				res = FR_DISK_ERR;
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	bf1c      	itt	ne
 800fe4c:	f04f 35ff 	movne.w	r5, #4294967295
 800fe50:	2001      	movne	r0, #1
			fs->winsect = sector;
 800fe52:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 800fe54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fe58:	2301      	movs	r3, #1
 800fe5a:	4632      	mov	r2, r6
 800fe5c:	4639      	mov	r1, r7
 800fe5e:	f7ff ff8f 	bl	800fd80 <disk_write>
 800fe62:	b9d0      	cbnz	r0, 800fe9a <move_window+0x7a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fe64:	6a22      	ldr	r2, [r4, #32]
 800fe66:	69a3      	ldr	r3, [r4, #24]
			fs->wflag = 0;
 800fe68:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fe6a:	1ab2      	subs	r2, r6, r2
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d212      	bcs.n	800fe96 <move_window+0x76>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe70:	f894 8002 	ldrb.w	r8, [r4, #2]
 800fe74:	f1b8 0f01 	cmp.w	r8, #1
 800fe78:	d801      	bhi.n	800fe7e <move_window+0x5e>
 800fe7a:	e00c      	b.n	800fe96 <move_window+0x76>
					wsect += fs->fsize;
 800fe7c:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fe7e:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800fe80:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800fe82:	4632      	mov	r2, r6
 800fe84:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe86:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800fe8a:	4639      	mov	r1, r7
 800fe8c:	f7ff ff78 	bl	800fd80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe90:	f1b8 0f01 	cmp.w	r8, #1
 800fe94:	d1f2      	bne.n	800fe7c <move_window+0x5c>
 800fe96:	7860      	ldrb	r0, [r4, #1]
 800fe98:	e7d1      	b.n	800fe3e <move_window+0x1e>
			res = FR_DISK_ERR;
 800fe9a:	2001      	movs	r0, #1
 800fe9c:	e7c6      	b.n	800fe2c <move_window+0xc>
 800fe9e:	bf00      	nop

0800fea0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path) {	/* If the pointer is not a null */
 800fea4:	6804      	ldr	r4, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800feaa:	b184      	cbz	r4, 800fece <find_volume+0x2e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800feac:	7825      	ldrb	r5, [r4, #0]
 800feae:	2d20      	cmp	r5, #32
 800feb0:	d913      	bls.n	800feda <find_volume+0x3a>
 800feb2:	462b      	mov	r3, r5
 800feb4:	46a4      	mov	ip, r4
 800feb6:	e003      	b.n	800fec0 <find_volume+0x20>
 800feb8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800febc:	2b20      	cmp	r3, #32
 800febe:	d90c      	bls.n	800feda <find_volume+0x3a>
 800fec0:	2b3a      	cmp	r3, #58	@ 0x3a
 800fec2:	d1f9      	bne.n	800feb8 <find_volume+0x18>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fec4:	2d30      	cmp	r5, #48	@ 0x30
 800fec6:	d102      	bne.n	800fece <find_volume+0x2e>
			i = *tp++ - '0';
 800fec8:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800feca:	45a4      	cmp	ip, r4
 800fecc:	d002      	beq.n	800fed4 <find_volume+0x34>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800fece:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800fed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					*path = ++tt;
 800fed4:	f10c 0301 	add.w	r3, ip, #1
 800fed8:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800feda:	4ea2      	ldr	r6, [pc, #648]	@ (8010164 <find_volume+0x2c4>)
 800fedc:	6a34      	ldr	r4, [r6, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fede:	2c00      	cmp	r4, #0
 800fee0:	f000 80cc 	beq.w	801007c <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800fee4:	600c      	str	r4, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fee6:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fee8:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800feec:	b153      	cbz	r3, 800ff04 <find_volume+0x64>
		stat = disk_status(fs->drv);
 800feee:	7860      	ldrb	r0, [r4, #1]
 800fef0:	f7ff ff1e 	bl	800fd30 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fef4:	07c7      	lsls	r7, r0, #31
 800fef6:	d405      	bmi.n	800ff04 <find_volume+0x64>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fef8:	b115      	cbz	r5, 800ff00 <find_volume+0x60>
 800fefa:	0741      	lsls	r1, r0, #29
 800fefc:	f100 80bb 	bmi.w	8010076 <find_volume+0x1d6>
			return FR_OK;				/* The file system object is valid */
 800ff00:	2000      	movs	r0, #0
 800ff02:	e091      	b.n	8010028 <find_volume+0x188>
	fs->fs_type = 0;					/* Clear the file system object */
 800ff04:	2000      	movs	r0, #0
 800ff06:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ff08:	f7ff ff1c 	bl	800fd44 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ff0c:	07c2      	lsls	r2, r0, #31
 800ff0e:	f100 808d 	bmi.w	801002c <find_volume+0x18c>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ff12:	b115      	cbz	r5, 800ff1a <find_volume+0x7a>
 800ff14:	0743      	lsls	r3, r0, #29
 800ff16:	f100 80ae 	bmi.w	8010076 <find_volume+0x1d6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f7ff ff3d 	bl	800fd9c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ff22:	2802      	cmp	r0, #2
 800ff24:	f000 8085 	beq.w	8010032 <find_volume+0x192>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ff28:	2804      	cmp	r0, #4
 800ff2a:	f000 80b2 	beq.w	8010092 <find_volume+0x1f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ff2e:	2801      	cmp	r0, #1
 800ff30:	bf98      	it	ls
 800ff32:	2500      	movls	r5, #0
 800ff34:	d877      	bhi.n	8010026 <find_volume+0x186>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ff36:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800ff3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff3e:	d172      	bne.n	8010026 <find_volume+0x186>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ff40:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ff44:	b902      	cbnz	r2, 800ff48 <find_volume+0xa8>
	rv = rv << 8 | ptr[0];
 800ff46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ff48:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 800ff4c:	61a2      	str	r2, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ff4e:	1e59      	subs	r1, r3, #1
 800ff50:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ff52:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ff54:	d867      	bhi.n	8010026 <find_volume+0x186>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff56:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 800ff5a:	8161      	strh	r1, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff5c:	2900      	cmp	r1, #0
 800ff5e:	d062      	beq.n	8010026 <find_volume+0x186>
 800ff60:	1e48      	subs	r0, r1, #1
 800ff62:	4208      	tst	r0, r1
 800ff64:	d15f      	bne.n	8010026 <find_volume+0x186>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff66:	f8b4 c041 	ldrh.w	ip, [r4, #65]	@ 0x41
 800ff6a:	f8a4 c008 	strh.w	ip, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff6e:	f01c 0f0f 	tst.w	ip, #15
 800ff72:	d158      	bne.n	8010026 <find_volume+0x186>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ff74:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ff78:	b900      	cbnz	r0, 800ff7c <find_volume+0xdc>
	rv = rv << 8 | ptr[0];
 800ff7a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ff7c:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ff80:	f1be 0f00 	cmp.w	lr, #0
 800ff84:	d04f      	beq.n	8010026 <find_volume+0x186>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff86:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ff8a:	eb0e 171c 	add.w	r7, lr, ip, lsr #4
 800ff8e:	441f      	add	r7, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ff90:	42b8      	cmp	r0, r7
 800ff92:	d348      	bcc.n	8010026 <find_volume+0x186>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ff94:	1bc0      	subs	r0, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff96:	4288      	cmp	r0, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ff98:	fbb0 f8f1 	udiv	r8, r0, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff9c:	d343      	bcc.n	8010026 <find_volume+0x186>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ff9e:	eb0e 0105 	add.w	r1, lr, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ffa2:	f64f 7ef5 	movw	lr, #65525	@ 0xfff5
 800ffa6:	45f0      	cmp	r8, lr
		fs->database = bsect + sysect;					/* Data start sector */
 800ffa8:	442f      	add	r7, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ffaa:	f108 0002 	add.w	r0, r8, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ffae:	f240 8090 	bls.w	80100d2 <find_volume+0x232>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ffb2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ffb6:	6221      	str	r1, [r4, #32]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ffb8:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->database = bsect + sysect;					/* Data start sector */
 800ffbc:	62a7      	str	r7, [r4, #40]	@ 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ffbe:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ffc0:	61e5      	str	r5, [r4, #28]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ffc2:	d130      	bne.n	8010026 <find_volume+0x186>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ffc4:	0083      	lsls	r3, r0, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ffc6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
	rv = rv << 8 | ptr[0];
 800ffca:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ffcc:	6261      	str	r1, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ffce:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800ffd2:	d328      	bcc.n	8010026 <find_volume+0x186>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ffd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffd8:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ffdc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
		fs->fsi_flag = 0x80;
 800ffe0:	2280      	movs	r2, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ffe2:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 800ffe4:	7122      	strb	r2, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ffe6:	f000 809b 	beq.w	8010120 <find_volume+0x280>
		fmt = FS_FAT32;
 800ffea:	2103      	movs	r1, #3
	fs->fs_type = fmt;		/* FAT sub-type */
 800ffec:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ffee:	8cb3      	ldrh	r3, [r6, #36]	@ 0x24
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fff0:	6832      	ldr	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fff2:	3301      	adds	r3, #1
 800fff4:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fff6:	42a2      	cmp	r2, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800fff8:	84b3      	strh	r3, [r6, #36]	@ 0x24
 800fffa:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fffc:	bf04      	itt	eq
 800fffe:	2300      	moveq	r3, #0
 8010000:	6033      	streq	r3, [r6, #0]
 8010002:	6933      	ldr	r3, [r6, #16]
 8010004:	429c      	cmp	r4, r3
 8010006:	f47f af7b 	bne.w	800ff00 <find_volume+0x60>
 801000a:	2300      	movs	r3, #0
 801000c:	6133      	str	r3, [r6, #16]
 801000e:	e777      	b.n	800ff00 <find_volume+0x60>
	rv = rv << 8 | ptr[0];
 8010010:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010014:	2f00      	cmp	r7, #0
 8010016:	d14b      	bne.n	80100b0 <find_volume+0x210>
 8010018:	f1b8 0f00 	cmp.w	r8, #0
 801001c:	d151      	bne.n	80100c2 <find_volume+0x222>
 801001e:	f1b9 0f00 	cmp.w	r9, #0
 8010022:	d13c      	bne.n	801009e <find_volume+0x1fe>
 8010024:	bb65      	cbnz	r5, 8010080 <find_volume+0x1e0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010026:	200d      	movs	r0, #13
}
 8010028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801002c:	2003      	movs	r0, #3
}
 801002e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010032:	f894 71f2 	ldrb.w	r7, [r4, #498]	@ 0x1f2
 8010036:	b10f      	cbz	r7, 801003c <find_volume+0x19c>
	rv = rv << 8 | ptr[0];
 8010038:	f8d4 71f6 	ldr.w	r7, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801003c:	f894 3202 	ldrb.w	r3, [r4, #514]	@ 0x202
 8010040:	b35b      	cbz	r3, 801009a <find_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 8010042:	f8d4 8206 	ldr.w	r8, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010046:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 801004a:	b323      	cbz	r3, 8010096 <find_volume+0x1f6>
	rv = rv << 8 | ptr[0];
 801004c:	f8d4 9216 	ldr.w	r9, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010050:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 8010054:	2d00      	cmp	r5, #0
 8010056:	d1db      	bne.n	8010010 <find_volume+0x170>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010058:	bb57      	cbnz	r7, 80100b0 <find_volume+0x210>
 801005a:	f1b8 0f00 	cmp.w	r8, #0
 801005e:	d12f      	bne.n	80100c0 <find_volume+0x220>
 8010060:	f1b9 0f00 	cmp.w	r9, #0
 8010064:	d0df      	beq.n	8010026 <find_volume+0x186>
 8010066:	4649      	mov	r1, r9
 8010068:	4620      	mov	r0, r4
 801006a:	f7ff fe97 	bl	800fd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801006e:	2801      	cmp	r0, #1
 8010070:	d8d9      	bhi.n	8010026 <find_volume+0x186>
			bsect = br[i];
 8010072:	464d      	mov	r5, r9
 8010074:	e75f      	b.n	800ff36 <find_volume+0x96>
				return FR_WRITE_PROTECTED;
 8010076:	200a      	movs	r0, #10
}
 8010078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801007c:	200c      	movs	r0, #12
 801007e:	e7d3      	b.n	8010028 <find_volume+0x188>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010080:	4629      	mov	r1, r5
 8010082:	4620      	mov	r0, r4
 8010084:	f7ff fe8a 	bl	800fd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010088:	2801      	cmp	r0, #1
 801008a:	f67f af54 	bls.w	800ff36 <find_volume+0x96>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801008e:	2804      	cmp	r0, #4
 8010090:	d1c9      	bne.n	8010026 <find_volume+0x186>
 8010092:	2001      	movs	r0, #1
 8010094:	e7c8      	b.n	8010028 <find_volume+0x188>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010096:	4699      	mov	r9, r3
 8010098:	e7da      	b.n	8010050 <find_volume+0x1b0>
 801009a:	4698      	mov	r8, r3
 801009c:	e7d3      	b.n	8010046 <find_volume+0x1a6>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801009e:	4649      	mov	r1, r9
 80100a0:	4620      	mov	r0, r4
 80100a2:	f7ff fe7b 	bl	800fd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80100a6:	2801      	cmp	r0, #1
 80100a8:	d9e3      	bls.n	8010072 <find_volume+0x1d2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80100aa:	2d00      	cmp	r5, #0
 80100ac:	d0bb      	beq.n	8010026 <find_volume+0x186>
 80100ae:	e7e7      	b.n	8010080 <find_volume+0x1e0>
 80100b0:	4639      	mov	r1, r7
 80100b2:	4620      	mov	r0, r4
 80100b4:	f7ff fe72 	bl	800fd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80100b8:	2801      	cmp	r0, #1
 80100ba:	d8ad      	bhi.n	8010018 <find_volume+0x178>
			bsect = br[i];
 80100bc:	463d      	mov	r5, r7
 80100be:	e73a      	b.n	800ff36 <find_volume+0x96>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80100c0:	463d      	mov	r5, r7
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80100c2:	4641      	mov	r1, r8
 80100c4:	4620      	mov	r0, r4
 80100c6:	f7ff fe69 	bl	800fd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80100ca:	2801      	cmp	r0, #1
 80100cc:	d8a7      	bhi.n	801001e <find_volume+0x17e>
			bsect = br[i];
 80100ce:	4645      	mov	r5, r8
 80100d0:	e731      	b.n	800ff36 <find_volume+0x96>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80100d2:	f640 7ef5 	movw	lr, #4085	@ 0xff5
 80100d6:	45f0      	cmp	r8, lr
		fs->volbase = bsect;							/* Volume start sector */
 80100d8:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 80100da:	62a7      	str	r7, [r4, #40]	@ 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80100dc:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80100de:	6221      	str	r1, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80100e0:	d817      	bhi.n	8010112 <find_volume+0x272>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80100e2:	f1bc 0f00 	cmp.w	ip, #0
 80100e6:	d09e      	beq.n	8010026 <find_volume+0x186>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80100e8:	440b      	add	r3, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80100ea:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80100ee:	f000 0001 	and.w	r0, r0, #1
 80100f2:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 80100f6:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80100f8:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
 80100fc:	ebb2 2f50 	cmp.w	r2, r0, lsr #9
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010100:	6263      	str	r3, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010102:	d390      	bcc.n	8010026 <find_volume+0x186>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010104:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8010108:	2280      	movs	r2, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801010a:	e9c4 3303 	strd	r3, r3, [r4, #12]
		fs->fsi_flag = 0x80;
 801010e:	7122      	strb	r2, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010110:	e76c      	b.n	800ffec <find_volume+0x14c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010112:	f1bc 0f00 	cmp.w	ip, #0
 8010116:	d086      	beq.n	8010026 <find_volume+0x186>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010118:	440b      	add	r3, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801011a:	0040      	lsls	r0, r0, #1
 801011c:	2102      	movs	r1, #2
 801011e:	e7eb      	b.n	80100f8 <find_volume+0x258>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010120:	1c69      	adds	r1, r5, #1
 8010122:	4620      	mov	r0, r4
 8010124:	f7ff fe7c 	bl	800fe20 <move_window>
 8010128:	2800      	cmp	r0, #0
 801012a:	f47f af5e 	bne.w	800ffea <find_volume+0x14a>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801012e:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 8010132:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010134:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8010138:	4291      	cmp	r1, r2
 801013a:	f47f af56 	bne.w	800ffea <find_volume+0x14a>
	rv = rv << 8 | ptr[0];
 801013e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010140:	4b09      	ldr	r3, [pc, #36]	@ (8010168 <find_volume+0x2c8>)
 8010142:	429a      	cmp	r2, r3
 8010144:	f47f af51 	bne.w	800ffea <find_volume+0x14a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010148:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 801014c:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010150:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010154:	3320      	adds	r3, #32
 8010156:	429a      	cmp	r2, r3
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010158:	bf04      	itt	eq
 801015a:	e9d4 3286 	ldrdeq	r3, r2, [r4, #536]	@ 0x218
 801015e:	e9c4 2303 	strdeq	r2, r3, [r4, #12]
 8010162:	e742      	b.n	800ffea <find_volume+0x14a>
 8010164:	20002f18 	.word	0x20002f18
 8010168:	41615252 	.word	0x41615252

0801016c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801016c:	b500      	push	{lr}
 801016e:	b083      	sub	sp, #12
 8010170:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8010174:	b199      	cbz	r1, 801019e <f_mount+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010176:	f891 c000 	ldrb.w	ip, [r1]
 801017a:	f1bc 0f20 	cmp.w	ip, #32
 801017e:	d912      	bls.n	80101a6 <f_mount+0x3a>
 8010180:	4663      	mov	r3, ip
 8010182:	4608      	mov	r0, r1
 8010184:	e003      	b.n	801018e <f_mount+0x22>
 8010186:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801018a:	2b20      	cmp	r3, #32
 801018c:	d90b      	bls.n	80101a6 <f_mount+0x3a>
 801018e:	2b3a      	cmp	r3, #58	@ 0x3a
 8010190:	d1f9      	bne.n	8010186 <f_mount+0x1a>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010192:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010196:	d102      	bne.n	801019e <f_mount+0x32>
			i = *tp++ - '0';
 8010198:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801019a:	4288      	cmp	r0, r1
 801019c:	d003      	beq.n	80101a6 <f_mount+0x3a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 801019e:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80101a0:	b003      	add	sp, #12
 80101a2:	f85d fb04 	ldr.w	pc, [sp], #4
	cfs = FatFs[vol];					/* Pointer to fs object */
 80101a6:	4b12      	ldr	r3, [pc, #72]	@ (80101f0 <f_mount+0x84>)
 80101a8:	6a19      	ldr	r1, [r3, #32]
	if (cfs) {
 80101aa:	b159      	cbz	r1, 80101c4 <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80101ac:	6818      	ldr	r0, [r3, #0]
 80101ae:	4281      	cmp	r1, r0
 80101b0:	bf04      	itt	eq
 80101b2:	2000      	moveq	r0, #0
 80101b4:	6018      	streq	r0, [r3, #0]
 80101b6:	6918      	ldr	r0, [r3, #16]
 80101b8:	4288      	cmp	r0, r1
 80101ba:	bf04      	itt	eq
 80101bc:	2000      	moveq	r0, #0
 80101be:	6118      	streq	r0, [r3, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 80101c0:	2000      	movs	r0, #0
 80101c2:	7008      	strb	r0, [r1, #0]
	if (fs) {
 80101c4:	9901      	ldr	r1, [sp, #4]
 80101c6:	b181      	cbz	r1, 80101ea <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80101c8:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80101ca:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 80101cc:	7008      	strb	r0, [r1, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 80101ce:	6219      	str	r1, [r3, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80101d0:	d003      	beq.n	80101da <f_mount+0x6e>
 80101d2:	2000      	movs	r0, #0
}
 80101d4:	b003      	add	sp, #12
 80101d6:	f85d fb04 	ldr.w	pc, [sp], #4
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80101da:	4602      	mov	r2, r0
 80101dc:	a901      	add	r1, sp, #4
 80101de:	4668      	mov	r0, sp
 80101e0:	f7ff fe5e 	bl	800fea0 <find_volume>
}
 80101e4:	b003      	add	sp, #12
 80101e6:	f85d fb04 	ldr.w	pc, [sp], #4
	FatFs[vol] = fs;					/* Register new fs object */
 80101ea:	6219      	str	r1, [r3, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80101ec:	e7f1      	b.n	80101d2 <f_mount+0x66>
 80101ee:	bf00      	nop
 80101f0:	20002f18 	.word	0x20002f18

080101f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80101f4:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 80101f6:	4b10      	ldr	r3, [pc, #64]	@ (8010238 <FATFS_LinkDriver+0x44>)
 80101f8:	7a5c      	ldrb	r4, [r3, #9]
 80101fa:	b9cc      	cbnz	r4, 8010230 <FATFS_LinkDriver+0x3c>
 80101fc:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 80101fe:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 8010202:	7a5c      	ldrb	r4, [r3, #9]
 8010204:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8010206:	7a5c      	ldrb	r4, [r3, #9]
 8010208:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801020c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 801020e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8010210:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8010212:	441c      	add	r4, r3
 8010214:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8010216:	1c54      	adds	r4, r2, #1
 8010218:	b2e4      	uxtb	r4, r4
 801021a:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 801021c:	3230      	adds	r2, #48	@ 0x30
    path[1] = ':';
 801021e:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 8010220:	232f      	movs	r3, #47	@ 0x2f
    path[1] = ':';
 8010222:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 8010224:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8010226:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 801022a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 801022c:	70c8      	strb	r0, [r1, #3]
}
 801022e:	4770      	bx	lr
  uint8_t ret = 1;
 8010230:	2001      	movs	r0, #1
}
 8010232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010236:	4770      	bx	lr
 8010238:	20002f40 	.word	0x20002f40

0801023c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801023c:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 801023e:	4c0a      	ldr	r4, [pc, #40]	@ (8010268 <SD_initialize+0x2c>)
 8010240:	2501      	movs	r5, #1
 8010242:	7025      	strb	r5, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010244:	f7f6 ff4a 	bl	80070dc <BSP_SD_Init>
 8010248:	b108      	cbz	r0, 801024e <SD_initialize+0x12>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801024a:	7820      	ldrb	r0, [r4, #0]
}
 801024c:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 801024e:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8010250:	f7f6 ff74 	bl	800713c <BSP_SD_GetCardState>
 8010254:	b918      	cbnz	r0, 801025e <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 8010256:	7823      	ldrb	r3, [r4, #0]
 8010258:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801025c:	7023      	strb	r3, [r4, #0]
  return Stat;
 801025e:	7823      	ldrb	r3, [r4, #0]
 8010260:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8010262:	7023      	strb	r3, [r4, #0]
  return Stat;
 8010264:	7820      	ldrb	r0, [r4, #0]
}
 8010266:	bd38      	pop	{r3, r4, r5, pc}
 8010268:	200002fc 	.word	0x200002fc

0801026c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801026c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801026e:	4c06      	ldr	r4, [pc, #24]	@ (8010288 <SD_status+0x1c>)
 8010270:	2301      	movs	r3, #1
 8010272:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8010274:	f7f6 ff62 	bl	800713c <BSP_SD_GetCardState>
 8010278:	b918      	cbnz	r0, 8010282 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 801027a:	7823      	ldrb	r3, [r4, #0]
 801027c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010280:	7023      	strb	r3, [r4, #0]
  return Stat;
 8010282:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8010284:	bd10      	pop	{r4, pc}
 8010286:	bf00      	nop
 8010288:	200002fc 	.word	0x200002fc

0801028c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801028c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 801028e:	4c16      	ldr	r4, [pc, #88]	@ (80102e8 <SD_read+0x5c>)
{
 8010290:	4608      	mov	r0, r1
  ReadStatus = 0;
 8010292:	2500      	movs	r5, #0
{
 8010294:	4611      	mov	r1, r2
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010296:	461a      	mov	r2, r3
  ReadStatus = 0;
 8010298:	6025      	str	r5, [r4, #0]
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801029a:	f7f6 febf 	bl	800701c <BSP_SD_ReadBlocks_DMA>
 801029e:	b108      	cbz	r0, 80102a4 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 80102a0:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 80102a2:	bd70      	pop	{r4, r5, r6, pc}
    timeout = HAL_GetTick();
 80102a4:	f7f6 ffcc 	bl	8007240 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80102a8:	f247 562f 	movw	r6, #29999	@ 0x752f
    timeout = HAL_GetTick();
 80102ac:	4605      	mov	r5, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80102ae:	e004      	b.n	80102ba <SD_read+0x2e>
 80102b0:	f7f6 ffc6 	bl	8007240 <HAL_GetTick>
 80102b4:	1b40      	subs	r0, r0, r5
 80102b6:	42b0      	cmp	r0, r6
 80102b8:	d802      	bhi.n	80102c0 <SD_read+0x34>
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d0f7      	beq.n	80102b0 <SD_read+0x24>
    if (ReadStatus == 0)
 80102c0:	6823      	ldr	r3, [r4, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d0ec      	beq.n	80102a0 <SD_read+0x14>
      ReadStatus = 0;
 80102c6:	2300      	movs	r3, #0
 80102c8:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 80102ca:	f7f6 ffb9 	bl	8007240 <HAL_GetTick>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102ce:	f247 552f 	movw	r5, #29999	@ 0x752f
      timeout = HAL_GetTick();
 80102d2:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102d4:	f7f6 ffb4 	bl	8007240 <HAL_GetTick>
 80102d8:	1b00      	subs	r0, r0, r4
 80102da:	42a8      	cmp	r0, r5
 80102dc:	d8e0      	bhi.n	80102a0 <SD_read+0x14>
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80102de:	f7f6 ff2d 	bl	800713c <BSP_SD_GetCardState>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d1f6      	bne.n	80102d4 <SD_read+0x48>
}
 80102e6:	bd70      	pop	{r4, r5, r6, pc}
 80102e8:	20002f4c 	.word	0x20002f4c

080102ec <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80102ec:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 80102ee:	4c16      	ldr	r4, [pc, #88]	@ (8010348 <SD_write+0x5c>)
{
 80102f0:	4608      	mov	r0, r1
  WriteStatus = 0;
 80102f2:	2500      	movs	r5, #0
{
 80102f4:	4611      	mov	r1, r2
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80102f6:	461a      	mov	r2, r3
  WriteStatus = 0;
 80102f8:	6065      	str	r5, [r4, #4]
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80102fa:	f7f6 fe9d 	bl	8007038 <BSP_SD_WriteBlocks_DMA>
 80102fe:	b108      	cbz	r0, 8010304 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 8010300:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 8010302:	bd70      	pop	{r4, r5, r6, pc}
    timeout = HAL_GetTick();
 8010304:	f7f6 ff9c 	bl	8007240 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010308:	f247 562f 	movw	r6, #29999	@ 0x752f
    timeout = HAL_GetTick();
 801030c:	4605      	mov	r5, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801030e:	e004      	b.n	801031a <SD_write+0x2e>
 8010310:	f7f6 ff96 	bl	8007240 <HAL_GetTick>
 8010314:	1b40      	subs	r0, r0, r5
 8010316:	42b0      	cmp	r0, r6
 8010318:	d802      	bhi.n	8010320 <SD_write+0x34>
 801031a:	6863      	ldr	r3, [r4, #4]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d0f7      	beq.n	8010310 <SD_write+0x24>
    if (WriteStatus == 0)
 8010320:	6863      	ldr	r3, [r4, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d0ec      	beq.n	8010300 <SD_write+0x14>
      WriteStatus = 0;
 8010326:	2300      	movs	r3, #0
 8010328:	6063      	str	r3, [r4, #4]
      timeout = HAL_GetTick();
 801032a:	f7f6 ff89 	bl	8007240 <HAL_GetTick>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801032e:	f247 552f 	movw	r5, #29999	@ 0x752f
      timeout = HAL_GetTick();
 8010332:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010334:	f7f6 ff84 	bl	8007240 <HAL_GetTick>
 8010338:	1b00      	subs	r0, r0, r4
 801033a:	42a8      	cmp	r0, r5
 801033c:	d8e0      	bhi.n	8010300 <SD_write+0x14>
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801033e:	f7f6 fefd 	bl	800713c <BSP_SD_GetCardState>
 8010342:	2800      	cmp	r0, #0
 8010344:	d1f6      	bne.n	8010334 <SD_write+0x48>
}
 8010346:	bd70      	pop	{r4, r5, r6, pc}
 8010348:	20002f4c 	.word	0x20002f4c

0801034c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801034c:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801034e:	4b16      	ldr	r3, [pc, #88]	@ (80103a8 <SD_ioctl+0x5c>)
 8010350:	7818      	ldrb	r0, [r3, #0]
 8010352:	f010 0401 	ands.w	r4, r0, #1
{
 8010356:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010358:	d106      	bne.n	8010368 <SD_ioctl+0x1c>
 801035a:	4615      	mov	r5, r2

  switch (cmd)
 801035c:	2903      	cmp	r1, #3
 801035e:	d820      	bhi.n	80103a2 <SD_ioctl+0x56>
 8010360:	e8df f001 	tbb	[pc, r1]
 8010364:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010368:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 801036a:	4620      	mov	r0, r4
 801036c:	b00b      	add	sp, #44	@ 0x2c
 801036e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8010370:	a801      	add	r0, sp, #4
 8010372:	f7f6 feed 	bl	8007150 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010376:	9b08      	ldr	r3, [sp, #32]
}
 8010378:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801037a:	0a5b      	lsrs	r3, r3, #9
 801037c:	602b      	str	r3, [r5, #0]
}
 801037e:	b00b      	add	sp, #44	@ 0x2c
 8010380:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8010382:	a801      	add	r0, sp, #4
 8010384:	f7f6 fee4 	bl	8007150 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010388:	9b07      	ldr	r3, [sp, #28]
 801038a:	602b      	str	r3, [r5, #0]
}
 801038c:	4620      	mov	r0, r4
 801038e:	b00b      	add	sp, #44	@ 0x2c
 8010390:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8010392:	a801      	add	r0, sp, #4
 8010394:	f7f6 fedc 	bl	8007150 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010398:	9b08      	ldr	r3, [sp, #32]
 801039a:	802b      	strh	r3, [r5, #0]
}
 801039c:	4620      	mov	r0, r4
 801039e:	b00b      	add	sp, #44	@ 0x2c
 80103a0:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 80103a2:	2404      	movs	r4, #4
 80103a4:	e7e1      	b.n	801036a <SD_ioctl+0x1e>
 80103a6:	bf00      	nop
 80103a8:	200002fc 	.word	0x200002fc

080103ac <BSP_SD_WriteCpltCallback>:
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
  WriteStatus = 1;
 80103ac:	4b01      	ldr	r3, [pc, #4]	@ (80103b4 <BSP_SD_WriteCpltCallback+0x8>)
 80103ae:	2201      	movs	r2, #1
 80103b0:	605a      	str	r2, [r3, #4]
}
 80103b2:	4770      	bx	lr
 80103b4:	20002f4c 	.word	0x20002f4c

080103b8 <BSP_SD_ReadCpltCallback>:
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 80103b8:	4b01      	ldr	r3, [pc, #4]	@ (80103c0 <BSP_SD_ReadCpltCallback+0x8>)
 80103ba:	2201      	movs	r2, #1
 80103bc:	601a      	str	r2, [r3, #0]
}
 80103be:	4770      	bx	lr
 80103c0:	20002f4c 	.word	0x20002f4c

080103c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80103c4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80103c6:	f001 faf9 	bl	80119bc <vTaskStartScheduler>
  
  return osOK;
}
 80103ca:	2000      	movs	r0, #0
 80103cc:	bd08      	pop	{r3, pc}
 80103ce:	bf00      	nop

080103d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80103d0:	b510      	push	{r4, lr}
 80103d2:	4684      	mov	ip, r0
 80103d4:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103d6:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 80103da:	f8dc 1000 	ldr.w	r1, [ip]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80103de:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103e2:	6840      	ldr	r0, [r0, #4]
{
 80103e4:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 80103e6:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80103ea:	bf14      	ite	ne
 80103ec:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80103f0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103f2:	9400      	str	r4, [sp, #0]
 80103f4:	ac03      	add	r4, sp, #12
 80103f6:	9401      	str	r4, [sp, #4]
 80103f8:	f001 f9a4 	bl	8011744 <xTaskCreate>
 80103fc:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80103fe:	bf0c      	ite	eq
 8010400:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8010402:	2000      	movne	r0, #0
}
 8010404:	b004      	add	sp, #16
 8010406:	bd10      	pop	{r4, pc}

08010408 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8010408:	b500      	push	{lr}
 801040a:	b083      	sub	sp, #12
 801040c:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 801040e:	6802      	ldr	r2, [r0, #0]
 8010410:	9200      	str	r2, [sp, #0]
 8010412:	f1a1 0201 	sub.w	r2, r1, #1
 8010416:	fab2 f282 	clz	r2, r2
 801041a:	0952      	lsrs	r2, r2, #5
 801041c:	2101      	movs	r1, #1
 801041e:	4803      	ldr	r0, [pc, #12]	@ (801042c <osTimerCreate+0x24>)
 8010420:	f002 f814 	bl	801244c <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 8010424:	b003      	add	sp, #12
 8010426:	f85d fb04 	ldr.w	pc, [sp], #4
 801042a:	bf00      	nop
 801042c:	08015510 	.word	0x08015510

08010430 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8010430:	b510      	push	{r4, lr}
 8010432:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8010434:	2400      	movs	r4, #0
 8010436:	2901      	cmp	r1, #1
 8010438:	460a      	mov	r2, r1
 801043a:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 801043c:	bf38      	it	cc
 801043e:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010440:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8010444:	b14b      	cbz	r3, 801045a <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8010446:	9400      	str	r4, [sp, #0]
 8010448:	ab03      	add	r3, sp, #12
 801044a:	2109      	movs	r1, #9
 801044c:	f002 f856 	bl	80124fc <xTimerGenericCommand>
 8010450:	2801      	cmp	r0, #1
 8010452:	d00b      	beq.n	801046c <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 8010454:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 8010456:	b004      	add	sp, #16
 8010458:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 801045a:	9300      	str	r3, [sp, #0]
 801045c:	2104      	movs	r1, #4
 801045e:	f002 f84d 	bl	80124fc <xTimerGenericCommand>
 8010462:	2801      	cmp	r0, #1
 8010464:	d1f6      	bne.n	8010454 <osTimerStart+0x24>
  osStatus result = osOK;
 8010466:	2000      	movs	r0, #0
}
 8010468:	b004      	add	sp, #16
 801046a:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 801046c:	9b03      	ldr	r3, [sp, #12]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d0f9      	beq.n	8010466 <osTimerStart+0x36>
 8010472:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801047a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801047e:	f3bf 8f4f 	dsb	sy
 8010482:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8010486:	2000      	movs	r0, #0
  return result;
 8010488:	e7ee      	b.n	8010468 <osTimerStart+0x38>
 801048a:	bf00      	nop

0801048c <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801048c:	2901      	cmp	r1, #1
{ 
 801048e:	4608      	mov	r0, r1
  if (count == 1) {
 8010490:	d001      	beq.n	8010496 <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8010492:	f000 b965 	b.w	8010760 <xQueueCreateCountingSemaphore>
{ 
 8010496:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 8010498:	2203      	movs	r2, #3
 801049a:	2100      	movs	r1, #0
 801049c:	f000 f920 	bl	80106e0 <xQueueGenericCreate>
 80104a0:	4604      	mov	r4, r0
 80104a2:	b120      	cbz	r0, 80104ae <osSemaphoreCreate+0x22>
 80104a4:	2300      	movs	r3, #0
 80104a6:	461a      	mov	r2, r3
 80104a8:	4619      	mov	r1, r3
 80104aa:	f000 f99d 	bl	80107e8 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80104ae:	4620      	mov	r0, r4
 80104b0:	bd10      	pop	{r4, pc}
 80104b2:	bf00      	nop

080104b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80104b4:	b500      	push	{lr}
 80104b6:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80104b8:	2300      	movs	r3, #0
 80104ba:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80104bc:	b310      	cbz	r0, 8010504 <osSemaphoreWait+0x50>
 80104be:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80104c2:	b1aa      	cbz	r2, 80104f0 <osSemaphoreWait+0x3c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80104c4:	aa01      	add	r2, sp, #4
 80104c6:	4619      	mov	r1, r3
 80104c8:	f000 fed8 	bl	801127c <xQueueReceiveFromISR>
 80104cc:	2801      	cmp	r0, #1
 80104ce:	d115      	bne.n	80104fc <osSemaphoreWait+0x48>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80104d0:	9b01      	ldr	r3, [sp, #4]
 80104d2:	b18b      	cbz	r3, 80104f8 <osSemaphoreWait+0x44>
 80104d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80104d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80104e0:	f3bf 8f4f 	dsb	sy
 80104e4:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80104e8:	2000      	movs	r0, #0
}
 80104ea:	b003      	add	sp, #12
 80104ec:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80104f0:	f000 fd38 	bl	8010f64 <xQueueSemaphoreTake>
 80104f4:	2801      	cmp	r0, #1
 80104f6:	d101      	bne.n	80104fc <osSemaphoreWait+0x48>
  return osOK;
 80104f8:	2000      	movs	r0, #0
 80104fa:	e7f6      	b.n	80104ea <osSemaphoreWait+0x36>
      return osErrorOS;
 80104fc:	20ff      	movs	r0, #255	@ 0xff
}
 80104fe:	b003      	add	sp, #12
 8010500:	f85d fb04 	ldr.w	pc, [sp], #4
    return osErrorParameter;
 8010504:	2080      	movs	r0, #128	@ 0x80
}
 8010506:	b003      	add	sp, #12
 8010508:	f85d fb04 	ldr.w	pc, [sp], #4

0801050c <osSemaphoreRelease>:
* @brief Release a Semaphore token
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
 801050c:	b500      	push	{lr}
 801050e:	b083      	sub	sp, #12
 8010510:	2300      	movs	r3, #0
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	f3ef 8305 	mrs	r3, IPSR
 8010518:	b1a3      	cbz	r3, 8010544 <osSemaphoreRelease+0x38>
 801051a:	a901      	add	r1, sp, #4
 801051c:	f000 fb46 	bl	8010bac <xQueueGiveFromISR>
 8010520:	2801      	cmp	r0, #1
 8010522:	d115      	bne.n	8010550 <osSemaphoreRelease+0x44>
 8010524:	9b01      	ldr	r3, [sp, #4]
 8010526:	b14b      	cbz	r3, 801053c <osSemaphoreRelease+0x30>
 8010528:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801052c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010530:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010534:	f3bf 8f4f 	dsb	sy
 8010538:	f3bf 8f6f 	isb	sy
 801053c:	2000      	movs	r0, #0
 801053e:	b003      	add	sp, #12
 8010540:	f85d fb04 	ldr.w	pc, [sp], #4
 8010544:	461a      	mov	r2, r3
 8010546:	4619      	mov	r1, r3
 8010548:	f000 f94e 	bl	80107e8 <xQueueGenericSend>
 801054c:	2801      	cmp	r0, #1
 801054e:	d0f5      	beq.n	801053c <osSemaphoreRelease+0x30>
 8010550:	20ff      	movs	r0, #255	@ 0xff
 8010552:	b003      	add	sp, #12
 8010554:	f85d fb04 	ldr.w	pc, [sp], #4

08010558 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	4606      	mov	r6, r0
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801055c:	2014      	movs	r0, #20
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801055e:	6877      	ldr	r7, [r6, #4]
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8010560:	f002 f802 	bl	8012568 <pvPortMalloc>

  
  if (thePool) {
 8010564:	b328      	cbz	r0, 80105b2 <osPoolCreate+0x5a>
 8010566:	4605      	mov	r5, r0
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8010568:	3703      	adds	r7, #3
    thePool->pool_sz = pool_def->pool_sz;
 801056a:	6830      	ldr	r0, [r6, #0]
 801056c:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8010570:	2400      	movs	r4, #0
    thePool->item_sz = itemSize;
 8010572:	e9c5 0702 	strd	r0, r7, [r5, #8]
    thePool->currentIndex = 0;
 8010576:	612c      	str	r4, [r5, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8010578:	f001 fff6 	bl	8012568 <pvPortMalloc>
 801057c:	6068      	str	r0, [r5, #4]
   
    if (thePool->markers) {
 801057e:	b1a8      	cbz	r0, 80105ac <osPoolCreate+0x54>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8010580:	6830      	ldr	r0, [r6, #0]
 8010582:	fb07 f000 	mul.w	r0, r7, r0
 8010586:	f001 ffef 	bl	8012568 <pvPortMalloc>
 801058a:	6028      	str	r0, [r5, #0]
      
      if (thePool->pool) {
 801058c:	b158      	cbz	r0, 80105a6 <osPoolCreate+0x4e>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801058e:	6833      	ldr	r3, [r6, #0]
 8010590:	b13b      	cbz	r3, 80105a2 <osPoolCreate+0x4a>
 8010592:	4623      	mov	r3, r4
          thePool->markers[i] = 0;
 8010594:	4621      	mov	r1, r4
 8010596:	686a      	ldr	r2, [r5, #4]
 8010598:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801059a:	6832      	ldr	r2, [r6, #0]
 801059c:	3301      	adds	r3, #1
 801059e:	429a      	cmp	r2, r3
 80105a0:	d8f9      	bhi.n	8010596 <osPoolCreate+0x3e>
  return thePool;
 
#else
  return NULL;
#endif
}
 80105a2:	4628      	mov	r0, r5
 80105a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        vPortFree(thePool->markers);
 80105a6:	6868      	ldr	r0, [r5, #4]
 80105a8:	f002 f88a 	bl	80126c0 <vPortFree>
        vPortFree(thePool);
 80105ac:	4628      	mov	r0, r5
 80105ae:	f002 f887 	bl	80126c0 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80105b2:	2500      	movs	r5, #0
 80105b4:	e7f5      	b.n	80105a2 <osPoolCreate+0x4a>
 80105b6:	bf00      	nop

080105b8 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80105b8:	e9d0 0100 	ldrd	r0, r1, [r0]
 80105bc:	2200      	movs	r2, #0
 80105be:	f000 b88f 	b.w	80106e0 <xQueueGenericCreate>
 80105c2:	bf00      	nop

080105c4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80105c4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80105c6:	f001 fc77 	bl	8011eb8 <xTaskGetSchedulerState>
 80105ca:	2801      	cmp	r0, #1
 80105cc:	d100      	bne.n	80105d0 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80105ce:	bd08      	pop	{r3, pc}
 80105d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80105d4:	f002 b99e 	b.w	8012914 <xPortSysTickHandler>

080105d8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105d8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80105dc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80105e0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80105e2:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80105ea:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop

080105f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80105f0:	2300      	movs	r3, #0
 80105f2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop

080105f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80105f8:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80105fa:	6803      	ldr	r3, [r0, #0]
{
 80105fc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80105fe:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8010600:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010602:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010606:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010608:	6091      	str	r1, [r2, #8]
}
 801060a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 801060e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010610:	6003      	str	r3, [r0, #0]
}
 8010612:	4770      	bx	lr

08010614 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010614:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010616:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010618:	1c6b      	adds	r3, r5, #1
 801061a:	d010      	beq.n	801063e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801061c:	f100 0308 	add.w	r3, r0, #8
 8010620:	461c      	mov	r4, r3
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	681a      	ldr	r2, [r3, #0]
 8010626:	42aa      	cmp	r2, r5
 8010628:	d9fa      	bls.n	8010620 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801062a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 801062c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 801062e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010630:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010632:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8010634:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8010636:	6108      	str	r0, [r1, #16]
}
 8010638:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 801063a:	6002      	str	r2, [r0, #0]
}
 801063c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 801063e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8010640:	6863      	ldr	r3, [r4, #4]
 8010642:	e7f2      	b.n	801062a <vListInsert+0x16>

08010644 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010644:	6903      	ldr	r3, [r0, #16]
{
 8010646:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010648:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801064c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801064e:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8010650:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010652:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010654:	bf08      	it	eq
 8010656:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8010658:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 801065a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 801065e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8010660:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8010662:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010664:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8010666:	6818      	ldr	r0, [r3, #0]
}
 8010668:	4770      	bx	lr
 801066a:	bf00      	nop

0801066c <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801066c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 801066e:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010670:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8010672:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010674:	b92b      	cbnz	r3, 8010682 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010676:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010678:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801067a:	b35e      	cbz	r6, 80106d4 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 801067c:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801067e:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8010680:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010682:	4616      	mov	r6, r2
 8010684:	b982      	cbnz	r2, 80106a8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010686:	461a      	mov	r2, r3
 8010688:	6840      	ldr	r0, [r0, #4]
 801068a:	f003 f812 	bl	80136b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801068e:	6863      	ldr	r3, [r4, #4]
 8010690:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010692:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010694:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010696:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010698:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801069a:	bf24      	itt	cs
 801069c:	6823      	ldrcs	r3, [r4, #0]
 801069e:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106a0:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80106a2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106a4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80106a8:	461a      	mov	r2, r3
 80106aa:	68c0      	ldr	r0, [r0, #12]
 80106ac:	f003 f801 	bl	80136b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80106b0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80106b2:	68e3      	ldr	r3, [r4, #12]
 80106b4:	4251      	negs	r1, r2
 80106b6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80106b8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80106ba:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80106bc:	4293      	cmp	r3, r2
 80106be:	d202      	bcs.n	80106c6 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80106c0:	68a3      	ldr	r3, [r4, #8]
 80106c2:	440b      	add	r3, r1
 80106c4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80106c6:	2e02      	cmp	r6, #2
 80106c8:	d1ea      	bne.n	80106a0 <prvCopyDataToQueue+0x34>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106ca:	2d01      	cmp	r5, #1
 80106cc:	bf38      	it	cc
 80106ce:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 80106d0:	2000      	movs	r0, #0
 80106d2:	e7d4      	b.n	801067e <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106d4:	6880      	ldr	r0, [r0, #8]
 80106d6:	f001 fc4f 	bl	8011f78 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80106da:	60a6      	str	r6, [r4, #8]
 80106dc:	e7cf      	b.n	801067e <prvCopyDataToQueue+0x12>
 80106de:	bf00      	nop

080106e0 <xQueueGenericCreate>:
	{
 80106e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106e2:	b940      	cbnz	r0, 80106f6 <xQueueGenericCreate+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80106e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e8:	f383 8811 	msr	BASEPRI, r3
 80106ec:	f3bf 8f6f 	isb	sy
 80106f0:	f3bf 8f4f 	dsb	sy
 80106f4:	e7fe      	b.n	80106f4 <xQueueGenericCreate+0x14>
 80106f6:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106f8:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80106fc:	3050      	adds	r0, #80	@ 0x50
 80106fe:	460e      	mov	r6, r1
 8010700:	4617      	mov	r7, r2
 8010702:	f001 ff31 	bl	8012568 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010706:	4604      	mov	r4, r0
 8010708:	b328      	cbz	r0, 8010756 <xQueueGenericCreate+0x76>
	if( uxItemSize == ( UBaseType_t ) 0 )
 801070a:	b336      	cbz	r6, 801075a <xQueueGenericCreate+0x7a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801070c:	f100 0350 	add.w	r3, r0, #80	@ 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010710:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8010712:	e9c4 560f 	strd	r5, r6, [r4, #60]	@ 0x3c
	taskENTER_CRITICAL();
 8010716:	f002 f895 	bl	8012844 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801071a:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 801071e:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010720:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010722:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010726:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010728:	440a      	add	r2, r1
 801072a:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801072c:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801072e:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010730:	63a2      	str	r2, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8010732:	22ff      	movs	r2, #255	@ 0xff
 8010734:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010738:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 801073a:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801073e:	f104 0010 	add.w	r0, r4, #16
 8010742:	f7ff ff49 	bl	80105d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010746:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801074a:	f7ff ff45 	bl	80105d8 <vListInitialise>
	taskEXIT_CRITICAL();
 801074e:	f002 f89b 	bl	8012888 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8010752:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8010756:	4620      	mov	r0, r4
 8010758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801075a:	4603      	mov	r3, r0
 801075c:	e7d8      	b.n	8010710 <xQueueGenericCreate+0x30>
 801075e:	bf00      	nop

08010760 <xQueueCreateCountingSemaphore>:
	{
 8010760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
 8010762:	b940      	cbnz	r0, 8010776 <xQueueCreateCountingSemaphore+0x16>
 8010764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	e7fe      	b.n	8010774 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010776:	4288      	cmp	r0, r1
 8010778:	460e      	mov	r6, r1
 801077a:	4604      	mov	r4, r0
 801077c:	d208      	bcs.n	8010790 <xQueueCreateCountingSemaphore+0x30>
 801077e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010782:	f383 8811 	msr	BASEPRI, r3
 8010786:	f3bf 8f6f 	isb	sy
 801078a:	f3bf 8f4f 	dsb	sy
 801078e:	e7fe      	b.n	801078e <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010790:	2050      	movs	r0, #80	@ 0x50
 8010792:	f001 fee9 	bl	8012568 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010796:	4605      	mov	r5, r0
 8010798:	b320      	cbz	r0, 80107e4 <xQueueCreateCountingSemaphore+0x84>
	pxNewQueue->uxItemSize = uxItemSize;
 801079a:	2700      	movs	r7, #0
 801079c:	e9c0 470f 	strd	r4, r7, [r0, #60]	@ 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80107a0:	6000      	str	r0, [r0, #0]
	taskENTER_CRITICAL();
 80107a2:	f002 f84f 	bl	8012844 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107a6:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	@ 0x3c
 80107aa:	682a      	ldr	r2, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80107ac:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107ae:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107b2:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107b4:	4413      	add	r3, r2
 80107b6:	60ab      	str	r3, [r5, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107b8:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 80107ba:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107bc:	63af      	str	r7, [r5, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107be:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80107c0:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107c4:	f105 0010 	add.w	r0, r5, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80107c8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107cc:	f7ff ff04 	bl	80105d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80107d0:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80107d4:	f7ff ff00 	bl	80105d8 <vListInitialise>
	taskEXIT_CRITICAL();
 80107d8:	f002 f856 	bl	8012888 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 80107dc:	2302      	movs	r3, #2
 80107de:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80107e2:	63ae      	str	r6, [r5, #56]	@ 0x38
	}
 80107e4:	4628      	mov	r0, r5
 80107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107e8 <xQueueGenericSend>:
{
 80107e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107ec:	b085      	sub	sp, #20
 80107ee:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80107f0:	2800      	cmp	r0, #0
 80107f2:	d043      	beq.n	801087c <xQueueGenericSend+0x94>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107f4:	4688      	mov	r8, r1
 80107f6:	461f      	mov	r7, r3
 80107f8:	4604      	mov	r4, r0
 80107fa:	b399      	cbz	r1, 8010864 <xQueueGenericSend+0x7c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80107fc:	2f02      	cmp	r7, #2
 80107fe:	d10b      	bne.n	8010818 <xQueueGenericSend+0x30>
 8010800:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010802:	2b01      	cmp	r3, #1
 8010804:	d008      	beq.n	8010818 <xQueueGenericSend+0x30>
 8010806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801080a:	f383 8811 	msr	BASEPRI, r3
 801080e:	f3bf 8f6f 	isb	sy
 8010812:	f3bf 8f4f 	dsb	sy
 8010816:	e7fe      	b.n	8010816 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010818:	f001 fb4e 	bl	8011eb8 <xTaskGetSchedulerState>
 801081c:	2800      	cmp	r0, #0
 801081e:	d036      	beq.n	801088e <xQueueGenericSend+0xa6>
		taskENTER_CRITICAL();
 8010820:	f002 f810 	bl	8012844 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010824:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010826:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010828:	429a      	cmp	r2, r3
 801082a:	d301      	bcc.n	8010830 <xQueueGenericSend+0x48>
 801082c:	2f02      	cmp	r7, #2
 801082e:	d13a      	bne.n	80108a6 <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010830:	463a      	mov	r2, r7
 8010832:	4641      	mov	r1, r8
 8010834:	4620      	mov	r0, r4
 8010836:	f7ff ff19 	bl	801066c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801083a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801083c:	2b00      	cmp	r3, #0
 801083e:	f040 814b 	bne.w	8010ad8 <xQueueGenericSend+0x2f0>
					else if( xYieldRequired != pdFALSE )
 8010842:	b148      	cbz	r0, 8010858 <xQueueGenericSend+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 8010844:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801084c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010858:	f002 f816 	bl	8012888 <vPortExitCritical>
				return pdPASS;
 801085c:	2001      	movs	r0, #1
}
 801085e:	b005      	add	sp, #20
 8010860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010864:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010866:	2b00      	cmp	r3, #0
 8010868:	d0c8      	beq.n	80107fc <xQueueGenericSend+0x14>
 801086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801086e:	f383 8811 	msr	BASEPRI, r3
 8010872:	f3bf 8f6f 	isb	sy
 8010876:	f3bf 8f4f 	dsb	sy
 801087a:	e7fe      	b.n	801087a <xQueueGenericSend+0x92>
 801087c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010880:	f383 8811 	msr	BASEPRI, r3
 8010884:	f3bf 8f6f 	isb	sy
 8010888:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801088c:	e7fe      	b.n	801088c <xQueueGenericSend+0xa4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801088e:	9b01      	ldr	r3, [sp, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d0c5      	beq.n	8010820 <xQueueGenericSend+0x38>
 8010894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010898:	f383 8811 	msr	BASEPRI, r3
 801089c:	f3bf 8f6f 	isb	sy
 80108a0:	f3bf 8f4f 	dsb	sy
 80108a4:	e7fe      	b.n	80108a4 <xQueueGenericSend+0xbc>
 80108a6:	2200      	movs	r2, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108a8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
				if( xTicksToWait == ( TickType_t ) 0 )
 80108ac:	9b01      	ldr	r3, [sp, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f000 80d1 	beq.w	8010a56 <xQueueGenericSend+0x26e>
				else if( xEntryTimeSet == pdFALSE )
 80108b4:	2a00      	cmp	r2, #0
 80108b6:	f000 80ca 	beq.w	8010a4e <xQueueGenericSend+0x266>
		taskEXIT_CRITICAL();
 80108ba:	f001 ffe5 	bl	8012888 <vPortExitCritical>
		vTaskSuspendAll();
 80108be:	f001 f95d 	bl	8011b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108c2:	f001 ffbf 	bl	8012844 <vPortEnterCritical>
 80108c6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80108ca:	2bff      	cmp	r3, #255	@ 0xff
 80108cc:	bf04      	itt	eq
 80108ce:	2300      	moveq	r3, #0
 80108d0:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80108d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80108d8:	2bff      	cmp	r3, #255	@ 0xff
 80108da:	bf04      	itt	eq
 80108dc:	2300      	moveq	r3, #0
 80108de:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80108e2:	f001 ffd1 	bl	8012888 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108e6:	a901      	add	r1, sp, #4
 80108e8:	a802      	add	r0, sp, #8
 80108ea:	f001 fa9d 	bl	8011e28 <xTaskCheckForTimeOut>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	f040 80b5 	bne.w	8010a5e <xQueueGenericSend+0x276>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80108f4:	f001 ffa6 	bl	8012844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80108f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80108fa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d04c      	beq.n	801099a <xQueueGenericSend+0x1b2>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010900:	f001 ffc2 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010904:	f001 ff9e 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010908:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 801090c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801090e:	2d00      	cmp	r5, #0
 8010910:	dc04      	bgt.n	801091c <xQueueGenericSend+0x134>
 8010912:	e011      	b.n	8010938 <xQueueGenericSend+0x150>
			--cTxLock;
 8010914:	1e6a      	subs	r2, r5, #1
 8010916:	b2d3      	uxtb	r3, r2
 8010918:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801091a:	b16b      	cbz	r3, 8010938 <xQueueGenericSend+0x150>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801091c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801091e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010920:	b153      	cbz	r3, 8010938 <xQueueGenericSend+0x150>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010922:	f001 fa39 	bl	8011d98 <xTaskRemoveFromEventList>
 8010926:	2800      	cmp	r0, #0
 8010928:	d0f4      	beq.n	8010914 <xQueueGenericSend+0x12c>
						vTaskMissedYield();
 801092a:	f001 fabd 	bl	8011ea8 <vTaskMissedYield>
			--cTxLock;
 801092e:	1e6a      	subs	r2, r5, #1
 8010930:	b2d3      	uxtb	r3, r2
 8010932:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1f1      	bne.n	801091c <xQueueGenericSend+0x134>
		pxQueue->cTxLock = queueUNLOCKED;
 8010938:	23ff      	movs	r3, #255	@ 0xff
 801093a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801093e:	f001 ffa3 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010942:	f001 ff7f 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010946:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 801094a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801094c:	2d00      	cmp	r5, #0
 801094e:	dd14      	ble.n	801097a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010950:	f104 0910 	add.w	r9, r4, #16
 8010954:	e003      	b.n	801095e <xQueueGenericSend+0x176>
				--cRxLock;
 8010956:	1e6a      	subs	r2, r5, #1
 8010958:	b2d3      	uxtb	r3, r2
 801095a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801095c:	b16b      	cbz	r3, 801097a <xQueueGenericSend+0x192>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801095e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010960:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010962:	b153      	cbz	r3, 801097a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010964:	f001 fa18 	bl	8011d98 <xTaskRemoveFromEventList>
 8010968:	2800      	cmp	r0, #0
 801096a:	d0f4      	beq.n	8010956 <xQueueGenericSend+0x16e>
					vTaskMissedYield();
 801096c:	f001 fa9c 	bl	8011ea8 <vTaskMissedYield>
				--cRxLock;
 8010970:	1e6a      	subs	r2, r5, #1
 8010972:	b2d3      	uxtb	r3, r2
 8010974:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1f1      	bne.n	801095e <xQueueGenericSend+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 801097a:	23ff      	movs	r3, #255	@ 0xff
 801097c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010980:	f001 ff82 	bl	8012888 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8010984:	f001 f904 	bl	8011b90 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010988:	f001 ff5c 	bl	8012844 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801098c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801098e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010990:	429a      	cmp	r2, r3
 8010992:	f4ff af4d 	bcc.w	8010830 <xQueueGenericSend+0x48>
{
 8010996:	2201      	movs	r2, #1
 8010998:	e788      	b.n	80108ac <xQueueGenericSend+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801099a:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 801099e:	f001 ff73 	bl	8012888 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80109a2:	9901      	ldr	r1, [sp, #4]
 80109a4:	4648      	mov	r0, r9
 80109a6:	f001 f94b 	bl	8011c40 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80109aa:	f001 ff4b 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80109ae:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80109b2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109b4:	2d00      	cmp	r5, #0
 80109b6:	dc04      	bgt.n	80109c2 <xQueueGenericSend+0x1da>
 80109b8:	e011      	b.n	80109de <xQueueGenericSend+0x1f6>
			--cTxLock;
 80109ba:	1e6b      	subs	r3, r5, #1
 80109bc:	b2da      	uxtb	r2, r3
 80109be:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109c0:	b16a      	cbz	r2, 80109de <xQueueGenericSend+0x1f6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109c4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109c6:	b153      	cbz	r3, 80109de <xQueueGenericSend+0x1f6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109c8:	f001 f9e6 	bl	8011d98 <xTaskRemoveFromEventList>
 80109cc:	2800      	cmp	r0, #0
 80109ce:	d0f4      	beq.n	80109ba <xQueueGenericSend+0x1d2>
						vTaskMissedYield();
 80109d0:	f001 fa6a 	bl	8011ea8 <vTaskMissedYield>
			--cTxLock;
 80109d4:	1e6b      	subs	r3, r5, #1
 80109d6:	b2da      	uxtb	r2, r3
 80109d8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109da:	2a00      	cmp	r2, #0
 80109dc:	d1f1      	bne.n	80109c2 <xQueueGenericSend+0x1da>
		pxQueue->cTxLock = queueUNLOCKED;
 80109de:	23ff      	movs	r3, #255	@ 0xff
 80109e0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80109e4:	f001 ff50 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 80109e8:	f001 ff2c 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80109ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80109f0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80109f2:	2d00      	cmp	r5, #0
 80109f4:	dc04      	bgt.n	8010a00 <xQueueGenericSend+0x218>
 80109f6:	e011      	b.n	8010a1c <xQueueGenericSend+0x234>
				--cRxLock;
 80109f8:	1e6b      	subs	r3, r5, #1
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80109fe:	b16a      	cbz	r2, 8010a1c <xQueueGenericSend+0x234>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a00:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a02:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a04:	b153      	cbz	r3, 8010a1c <xQueueGenericSend+0x234>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a06:	f001 f9c7 	bl	8011d98 <xTaskRemoveFromEventList>
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	d0f4      	beq.n	80109f8 <xQueueGenericSend+0x210>
					vTaskMissedYield();
 8010a0e:	f001 fa4b 	bl	8011ea8 <vTaskMissedYield>
				--cRxLock;
 8010a12:	1e6b      	subs	r3, r5, #1
 8010a14:	b2da      	uxtb	r2, r3
 8010a16:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a18:	2a00      	cmp	r2, #0
 8010a1a:	d1f1      	bne.n	8010a00 <xQueueGenericSend+0x218>
		pxQueue->cRxLock = queueUNLOCKED;
 8010a1c:	23ff      	movs	r3, #255	@ 0xff
 8010a1e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010a22:	f001 ff31 	bl	8012888 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8010a26:	f001 f8b3 	bl	8011b90 <xTaskResumeAll>
 8010a2a:	b948      	cbnz	r0, 8010a40 <xQueueGenericSend+0x258>
					portYIELD_WITHIN_API();
 8010a2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8010a40:	f001 ff00 	bl	8012844 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a44:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010a46:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d9a4      	bls.n	8010996 <xQueueGenericSend+0x1ae>
 8010a4c:	e6f0      	b.n	8010830 <xQueueGenericSend+0x48>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a4e:	a802      	add	r0, sp, #8
 8010a50:	f001 f9e0 	bl	8011e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a54:	e731      	b.n	80108ba <xQueueGenericSend+0xd2>
					taskEXIT_CRITICAL();
 8010a56:	f001 ff17 	bl	8012888 <vPortExitCritical>
					return errQUEUE_FULL;
 8010a5a:	2000      	movs	r0, #0
 8010a5c:	e6ff      	b.n	801085e <xQueueGenericSend+0x76>
	taskENTER_CRITICAL();
 8010a5e:	f001 fef1 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010a62:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010a66:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a68:	2d00      	cmp	r5, #0
 8010a6a:	dd10      	ble.n	8010a8e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a6c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8010a70:	e003      	b.n	8010a7a <xQueueGenericSend+0x292>
			--cTxLock;
 8010a72:	1e6b      	subs	r3, r5, #1
 8010a74:	b2da      	uxtb	r2, r3
 8010a76:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a78:	b14a      	cbz	r2, 8010a8e <xQueueGenericSend+0x2a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a7c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a7e:	b133      	cbz	r3, 8010a8e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a80:	f001 f98a 	bl	8011d98 <xTaskRemoveFromEventList>
 8010a84:	2800      	cmp	r0, #0
 8010a86:	d0f4      	beq.n	8010a72 <xQueueGenericSend+0x28a>
						vTaskMissedYield();
 8010a88:	f001 fa0e 	bl	8011ea8 <vTaskMissedYield>
 8010a8c:	e7f1      	b.n	8010a72 <xQueueGenericSend+0x28a>
		pxQueue->cTxLock = queueUNLOCKED;
 8010a8e:	23ff      	movs	r3, #255	@ 0xff
 8010a90:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010a94:	f001 fef8 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010a98:	f001 fed4 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010a9c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010aa0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010aa2:	2d00      	cmp	r5, #0
 8010aa4:	dd10      	ble.n	8010ac8 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010aa6:	f104 0610 	add.w	r6, r4, #16
 8010aaa:	e003      	b.n	8010ab4 <xQueueGenericSend+0x2cc>
				--cRxLock;
 8010aac:	1e6b      	subs	r3, r5, #1
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ab2:	b14a      	cbz	r2, 8010ac8 <xQueueGenericSend+0x2e0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ab4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ab6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ab8:	b133      	cbz	r3, 8010ac8 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010aba:	f001 f96d 	bl	8011d98 <xTaskRemoveFromEventList>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	d0f4      	beq.n	8010aac <xQueueGenericSend+0x2c4>
					vTaskMissedYield();
 8010ac2:	f001 f9f1 	bl	8011ea8 <vTaskMissedYield>
 8010ac6:	e7f1      	b.n	8010aac <xQueueGenericSend+0x2c4>
		pxQueue->cRxLock = queueUNLOCKED;
 8010ac8:	23ff      	movs	r3, #255	@ 0xff
 8010aca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010ace:	f001 fedb 	bl	8012888 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8010ad2:	f001 f85d 	bl	8011b90 <xTaskResumeAll>
			return errQUEUE_FULL;
 8010ad6:	e7c0      	b.n	8010a5a <xQueueGenericSend+0x272>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ad8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010adc:	f001 f95c 	bl	8011d98 <xTaskRemoveFromEventList>
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	f43f aeb9 	beq.w	8010858 <xQueueGenericSend+0x70>
 8010ae6:	e6ad      	b.n	8010844 <xQueueGenericSend+0x5c>

08010ae8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8010ae8:	2800      	cmp	r0, #0
 8010aea:	d048      	beq.n	8010b7e <xQueueGenericSendFromISR+0x96>
{
 8010aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af0:	460e      	mov	r6, r1
 8010af2:	4617      	mov	r7, r2
 8010af4:	461d      	mov	r5, r3
 8010af6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010af8:	b321      	cbz	r1, 8010b44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010afa:	2d02      	cmp	r5, #2
 8010afc:	d10b      	bne.n	8010b16 <xQueueGenericSendFromISR+0x2e>
 8010afe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d008      	beq.n	8010b16 <xQueueGenericSendFromISR+0x2e>
 8010b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b08:	f383 8811 	msr	BASEPRI, r3
 8010b0c:	f3bf 8f6f 	isb	sy
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	e7fe      	b.n	8010b14 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b16:	f001 ffc3 	bl	8012aa0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010b1a:	f3ef 8811 	mrs	r8, BASEPRI
 8010b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b22:	f383 8811 	msr	BASEPRI, r3
 8010b26:	f3bf 8f6f 	isb	sy
 8010b2a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b2e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010b30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d312      	bcc.n	8010b5c <xQueueGenericSendFromISR+0x74>
 8010b36:	2d02      	cmp	r5, #2
 8010b38:	d010      	beq.n	8010b5c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8010b3a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010b3c:	f388 8811 	msr	BASEPRI, r8
}
 8010b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b44:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d0d7      	beq.n	8010afa <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8010b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b4e:	f383 8811 	msr	BASEPRI, r3
 8010b52:	f3bf 8f6f 	isb	sy
 8010b56:	f3bf 8f4f 	dsb	sy
 8010b5a:	e7fe      	b.n	8010b5a <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b5c:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b5e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b62:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b64:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b66:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f7ff fd7f 	bl	801066c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010b6e:	1c6b      	adds	r3, r5, #1
 8010b70:	d00e      	beq.n	8010b90 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010b72:	1c6b      	adds	r3, r5, #1
 8010b74:	b25b      	sxtb	r3, r3
 8010b76:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8010b7a:	2001      	movs	r0, #1
 8010b7c:	e7de      	b.n	8010b3c <xQueueGenericSendFromISR+0x54>
 8010b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010b8e:	e7fe      	b.n	8010b8e <xQueueGenericSendFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d0f1      	beq.n	8010b7a <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b96:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010b9a:	f001 f8fd 	bl	8011d98 <xTaskRemoveFromEventList>
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	d0eb      	beq.n	8010b7a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8010ba2:	2f00      	cmp	r7, #0
 8010ba4:	d0e9      	beq.n	8010b7a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	603b      	str	r3, [r7, #0]
 8010baa:	e7e6      	b.n	8010b7a <xQueueGenericSendFromISR+0x92>

08010bac <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8010bac:	b360      	cbz	r0, 8010c08 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010bae:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8010bb0:	b570      	push	{r4, r5, r6, lr}
 8010bb2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8010bb4:	b143      	cbz	r3, 8010bc8 <xQueueGiveFromISR+0x1c>
 8010bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bba:	f383 8811 	msr	BASEPRI, r3
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	e7fe      	b.n	8010bc6 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010bc8:	6803      	ldr	r3, [r0, #0]
 8010bca:	460d      	mov	r5, r1
 8010bcc:	b32b      	cbz	r3, 8010c1a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010bce:	f001 ff67 	bl	8012aa0 <vPortValidateInterruptPriority>
	__asm volatile
 8010bd2:	f3ef 8611 	mrs	r6, BASEPRI
 8010bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bda:	f383 8811 	msr	BASEPRI, r3
 8010bde:	f3bf 8f6f 	isb	sy
 8010be2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010be6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010be8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d921      	bls.n	8010c32 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010bee:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bf2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8010bf4:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bf6:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8010bf8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8010bfa:	d01e      	beq.n	8010c3a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	b25b      	sxtb	r3, r3
 8010c00:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8010c04:	2001      	movs	r0, #1
 8010c06:	e015      	b.n	8010c34 <xQueueGiveFromISR+0x88>
	__asm volatile
 8010c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c0c:	f383 8811 	msr	BASEPRI, r3
 8010c10:	f3bf 8f6f 	isb	sy
 8010c14:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010c18:	e7fe      	b.n	8010c18 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c1a:	6883      	ldr	r3, [r0, #8]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d0d6      	beq.n	8010bce <xQueueGiveFromISR+0x22>
 8010c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c24:	f383 8811 	msr	BASEPRI, r3
 8010c28:	f3bf 8f6f 	isb	sy
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	e7fe      	b.n	8010c30 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8010c32:	2000      	movs	r0, #0
	__asm volatile
 8010c34:	f386 8811 	msr	BASEPRI, r6
}
 8010c38:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d0e1      	beq.n	8010c04 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c40:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010c44:	f001 f8a8 	bl	8011d98 <xTaskRemoveFromEventList>
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d0db      	beq.n	8010c04 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8010c4c:	2d00      	cmp	r5, #0
 8010c4e:	d0d9      	beq.n	8010c04 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c50:	2301      	movs	r3, #1
 8010c52:	602b      	str	r3, [r5, #0]
 8010c54:	e7d6      	b.n	8010c04 <xQueueGiveFromISR+0x58>
 8010c56:	bf00      	nop

08010c58 <xQueueReceive>:
{
 8010c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c5c:	b085      	sub	sp, #20
 8010c5e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010c60:	2800      	cmp	r0, #0
 8010c62:	f000 8164 	beq.w	8010f2e <xQueueReceive+0x2d6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c66:	460f      	mov	r7, r1
 8010c68:	4604      	mov	r4, r0
 8010c6a:	2900      	cmp	r1, #0
 8010c6c:	f000 8097 	beq.w	8010d9e <xQueueReceive+0x146>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c70:	f001 f922 	bl	8011eb8 <xTaskGetSchedulerState>
 8010c74:	2800      	cmp	r0, #0
 8010c76:	f000 809f 	beq.w	8010db8 <xQueueReceive+0x160>
		taskENTER_CRITICAL();
 8010c7a:	f001 fde3 	bl	8012844 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c7e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c80:	2d00      	cmp	r5, #0
 8010c82:	d175      	bne.n	8010d70 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c84:	9b01      	ldr	r3, [sp, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	f000 80f4 	beq.w	8010e74 <xQueueReceive+0x21c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c8c:	a802      	add	r0, sp, #8
 8010c8e:	f001 f8c1 	bl	8011e14 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8010c92:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c94:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskEXIT_CRITICAL();
 8010c98:	f001 fdf6 	bl	8012888 <vPortExitCritical>
		vTaskSuspendAll();
 8010c9c:	f000 ff6e 	bl	8011b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ca0:	f001 fdd0 	bl	8012844 <vPortEnterCritical>
 8010ca4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010ca8:	2bff      	cmp	r3, #255	@ 0xff
 8010caa:	bf08      	it	eq
 8010cac:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8010cb0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010cb4:	2bff      	cmp	r3, #255	@ 0xff
 8010cb6:	bf08      	it	eq
 8010cb8:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8010cbc:	f001 fde4 	bl	8012888 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010cc0:	a901      	add	r1, sp, #4
 8010cc2:	a802      	add	r0, sp, #8
 8010cc4:	f001 f8b0 	bl	8011e28 <xTaskCheckForTimeOut>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	f040 8082 	bne.w	8010dd2 <xQueueReceive+0x17a>
	taskENTER_CRITICAL();
 8010cce:	f001 fdb9 	bl	8012844 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010cd2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f000 80d3 	beq.w	8010e80 <xQueueReceive+0x228>
	taskEXIT_CRITICAL();
 8010cda:	f001 fdd5 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010cde:	f001 fdb1 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010ce2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010ce6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ce8:	2d00      	cmp	r5, #0
 8010cea:	dd14      	ble.n	8010d16 <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cec:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8010cf0:	e003      	b.n	8010cfa <xQueueReceive+0xa2>
			--cTxLock;
 8010cf2:	1e6b      	subs	r3, r5, #1
 8010cf4:	b2da      	uxtb	r2, r3
 8010cf6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010cf8:	b16a      	cbz	r2, 8010d16 <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cfa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cfc:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cfe:	b153      	cbz	r3, 8010d16 <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d00:	f001 f84a 	bl	8011d98 <xTaskRemoveFromEventList>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d0f4      	beq.n	8010cf2 <xQueueReceive+0x9a>
						vTaskMissedYield();
 8010d08:	f001 f8ce 	bl	8011ea8 <vTaskMissedYield>
			--cTxLock;
 8010d0c:	1e6b      	subs	r3, r5, #1
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d12:	2a00      	cmp	r2, #0
 8010d14:	d1f1      	bne.n	8010cfa <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
 8010d16:	23ff      	movs	r3, #255	@ 0xff
 8010d18:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010d1c:	f001 fdb4 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010d20:	f001 fd90 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010d24:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010d28:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d2a:	2d00      	cmp	r5, #0
 8010d2c:	dd14      	ble.n	8010d58 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d2e:	f104 0910 	add.w	r9, r4, #16
 8010d32:	e003      	b.n	8010d3c <xQueueReceive+0xe4>
				--cRxLock;
 8010d34:	1e6b      	subs	r3, r5, #1
 8010d36:	b2da      	uxtb	r2, r3
 8010d38:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d3a:	b16a      	cbz	r2, 8010d58 <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d3c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d3e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d40:	b153      	cbz	r3, 8010d58 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d42:	f001 f829 	bl	8011d98 <xTaskRemoveFromEventList>
 8010d46:	2800      	cmp	r0, #0
 8010d48:	d0f4      	beq.n	8010d34 <xQueueReceive+0xdc>
					vTaskMissedYield();
 8010d4a:	f001 f8ad 	bl	8011ea8 <vTaskMissedYield>
				--cRxLock;
 8010d4e:	1e6b      	subs	r3, r5, #1
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d54:	2a00      	cmp	r2, #0
 8010d56:	d1f1      	bne.n	8010d3c <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 8010d58:	23ff      	movs	r3, #255	@ 0xff
 8010d5a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010d5e:	f001 fd93 	bl	8012888 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8010d62:	f000 ff15 	bl	8011b90 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010d66:	f001 fd6d 	bl	8012844 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d6a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d6c:	2d00      	cmp	r5, #0
 8010d6e:	d07d      	beq.n	8010e6c <xQueueReceive+0x214>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010d70:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010d72:	b152      	cbz	r2, 8010d8a <xQueueReceive+0x132>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d74:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d76:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d78:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d7a:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d7c:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010d7e:	bf24      	itt	cs
 8010d80:	6821      	ldrcs	r1, [r4, #0]
 8010d82:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d84:	4638      	mov	r0, r7
 8010d86:	f002 fc94 	bl	80136b2 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d8a:	3d01      	subs	r5, #1
 8010d8c:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d8e:	6923      	ldr	r3, [r4, #16]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f040 80d5 	bne.w	8010f40 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 8010d96:	f001 fd77 	bl	8012888 <vPortExitCritical>
				return pdPASS;
 8010d9a:	2001      	movs	r0, #1
 8010d9c:	e06d      	b.n	8010e7a <xQueueReceive+0x222>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d9e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f43f af65 	beq.w	8010c70 <xQueueReceive+0x18>
	__asm volatile
 8010da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	e7fe      	b.n	8010db6 <xQueueReceive+0x15e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010db8:	9b01      	ldr	r3, [sp, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f43f af5d 	beq.w	8010c7a <xQueueReceive+0x22>
 8010dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	e7fe      	b.n	8010dd0 <xQueueReceive+0x178>
	taskENTER_CRITICAL();
 8010dd2:	f001 fd37 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010dd6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010dda:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ddc:	2d00      	cmp	r5, #0
 8010dde:	dc04      	bgt.n	8010dea <xQueueReceive+0x192>
 8010de0:	e011      	b.n	8010e06 <xQueueReceive+0x1ae>
			--cTxLock;
 8010de2:	1e6b      	subs	r3, r5, #1
 8010de4:	b2da      	uxtb	r2, r3
 8010de6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010de8:	b16a      	cbz	r2, 8010e06 <xQueueReceive+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010dea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010dec:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010dee:	b153      	cbz	r3, 8010e06 <xQueueReceive+0x1ae>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010df0:	f000 ffd2 	bl	8011d98 <xTaskRemoveFromEventList>
 8010df4:	2800      	cmp	r0, #0
 8010df6:	d0f4      	beq.n	8010de2 <xQueueReceive+0x18a>
						vTaskMissedYield();
 8010df8:	f001 f856 	bl	8011ea8 <vTaskMissedYield>
			--cTxLock;
 8010dfc:	1e6b      	subs	r3, r5, #1
 8010dfe:	b2da      	uxtb	r2, r3
 8010e00:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e02:	2a00      	cmp	r2, #0
 8010e04:	d1f1      	bne.n	8010dea <xQueueReceive+0x192>
		pxQueue->cTxLock = queueUNLOCKED;
 8010e06:	23ff      	movs	r3, #255	@ 0xff
 8010e08:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010e0c:	f001 fd3c 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010e10:	f001 fd18 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010e14:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010e18:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e1a:	2d00      	cmp	r5, #0
 8010e1c:	dd14      	ble.n	8010e48 <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e1e:	f104 0910 	add.w	r9, r4, #16
 8010e22:	e003      	b.n	8010e2c <xQueueReceive+0x1d4>
				--cRxLock;
 8010e24:	1e6b      	subs	r3, r5, #1
 8010e26:	b2da      	uxtb	r2, r3
 8010e28:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e2a:	b16a      	cbz	r2, 8010e48 <xQueueReceive+0x1f0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e2c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e2e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e30:	b153      	cbz	r3, 8010e48 <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e32:	f000 ffb1 	bl	8011d98 <xTaskRemoveFromEventList>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d0f4      	beq.n	8010e24 <xQueueReceive+0x1cc>
					vTaskMissedYield();
 8010e3a:	f001 f835 	bl	8011ea8 <vTaskMissedYield>
				--cRxLock;
 8010e3e:	1e6b      	subs	r3, r5, #1
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e44:	2a00      	cmp	r2, #0
 8010e46:	d1f1      	bne.n	8010e2c <xQueueReceive+0x1d4>
		pxQueue->cRxLock = queueUNLOCKED;
 8010e48:	23ff      	movs	r3, #255	@ 0xff
 8010e4a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010e4e:	f001 fd1b 	bl	8012888 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8010e52:	f000 fe9d 	bl	8011b90 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8010e56:	f001 fcf5 	bl	8012844 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010e5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010e5c:	b153      	cbz	r3, 8010e74 <xQueueReceive+0x21c>
	taskEXIT_CRITICAL();
 8010e5e:	f001 fd13 	bl	8012888 <vPortExitCritical>
		taskENTER_CRITICAL();
 8010e62:	f001 fcef 	bl	8012844 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e66:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e68:	2d00      	cmp	r5, #0
 8010e6a:	d181      	bne.n	8010d70 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e6c:	9b01      	ldr	r3, [sp, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f47f af12 	bne.w	8010c98 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8010e74:	f001 fd08 	bl	8012888 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010e78:	2000      	movs	r0, #0
}
 8010e7a:	b005      	add	sp, #20
 8010e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e80:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
 8010e84:	f001 fd00 	bl	8012888 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e88:	9901      	ldr	r1, [sp, #4]
 8010e8a:	4648      	mov	r0, r9
 8010e8c:	f000 fed8 	bl	8011c40 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8010e90:	f001 fcd8 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010e94:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010e98:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e9a:	2d00      	cmp	r5, #0
 8010e9c:	dc04      	bgt.n	8010ea8 <xQueueReceive+0x250>
 8010e9e:	e011      	b.n	8010ec4 <xQueueReceive+0x26c>
			--cTxLock;
 8010ea0:	1e6b      	subs	r3, r5, #1
 8010ea2:	b2da      	uxtb	r2, r3
 8010ea4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ea6:	b16a      	cbz	r2, 8010ec4 <xQueueReceive+0x26c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ea8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010eaa:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010eac:	b153      	cbz	r3, 8010ec4 <xQueueReceive+0x26c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010eae:	f000 ff73 	bl	8011d98 <xTaskRemoveFromEventList>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d0f4      	beq.n	8010ea0 <xQueueReceive+0x248>
						vTaskMissedYield();
 8010eb6:	f000 fff7 	bl	8011ea8 <vTaskMissedYield>
			--cTxLock;
 8010eba:	1e6b      	subs	r3, r5, #1
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ec0:	2a00      	cmp	r2, #0
 8010ec2:	d1f1      	bne.n	8010ea8 <xQueueReceive+0x250>
		pxQueue->cTxLock = queueUNLOCKED;
 8010ec4:	23ff      	movs	r3, #255	@ 0xff
 8010ec6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010eca:	f001 fcdd 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010ece:	f001 fcb9 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010ed2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010ed6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ed8:	2d00      	cmp	r5, #0
 8010eda:	dd14      	ble.n	8010f06 <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010edc:	f104 0910 	add.w	r9, r4, #16
 8010ee0:	e003      	b.n	8010eea <xQueueReceive+0x292>
				--cRxLock;
 8010ee2:	1e6b      	subs	r3, r5, #1
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ee8:	b16a      	cbz	r2, 8010f06 <xQueueReceive+0x2ae>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010eea:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010eec:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010eee:	b153      	cbz	r3, 8010f06 <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ef0:	f000 ff52 	bl	8011d98 <xTaskRemoveFromEventList>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d0f4      	beq.n	8010ee2 <xQueueReceive+0x28a>
					vTaskMissedYield();
 8010ef8:	f000 ffd6 	bl	8011ea8 <vTaskMissedYield>
				--cRxLock;
 8010efc:	1e6b      	subs	r3, r5, #1
 8010efe:	b2da      	uxtb	r2, r3
 8010f00:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f02:	2a00      	cmp	r2, #0
 8010f04:	d1f1      	bne.n	8010eea <xQueueReceive+0x292>
		pxQueue->cRxLock = queueUNLOCKED;
 8010f06:	23ff      	movs	r3, #255	@ 0xff
 8010f08:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010f0c:	f001 fcbc 	bl	8012888 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8010f10:	f000 fe3e 	bl	8011b90 <xTaskResumeAll>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d1a4      	bne.n	8010e62 <xQueueReceive+0x20a>
					portYIELD_WITHIN_API();
 8010f18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f20:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010f24:	f3bf 8f4f 	dsb	sy
 8010f28:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8010f2c:	e799      	b.n	8010e62 <xQueueReceive+0x20a>
 8010f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f32:	f383 8811 	msr	BASEPRI, r3
 8010f36:	f3bf 8f6f 	isb	sy
 8010f3a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8010f3e:	e7fe      	b.n	8010f3e <xQueueReceive+0x2e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f40:	f104 0010 	add.w	r0, r4, #16
 8010f44:	f000 ff28 	bl	8011d98 <xTaskRemoveFromEventList>
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	f43f af24 	beq.w	8010d96 <xQueueReceive+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 8010f4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f56:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	f3bf 8f6f 	isb	sy
 8010f62:	e718      	b.n	8010d96 <xQueueReceive+0x13e>

08010f64 <xQueueSemaphoreTake>:
{
 8010f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	d05e      	beq.n	801102e <xQueueSemaphoreTake+0xca>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f70:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8010f72:	4604      	mov	r4, r0
 8010f74:	b147      	cbz	r7, 8010f88 <xQueueSemaphoreTake+0x24>
 8010f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f7a:	f383 8811 	msr	BASEPRI, r3
 8010f7e:	f3bf 8f6f 	isb	sy
 8010f82:	f3bf 8f4f 	dsb	sy
 8010f86:	e7fe      	b.n	8010f86 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f88:	f000 ff96 	bl	8011eb8 <xTaskGetSchedulerState>
 8010f8c:	4605      	mov	r5, r0
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d056      	beq.n	8011040 <xQueueSemaphoreTake+0xdc>
 8010f92:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f94:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskENTER_CRITICAL();
 8010f98:	f001 fc54 	bl	8012844 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010f9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f040 814d 	bne.w	801123e <xQueueSemaphoreTake+0x2da>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010fa4:	9b01      	ldr	r3, [sp, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f000 813e 	beq.w	8011228 <xQueueSemaphoreTake+0x2c4>
				else if( xEntryTimeSet == pdFALSE )
 8010fac:	2d00      	cmp	r5, #0
 8010fae:	f000 80a3 	beq.w	80110f8 <xQueueSemaphoreTake+0x194>
		taskEXIT_CRITICAL();
 8010fb2:	f001 fc69 	bl	8012888 <vPortExitCritical>
		vTaskSuspendAll();
 8010fb6:	f000 fde1 	bl	8011b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fba:	f001 fc43 	bl	8012844 <vPortEnterCritical>
 8010fbe:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010fc2:	2bff      	cmp	r3, #255	@ 0xff
 8010fc4:	bf04      	itt	eq
 8010fc6:	2300      	moveq	r3, #0
 8010fc8:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8010fcc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010fd0:	2bff      	cmp	r3, #255	@ 0xff
 8010fd2:	bf04      	itt	eq
 8010fd4:	2300      	moveq	r3, #0
 8010fd6:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8010fda:	f001 fc55 	bl	8012888 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fde:	a901      	add	r1, sp, #4
 8010fe0:	a802      	add	r0, sp, #8
 8010fe2:	f000 ff21 	bl	8011e28 <xTaskCheckForTimeOut>
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d137      	bne.n	801105a <xQueueSemaphoreTake+0xf6>
	taskENTER_CRITICAL();
 8010fea:	f001 fc2b 	bl	8012844 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010fee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f000 80ae 	beq.w	8011152 <xQueueSemaphoreTake+0x1ee>
	taskEXIT_CRITICAL();
 8010ff6:	f001 fc47 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010ffa:	f001 fc23 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010ffe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011002:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011004:	2d00      	cmp	r5, #0
 8011006:	dd7f      	ble.n	8011108 <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011008:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 801100c:	e004      	b.n	8011018 <xQueueSemaphoreTake+0xb4>
			--cTxLock;
 801100e:	1e6b      	subs	r3, r5, #1
 8011010:	b2da      	uxtb	r2, r3
 8011012:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011014:	2a00      	cmp	r2, #0
 8011016:	d077      	beq.n	8011108 <xQueueSemaphoreTake+0x1a4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011018:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801101a:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801101c:	2b00      	cmp	r3, #0
 801101e:	d073      	beq.n	8011108 <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011020:	f000 feba 	bl	8011d98 <xTaskRemoveFromEventList>
 8011024:	2800      	cmp	r0, #0
 8011026:	d0f2      	beq.n	801100e <xQueueSemaphoreTake+0xaa>
						vTaskMissedYield();
 8011028:	f000 ff3e 	bl	8011ea8 <vTaskMissedYield>
 801102c:	e7ef      	b.n	801100e <xQueueSemaphoreTake+0xaa>
 801102e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011032:	f383 8811 	msr	BASEPRI, r3
 8011036:	f3bf 8f6f 	isb	sy
 801103a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801103e:	e7fe      	b.n	801103e <xQueueSemaphoreTake+0xda>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011040:	9b01      	ldr	r3, [sp, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	f000 80d7 	beq.w	80111f6 <xQueueSemaphoreTake+0x292>
 8011048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801104c:	f383 8811 	msr	BASEPRI, r3
 8011050:	f3bf 8f6f 	isb	sy
 8011054:	f3bf 8f4f 	dsb	sy
 8011058:	e7fe      	b.n	8011058 <xQueueSemaphoreTake+0xf4>
	taskENTER_CRITICAL();
 801105a:	f001 fbf3 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801105e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011062:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011064:	2d00      	cmp	r5, #0
 8011066:	dc04      	bgt.n	8011072 <xQueueSemaphoreTake+0x10e>
 8011068:	e011      	b.n	801108e <xQueueSemaphoreTake+0x12a>
			--cTxLock;
 801106a:	1e6b      	subs	r3, r5, #1
 801106c:	b2da      	uxtb	r2, r3
 801106e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011070:	b16a      	cbz	r2, 801108e <xQueueSemaphoreTake+0x12a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011072:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011074:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011076:	b153      	cbz	r3, 801108e <xQueueSemaphoreTake+0x12a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011078:	f000 fe8e 	bl	8011d98 <xTaskRemoveFromEventList>
 801107c:	2800      	cmp	r0, #0
 801107e:	d0f4      	beq.n	801106a <xQueueSemaphoreTake+0x106>
						vTaskMissedYield();
 8011080:	f000 ff12 	bl	8011ea8 <vTaskMissedYield>
			--cTxLock;
 8011084:	1e6b      	subs	r3, r5, #1
 8011086:	b2da      	uxtb	r2, r3
 8011088:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801108a:	2a00      	cmp	r2, #0
 801108c:	d1f1      	bne.n	8011072 <xQueueSemaphoreTake+0x10e>
		pxQueue->cTxLock = queueUNLOCKED;
 801108e:	23ff      	movs	r3, #255	@ 0xff
 8011090:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8011094:	f001 fbf8 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8011098:	f001 fbd4 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801109c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80110a0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80110a2:	2d00      	cmp	r5, #0
 80110a4:	dd14      	ble.n	80110d0 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110a6:	f104 0810 	add.w	r8, r4, #16
 80110aa:	e003      	b.n	80110b4 <xQueueSemaphoreTake+0x150>
				--cRxLock;
 80110ac:	1e6b      	subs	r3, r5, #1
 80110ae:	b2da      	uxtb	r2, r3
 80110b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80110b2:	b16a      	cbz	r2, 80110d0 <xQueueSemaphoreTake+0x16c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110b4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110b6:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110b8:	b153      	cbz	r3, 80110d0 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110ba:	f000 fe6d 	bl	8011d98 <xTaskRemoveFromEventList>
 80110be:	2800      	cmp	r0, #0
 80110c0:	d0f4      	beq.n	80110ac <xQueueSemaphoreTake+0x148>
					vTaskMissedYield();
 80110c2:	f000 fef1 	bl	8011ea8 <vTaskMissedYield>
				--cRxLock;
 80110c6:	1e6b      	subs	r3, r5, #1
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80110cc:	2a00      	cmp	r2, #0
 80110ce:	d1f1      	bne.n	80110b4 <xQueueSemaphoreTake+0x150>
		pxQueue->cRxLock = queueUNLOCKED;
 80110d0:	23ff      	movs	r3, #255	@ 0xff
 80110d2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80110d6:	f001 fbd7 	bl	8012888 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80110da:	f000 fd59 	bl	8011b90 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80110de:	f001 fbb1 	bl	8012844 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80110e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80110e4:	b963      	cbnz	r3, 8011100 <xQueueSemaphoreTake+0x19c>
	taskEXIT_CRITICAL();
 80110e6:	f001 fbcf 	bl	8012888 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80110ea:	2f00      	cmp	r7, #0
 80110ec:	f040 8085 	bne.w	80111fa <xQueueSemaphoreTake+0x296>
					return errQUEUE_EMPTY;
 80110f0:	2000      	movs	r0, #0
}
 80110f2:	b004      	add	sp, #16
 80110f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 80110f8:	a802      	add	r0, sp, #8
 80110fa:	f000 fe8b 	bl	8011e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80110fe:	e758      	b.n	8010fb2 <xQueueSemaphoreTake+0x4e>
	taskEXIT_CRITICAL();
 8011100:	f001 fbc2 	bl	8012888 <vPortExitCritical>
	return xReturn;
 8011104:	2501      	movs	r5, #1
 8011106:	e747      	b.n	8010f98 <xQueueSemaphoreTake+0x34>
		pxQueue->cTxLock = queueUNLOCKED;
 8011108:	23ff      	movs	r3, #255	@ 0xff
 801110a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801110e:	f001 fbbb 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 8011112:	f001 fb97 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8011116:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801111a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801111c:	2d00      	cmp	r5, #0
 801111e:	dd10      	ble.n	8011142 <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011120:	f104 0810 	add.w	r8, r4, #16
 8011124:	e003      	b.n	801112e <xQueueSemaphoreTake+0x1ca>
				--cRxLock;
 8011126:	1e6b      	subs	r3, r5, #1
 8011128:	b2da      	uxtb	r2, r3
 801112a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801112c:	b14a      	cbz	r2, 8011142 <xQueueSemaphoreTake+0x1de>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801112e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011130:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011132:	b133      	cbz	r3, 8011142 <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011134:	f000 fe30 	bl	8011d98 <xTaskRemoveFromEventList>
 8011138:	2800      	cmp	r0, #0
 801113a:	d0f4      	beq.n	8011126 <xQueueSemaphoreTake+0x1c2>
					vTaskMissedYield();
 801113c:	f000 feb4 	bl	8011ea8 <vTaskMissedYield>
 8011140:	e7f1      	b.n	8011126 <xQueueSemaphoreTake+0x1c2>
		pxQueue->cRxLock = queueUNLOCKED;
 8011142:	23ff      	movs	r3, #255	@ 0xff
 8011144:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8011148:	f001 fb9e 	bl	8012888 <vPortExitCritical>
				( void ) xTaskResumeAll();
 801114c:	f000 fd20 	bl	8011b90 <xTaskResumeAll>
 8011150:	e7d8      	b.n	8011104 <xQueueSemaphoreTake+0x1a0>
	taskEXIT_CRITICAL();
 8011152:	f001 fb99 	bl	8012888 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d05c      	beq.n	8011216 <xQueueSemaphoreTake+0x2b2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801115c:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 8011160:	9901      	ldr	r1, [sp, #4]
 8011162:	4640      	mov	r0, r8
 8011164:	f000 fd6c 	bl	8011c40 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8011168:	f001 fb6c 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801116c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011170:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011172:	2d00      	cmp	r5, #0
 8011174:	dc04      	bgt.n	8011180 <xQueueSemaphoreTake+0x21c>
 8011176:	e00d      	b.n	8011194 <xQueueSemaphoreTake+0x230>
			--cTxLock;
 8011178:	1e6b      	subs	r3, r5, #1
 801117a:	b2da      	uxtb	r2, r3
 801117c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801117e:	b14a      	cbz	r2, 8011194 <xQueueSemaphoreTake+0x230>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011180:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011182:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011184:	b133      	cbz	r3, 8011194 <xQueueSemaphoreTake+0x230>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011186:	f000 fe07 	bl	8011d98 <xTaskRemoveFromEventList>
 801118a:	2800      	cmp	r0, #0
 801118c:	d0f4      	beq.n	8011178 <xQueueSemaphoreTake+0x214>
						vTaskMissedYield();
 801118e:	f000 fe8b 	bl	8011ea8 <vTaskMissedYield>
 8011192:	e7f1      	b.n	8011178 <xQueueSemaphoreTake+0x214>
		pxQueue->cTxLock = queueUNLOCKED;
 8011194:	23ff      	movs	r3, #255	@ 0xff
 8011196:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801119a:	f001 fb75 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 801119e:	f001 fb51 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80111a2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80111a6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111a8:	2d00      	cmp	r5, #0
 80111aa:	dd10      	ble.n	80111ce <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111ac:	f104 0810 	add.w	r8, r4, #16
 80111b0:	e003      	b.n	80111ba <xQueueSemaphoreTake+0x256>
				--cRxLock;
 80111b2:	1e6b      	subs	r3, r5, #1
 80111b4:	b2da      	uxtb	r2, r3
 80111b6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111b8:	b14a      	cbz	r2, 80111ce <xQueueSemaphoreTake+0x26a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111ba:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111bc:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111be:	b133      	cbz	r3, 80111ce <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111c0:	f000 fdea 	bl	8011d98 <xTaskRemoveFromEventList>
 80111c4:	2800      	cmp	r0, #0
 80111c6:	d0f4      	beq.n	80111b2 <xQueueSemaphoreTake+0x24e>
					vTaskMissedYield();
 80111c8:	f000 fe6e 	bl	8011ea8 <vTaskMissedYield>
 80111cc:	e7f1      	b.n	80111b2 <xQueueSemaphoreTake+0x24e>
		pxQueue->cRxLock = queueUNLOCKED;
 80111ce:	23ff      	movs	r3, #255	@ 0xff
 80111d0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80111d4:	f001 fb58 	bl	8012888 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80111d8:	f000 fcda 	bl	8011b90 <xTaskResumeAll>
 80111dc:	2800      	cmp	r0, #0
 80111de:	d191      	bne.n	8011104 <xQueueSemaphoreTake+0x1a0>
					portYIELD_WITHIN_API();
 80111e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80111e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80111ec:	f3bf 8f4f 	dsb	sy
 80111f0:	f3bf 8f6f 	isb	sy
 80111f4:	e786      	b.n	8011104 <xQueueSemaphoreTake+0x1a0>
 80111f6:	462f      	mov	r7, r5
 80111f8:	e6cc      	b.n	8010f94 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 80111fa:	f001 fb23 	bl	8012844 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80111fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011200:	b119      	cbz	r1, 801120a <xQueueSemaphoreTake+0x2a6>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011202:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011204:	6819      	ldr	r1, [r3, #0]
 8011206:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801120a:	68a0      	ldr	r0, [r4, #8]
 801120c:	f000 ff0a 	bl	8012024 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8011210:	f001 fb3a 	bl	8012888 <vPortExitCritical>
 8011214:	e76c      	b.n	80110f0 <xQueueSemaphoreTake+0x18c>
						taskENTER_CRITICAL();
 8011216:	f001 fb15 	bl	8012844 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801121a:	68a0      	ldr	r0, [r4, #8]
 801121c:	f000 fe5c 	bl	8011ed8 <xTaskPriorityInherit>
 8011220:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 8011222:	f001 fb31 	bl	8012888 <vPortExitCritical>
 8011226:	e799      	b.n	801115c <xQueueSemaphoreTake+0x1f8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011228:	2f00      	cmp	r7, #0
 801122a:	d0f1      	beq.n	8011210 <xQueueSemaphoreTake+0x2ac>
 801122c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011230:	f383 8811 	msr	BASEPRI, r3
 8011234:	f3bf 8f6f 	isb	sy
 8011238:	f3bf 8f4f 	dsb	sy
 801123c:	e7fe      	b.n	801123c <xQueueSemaphoreTake+0x2d8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801123e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011240:	3b01      	subs	r3, #1
 8011242:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011244:	b12a      	cbz	r2, 8011252 <xQueueSemaphoreTake+0x2ee>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011246:	6923      	ldr	r3, [r4, #16]
 8011248:	b93b      	cbnz	r3, 801125a <xQueueSemaphoreTake+0x2f6>
				taskEXIT_CRITICAL();
 801124a:	f001 fb1d 	bl	8012888 <vPortExitCritical>
				return pdPASS;
 801124e:	2001      	movs	r0, #1
 8011250:	e74f      	b.n	80110f2 <xQueueSemaphoreTake+0x18e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011252:	f000 ff43 	bl	80120dc <pvTaskIncrementMutexHeldCount>
 8011256:	60a0      	str	r0, [r4, #8]
 8011258:	e7f5      	b.n	8011246 <xQueueSemaphoreTake+0x2e2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801125a:	f104 0010 	add.w	r0, r4, #16
 801125e:	f000 fd9b 	bl	8011d98 <xTaskRemoveFromEventList>
 8011262:	2800      	cmp	r0, #0
 8011264:	d0f1      	beq.n	801124a <xQueueSemaphoreTake+0x2e6>
						queueYIELD_IF_USING_PREEMPTION();
 8011266:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801126a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801126e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011272:	f3bf 8f4f 	dsb	sy
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	e7e6      	b.n	801124a <xQueueSemaphoreTake+0x2e6>

0801127c <xQueueReceiveFromISR>:
{
 801127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8011280:	b310      	cbz	r0, 80112c8 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011282:	460e      	mov	r6, r1
 8011284:	4617      	mov	r7, r2
 8011286:	4604      	mov	r4, r0
 8011288:	b191      	cbz	r1, 80112b0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801128a:	f001 fc09 	bl	8012aa0 <vPortValidateInterruptPriority>
	__asm volatile
 801128e:	f3ef 8911 	mrs	r9, BASEPRI
 8011292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112a2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112a4:	b9cd      	cbnz	r5, 80112da <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80112a6:	4628      	mov	r0, r5
	__asm volatile
 80112a8:	f389 8811 	msr	BASEPRI, r9
}
 80112ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112b0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d0e9      	beq.n	801128a <xQueueReceiveFromISR+0xe>
	__asm volatile
 80112b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ba:	f383 8811 	msr	BASEPRI, r3
 80112be:	f3bf 8f6f 	isb	sy
 80112c2:	f3bf 8f4f 	dsb	sy
 80112c6:	e7fe      	b.n	80112c6 <xQueueReceiveFromISR+0x4a>
 80112c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112cc:	f383 8811 	msr	BASEPRI, r3
 80112d0:	f3bf 8f6f 	isb	sy
 80112d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80112d8:	e7fe      	b.n	80112d8 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80112da:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80112de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80112e0:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80112e4:	b152      	cbz	r2, 80112fc <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112e6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80112e8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112ea:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80112ec:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112ee:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80112f0:	bf24      	itt	cs
 80112f2:	6821      	ldrcs	r1, [r4, #0]
 80112f4:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80112f6:	4630      	mov	r0, r6
 80112f8:	f002 f9db 	bl	80136b2 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80112fc:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80112fe:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011302:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8011304:	d006      	beq.n	8011314 <xQueueReceiveFromISR+0x98>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011306:	f108 0301 	add.w	r3, r8, #1
 801130a:	b25b      	sxtb	r3, r3
 801130c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8011310:	2001      	movs	r0, #1
 8011312:	e7c9      	b.n	80112a8 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011314:	6923      	ldr	r3, [r4, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d0fa      	beq.n	8011310 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801131a:	f104 0010 	add.w	r0, r4, #16
 801131e:	f000 fd3b 	bl	8011d98 <xTaskRemoveFromEventList>
 8011322:	2800      	cmp	r0, #0
 8011324:	d0f4      	beq.n	8011310 <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 8011326:	2f00      	cmp	r7, #0
 8011328:	d0f2      	beq.n	8011310 <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801132a:	2301      	movs	r3, #1
 801132c:	603b      	str	r3, [r7, #0]
 801132e:	e7ef      	b.n	8011310 <xQueueReceiveFromISR+0x94>

08011330 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011330:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011332:	2300      	movs	r3, #0
 8011334:	4c08      	ldr	r4, [pc, #32]	@ (8011358 <vQueueAddToRegistry+0x28>)
 8011336:	e002      	b.n	801133e <vQueueAddToRegistry+0xe>
 8011338:	3301      	adds	r3, #1
 801133a:	2b64      	cmp	r3, #100	@ 0x64
 801133c:	d008      	beq.n	8011350 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801133e:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8011342:	2a00      	cmp	r2, #0
 8011344:	d1f8      	bne.n	8011338 <vQueueAddToRegistry+0x8>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011346:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801134a:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801134e:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	20002f58 	.word	0x20002f58

0801135c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801135c:	b570      	push	{r4, r5, r6, lr}
 801135e:	4605      	mov	r5, r0
 8011360:	460e      	mov	r6, r1
 8011362:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011364:	f001 fa6e 	bl	8012844 <vPortEnterCritical>
 8011368:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 801136c:	2bff      	cmp	r3, #255	@ 0xff
 801136e:	bf04      	itt	eq
 8011370:	2300      	moveq	r3, #0
 8011372:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 8011376:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 801137a:	2bff      	cmp	r3, #255	@ 0xff
 801137c:	bf04      	itt	eq
 801137e:	2300      	moveq	r3, #0
 8011380:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 8011384:	f001 fa80 	bl	8012888 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011388:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801138a:	2b00      	cmp	r3, #0
 801138c:	d043      	beq.n	8011416 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 801138e:	f001 fa59 	bl	8012844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8011392:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8011396:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011398:	2c00      	cmp	r4, #0
 801139a:	dd14      	ble.n	80113c6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801139c:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 80113a0:	e003      	b.n	80113aa <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 80113a2:	1e63      	subs	r3, r4, #1
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113a8:	b16a      	cbz	r2, 80113c6 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113aa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113ac:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113ae:	b153      	cbz	r3, 80113c6 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113b0:	f000 fcf2 	bl	8011d98 <xTaskRemoveFromEventList>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d0f4      	beq.n	80113a2 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 80113b8:	f000 fd76 	bl	8011ea8 <vTaskMissedYield>
			--cTxLock;
 80113bc:	1e63      	subs	r3, r4, #1
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113c2:	2a00      	cmp	r2, #0
 80113c4:	d1f1      	bne.n	80113aa <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 80113c6:	23ff      	movs	r3, #255	@ 0xff
 80113c8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80113cc:	f001 fa5c 	bl	8012888 <vPortExitCritical>
	taskENTER_CRITICAL();
 80113d0:	f001 fa38 	bl	8012844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80113d4:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 80113d8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80113da:	2c00      	cmp	r4, #0
 80113dc:	dd14      	ble.n	8011408 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113de:	f105 0610 	add.w	r6, r5, #16
 80113e2:	e003      	b.n	80113ec <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 80113e4:	1e63      	subs	r3, r4, #1
 80113e6:	b2da      	uxtb	r2, r3
 80113e8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80113ea:	b16a      	cbz	r2, 8011408 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113ec:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113ee:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113f0:	b153      	cbz	r3, 8011408 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113f2:	f000 fcd1 	bl	8011d98 <xTaskRemoveFromEventList>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d0f4      	beq.n	80113e4 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 80113fa:	f000 fd55 	bl	8011ea8 <vTaskMissedYield>
				--cRxLock;
 80113fe:	1e63      	subs	r3, r4, #1
 8011400:	b2da      	uxtb	r2, r3
 8011402:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011404:	2a00      	cmp	r2, #0
 8011406:	d1f1      	bne.n	80113ec <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8011408:	23ff      	movs	r3, #255	@ 0xff
 801140a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 801140e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8011412:	f001 ba39 	b.w	8012888 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011416:	4622      	mov	r2, r4
 8011418:	4631      	mov	r1, r6
 801141a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 801141e:	f000 fc5f 	bl	8011ce0 <vTaskPlaceOnEventListRestricted>
 8011422:	e7b4      	b.n	801138e <vQueueWaitForMessageRestricted+0x32>

08011424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011424:	b580      	push	{r7, lr}
 8011426:	4c14      	ldr	r4, [pc, #80]	@ (8011478 <prvIdleTask+0x54>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8011428:	f04f 27e0 	mov.w	r7, #3758153728	@ 0xe000e000
 801142c:	f04f 5680 	mov.w	r6, #268435456	@ 0x10000000
 8011430:	e014      	b.n	801145c <prvIdleTask+0x38>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 8011432:	f001 fa07 	bl	8012844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011436:	6923      	ldr	r3, [r4, #16]
 8011438:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801143a:	1d28      	adds	r0, r5, #4
 801143c:	f7ff f902 	bl	8010644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011440:	69a3      	ldr	r3, [r4, #24]
 8011442:	3b01      	subs	r3, #1
 8011444:	61a3      	str	r3, [r4, #24]
				--uxDeletedTasksWaitingCleanUp;
 8011446:	6823      	ldr	r3, [r4, #0]
 8011448:	3b01      	subs	r3, #1
 801144a:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 801144c:	f001 fa1c 	bl	8012888 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011450:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8011452:	f001 f935 	bl	80126c0 <vPortFree>
			vPortFree( pxTCB );
 8011456:	4628      	mov	r0, r5
 8011458:	f001 f932 	bl	80126c0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801145c:	6823      	ldr	r3, [r4, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d1e7      	bne.n	8011432 <prvIdleTask+0xe>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011462:	69e3      	ldr	r3, [r4, #28]
 8011464:	2b01      	cmp	r3, #1
 8011466:	d9f9      	bls.n	801145c <prvIdleTask+0x38>
				taskYIELD();
 8011468:	f8c7 6d04 	str.w	r6, [r7, #3332]	@ 0xd04
 801146c:	f3bf 8f4f 	dsb	sy
 8011470:	f3bf 8f6f 	isb	sy
 8011474:	e7f2      	b.n	801145c <prvIdleTask+0x38>
 8011476:	bf00      	nop
 8011478:	20003278 	.word	0x20003278

0801147c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801147e:	4c1f      	ldr	r4, [pc, #124]	@ (80114fc <prvAddCurrentTaskToDelayedList+0x80>)
{
 8011480:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8011482:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011486:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 801148a:	3004      	adds	r0, #4
{
 801148c:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801148e:	f7ff f8d9 	bl	8010644 <uxListRemove>
 8011492:	b950      	cbnz	r0, 80114aa <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011494:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8011498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801149a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 801149e:	2201      	movs	r2, #1
 80114a0:	408a      	lsls	r2, r1
 80114a2:	ea23 0302 	bic.w	r3, r3, r2
 80114a6:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80114aa:	1c73      	adds	r3, r6, #1
 80114ac:	d01b      	beq.n	80114e6 <prvAddCurrentTaskToDelayedList+0x6a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80114ae:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80114b2:	19ad      	adds	r5, r5, r6
 80114b4:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80114b6:	d308      	bcc.n	80114ca <prvAddCurrentTaskToDelayedList+0x4e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114b8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	@ 0xc8
 80114bc:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80114c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114c4:	3104      	adds	r1, #4
 80114c6:	f7ff b8a5 	b.w	8010614 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114ca:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 80114ce:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80114d2:	3104      	adds	r1, #4
 80114d4:	f7ff f89e 	bl	8010614 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80114d8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 80114dc:	42ab      	cmp	r3, r5
					xNextTaskUnblockTime = xTimeToWake;
 80114de:	bf88      	it	hi
 80114e0:	f8c4 50d0 	strhi.w	r5, [r4, #208]	@ 0xd0
}
 80114e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80114e6:	2f00      	cmp	r7, #0
 80114e8:	d0e1      	beq.n	80114ae <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114ea:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80114ee:	4804      	ldr	r0, [pc, #16]	@ (8011500 <prvAddCurrentTaskToDelayedList+0x84>)
}
 80114f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114f4:	3104      	adds	r1, #4
 80114f6:	f7ff b87f 	b.w	80105f8 <vListInsertEnd>
 80114fa:	bf00      	nop
 80114fc:	20003278 	.word	0x20003278
 8011500:	2000332c 	.word	0x2000332c

08011504 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8011504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011508:	4c46      	ldr	r4, [pc, #280]	@ (8011624 <xTaskIncrementTick.part.0+0x120>)
 801150a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	@ 0xa8
 801150e:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8011510:	f8c4 70a8 	str.w	r7, [r4, #168]	@ 0xa8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011514:	bb2f      	cbnz	r7, 8011562 <xTaskIncrementTick.part.0+0x5e>
			taskSWITCH_DELAYED_LISTS();
 8011516:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	b143      	cbz	r3, 8011530 <xTaskIncrementTick.part.0+0x2c>
 801151e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011522:	f383 8811 	msr	BASEPRI, r3
 8011526:	f3bf 8f6f 	isb	sy
 801152a:	f3bf 8f4f 	dsb	sy
 801152e:	e7fe      	b.n	801152e <xTaskIncrementTick.part.0+0x2a>
 8011530:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8011534:	f8d4 20c8 	ldr.w	r2, [r4, #200]	@ 0xc8
 8011538:	f8c4 20cc 	str.w	r2, [r4, #204]	@ 0xcc
 801153c:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8011540:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8011544:	3301      	adds	r3, #1
 8011546:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801154a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d058      	beq.n	8011606 <xTaskIncrementTick.part.0+0x102>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011554:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8011558:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011562:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 8011566:	429f      	cmp	r7, r3
 8011568:	d339      	bcc.n	80115de <xTaskIncrementTick.part.0+0xda>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801156a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801156e:	681e      	ldr	r6, [r3, #0]
 8011570:	2e00      	cmp	r6, #0
 8011572:	d051      	beq.n	8011618 <xTaskIncrementTick.part.0+0x114>
					prvAddTaskToReadyList( pxTCB );
 8011574:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8011628 <xTaskIncrementTick.part.0+0x124>
BaseType_t xSwitchRequired = pdFALSE;
 8011578:	2600      	movs	r6, #0
					prvAddTaskToReadyList( pxTCB );
 801157a:	f04f 0801 	mov.w	r8, #1
 801157e:	e021      	b.n	80115c4 <xTaskIncrementTick.part.0+0xc0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011580:	f7ff f860 	bl	8010644 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011584:	6aab      	ldr	r3, [r5, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011586:	f105 0018 	add.w	r0, r5, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801158a:	b10b      	cbz	r3, 8011590 <xTaskIncrementTick.part.0+0x8c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801158c:	f7ff f85a 	bl	8010644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011590:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011592:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8011596:	fa08 f300 	lsl.w	r3, r8, r0
 801159a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801159e:	4313      	orrs	r3, r2
 80115a0:	4651      	mov	r1, sl
 80115a2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80115a6:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80115aa:	f7ff f825 	bl	80105f8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115ae:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115b2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115b6:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80115b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115ba:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 80115bc:	4291      	cmp	r1, r2
 80115be:	bf28      	it	cs
 80115c0:	2601      	movcs	r6, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115c2:	b34b      	cbz	r3, 8011618 <xTaskIncrementTick.part.0+0x114>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115c4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80115cc:	686b      	ldr	r3, [r5, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115ce:	f105 0a04 	add.w	sl, r5, #4
					if( xConstTickCount < xItemValue )
 80115d2:	429f      	cmp	r7, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115d4:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80115d6:	d2d3      	bcs.n	8011580 <xTaskIncrementTick.part.0+0x7c>
						xNextTaskUnblockTime = xItemValue;
 80115d8:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80115dc:	e000      	b.n	80115e0 <xTaskIncrementTick.part.0+0xdc>
BaseType_t xSwitchRequired = pdFALSE;
 80115de:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80115e0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80115e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80115ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115ee:	69da      	ldr	r2, [r3, #28]
			if( xYieldPending != pdFALSE )
 80115f0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
				xSwitchRequired = pdTRUE;
 80115f4:	2a02      	cmp	r2, #2
 80115f6:	bf28      	it	cs
 80115f8:	2601      	movcs	r6, #1
				xSwitchRequired = pdTRUE;
 80115fa:	2b00      	cmp	r3, #0
}
 80115fc:	bf0c      	ite	eq
 80115fe:	4630      	moveq	r0, r6
 8011600:	2001      	movne	r0, #1
 8011602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8011606:	f04f 33ff 	mov.w	r3, #4294967295
 801160a:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
		if( xConstTickCount >= xNextTaskUnblockTime )
 801160e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 8011612:	429f      	cmp	r7, r3
 8011614:	d3e3      	bcc.n	80115de <xTaskIncrementTick.part.0+0xda>
 8011616:	e7a8      	b.n	801156a <xTaskIncrementTick.part.0+0x66>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011618:	f04f 33ff 	mov.w	r3, #4294967295
 801161c:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
					break;
 8011620:	e7de      	b.n	80115e0 <xTaskIncrementTick.part.0+0xdc>
 8011622:	bf00      	nop
 8011624:	20003278 	.word	0x20003278
 8011628:	20003294 	.word	0x20003294

0801162c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 801162c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		--uxSchedulerSuspended;
 8011630:	4c43      	ldr	r4, [pc, #268]	@ (8011740 <xTaskResumeAll.part.0+0x114>)
	taskENTER_CRITICAL();
 8011632:	f001 f907 	bl	8012844 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8011636:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 801163a:	3b01      	subs	r3, #1
 801163c:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011640:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 8011644:	2b00      	cmp	r3, #0
 8011646:	d154      	bne.n	80116f2 <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011648:	69a3      	ldr	r3, [r4, #24]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d051      	beq.n	80116f2 <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801164e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8011652:	b38b      	cbz	r3, 80116b8 <xTaskResumeAll.part.0+0x8c>
 8011654:	f104 081c 	add.w	r8, r4, #28
					prvAddTaskToReadyList( pxTCB );
 8011658:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801165a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
 801165e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011660:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011662:	f105 0018 	add.w	r0, r5, #24
 8011666:	f7fe ffed 	bl	8010644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801166a:	4630      	mov	r0, r6
 801166c:	f7fe ffea 	bl	8010644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011670:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011672:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8011676:	fa07 f300 	lsl.w	r3, r7, r0
 801167a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801167e:	4313      	orrs	r3, r2
 8011680:	4631      	mov	r1, r6
 8011682:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8011686:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 801168a:	f7fe ffb5 	bl	80105f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801168e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8011692:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8011694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011696:	429a      	cmp	r2, r3
 8011698:	d331      	bcc.n	80116fe <xTaskResumeAll.part.0+0xd2>
						xYieldPending = pdTRUE;
 801169a:	f8c4 70d8 	str.w	r7, [r4, #216]	@ 0xd8
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801169e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1d9      	bne.n	801165a <xTaskResumeAll.part.0+0x2e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116a6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d13f      	bne.n	8011730 <xTaskResumeAll.part.0+0x104>
		xNextTaskUnblockTime = portMAX_DELAY;
 80116b0:	f04f 33ff 	mov.w	r3, #4294967295
 80116b4:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80116b8:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
					if( xPendedCounts > ( TickType_t ) 0U )
 80116bc:	b1b5      	cbz	r5, 80116ec <xTaskResumeAll.part.0+0xc0>
								xYieldPending = pdTRUE;
 80116be:	2601      	movs	r6, #1
 80116c0:	e006      	b.n	80116d0 <xTaskResumeAll.part.0+0xa4>
 80116c2:	f7ff ff1f 	bl	8011504 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 80116c6:	b108      	cbz	r0, 80116cc <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 80116c8:	f8c4 60d8 	str.w	r6, [r4, #216]	@ 0xd8
						} while( xPendedCounts > ( TickType_t ) 0U );
 80116cc:	3d01      	subs	r5, #1
 80116ce:	d00b      	beq.n	80116e8 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116d0:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d0f4      	beq.n	80116c2 <xTaskResumeAll.part.0+0x96>
		++xPendedTicks;
 80116d8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
						} while( xPendedCounts > ( TickType_t ) 0U );
 80116dc:	3d01      	subs	r5, #1
		++xPendedTicks;
 80116de:	f103 0301 	add.w	r3, r3, #1
 80116e2:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
						} while( xPendedCounts > ( TickType_t ) 0U );
 80116e6:	d1f3      	bne.n	80116d0 <xTaskResumeAll.part.0+0xa4>
						xPendedTicks = 0;
 80116e8:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
				if( xYieldPending != pdFALSE )
 80116ec:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80116f0:	b973      	cbnz	r3, 8011710 <xTaskResumeAll.part.0+0xe4>
BaseType_t xAlreadyYielded = pdFALSE;
 80116f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80116f4:	f001 f8c8 	bl	8012888 <vPortExitCritical>
}
 80116f8:	4620      	mov	r0, r4
 80116fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8011702:	2b00      	cmp	r3, #0
 8011704:	d1a9      	bne.n	801165a <xTaskResumeAll.part.0+0x2e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011706:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	b983      	cbnz	r3, 8011730 <xTaskResumeAll.part.0+0x104>
 801170e:	e7cf      	b.n	80116b0 <xTaskResumeAll.part.0+0x84>
					taskYIELD_IF_USING_PREEMPTION();
 8011710:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011718:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801171c:	f3bf 8f4f 	dsb	sy
 8011720:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011724:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8011726:	f001 f8af 	bl	8012888 <vPortExitCritical>
}
 801172a:	4620      	mov	r0, r4
 801172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011730:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8011734:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
}
 801173e:	e7bb      	b.n	80116b8 <xTaskResumeAll.part.0+0x8c>
 8011740:	20003278 	.word	0x20003278

08011744 <xTaskCreate>:
	{
 8011744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011748:	0096      	lsls	r6, r2, #2
	{
 801174a:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801174c:	4630      	mov	r0, r6
	{
 801174e:	460d      	mov	r5, r1
 8011750:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011752:	f000 ff09 	bl	8012568 <pvPortMalloc>
			if( pxStack != NULL )
 8011756:	2800      	cmp	r0, #0
 8011758:	f000 80b7 	beq.w	80118ca <xTaskCreate+0x186>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801175c:	4607      	mov	r7, r0
 801175e:	205c      	movs	r0, #92	@ 0x5c
 8011760:	f000 ff02 	bl	8012568 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011764:	4604      	mov	r4, r0
 8011766:	2800      	cmp	r0, #0
 8011768:	f000 80ac 	beq.w	80118c4 <xTaskCreate+0x180>
					pxNewTCB->pxStack = pxStack;
 801176c:	6307      	str	r7, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801176e:	4632      	mov	r2, r6
 8011770:	4638      	mov	r0, r7
 8011772:	21a5      	movs	r1, #165	@ 0xa5
 8011774:	f001 ff1d 	bl	80135b2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011778:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 801177a:	3e04      	subs	r6, #4
 801177c:	4437      	add	r7, r6
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801177e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8011782:	2d00      	cmp	r5, #0
 8011784:	f000 80b6 	beq.w	80118f4 <xTaskCreate+0x1b0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011788:	782b      	ldrb	r3, [r5, #0]
 801178a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 801178e:	2b00      	cmp	r3, #0
 8011790:	d036      	beq.n	8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011792:	786b      	ldrb	r3, [r5, #1]
 8011794:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8011798:	b393      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801179a:	78ab      	ldrb	r3, [r5, #2]
 801179c:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80117a0:	b373      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117a2:	78eb      	ldrb	r3, [r5, #3]
 80117a4:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80117a8:	b353      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117aa:	792b      	ldrb	r3, [r5, #4]
 80117ac:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80117b0:	b333      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117b2:	796b      	ldrb	r3, [r5, #5]
 80117b4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80117b8:	b313      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117ba:	79ab      	ldrb	r3, [r5, #6]
 80117bc:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80117c0:	b1f3      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117c2:	79eb      	ldrb	r3, [r5, #7]
 80117c4:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80117c8:	b1d3      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117ca:	7a2b      	ldrb	r3, [r5, #8]
 80117cc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80117d0:	b1b3      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117d2:	7a6b      	ldrb	r3, [r5, #9]
 80117d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80117d8:	b193      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117da:	7aab      	ldrb	r3, [r5, #10]
 80117dc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80117e0:	b173      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117e2:	7aeb      	ldrb	r3, [r5, #11]
 80117e4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80117e8:	b153      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117ea:	7b2b      	ldrb	r3, [r5, #12]
 80117ec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 80117f0:	b133      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117f2:	7b6b      	ldrb	r3, [r5, #13]
 80117f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80117f8:	b113      	cbz	r3, 8011800 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117fa:	7bab      	ldrb	r3, [r5, #14]
 80117fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011800:	2300      	movs	r3, #0
 8011802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011806:	9d08      	ldr	r5, [sp, #32]
 8011808:	2d06      	cmp	r5, #6
 801180a:	bf28      	it	cs
 801180c:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 801180e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011812:	1d26      	adds	r6, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8011814:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8011816:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011818:	4630      	mov	r0, r6
		pxNewTCB->uxMutexesHeld = 0;
 801181a:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801181e:	f7fe fee7 	bl	80105f0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011822:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011826:	f104 0018 	add.w	r0, r4, #24
 801182a:	f7fe fee1 	bl	80105f0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801182e:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011832:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011834:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011838:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801183a:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801183c:	464a      	mov	r2, r9
 801183e:	4641      	mov	r1, r8
 8011840:	4638      	mov	r0, r7
 8011842:	f000 ffd7 	bl	80127f4 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8011846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011848:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801184a:	b103      	cbz	r3, 801184e <xTaskCreate+0x10a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801184c:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 801184e:	4d3f      	ldr	r5, [pc, #252]	@ (801194c <xTaskCreate+0x208>)
	taskENTER_CRITICAL();
 8011850:	f000 fff8 	bl	8012844 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8011854:	69ab      	ldr	r3, [r5, #24]
 8011856:	3301      	adds	r3, #1
 8011858:	61ab      	str	r3, [r5, #24]
		if( pxCurrentTCB == NULL )
 801185a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 801185e:	2b00      	cmp	r3, #0
 8011860:	d03f      	beq.n	80118e2 <xTaskCreate+0x19e>
			if( xSchedulerRunning == pdFALSE )
 8011862:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011866:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8011868:	b39b      	cbz	r3, 80118d2 <xTaskCreate+0x18e>
 801186a:	f105 071c 	add.w	r7, r5, #28
		uxTaskNumber++;
 801186e:	f8d5 3124 	ldr.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 8011872:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
		uxTaskNumber++;
 8011876:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011878:	6463      	str	r3, [r4, #68]	@ 0x44
		uxTaskNumber++;
 801187a:	f8c5 3124 	str.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 801187e:	2301      	movs	r3, #1
 8011880:	4083      	lsls	r3, r0
 8011882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011886:	4313      	orrs	r3, r2
 8011888:	4631      	mov	r1, r6
 801188a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801188e:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8011892:	f7fe feb1 	bl	80105f8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8011896:	f000 fff7 	bl	8012888 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801189a:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
 801189e:	b17b      	cbz	r3, 80118c0 <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80118a0:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 80118a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80118a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d209      	bcs.n	80118c0 <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 80118ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80118b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80118b8:	f3bf 8f4f 	dsb	sy
 80118bc:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80118c0:	2001      	movs	r0, #1
		return xReturn;
 80118c2:	e004      	b.n	80118ce <xTaskCreate+0x18a>
					vPortFree( pxStack );
 80118c4:	4638      	mov	r0, r7
 80118c6:	f000 fefb 	bl	80126c0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80118ca:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80118ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118d2:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80118d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118d8:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 80118da:	bf98      	it	ls
 80118dc:	f8c5 40ac 	strls.w	r4, [r5, #172]	@ 0xac
 80118e0:	e7c3      	b.n	801186a <xTaskCreate+0x126>
			pxCurrentTCB = pxNewTCB;
 80118e2:	f8c5 40ac 	str.w	r4, [r5, #172]	@ 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118e6:	69ab      	ldr	r3, [r5, #24]
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	d006      	beq.n	80118fa <xTaskCreate+0x1b6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118ec:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80118ee:	f105 071c 	add.w	r7, r5, #28
 80118f2:	e7bc      	b.n	801186e <xTaskCreate+0x12a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80118f4:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80118f8:	e785      	b.n	8011806 <xTaskCreate+0xc2>
 80118fa:	f105 071c 	add.w	r7, r5, #28
 80118fe:	46b8      	mov	r8, r7
 8011900:	f105 09a8 	add.w	r9, r5, #168	@ 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011904:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011906:	f108 0814 	add.w	r8, r8, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801190a:	f7fe fe65 	bl	80105d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801190e:	45c8      	cmp	r8, r9
 8011910:	d1f8      	bne.n	8011904 <xTaskCreate+0x1c0>
	vListInitialise( &xDelayedTaskList1 );
 8011912:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8011950 <xTaskCreate+0x20c>
 8011916:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 8011918:	f108 0914 	add.w	r9, r8, #20
	vListInitialise( &xDelayedTaskList1 );
 801191c:	f7fe fe5c 	bl	80105d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011920:	4648      	mov	r0, r9
 8011922:	f7fe fe59 	bl	80105d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011926:	f1a8 0018 	sub.w	r0, r8, #24
 801192a:	f7fe fe55 	bl	80105d8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801192e:	f1a8 00f4 	sub.w	r0, r8, #244	@ 0xf4
 8011932:	f7fe fe51 	bl	80105d8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8011936:	f1a8 0044 	sub.w	r0, r8, #68	@ 0x44
 801193a:	f7fe fe4d 	bl	80105d8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801193e:	f8c5 80cc 	str.w	r8, [r5, #204]	@ 0xcc
		prvAddTaskToReadyList( pxNewTCB );
 8011942:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011944:	f8c5 90c8 	str.w	r9, [r5, #200]	@ 0xc8
}
 8011948:	e791      	b.n	801186e <xTaskCreate+0x12a>
 801194a:	bf00      	nop
 801194c:	20003278 	.word	0x20003278
 8011950:	20003370 	.word	0x20003370

08011954 <vTaskDelay>:
	{
 8011954:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011956:	b950      	cbnz	r0, 801196e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8011958:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801195c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011960:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011964:	f3bf 8f4f 	dsb	sy
 8011968:	f3bf 8f6f 	isb	sy
	}
 801196c:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 801196e:	4c12      	ldr	r4, [pc, #72]	@ (80119b8 <vTaskDelay+0x64>)
 8011970:	f8d4 10dc 	ldr.w	r1, [r4, #220]	@ 0xdc
 8011974:	b141      	cbz	r1, 8011988 <vTaskDelay+0x34>
 8011976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801197a:	f383 8811 	msr	BASEPRI, r3
 801197e:	f3bf 8f6f 	isb	sy
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	e7fe      	b.n	8011986 <vTaskDelay+0x32>
	++uxSchedulerSuspended;
 8011988:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 801198c:	3301      	adds	r3, #1
 801198e:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011992:	f7ff fd73 	bl	801147c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8011996:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 801199a:	b943      	cbnz	r3, 80119ae <vTaskDelay+0x5a>
 801199c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119a0:	f383 8811 	msr	BASEPRI, r3
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	f3bf 8f4f 	dsb	sy
 80119ac:	e7fe      	b.n	80119ac <vTaskDelay+0x58>
 80119ae:	f7ff fe3d 	bl	801162c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d0d0      	beq.n	8011958 <vTaskDelay+0x4>
	}
 80119b6:	bd10      	pop	{r4, pc}
 80119b8:	20003278 	.word	0x20003278

080119bc <vTaskStartScheduler>:
{
 80119bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80119c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80119c4:	f000 fdd0 	bl	8012568 <pvPortMalloc>
			if( pxStack != NULL )
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d078      	beq.n	8011abe <vTaskStartScheduler+0x102>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80119cc:	4605      	mov	r5, r0
 80119ce:	205c      	movs	r0, #92	@ 0x5c
 80119d0:	f000 fdca 	bl	8012568 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80119d4:	4604      	mov	r4, r0
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d06e      	beq.n	8011ab8 <vTaskStartScheduler+0xfc>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80119da:	21a5      	movs	r1, #165	@ 0xa5
					pxNewTCB->pxStack = pxStack;
 80119dc:	6305      	str	r5, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80119de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119e2:	4628      	mov	r0, r5
 80119e4:	f001 fde5 	bl	80135b2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80119e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80119ea:	4a60      	ldr	r2, [pc, #384]	@ (8011b6c <vTaskStartScheduler+0x1b0>)
 80119ec:	6362      	str	r2, [r4, #52]	@ 0x34
 80119ee:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119f0:	1d27      	adds	r7, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80119f2:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
		pxNewTCB->uxMutexesHeld = 0;
 80119f6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80119fa:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80119fe:	f884 5043 	strb.w	r5, [r4, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 8011a02:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011a04:	4638      	mov	r0, r7
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011a06:	f023 0607 	bic.w	r6, r3, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011a0a:	f7fe fdf1 	bl	80105f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011a0e:	f104 0018 	add.w	r0, r4, #24
 8011a12:	f7fe fded 	bl	80105f0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a16:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 8011a18:	6565      	str	r5, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a1a:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a1c:	462a      	mov	r2, r5
 8011a1e:	4954      	ldr	r1, [pc, #336]	@ (8011b70 <vTaskStartScheduler+0x1b4>)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a20:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011a24:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011a26:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f000 fee3 	bl	80127f4 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a2e:	4d51      	ldr	r5, [pc, #324]	@ (8011b74 <vTaskStartScheduler+0x1b8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a30:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a32:	f8c5 4128 	str.w	r4, [r5, #296]	@ 0x128
	taskENTER_CRITICAL();
 8011a36:	f000 ff05 	bl	8012844 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8011a3a:	69ab      	ldr	r3, [r5, #24]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	61ab      	str	r3, [r5, #24]
		if( pxCurrentTCB == NULL )
 8011a40:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d04b      	beq.n	8011ae0 <vTaskStartScheduler+0x124>
			if( xSchedulerRunning == pdFALSE )
 8011a48:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a4c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d03e      	beq.n	8011ad0 <vTaskStartScheduler+0x114>
 8011a52:	f105 061c 	add.w	r6, r5, #28
		uxTaskNumber++;
 8011a56:	f8d5 3124 	ldr.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 8011a5a:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
		uxTaskNumber++;
 8011a5e:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011a60:	6463      	str	r3, [r4, #68]	@ 0x44
		uxTaskNumber++;
 8011a62:	f8c5 3124 	str.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 8011a66:	2301      	movs	r3, #1
 8011a68:	4083      	lsls	r3, r0
 8011a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011a6e:	4313      	orrs	r3, r2
 8011a70:	4639      	mov	r1, r7
 8011a72:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8011a76:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8011a7a:	f7fe fdbd 	bl	80105f8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8011a7e:	f000 ff03 	bl	8012888 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8011a82:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
 8011a86:	b17b      	cbz	r3, 8011aa8 <vTaskStartScheduler+0xec>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011a88:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8011a8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011a8e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d209      	bcs.n	8011aa8 <vTaskStartScheduler+0xec>
			taskYIELD_IF_USING_PREEMPTION();
 8011a94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011aa0:	f3bf 8f4f 	dsb	sy
 8011aa4:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
 8011aa8:	f000 fc8c 	bl	80123c4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8011aac:	2801      	cmp	r0, #1
 8011aae:	d020      	beq.n	8011af2 <vTaskStartScheduler+0x136>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011ab0:	3001      	adds	r0, #1
 8011ab2:	d004      	beq.n	8011abe <vTaskStartScheduler+0x102>
}
 8011ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8011ab8:	4628      	mov	r0, r5
 8011aba:	f000 fe01 	bl	80126c0 <vPortFree>
 8011abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ac2:	f383 8811 	msr	BASEPRI, r3
 8011ac6:	f3bf 8f6f 	isb	sy
 8011aca:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011ace:	e7fe      	b.n	8011ace <vTaskStartScheduler+0x112>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011ad0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ad6:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8011ad8:	bf98      	it	ls
 8011ada:	f8c5 40ac 	strls.w	r4, [r5, #172]	@ 0xac
 8011ade:	e7b8      	b.n	8011a52 <vTaskStartScheduler+0x96>
			pxCurrentTCB = pxNewTCB;
 8011ae0:	f8c5 40ac 	str.w	r4, [r5, #172]	@ 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011ae4:	69ab      	ldr	r3, [r5, #24]
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d018      	beq.n	8011b1c <vTaskStartScheduler+0x160>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011aea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011aec:	f105 061c 	add.w	r6, r5, #28
 8011af0:	e7b1      	b.n	8011a56 <vTaskStartScheduler+0x9a>
 8011af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011af6:	f383 8811 	msr	BASEPRI, r3
 8011afa:	f3bf 8f6f 	isb	sy
 8011afe:	f3bf 8f4f 	dsb	sy
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011b02:	2300      	movs	r3, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 8011b04:	f04f 32ff 	mov.w	r2, #4294967295
 8011b08:	f8c5 20d0 	str.w	r2, [r5, #208]	@ 0xd0
		xSchedulerRunning = pdTRUE;
 8011b0c:	f8c5 0120 	str.w	r0, [r5, #288]	@ 0x120
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011b10:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
}
 8011b14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
 8011b18:	f000 bf26 	b.w	8012968 <xPortStartScheduler>
 8011b1c:	f105 061c 	add.w	r6, r5, #28
 8011b20:	46b0      	mov	r8, r6
 8011b22:	f105 09a8 	add.w	r9, r5, #168	@ 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011b26:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b28:	f108 0814 	add.w	r8, r8, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011b2c:	f7fe fd54 	bl	80105d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b30:	45c8      	cmp	r8, r9
 8011b32:	d1f8      	bne.n	8011b26 <vTaskStartScheduler+0x16a>
	vListInitialise( &xDelayedTaskList1 );
 8011b34:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8011b78 <vTaskStartScheduler+0x1bc>
 8011b38:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 8011b3a:	f108 0914 	add.w	r9, r8, #20
	vListInitialise( &xDelayedTaskList1 );
 8011b3e:	f7fe fd4b 	bl	80105d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011b42:	4648      	mov	r0, r9
 8011b44:	f7fe fd48 	bl	80105d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011b48:	f1a8 0018 	sub.w	r0, r8, #24
 8011b4c:	f7fe fd44 	bl	80105d8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8011b50:	f1a8 00f4 	sub.w	r0, r8, #244	@ 0xf4
 8011b54:	f7fe fd40 	bl	80105d8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8011b58:	f1a8 0044 	sub.w	r0, r8, #68	@ 0x44
 8011b5c:	f7fe fd3c 	bl	80105d8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8011b60:	f8c5 80cc 	str.w	r8, [r5, #204]	@ 0xcc
		prvAddTaskToReadyList( pxNewTCB );
 8011b64:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011b66:	f8c5 90c8 	str.w	r9, [r5, #200]	@ 0xc8
}
 8011b6a:	e774      	b.n	8011a56 <vTaskStartScheduler+0x9a>
 8011b6c:	454c4449 	.word	0x454c4449
 8011b70:	08011425 	.word	0x08011425
 8011b74:	20003278 	.word	0x20003278
 8011b78:	20003370 	.word	0x20003370

08011b7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011b7c:	4a03      	ldr	r2, [pc, #12]	@ (8011b8c <vTaskSuspendAll+0x10>)
 8011b7e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8011b82:	3301      	adds	r3, #1
 8011b84:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
}
 8011b88:	4770      	bx	lr
 8011b8a:	bf00      	nop
 8011b8c:	20003278 	.word	0x20003278

08011b90 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8011b90:	4b07      	ldr	r3, [pc, #28]	@ (8011bb0 <xTaskResumeAll+0x20>)
 8011b92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8011b96:	b943      	cbnz	r3, 8011baa <xTaskResumeAll+0x1a>
 8011b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b9c:	f383 8811 	msr	BASEPRI, r3
 8011ba0:	f3bf 8f6f 	isb	sy
 8011ba4:	f3bf 8f4f 	dsb	sy
 8011ba8:	e7fe      	b.n	8011ba8 <xTaskResumeAll+0x18>
 8011baa:	f7ff bd3f 	b.w	801162c <xTaskResumeAll.part.0>
 8011bae:	bf00      	nop
 8011bb0:	20003278 	.word	0x20003278

08011bb4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011bb4:	4b01      	ldr	r3, [pc, #4]	@ (8011bbc <xTaskGetTickCount+0x8>)
 8011bb6:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
}
 8011bba:	4770      	bx	lr
 8011bbc:	20003278 	.word	0x20003278

08011bc0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bc0:	4b06      	ldr	r3, [pc, #24]	@ (8011bdc <xTaskIncrementTick+0x1c>)
 8011bc2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8011bc6:	b90a      	cbnz	r2, 8011bcc <xTaskIncrementTick+0xc>
 8011bc8:	f7ff bc9c 	b.w	8011504 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8011bcc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8011bd0:	3201      	adds	r2, #1
}
 8011bd2:	2000      	movs	r0, #0
		++xPendedTicks;
 8011bd4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	20003278 	.word	0x20003278

08011be0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011be0:	4a16      	ldr	r2, [pc, #88]	@ (8011c3c <vTaskSwitchContext+0x5c>)
 8011be2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8011be6:	b11b      	cbz	r3, 8011bf0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8011be8:	2301      	movs	r3, #1
 8011bea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011bee:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8011bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bf4:	f8d2 30b0 	ldr.w	r3, [r2, #176]	@ 0xb0
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011bf8:	fab3 f383 	clz	r3, r3
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	f1c3 031f 	rsb	r3, r3, #31
 8011c02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011c06:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	69c8      	ldr	r0, [r1, #28]
 8011c0e:	b940      	cbnz	r0, 8011c22 <vTaskSwitchContext+0x42>
	__asm volatile
 8011c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c14:	f383 8811 	msr	BASEPRI, r3
 8011c18:	f3bf 8f6f 	isb	sy
 8011c1c:	f3bf 8f4f 	dsb	sy
 8011c20:	e7fe      	b.n	8011c20 <vTaskSwitchContext+0x40>
 8011c22:	6a08      	ldr	r0, [r1, #32]
 8011c24:	4413      	add	r3, r2
 8011c26:	6840      	ldr	r0, [r0, #4]
 8011c28:	6208      	str	r0, [r1, #32]
 8011c2a:	3324      	adds	r3, #36	@ 0x24
 8011c2c:	4298      	cmp	r0, r3
 8011c2e:	bf04      	itt	eq
 8011c30:	6840      	ldreq	r0, [r0, #4]
 8011c32:	6208      	streq	r0, [r1, #32]
 8011c34:	68c3      	ldr	r3, [r0, #12]
 8011c36:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
}
 8011c3a:	4770      	bx	lr
 8011c3c:	20003278 	.word	0x20003278

08011c40 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8011c40:	b350      	cbz	r0, 8011c98 <vTaskPlaceOnEventList+0x58>
{
 8011c42:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c44:	4d24      	ldr	r5, [pc, #144]	@ (8011cd8 <vTaskPlaceOnEventList+0x98>)
 8011c46:	460c      	mov	r4, r1
 8011c48:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011c4c:	3118      	adds	r1, #24
 8011c4e:	f7fe fce1 	bl	8010614 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8011c52:	f8d5 60a8 	ldr.w	r6, [r5, #168]	@ 0xa8
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c56:	f8d5 00ac 	ldr.w	r0, [r5, #172]	@ 0xac
 8011c5a:	3004      	adds	r0, #4
 8011c5c:	f7fe fcf2 	bl	8010644 <uxListRemove>
 8011c60:	b950      	cbnz	r0, 8011c78 <vTaskPlaceOnEventList+0x38>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011c62:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8011c66:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8011c6a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8011c6c:	2201      	movs	r2, #1
 8011c6e:	408a      	lsls	r2, r1
 8011c70:	ea23 0302 	bic.w	r3, r3, r2
 8011c74:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c78:	1c63      	adds	r3, r4, #1
 8011c7a:	d016      	beq.n	8011caa <vTaskPlaceOnEventList+0x6a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c7c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011c80:	19a4      	adds	r4, r4, r6
 8011c82:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c84:	d319      	bcc.n	8011cba <vTaskPlaceOnEventList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c86:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 8011c8a:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
}
 8011c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c92:	3104      	adds	r1, #4
 8011c94:	f7fe bcbe 	b.w	8010614 <vListInsert>
 8011c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c9c:	f383 8811 	msr	BASEPRI, r3
 8011ca0:	f3bf 8f6f 	isb	sy
 8011ca4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8011ca8:	e7fe      	b.n	8011ca8 <vTaskPlaceOnEventList+0x68>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011caa:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011cae:	480b      	ldr	r0, [pc, #44]	@ (8011cdc <vTaskPlaceOnEventList+0x9c>)
}
 8011cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cb4:	3104      	adds	r1, #4
 8011cb6:	f7fe bc9f 	b.w	80105f8 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cba:	f8d5 00cc 	ldr.w	r0, [r5, #204]	@ 0xcc
 8011cbe:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011cc2:	3104      	adds	r1, #4
 8011cc4:	f7fe fca6 	bl	8010614 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011cc8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8011ccc:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
 8011cce:	bf38      	it	cc
 8011cd0:	f8c5 40d0 	strcc.w	r4, [r5, #208]	@ 0xd0
}
 8011cd4:	bd70      	pop	{r4, r5, r6, pc}
 8011cd6:	bf00      	nop
 8011cd8:	20003278 	.word	0x20003278
 8011cdc:	2000332c 	.word	0x2000332c

08011ce0 <vTaskPlaceOnEventListRestricted>:
	{
 8011ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8011ce2:	b398      	cbz	r0, 8011d4c <vTaskPlaceOnEventListRestricted+0x6c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ce4:	4d2a      	ldr	r5, [pc, #168]	@ (8011d90 <vTaskPlaceOnEventListRestricted+0xb0>)
 8011ce6:	460c      	mov	r4, r1
 8011ce8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011cec:	3118      	adds	r1, #24
 8011cee:	4616      	mov	r6, r2
 8011cf0:	f7fe fc82 	bl	80105f8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8011cf4:	f8d5 70a8 	ldr.w	r7, [r5, #168]	@ 0xa8
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cf8:	f8d5 00ac 	ldr.w	r0, [r5, #172]	@ 0xac
 8011cfc:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 8011cfe:	b306      	cbz	r6, 8011d42 <vTaskPlaceOnEventListRestricted+0x62>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d00:	f7fe fca0 	bl	8010644 <uxListRemove>
 8011d04:	2800      	cmp	r0, #0
 8011d06:	d13a      	bne.n	8011d7e <vTaskPlaceOnEventListRestricted+0x9e>
			xTicksToWait = portMAX_DELAY;
 8011d08:	f04f 34ff 	mov.w	r4, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011d0c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011d10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011d12:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8011d16:	2201      	movs	r2, #1
 8011d18:	408a      	lsls	r2, r1
 8011d1a:	ea23 0302 	bic.w	r3, r3, r2
 8011d1e:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d22:	1c63      	adds	r3, r4, #1
 8011d24:	d029      	beq.n	8011d7a <vTaskPlaceOnEventListRestricted+0x9a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011d26:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011d2a:	19e4      	adds	r4, r4, r7
 8011d2c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011d2e:	d316      	bcc.n	8011d5e <vTaskPlaceOnEventListRestricted+0x7e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d30:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 8011d34:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
	}
 8011d38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d3c:	3104      	adds	r1, #4
 8011d3e:	f7fe bc69 	b.w	8010614 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d42:	f7fe fc7f 	bl	8010644 <uxListRemove>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d1ed      	bne.n	8011d26 <vTaskPlaceOnEventListRestricted+0x46>
 8011d4a:	e7df      	b.n	8011d0c <vTaskPlaceOnEventListRestricted+0x2c>
 8011d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8011d5c:	e7fe      	b.n	8011d5c <vTaskPlaceOnEventListRestricted+0x7c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d5e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	@ 0xcc
 8011d62:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011d66:	3104      	adds	r1, #4
 8011d68:	f7fe fc54 	bl	8010614 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011d6c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8011d70:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
 8011d72:	bf38      	it	cc
 8011d74:	f8c5 40d0 	strcc.w	r4, [r5, #208]	@ 0xd0
	}
 8011d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d7a:	2e00      	cmp	r6, #0
 8011d7c:	d0d3      	beq.n	8011d26 <vTaskPlaceOnEventListRestricted+0x46>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d7e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011d82:	4804      	ldr	r0, [pc, #16]	@ (8011d94 <vTaskPlaceOnEventListRestricted+0xb4>)
	}
 8011d84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d88:	3104      	adds	r1, #4
 8011d8a:	f7fe bc35 	b.w	80105f8 <vListInsertEnd>
 8011d8e:	bf00      	nop
 8011d90:	20003278 	.word	0x20003278
 8011d94:	2000332c 	.word	0x2000332c

08011d98 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d98:	68c3      	ldr	r3, [r0, #12]
{
 8011d9a:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d9c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011d9e:	b374      	cbz	r4, 8011dfe <xTaskRemoveFromEventList+0x66>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011da0:	4d1b      	ldr	r5, [pc, #108]	@ (8011e10 <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011da2:	f104 0618 	add.w	r6, r4, #24
 8011da6:	4630      	mov	r0, r6
 8011da8:	f7fe fc4c 	bl	8010644 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011dac:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8011db0:	b17b      	cbz	r3, 8011dd2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011db2:	4631      	mov	r1, r6
 8011db4:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8011db8:	f7fe fc1e 	bl	80105f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011dbc:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011dc0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dc4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8011dc6:	bf86      	itte	hi
 8011dc8:	2001      	movhi	r0, #1
 8011dca:	f8c5 00d8 	strhi.w	r0, [r5, #216]	@ 0xd8
		xReturn = pdFALSE;
 8011dce:	2000      	movls	r0, #0
}
 8011dd0:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011dd2:	1d26      	adds	r6, r4, #4
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	f7fe fc35 	bl	8010644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011dda:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011ddc:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 8011de0:	2301      	movs	r3, #1
 8011de2:	4083      	lsls	r3, r0
 8011de4:	4313      	orrs	r3, r2
 8011de6:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8011dea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011dee:	f105 031c 	add.w	r3, r5, #28
 8011df2:	4631      	mov	r1, r6
 8011df4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011df8:	f7fe fbfe 	bl	80105f8 <vListInsertEnd>
 8011dfc:	e7de      	b.n	8011dbc <xTaskRemoveFromEventList+0x24>
 8011dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e02:	f383 8811 	msr	BASEPRI, r3
 8011e06:	f3bf 8f6f 	isb	sy
 8011e0a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8011e0e:	e7fe      	b.n	8011e0e <xTaskRemoveFromEventList+0x76>
 8011e10:	20003278 	.word	0x20003278

08011e14 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e14:	4b03      	ldr	r3, [pc, #12]	@ (8011e24 <vTaskInternalSetTimeOutState+0x10>)
 8011e16:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011e1e:	e9c0 2300 	strd	r2, r3, [r0]
}
 8011e22:	4770      	bx	lr
 8011e24:	20003278 	.word	0x20003278

08011e28 <xTaskCheckForTimeOut>:
{
 8011e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8011e2a:	b300      	cbz	r0, 8011e6e <xTaskCheckForTimeOut+0x46>
	configASSERT( pxTicksToWait );
 8011e2c:	460d      	mov	r5, r1
 8011e2e:	b1a9      	cbz	r1, 8011e5c <xTaskCheckForTimeOut+0x34>
 8011e30:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8011e32:	f000 fd07 	bl	8012844 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8011e36:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8011e38:	4a1a      	ldr	r2, [pc, #104]	@ (8011ea4 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8011e3a:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8011e3c:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
			if( *pxTicksToWait == portMAX_DELAY )
 8011e40:	d02b      	beq.n	8011e9a <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011e42:	e9d4 7000 	ldrd	r7, r0, [r4]
 8011e46:	f8d2 60d4 	ldr.w	r6, [r2, #212]	@ 0xd4
 8011e4a:	42b7      	cmp	r7, r6
 8011e4c:	d018      	beq.n	8011e80 <xTaskCheckForTimeOut+0x58>
 8011e4e:	4288      	cmp	r0, r1
 8011e50:	d816      	bhi.n	8011e80 <xTaskCheckForTimeOut+0x58>
			xReturn = pdTRUE;
 8011e52:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8011e54:	f000 fd18 	bl	8012888 <vPortExitCritical>
}
 8011e58:	4620      	mov	r0, r4
 8011e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e60:	f383 8811 	msr	BASEPRI, r3
 8011e64:	f3bf 8f6f 	isb	sy
 8011e68:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8011e6c:	e7fe      	b.n	8011e6c <xTaskCheckForTimeOut+0x44>
 8011e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e72:	f383 8811 	msr	BASEPRI, r3
 8011e76:	f3bf 8f6f 	isb	sy
 8011e7a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8011e7e:	e7fe      	b.n	8011e7e <xTaskCheckForTimeOut+0x56>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e80:	eba1 0c00 	sub.w	ip, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011e84:	4563      	cmp	r3, ip
 8011e86:	d90a      	bls.n	8011e9e <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8011e88:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e8a:	f8d2 10d4 	ldr.w	r1, [r2, #212]	@ 0xd4
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e8e:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
			*pxTicksToWait -= xElapsedTime;
 8011e92:	4403      	add	r3, r0
 8011e94:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e96:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8011e9a:	2400      	movs	r4, #0
 8011e9c:	e7da      	b.n	8011e54 <xTaskCheckForTimeOut+0x2c>
			*pxTicksToWait = 0;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8011ea2:	e7d6      	b.n	8011e52 <xTaskCheckForTimeOut+0x2a>
 8011ea4:	20003278 	.word	0x20003278

08011ea8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011ea8:	4b02      	ldr	r3, [pc, #8]	@ (8011eb4 <vTaskMissedYield+0xc>)
 8011eaa:	2201      	movs	r2, #1
 8011eac:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop
 8011eb4:	20003278 	.word	0x20003278

08011eb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011eb8:	4b06      	ldr	r3, [pc, #24]	@ (8011ed4 <xTaskGetSchedulerState+0x1c>)
 8011eba:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8011ebe:	b132      	cbz	r2, 8011ece <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ec0:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8011ec4:	fab0 f080 	clz	r0, r0
 8011ec8:	0940      	lsrs	r0, r0, #5
 8011eca:	0040      	lsls	r0, r0, #1
 8011ecc:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011ece:	2001      	movs	r0, #1
	}
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop
 8011ed4:	20003278 	.word	0x20003278

08011ed8 <xTaskPriorityInherit>:
	{
 8011ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8011eda:	4604      	mov	r4, r0
 8011edc:	b1e0      	cbz	r0, 8011f18 <xTaskPriorityInherit+0x40>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011ede:	4d24      	ldr	r5, [pc, #144]	@ (8011f70 <xTaskPriorityInherit+0x98>)
 8011ee0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011ee2:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8011ee6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d216      	bcs.n	8011f1a <xTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011eec:	6982      	ldr	r2, [r0, #24]
 8011eee:	2a00      	cmp	r2, #0
 8011ef0:	db05      	blt.n	8011efe <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ef2:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8011ef6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011ef8:	f1c2 0207 	rsb	r2, r2, #7
 8011efc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011efe:	4e1d      	ldr	r6, [pc, #116]	@ (8011f74 <xTaskPriorityInherit+0x9c>)
 8011f00:	6962      	ldr	r2, [r4, #20]
 8011f02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011f06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d00e      	beq.n	8011f2c <xTaskPriorityInherit+0x54>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f0e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f14:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8011f16:	2001      	movs	r0, #1
	}
 8011f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011f1a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011f1e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8011f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f22:	4298      	cmp	r0, r3
 8011f24:	bf2c      	ite	cs
 8011f26:	2000      	movcs	r0, #0
 8011f28:	2001      	movcc	r0, #1
	}
 8011f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f2c:	1d27      	adds	r7, r4, #4
 8011f2e:	4638      	mov	r0, r7
 8011f30:	f7fe fb88 	bl	8010644 <uxListRemove>
 8011f34:	b940      	cbnz	r0, 8011f48 <xTaskPriorityInherit+0x70>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011f36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011f38:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	408a      	lsls	r2, r1
 8011f40:	ea23 0302 	bic.w	r3, r3, r2
 8011f44:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f48:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011f4c:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f50:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011f52:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011f54:	2301      	movs	r3, #1
 8011f56:	4083      	lsls	r3, r0
 8011f58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011f5c:	4313      	orrs	r3, r2
 8011f5e:	4639      	mov	r1, r7
 8011f60:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8011f64:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8011f68:	f7fe fb46 	bl	80105f8 <vListInsertEnd>
 8011f6c:	e7d3      	b.n	8011f16 <xTaskPriorityInherit+0x3e>
 8011f6e:	bf00      	nop
 8011f70:	20003278 	.word	0x20003278
 8011f74:	20003294 	.word	0x20003294

08011f78 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8011f78:	b318      	cbz	r0, 8011fc2 <xTaskPriorityDisinherit+0x4a>
	{
 8011f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8011f7c:	4d27      	ldr	r5, [pc, #156]	@ (801201c <xTaskPriorityDisinherit+0xa4>)
 8011f7e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011f82:	4283      	cmp	r3, r0
 8011f84:	4604      	mov	r4, r0
 8011f86:	d008      	beq.n	8011f9a <xTaskPriorityDisinherit+0x22>
 8011f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f8c:	f383 8811 	msr	BASEPRI, r3
 8011f90:	f3bf 8f6f 	isb	sy
 8011f94:	f3bf 8f4f 	dsb	sy
 8011f98:	e7fe      	b.n	8011f98 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8011f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f9c:	b143      	cbz	r3, 8011fb0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f9e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011fa0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8011fa2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011fa4:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8011fa6:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011fa8:	d000      	beq.n	8011fac <xTaskPriorityDisinherit+0x34>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011faa:	b163      	cbz	r3, 8011fc6 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8011fac:	2000      	movs	r0, #0
	}
 8011fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fb4:	f383 8811 	msr	BASEPRI, r3
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8011fc0:	e7fe      	b.n	8011fc0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8011fc2:	2000      	movs	r0, #0
	}
 8011fc4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011fc6:	1d07      	adds	r7, r0, #4
 8011fc8:	4638      	mov	r0, r7
 8011fca:	f7fe fb3b 	bl	8010644 <uxListRemove>
 8011fce:	b970      	cbnz	r0, 8011fee <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011fd0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011fd2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011fd6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011fda:	69db      	ldr	r3, [r3, #28]
 8011fdc:	b93b      	cbnz	r3, 8011fee <xTaskPriorityDisinherit+0x76>
 8011fde:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	4082      	lsls	r2, r0
 8011fe6:	ea23 0302 	bic.w	r3, r3, r2
 8011fea:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011fee:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8011ff0:	f8d5 60b0 	ldr.w	r6, [r5, #176]	@ 0xb0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011ff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ff6:	f1c3 0207 	rsb	r2, r3, #7
 8011ffa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ffc:	4808      	ldr	r0, [pc, #32]	@ (8012020 <xTaskPriorityDisinherit+0xa8>)
 8011ffe:	2401      	movs	r4, #1
 8012000:	fa04 f203 	lsl.w	r2, r4, r3
 8012004:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012008:	4332      	orrs	r2, r6
 801200a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801200e:	4639      	mov	r1, r7
 8012010:	f8c5 20b0 	str.w	r2, [r5, #176]	@ 0xb0
 8012014:	f7fe faf0 	bl	80105f8 <vListInsertEnd>
					xReturn = pdTRUE;
 8012018:	4620      	mov	r0, r4
	}
 801201a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801201c:	20003278 	.word	0x20003278
 8012020:	20003294 	.word	0x20003294

08012024 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8012024:	2800      	cmp	r0, #0
 8012026:	d041      	beq.n	80120ac <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 8012028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 801202a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801202c:	4604      	mov	r4, r0
 801202e:	b14b      	cbz	r3, 8012044 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012030:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012032:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012034:	4281      	cmp	r1, r0
 8012036:	bf38      	it	cc
 8012038:	4601      	movcc	r1, r0
 801203a:	428a      	cmp	r2, r1
 801203c:	d001      	beq.n	8012042 <vTaskPriorityDisinheritAfterTimeout+0x1e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801203e:	2b01      	cmp	r3, #1
 8012040:	d009      	beq.n	8012056 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8012042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012048:	f383 8811 	msr	BASEPRI, r3
 801204c:	f3bf 8f6f 	isb	sy
 8012050:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8012054:	e7fe      	b.n	8012054 <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 8012056:	4d1f      	ldr	r5, [pc, #124]	@ (80120d4 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8012058:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 801205c:	42a3      	cmp	r3, r4
 801205e:	d026      	beq.n	80120ae <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012060:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8012062:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012064:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012066:	bfa8      	it	ge
 8012068:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801206c:	4e1a      	ldr	r6, [pc, #104]	@ (80120d8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801206e:	bfa8      	it	ge
 8012070:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012072:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012076:	6961      	ldr	r1, [r4, #20]
 8012078:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 801207c:	4299      	cmp	r1, r3
 801207e:	d1e0      	bne.n	8012042 <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012080:	1d27      	adds	r7, r4, #4
 8012082:	4638      	mov	r0, r7
 8012084:	f7fe fade 	bl	8010644 <uxListRemove>
 8012088:	b1d0      	cbz	r0, 80120c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801208a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
						prvAddTaskToReadyList( pxTCB );
 801208c:	2301      	movs	r3, #1
 801208e:	4083      	lsls	r3, r0
 8012090:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 8012094:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012098:	4313      	orrs	r3, r2
 801209a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801209e:	4639      	mov	r1, r7
 80120a0:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
	}
 80120a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80120a8:	f7fe baa6 	b.w	80105f8 <vListInsertEnd>
 80120ac:	4770      	bx	lr
 80120ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120b2:	f383 8811 	msr	BASEPRI, r3
 80120b6:	f3bf 8f6f 	isb	sy
 80120ba:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80120be:	e7fe      	b.n	80120be <vTaskPriorityDisinheritAfterTimeout+0x9a>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80120c0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80120c2:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 80120c6:	2301      	movs	r3, #1
 80120c8:	4083      	lsls	r3, r0
 80120ca:	ea22 0203 	bic.w	r2, r2, r3
 80120ce:	f8c5 20b0 	str.w	r2, [r5, #176]	@ 0xb0
 80120d2:	e7dd      	b.n	8012090 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 80120d4:	20003278 	.word	0x20003278
 80120d8:	20003294 	.word	0x20003294

080120dc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80120dc:	4b05      	ldr	r3, [pc, #20]	@ (80120f4 <pvTaskIncrementMutexHeldCount+0x18>)
 80120de:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80120e2:	b122      	cbz	r2, 80120ee <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
 80120e4:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
 80120e8:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80120ea:	3201      	adds	r2, #1
 80120ec:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80120ee:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
	}
 80120f2:	4770      	bx	lr
 80120f4:	20003278 	.word	0x20003278

080120f8 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80120f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120fa:	4e1f      	ldr	r6, [pc, #124]	@ (8012178 <prvSwitchTimerLists+0x80>)
 80120fc:	b085      	sub	sp, #20

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120fe:	e00d      	b.n	801211c <prvSwitchTimerLists+0x24>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012100:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012102:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012104:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012106:	1d25      	adds	r5, r4, #4
 8012108:	4628      	mov	r0, r5
 801210a:	f7fe fa9b 	bl	8010644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801210e:	6a23      	ldr	r3, [r4, #32]
 8012110:	4620      	mov	r0, r4
 8012112:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012114:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012118:	075b      	lsls	r3, r3, #29
 801211a:	d408      	bmi.n	801212e <prvSwitchTimerLists+0x36>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801211c:	6833      	ldr	r3, [r6, #0]
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	2a00      	cmp	r2, #0
 8012122:	d1ed      	bne.n	8012100 <prvSwitchTimerLists+0x8>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8012124:	68b2      	ldr	r2, [r6, #8]
 8012126:	6032      	str	r2, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8012128:	60b3      	str	r3, [r6, #8]
}
 801212a:	b005      	add	sp, #20
 801212c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801212e:	69a3      	ldr	r3, [r4, #24]
 8012130:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8012132:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012134:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8012136:	d205      	bcs.n	8012144 <prvSwitchTimerLists+0x4c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012138:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801213a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801213c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801213e:	f7fe fa69 	bl	8010614 <vListInsert>
 8012142:	e7eb      	b.n	801211c <prvSwitchTimerLists+0x24>
	if( xTimerQueue != NULL )
 8012144:	6873      	ldr	r3, [r6, #4]
		xMessage.xMessageID = xCommandID;
 8012146:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
 8012148:	b163      	cbz	r3, 8012164 <prvSwitchTimerLists+0x6c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801214a:	e9cd 5701 	strd	r5, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801214e:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012150:	f7ff feb2 	bl	8011eb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012154:	6870      	ldr	r0, [r6, #4]
 8012156:	462b      	mov	r3, r5
 8012158:	462a      	mov	r2, r5
 801215a:	a901      	add	r1, sp, #4
 801215c:	f7fe fb44 	bl	80107e8 <xQueueGenericSend>
				configASSERT( xResult );
 8012160:	2800      	cmp	r0, #0
 8012162:	d1db      	bne.n	801211c <prvSwitchTimerLists+0x24>
 8012164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012168:	f383 8811 	msr	BASEPRI, r3
 801216c:	f3bf 8f6f 	isb	sy
 8012170:	f3bf 8f4f 	dsb	sy
 8012174:	e7fe      	b.n	8012174 <prvSwitchTimerLists+0x7c>
 8012176:	bf00      	nop
 8012178:	200033a4 	.word	0x200033a4

0801217c <prvTimerTask>:
{
 801217c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012180:	4c8f      	ldr	r4, [pc, #572]	@ (80123c0 <prvTimerTask+0x244>)
 8012182:	b086      	sub	sp, #24
					portYIELD_WITHIN_API();
 8012184:	f04f 27e0 	mov.w	r7, #3758153728	@ 0xe000e000
 8012188:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801218c:	6823      	ldr	r3, [r4, #0]
 801218e:	681e      	ldr	r6, [r3, #0]
 8012190:	2e00      	cmp	r6, #0
 8012192:	f000 809b 	beq.w	80122cc <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 801219a:	f7ff fcef 	bl	8011b7c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801219e:	f7ff fd09 	bl	8011bb4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80121a2:	68e3      	ldr	r3, [r4, #12]
 80121a4:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 80121a6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80121a8:	f200 809f 	bhi.w	80122ea <prvTimerTask+0x16e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80121ac:	4286      	cmp	r6, r0
	xLastTime = xTimeNow;
 80121ae:	60e0      	str	r0, [r4, #12]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80121b0:	f240 80a4 	bls.w	80122fc <prvTimerTask+0x180>
 80121b4:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80121b6:	6860      	ldr	r0, [r4, #4]
 80121b8:	1b71      	subs	r1, r6, r5
 80121ba:	f7ff f8cf 	bl	801135c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80121be:	f7ff fce7 	bl	8011b90 <xTaskResumeAll>
 80121c2:	b928      	cbnz	r0, 80121d0 <prvTimerTask+0x54>
					portYIELD_WITHIN_API();
 80121c4:	f8c7 8d04 	str.w	r8, [r7, #3332]	@ 0xd04
 80121c8:	f3bf 8f4f 	dsb	sy
 80121cc:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121d0:	6860      	ldr	r0, [r4, #4]
 80121d2:	2200      	movs	r2, #0
 80121d4:	4669      	mov	r1, sp
 80121d6:	f7fe fd3f 	bl	8010c58 <xQueueReceive>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d0d6      	beq.n	801218c <prvTimerTask+0x10>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80121de:	9b00      	ldr	r3, [sp, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	dbf5      	blt.n	80121d0 <prvTimerTask+0x54>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80121e4:	9d02      	ldr	r5, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80121e6:	696b      	ldr	r3, [r5, #20]
 80121e8:	b113      	cbz	r3, 80121f0 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80121ea:	1d28      	adds	r0, r5, #4
 80121ec:	f7fe fa2a 	bl	8010644 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80121f0:	f7ff fce0 	bl	8011bb4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80121f4:	68e3      	ldr	r3, [r4, #12]
 80121f6:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80121f8:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 80121fa:	d37c      	bcc.n	80122f6 <prvTimerTask+0x17a>
			switch( xMessage.xMessageID )
 80121fc:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
 80121fe:	60e6      	str	r6, [r4, #12]
			switch( xMessage.xMessageID )
 8012200:	2b09      	cmp	r3, #9
 8012202:	d8e5      	bhi.n	80121d0 <prvTimerTask+0x54>
 8012204:	e8df f003 	tbb	[pc, r3]
 8012208:	52050505 	.word	0x52050505
 801220c:	0505593c 	.word	0x0505593c
 8012210:	3c52      	.short	0x3c52
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012212:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012216:	9b01      	ldr	r3, [sp, #4]
 8012218:	69a9      	ldr	r1, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801221a:	612d      	str	r5, [r5, #16]
 801221c:	1858      	adds	r0, r3, r1
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801221e:	f042 0201 	orr.w	r2, r2, #1
 8012222:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012226:	bf2c      	ite	cs
 8012228:	2201      	movcs	r2, #1
 801222a:	2200      	movcc	r2, #0
	if( xNextExpiryTime <= xTimeNow )
 801222c:	42b0      	cmp	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801222e:	6068      	str	r0, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 8012230:	d87c      	bhi.n	801232c <prvTimerTask+0x1b0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012232:	1af3      	subs	r3, r6, r3
 8012234:	4299      	cmp	r1, r3
 8012236:	f200 8094 	bhi.w	8012362 <prvTimerTask+0x1e6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801223a:	6a2b      	ldr	r3, [r5, #32]
 801223c:	4628      	mov	r0, r5
 801223e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012240:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8012244:	0759      	lsls	r1, r3, #29
 8012246:	d5c3      	bpl.n	80121d0 <prvTimerTask+0x54>
	if( xTimerQueue != NULL )
 8012248:	6861      	ldr	r1, [r4, #4]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801224a:	9b01      	ldr	r3, [sp, #4]
 801224c:	69aa      	ldr	r2, [r5, #24]
	if( xTimerQueue != NULL )
 801224e:	b171      	cbz	r1, 801226e <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012250:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012252:	e9cd 3504 	strd	r3, r5, [sp, #16]
		xMessage.xMessageID = xCommandID;
 8012256:	2500      	movs	r5, #0
 8012258:	9503      	str	r5, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801225a:	f7ff fe2d 	bl	8011eb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801225e:	6860      	ldr	r0, [r4, #4]
 8012260:	462b      	mov	r3, r5
 8012262:	462a      	mov	r2, r5
 8012264:	a903      	add	r1, sp, #12
 8012266:	f7fe fabf 	bl	80107e8 <xQueueGenericSend>
							configASSERT( xResult );
 801226a:	2800      	cmp	r0, #0
 801226c:	d1b0      	bne.n	80121d0 <prvTimerTask+0x54>
 801226e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012272:	f383 8811 	msr	BASEPRI, r3
 8012276:	f3bf 8f6f 	isb	sy
 801227a:	f3bf 8f4f 	dsb	sy
 801227e:	e7fe      	b.n	801227e <prvTimerTask+0x102>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012280:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012284:	9b01      	ldr	r3, [sp, #4]
 8012286:	61ab      	str	r3, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012288:	f042 0201 	orr.w	r2, r2, #1
 801228c:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012290:	2b00      	cmp	r3, #0
 8012292:	f000 808c 	beq.w	80123ae <prvTimerTask+0x232>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012296:	4433      	add	r3, r6
	if( xNextExpiryTime <= xTimeNow )
 8012298:	42b3      	cmp	r3, r6
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801229a:	bf94      	ite	ls
 801229c:	68a0      	ldrls	r0, [r4, #8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801229e:	6820      	ldrhi	r0, [r4, #0]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80122a0:	606b      	str	r3, [r5, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80122a2:	612d      	str	r5, [r5, #16]
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80122a4:	1d29      	adds	r1, r5, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80122a6:	f7fe f9b5 	bl	8010614 <vListInsert>
 80122aa:	e791      	b.n	80121d0 <prvTimerTask+0x54>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80122ac:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 80122b0:	f023 0301 	bic.w	r3, r3, #1
 80122b4:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
					break;
 80122b8:	e78a      	b.n	80121d0 <prvTimerTask+0x54>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80122ba:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 80122be:	079a      	lsls	r2, r3, #30
 80122c0:	d53d      	bpl.n	801233e <prvTimerTask+0x1c2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80122c2:	f023 0301 	bic.w	r3, r3, #1
 80122c6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
 80122ca:	e781      	b.n	80121d0 <prvTimerTask+0x54>
	vTaskSuspendAll();
 80122cc:	f7ff fc56 	bl	8011b7c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80122d0:	f7ff fc70 	bl	8011bb4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80122d4:	68e3      	ldr	r3, [r4, #12]
 80122d6:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80122d8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80122da:	d306      	bcc.n	80122ea <prvTimerTask+0x16e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80122dc:	68a3      	ldr	r3, [r4, #8]
	xLastTime = xTimeNow;
 80122de:	60e5      	str	r5, [r4, #12]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80122e0:	681a      	ldr	r2, [r3, #0]
 80122e2:	fab2 f282 	clz	r2, r2
 80122e6:	0952      	lsrs	r2, r2, #5
 80122e8:	e765      	b.n	80121b6 <prvTimerTask+0x3a>
		prvSwitchTimerLists();
 80122ea:	f7ff ff05 	bl	80120f8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80122ee:	60e5      	str	r5, [r4, #12]
			( void ) xTaskResumeAll();
 80122f0:	f7ff fc4e 	bl	8011b90 <xTaskResumeAll>
 80122f4:	e76c      	b.n	80121d0 <prvTimerTask+0x54>
		prvSwitchTimerLists();
 80122f6:	f7ff feff 	bl	80120f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80122fa:	e77f      	b.n	80121fc <prvTimerTask+0x80>
				( void ) xTaskResumeAll();
 80122fc:	f7ff fc48 	bl	8011b90 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012300:	6823      	ldr	r3, [r4, #0]
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012308:	f109 0a04 	add.w	sl, r9, #4
 801230c:	4650      	mov	r0, sl
 801230e:	f7fe f999 	bl	8010644 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012312:	f899 3028 	ldrb.w	r3, [r9, #40]	@ 0x28
 8012316:	0758      	lsls	r0, r3, #29
 8012318:	d415      	bmi.n	8012346 <prvTimerTask+0x1ca>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801231a:	f023 0301 	bic.w	r3, r3, #1
 801231e:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012322:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012326:	4648      	mov	r0, r9
 8012328:	4798      	blx	r3
}
 801232a:	e751      	b.n	80121d0 <prvTimerTask+0x54>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801232c:	42b3      	cmp	r3, r6
 801232e:	d901      	bls.n	8012334 <prvTimerTask+0x1b8>
 8012330:	2a00      	cmp	r2, #0
 8012332:	d082      	beq.n	801223a <prvTimerTask+0xbe>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012334:	6820      	ldr	r0, [r4, #0]
 8012336:	1d29      	adds	r1, r5, #4
 8012338:	f7fe f96c 	bl	8010614 <vListInsert>
	return xProcessTimerNow;
 801233c:	e748      	b.n	80121d0 <prvTimerTask+0x54>
							vPortFree( pxTimer );
 801233e:	4628      	mov	r0, r5
 8012340:	f000 f9be 	bl	80126c0 <vPortFree>
 8012344:	e744      	b.n	80121d0 <prvTimerTask+0x54>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012346:	f8d9 2018 	ldr.w	r2, [r9, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801234a:	f8c9 9010 	str.w	r9, [r9, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801234e:	18b3      	adds	r3, r6, r2
	if( xNextExpiryTime <= xTimeNow )
 8012350:	42ab      	cmp	r3, r5
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012352:	f8c9 3004 	str.w	r3, [r9, #4]
	if( xNextExpiryTime <= xTimeNow )
 8012356:	d909      	bls.n	801236c <prvTimerTask+0x1f0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012358:	6820      	ldr	r0, [r4, #0]
 801235a:	4651      	mov	r1, sl
 801235c:	f7fe f95a 	bl	8010614 <vListInsert>
	return xProcessTimerNow;
 8012360:	e7df      	b.n	8012322 <prvTimerTask+0x1a6>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012362:	68a0      	ldr	r0, [r4, #8]
 8012364:	1d29      	adds	r1, r5, #4
 8012366:	f7fe f955 	bl	8010614 <vListInsert>
	return xProcessTimerNow;
 801236a:	e731      	b.n	80121d0 <prvTimerTask+0x54>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801236c:	1bad      	subs	r5, r5, r6
 801236e:	42aa      	cmp	r2, r5
 8012370:	d818      	bhi.n	80123a4 <prvTimerTask+0x228>
	if( xTimerQueue != NULL )
 8012372:	6863      	ldr	r3, [r4, #4]
 8012374:	b16b      	cbz	r3, 8012392 <prvTimerTask+0x216>
		xMessage.xMessageID = xCommandID;
 8012376:	2500      	movs	r5, #0
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012378:	e9cd 6904 	strd	r6, r9, [sp, #16]
		xMessage.xMessageID = xCommandID;
 801237c:	9503      	str	r5, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801237e:	f7ff fd9b 	bl	8011eb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012382:	6860      	ldr	r0, [r4, #4]
 8012384:	462b      	mov	r3, r5
 8012386:	462a      	mov	r2, r5
 8012388:	a903      	add	r1, sp, #12
 801238a:	f7fe fa2d 	bl	80107e8 <xQueueGenericSend>
			configASSERT( xResult );
 801238e:	2800      	cmp	r0, #0
 8012390:	d1c7      	bne.n	8012322 <prvTimerTask+0x1a6>
 8012392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012396:	f383 8811 	msr	BASEPRI, r3
 801239a:	f3bf 8f6f 	isb	sy
 801239e:	f3bf 8f4f 	dsb	sy
 80123a2:	e7fe      	b.n	80123a2 <prvTimerTask+0x226>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80123a4:	68a0      	ldr	r0, [r4, #8]
 80123a6:	4651      	mov	r1, sl
 80123a8:	f7fe f934 	bl	8010614 <vListInsert>
	return xProcessTimerNow;
 80123ac:	e7b9      	b.n	8012322 <prvTimerTask+0x1a6>
 80123ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123b2:	f383 8811 	msr	BASEPRI, r3
 80123b6:	f3bf 8f6f 	isb	sy
 80123ba:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80123be:	e7fe      	b.n	80123be <prvTimerTask+0x242>
 80123c0:	200033a4 	.word	0x200033a4

080123c4 <xTimerCreateTimerTask>:
{
 80123c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80123c6:	4c1c      	ldr	r4, [pc, #112]	@ (8012438 <xTimerCreateTimerTask+0x74>)
{
 80123c8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80123ca:	f000 fa3b 	bl	8012844 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80123ce:	6865      	ldr	r5, [r4, #4]
 80123d0:	b1d5      	cbz	r5, 8012408 <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80123d2:	f000 fa59 	bl	8012888 <vPortExitCritical>
	if( xTimerQueue != NULL )
 80123d6:	6863      	ldr	r3, [r4, #4]
 80123d8:	b15b      	cbz	r3, 80123f2 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
 80123da:	4a18      	ldr	r2, [pc, #96]	@ (801243c <xTimerCreateTimerTask+0x78>)
 80123dc:	4918      	ldr	r1, [pc, #96]	@ (8012440 <xTimerCreateTimerTask+0x7c>)
 80123de:	4819      	ldr	r0, [pc, #100]	@ (8012444 <xTimerCreateTimerTask+0x80>)
 80123e0:	2306      	movs	r3, #6
 80123e2:	e9cd 3200 	strd	r3, r2, [sp]
 80123e6:	2300      	movs	r3, #0
 80123e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80123ec:	f7ff f9aa 	bl	8011744 <xTaskCreate>
	configASSERT( xReturn );
 80123f0:	b940      	cbnz	r0, 8012404 <xTimerCreateTimerTask+0x40>
 80123f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123f6:	f383 8811 	msr	BASEPRI, r3
 80123fa:	f3bf 8f6f 	isb	sy
 80123fe:	f3bf 8f4f 	dsb	sy
 8012402:	e7fe      	b.n	8012402 <xTimerCreateTimerTask+0x3e>
}
 8012404:	b003      	add	sp, #12
 8012406:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 8012408:	f104 0710 	add.w	r7, r4, #16
 801240c:	4638      	mov	r0, r7
			vListInitialise( &xActiveTimerList2 );
 801240e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
			vListInitialise( &xActiveTimerList1 );
 8012412:	f7fe f8e1 	bl	80105d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012416:	4630      	mov	r0, r6
 8012418:	f7fe f8de 	bl	80105d8 <vListInitialise>
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801241c:	462a      	mov	r2, r5
 801241e:	210c      	movs	r1, #12
 8012420:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 8012422:	6027      	str	r7, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012424:	60a6      	str	r6, [r4, #8]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8012426:	f7fe f95b 	bl	80106e0 <xQueueGenericCreate>
 801242a:	6060      	str	r0, [r4, #4]
				if( xTimerQueue != NULL )
 801242c:	2800      	cmp	r0, #0
 801242e:	d0d0      	beq.n	80123d2 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012430:	4905      	ldr	r1, [pc, #20]	@ (8012448 <xTimerCreateTimerTask+0x84>)
 8012432:	f7fe ff7d 	bl	8011330 <vQueueAddToRegistry>
 8012436:	e7cc      	b.n	80123d2 <xTimerCreateTimerTask+0xe>
 8012438:	200033a4 	.word	0x200033a4
 801243c:	200033dc 	.word	0x200033dc
 8012440:	0801557c 	.word	0x0801557c
 8012444:	0801217d 	.word	0x0801217d
 8012448:	08015574 	.word	0x08015574

0801244c <xTimerCreate>:
	{
 801244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012450:	4607      	mov	r7, r0
 8012452:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012454:	202c      	movs	r0, #44	@ 0x2c
	{
 8012456:	4688      	mov	r8, r1
 8012458:	4616      	mov	r6, r2
 801245a:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801245c:	f000 f884 	bl	8012568 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8012460:	4604      	mov	r4, r0
 8012462:	b1e8      	cbz	r0, 80124a0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 8012464:	2300      	movs	r3, #0
 8012466:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801246a:	f1b8 0f00 	cmp.w	r8, #0
 801246e:	d01b      	beq.n	80124a8 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 8012470:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80124f8 <xTimerCreate+0xac>
	taskENTER_CRITICAL();
 8012474:	f000 f9e6 	bl	8012844 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8012478:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801247c:	b1ea      	cbz	r2, 80124ba <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 801247e:	f000 fa03 	bl	8012888 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012482:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
		pxNewTimer->pcTimerName = pcTimerName;
 8012484:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 8012486:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801248a:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801248c:	1d20      	adds	r0, r4, #4
 801248e:	f7fe f8af 	bl	80105f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012492:	b12e      	cbz	r6, 80124a0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012494:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012498:	f043 0304 	orr.w	r3, r3, #4
 801249c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 80124a0:	4620      	mov	r0, r4
 80124a2:	b003      	add	sp, #12
 80124a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124ac:	f383 8811 	msr	BASEPRI, r3
 80124b0:	f3bf 8f6f 	isb	sy
 80124b4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80124b8:	e7fe      	b.n	80124b8 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 80124ba:	f109 0b10 	add.w	fp, r9, #16
 80124be:	4658      	mov	r0, fp
			vListInitialise( &xActiveTimerList2 );
 80124c0:	f109 0a24 	add.w	sl, r9, #36	@ 0x24
 80124c4:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
 80124c6:	f7fe f887 	bl	80105d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80124ca:	4650      	mov	r0, sl
 80124cc:	f7fe f884 	bl	80105d8 <vListInitialise>
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80124d0:	9a01      	ldr	r2, [sp, #4]
			pxCurrentTimerList = &xActiveTimerList1;
 80124d2:	f8c9 b000 	str.w	fp, [r9]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80124d6:	210c      	movs	r1, #12
 80124d8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80124da:	f8c9 a008 	str.w	sl, [r9, #8]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80124de:	f7fe f8ff 	bl	80106e0 <xQueueGenericCreate>
 80124e2:	f8c9 0004 	str.w	r0, [r9, #4]
				if( xTimerQueue != NULL )
 80124e6:	2800      	cmp	r0, #0
 80124e8:	d0c9      	beq.n	801247e <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80124ea:	4902      	ldr	r1, [pc, #8]	@ (80124f4 <xTimerCreate+0xa8>)
 80124ec:	f7fe ff20 	bl	8011330 <vQueueAddToRegistry>
 80124f0:	e7c5      	b.n	801247e <xTimerCreate+0x32>
 80124f2:	bf00      	nop
 80124f4:	08015574 	.word	0x08015574
 80124f8:	200033a4 	.word	0x200033a4

080124fc <xTimerGenericCommand>:
	configASSERT( xTimer );
 80124fc:	b1c0      	cbz	r0, 8012530 <xTimerGenericCommand+0x34>
{
 80124fe:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8012500:	4d18      	ldr	r5, [pc, #96]	@ (8012564 <xTimerGenericCommand+0x68>)
 8012502:	686c      	ldr	r4, [r5, #4]
{
 8012504:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8012506:	b184      	cbz	r4, 801252a <xTimerGenericCommand+0x2e>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012508:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 801250a:	e9cd 1201 	strd	r1, r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801250e:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012510:	dc17      	bgt.n	8012542 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012512:	f7ff fcd1 	bl	8011eb8 <xTaskGetSchedulerState>
 8012516:	2802      	cmp	r0, #2
 8012518:	d01c      	beq.n	8012554 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801251a:	2300      	movs	r3, #0
 801251c:	6868      	ldr	r0, [r5, #4]
 801251e:	461a      	mov	r2, r3
 8012520:	a901      	add	r1, sp, #4
 8012522:	f7fe f961 	bl	80107e8 <xQueueGenericSend>
}
 8012526:	b005      	add	sp, #20
 8012528:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 801252a:	4620      	mov	r0, r4
}
 801252c:	b005      	add	sp, #20
 801252e:	bd30      	pop	{r4, r5, pc}
 8012530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012534:	f383 8811 	msr	BASEPRI, r3
 8012538:	f3bf 8f6f 	isb	sy
 801253c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8012540:	e7fe      	b.n	8012540 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012542:	469c      	mov	ip, r3
 8012544:	4662      	mov	r2, ip
 8012546:	2300      	movs	r3, #0
 8012548:	a901      	add	r1, sp, #4
 801254a:	4620      	mov	r0, r4
 801254c:	f7fe facc 	bl	8010ae8 <xQueueGenericSendFromISR>
}
 8012550:	b005      	add	sp, #20
 8012552:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012554:	6868      	ldr	r0, [r5, #4]
 8012556:	9a08      	ldr	r2, [sp, #32]
 8012558:	2300      	movs	r3, #0
 801255a:	a901      	add	r1, sp, #4
 801255c:	f7fe f944 	bl	80107e8 <xQueueGenericSend>
 8012560:	e7e4      	b.n	801252c <xTimerGenericCommand+0x30>
 8012562:	bf00      	nop
 8012564:	200033a4 	.word	0x200033a4

08012568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801256c:	4c51      	ldr	r4, [pc, #324]	@ (80126b4 <pvPortMalloc+0x14c>)
{
 801256e:	4607      	mov	r7, r0
	vTaskSuspendAll();
 8012570:	f7ff fb04 	bl	8011b7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012574:	68a5      	ldr	r5, [r4, #8]
 8012576:	2d00      	cmp	r5, #0
 8012578:	d034      	beq.n	80125e4 <pvPortMalloc+0x7c>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801257a:	68e6      	ldr	r6, [r4, #12]
 801257c:	4237      	tst	r7, r6
 801257e:	d12b      	bne.n	80125d8 <pvPortMalloc+0x70>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012580:	b357      	cbz	r7, 80125d8 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012582:	f107 0008 	add.w	r0, r7, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012586:	077a      	lsls	r2, r7, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012588:	bf1c      	itt	ne
 801258a:	f020 0007 	bicne.w	r0, r0, #7
 801258e:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012590:	b310      	cbz	r0, 80125d8 <pvPortMalloc+0x70>
 8012592:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8012596:	4586      	cmp	lr, r0
 8012598:	d31e      	bcc.n	80125d8 <pvPortMalloc+0x70>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 801259a:	6823      	ldr	r3, [r4, #0]
				pxPreviousBlock = &xStart;
 801259c:	4f45      	ldr	r7, [pc, #276]	@ (80126b4 <pvPortMalloc+0x14c>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801259e:	e003      	b.n	80125a8 <pvPortMalloc+0x40>
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	b122      	cbz	r2, 80125ae <pvPortMalloc+0x46>
 80125a4:	461f      	mov	r7, r3
 80125a6:	4613      	mov	r3, r2
 80125a8:	6859      	ldr	r1, [r3, #4]
 80125aa:	4281      	cmp	r1, r0
 80125ac:	d3f8      	bcc.n	80125a0 <pvPortMalloc+0x38>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80125ae:	42ab      	cmp	r3, r5
 80125b0:	d012      	beq.n	80125d8 <pvPortMalloc+0x70>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	603a      	str	r2, [r7, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80125b6:	1a0a      	subs	r2, r1, r0
 80125b8:	2a10      	cmp	r2, #16
 80125ba:	d947      	bls.n	801264c <pvPortMalloc+0xe4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80125bc:	eb03 0c00 	add.w	ip, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80125c0:	f01c 0f07 	tst.w	ip, #7
 80125c4:	d028      	beq.n	8012618 <pvPortMalloc+0xb0>
 80125c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125ca:	f383 8811 	msr	BASEPRI, r3
 80125ce:	f3bf 8f6f 	isb	sy
 80125d2:	f3bf 8f4f 	dsb	sy
 80125d6:	e7fe      	b.n	80125d6 <pvPortMalloc+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80125d8:	f7ff fada 	bl	8011b90 <xTaskResumeAll>
void *pvReturn = NULL;
 80125dc:	2500      	movs	r5, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80125de:	4628      	mov	r0, r5
 80125e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80125e4:	4b34      	ldr	r3, [pc, #208]	@ (80126b8 <pvPortMalloc+0x150>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 80125e6:	4d35      	ldr	r5, [pc, #212]	@ (80126bc <pvPortMalloc+0x154>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80125e8:	0759      	lsls	r1, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80125ea:	bf18      	it	ne
 80125ec:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125ee:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125f2:	bf18      	it	ne
 80125f4:	f023 0307 	bicne.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80125f8:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80125fa:	e9c4 3100 	strd	r3, r1, [r4]
 80125fe:	461a      	mov	r2, r3
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012600:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012604:	1aeb      	subs	r3, r5, r3
	pxEnd->pxNextFreeBlock = NULL;
 8012606:	e9c5 1100 	strd	r1, r1, [r5]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801260a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801260e:	e9c2 5300 	strd	r5, r3, [r2]
	pxEnd = ( void * ) uxAddress;
 8012612:	60a5      	str	r5, [r4, #8]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012614:	60e6      	str	r6, [r4, #12]
}
 8012616:	e7b1      	b.n	801257c <pvPortMalloc+0x14>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012618:	f8cc 2004 	str.w	r2, [ip, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801261c:	4a25      	ldr	r2, [pc, #148]	@ (80126b4 <pvPortMalloc+0x14c>)
						pxBlock->xBlockSize = xWantedSize;
 801261e:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012620:	4617      	mov	r7, r2
 8012622:	6812      	ldr	r2, [r2, #0]
 8012624:	4594      	cmp	ip, r2
 8012626:	d8fb      	bhi.n	8012620 <pvPortMalloc+0xb8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012628:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801262a:	f8dc 8004 	ldr.w	r8, [ip, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801262e:	eb07 0901 	add.w	r9, r7, r1
 8012632:	45cc      	cmp	ip, r9
 8012634:	d027      	beq.n	8012686 <pvPortMalloc+0x11e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012636:	eb0c 0108 	add.w	r1, ip, r8
 801263a:	428a      	cmp	r2, r1
 801263c:	d02d      	beq.n	801269a <pvPortMalloc+0x132>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801263e:	f8cc 2000 	str.w	r2, [ip]
 8012642:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012644:	4567      	cmp	r7, ip
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012646:	bf18      	it	ne
 8012648:	f8c7 c000 	strne.w	ip, [r7]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801264c:	6920      	ldr	r0, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801264e:	ebae 0201 	sub.w	r2, lr, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012652:	4282      	cmp	r2, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012654:	bf38      	it	cc
 8012656:	6122      	strcc	r2, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012658:	6162      	str	r2, [r4, #20]
					xNumberOfSuccessfulAllocations++;
 801265a:	69a2      	ldr	r2, [r4, #24]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801265c:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 801265e:	2000      	movs	r0, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012660:	f103 0508 	add.w	r5, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012664:	6059      	str	r1, [r3, #4]
					xNumberOfSuccessfulAllocations++;
 8012666:	3201      	adds	r2, #1
					pxBlock->pxNextFreeBlock = NULL;
 8012668:	6018      	str	r0, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801266a:	61a2      	str	r2, [r4, #24]
	( void ) xTaskResumeAll();
 801266c:	f7ff fa90 	bl	8011b90 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012670:	076b      	lsls	r3, r5, #29
 8012672:	d0b4      	beq.n	80125de <pvPortMalloc+0x76>
 8012674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012678:	f383 8811 	msr	BASEPRI, r3
 801267c:	f3bf 8f6f 	isb	sy
 8012680:	f3bf 8f4f 	dsb	sy
 8012684:	e7fe      	b.n	8012684 <pvPortMalloc+0x11c>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012686:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012688:	eb07 0108 	add.w	r1, r7, r8
 801268c:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801268e:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012692:	d001      	beq.n	8012698 <pvPortMalloc+0x130>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012694:	6859      	ldr	r1, [r3, #4]
 8012696:	e7d9      	b.n	801264c <pvPortMalloc+0xe4>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012698:	46bc      	mov	ip, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801269a:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801269c:	bf1c      	itt	ne
 801269e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80126a0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80126a2:	f8cc 2000 	str.w	r2, [ip]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80126a6:	bf1c      	itt	ne
 80126a8:	4441      	addne	r1, r8
 80126aa:	f8cc 1004 	strne.w	r1, [ip, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80126ae:	6859      	ldr	r1, [r3, #4]
 80126b0:	e7c8      	b.n	8012644 <pvPortMalloc+0xdc>
 80126b2:	bf00      	nop
 80126b4:	200033e0 	.word	0x200033e0
 80126b8:	20003400 	.word	0x20003400
 80126bc:	200067f8 	.word	0x200067f8

080126c0 <vPortFree>:
	if( pv != NULL )
 80126c0:	b1e0      	cbz	r0, 80126fc <vPortFree+0x3c>
{
 80126c2:	b5f0      	push	{r4, r5, r6, r7, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80126c4:	4c2b      	ldr	r4, [pc, #172]	@ (8012774 <vPortFree+0xb4>)
 80126c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80126ca:	68e2      	ldr	r2, [r4, #12]
 80126cc:	4213      	tst	r3, r2
{
 80126ce:	b083      	sub	sp, #12
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80126d0:	d00b      	beq.n	80126ea <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80126d2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80126d6:	b191      	cbz	r1, 80126fe <vPortFree+0x3e>
 80126d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126dc:	f383 8811 	msr	BASEPRI, r3
 80126e0:	f3bf 8f6f 	isb	sy
 80126e4:	f3bf 8f4f 	dsb	sy
 80126e8:	e7fe      	b.n	80126e8 <vPortFree+0x28>
 80126ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ee:	f383 8811 	msr	BASEPRI, r3
 80126f2:	f3bf 8f6f 	isb	sy
 80126f6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80126fa:	e7fe      	b.n	80126fa <vPortFree+0x3a>
 80126fc:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80126fe:	ea23 0302 	bic.w	r3, r3, r2
 8012702:	f840 3c04 	str.w	r3, [r0, #-4]
 8012706:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8012708:	f7ff fa38 	bl	8011b7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801270c:	9801      	ldr	r0, [sp, #4]
 801270e:	6963      	ldr	r3, [r4, #20]
 8012710:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8012714:	4433      	add	r3, r6
 8012716:	6163      	str	r3, [r4, #20]
		puc -= xHeapStructSize;
 8012718:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801271c:	4623      	mov	r3, r4
 801271e:	4619      	mov	r1, r3
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	429a      	cmp	r2, r3
 8012724:	d8fb      	bhi.n	801271e <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012726:	684f      	ldr	r7, [r1, #4]
 8012728:	19cd      	adds	r5, r1, r7
 801272a:	42aa      	cmp	r2, r5
 801272c:	d010      	beq.n	8012750 <vPortFree+0x90>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801272e:	eb02 0e06 	add.w	lr, r2, r6
 8012732:	4573      	cmp	r3, lr
 8012734:	d012      	beq.n	801275c <vPortFree+0x9c>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012736:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 801273a:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801273c:	bf18      	it	ne
 801273e:	600a      	strne	r2, [r1, #0]
					xNumberOfSuccessfulFrees++;
 8012740:	69e3      	ldr	r3, [r4, #28]
 8012742:	3301      	adds	r3, #1
 8012744:	61e3      	str	r3, [r4, #28]
}
 8012746:	b003      	add	sp, #12
 8012748:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				( void ) xTaskResumeAll();
 801274c:	f7ff ba20 	b.w	8011b90 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012750:	443e      	add	r6, r7
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012752:	198a      	adds	r2, r1, r6
 8012754:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012756:	604e      	str	r6, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012758:	d1f2      	bne.n	8012740 <vPortFree+0x80>
 801275a:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801275c:	68a0      	ldr	r0, [r4, #8]
 801275e:	4283      	cmp	r3, r0
 8012760:	d005      	beq.n	801276e <vPortFree+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012762:	6858      	ldr	r0, [r3, #4]
 8012764:	eb00 0c06 	add.w	ip, r0, r6
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012768:	6818      	ldr	r0, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801276a:	f8c2 c004 	str.w	ip, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801276e:	6010      	str	r0, [r2, #0]
 8012770:	e7e3      	b.n	801273a <vPortFree+0x7a>
 8012772:	bf00      	nop
 8012774:	200033e0 	.word	0x200033e0

08012778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012778:	4808      	ldr	r0, [pc, #32]	@ (801279c <prvPortStartFirstTask+0x24>)
 801277a:	6800      	ldr	r0, [r0, #0]
 801277c:	6800      	ldr	r0, [r0, #0]
 801277e:	f380 8808 	msr	MSP, r0
 8012782:	f04f 0000 	mov.w	r0, #0
 8012786:	f380 8814 	msr	CONTROL, r0
 801278a:	b662      	cpsie	i
 801278c:	b661      	cpsie	f
 801278e:	f3bf 8f4f 	dsb	sy
 8012792:	f3bf 8f6f 	isb	sy
 8012796:	df00      	svc	0
 8012798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801279a:	0000      	.short	0x0000
 801279c:	e000ed08 	.word	0xe000ed08

080127a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80127a0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80127b0 <vPortEnableVFP+0x10>
 80127a4:	6801      	ldr	r1, [r0, #0]
 80127a6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80127aa:	6001      	str	r1, [r0, #0]
 80127ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80127ae:	0000      	.short	0x0000
 80127b0:	e000ed88 	.word	0xe000ed88

080127b4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80127b4:	4b0e      	ldr	r3, [pc, #56]	@ (80127f0 <prvTaskExitError+0x3c>)
 80127b6:	681b      	ldr	r3, [r3, #0]
{
 80127b8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80127ba:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80127bc:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 80127be:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80127c0:	d008      	beq.n	80127d4 <prvTaskExitError+0x20>
 80127c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127c6:	f383 8811 	msr	BASEPRI, r3
 80127ca:	f3bf 8f6f 	isb	sy
 80127ce:	f3bf 8f4f 	dsb	sy
 80127d2:	e7fe      	b.n	80127d2 <prvTaskExitError+0x1e>
 80127d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127d8:	f383 8811 	msr	BASEPRI, r3
 80127dc:	f3bf 8f6f 	isb	sy
 80127e0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80127e4:	9b01      	ldr	r3, [sp, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d0fc      	beq.n	80127e4 <prvTaskExitError+0x30>
}
 80127ea:	b002      	add	sp, #8
 80127ec:	4770      	bx	lr
 80127ee:	bf00      	nop
 80127f0:	20000300 	.word	0x20000300

080127f4 <pxPortInitialiseStack>:
{
 80127f4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80127f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80127fa:	4c07      	ldr	r4, [pc, #28]	@ (8012818 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80127fc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012800:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012804:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012808:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801280c:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 8012810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012814:	3844      	subs	r0, #68	@ 0x44
 8012816:	4770      	bx	lr
 8012818:	080127b5 	.word	0x080127b5
 801281c:	00000000 	.word	0x00000000

08012820 <SVC_Handler>:
	__asm volatile (
 8012820:	4b07      	ldr	r3, [pc, #28]	@ (8012840 <pxCurrentTCBConst2>)
 8012822:	6819      	ldr	r1, [r3, #0]
 8012824:	6808      	ldr	r0, [r1, #0]
 8012826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801282a:	f380 8809 	msr	PSP, r0
 801282e:	f3bf 8f6f 	isb	sy
 8012832:	f04f 0000 	mov.w	r0, #0
 8012836:	f380 8811 	msr	BASEPRI, r0
 801283a:	4770      	bx	lr
 801283c:	f3af 8000 	nop.w

08012840 <pxCurrentTCBConst2>:
 8012840:	20003324 	.word	0x20003324

08012844 <vPortEnterCritical>:
 8012844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012848:	f383 8811 	msr	BASEPRI, r3
 801284c:	f3bf 8f6f 	isb	sy
 8012850:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8012854:	4a0b      	ldr	r2, [pc, #44]	@ (8012884 <vPortEnterCritical+0x40>)
 8012856:	6813      	ldr	r3, [r2, #0]
 8012858:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801285a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801285c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801285e:	d000      	beq.n	8012862 <vPortEnterCritical+0x1e>
}
 8012860:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012862:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012866:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801286a:	b2db      	uxtb	r3, r3
 801286c:	2b00      	cmp	r3, #0
 801286e:	d0f7      	beq.n	8012860 <vPortEnterCritical+0x1c>
 8012870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012874:	f383 8811 	msr	BASEPRI, r3
 8012878:	f3bf 8f6f 	isb	sy
 801287c:	f3bf 8f4f 	dsb	sy
 8012880:	e7fe      	b.n	8012880 <vPortEnterCritical+0x3c>
 8012882:	bf00      	nop
 8012884:	20000300 	.word	0x20000300

08012888 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8012888:	4a08      	ldr	r2, [pc, #32]	@ (80128ac <vPortExitCritical+0x24>)
 801288a:	6813      	ldr	r3, [r2, #0]
 801288c:	b943      	cbnz	r3, 80128a0 <vPortExitCritical+0x18>
 801288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	e7fe      	b.n	801289e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80128a0:	3b01      	subs	r3, #1
 80128a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80128a4:	b90b      	cbnz	r3, 80128aa <vPortExitCritical+0x22>
	__asm volatile
 80128a6:	f383 8811 	msr	BASEPRI, r3
}
 80128aa:	4770      	bx	lr
 80128ac:	20000300 	.word	0x20000300

080128b0 <PendSV_Handler>:
	__asm volatile
 80128b0:	f3ef 8009 	mrs	r0, PSP
 80128b4:	f3bf 8f6f 	isb	sy
 80128b8:	4b15      	ldr	r3, [pc, #84]	@ (8012910 <pxCurrentTCBConst>)
 80128ba:	681a      	ldr	r2, [r3, #0]
 80128bc:	f01e 0f10 	tst.w	lr, #16
 80128c0:	bf08      	it	eq
 80128c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80128c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ca:	6010      	str	r0, [r2, #0]
 80128cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80128d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80128d4:	f380 8811 	msr	BASEPRI, r0
 80128d8:	f3bf 8f4f 	dsb	sy
 80128dc:	f3bf 8f6f 	isb	sy
 80128e0:	f7ff f97e 	bl	8011be0 <vTaskSwitchContext>
 80128e4:	f04f 0000 	mov.w	r0, #0
 80128e8:	f380 8811 	msr	BASEPRI, r0
 80128ec:	bc09      	pop	{r0, r3}
 80128ee:	6819      	ldr	r1, [r3, #0]
 80128f0:	6808      	ldr	r0, [r1, #0]
 80128f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f6:	f01e 0f10 	tst.w	lr, #16
 80128fa:	bf08      	it	eq
 80128fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012900:	f380 8809 	msr	PSP, r0
 8012904:	f3bf 8f6f 	isb	sy
 8012908:	4770      	bx	lr
 801290a:	bf00      	nop
 801290c:	f3af 8000 	nop.w

08012910 <pxCurrentTCBConst>:
 8012910:	20003324 	.word	0x20003324

08012914 <xPortSysTickHandler>:
{
 8012914:	b508      	push	{r3, lr}
	__asm volatile
 8012916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801291a:	f383 8811 	msr	BASEPRI, r3
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8012926:	f7ff f94b 	bl	8011bc0 <xTaskIncrementTick>
 801292a:	b128      	cbz	r0, 8012938 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801292c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012934:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8012938:	2300      	movs	r3, #0
 801293a:	f383 8811 	msr	BASEPRI, r3
}
 801293e:	bd08      	pop	{r3, pc}

08012940 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012940:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8012944:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012946:	4906      	ldr	r1, [pc, #24]	@ (8012960 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012948:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801294a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801294c:	680b      	ldr	r3, [r1, #0]
 801294e:	4905      	ldr	r1, [pc, #20]	@ (8012964 <vPortSetupTimerInterrupt+0x24>)
 8012950:	fba1 1303 	umull	r1, r3, r1, r3
 8012954:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012956:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012958:	3b01      	subs	r3, #1
 801295a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801295c:	6110      	str	r0, [r2, #16]
}
 801295e:	4770      	bx	lr
 8012960:	200001e0 	.word	0x200001e0
 8012964:	10624dd3 	.word	0x10624dd3

08012968 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012968:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801296c:	4a47      	ldr	r2, [pc, #284]	@ (8012a8c <xPortStartScheduler+0x124>)
 801296e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8012972:	4291      	cmp	r1, r2
 8012974:	d040      	beq.n	80129f8 <xPortStartScheduler+0x90>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012976:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801297a:	4b45      	ldr	r3, [pc, #276]	@ (8012a90 <xPortStartScheduler+0x128>)
 801297c:	429a      	cmp	r2, r3
 801297e:	d032      	beq.n	80129e6 <xPortStartScheduler+0x7e>
{
 8012980:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012982:	4b44      	ldr	r3, [pc, #272]	@ (8012a94 <xPortStartScheduler+0x12c>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012984:	4844      	ldr	r0, [pc, #272]	@ (8012a98 <xPortStartScheduler+0x130>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012986:	781a      	ldrb	r2, [r3, #0]
{
 8012988:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801298a:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801298c:	b2d2      	uxtb	r2, r2
 801298e:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012990:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	b2db      	uxtb	r3, r3
 8012996:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801299a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801299e:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80129a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80129a6:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129a8:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80129aa:	7003      	strb	r3, [r0, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80129ac:	6041      	str	r1, [r0, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129ae:	bf48      	it	mi
 80129b0:	2206      	movmi	r2, #6
 80129b2:	d50f      	bpl.n	80129d4 <xPortStartScheduler+0x6c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80129b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129c4:	061b      	lsls	r3, r3, #24
 80129c6:	4611      	mov	r1, r2
 80129c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80129cc:	d4f2      	bmi.n	80129b4 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80129ce:	2903      	cmp	r1, #3
 80129d0:	d01b      	beq.n	8012a0a <xPortStartScheduler+0xa2>
 80129d2:	6041      	str	r1, [r0, #4]
	__asm volatile
 80129d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d8:	f383 8811 	msr	BASEPRI, r3
 80129dc:	f3bf 8f6f 	isb	sy
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	e7fe      	b.n	80129e4 <xPortStartScheduler+0x7c>
 80129e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129ea:	f383 8811 	msr	BASEPRI, r3
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80129f6:	e7fe      	b.n	80129f6 <xPortStartScheduler+0x8e>
 80129f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129fc:	f383 8811 	msr	BASEPRI, r3
 8012a00:	f3bf 8f6f 	isb	sy
 8012a04:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012a08:	e7fe      	b.n	8012a08 <xPortStartScheduler+0xa0>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012a0a:	9b02      	ldr	r3, [sp, #8]
 8012a0c:	4a21      	ldr	r2, [pc, #132]	@ (8012a94 <xPortStartScheduler+0x12c>)
	uxCriticalNesting = 0;
 8012a0e:	4d23      	ldr	r5, [pc, #140]	@ (8012a9c <xPortStartScheduler+0x134>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012a10:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012a18:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8012a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012a20:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a24:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8012a28:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012a2c:	f44f 7240 	mov.w	r2, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a30:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 8012a34:	2600      	movs	r6, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012a36:	6042      	str	r2, [r0, #4]
	vPortSetupTimerInterrupt();
 8012a38:	f7ff ff82 	bl	8012940 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8012a3c:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8012a3e:	f7ff feaf 	bl	80127a0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012a42:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8012a46:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012a4a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8012a4e:	f7ff fe93 	bl	8012778 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8012a52:	f7ff f8c5 	bl	8011be0 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8012a56:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8012a58:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	d008      	beq.n	8012a70 <xPortStartScheduler+0x108>
 8012a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a62:	f383 8811 	msr	BASEPRI, r3
 8012a66:	f3bf 8f6f 	isb	sy
 8012a6a:	f3bf 8f4f 	dsb	sy
 8012a6e:	e7fe      	b.n	8012a6e <xPortStartScheduler+0x106>
 8012a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a74:	f383 8811 	msr	BASEPRI, r3
 8012a78:	f3bf 8f6f 	isb	sy
 8012a7c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8012a80:	9b03      	ldr	r3, [sp, #12]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d0fc      	beq.n	8012a80 <xPortStartScheduler+0x118>
}
 8012a86:	2000      	movs	r0, #0
 8012a88:	b004      	add	sp, #16
 8012a8a:	bd70      	pop	{r4, r5, r6, pc}
 8012a8c:	410fc271 	.word	0x410fc271
 8012a90:	410fc270 	.word	0x410fc270
 8012a94:	e000e400 	.word	0xe000e400
 8012a98:	20006800 	.word	0x20006800
 8012a9c:	20000300 	.word	0x20000300

08012aa0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012aa0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012aa4:	2b0f      	cmp	r3, #15
 8012aa6:	d812      	bhi.n	8012ace <vPortValidateInterruptPriority+0x2e>
 8012aa8:	4a11      	ldr	r2, [pc, #68]	@ (8012af0 <vPortValidateInterruptPriority+0x50>)
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012aaa:	6852      	ldr	r2, [r2, #4]
 8012aac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012ab0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8012ab4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d917      	bls.n	8012aec <vPortValidateInterruptPriority+0x4c>
 8012abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ac0:	f383 8811 	msr	BASEPRI, r3
 8012ac4:	f3bf 8f6f 	isb	sy
 8012ac8:	f3bf 8f4f 	dsb	sy
 8012acc:	e7fe      	b.n	8012acc <vPortValidateInterruptPriority+0x2c>
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012ace:	4909      	ldr	r1, [pc, #36]	@ (8012af4 <vPortValidateInterruptPriority+0x54>)
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012ad0:	4a07      	ldr	r2, [pc, #28]	@ (8012af0 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012ad2:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012ad4:	7811      	ldrb	r1, [r2, #0]
 8012ad6:	4299      	cmp	r1, r3
 8012ad8:	d9e7      	bls.n	8012aaa <vPortValidateInterruptPriority+0xa>
 8012ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ade:	f383 8811 	msr	BASEPRI, r3
 8012ae2:	f3bf 8f6f 	isb	sy
 8012ae6:	f3bf 8f4f 	dsb	sy
 8012aea:	e7fe      	b.n	8012aea <vPortValidateInterruptPriority+0x4a>
	}
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	20006800 	.word	0x20006800
 8012af4:	e000e3f0 	.word	0xe000e3f0

08012af8 <__cvt>:
 8012af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012afc:	ec57 6b10 	vmov	r6, r7, d0
 8012b00:	2f00      	cmp	r7, #0
 8012b02:	460c      	mov	r4, r1
 8012b04:	4619      	mov	r1, r3
 8012b06:	463b      	mov	r3, r7
 8012b08:	bfbb      	ittet	lt
 8012b0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012b0e:	461f      	movlt	r7, r3
 8012b10:	2300      	movge	r3, #0
 8012b12:	232d      	movlt	r3, #45	@ 0x2d
 8012b14:	700b      	strb	r3, [r1, #0]
 8012b16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012b1c:	4691      	mov	r9, r2
 8012b1e:	f023 0820 	bic.w	r8, r3, #32
 8012b22:	bfbc      	itt	lt
 8012b24:	4632      	movlt	r2, r6
 8012b26:	4616      	movlt	r6, r2
 8012b28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012b2c:	d005      	beq.n	8012b3a <__cvt+0x42>
 8012b2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012b32:	d100      	bne.n	8012b36 <__cvt+0x3e>
 8012b34:	3401      	adds	r4, #1
 8012b36:	2102      	movs	r1, #2
 8012b38:	e000      	b.n	8012b3c <__cvt+0x44>
 8012b3a:	2103      	movs	r1, #3
 8012b3c:	ab03      	add	r3, sp, #12
 8012b3e:	9301      	str	r3, [sp, #4]
 8012b40:	ab02      	add	r3, sp, #8
 8012b42:	9300      	str	r3, [sp, #0]
 8012b44:	ec47 6b10 	vmov	d0, r6, r7
 8012b48:	4653      	mov	r3, sl
 8012b4a:	4622      	mov	r2, r4
 8012b4c:	f000 fe48 	bl	80137e0 <_dtoa_r>
 8012b50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012b54:	4605      	mov	r5, r0
 8012b56:	d119      	bne.n	8012b8c <__cvt+0x94>
 8012b58:	f019 0f01 	tst.w	r9, #1
 8012b5c:	d00e      	beq.n	8012b7c <__cvt+0x84>
 8012b5e:	eb00 0904 	add.w	r9, r0, r4
 8012b62:	2200      	movs	r2, #0
 8012b64:	2300      	movs	r3, #0
 8012b66:	4630      	mov	r0, r6
 8012b68:	4639      	mov	r1, r7
 8012b6a:	f7ed ffc5 	bl	8000af8 <__aeabi_dcmpeq>
 8012b6e:	b108      	cbz	r0, 8012b74 <__cvt+0x7c>
 8012b70:	f8cd 900c 	str.w	r9, [sp, #12]
 8012b74:	2230      	movs	r2, #48	@ 0x30
 8012b76:	9b03      	ldr	r3, [sp, #12]
 8012b78:	454b      	cmp	r3, r9
 8012b7a:	d31e      	bcc.n	8012bba <__cvt+0xc2>
 8012b7c:	9b03      	ldr	r3, [sp, #12]
 8012b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b80:	1b5b      	subs	r3, r3, r5
 8012b82:	4628      	mov	r0, r5
 8012b84:	6013      	str	r3, [r2, #0]
 8012b86:	b004      	add	sp, #16
 8012b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012b90:	eb00 0904 	add.w	r9, r0, r4
 8012b94:	d1e5      	bne.n	8012b62 <__cvt+0x6a>
 8012b96:	7803      	ldrb	r3, [r0, #0]
 8012b98:	2b30      	cmp	r3, #48	@ 0x30
 8012b9a:	d10a      	bne.n	8012bb2 <__cvt+0xba>
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	4630      	mov	r0, r6
 8012ba2:	4639      	mov	r1, r7
 8012ba4:	f7ed ffa8 	bl	8000af8 <__aeabi_dcmpeq>
 8012ba8:	b918      	cbnz	r0, 8012bb2 <__cvt+0xba>
 8012baa:	f1c4 0401 	rsb	r4, r4, #1
 8012bae:	f8ca 4000 	str.w	r4, [sl]
 8012bb2:	f8da 3000 	ldr.w	r3, [sl]
 8012bb6:	4499      	add	r9, r3
 8012bb8:	e7d3      	b.n	8012b62 <__cvt+0x6a>
 8012bba:	1c59      	adds	r1, r3, #1
 8012bbc:	9103      	str	r1, [sp, #12]
 8012bbe:	701a      	strb	r2, [r3, #0]
 8012bc0:	e7d9      	b.n	8012b76 <__cvt+0x7e>

08012bc2 <__exponent>:
 8012bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bc4:	2900      	cmp	r1, #0
 8012bc6:	bfba      	itte	lt
 8012bc8:	4249      	neglt	r1, r1
 8012bca:	232d      	movlt	r3, #45	@ 0x2d
 8012bcc:	232b      	movge	r3, #43	@ 0x2b
 8012bce:	2909      	cmp	r1, #9
 8012bd0:	7002      	strb	r2, [r0, #0]
 8012bd2:	7043      	strb	r3, [r0, #1]
 8012bd4:	dd29      	ble.n	8012c2a <__exponent+0x68>
 8012bd6:	f10d 0307 	add.w	r3, sp, #7
 8012bda:	461d      	mov	r5, r3
 8012bdc:	270a      	movs	r7, #10
 8012bde:	461a      	mov	r2, r3
 8012be0:	fbb1 f6f7 	udiv	r6, r1, r7
 8012be4:	fb07 1416 	mls	r4, r7, r6, r1
 8012be8:	3430      	adds	r4, #48	@ 0x30
 8012bea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012bee:	460c      	mov	r4, r1
 8012bf0:	2c63      	cmp	r4, #99	@ 0x63
 8012bf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012bf6:	4631      	mov	r1, r6
 8012bf8:	dcf1      	bgt.n	8012bde <__exponent+0x1c>
 8012bfa:	3130      	adds	r1, #48	@ 0x30
 8012bfc:	1e94      	subs	r4, r2, #2
 8012bfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012c02:	1c41      	adds	r1, r0, #1
 8012c04:	4623      	mov	r3, r4
 8012c06:	42ab      	cmp	r3, r5
 8012c08:	d30a      	bcc.n	8012c20 <__exponent+0x5e>
 8012c0a:	f10d 0309 	add.w	r3, sp, #9
 8012c0e:	1a9b      	subs	r3, r3, r2
 8012c10:	42ac      	cmp	r4, r5
 8012c12:	bf88      	it	hi
 8012c14:	2300      	movhi	r3, #0
 8012c16:	3302      	adds	r3, #2
 8012c18:	4403      	add	r3, r0
 8012c1a:	1a18      	subs	r0, r3, r0
 8012c1c:	b003      	add	sp, #12
 8012c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012c24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012c28:	e7ed      	b.n	8012c06 <__exponent+0x44>
 8012c2a:	2330      	movs	r3, #48	@ 0x30
 8012c2c:	3130      	adds	r1, #48	@ 0x30
 8012c2e:	7083      	strb	r3, [r0, #2]
 8012c30:	70c1      	strb	r1, [r0, #3]
 8012c32:	1d03      	adds	r3, r0, #4
 8012c34:	e7f1      	b.n	8012c1a <__exponent+0x58>
	...

08012c38 <_printf_float>:
 8012c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c3c:	b08d      	sub	sp, #52	@ 0x34
 8012c3e:	460c      	mov	r4, r1
 8012c40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012c44:	4616      	mov	r6, r2
 8012c46:	461f      	mov	r7, r3
 8012c48:	4605      	mov	r5, r0
 8012c4a:	f000 fcbb 	bl	80135c4 <_localeconv_r>
 8012c4e:	6803      	ldr	r3, [r0, #0]
 8012c50:	9304      	str	r3, [sp, #16]
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7ed fb24 	bl	80002a0 <strlen>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8012c60:	9005      	str	r0, [sp, #20]
 8012c62:	3307      	adds	r3, #7
 8012c64:	f023 0307 	bic.w	r3, r3, #7
 8012c68:	f103 0208 	add.w	r2, r3, #8
 8012c6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012c70:	f8d4 b000 	ldr.w	fp, [r4]
 8012c74:	f8c8 2000 	str.w	r2, [r8]
 8012c78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012c7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012c80:	9307      	str	r3, [sp, #28]
 8012c82:	f8cd 8018 	str.w	r8, [sp, #24]
 8012c86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8012f00 <_printf_float+0x2c8>)
 8012c90:	f04f 32ff 	mov.w	r2, #4294967295
 8012c94:	f7ed ff62 	bl	8000b5c <__aeabi_dcmpun>
 8012c98:	bb70      	cbnz	r0, 8012cf8 <_printf_float+0xc0>
 8012c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c9e:	4b98      	ldr	r3, [pc, #608]	@ (8012f00 <_printf_float+0x2c8>)
 8012ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ca4:	f7ed ff3c 	bl	8000b20 <__aeabi_dcmple>
 8012ca8:	bb30      	cbnz	r0, 8012cf8 <_printf_float+0xc0>
 8012caa:	2200      	movs	r2, #0
 8012cac:	2300      	movs	r3, #0
 8012cae:	4640      	mov	r0, r8
 8012cb0:	4649      	mov	r1, r9
 8012cb2:	f7ed ff2b 	bl	8000b0c <__aeabi_dcmplt>
 8012cb6:	b110      	cbz	r0, 8012cbe <_printf_float+0x86>
 8012cb8:	232d      	movs	r3, #45	@ 0x2d
 8012cba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cbe:	4a91      	ldr	r2, [pc, #580]	@ (8012f04 <_printf_float+0x2cc>)
 8012cc0:	4b91      	ldr	r3, [pc, #580]	@ (8012f08 <_printf_float+0x2d0>)
 8012cc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012cc6:	bf94      	ite	ls
 8012cc8:	4690      	movls	r8, r2
 8012cca:	4698      	movhi	r8, r3
 8012ccc:	2303      	movs	r3, #3
 8012cce:	6123      	str	r3, [r4, #16]
 8012cd0:	f02b 0304 	bic.w	r3, fp, #4
 8012cd4:	6023      	str	r3, [r4, #0]
 8012cd6:	f04f 0900 	mov.w	r9, #0
 8012cda:	9700      	str	r7, [sp, #0]
 8012cdc:	4633      	mov	r3, r6
 8012cde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012ce0:	4621      	mov	r1, r4
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	f000 f9d2 	bl	801308c <_printf_common>
 8012ce8:	3001      	adds	r0, #1
 8012cea:	f040 808d 	bne.w	8012e08 <_printf_float+0x1d0>
 8012cee:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf2:	b00d      	add	sp, #52	@ 0x34
 8012cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf8:	4642      	mov	r2, r8
 8012cfa:	464b      	mov	r3, r9
 8012cfc:	4640      	mov	r0, r8
 8012cfe:	4649      	mov	r1, r9
 8012d00:	f7ed ff2c 	bl	8000b5c <__aeabi_dcmpun>
 8012d04:	b140      	cbz	r0, 8012d18 <_printf_float+0xe0>
 8012d06:	464b      	mov	r3, r9
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	bfbc      	itt	lt
 8012d0c:	232d      	movlt	r3, #45	@ 0x2d
 8012d0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012d12:	4a7e      	ldr	r2, [pc, #504]	@ (8012f0c <_printf_float+0x2d4>)
 8012d14:	4b7e      	ldr	r3, [pc, #504]	@ (8012f10 <_printf_float+0x2d8>)
 8012d16:	e7d4      	b.n	8012cc2 <_printf_float+0x8a>
 8012d18:	6863      	ldr	r3, [r4, #4]
 8012d1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012d1e:	9206      	str	r2, [sp, #24]
 8012d20:	1c5a      	adds	r2, r3, #1
 8012d22:	d13b      	bne.n	8012d9c <_printf_float+0x164>
 8012d24:	2306      	movs	r3, #6
 8012d26:	6063      	str	r3, [r4, #4]
 8012d28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	6022      	str	r2, [r4, #0]
 8012d30:	9303      	str	r3, [sp, #12]
 8012d32:	ab0a      	add	r3, sp, #40	@ 0x28
 8012d34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012d38:	ab09      	add	r3, sp, #36	@ 0x24
 8012d3a:	9300      	str	r3, [sp, #0]
 8012d3c:	6861      	ldr	r1, [r4, #4]
 8012d3e:	ec49 8b10 	vmov	d0, r8, r9
 8012d42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012d46:	4628      	mov	r0, r5
 8012d48:	f7ff fed6 	bl	8012af8 <__cvt>
 8012d4c:	9b06      	ldr	r3, [sp, #24]
 8012d4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d50:	2b47      	cmp	r3, #71	@ 0x47
 8012d52:	4680      	mov	r8, r0
 8012d54:	d129      	bne.n	8012daa <_printf_float+0x172>
 8012d56:	1cc8      	adds	r0, r1, #3
 8012d58:	db02      	blt.n	8012d60 <_printf_float+0x128>
 8012d5a:	6863      	ldr	r3, [r4, #4]
 8012d5c:	4299      	cmp	r1, r3
 8012d5e:	dd41      	ble.n	8012de4 <_printf_float+0x1ac>
 8012d60:	f1aa 0a02 	sub.w	sl, sl, #2
 8012d64:	fa5f fa8a 	uxtb.w	sl, sl
 8012d68:	3901      	subs	r1, #1
 8012d6a:	4652      	mov	r2, sl
 8012d6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012d70:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d72:	f7ff ff26 	bl	8012bc2 <__exponent>
 8012d76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d78:	1813      	adds	r3, r2, r0
 8012d7a:	2a01      	cmp	r2, #1
 8012d7c:	4681      	mov	r9, r0
 8012d7e:	6123      	str	r3, [r4, #16]
 8012d80:	dc02      	bgt.n	8012d88 <_printf_float+0x150>
 8012d82:	6822      	ldr	r2, [r4, #0]
 8012d84:	07d2      	lsls	r2, r2, #31
 8012d86:	d501      	bpl.n	8012d8c <_printf_float+0x154>
 8012d88:	3301      	adds	r3, #1
 8012d8a:	6123      	str	r3, [r4, #16]
 8012d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d0a2      	beq.n	8012cda <_printf_float+0xa2>
 8012d94:	232d      	movs	r3, #45	@ 0x2d
 8012d96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d9a:	e79e      	b.n	8012cda <_printf_float+0xa2>
 8012d9c:	9a06      	ldr	r2, [sp, #24]
 8012d9e:	2a47      	cmp	r2, #71	@ 0x47
 8012da0:	d1c2      	bne.n	8012d28 <_printf_float+0xf0>
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d1c0      	bne.n	8012d28 <_printf_float+0xf0>
 8012da6:	2301      	movs	r3, #1
 8012da8:	e7bd      	b.n	8012d26 <_printf_float+0xee>
 8012daa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012dae:	d9db      	bls.n	8012d68 <_printf_float+0x130>
 8012db0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012db4:	d118      	bne.n	8012de8 <_printf_float+0x1b0>
 8012db6:	2900      	cmp	r1, #0
 8012db8:	6863      	ldr	r3, [r4, #4]
 8012dba:	dd0b      	ble.n	8012dd4 <_printf_float+0x19c>
 8012dbc:	6121      	str	r1, [r4, #16]
 8012dbe:	b913      	cbnz	r3, 8012dc6 <_printf_float+0x18e>
 8012dc0:	6822      	ldr	r2, [r4, #0]
 8012dc2:	07d0      	lsls	r0, r2, #31
 8012dc4:	d502      	bpl.n	8012dcc <_printf_float+0x194>
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	440b      	add	r3, r1
 8012dca:	6123      	str	r3, [r4, #16]
 8012dcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012dce:	f04f 0900 	mov.w	r9, #0
 8012dd2:	e7db      	b.n	8012d8c <_printf_float+0x154>
 8012dd4:	b913      	cbnz	r3, 8012ddc <_printf_float+0x1a4>
 8012dd6:	6822      	ldr	r2, [r4, #0]
 8012dd8:	07d2      	lsls	r2, r2, #31
 8012dda:	d501      	bpl.n	8012de0 <_printf_float+0x1a8>
 8012ddc:	3302      	adds	r3, #2
 8012dde:	e7f4      	b.n	8012dca <_printf_float+0x192>
 8012de0:	2301      	movs	r3, #1
 8012de2:	e7f2      	b.n	8012dca <_printf_float+0x192>
 8012de4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012dea:	4299      	cmp	r1, r3
 8012dec:	db05      	blt.n	8012dfa <_printf_float+0x1c2>
 8012dee:	6823      	ldr	r3, [r4, #0]
 8012df0:	6121      	str	r1, [r4, #16]
 8012df2:	07d8      	lsls	r0, r3, #31
 8012df4:	d5ea      	bpl.n	8012dcc <_printf_float+0x194>
 8012df6:	1c4b      	adds	r3, r1, #1
 8012df8:	e7e7      	b.n	8012dca <_printf_float+0x192>
 8012dfa:	2900      	cmp	r1, #0
 8012dfc:	bfd4      	ite	le
 8012dfe:	f1c1 0202 	rsble	r2, r1, #2
 8012e02:	2201      	movgt	r2, #1
 8012e04:	4413      	add	r3, r2
 8012e06:	e7e0      	b.n	8012dca <_printf_float+0x192>
 8012e08:	6823      	ldr	r3, [r4, #0]
 8012e0a:	055a      	lsls	r2, r3, #21
 8012e0c:	d407      	bmi.n	8012e1e <_printf_float+0x1e6>
 8012e0e:	6923      	ldr	r3, [r4, #16]
 8012e10:	4642      	mov	r2, r8
 8012e12:	4631      	mov	r1, r6
 8012e14:	4628      	mov	r0, r5
 8012e16:	47b8      	blx	r7
 8012e18:	3001      	adds	r0, #1
 8012e1a:	d12b      	bne.n	8012e74 <_printf_float+0x23c>
 8012e1c:	e767      	b.n	8012cee <_printf_float+0xb6>
 8012e1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012e22:	f240 80dd 	bls.w	8012fe0 <_printf_float+0x3a8>
 8012e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	f7ed fe63 	bl	8000af8 <__aeabi_dcmpeq>
 8012e32:	2800      	cmp	r0, #0
 8012e34:	d033      	beq.n	8012e9e <_printf_float+0x266>
 8012e36:	4a37      	ldr	r2, [pc, #220]	@ (8012f14 <_printf_float+0x2dc>)
 8012e38:	2301      	movs	r3, #1
 8012e3a:	4631      	mov	r1, r6
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	47b8      	blx	r7
 8012e40:	3001      	adds	r0, #1
 8012e42:	f43f af54 	beq.w	8012cee <_printf_float+0xb6>
 8012e46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012e4a:	4543      	cmp	r3, r8
 8012e4c:	db02      	blt.n	8012e54 <_printf_float+0x21c>
 8012e4e:	6823      	ldr	r3, [r4, #0]
 8012e50:	07d8      	lsls	r0, r3, #31
 8012e52:	d50f      	bpl.n	8012e74 <_printf_float+0x23c>
 8012e54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e58:	4631      	mov	r1, r6
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	47b8      	blx	r7
 8012e5e:	3001      	adds	r0, #1
 8012e60:	f43f af45 	beq.w	8012cee <_printf_float+0xb6>
 8012e64:	f04f 0900 	mov.w	r9, #0
 8012e68:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e6c:	f104 0a1a 	add.w	sl, r4, #26
 8012e70:	45c8      	cmp	r8, r9
 8012e72:	dc09      	bgt.n	8012e88 <_printf_float+0x250>
 8012e74:	6823      	ldr	r3, [r4, #0]
 8012e76:	079b      	lsls	r3, r3, #30
 8012e78:	f100 8103 	bmi.w	8013082 <_printf_float+0x44a>
 8012e7c:	68e0      	ldr	r0, [r4, #12]
 8012e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e80:	4298      	cmp	r0, r3
 8012e82:	bfb8      	it	lt
 8012e84:	4618      	movlt	r0, r3
 8012e86:	e734      	b.n	8012cf2 <_printf_float+0xba>
 8012e88:	2301      	movs	r3, #1
 8012e8a:	4652      	mov	r2, sl
 8012e8c:	4631      	mov	r1, r6
 8012e8e:	4628      	mov	r0, r5
 8012e90:	47b8      	blx	r7
 8012e92:	3001      	adds	r0, #1
 8012e94:	f43f af2b 	beq.w	8012cee <_printf_float+0xb6>
 8012e98:	f109 0901 	add.w	r9, r9, #1
 8012e9c:	e7e8      	b.n	8012e70 <_printf_float+0x238>
 8012e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	dc39      	bgt.n	8012f18 <_printf_float+0x2e0>
 8012ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8012f14 <_printf_float+0x2dc>)
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	4631      	mov	r1, r6
 8012eaa:	4628      	mov	r0, r5
 8012eac:	47b8      	blx	r7
 8012eae:	3001      	adds	r0, #1
 8012eb0:	f43f af1d 	beq.w	8012cee <_printf_float+0xb6>
 8012eb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012eb8:	ea59 0303 	orrs.w	r3, r9, r3
 8012ebc:	d102      	bne.n	8012ec4 <_printf_float+0x28c>
 8012ebe:	6823      	ldr	r3, [r4, #0]
 8012ec0:	07d9      	lsls	r1, r3, #31
 8012ec2:	d5d7      	bpl.n	8012e74 <_printf_float+0x23c>
 8012ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ec8:	4631      	mov	r1, r6
 8012eca:	4628      	mov	r0, r5
 8012ecc:	47b8      	blx	r7
 8012ece:	3001      	adds	r0, #1
 8012ed0:	f43f af0d 	beq.w	8012cee <_printf_float+0xb6>
 8012ed4:	f04f 0a00 	mov.w	sl, #0
 8012ed8:	f104 0b1a 	add.w	fp, r4, #26
 8012edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ede:	425b      	negs	r3, r3
 8012ee0:	4553      	cmp	r3, sl
 8012ee2:	dc01      	bgt.n	8012ee8 <_printf_float+0x2b0>
 8012ee4:	464b      	mov	r3, r9
 8012ee6:	e793      	b.n	8012e10 <_printf_float+0x1d8>
 8012ee8:	2301      	movs	r3, #1
 8012eea:	465a      	mov	r2, fp
 8012eec:	4631      	mov	r1, r6
 8012eee:	4628      	mov	r0, r5
 8012ef0:	47b8      	blx	r7
 8012ef2:	3001      	adds	r0, #1
 8012ef4:	f43f aefb 	beq.w	8012cee <_printf_float+0xb6>
 8012ef8:	f10a 0a01 	add.w	sl, sl, #1
 8012efc:	e7ee      	b.n	8012edc <_printf_float+0x2a4>
 8012efe:	bf00      	nop
 8012f00:	7fefffff 	.word	0x7fefffff
 8012f04:	08015584 	.word	0x08015584
 8012f08:	08015588 	.word	0x08015588
 8012f0c:	0801558c 	.word	0x0801558c
 8012f10:	08015590 	.word	0x08015590
 8012f14:	08015594 	.word	0x08015594
 8012f18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012f1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012f1e:	4553      	cmp	r3, sl
 8012f20:	bfa8      	it	ge
 8012f22:	4653      	movge	r3, sl
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	4699      	mov	r9, r3
 8012f28:	dc36      	bgt.n	8012f98 <_printf_float+0x360>
 8012f2a:	f04f 0b00 	mov.w	fp, #0
 8012f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f32:	f104 021a 	add.w	r2, r4, #26
 8012f36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012f38:	9306      	str	r3, [sp, #24]
 8012f3a:	eba3 0309 	sub.w	r3, r3, r9
 8012f3e:	455b      	cmp	r3, fp
 8012f40:	dc31      	bgt.n	8012fa6 <_printf_float+0x36e>
 8012f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f44:	459a      	cmp	sl, r3
 8012f46:	dc3a      	bgt.n	8012fbe <_printf_float+0x386>
 8012f48:	6823      	ldr	r3, [r4, #0]
 8012f4a:	07da      	lsls	r2, r3, #31
 8012f4c:	d437      	bmi.n	8012fbe <_printf_float+0x386>
 8012f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f50:	ebaa 0903 	sub.w	r9, sl, r3
 8012f54:	9b06      	ldr	r3, [sp, #24]
 8012f56:	ebaa 0303 	sub.w	r3, sl, r3
 8012f5a:	4599      	cmp	r9, r3
 8012f5c:	bfa8      	it	ge
 8012f5e:	4699      	movge	r9, r3
 8012f60:	f1b9 0f00 	cmp.w	r9, #0
 8012f64:	dc33      	bgt.n	8012fce <_printf_float+0x396>
 8012f66:	f04f 0800 	mov.w	r8, #0
 8012f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f6e:	f104 0b1a 	add.w	fp, r4, #26
 8012f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f74:	ebaa 0303 	sub.w	r3, sl, r3
 8012f78:	eba3 0309 	sub.w	r3, r3, r9
 8012f7c:	4543      	cmp	r3, r8
 8012f7e:	f77f af79 	ble.w	8012e74 <_printf_float+0x23c>
 8012f82:	2301      	movs	r3, #1
 8012f84:	465a      	mov	r2, fp
 8012f86:	4631      	mov	r1, r6
 8012f88:	4628      	mov	r0, r5
 8012f8a:	47b8      	blx	r7
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	f43f aeae 	beq.w	8012cee <_printf_float+0xb6>
 8012f92:	f108 0801 	add.w	r8, r8, #1
 8012f96:	e7ec      	b.n	8012f72 <_printf_float+0x33a>
 8012f98:	4642      	mov	r2, r8
 8012f9a:	4631      	mov	r1, r6
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	47b8      	blx	r7
 8012fa0:	3001      	adds	r0, #1
 8012fa2:	d1c2      	bne.n	8012f2a <_printf_float+0x2f2>
 8012fa4:	e6a3      	b.n	8012cee <_printf_float+0xb6>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	4631      	mov	r1, r6
 8012faa:	4628      	mov	r0, r5
 8012fac:	9206      	str	r2, [sp, #24]
 8012fae:	47b8      	blx	r7
 8012fb0:	3001      	adds	r0, #1
 8012fb2:	f43f ae9c 	beq.w	8012cee <_printf_float+0xb6>
 8012fb6:	9a06      	ldr	r2, [sp, #24]
 8012fb8:	f10b 0b01 	add.w	fp, fp, #1
 8012fbc:	e7bb      	b.n	8012f36 <_printf_float+0x2fe>
 8012fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	47b8      	blx	r7
 8012fc8:	3001      	adds	r0, #1
 8012fca:	d1c0      	bne.n	8012f4e <_printf_float+0x316>
 8012fcc:	e68f      	b.n	8012cee <_printf_float+0xb6>
 8012fce:	9a06      	ldr	r2, [sp, #24]
 8012fd0:	464b      	mov	r3, r9
 8012fd2:	4442      	add	r2, r8
 8012fd4:	4631      	mov	r1, r6
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	47b8      	blx	r7
 8012fda:	3001      	adds	r0, #1
 8012fdc:	d1c3      	bne.n	8012f66 <_printf_float+0x32e>
 8012fde:	e686      	b.n	8012cee <_printf_float+0xb6>
 8012fe0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012fe4:	f1ba 0f01 	cmp.w	sl, #1
 8012fe8:	dc01      	bgt.n	8012fee <_printf_float+0x3b6>
 8012fea:	07db      	lsls	r3, r3, #31
 8012fec:	d536      	bpl.n	801305c <_printf_float+0x424>
 8012fee:	2301      	movs	r3, #1
 8012ff0:	4642      	mov	r2, r8
 8012ff2:	4631      	mov	r1, r6
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	47b8      	blx	r7
 8012ff8:	3001      	adds	r0, #1
 8012ffa:	f43f ae78 	beq.w	8012cee <_printf_float+0xb6>
 8012ffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013002:	4631      	mov	r1, r6
 8013004:	4628      	mov	r0, r5
 8013006:	47b8      	blx	r7
 8013008:	3001      	adds	r0, #1
 801300a:	f43f ae70 	beq.w	8012cee <_printf_float+0xb6>
 801300e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013012:	2200      	movs	r2, #0
 8013014:	2300      	movs	r3, #0
 8013016:	f10a 3aff 	add.w	sl, sl, #4294967295
 801301a:	f7ed fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 801301e:	b9c0      	cbnz	r0, 8013052 <_printf_float+0x41a>
 8013020:	4653      	mov	r3, sl
 8013022:	f108 0201 	add.w	r2, r8, #1
 8013026:	4631      	mov	r1, r6
 8013028:	4628      	mov	r0, r5
 801302a:	47b8      	blx	r7
 801302c:	3001      	adds	r0, #1
 801302e:	d10c      	bne.n	801304a <_printf_float+0x412>
 8013030:	e65d      	b.n	8012cee <_printf_float+0xb6>
 8013032:	2301      	movs	r3, #1
 8013034:	465a      	mov	r2, fp
 8013036:	4631      	mov	r1, r6
 8013038:	4628      	mov	r0, r5
 801303a:	47b8      	blx	r7
 801303c:	3001      	adds	r0, #1
 801303e:	f43f ae56 	beq.w	8012cee <_printf_float+0xb6>
 8013042:	f108 0801 	add.w	r8, r8, #1
 8013046:	45d0      	cmp	r8, sl
 8013048:	dbf3      	blt.n	8013032 <_printf_float+0x3fa>
 801304a:	464b      	mov	r3, r9
 801304c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013050:	e6df      	b.n	8012e12 <_printf_float+0x1da>
 8013052:	f04f 0800 	mov.w	r8, #0
 8013056:	f104 0b1a 	add.w	fp, r4, #26
 801305a:	e7f4      	b.n	8013046 <_printf_float+0x40e>
 801305c:	2301      	movs	r3, #1
 801305e:	4642      	mov	r2, r8
 8013060:	e7e1      	b.n	8013026 <_printf_float+0x3ee>
 8013062:	2301      	movs	r3, #1
 8013064:	464a      	mov	r2, r9
 8013066:	4631      	mov	r1, r6
 8013068:	4628      	mov	r0, r5
 801306a:	47b8      	blx	r7
 801306c:	3001      	adds	r0, #1
 801306e:	f43f ae3e 	beq.w	8012cee <_printf_float+0xb6>
 8013072:	f108 0801 	add.w	r8, r8, #1
 8013076:	68e3      	ldr	r3, [r4, #12]
 8013078:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801307a:	1a5b      	subs	r3, r3, r1
 801307c:	4543      	cmp	r3, r8
 801307e:	dcf0      	bgt.n	8013062 <_printf_float+0x42a>
 8013080:	e6fc      	b.n	8012e7c <_printf_float+0x244>
 8013082:	f04f 0800 	mov.w	r8, #0
 8013086:	f104 0919 	add.w	r9, r4, #25
 801308a:	e7f4      	b.n	8013076 <_printf_float+0x43e>

0801308c <_printf_common>:
 801308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013090:	4616      	mov	r6, r2
 8013092:	4698      	mov	r8, r3
 8013094:	688a      	ldr	r2, [r1, #8]
 8013096:	690b      	ldr	r3, [r1, #16]
 8013098:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801309c:	4293      	cmp	r3, r2
 801309e:	bfb8      	it	lt
 80130a0:	4613      	movlt	r3, r2
 80130a2:	6033      	str	r3, [r6, #0]
 80130a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80130a8:	4607      	mov	r7, r0
 80130aa:	460c      	mov	r4, r1
 80130ac:	b10a      	cbz	r2, 80130b2 <_printf_common+0x26>
 80130ae:	3301      	adds	r3, #1
 80130b0:	6033      	str	r3, [r6, #0]
 80130b2:	6823      	ldr	r3, [r4, #0]
 80130b4:	0699      	lsls	r1, r3, #26
 80130b6:	bf42      	ittt	mi
 80130b8:	6833      	ldrmi	r3, [r6, #0]
 80130ba:	3302      	addmi	r3, #2
 80130bc:	6033      	strmi	r3, [r6, #0]
 80130be:	6825      	ldr	r5, [r4, #0]
 80130c0:	f015 0506 	ands.w	r5, r5, #6
 80130c4:	d106      	bne.n	80130d4 <_printf_common+0x48>
 80130c6:	f104 0a19 	add.w	sl, r4, #25
 80130ca:	68e3      	ldr	r3, [r4, #12]
 80130cc:	6832      	ldr	r2, [r6, #0]
 80130ce:	1a9b      	subs	r3, r3, r2
 80130d0:	42ab      	cmp	r3, r5
 80130d2:	dc26      	bgt.n	8013122 <_printf_common+0x96>
 80130d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80130d8:	6822      	ldr	r2, [r4, #0]
 80130da:	3b00      	subs	r3, #0
 80130dc:	bf18      	it	ne
 80130de:	2301      	movne	r3, #1
 80130e0:	0692      	lsls	r2, r2, #26
 80130e2:	d42b      	bmi.n	801313c <_printf_common+0xb0>
 80130e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80130e8:	4641      	mov	r1, r8
 80130ea:	4638      	mov	r0, r7
 80130ec:	47c8      	blx	r9
 80130ee:	3001      	adds	r0, #1
 80130f0:	d01e      	beq.n	8013130 <_printf_common+0xa4>
 80130f2:	6823      	ldr	r3, [r4, #0]
 80130f4:	6922      	ldr	r2, [r4, #16]
 80130f6:	f003 0306 	and.w	r3, r3, #6
 80130fa:	2b04      	cmp	r3, #4
 80130fc:	bf02      	ittt	eq
 80130fe:	68e5      	ldreq	r5, [r4, #12]
 8013100:	6833      	ldreq	r3, [r6, #0]
 8013102:	1aed      	subeq	r5, r5, r3
 8013104:	68a3      	ldr	r3, [r4, #8]
 8013106:	bf0c      	ite	eq
 8013108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801310c:	2500      	movne	r5, #0
 801310e:	4293      	cmp	r3, r2
 8013110:	bfc4      	itt	gt
 8013112:	1a9b      	subgt	r3, r3, r2
 8013114:	18ed      	addgt	r5, r5, r3
 8013116:	2600      	movs	r6, #0
 8013118:	341a      	adds	r4, #26
 801311a:	42b5      	cmp	r5, r6
 801311c:	d11a      	bne.n	8013154 <_printf_common+0xc8>
 801311e:	2000      	movs	r0, #0
 8013120:	e008      	b.n	8013134 <_printf_common+0xa8>
 8013122:	2301      	movs	r3, #1
 8013124:	4652      	mov	r2, sl
 8013126:	4641      	mov	r1, r8
 8013128:	4638      	mov	r0, r7
 801312a:	47c8      	blx	r9
 801312c:	3001      	adds	r0, #1
 801312e:	d103      	bne.n	8013138 <_printf_common+0xac>
 8013130:	f04f 30ff 	mov.w	r0, #4294967295
 8013134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013138:	3501      	adds	r5, #1
 801313a:	e7c6      	b.n	80130ca <_printf_common+0x3e>
 801313c:	18e1      	adds	r1, r4, r3
 801313e:	1c5a      	adds	r2, r3, #1
 8013140:	2030      	movs	r0, #48	@ 0x30
 8013142:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013146:	4422      	add	r2, r4
 8013148:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801314c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013150:	3302      	adds	r3, #2
 8013152:	e7c7      	b.n	80130e4 <_printf_common+0x58>
 8013154:	2301      	movs	r3, #1
 8013156:	4622      	mov	r2, r4
 8013158:	4641      	mov	r1, r8
 801315a:	4638      	mov	r0, r7
 801315c:	47c8      	blx	r9
 801315e:	3001      	adds	r0, #1
 8013160:	d0e6      	beq.n	8013130 <_printf_common+0xa4>
 8013162:	3601      	adds	r6, #1
 8013164:	e7d9      	b.n	801311a <_printf_common+0x8e>
	...

08013168 <_printf_i>:
 8013168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801316c:	7e0f      	ldrb	r7, [r1, #24]
 801316e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013170:	2f78      	cmp	r7, #120	@ 0x78
 8013172:	4691      	mov	r9, r2
 8013174:	4680      	mov	r8, r0
 8013176:	460c      	mov	r4, r1
 8013178:	469a      	mov	sl, r3
 801317a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801317e:	d807      	bhi.n	8013190 <_printf_i+0x28>
 8013180:	2f62      	cmp	r7, #98	@ 0x62
 8013182:	d80a      	bhi.n	801319a <_printf_i+0x32>
 8013184:	2f00      	cmp	r7, #0
 8013186:	f000 80d2 	beq.w	801332e <_printf_i+0x1c6>
 801318a:	2f58      	cmp	r7, #88	@ 0x58
 801318c:	f000 80b9 	beq.w	8013302 <_printf_i+0x19a>
 8013190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013198:	e03a      	b.n	8013210 <_printf_i+0xa8>
 801319a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801319e:	2b15      	cmp	r3, #21
 80131a0:	d8f6      	bhi.n	8013190 <_printf_i+0x28>
 80131a2:	a101      	add	r1, pc, #4	@ (adr r1, 80131a8 <_printf_i+0x40>)
 80131a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80131a8:	08013201 	.word	0x08013201
 80131ac:	08013215 	.word	0x08013215
 80131b0:	08013191 	.word	0x08013191
 80131b4:	08013191 	.word	0x08013191
 80131b8:	08013191 	.word	0x08013191
 80131bc:	08013191 	.word	0x08013191
 80131c0:	08013215 	.word	0x08013215
 80131c4:	08013191 	.word	0x08013191
 80131c8:	08013191 	.word	0x08013191
 80131cc:	08013191 	.word	0x08013191
 80131d0:	08013191 	.word	0x08013191
 80131d4:	08013315 	.word	0x08013315
 80131d8:	0801323f 	.word	0x0801323f
 80131dc:	080132cf 	.word	0x080132cf
 80131e0:	08013191 	.word	0x08013191
 80131e4:	08013191 	.word	0x08013191
 80131e8:	08013337 	.word	0x08013337
 80131ec:	08013191 	.word	0x08013191
 80131f0:	0801323f 	.word	0x0801323f
 80131f4:	08013191 	.word	0x08013191
 80131f8:	08013191 	.word	0x08013191
 80131fc:	080132d7 	.word	0x080132d7
 8013200:	6833      	ldr	r3, [r6, #0]
 8013202:	1d1a      	adds	r2, r3, #4
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	6032      	str	r2, [r6, #0]
 8013208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801320c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013210:	2301      	movs	r3, #1
 8013212:	e09d      	b.n	8013350 <_printf_i+0x1e8>
 8013214:	6833      	ldr	r3, [r6, #0]
 8013216:	6820      	ldr	r0, [r4, #0]
 8013218:	1d19      	adds	r1, r3, #4
 801321a:	6031      	str	r1, [r6, #0]
 801321c:	0606      	lsls	r6, r0, #24
 801321e:	d501      	bpl.n	8013224 <_printf_i+0xbc>
 8013220:	681d      	ldr	r5, [r3, #0]
 8013222:	e003      	b.n	801322c <_printf_i+0xc4>
 8013224:	0645      	lsls	r5, r0, #25
 8013226:	d5fb      	bpl.n	8013220 <_printf_i+0xb8>
 8013228:	f9b3 5000 	ldrsh.w	r5, [r3]
 801322c:	2d00      	cmp	r5, #0
 801322e:	da03      	bge.n	8013238 <_printf_i+0xd0>
 8013230:	232d      	movs	r3, #45	@ 0x2d
 8013232:	426d      	negs	r5, r5
 8013234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013238:	4859      	ldr	r0, [pc, #356]	@ (80133a0 <_printf_i+0x238>)
 801323a:	230a      	movs	r3, #10
 801323c:	e011      	b.n	8013262 <_printf_i+0xfa>
 801323e:	6821      	ldr	r1, [r4, #0]
 8013240:	6833      	ldr	r3, [r6, #0]
 8013242:	0608      	lsls	r0, r1, #24
 8013244:	f853 5b04 	ldr.w	r5, [r3], #4
 8013248:	d402      	bmi.n	8013250 <_printf_i+0xe8>
 801324a:	0649      	lsls	r1, r1, #25
 801324c:	bf48      	it	mi
 801324e:	b2ad      	uxthmi	r5, r5
 8013250:	2f6f      	cmp	r7, #111	@ 0x6f
 8013252:	4853      	ldr	r0, [pc, #332]	@ (80133a0 <_printf_i+0x238>)
 8013254:	6033      	str	r3, [r6, #0]
 8013256:	bf14      	ite	ne
 8013258:	230a      	movne	r3, #10
 801325a:	2308      	moveq	r3, #8
 801325c:	2100      	movs	r1, #0
 801325e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013262:	6866      	ldr	r6, [r4, #4]
 8013264:	60a6      	str	r6, [r4, #8]
 8013266:	2e00      	cmp	r6, #0
 8013268:	bfa2      	ittt	ge
 801326a:	6821      	ldrge	r1, [r4, #0]
 801326c:	f021 0104 	bicge.w	r1, r1, #4
 8013270:	6021      	strge	r1, [r4, #0]
 8013272:	b90d      	cbnz	r5, 8013278 <_printf_i+0x110>
 8013274:	2e00      	cmp	r6, #0
 8013276:	d04b      	beq.n	8013310 <_printf_i+0x1a8>
 8013278:	4616      	mov	r6, r2
 801327a:	fbb5 f1f3 	udiv	r1, r5, r3
 801327e:	fb03 5711 	mls	r7, r3, r1, r5
 8013282:	5dc7      	ldrb	r7, [r0, r7]
 8013284:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013288:	462f      	mov	r7, r5
 801328a:	42bb      	cmp	r3, r7
 801328c:	460d      	mov	r5, r1
 801328e:	d9f4      	bls.n	801327a <_printf_i+0x112>
 8013290:	2b08      	cmp	r3, #8
 8013292:	d10b      	bne.n	80132ac <_printf_i+0x144>
 8013294:	6823      	ldr	r3, [r4, #0]
 8013296:	07df      	lsls	r7, r3, #31
 8013298:	d508      	bpl.n	80132ac <_printf_i+0x144>
 801329a:	6923      	ldr	r3, [r4, #16]
 801329c:	6861      	ldr	r1, [r4, #4]
 801329e:	4299      	cmp	r1, r3
 80132a0:	bfde      	ittt	le
 80132a2:	2330      	movle	r3, #48	@ 0x30
 80132a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80132a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80132ac:	1b92      	subs	r2, r2, r6
 80132ae:	6122      	str	r2, [r4, #16]
 80132b0:	f8cd a000 	str.w	sl, [sp]
 80132b4:	464b      	mov	r3, r9
 80132b6:	aa03      	add	r2, sp, #12
 80132b8:	4621      	mov	r1, r4
 80132ba:	4640      	mov	r0, r8
 80132bc:	f7ff fee6 	bl	801308c <_printf_common>
 80132c0:	3001      	adds	r0, #1
 80132c2:	d14a      	bne.n	801335a <_printf_i+0x1f2>
 80132c4:	f04f 30ff 	mov.w	r0, #4294967295
 80132c8:	b004      	add	sp, #16
 80132ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132ce:	6823      	ldr	r3, [r4, #0]
 80132d0:	f043 0320 	orr.w	r3, r3, #32
 80132d4:	6023      	str	r3, [r4, #0]
 80132d6:	4833      	ldr	r0, [pc, #204]	@ (80133a4 <_printf_i+0x23c>)
 80132d8:	2778      	movs	r7, #120	@ 0x78
 80132da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80132de:	6823      	ldr	r3, [r4, #0]
 80132e0:	6831      	ldr	r1, [r6, #0]
 80132e2:	061f      	lsls	r7, r3, #24
 80132e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80132e8:	d402      	bmi.n	80132f0 <_printf_i+0x188>
 80132ea:	065f      	lsls	r7, r3, #25
 80132ec:	bf48      	it	mi
 80132ee:	b2ad      	uxthmi	r5, r5
 80132f0:	6031      	str	r1, [r6, #0]
 80132f2:	07d9      	lsls	r1, r3, #31
 80132f4:	bf44      	itt	mi
 80132f6:	f043 0320 	orrmi.w	r3, r3, #32
 80132fa:	6023      	strmi	r3, [r4, #0]
 80132fc:	b11d      	cbz	r5, 8013306 <_printf_i+0x19e>
 80132fe:	2310      	movs	r3, #16
 8013300:	e7ac      	b.n	801325c <_printf_i+0xf4>
 8013302:	4827      	ldr	r0, [pc, #156]	@ (80133a0 <_printf_i+0x238>)
 8013304:	e7e9      	b.n	80132da <_printf_i+0x172>
 8013306:	6823      	ldr	r3, [r4, #0]
 8013308:	f023 0320 	bic.w	r3, r3, #32
 801330c:	6023      	str	r3, [r4, #0]
 801330e:	e7f6      	b.n	80132fe <_printf_i+0x196>
 8013310:	4616      	mov	r6, r2
 8013312:	e7bd      	b.n	8013290 <_printf_i+0x128>
 8013314:	6833      	ldr	r3, [r6, #0]
 8013316:	6825      	ldr	r5, [r4, #0]
 8013318:	6961      	ldr	r1, [r4, #20]
 801331a:	1d18      	adds	r0, r3, #4
 801331c:	6030      	str	r0, [r6, #0]
 801331e:	062e      	lsls	r6, r5, #24
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	d501      	bpl.n	8013328 <_printf_i+0x1c0>
 8013324:	6019      	str	r1, [r3, #0]
 8013326:	e002      	b.n	801332e <_printf_i+0x1c6>
 8013328:	0668      	lsls	r0, r5, #25
 801332a:	d5fb      	bpl.n	8013324 <_printf_i+0x1bc>
 801332c:	8019      	strh	r1, [r3, #0]
 801332e:	2300      	movs	r3, #0
 8013330:	6123      	str	r3, [r4, #16]
 8013332:	4616      	mov	r6, r2
 8013334:	e7bc      	b.n	80132b0 <_printf_i+0x148>
 8013336:	6833      	ldr	r3, [r6, #0]
 8013338:	1d1a      	adds	r2, r3, #4
 801333a:	6032      	str	r2, [r6, #0]
 801333c:	681e      	ldr	r6, [r3, #0]
 801333e:	6862      	ldr	r2, [r4, #4]
 8013340:	2100      	movs	r1, #0
 8013342:	4630      	mov	r0, r6
 8013344:	f7ec ff5c 	bl	8000200 <memchr>
 8013348:	b108      	cbz	r0, 801334e <_printf_i+0x1e6>
 801334a:	1b80      	subs	r0, r0, r6
 801334c:	6060      	str	r0, [r4, #4]
 801334e:	6863      	ldr	r3, [r4, #4]
 8013350:	6123      	str	r3, [r4, #16]
 8013352:	2300      	movs	r3, #0
 8013354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013358:	e7aa      	b.n	80132b0 <_printf_i+0x148>
 801335a:	6923      	ldr	r3, [r4, #16]
 801335c:	4632      	mov	r2, r6
 801335e:	4649      	mov	r1, r9
 8013360:	4640      	mov	r0, r8
 8013362:	47d0      	blx	sl
 8013364:	3001      	adds	r0, #1
 8013366:	d0ad      	beq.n	80132c4 <_printf_i+0x15c>
 8013368:	6823      	ldr	r3, [r4, #0]
 801336a:	079b      	lsls	r3, r3, #30
 801336c:	d413      	bmi.n	8013396 <_printf_i+0x22e>
 801336e:	68e0      	ldr	r0, [r4, #12]
 8013370:	9b03      	ldr	r3, [sp, #12]
 8013372:	4298      	cmp	r0, r3
 8013374:	bfb8      	it	lt
 8013376:	4618      	movlt	r0, r3
 8013378:	e7a6      	b.n	80132c8 <_printf_i+0x160>
 801337a:	2301      	movs	r3, #1
 801337c:	4632      	mov	r2, r6
 801337e:	4649      	mov	r1, r9
 8013380:	4640      	mov	r0, r8
 8013382:	47d0      	blx	sl
 8013384:	3001      	adds	r0, #1
 8013386:	d09d      	beq.n	80132c4 <_printf_i+0x15c>
 8013388:	3501      	adds	r5, #1
 801338a:	68e3      	ldr	r3, [r4, #12]
 801338c:	9903      	ldr	r1, [sp, #12]
 801338e:	1a5b      	subs	r3, r3, r1
 8013390:	42ab      	cmp	r3, r5
 8013392:	dcf2      	bgt.n	801337a <_printf_i+0x212>
 8013394:	e7eb      	b.n	801336e <_printf_i+0x206>
 8013396:	2500      	movs	r5, #0
 8013398:	f104 0619 	add.w	r6, r4, #25
 801339c:	e7f5      	b.n	801338a <_printf_i+0x222>
 801339e:	bf00      	nop
 80133a0:	08015596 	.word	0x08015596
 80133a4:	080155a7 	.word	0x080155a7

080133a8 <std>:
 80133a8:	2300      	movs	r3, #0
 80133aa:	b510      	push	{r4, lr}
 80133ac:	4604      	mov	r4, r0
 80133ae:	e9c0 3300 	strd	r3, r3, [r0]
 80133b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80133b6:	6083      	str	r3, [r0, #8]
 80133b8:	8181      	strh	r1, [r0, #12]
 80133ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80133bc:	81c2      	strh	r2, [r0, #14]
 80133be:	6183      	str	r3, [r0, #24]
 80133c0:	4619      	mov	r1, r3
 80133c2:	2208      	movs	r2, #8
 80133c4:	305c      	adds	r0, #92	@ 0x5c
 80133c6:	f000 f8f4 	bl	80135b2 <memset>
 80133ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013400 <std+0x58>)
 80133cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80133ce:	4b0d      	ldr	r3, [pc, #52]	@ (8013404 <std+0x5c>)
 80133d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80133d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013408 <std+0x60>)
 80133d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80133d6:	4b0d      	ldr	r3, [pc, #52]	@ (801340c <std+0x64>)
 80133d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80133da:	4b0d      	ldr	r3, [pc, #52]	@ (8013410 <std+0x68>)
 80133dc:	6224      	str	r4, [r4, #32]
 80133de:	429c      	cmp	r4, r3
 80133e0:	d006      	beq.n	80133f0 <std+0x48>
 80133e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80133e6:	4294      	cmp	r4, r2
 80133e8:	d002      	beq.n	80133f0 <std+0x48>
 80133ea:	33d0      	adds	r3, #208	@ 0xd0
 80133ec:	429c      	cmp	r4, r3
 80133ee:	d105      	bne.n	80133fc <std+0x54>
 80133f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80133f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133f8:	f000 b958 	b.w	80136ac <__retarget_lock_init_recursive>
 80133fc:	bd10      	pop	{r4, pc}
 80133fe:	bf00      	nop
 8013400:	0801352d 	.word	0x0801352d
 8013404:	0801354f 	.word	0x0801354f
 8013408:	08013587 	.word	0x08013587
 801340c:	080135ab 	.word	0x080135ab
 8013410:	20006808 	.word	0x20006808

08013414 <stdio_exit_handler>:
 8013414:	4a02      	ldr	r2, [pc, #8]	@ (8013420 <stdio_exit_handler+0xc>)
 8013416:	4903      	ldr	r1, [pc, #12]	@ (8013424 <stdio_exit_handler+0x10>)
 8013418:	4803      	ldr	r0, [pc, #12]	@ (8013428 <stdio_exit_handler+0x14>)
 801341a:	f000 b869 	b.w	80134f0 <_fwalk_sglue>
 801341e:	bf00      	nop
 8013420:	20000304 	.word	0x20000304
 8013424:	08014d75 	.word	0x08014d75
 8013428:	20000314 	.word	0x20000314

0801342c <cleanup_stdio>:
 801342c:	6841      	ldr	r1, [r0, #4]
 801342e:	4b0c      	ldr	r3, [pc, #48]	@ (8013460 <cleanup_stdio+0x34>)
 8013430:	4299      	cmp	r1, r3
 8013432:	b510      	push	{r4, lr}
 8013434:	4604      	mov	r4, r0
 8013436:	d001      	beq.n	801343c <cleanup_stdio+0x10>
 8013438:	f001 fc9c 	bl	8014d74 <_fflush_r>
 801343c:	68a1      	ldr	r1, [r4, #8]
 801343e:	4b09      	ldr	r3, [pc, #36]	@ (8013464 <cleanup_stdio+0x38>)
 8013440:	4299      	cmp	r1, r3
 8013442:	d002      	beq.n	801344a <cleanup_stdio+0x1e>
 8013444:	4620      	mov	r0, r4
 8013446:	f001 fc95 	bl	8014d74 <_fflush_r>
 801344a:	68e1      	ldr	r1, [r4, #12]
 801344c:	4b06      	ldr	r3, [pc, #24]	@ (8013468 <cleanup_stdio+0x3c>)
 801344e:	4299      	cmp	r1, r3
 8013450:	d004      	beq.n	801345c <cleanup_stdio+0x30>
 8013452:	4620      	mov	r0, r4
 8013454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013458:	f001 bc8c 	b.w	8014d74 <_fflush_r>
 801345c:	bd10      	pop	{r4, pc}
 801345e:	bf00      	nop
 8013460:	20006808 	.word	0x20006808
 8013464:	20006870 	.word	0x20006870
 8013468:	200068d8 	.word	0x200068d8

0801346c <global_stdio_init.part.0>:
 801346c:	b510      	push	{r4, lr}
 801346e:	4b0b      	ldr	r3, [pc, #44]	@ (801349c <global_stdio_init.part.0+0x30>)
 8013470:	4c0b      	ldr	r4, [pc, #44]	@ (80134a0 <global_stdio_init.part.0+0x34>)
 8013472:	4a0c      	ldr	r2, [pc, #48]	@ (80134a4 <global_stdio_init.part.0+0x38>)
 8013474:	601a      	str	r2, [r3, #0]
 8013476:	4620      	mov	r0, r4
 8013478:	2200      	movs	r2, #0
 801347a:	2104      	movs	r1, #4
 801347c:	f7ff ff94 	bl	80133a8 <std>
 8013480:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013484:	2201      	movs	r2, #1
 8013486:	2109      	movs	r1, #9
 8013488:	f7ff ff8e 	bl	80133a8 <std>
 801348c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013490:	2202      	movs	r2, #2
 8013492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013496:	2112      	movs	r1, #18
 8013498:	f7ff bf86 	b.w	80133a8 <std>
 801349c:	20006940 	.word	0x20006940
 80134a0:	20006808 	.word	0x20006808
 80134a4:	08013415 	.word	0x08013415

080134a8 <__sfp_lock_acquire>:
 80134a8:	4801      	ldr	r0, [pc, #4]	@ (80134b0 <__sfp_lock_acquire+0x8>)
 80134aa:	f000 b900 	b.w	80136ae <__retarget_lock_acquire_recursive>
 80134ae:	bf00      	nop
 80134b0:	20006949 	.word	0x20006949

080134b4 <__sfp_lock_release>:
 80134b4:	4801      	ldr	r0, [pc, #4]	@ (80134bc <__sfp_lock_release+0x8>)
 80134b6:	f000 b8fb 	b.w	80136b0 <__retarget_lock_release_recursive>
 80134ba:	bf00      	nop
 80134bc:	20006949 	.word	0x20006949

080134c0 <__sinit>:
 80134c0:	b510      	push	{r4, lr}
 80134c2:	4604      	mov	r4, r0
 80134c4:	f7ff fff0 	bl	80134a8 <__sfp_lock_acquire>
 80134c8:	6a23      	ldr	r3, [r4, #32]
 80134ca:	b11b      	cbz	r3, 80134d4 <__sinit+0x14>
 80134cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134d0:	f7ff bff0 	b.w	80134b4 <__sfp_lock_release>
 80134d4:	4b04      	ldr	r3, [pc, #16]	@ (80134e8 <__sinit+0x28>)
 80134d6:	6223      	str	r3, [r4, #32]
 80134d8:	4b04      	ldr	r3, [pc, #16]	@ (80134ec <__sinit+0x2c>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d1f5      	bne.n	80134cc <__sinit+0xc>
 80134e0:	f7ff ffc4 	bl	801346c <global_stdio_init.part.0>
 80134e4:	e7f2      	b.n	80134cc <__sinit+0xc>
 80134e6:	bf00      	nop
 80134e8:	0801342d 	.word	0x0801342d
 80134ec:	20006940 	.word	0x20006940

080134f0 <_fwalk_sglue>:
 80134f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134f4:	4607      	mov	r7, r0
 80134f6:	4688      	mov	r8, r1
 80134f8:	4614      	mov	r4, r2
 80134fa:	2600      	movs	r6, #0
 80134fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013500:	f1b9 0901 	subs.w	r9, r9, #1
 8013504:	d505      	bpl.n	8013512 <_fwalk_sglue+0x22>
 8013506:	6824      	ldr	r4, [r4, #0]
 8013508:	2c00      	cmp	r4, #0
 801350a:	d1f7      	bne.n	80134fc <_fwalk_sglue+0xc>
 801350c:	4630      	mov	r0, r6
 801350e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013512:	89ab      	ldrh	r3, [r5, #12]
 8013514:	2b01      	cmp	r3, #1
 8013516:	d907      	bls.n	8013528 <_fwalk_sglue+0x38>
 8013518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801351c:	3301      	adds	r3, #1
 801351e:	d003      	beq.n	8013528 <_fwalk_sglue+0x38>
 8013520:	4629      	mov	r1, r5
 8013522:	4638      	mov	r0, r7
 8013524:	47c0      	blx	r8
 8013526:	4306      	orrs	r6, r0
 8013528:	3568      	adds	r5, #104	@ 0x68
 801352a:	e7e9      	b.n	8013500 <_fwalk_sglue+0x10>

0801352c <__sread>:
 801352c:	b510      	push	{r4, lr}
 801352e:	460c      	mov	r4, r1
 8013530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013534:	f000 f86c 	bl	8013610 <_read_r>
 8013538:	2800      	cmp	r0, #0
 801353a:	bfab      	itete	ge
 801353c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801353e:	89a3      	ldrhlt	r3, [r4, #12]
 8013540:	181b      	addge	r3, r3, r0
 8013542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013546:	bfac      	ite	ge
 8013548:	6563      	strge	r3, [r4, #84]	@ 0x54
 801354a:	81a3      	strhlt	r3, [r4, #12]
 801354c:	bd10      	pop	{r4, pc}

0801354e <__swrite>:
 801354e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013552:	461f      	mov	r7, r3
 8013554:	898b      	ldrh	r3, [r1, #12]
 8013556:	05db      	lsls	r3, r3, #23
 8013558:	4605      	mov	r5, r0
 801355a:	460c      	mov	r4, r1
 801355c:	4616      	mov	r6, r2
 801355e:	d505      	bpl.n	801356c <__swrite+0x1e>
 8013560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013564:	2302      	movs	r3, #2
 8013566:	2200      	movs	r2, #0
 8013568:	f000 f840 	bl	80135ec <_lseek_r>
 801356c:	89a3      	ldrh	r3, [r4, #12]
 801356e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013572:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013576:	81a3      	strh	r3, [r4, #12]
 8013578:	4632      	mov	r2, r6
 801357a:	463b      	mov	r3, r7
 801357c:	4628      	mov	r0, r5
 801357e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013582:	f000 b857 	b.w	8013634 <_write_r>

08013586 <__sseek>:
 8013586:	b510      	push	{r4, lr}
 8013588:	460c      	mov	r4, r1
 801358a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801358e:	f000 f82d 	bl	80135ec <_lseek_r>
 8013592:	1c43      	adds	r3, r0, #1
 8013594:	89a3      	ldrh	r3, [r4, #12]
 8013596:	bf15      	itete	ne
 8013598:	6560      	strne	r0, [r4, #84]	@ 0x54
 801359a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801359e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80135a2:	81a3      	strheq	r3, [r4, #12]
 80135a4:	bf18      	it	ne
 80135a6:	81a3      	strhne	r3, [r4, #12]
 80135a8:	bd10      	pop	{r4, pc}

080135aa <__sclose>:
 80135aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135ae:	f000 b80d 	b.w	80135cc <_close_r>

080135b2 <memset>:
 80135b2:	4402      	add	r2, r0
 80135b4:	4603      	mov	r3, r0
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d100      	bne.n	80135bc <memset+0xa>
 80135ba:	4770      	bx	lr
 80135bc:	f803 1b01 	strb.w	r1, [r3], #1
 80135c0:	e7f9      	b.n	80135b6 <memset+0x4>
	...

080135c4 <_localeconv_r>:
 80135c4:	4800      	ldr	r0, [pc, #0]	@ (80135c8 <_localeconv_r+0x4>)
 80135c6:	4770      	bx	lr
 80135c8:	20000450 	.word	0x20000450

080135cc <_close_r>:
 80135cc:	b538      	push	{r3, r4, r5, lr}
 80135ce:	4d06      	ldr	r5, [pc, #24]	@ (80135e8 <_close_r+0x1c>)
 80135d0:	2300      	movs	r3, #0
 80135d2:	4604      	mov	r4, r0
 80135d4:	4608      	mov	r0, r1
 80135d6:	602b      	str	r3, [r5, #0]
 80135d8:	f7ed fcde 	bl	8000f98 <_close>
 80135dc:	1c43      	adds	r3, r0, #1
 80135de:	d102      	bne.n	80135e6 <_close_r+0x1a>
 80135e0:	682b      	ldr	r3, [r5, #0]
 80135e2:	b103      	cbz	r3, 80135e6 <_close_r+0x1a>
 80135e4:	6023      	str	r3, [r4, #0]
 80135e6:	bd38      	pop	{r3, r4, r5, pc}
 80135e8:	20006944 	.word	0x20006944

080135ec <_lseek_r>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4d07      	ldr	r5, [pc, #28]	@ (801360c <_lseek_r+0x20>)
 80135f0:	4604      	mov	r4, r0
 80135f2:	4608      	mov	r0, r1
 80135f4:	4611      	mov	r1, r2
 80135f6:	2200      	movs	r2, #0
 80135f8:	602a      	str	r2, [r5, #0]
 80135fa:	461a      	mov	r2, r3
 80135fc:	f7ed fcd8 	bl	8000fb0 <_lseek>
 8013600:	1c43      	adds	r3, r0, #1
 8013602:	d102      	bne.n	801360a <_lseek_r+0x1e>
 8013604:	682b      	ldr	r3, [r5, #0]
 8013606:	b103      	cbz	r3, 801360a <_lseek_r+0x1e>
 8013608:	6023      	str	r3, [r4, #0]
 801360a:	bd38      	pop	{r3, r4, r5, pc}
 801360c:	20006944 	.word	0x20006944

08013610 <_read_r>:
 8013610:	b538      	push	{r3, r4, r5, lr}
 8013612:	4d07      	ldr	r5, [pc, #28]	@ (8013630 <_read_r+0x20>)
 8013614:	4604      	mov	r4, r0
 8013616:	4608      	mov	r0, r1
 8013618:	4611      	mov	r1, r2
 801361a:	2200      	movs	r2, #0
 801361c:	602a      	str	r2, [r5, #0]
 801361e:	461a      	mov	r2, r3
 8013620:	f7ed fcc8 	bl	8000fb4 <_read>
 8013624:	1c43      	adds	r3, r0, #1
 8013626:	d102      	bne.n	801362e <_read_r+0x1e>
 8013628:	682b      	ldr	r3, [r5, #0]
 801362a:	b103      	cbz	r3, 801362e <_read_r+0x1e>
 801362c:	6023      	str	r3, [r4, #0]
 801362e:	bd38      	pop	{r3, r4, r5, pc}
 8013630:	20006944 	.word	0x20006944

08013634 <_write_r>:
 8013634:	b538      	push	{r3, r4, r5, lr}
 8013636:	4d07      	ldr	r5, [pc, #28]	@ (8013654 <_write_r+0x20>)
 8013638:	4604      	mov	r4, r0
 801363a:	4608      	mov	r0, r1
 801363c:	4611      	mov	r1, r2
 801363e:	2200      	movs	r2, #0
 8013640:	602a      	str	r2, [r5, #0]
 8013642:	461a      	mov	r2, r3
 8013644:	f7ed fc9a 	bl	8000f7c <_write>
 8013648:	1c43      	adds	r3, r0, #1
 801364a:	d102      	bne.n	8013652 <_write_r+0x1e>
 801364c:	682b      	ldr	r3, [r5, #0]
 801364e:	b103      	cbz	r3, 8013652 <_write_r+0x1e>
 8013650:	6023      	str	r3, [r4, #0]
 8013652:	bd38      	pop	{r3, r4, r5, pc}
 8013654:	20006944 	.word	0x20006944

08013658 <__errno>:
 8013658:	4b01      	ldr	r3, [pc, #4]	@ (8013660 <__errno+0x8>)
 801365a:	6818      	ldr	r0, [r3, #0]
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop
 8013660:	20000310 	.word	0x20000310

08013664 <__libc_init_array>:
 8013664:	b570      	push	{r4, r5, r6, lr}
 8013666:	4d0d      	ldr	r5, [pc, #52]	@ (801369c <__libc_init_array+0x38>)
 8013668:	4c0d      	ldr	r4, [pc, #52]	@ (80136a0 <__libc_init_array+0x3c>)
 801366a:	1b64      	subs	r4, r4, r5
 801366c:	10a4      	asrs	r4, r4, #2
 801366e:	2600      	movs	r6, #0
 8013670:	42a6      	cmp	r6, r4
 8013672:	d109      	bne.n	8013688 <__libc_init_array+0x24>
 8013674:	4d0b      	ldr	r5, [pc, #44]	@ (80136a4 <__libc_init_array+0x40>)
 8013676:	4c0c      	ldr	r4, [pc, #48]	@ (80136a8 <__libc_init_array+0x44>)
 8013678:	f001 febc 	bl	80153f4 <_init>
 801367c:	1b64      	subs	r4, r4, r5
 801367e:	10a4      	asrs	r4, r4, #2
 8013680:	2600      	movs	r6, #0
 8013682:	42a6      	cmp	r6, r4
 8013684:	d105      	bne.n	8013692 <__libc_init_array+0x2e>
 8013686:	bd70      	pop	{r4, r5, r6, pc}
 8013688:	f855 3b04 	ldr.w	r3, [r5], #4
 801368c:	4798      	blx	r3
 801368e:	3601      	adds	r6, #1
 8013690:	e7ee      	b.n	8013670 <__libc_init_array+0xc>
 8013692:	f855 3b04 	ldr.w	r3, [r5], #4
 8013696:	4798      	blx	r3
 8013698:	3601      	adds	r6, #1
 801369a:	e7f2      	b.n	8013682 <__libc_init_array+0x1e>
 801369c:	08015900 	.word	0x08015900
 80136a0:	08015900 	.word	0x08015900
 80136a4:	08015900 	.word	0x08015900
 80136a8:	08015904 	.word	0x08015904

080136ac <__retarget_lock_init_recursive>:
 80136ac:	4770      	bx	lr

080136ae <__retarget_lock_acquire_recursive>:
 80136ae:	4770      	bx	lr

080136b0 <__retarget_lock_release_recursive>:
 80136b0:	4770      	bx	lr

080136b2 <memcpy>:
 80136b2:	440a      	add	r2, r1
 80136b4:	4291      	cmp	r1, r2
 80136b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80136ba:	d100      	bne.n	80136be <memcpy+0xc>
 80136bc:	4770      	bx	lr
 80136be:	b510      	push	{r4, lr}
 80136c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136c8:	4291      	cmp	r1, r2
 80136ca:	d1f9      	bne.n	80136c0 <memcpy+0xe>
 80136cc:	bd10      	pop	{r4, pc}

080136ce <quorem>:
 80136ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136d2:	6903      	ldr	r3, [r0, #16]
 80136d4:	690c      	ldr	r4, [r1, #16]
 80136d6:	42a3      	cmp	r3, r4
 80136d8:	4607      	mov	r7, r0
 80136da:	db7e      	blt.n	80137da <quorem+0x10c>
 80136dc:	3c01      	subs	r4, #1
 80136de:	f101 0814 	add.w	r8, r1, #20
 80136e2:	00a3      	lsls	r3, r4, #2
 80136e4:	f100 0514 	add.w	r5, r0, #20
 80136e8:	9300      	str	r3, [sp, #0]
 80136ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136ee:	9301      	str	r3, [sp, #4]
 80136f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80136f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136f8:	3301      	adds	r3, #1
 80136fa:	429a      	cmp	r2, r3
 80136fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013700:	fbb2 f6f3 	udiv	r6, r2, r3
 8013704:	d32e      	bcc.n	8013764 <quorem+0x96>
 8013706:	f04f 0a00 	mov.w	sl, #0
 801370a:	46c4      	mov	ip, r8
 801370c:	46ae      	mov	lr, r5
 801370e:	46d3      	mov	fp, sl
 8013710:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013714:	b298      	uxth	r0, r3
 8013716:	fb06 a000 	mla	r0, r6, r0, sl
 801371a:	0c02      	lsrs	r2, r0, #16
 801371c:	0c1b      	lsrs	r3, r3, #16
 801371e:	fb06 2303 	mla	r3, r6, r3, r2
 8013722:	f8de 2000 	ldr.w	r2, [lr]
 8013726:	b280      	uxth	r0, r0
 8013728:	b292      	uxth	r2, r2
 801372a:	1a12      	subs	r2, r2, r0
 801372c:	445a      	add	r2, fp
 801372e:	f8de 0000 	ldr.w	r0, [lr]
 8013732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013736:	b29b      	uxth	r3, r3
 8013738:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801373c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013740:	b292      	uxth	r2, r2
 8013742:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013746:	45e1      	cmp	r9, ip
 8013748:	f84e 2b04 	str.w	r2, [lr], #4
 801374c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013750:	d2de      	bcs.n	8013710 <quorem+0x42>
 8013752:	9b00      	ldr	r3, [sp, #0]
 8013754:	58eb      	ldr	r3, [r5, r3]
 8013756:	b92b      	cbnz	r3, 8013764 <quorem+0x96>
 8013758:	9b01      	ldr	r3, [sp, #4]
 801375a:	3b04      	subs	r3, #4
 801375c:	429d      	cmp	r5, r3
 801375e:	461a      	mov	r2, r3
 8013760:	d32f      	bcc.n	80137c2 <quorem+0xf4>
 8013762:	613c      	str	r4, [r7, #16]
 8013764:	4638      	mov	r0, r7
 8013766:	f001 f979 	bl	8014a5c <__mcmp>
 801376a:	2800      	cmp	r0, #0
 801376c:	db25      	blt.n	80137ba <quorem+0xec>
 801376e:	4629      	mov	r1, r5
 8013770:	2000      	movs	r0, #0
 8013772:	f858 2b04 	ldr.w	r2, [r8], #4
 8013776:	f8d1 c000 	ldr.w	ip, [r1]
 801377a:	fa1f fe82 	uxth.w	lr, r2
 801377e:	fa1f f38c 	uxth.w	r3, ip
 8013782:	eba3 030e 	sub.w	r3, r3, lr
 8013786:	4403      	add	r3, r0
 8013788:	0c12      	lsrs	r2, r2, #16
 801378a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801378e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013792:	b29b      	uxth	r3, r3
 8013794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013798:	45c1      	cmp	r9, r8
 801379a:	f841 3b04 	str.w	r3, [r1], #4
 801379e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80137a2:	d2e6      	bcs.n	8013772 <quorem+0xa4>
 80137a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80137a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80137ac:	b922      	cbnz	r2, 80137b8 <quorem+0xea>
 80137ae:	3b04      	subs	r3, #4
 80137b0:	429d      	cmp	r5, r3
 80137b2:	461a      	mov	r2, r3
 80137b4:	d30b      	bcc.n	80137ce <quorem+0x100>
 80137b6:	613c      	str	r4, [r7, #16]
 80137b8:	3601      	adds	r6, #1
 80137ba:	4630      	mov	r0, r6
 80137bc:	b003      	add	sp, #12
 80137be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c2:	6812      	ldr	r2, [r2, #0]
 80137c4:	3b04      	subs	r3, #4
 80137c6:	2a00      	cmp	r2, #0
 80137c8:	d1cb      	bne.n	8013762 <quorem+0x94>
 80137ca:	3c01      	subs	r4, #1
 80137cc:	e7c6      	b.n	801375c <quorem+0x8e>
 80137ce:	6812      	ldr	r2, [r2, #0]
 80137d0:	3b04      	subs	r3, #4
 80137d2:	2a00      	cmp	r2, #0
 80137d4:	d1ef      	bne.n	80137b6 <quorem+0xe8>
 80137d6:	3c01      	subs	r4, #1
 80137d8:	e7ea      	b.n	80137b0 <quorem+0xe2>
 80137da:	2000      	movs	r0, #0
 80137dc:	e7ee      	b.n	80137bc <quorem+0xee>
	...

080137e0 <_dtoa_r>:
 80137e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e4:	69c7      	ldr	r7, [r0, #28]
 80137e6:	b099      	sub	sp, #100	@ 0x64
 80137e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80137ec:	ec55 4b10 	vmov	r4, r5, d0
 80137f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80137f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80137f4:	4683      	mov	fp, r0
 80137f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80137f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80137fa:	b97f      	cbnz	r7, 801381c <_dtoa_r+0x3c>
 80137fc:	2010      	movs	r0, #16
 80137fe:	f000 fdfd 	bl	80143fc <malloc>
 8013802:	4602      	mov	r2, r0
 8013804:	f8cb 001c 	str.w	r0, [fp, #28]
 8013808:	b920      	cbnz	r0, 8013814 <_dtoa_r+0x34>
 801380a:	4ba7      	ldr	r3, [pc, #668]	@ (8013aa8 <_dtoa_r+0x2c8>)
 801380c:	21ef      	movs	r1, #239	@ 0xef
 801380e:	48a7      	ldr	r0, [pc, #668]	@ (8013aac <_dtoa_r+0x2cc>)
 8013810:	f001 fae8 	bl	8014de4 <__assert_func>
 8013814:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013818:	6007      	str	r7, [r0, #0]
 801381a:	60c7      	str	r7, [r0, #12]
 801381c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013820:	6819      	ldr	r1, [r3, #0]
 8013822:	b159      	cbz	r1, 801383c <_dtoa_r+0x5c>
 8013824:	685a      	ldr	r2, [r3, #4]
 8013826:	604a      	str	r2, [r1, #4]
 8013828:	2301      	movs	r3, #1
 801382a:	4093      	lsls	r3, r2
 801382c:	608b      	str	r3, [r1, #8]
 801382e:	4658      	mov	r0, fp
 8013830:	f000 feda 	bl	80145e8 <_Bfree>
 8013834:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013838:	2200      	movs	r2, #0
 801383a:	601a      	str	r2, [r3, #0]
 801383c:	1e2b      	subs	r3, r5, #0
 801383e:	bfb9      	ittee	lt
 8013840:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013844:	9303      	strlt	r3, [sp, #12]
 8013846:	2300      	movge	r3, #0
 8013848:	6033      	strge	r3, [r6, #0]
 801384a:	9f03      	ldr	r7, [sp, #12]
 801384c:	4b98      	ldr	r3, [pc, #608]	@ (8013ab0 <_dtoa_r+0x2d0>)
 801384e:	bfbc      	itt	lt
 8013850:	2201      	movlt	r2, #1
 8013852:	6032      	strlt	r2, [r6, #0]
 8013854:	43bb      	bics	r3, r7
 8013856:	d112      	bne.n	801387e <_dtoa_r+0x9e>
 8013858:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801385a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801385e:	6013      	str	r3, [r2, #0]
 8013860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013864:	4323      	orrs	r3, r4
 8013866:	f000 854d 	beq.w	8014304 <_dtoa_r+0xb24>
 801386a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801386c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013ac4 <_dtoa_r+0x2e4>
 8013870:	2b00      	cmp	r3, #0
 8013872:	f000 854f 	beq.w	8014314 <_dtoa_r+0xb34>
 8013876:	f10a 0303 	add.w	r3, sl, #3
 801387a:	f000 bd49 	b.w	8014310 <_dtoa_r+0xb30>
 801387e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013882:	2200      	movs	r2, #0
 8013884:	ec51 0b17 	vmov	r0, r1, d7
 8013888:	2300      	movs	r3, #0
 801388a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801388e:	f7ed f933 	bl	8000af8 <__aeabi_dcmpeq>
 8013892:	4680      	mov	r8, r0
 8013894:	b158      	cbz	r0, 80138ae <_dtoa_r+0xce>
 8013896:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013898:	2301      	movs	r3, #1
 801389a:	6013      	str	r3, [r2, #0]
 801389c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801389e:	b113      	cbz	r3, 80138a6 <_dtoa_r+0xc6>
 80138a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80138a2:	4b84      	ldr	r3, [pc, #528]	@ (8013ab4 <_dtoa_r+0x2d4>)
 80138a4:	6013      	str	r3, [r2, #0]
 80138a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013ac8 <_dtoa_r+0x2e8>
 80138aa:	f000 bd33 	b.w	8014314 <_dtoa_r+0xb34>
 80138ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80138b2:	aa16      	add	r2, sp, #88	@ 0x58
 80138b4:	a917      	add	r1, sp, #92	@ 0x5c
 80138b6:	4658      	mov	r0, fp
 80138b8:	f001 f980 	bl	8014bbc <__d2b>
 80138bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80138c0:	4681      	mov	r9, r0
 80138c2:	2e00      	cmp	r6, #0
 80138c4:	d077      	beq.n	80139b6 <_dtoa_r+0x1d6>
 80138c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80138cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80138d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80138dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80138e0:	4619      	mov	r1, r3
 80138e2:	2200      	movs	r2, #0
 80138e4:	4b74      	ldr	r3, [pc, #464]	@ (8013ab8 <_dtoa_r+0x2d8>)
 80138e6:	f7ec fce7 	bl	80002b8 <__aeabi_dsub>
 80138ea:	a369      	add	r3, pc, #420	@ (adr r3, 8013a90 <_dtoa_r+0x2b0>)
 80138ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f0:	f7ec fe9a 	bl	8000628 <__aeabi_dmul>
 80138f4:	a368      	add	r3, pc, #416	@ (adr r3, 8013a98 <_dtoa_r+0x2b8>)
 80138f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fa:	f7ec fcdf 	bl	80002bc <__adddf3>
 80138fe:	4604      	mov	r4, r0
 8013900:	4630      	mov	r0, r6
 8013902:	460d      	mov	r5, r1
 8013904:	f7ec fe26 	bl	8000554 <__aeabi_i2d>
 8013908:	a365      	add	r3, pc, #404	@ (adr r3, 8013aa0 <_dtoa_r+0x2c0>)
 801390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801390e:	f7ec fe8b 	bl	8000628 <__aeabi_dmul>
 8013912:	4602      	mov	r2, r0
 8013914:	460b      	mov	r3, r1
 8013916:	4620      	mov	r0, r4
 8013918:	4629      	mov	r1, r5
 801391a:	f7ec fccf 	bl	80002bc <__adddf3>
 801391e:	4604      	mov	r4, r0
 8013920:	460d      	mov	r5, r1
 8013922:	f7ed f931 	bl	8000b88 <__aeabi_d2iz>
 8013926:	2200      	movs	r2, #0
 8013928:	4607      	mov	r7, r0
 801392a:	2300      	movs	r3, #0
 801392c:	4620      	mov	r0, r4
 801392e:	4629      	mov	r1, r5
 8013930:	f7ed f8ec 	bl	8000b0c <__aeabi_dcmplt>
 8013934:	b140      	cbz	r0, 8013948 <_dtoa_r+0x168>
 8013936:	4638      	mov	r0, r7
 8013938:	f7ec fe0c 	bl	8000554 <__aeabi_i2d>
 801393c:	4622      	mov	r2, r4
 801393e:	462b      	mov	r3, r5
 8013940:	f7ed f8da 	bl	8000af8 <__aeabi_dcmpeq>
 8013944:	b900      	cbnz	r0, 8013948 <_dtoa_r+0x168>
 8013946:	3f01      	subs	r7, #1
 8013948:	2f16      	cmp	r7, #22
 801394a:	d851      	bhi.n	80139f0 <_dtoa_r+0x210>
 801394c:	4b5b      	ldr	r3, [pc, #364]	@ (8013abc <_dtoa_r+0x2dc>)
 801394e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801395a:	f7ed f8d7 	bl	8000b0c <__aeabi_dcmplt>
 801395e:	2800      	cmp	r0, #0
 8013960:	d048      	beq.n	80139f4 <_dtoa_r+0x214>
 8013962:	3f01      	subs	r7, #1
 8013964:	2300      	movs	r3, #0
 8013966:	9312      	str	r3, [sp, #72]	@ 0x48
 8013968:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801396a:	1b9b      	subs	r3, r3, r6
 801396c:	1e5a      	subs	r2, r3, #1
 801396e:	bf44      	itt	mi
 8013970:	f1c3 0801 	rsbmi	r8, r3, #1
 8013974:	2300      	movmi	r3, #0
 8013976:	9208      	str	r2, [sp, #32]
 8013978:	bf54      	ite	pl
 801397a:	f04f 0800 	movpl.w	r8, #0
 801397e:	9308      	strmi	r3, [sp, #32]
 8013980:	2f00      	cmp	r7, #0
 8013982:	db39      	blt.n	80139f8 <_dtoa_r+0x218>
 8013984:	9b08      	ldr	r3, [sp, #32]
 8013986:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013988:	443b      	add	r3, r7
 801398a:	9308      	str	r3, [sp, #32]
 801398c:	2300      	movs	r3, #0
 801398e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013992:	2b09      	cmp	r3, #9
 8013994:	d864      	bhi.n	8013a60 <_dtoa_r+0x280>
 8013996:	2b05      	cmp	r3, #5
 8013998:	bfc4      	itt	gt
 801399a:	3b04      	subgt	r3, #4
 801399c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801399e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139a0:	f1a3 0302 	sub.w	r3, r3, #2
 80139a4:	bfcc      	ite	gt
 80139a6:	2400      	movgt	r4, #0
 80139a8:	2401      	movle	r4, #1
 80139aa:	2b03      	cmp	r3, #3
 80139ac:	d863      	bhi.n	8013a76 <_dtoa_r+0x296>
 80139ae:	e8df f003 	tbb	[pc, r3]
 80139b2:	372a      	.short	0x372a
 80139b4:	5535      	.short	0x5535
 80139b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80139ba:	441e      	add	r6, r3
 80139bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80139c0:	2b20      	cmp	r3, #32
 80139c2:	bfc1      	itttt	gt
 80139c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80139c8:	409f      	lslgt	r7, r3
 80139ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80139ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80139d2:	bfd6      	itet	le
 80139d4:	f1c3 0320 	rsble	r3, r3, #32
 80139d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80139dc:	fa04 f003 	lslle.w	r0, r4, r3
 80139e0:	f7ec fda8 	bl	8000534 <__aeabi_ui2d>
 80139e4:	2201      	movs	r2, #1
 80139e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80139ea:	3e01      	subs	r6, #1
 80139ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80139ee:	e777      	b.n	80138e0 <_dtoa_r+0x100>
 80139f0:	2301      	movs	r3, #1
 80139f2:	e7b8      	b.n	8013966 <_dtoa_r+0x186>
 80139f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80139f6:	e7b7      	b.n	8013968 <_dtoa_r+0x188>
 80139f8:	427b      	negs	r3, r7
 80139fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80139fc:	2300      	movs	r3, #0
 80139fe:	eba8 0807 	sub.w	r8, r8, r7
 8013a02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a04:	e7c4      	b.n	8013990 <_dtoa_r+0x1b0>
 8013a06:	2300      	movs	r3, #0
 8013a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	dc35      	bgt.n	8013a7c <_dtoa_r+0x29c>
 8013a10:	2301      	movs	r3, #1
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	9307      	str	r3, [sp, #28]
 8013a16:	461a      	mov	r2, r3
 8013a18:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a1a:	e00b      	b.n	8013a34 <_dtoa_r+0x254>
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e7f3      	b.n	8013a08 <_dtoa_r+0x228>
 8013a20:	2300      	movs	r3, #0
 8013a22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a26:	18fb      	adds	r3, r7, r3
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	9307      	str	r3, [sp, #28]
 8013a30:	bfb8      	it	lt
 8013a32:	2301      	movlt	r3, #1
 8013a34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013a38:	2100      	movs	r1, #0
 8013a3a:	2204      	movs	r2, #4
 8013a3c:	f102 0514 	add.w	r5, r2, #20
 8013a40:	429d      	cmp	r5, r3
 8013a42:	d91f      	bls.n	8013a84 <_dtoa_r+0x2a4>
 8013a44:	6041      	str	r1, [r0, #4]
 8013a46:	4658      	mov	r0, fp
 8013a48:	f000 fd8e 	bl	8014568 <_Balloc>
 8013a4c:	4682      	mov	sl, r0
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	d13c      	bne.n	8013acc <_dtoa_r+0x2ec>
 8013a52:	4b1b      	ldr	r3, [pc, #108]	@ (8013ac0 <_dtoa_r+0x2e0>)
 8013a54:	4602      	mov	r2, r0
 8013a56:	f240 11af 	movw	r1, #431	@ 0x1af
 8013a5a:	e6d8      	b.n	801380e <_dtoa_r+0x2e>
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	e7e0      	b.n	8013a22 <_dtoa_r+0x242>
 8013a60:	2401      	movs	r4, #1
 8013a62:	2300      	movs	r3, #0
 8013a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013a68:	f04f 33ff 	mov.w	r3, #4294967295
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	9307      	str	r3, [sp, #28]
 8013a70:	2200      	movs	r2, #0
 8013a72:	2312      	movs	r3, #18
 8013a74:	e7d0      	b.n	8013a18 <_dtoa_r+0x238>
 8013a76:	2301      	movs	r3, #1
 8013a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a7a:	e7f5      	b.n	8013a68 <_dtoa_r+0x288>
 8013a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a7e:	9300      	str	r3, [sp, #0]
 8013a80:	9307      	str	r3, [sp, #28]
 8013a82:	e7d7      	b.n	8013a34 <_dtoa_r+0x254>
 8013a84:	3101      	adds	r1, #1
 8013a86:	0052      	lsls	r2, r2, #1
 8013a88:	e7d8      	b.n	8013a3c <_dtoa_r+0x25c>
 8013a8a:	bf00      	nop
 8013a8c:	f3af 8000 	nop.w
 8013a90:	636f4361 	.word	0x636f4361
 8013a94:	3fd287a7 	.word	0x3fd287a7
 8013a98:	8b60c8b3 	.word	0x8b60c8b3
 8013a9c:	3fc68a28 	.word	0x3fc68a28
 8013aa0:	509f79fb 	.word	0x509f79fb
 8013aa4:	3fd34413 	.word	0x3fd34413
 8013aa8:	080155c5 	.word	0x080155c5
 8013aac:	080155dc 	.word	0x080155dc
 8013ab0:	7ff00000 	.word	0x7ff00000
 8013ab4:	08015595 	.word	0x08015595
 8013ab8:	3ff80000 	.word	0x3ff80000
 8013abc:	080156d8 	.word	0x080156d8
 8013ac0:	08015634 	.word	0x08015634
 8013ac4:	080155c1 	.word	0x080155c1
 8013ac8:	08015594 	.word	0x08015594
 8013acc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013ad0:	6018      	str	r0, [r3, #0]
 8013ad2:	9b07      	ldr	r3, [sp, #28]
 8013ad4:	2b0e      	cmp	r3, #14
 8013ad6:	f200 80a4 	bhi.w	8013c22 <_dtoa_r+0x442>
 8013ada:	2c00      	cmp	r4, #0
 8013adc:	f000 80a1 	beq.w	8013c22 <_dtoa_r+0x442>
 8013ae0:	2f00      	cmp	r7, #0
 8013ae2:	dd33      	ble.n	8013b4c <_dtoa_r+0x36c>
 8013ae4:	4bad      	ldr	r3, [pc, #692]	@ (8013d9c <_dtoa_r+0x5bc>)
 8013ae6:	f007 020f 	and.w	r2, r7, #15
 8013aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013aee:	ed93 7b00 	vldr	d7, [r3]
 8013af2:	05f8      	lsls	r0, r7, #23
 8013af4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013af8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013afc:	d516      	bpl.n	8013b2c <_dtoa_r+0x34c>
 8013afe:	4ba8      	ldr	r3, [pc, #672]	@ (8013da0 <_dtoa_r+0x5c0>)
 8013b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013b08:	f7ec feb8 	bl	800087c <__aeabi_ddiv>
 8013b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b10:	f004 040f 	and.w	r4, r4, #15
 8013b14:	2603      	movs	r6, #3
 8013b16:	4da2      	ldr	r5, [pc, #648]	@ (8013da0 <_dtoa_r+0x5c0>)
 8013b18:	b954      	cbnz	r4, 8013b30 <_dtoa_r+0x350>
 8013b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b22:	f7ec feab 	bl	800087c <__aeabi_ddiv>
 8013b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b2a:	e028      	b.n	8013b7e <_dtoa_r+0x39e>
 8013b2c:	2602      	movs	r6, #2
 8013b2e:	e7f2      	b.n	8013b16 <_dtoa_r+0x336>
 8013b30:	07e1      	lsls	r1, r4, #31
 8013b32:	d508      	bpl.n	8013b46 <_dtoa_r+0x366>
 8013b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b3c:	f7ec fd74 	bl	8000628 <__aeabi_dmul>
 8013b40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b44:	3601      	adds	r6, #1
 8013b46:	1064      	asrs	r4, r4, #1
 8013b48:	3508      	adds	r5, #8
 8013b4a:	e7e5      	b.n	8013b18 <_dtoa_r+0x338>
 8013b4c:	f000 80d2 	beq.w	8013cf4 <_dtoa_r+0x514>
 8013b50:	427c      	negs	r4, r7
 8013b52:	4b92      	ldr	r3, [pc, #584]	@ (8013d9c <_dtoa_r+0x5bc>)
 8013b54:	4d92      	ldr	r5, [pc, #584]	@ (8013da0 <_dtoa_r+0x5c0>)
 8013b56:	f004 020f 	and.w	r2, r4, #15
 8013b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b66:	f7ec fd5f 	bl	8000628 <__aeabi_dmul>
 8013b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b6e:	1124      	asrs	r4, r4, #4
 8013b70:	2300      	movs	r3, #0
 8013b72:	2602      	movs	r6, #2
 8013b74:	2c00      	cmp	r4, #0
 8013b76:	f040 80b2 	bne.w	8013cde <_dtoa_r+0x4fe>
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d1d3      	bne.n	8013b26 <_dtoa_r+0x346>
 8013b7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013b80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	f000 80b7 	beq.w	8013cf8 <_dtoa_r+0x518>
 8013b8a:	4b86      	ldr	r3, [pc, #536]	@ (8013da4 <_dtoa_r+0x5c4>)
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	4620      	mov	r0, r4
 8013b90:	4629      	mov	r1, r5
 8013b92:	f7ec ffbb 	bl	8000b0c <__aeabi_dcmplt>
 8013b96:	2800      	cmp	r0, #0
 8013b98:	f000 80ae 	beq.w	8013cf8 <_dtoa_r+0x518>
 8013b9c:	9b07      	ldr	r3, [sp, #28]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	f000 80aa 	beq.w	8013cf8 <_dtoa_r+0x518>
 8013ba4:	9b00      	ldr	r3, [sp, #0]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	dd37      	ble.n	8013c1a <_dtoa_r+0x43a>
 8013baa:	1e7b      	subs	r3, r7, #1
 8013bac:	9304      	str	r3, [sp, #16]
 8013bae:	4620      	mov	r0, r4
 8013bb0:	4b7d      	ldr	r3, [pc, #500]	@ (8013da8 <_dtoa_r+0x5c8>)
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	f7ec fd37 	bl	8000628 <__aeabi_dmul>
 8013bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bbe:	9c00      	ldr	r4, [sp, #0]
 8013bc0:	3601      	adds	r6, #1
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	f7ec fcc6 	bl	8000554 <__aeabi_i2d>
 8013bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bcc:	f7ec fd2c 	bl	8000628 <__aeabi_dmul>
 8013bd0:	4b76      	ldr	r3, [pc, #472]	@ (8013dac <_dtoa_r+0x5cc>)
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	f7ec fb72 	bl	80002bc <__adddf3>
 8013bd8:	4605      	mov	r5, r0
 8013bda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013bde:	2c00      	cmp	r4, #0
 8013be0:	f040 808d 	bne.w	8013cfe <_dtoa_r+0x51e>
 8013be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013be8:	4b71      	ldr	r3, [pc, #452]	@ (8013db0 <_dtoa_r+0x5d0>)
 8013bea:	2200      	movs	r2, #0
 8013bec:	f7ec fb64 	bl	80002b8 <__aeabi_dsub>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	460b      	mov	r3, r1
 8013bf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013bf8:	462a      	mov	r2, r5
 8013bfa:	4633      	mov	r3, r6
 8013bfc:	f7ec ffa4 	bl	8000b48 <__aeabi_dcmpgt>
 8013c00:	2800      	cmp	r0, #0
 8013c02:	f040 828b 	bne.w	801411c <_dtoa_r+0x93c>
 8013c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c0a:	462a      	mov	r2, r5
 8013c0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013c10:	f7ec ff7c 	bl	8000b0c <__aeabi_dcmplt>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	f040 8128 	bne.w	8013e6a <_dtoa_r+0x68a>
 8013c1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013c1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013c22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	f2c0 815a 	blt.w	8013ede <_dtoa_r+0x6fe>
 8013c2a:	2f0e      	cmp	r7, #14
 8013c2c:	f300 8157 	bgt.w	8013ede <_dtoa_r+0x6fe>
 8013c30:	4b5a      	ldr	r3, [pc, #360]	@ (8013d9c <_dtoa_r+0x5bc>)
 8013c32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c36:	ed93 7b00 	vldr	d7, [r3]
 8013c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	ed8d 7b00 	vstr	d7, [sp]
 8013c42:	da03      	bge.n	8013c4c <_dtoa_r+0x46c>
 8013c44:	9b07      	ldr	r3, [sp, #28]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	f340 8101 	ble.w	8013e4e <_dtoa_r+0x66e>
 8013c4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013c50:	4656      	mov	r6, sl
 8013c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c56:	4620      	mov	r0, r4
 8013c58:	4629      	mov	r1, r5
 8013c5a:	f7ec fe0f 	bl	800087c <__aeabi_ddiv>
 8013c5e:	f7ec ff93 	bl	8000b88 <__aeabi_d2iz>
 8013c62:	4680      	mov	r8, r0
 8013c64:	f7ec fc76 	bl	8000554 <__aeabi_i2d>
 8013c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c6c:	f7ec fcdc 	bl	8000628 <__aeabi_dmul>
 8013c70:	4602      	mov	r2, r0
 8013c72:	460b      	mov	r3, r1
 8013c74:	4620      	mov	r0, r4
 8013c76:	4629      	mov	r1, r5
 8013c78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013c7c:	f7ec fb1c 	bl	80002b8 <__aeabi_dsub>
 8013c80:	f806 4b01 	strb.w	r4, [r6], #1
 8013c84:	9d07      	ldr	r5, [sp, #28]
 8013c86:	eba6 040a 	sub.w	r4, r6, sl
 8013c8a:	42a5      	cmp	r5, r4
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	460b      	mov	r3, r1
 8013c90:	f040 8117 	bne.w	8013ec2 <_dtoa_r+0x6e2>
 8013c94:	f7ec fb12 	bl	80002bc <__adddf3>
 8013c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	460d      	mov	r5, r1
 8013ca0:	f7ec ff52 	bl	8000b48 <__aeabi_dcmpgt>
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	f040 80f9 	bne.w	8013e9c <_dtoa_r+0x6bc>
 8013caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cae:	4620      	mov	r0, r4
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	f7ec ff21 	bl	8000af8 <__aeabi_dcmpeq>
 8013cb6:	b118      	cbz	r0, 8013cc0 <_dtoa_r+0x4e0>
 8013cb8:	f018 0f01 	tst.w	r8, #1
 8013cbc:	f040 80ee 	bne.w	8013e9c <_dtoa_r+0x6bc>
 8013cc0:	4649      	mov	r1, r9
 8013cc2:	4658      	mov	r0, fp
 8013cc4:	f000 fc90 	bl	80145e8 <_Bfree>
 8013cc8:	2300      	movs	r3, #0
 8013cca:	7033      	strb	r3, [r6, #0]
 8013ccc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013cce:	3701      	adds	r7, #1
 8013cd0:	601f      	str	r7, [r3, #0]
 8013cd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	f000 831d 	beq.w	8014314 <_dtoa_r+0xb34>
 8013cda:	601e      	str	r6, [r3, #0]
 8013cdc:	e31a      	b.n	8014314 <_dtoa_r+0xb34>
 8013cde:	07e2      	lsls	r2, r4, #31
 8013ce0:	d505      	bpl.n	8013cee <_dtoa_r+0x50e>
 8013ce2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ce6:	f7ec fc9f 	bl	8000628 <__aeabi_dmul>
 8013cea:	3601      	adds	r6, #1
 8013cec:	2301      	movs	r3, #1
 8013cee:	1064      	asrs	r4, r4, #1
 8013cf0:	3508      	adds	r5, #8
 8013cf2:	e73f      	b.n	8013b74 <_dtoa_r+0x394>
 8013cf4:	2602      	movs	r6, #2
 8013cf6:	e742      	b.n	8013b7e <_dtoa_r+0x39e>
 8013cf8:	9c07      	ldr	r4, [sp, #28]
 8013cfa:	9704      	str	r7, [sp, #16]
 8013cfc:	e761      	b.n	8013bc2 <_dtoa_r+0x3e2>
 8013cfe:	4b27      	ldr	r3, [pc, #156]	@ (8013d9c <_dtoa_r+0x5bc>)
 8013d00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013d02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013d06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013d0a:	4454      	add	r4, sl
 8013d0c:	2900      	cmp	r1, #0
 8013d0e:	d053      	beq.n	8013db8 <_dtoa_r+0x5d8>
 8013d10:	4928      	ldr	r1, [pc, #160]	@ (8013db4 <_dtoa_r+0x5d4>)
 8013d12:	2000      	movs	r0, #0
 8013d14:	f7ec fdb2 	bl	800087c <__aeabi_ddiv>
 8013d18:	4633      	mov	r3, r6
 8013d1a:	462a      	mov	r2, r5
 8013d1c:	f7ec facc 	bl	80002b8 <__aeabi_dsub>
 8013d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d24:	4656      	mov	r6, sl
 8013d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d2a:	f7ec ff2d 	bl	8000b88 <__aeabi_d2iz>
 8013d2e:	4605      	mov	r5, r0
 8013d30:	f7ec fc10 	bl	8000554 <__aeabi_i2d>
 8013d34:	4602      	mov	r2, r0
 8013d36:	460b      	mov	r3, r1
 8013d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d3c:	f7ec fabc 	bl	80002b8 <__aeabi_dsub>
 8013d40:	3530      	adds	r5, #48	@ 0x30
 8013d42:	4602      	mov	r2, r0
 8013d44:	460b      	mov	r3, r1
 8013d46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d4a:	f806 5b01 	strb.w	r5, [r6], #1
 8013d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d52:	f7ec fedb 	bl	8000b0c <__aeabi_dcmplt>
 8013d56:	2800      	cmp	r0, #0
 8013d58:	d171      	bne.n	8013e3e <_dtoa_r+0x65e>
 8013d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d5e:	4911      	ldr	r1, [pc, #68]	@ (8013da4 <_dtoa_r+0x5c4>)
 8013d60:	2000      	movs	r0, #0
 8013d62:	f7ec faa9 	bl	80002b8 <__aeabi_dsub>
 8013d66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d6a:	f7ec fecf 	bl	8000b0c <__aeabi_dcmplt>
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	f040 8095 	bne.w	8013e9e <_dtoa_r+0x6be>
 8013d74:	42a6      	cmp	r6, r4
 8013d76:	f43f af50 	beq.w	8013c1a <_dtoa_r+0x43a>
 8013d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8013da8 <_dtoa_r+0x5c8>)
 8013d80:	2200      	movs	r2, #0
 8013d82:	f7ec fc51 	bl	8000628 <__aeabi_dmul>
 8013d86:	4b08      	ldr	r3, [pc, #32]	@ (8013da8 <_dtoa_r+0x5c8>)
 8013d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d92:	f7ec fc49 	bl	8000628 <__aeabi_dmul>
 8013d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d9a:	e7c4      	b.n	8013d26 <_dtoa_r+0x546>
 8013d9c:	080156d8 	.word	0x080156d8
 8013da0:	080156b0 	.word	0x080156b0
 8013da4:	3ff00000 	.word	0x3ff00000
 8013da8:	40240000 	.word	0x40240000
 8013dac:	401c0000 	.word	0x401c0000
 8013db0:	40140000 	.word	0x40140000
 8013db4:	3fe00000 	.word	0x3fe00000
 8013db8:	4631      	mov	r1, r6
 8013dba:	4628      	mov	r0, r5
 8013dbc:	f7ec fc34 	bl	8000628 <__aeabi_dmul>
 8013dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013dc4:	9415      	str	r4, [sp, #84]	@ 0x54
 8013dc6:	4656      	mov	r6, sl
 8013dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dcc:	f7ec fedc 	bl	8000b88 <__aeabi_d2iz>
 8013dd0:	4605      	mov	r5, r0
 8013dd2:	f7ec fbbf 	bl	8000554 <__aeabi_i2d>
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	460b      	mov	r3, r1
 8013dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dde:	f7ec fa6b 	bl	80002b8 <__aeabi_dsub>
 8013de2:	3530      	adds	r5, #48	@ 0x30
 8013de4:	f806 5b01 	strb.w	r5, [r6], #1
 8013de8:	4602      	mov	r2, r0
 8013dea:	460b      	mov	r3, r1
 8013dec:	42a6      	cmp	r6, r4
 8013dee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013df2:	f04f 0200 	mov.w	r2, #0
 8013df6:	d124      	bne.n	8013e42 <_dtoa_r+0x662>
 8013df8:	4bac      	ldr	r3, [pc, #688]	@ (80140ac <_dtoa_r+0x8cc>)
 8013dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013dfe:	f7ec fa5d 	bl	80002bc <__adddf3>
 8013e02:	4602      	mov	r2, r0
 8013e04:	460b      	mov	r3, r1
 8013e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e0a:	f7ec fe9d 	bl	8000b48 <__aeabi_dcmpgt>
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	d145      	bne.n	8013e9e <_dtoa_r+0x6be>
 8013e12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013e16:	49a5      	ldr	r1, [pc, #660]	@ (80140ac <_dtoa_r+0x8cc>)
 8013e18:	2000      	movs	r0, #0
 8013e1a:	f7ec fa4d 	bl	80002b8 <__aeabi_dsub>
 8013e1e:	4602      	mov	r2, r0
 8013e20:	460b      	mov	r3, r1
 8013e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e26:	f7ec fe71 	bl	8000b0c <__aeabi_dcmplt>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	f43f aef5 	beq.w	8013c1a <_dtoa_r+0x43a>
 8013e30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013e32:	1e73      	subs	r3, r6, #1
 8013e34:	9315      	str	r3, [sp, #84]	@ 0x54
 8013e36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e3a:	2b30      	cmp	r3, #48	@ 0x30
 8013e3c:	d0f8      	beq.n	8013e30 <_dtoa_r+0x650>
 8013e3e:	9f04      	ldr	r7, [sp, #16]
 8013e40:	e73e      	b.n	8013cc0 <_dtoa_r+0x4e0>
 8013e42:	4b9b      	ldr	r3, [pc, #620]	@ (80140b0 <_dtoa_r+0x8d0>)
 8013e44:	f7ec fbf0 	bl	8000628 <__aeabi_dmul>
 8013e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e4c:	e7bc      	b.n	8013dc8 <_dtoa_r+0x5e8>
 8013e4e:	d10c      	bne.n	8013e6a <_dtoa_r+0x68a>
 8013e50:	4b98      	ldr	r3, [pc, #608]	@ (80140b4 <_dtoa_r+0x8d4>)
 8013e52:	2200      	movs	r2, #0
 8013e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e58:	f7ec fbe6 	bl	8000628 <__aeabi_dmul>
 8013e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e60:	f7ec fe68 	bl	8000b34 <__aeabi_dcmpge>
 8013e64:	2800      	cmp	r0, #0
 8013e66:	f000 8157 	beq.w	8014118 <_dtoa_r+0x938>
 8013e6a:	2400      	movs	r4, #0
 8013e6c:	4625      	mov	r5, r4
 8013e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e70:	43db      	mvns	r3, r3
 8013e72:	9304      	str	r3, [sp, #16]
 8013e74:	4656      	mov	r6, sl
 8013e76:	2700      	movs	r7, #0
 8013e78:	4621      	mov	r1, r4
 8013e7a:	4658      	mov	r0, fp
 8013e7c:	f000 fbb4 	bl	80145e8 <_Bfree>
 8013e80:	2d00      	cmp	r5, #0
 8013e82:	d0dc      	beq.n	8013e3e <_dtoa_r+0x65e>
 8013e84:	b12f      	cbz	r7, 8013e92 <_dtoa_r+0x6b2>
 8013e86:	42af      	cmp	r7, r5
 8013e88:	d003      	beq.n	8013e92 <_dtoa_r+0x6b2>
 8013e8a:	4639      	mov	r1, r7
 8013e8c:	4658      	mov	r0, fp
 8013e8e:	f000 fbab 	bl	80145e8 <_Bfree>
 8013e92:	4629      	mov	r1, r5
 8013e94:	4658      	mov	r0, fp
 8013e96:	f000 fba7 	bl	80145e8 <_Bfree>
 8013e9a:	e7d0      	b.n	8013e3e <_dtoa_r+0x65e>
 8013e9c:	9704      	str	r7, [sp, #16]
 8013e9e:	4633      	mov	r3, r6
 8013ea0:	461e      	mov	r6, r3
 8013ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ea6:	2a39      	cmp	r2, #57	@ 0x39
 8013ea8:	d107      	bne.n	8013eba <_dtoa_r+0x6da>
 8013eaa:	459a      	cmp	sl, r3
 8013eac:	d1f8      	bne.n	8013ea0 <_dtoa_r+0x6c0>
 8013eae:	9a04      	ldr	r2, [sp, #16]
 8013eb0:	3201      	adds	r2, #1
 8013eb2:	9204      	str	r2, [sp, #16]
 8013eb4:	2230      	movs	r2, #48	@ 0x30
 8013eb6:	f88a 2000 	strb.w	r2, [sl]
 8013eba:	781a      	ldrb	r2, [r3, #0]
 8013ebc:	3201      	adds	r2, #1
 8013ebe:	701a      	strb	r2, [r3, #0]
 8013ec0:	e7bd      	b.n	8013e3e <_dtoa_r+0x65e>
 8013ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80140b0 <_dtoa_r+0x8d0>)
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	f7ec fbaf 	bl	8000628 <__aeabi_dmul>
 8013eca:	2200      	movs	r2, #0
 8013ecc:	2300      	movs	r3, #0
 8013ece:	4604      	mov	r4, r0
 8013ed0:	460d      	mov	r5, r1
 8013ed2:	f7ec fe11 	bl	8000af8 <__aeabi_dcmpeq>
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	f43f aebb 	beq.w	8013c52 <_dtoa_r+0x472>
 8013edc:	e6f0      	b.n	8013cc0 <_dtoa_r+0x4e0>
 8013ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ee0:	2a00      	cmp	r2, #0
 8013ee2:	f000 80db 	beq.w	801409c <_dtoa_r+0x8bc>
 8013ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ee8:	2a01      	cmp	r2, #1
 8013eea:	f300 80bf 	bgt.w	801406c <_dtoa_r+0x88c>
 8013eee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013ef0:	2a00      	cmp	r2, #0
 8013ef2:	f000 80b7 	beq.w	8014064 <_dtoa_r+0x884>
 8013ef6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013efa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013efc:	4646      	mov	r6, r8
 8013efe:	9a08      	ldr	r2, [sp, #32]
 8013f00:	2101      	movs	r1, #1
 8013f02:	441a      	add	r2, r3
 8013f04:	4658      	mov	r0, fp
 8013f06:	4498      	add	r8, r3
 8013f08:	9208      	str	r2, [sp, #32]
 8013f0a:	f000 fc21 	bl	8014750 <__i2b>
 8013f0e:	4605      	mov	r5, r0
 8013f10:	b15e      	cbz	r6, 8013f2a <_dtoa_r+0x74a>
 8013f12:	9b08      	ldr	r3, [sp, #32]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	dd08      	ble.n	8013f2a <_dtoa_r+0x74a>
 8013f18:	42b3      	cmp	r3, r6
 8013f1a:	9a08      	ldr	r2, [sp, #32]
 8013f1c:	bfa8      	it	ge
 8013f1e:	4633      	movge	r3, r6
 8013f20:	eba8 0803 	sub.w	r8, r8, r3
 8013f24:	1af6      	subs	r6, r6, r3
 8013f26:	1ad3      	subs	r3, r2, r3
 8013f28:	9308      	str	r3, [sp, #32]
 8013f2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f2c:	b1f3      	cbz	r3, 8013f6c <_dtoa_r+0x78c>
 8013f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	f000 80b7 	beq.w	80140a4 <_dtoa_r+0x8c4>
 8013f36:	b18c      	cbz	r4, 8013f5c <_dtoa_r+0x77c>
 8013f38:	4629      	mov	r1, r5
 8013f3a:	4622      	mov	r2, r4
 8013f3c:	4658      	mov	r0, fp
 8013f3e:	f000 fcc7 	bl	80148d0 <__pow5mult>
 8013f42:	464a      	mov	r2, r9
 8013f44:	4601      	mov	r1, r0
 8013f46:	4605      	mov	r5, r0
 8013f48:	4658      	mov	r0, fp
 8013f4a:	f000 fc17 	bl	801477c <__multiply>
 8013f4e:	4649      	mov	r1, r9
 8013f50:	9004      	str	r0, [sp, #16]
 8013f52:	4658      	mov	r0, fp
 8013f54:	f000 fb48 	bl	80145e8 <_Bfree>
 8013f58:	9b04      	ldr	r3, [sp, #16]
 8013f5a:	4699      	mov	r9, r3
 8013f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f5e:	1b1a      	subs	r2, r3, r4
 8013f60:	d004      	beq.n	8013f6c <_dtoa_r+0x78c>
 8013f62:	4649      	mov	r1, r9
 8013f64:	4658      	mov	r0, fp
 8013f66:	f000 fcb3 	bl	80148d0 <__pow5mult>
 8013f6a:	4681      	mov	r9, r0
 8013f6c:	2101      	movs	r1, #1
 8013f6e:	4658      	mov	r0, fp
 8013f70:	f000 fbee 	bl	8014750 <__i2b>
 8013f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f76:	4604      	mov	r4, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f000 81cf 	beq.w	801431c <_dtoa_r+0xb3c>
 8013f7e:	461a      	mov	r2, r3
 8013f80:	4601      	mov	r1, r0
 8013f82:	4658      	mov	r0, fp
 8013f84:	f000 fca4 	bl	80148d0 <__pow5mult>
 8013f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	4604      	mov	r4, r0
 8013f8e:	f300 8095 	bgt.w	80140bc <_dtoa_r+0x8dc>
 8013f92:	9b02      	ldr	r3, [sp, #8]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f040 8087 	bne.w	80140a8 <_dtoa_r+0x8c8>
 8013f9a:	9b03      	ldr	r3, [sp, #12]
 8013f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	f040 8089 	bne.w	80140b8 <_dtoa_r+0x8d8>
 8013fa6:	9b03      	ldr	r3, [sp, #12]
 8013fa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013fac:	0d1b      	lsrs	r3, r3, #20
 8013fae:	051b      	lsls	r3, r3, #20
 8013fb0:	b12b      	cbz	r3, 8013fbe <_dtoa_r+0x7de>
 8013fb2:	9b08      	ldr	r3, [sp, #32]
 8013fb4:	3301      	adds	r3, #1
 8013fb6:	9308      	str	r3, [sp, #32]
 8013fb8:	f108 0801 	add.w	r8, r8, #1
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8013fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	f000 81b0 	beq.w	8014328 <_dtoa_r+0xb48>
 8013fc8:	6923      	ldr	r3, [r4, #16]
 8013fca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013fce:	6918      	ldr	r0, [r3, #16]
 8013fd0:	f000 fb72 	bl	80146b8 <__hi0bits>
 8013fd4:	f1c0 0020 	rsb	r0, r0, #32
 8013fd8:	9b08      	ldr	r3, [sp, #32]
 8013fda:	4418      	add	r0, r3
 8013fdc:	f010 001f 	ands.w	r0, r0, #31
 8013fe0:	d077      	beq.n	80140d2 <_dtoa_r+0x8f2>
 8013fe2:	f1c0 0320 	rsb	r3, r0, #32
 8013fe6:	2b04      	cmp	r3, #4
 8013fe8:	dd6b      	ble.n	80140c2 <_dtoa_r+0x8e2>
 8013fea:	9b08      	ldr	r3, [sp, #32]
 8013fec:	f1c0 001c 	rsb	r0, r0, #28
 8013ff0:	4403      	add	r3, r0
 8013ff2:	4480      	add	r8, r0
 8013ff4:	4406      	add	r6, r0
 8013ff6:	9308      	str	r3, [sp, #32]
 8013ff8:	f1b8 0f00 	cmp.w	r8, #0
 8013ffc:	dd05      	ble.n	801400a <_dtoa_r+0x82a>
 8013ffe:	4649      	mov	r1, r9
 8014000:	4642      	mov	r2, r8
 8014002:	4658      	mov	r0, fp
 8014004:	f000 fcbe 	bl	8014984 <__lshift>
 8014008:	4681      	mov	r9, r0
 801400a:	9b08      	ldr	r3, [sp, #32]
 801400c:	2b00      	cmp	r3, #0
 801400e:	dd05      	ble.n	801401c <_dtoa_r+0x83c>
 8014010:	4621      	mov	r1, r4
 8014012:	461a      	mov	r2, r3
 8014014:	4658      	mov	r0, fp
 8014016:	f000 fcb5 	bl	8014984 <__lshift>
 801401a:	4604      	mov	r4, r0
 801401c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801401e:	2b00      	cmp	r3, #0
 8014020:	d059      	beq.n	80140d6 <_dtoa_r+0x8f6>
 8014022:	4621      	mov	r1, r4
 8014024:	4648      	mov	r0, r9
 8014026:	f000 fd19 	bl	8014a5c <__mcmp>
 801402a:	2800      	cmp	r0, #0
 801402c:	da53      	bge.n	80140d6 <_dtoa_r+0x8f6>
 801402e:	1e7b      	subs	r3, r7, #1
 8014030:	9304      	str	r3, [sp, #16]
 8014032:	4649      	mov	r1, r9
 8014034:	2300      	movs	r3, #0
 8014036:	220a      	movs	r2, #10
 8014038:	4658      	mov	r0, fp
 801403a:	f000 faf7 	bl	801462c <__multadd>
 801403e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014040:	4681      	mov	r9, r0
 8014042:	2b00      	cmp	r3, #0
 8014044:	f000 8172 	beq.w	801432c <_dtoa_r+0xb4c>
 8014048:	2300      	movs	r3, #0
 801404a:	4629      	mov	r1, r5
 801404c:	220a      	movs	r2, #10
 801404e:	4658      	mov	r0, fp
 8014050:	f000 faec 	bl	801462c <__multadd>
 8014054:	9b00      	ldr	r3, [sp, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	4605      	mov	r5, r0
 801405a:	dc67      	bgt.n	801412c <_dtoa_r+0x94c>
 801405c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801405e:	2b02      	cmp	r3, #2
 8014060:	dc41      	bgt.n	80140e6 <_dtoa_r+0x906>
 8014062:	e063      	b.n	801412c <_dtoa_r+0x94c>
 8014064:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014066:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801406a:	e746      	b.n	8013efa <_dtoa_r+0x71a>
 801406c:	9b07      	ldr	r3, [sp, #28]
 801406e:	1e5c      	subs	r4, r3, #1
 8014070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014072:	42a3      	cmp	r3, r4
 8014074:	bfbf      	itttt	lt
 8014076:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014078:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801407a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801407c:	1ae3      	sublt	r3, r4, r3
 801407e:	bfb4      	ite	lt
 8014080:	18d2      	addlt	r2, r2, r3
 8014082:	1b1c      	subge	r4, r3, r4
 8014084:	9b07      	ldr	r3, [sp, #28]
 8014086:	bfbc      	itt	lt
 8014088:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801408a:	2400      	movlt	r4, #0
 801408c:	2b00      	cmp	r3, #0
 801408e:	bfb5      	itete	lt
 8014090:	eba8 0603 	sublt.w	r6, r8, r3
 8014094:	9b07      	ldrge	r3, [sp, #28]
 8014096:	2300      	movlt	r3, #0
 8014098:	4646      	movge	r6, r8
 801409a:	e730      	b.n	8013efe <_dtoa_r+0x71e>
 801409c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801409e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80140a0:	4646      	mov	r6, r8
 80140a2:	e735      	b.n	8013f10 <_dtoa_r+0x730>
 80140a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80140a6:	e75c      	b.n	8013f62 <_dtoa_r+0x782>
 80140a8:	2300      	movs	r3, #0
 80140aa:	e788      	b.n	8013fbe <_dtoa_r+0x7de>
 80140ac:	3fe00000 	.word	0x3fe00000
 80140b0:	40240000 	.word	0x40240000
 80140b4:	40140000 	.word	0x40140000
 80140b8:	9b02      	ldr	r3, [sp, #8]
 80140ba:	e780      	b.n	8013fbe <_dtoa_r+0x7de>
 80140bc:	2300      	movs	r3, #0
 80140be:	930a      	str	r3, [sp, #40]	@ 0x28
 80140c0:	e782      	b.n	8013fc8 <_dtoa_r+0x7e8>
 80140c2:	d099      	beq.n	8013ff8 <_dtoa_r+0x818>
 80140c4:	9a08      	ldr	r2, [sp, #32]
 80140c6:	331c      	adds	r3, #28
 80140c8:	441a      	add	r2, r3
 80140ca:	4498      	add	r8, r3
 80140cc:	441e      	add	r6, r3
 80140ce:	9208      	str	r2, [sp, #32]
 80140d0:	e792      	b.n	8013ff8 <_dtoa_r+0x818>
 80140d2:	4603      	mov	r3, r0
 80140d4:	e7f6      	b.n	80140c4 <_dtoa_r+0x8e4>
 80140d6:	9b07      	ldr	r3, [sp, #28]
 80140d8:	9704      	str	r7, [sp, #16]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	dc20      	bgt.n	8014120 <_dtoa_r+0x940>
 80140de:	9300      	str	r3, [sp, #0]
 80140e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140e2:	2b02      	cmp	r3, #2
 80140e4:	dd1e      	ble.n	8014124 <_dtoa_r+0x944>
 80140e6:	9b00      	ldr	r3, [sp, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f47f aec0 	bne.w	8013e6e <_dtoa_r+0x68e>
 80140ee:	4621      	mov	r1, r4
 80140f0:	2205      	movs	r2, #5
 80140f2:	4658      	mov	r0, fp
 80140f4:	f000 fa9a 	bl	801462c <__multadd>
 80140f8:	4601      	mov	r1, r0
 80140fa:	4604      	mov	r4, r0
 80140fc:	4648      	mov	r0, r9
 80140fe:	f000 fcad 	bl	8014a5c <__mcmp>
 8014102:	2800      	cmp	r0, #0
 8014104:	f77f aeb3 	ble.w	8013e6e <_dtoa_r+0x68e>
 8014108:	4656      	mov	r6, sl
 801410a:	2331      	movs	r3, #49	@ 0x31
 801410c:	f806 3b01 	strb.w	r3, [r6], #1
 8014110:	9b04      	ldr	r3, [sp, #16]
 8014112:	3301      	adds	r3, #1
 8014114:	9304      	str	r3, [sp, #16]
 8014116:	e6ae      	b.n	8013e76 <_dtoa_r+0x696>
 8014118:	9c07      	ldr	r4, [sp, #28]
 801411a:	9704      	str	r7, [sp, #16]
 801411c:	4625      	mov	r5, r4
 801411e:	e7f3      	b.n	8014108 <_dtoa_r+0x928>
 8014120:	9b07      	ldr	r3, [sp, #28]
 8014122:	9300      	str	r3, [sp, #0]
 8014124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014126:	2b00      	cmp	r3, #0
 8014128:	f000 8104 	beq.w	8014334 <_dtoa_r+0xb54>
 801412c:	2e00      	cmp	r6, #0
 801412e:	dd05      	ble.n	801413c <_dtoa_r+0x95c>
 8014130:	4629      	mov	r1, r5
 8014132:	4632      	mov	r2, r6
 8014134:	4658      	mov	r0, fp
 8014136:	f000 fc25 	bl	8014984 <__lshift>
 801413a:	4605      	mov	r5, r0
 801413c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801413e:	2b00      	cmp	r3, #0
 8014140:	d05a      	beq.n	80141f8 <_dtoa_r+0xa18>
 8014142:	6869      	ldr	r1, [r5, #4]
 8014144:	4658      	mov	r0, fp
 8014146:	f000 fa0f 	bl	8014568 <_Balloc>
 801414a:	4606      	mov	r6, r0
 801414c:	b928      	cbnz	r0, 801415a <_dtoa_r+0x97a>
 801414e:	4b84      	ldr	r3, [pc, #528]	@ (8014360 <_dtoa_r+0xb80>)
 8014150:	4602      	mov	r2, r0
 8014152:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014156:	f7ff bb5a 	b.w	801380e <_dtoa_r+0x2e>
 801415a:	692a      	ldr	r2, [r5, #16]
 801415c:	3202      	adds	r2, #2
 801415e:	0092      	lsls	r2, r2, #2
 8014160:	f105 010c 	add.w	r1, r5, #12
 8014164:	300c      	adds	r0, #12
 8014166:	f7ff faa4 	bl	80136b2 <memcpy>
 801416a:	2201      	movs	r2, #1
 801416c:	4631      	mov	r1, r6
 801416e:	4658      	mov	r0, fp
 8014170:	f000 fc08 	bl	8014984 <__lshift>
 8014174:	f10a 0301 	add.w	r3, sl, #1
 8014178:	9307      	str	r3, [sp, #28]
 801417a:	9b00      	ldr	r3, [sp, #0]
 801417c:	4453      	add	r3, sl
 801417e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014180:	9b02      	ldr	r3, [sp, #8]
 8014182:	f003 0301 	and.w	r3, r3, #1
 8014186:	462f      	mov	r7, r5
 8014188:	930a      	str	r3, [sp, #40]	@ 0x28
 801418a:	4605      	mov	r5, r0
 801418c:	9b07      	ldr	r3, [sp, #28]
 801418e:	4621      	mov	r1, r4
 8014190:	3b01      	subs	r3, #1
 8014192:	4648      	mov	r0, r9
 8014194:	9300      	str	r3, [sp, #0]
 8014196:	f7ff fa9a 	bl	80136ce <quorem>
 801419a:	4639      	mov	r1, r7
 801419c:	9002      	str	r0, [sp, #8]
 801419e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80141a2:	4648      	mov	r0, r9
 80141a4:	f000 fc5a 	bl	8014a5c <__mcmp>
 80141a8:	462a      	mov	r2, r5
 80141aa:	9008      	str	r0, [sp, #32]
 80141ac:	4621      	mov	r1, r4
 80141ae:	4658      	mov	r0, fp
 80141b0:	f000 fc70 	bl	8014a94 <__mdiff>
 80141b4:	68c2      	ldr	r2, [r0, #12]
 80141b6:	4606      	mov	r6, r0
 80141b8:	bb02      	cbnz	r2, 80141fc <_dtoa_r+0xa1c>
 80141ba:	4601      	mov	r1, r0
 80141bc:	4648      	mov	r0, r9
 80141be:	f000 fc4d 	bl	8014a5c <__mcmp>
 80141c2:	4602      	mov	r2, r0
 80141c4:	4631      	mov	r1, r6
 80141c6:	4658      	mov	r0, fp
 80141c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80141ca:	f000 fa0d 	bl	80145e8 <_Bfree>
 80141ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141d2:	9e07      	ldr	r6, [sp, #28]
 80141d4:	ea43 0102 	orr.w	r1, r3, r2
 80141d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141da:	4319      	orrs	r1, r3
 80141dc:	d110      	bne.n	8014200 <_dtoa_r+0xa20>
 80141de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80141e2:	d029      	beq.n	8014238 <_dtoa_r+0xa58>
 80141e4:	9b08      	ldr	r3, [sp, #32]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	dd02      	ble.n	80141f0 <_dtoa_r+0xa10>
 80141ea:	9b02      	ldr	r3, [sp, #8]
 80141ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80141f0:	9b00      	ldr	r3, [sp, #0]
 80141f2:	f883 8000 	strb.w	r8, [r3]
 80141f6:	e63f      	b.n	8013e78 <_dtoa_r+0x698>
 80141f8:	4628      	mov	r0, r5
 80141fa:	e7bb      	b.n	8014174 <_dtoa_r+0x994>
 80141fc:	2201      	movs	r2, #1
 80141fe:	e7e1      	b.n	80141c4 <_dtoa_r+0x9e4>
 8014200:	9b08      	ldr	r3, [sp, #32]
 8014202:	2b00      	cmp	r3, #0
 8014204:	db04      	blt.n	8014210 <_dtoa_r+0xa30>
 8014206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014208:	430b      	orrs	r3, r1
 801420a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801420c:	430b      	orrs	r3, r1
 801420e:	d120      	bne.n	8014252 <_dtoa_r+0xa72>
 8014210:	2a00      	cmp	r2, #0
 8014212:	dded      	ble.n	80141f0 <_dtoa_r+0xa10>
 8014214:	4649      	mov	r1, r9
 8014216:	2201      	movs	r2, #1
 8014218:	4658      	mov	r0, fp
 801421a:	f000 fbb3 	bl	8014984 <__lshift>
 801421e:	4621      	mov	r1, r4
 8014220:	4681      	mov	r9, r0
 8014222:	f000 fc1b 	bl	8014a5c <__mcmp>
 8014226:	2800      	cmp	r0, #0
 8014228:	dc03      	bgt.n	8014232 <_dtoa_r+0xa52>
 801422a:	d1e1      	bne.n	80141f0 <_dtoa_r+0xa10>
 801422c:	f018 0f01 	tst.w	r8, #1
 8014230:	d0de      	beq.n	80141f0 <_dtoa_r+0xa10>
 8014232:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014236:	d1d8      	bne.n	80141ea <_dtoa_r+0xa0a>
 8014238:	9a00      	ldr	r2, [sp, #0]
 801423a:	2339      	movs	r3, #57	@ 0x39
 801423c:	7013      	strb	r3, [r2, #0]
 801423e:	4633      	mov	r3, r6
 8014240:	461e      	mov	r6, r3
 8014242:	3b01      	subs	r3, #1
 8014244:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014248:	2a39      	cmp	r2, #57	@ 0x39
 801424a:	d052      	beq.n	80142f2 <_dtoa_r+0xb12>
 801424c:	3201      	adds	r2, #1
 801424e:	701a      	strb	r2, [r3, #0]
 8014250:	e612      	b.n	8013e78 <_dtoa_r+0x698>
 8014252:	2a00      	cmp	r2, #0
 8014254:	dd07      	ble.n	8014266 <_dtoa_r+0xa86>
 8014256:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801425a:	d0ed      	beq.n	8014238 <_dtoa_r+0xa58>
 801425c:	9a00      	ldr	r2, [sp, #0]
 801425e:	f108 0301 	add.w	r3, r8, #1
 8014262:	7013      	strb	r3, [r2, #0]
 8014264:	e608      	b.n	8013e78 <_dtoa_r+0x698>
 8014266:	9b07      	ldr	r3, [sp, #28]
 8014268:	9a07      	ldr	r2, [sp, #28]
 801426a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801426e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014270:	4293      	cmp	r3, r2
 8014272:	d028      	beq.n	80142c6 <_dtoa_r+0xae6>
 8014274:	4649      	mov	r1, r9
 8014276:	2300      	movs	r3, #0
 8014278:	220a      	movs	r2, #10
 801427a:	4658      	mov	r0, fp
 801427c:	f000 f9d6 	bl	801462c <__multadd>
 8014280:	42af      	cmp	r7, r5
 8014282:	4681      	mov	r9, r0
 8014284:	f04f 0300 	mov.w	r3, #0
 8014288:	f04f 020a 	mov.w	r2, #10
 801428c:	4639      	mov	r1, r7
 801428e:	4658      	mov	r0, fp
 8014290:	d107      	bne.n	80142a2 <_dtoa_r+0xac2>
 8014292:	f000 f9cb 	bl	801462c <__multadd>
 8014296:	4607      	mov	r7, r0
 8014298:	4605      	mov	r5, r0
 801429a:	9b07      	ldr	r3, [sp, #28]
 801429c:	3301      	adds	r3, #1
 801429e:	9307      	str	r3, [sp, #28]
 80142a0:	e774      	b.n	801418c <_dtoa_r+0x9ac>
 80142a2:	f000 f9c3 	bl	801462c <__multadd>
 80142a6:	4629      	mov	r1, r5
 80142a8:	4607      	mov	r7, r0
 80142aa:	2300      	movs	r3, #0
 80142ac:	220a      	movs	r2, #10
 80142ae:	4658      	mov	r0, fp
 80142b0:	f000 f9bc 	bl	801462c <__multadd>
 80142b4:	4605      	mov	r5, r0
 80142b6:	e7f0      	b.n	801429a <_dtoa_r+0xaba>
 80142b8:	9b00      	ldr	r3, [sp, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	bfcc      	ite	gt
 80142be:	461e      	movgt	r6, r3
 80142c0:	2601      	movle	r6, #1
 80142c2:	4456      	add	r6, sl
 80142c4:	2700      	movs	r7, #0
 80142c6:	4649      	mov	r1, r9
 80142c8:	2201      	movs	r2, #1
 80142ca:	4658      	mov	r0, fp
 80142cc:	f000 fb5a 	bl	8014984 <__lshift>
 80142d0:	4621      	mov	r1, r4
 80142d2:	4681      	mov	r9, r0
 80142d4:	f000 fbc2 	bl	8014a5c <__mcmp>
 80142d8:	2800      	cmp	r0, #0
 80142da:	dcb0      	bgt.n	801423e <_dtoa_r+0xa5e>
 80142dc:	d102      	bne.n	80142e4 <_dtoa_r+0xb04>
 80142de:	f018 0f01 	tst.w	r8, #1
 80142e2:	d1ac      	bne.n	801423e <_dtoa_r+0xa5e>
 80142e4:	4633      	mov	r3, r6
 80142e6:	461e      	mov	r6, r3
 80142e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142ec:	2a30      	cmp	r2, #48	@ 0x30
 80142ee:	d0fa      	beq.n	80142e6 <_dtoa_r+0xb06>
 80142f0:	e5c2      	b.n	8013e78 <_dtoa_r+0x698>
 80142f2:	459a      	cmp	sl, r3
 80142f4:	d1a4      	bne.n	8014240 <_dtoa_r+0xa60>
 80142f6:	9b04      	ldr	r3, [sp, #16]
 80142f8:	3301      	adds	r3, #1
 80142fa:	9304      	str	r3, [sp, #16]
 80142fc:	2331      	movs	r3, #49	@ 0x31
 80142fe:	f88a 3000 	strb.w	r3, [sl]
 8014302:	e5b9      	b.n	8013e78 <_dtoa_r+0x698>
 8014304:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014306:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014364 <_dtoa_r+0xb84>
 801430a:	b11b      	cbz	r3, 8014314 <_dtoa_r+0xb34>
 801430c:	f10a 0308 	add.w	r3, sl, #8
 8014310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014312:	6013      	str	r3, [r2, #0]
 8014314:	4650      	mov	r0, sl
 8014316:	b019      	add	sp, #100	@ 0x64
 8014318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801431e:	2b01      	cmp	r3, #1
 8014320:	f77f ae37 	ble.w	8013f92 <_dtoa_r+0x7b2>
 8014324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014326:	930a      	str	r3, [sp, #40]	@ 0x28
 8014328:	2001      	movs	r0, #1
 801432a:	e655      	b.n	8013fd8 <_dtoa_r+0x7f8>
 801432c:	9b00      	ldr	r3, [sp, #0]
 801432e:	2b00      	cmp	r3, #0
 8014330:	f77f aed6 	ble.w	80140e0 <_dtoa_r+0x900>
 8014334:	4656      	mov	r6, sl
 8014336:	4621      	mov	r1, r4
 8014338:	4648      	mov	r0, r9
 801433a:	f7ff f9c8 	bl	80136ce <quorem>
 801433e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014342:	f806 8b01 	strb.w	r8, [r6], #1
 8014346:	9b00      	ldr	r3, [sp, #0]
 8014348:	eba6 020a 	sub.w	r2, r6, sl
 801434c:	4293      	cmp	r3, r2
 801434e:	ddb3      	ble.n	80142b8 <_dtoa_r+0xad8>
 8014350:	4649      	mov	r1, r9
 8014352:	2300      	movs	r3, #0
 8014354:	220a      	movs	r2, #10
 8014356:	4658      	mov	r0, fp
 8014358:	f000 f968 	bl	801462c <__multadd>
 801435c:	4681      	mov	r9, r0
 801435e:	e7ea      	b.n	8014336 <_dtoa_r+0xb56>
 8014360:	08015634 	.word	0x08015634
 8014364:	080155b8 	.word	0x080155b8

08014368 <_free_r>:
 8014368:	b538      	push	{r3, r4, r5, lr}
 801436a:	4605      	mov	r5, r0
 801436c:	2900      	cmp	r1, #0
 801436e:	d041      	beq.n	80143f4 <_free_r+0x8c>
 8014370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014374:	1f0c      	subs	r4, r1, #4
 8014376:	2b00      	cmp	r3, #0
 8014378:	bfb8      	it	lt
 801437a:	18e4      	addlt	r4, r4, r3
 801437c:	f000 f8e8 	bl	8014550 <__malloc_lock>
 8014380:	4a1d      	ldr	r2, [pc, #116]	@ (80143f8 <_free_r+0x90>)
 8014382:	6813      	ldr	r3, [r2, #0]
 8014384:	b933      	cbnz	r3, 8014394 <_free_r+0x2c>
 8014386:	6063      	str	r3, [r4, #4]
 8014388:	6014      	str	r4, [r2, #0]
 801438a:	4628      	mov	r0, r5
 801438c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014390:	f000 b8e4 	b.w	801455c <__malloc_unlock>
 8014394:	42a3      	cmp	r3, r4
 8014396:	d908      	bls.n	80143aa <_free_r+0x42>
 8014398:	6820      	ldr	r0, [r4, #0]
 801439a:	1821      	adds	r1, r4, r0
 801439c:	428b      	cmp	r3, r1
 801439e:	bf01      	itttt	eq
 80143a0:	6819      	ldreq	r1, [r3, #0]
 80143a2:	685b      	ldreq	r3, [r3, #4]
 80143a4:	1809      	addeq	r1, r1, r0
 80143a6:	6021      	streq	r1, [r4, #0]
 80143a8:	e7ed      	b.n	8014386 <_free_r+0x1e>
 80143aa:	461a      	mov	r2, r3
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	b10b      	cbz	r3, 80143b4 <_free_r+0x4c>
 80143b0:	42a3      	cmp	r3, r4
 80143b2:	d9fa      	bls.n	80143aa <_free_r+0x42>
 80143b4:	6811      	ldr	r1, [r2, #0]
 80143b6:	1850      	adds	r0, r2, r1
 80143b8:	42a0      	cmp	r0, r4
 80143ba:	d10b      	bne.n	80143d4 <_free_r+0x6c>
 80143bc:	6820      	ldr	r0, [r4, #0]
 80143be:	4401      	add	r1, r0
 80143c0:	1850      	adds	r0, r2, r1
 80143c2:	4283      	cmp	r3, r0
 80143c4:	6011      	str	r1, [r2, #0]
 80143c6:	d1e0      	bne.n	801438a <_free_r+0x22>
 80143c8:	6818      	ldr	r0, [r3, #0]
 80143ca:	685b      	ldr	r3, [r3, #4]
 80143cc:	6053      	str	r3, [r2, #4]
 80143ce:	4408      	add	r0, r1
 80143d0:	6010      	str	r0, [r2, #0]
 80143d2:	e7da      	b.n	801438a <_free_r+0x22>
 80143d4:	d902      	bls.n	80143dc <_free_r+0x74>
 80143d6:	230c      	movs	r3, #12
 80143d8:	602b      	str	r3, [r5, #0]
 80143da:	e7d6      	b.n	801438a <_free_r+0x22>
 80143dc:	6820      	ldr	r0, [r4, #0]
 80143de:	1821      	adds	r1, r4, r0
 80143e0:	428b      	cmp	r3, r1
 80143e2:	bf04      	itt	eq
 80143e4:	6819      	ldreq	r1, [r3, #0]
 80143e6:	685b      	ldreq	r3, [r3, #4]
 80143e8:	6063      	str	r3, [r4, #4]
 80143ea:	bf04      	itt	eq
 80143ec:	1809      	addeq	r1, r1, r0
 80143ee:	6021      	streq	r1, [r4, #0]
 80143f0:	6054      	str	r4, [r2, #4]
 80143f2:	e7ca      	b.n	801438a <_free_r+0x22>
 80143f4:	bd38      	pop	{r3, r4, r5, pc}
 80143f6:	bf00      	nop
 80143f8:	20006950 	.word	0x20006950

080143fc <malloc>:
 80143fc:	4b02      	ldr	r3, [pc, #8]	@ (8014408 <malloc+0xc>)
 80143fe:	4601      	mov	r1, r0
 8014400:	6818      	ldr	r0, [r3, #0]
 8014402:	f000 b825 	b.w	8014450 <_malloc_r>
 8014406:	bf00      	nop
 8014408:	20000310 	.word	0x20000310

0801440c <sbrk_aligned>:
 801440c:	b570      	push	{r4, r5, r6, lr}
 801440e:	4e0f      	ldr	r6, [pc, #60]	@ (801444c <sbrk_aligned+0x40>)
 8014410:	460c      	mov	r4, r1
 8014412:	6831      	ldr	r1, [r6, #0]
 8014414:	4605      	mov	r5, r0
 8014416:	b911      	cbnz	r1, 801441e <sbrk_aligned+0x12>
 8014418:	f000 fcd4 	bl	8014dc4 <_sbrk_r>
 801441c:	6030      	str	r0, [r6, #0]
 801441e:	4621      	mov	r1, r4
 8014420:	4628      	mov	r0, r5
 8014422:	f000 fccf 	bl	8014dc4 <_sbrk_r>
 8014426:	1c43      	adds	r3, r0, #1
 8014428:	d103      	bne.n	8014432 <sbrk_aligned+0x26>
 801442a:	f04f 34ff 	mov.w	r4, #4294967295
 801442e:	4620      	mov	r0, r4
 8014430:	bd70      	pop	{r4, r5, r6, pc}
 8014432:	1cc4      	adds	r4, r0, #3
 8014434:	f024 0403 	bic.w	r4, r4, #3
 8014438:	42a0      	cmp	r0, r4
 801443a:	d0f8      	beq.n	801442e <sbrk_aligned+0x22>
 801443c:	1a21      	subs	r1, r4, r0
 801443e:	4628      	mov	r0, r5
 8014440:	f000 fcc0 	bl	8014dc4 <_sbrk_r>
 8014444:	3001      	adds	r0, #1
 8014446:	d1f2      	bne.n	801442e <sbrk_aligned+0x22>
 8014448:	e7ef      	b.n	801442a <sbrk_aligned+0x1e>
 801444a:	bf00      	nop
 801444c:	2000694c 	.word	0x2000694c

08014450 <_malloc_r>:
 8014450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014454:	1ccd      	adds	r5, r1, #3
 8014456:	f025 0503 	bic.w	r5, r5, #3
 801445a:	3508      	adds	r5, #8
 801445c:	2d0c      	cmp	r5, #12
 801445e:	bf38      	it	cc
 8014460:	250c      	movcc	r5, #12
 8014462:	2d00      	cmp	r5, #0
 8014464:	4606      	mov	r6, r0
 8014466:	db01      	blt.n	801446c <_malloc_r+0x1c>
 8014468:	42a9      	cmp	r1, r5
 801446a:	d904      	bls.n	8014476 <_malloc_r+0x26>
 801446c:	230c      	movs	r3, #12
 801446e:	6033      	str	r3, [r6, #0]
 8014470:	2000      	movs	r0, #0
 8014472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801454c <_malloc_r+0xfc>
 801447a:	f000 f869 	bl	8014550 <__malloc_lock>
 801447e:	f8d8 3000 	ldr.w	r3, [r8]
 8014482:	461c      	mov	r4, r3
 8014484:	bb44      	cbnz	r4, 80144d8 <_malloc_r+0x88>
 8014486:	4629      	mov	r1, r5
 8014488:	4630      	mov	r0, r6
 801448a:	f7ff ffbf 	bl	801440c <sbrk_aligned>
 801448e:	1c43      	adds	r3, r0, #1
 8014490:	4604      	mov	r4, r0
 8014492:	d158      	bne.n	8014546 <_malloc_r+0xf6>
 8014494:	f8d8 4000 	ldr.w	r4, [r8]
 8014498:	4627      	mov	r7, r4
 801449a:	2f00      	cmp	r7, #0
 801449c:	d143      	bne.n	8014526 <_malloc_r+0xd6>
 801449e:	2c00      	cmp	r4, #0
 80144a0:	d04b      	beq.n	801453a <_malloc_r+0xea>
 80144a2:	6823      	ldr	r3, [r4, #0]
 80144a4:	4639      	mov	r1, r7
 80144a6:	4630      	mov	r0, r6
 80144a8:	eb04 0903 	add.w	r9, r4, r3
 80144ac:	f000 fc8a 	bl	8014dc4 <_sbrk_r>
 80144b0:	4581      	cmp	r9, r0
 80144b2:	d142      	bne.n	801453a <_malloc_r+0xea>
 80144b4:	6821      	ldr	r1, [r4, #0]
 80144b6:	1a6d      	subs	r5, r5, r1
 80144b8:	4629      	mov	r1, r5
 80144ba:	4630      	mov	r0, r6
 80144bc:	f7ff ffa6 	bl	801440c <sbrk_aligned>
 80144c0:	3001      	adds	r0, #1
 80144c2:	d03a      	beq.n	801453a <_malloc_r+0xea>
 80144c4:	6823      	ldr	r3, [r4, #0]
 80144c6:	442b      	add	r3, r5
 80144c8:	6023      	str	r3, [r4, #0]
 80144ca:	f8d8 3000 	ldr.w	r3, [r8]
 80144ce:	685a      	ldr	r2, [r3, #4]
 80144d0:	bb62      	cbnz	r2, 801452c <_malloc_r+0xdc>
 80144d2:	f8c8 7000 	str.w	r7, [r8]
 80144d6:	e00f      	b.n	80144f8 <_malloc_r+0xa8>
 80144d8:	6822      	ldr	r2, [r4, #0]
 80144da:	1b52      	subs	r2, r2, r5
 80144dc:	d420      	bmi.n	8014520 <_malloc_r+0xd0>
 80144de:	2a0b      	cmp	r2, #11
 80144e0:	d917      	bls.n	8014512 <_malloc_r+0xc2>
 80144e2:	1961      	adds	r1, r4, r5
 80144e4:	42a3      	cmp	r3, r4
 80144e6:	6025      	str	r5, [r4, #0]
 80144e8:	bf18      	it	ne
 80144ea:	6059      	strne	r1, [r3, #4]
 80144ec:	6863      	ldr	r3, [r4, #4]
 80144ee:	bf08      	it	eq
 80144f0:	f8c8 1000 	streq.w	r1, [r8]
 80144f4:	5162      	str	r2, [r4, r5]
 80144f6:	604b      	str	r3, [r1, #4]
 80144f8:	4630      	mov	r0, r6
 80144fa:	f000 f82f 	bl	801455c <__malloc_unlock>
 80144fe:	f104 000b 	add.w	r0, r4, #11
 8014502:	1d23      	adds	r3, r4, #4
 8014504:	f020 0007 	bic.w	r0, r0, #7
 8014508:	1ac2      	subs	r2, r0, r3
 801450a:	bf1c      	itt	ne
 801450c:	1a1b      	subne	r3, r3, r0
 801450e:	50a3      	strne	r3, [r4, r2]
 8014510:	e7af      	b.n	8014472 <_malloc_r+0x22>
 8014512:	6862      	ldr	r2, [r4, #4]
 8014514:	42a3      	cmp	r3, r4
 8014516:	bf0c      	ite	eq
 8014518:	f8c8 2000 	streq.w	r2, [r8]
 801451c:	605a      	strne	r2, [r3, #4]
 801451e:	e7eb      	b.n	80144f8 <_malloc_r+0xa8>
 8014520:	4623      	mov	r3, r4
 8014522:	6864      	ldr	r4, [r4, #4]
 8014524:	e7ae      	b.n	8014484 <_malloc_r+0x34>
 8014526:	463c      	mov	r4, r7
 8014528:	687f      	ldr	r7, [r7, #4]
 801452a:	e7b6      	b.n	801449a <_malloc_r+0x4a>
 801452c:	461a      	mov	r2, r3
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	42a3      	cmp	r3, r4
 8014532:	d1fb      	bne.n	801452c <_malloc_r+0xdc>
 8014534:	2300      	movs	r3, #0
 8014536:	6053      	str	r3, [r2, #4]
 8014538:	e7de      	b.n	80144f8 <_malloc_r+0xa8>
 801453a:	230c      	movs	r3, #12
 801453c:	6033      	str	r3, [r6, #0]
 801453e:	4630      	mov	r0, r6
 8014540:	f000 f80c 	bl	801455c <__malloc_unlock>
 8014544:	e794      	b.n	8014470 <_malloc_r+0x20>
 8014546:	6005      	str	r5, [r0, #0]
 8014548:	e7d6      	b.n	80144f8 <_malloc_r+0xa8>
 801454a:	bf00      	nop
 801454c:	20006950 	.word	0x20006950

08014550 <__malloc_lock>:
 8014550:	4801      	ldr	r0, [pc, #4]	@ (8014558 <__malloc_lock+0x8>)
 8014552:	f7ff b8ac 	b.w	80136ae <__retarget_lock_acquire_recursive>
 8014556:	bf00      	nop
 8014558:	20006948 	.word	0x20006948

0801455c <__malloc_unlock>:
 801455c:	4801      	ldr	r0, [pc, #4]	@ (8014564 <__malloc_unlock+0x8>)
 801455e:	f7ff b8a7 	b.w	80136b0 <__retarget_lock_release_recursive>
 8014562:	bf00      	nop
 8014564:	20006948 	.word	0x20006948

08014568 <_Balloc>:
 8014568:	b570      	push	{r4, r5, r6, lr}
 801456a:	69c6      	ldr	r6, [r0, #28]
 801456c:	4604      	mov	r4, r0
 801456e:	460d      	mov	r5, r1
 8014570:	b976      	cbnz	r6, 8014590 <_Balloc+0x28>
 8014572:	2010      	movs	r0, #16
 8014574:	f7ff ff42 	bl	80143fc <malloc>
 8014578:	4602      	mov	r2, r0
 801457a:	61e0      	str	r0, [r4, #28]
 801457c:	b920      	cbnz	r0, 8014588 <_Balloc+0x20>
 801457e:	4b18      	ldr	r3, [pc, #96]	@ (80145e0 <_Balloc+0x78>)
 8014580:	4818      	ldr	r0, [pc, #96]	@ (80145e4 <_Balloc+0x7c>)
 8014582:	216b      	movs	r1, #107	@ 0x6b
 8014584:	f000 fc2e 	bl	8014de4 <__assert_func>
 8014588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801458c:	6006      	str	r6, [r0, #0]
 801458e:	60c6      	str	r6, [r0, #12]
 8014590:	69e6      	ldr	r6, [r4, #28]
 8014592:	68f3      	ldr	r3, [r6, #12]
 8014594:	b183      	cbz	r3, 80145b8 <_Balloc+0x50>
 8014596:	69e3      	ldr	r3, [r4, #28]
 8014598:	68db      	ldr	r3, [r3, #12]
 801459a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801459e:	b9b8      	cbnz	r0, 80145d0 <_Balloc+0x68>
 80145a0:	2101      	movs	r1, #1
 80145a2:	fa01 f605 	lsl.w	r6, r1, r5
 80145a6:	1d72      	adds	r2, r6, #5
 80145a8:	0092      	lsls	r2, r2, #2
 80145aa:	4620      	mov	r0, r4
 80145ac:	f000 fc38 	bl	8014e20 <_calloc_r>
 80145b0:	b160      	cbz	r0, 80145cc <_Balloc+0x64>
 80145b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80145b6:	e00e      	b.n	80145d6 <_Balloc+0x6e>
 80145b8:	2221      	movs	r2, #33	@ 0x21
 80145ba:	2104      	movs	r1, #4
 80145bc:	4620      	mov	r0, r4
 80145be:	f000 fc2f 	bl	8014e20 <_calloc_r>
 80145c2:	69e3      	ldr	r3, [r4, #28]
 80145c4:	60f0      	str	r0, [r6, #12]
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d1e4      	bne.n	8014596 <_Balloc+0x2e>
 80145cc:	2000      	movs	r0, #0
 80145ce:	bd70      	pop	{r4, r5, r6, pc}
 80145d0:	6802      	ldr	r2, [r0, #0]
 80145d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145d6:	2300      	movs	r3, #0
 80145d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80145dc:	e7f7      	b.n	80145ce <_Balloc+0x66>
 80145de:	bf00      	nop
 80145e0:	080155c5 	.word	0x080155c5
 80145e4:	08015645 	.word	0x08015645

080145e8 <_Bfree>:
 80145e8:	b570      	push	{r4, r5, r6, lr}
 80145ea:	69c6      	ldr	r6, [r0, #28]
 80145ec:	4605      	mov	r5, r0
 80145ee:	460c      	mov	r4, r1
 80145f0:	b976      	cbnz	r6, 8014610 <_Bfree+0x28>
 80145f2:	2010      	movs	r0, #16
 80145f4:	f7ff ff02 	bl	80143fc <malloc>
 80145f8:	4602      	mov	r2, r0
 80145fa:	61e8      	str	r0, [r5, #28]
 80145fc:	b920      	cbnz	r0, 8014608 <_Bfree+0x20>
 80145fe:	4b09      	ldr	r3, [pc, #36]	@ (8014624 <_Bfree+0x3c>)
 8014600:	4809      	ldr	r0, [pc, #36]	@ (8014628 <_Bfree+0x40>)
 8014602:	218f      	movs	r1, #143	@ 0x8f
 8014604:	f000 fbee 	bl	8014de4 <__assert_func>
 8014608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801460c:	6006      	str	r6, [r0, #0]
 801460e:	60c6      	str	r6, [r0, #12]
 8014610:	b13c      	cbz	r4, 8014622 <_Bfree+0x3a>
 8014612:	69eb      	ldr	r3, [r5, #28]
 8014614:	6862      	ldr	r2, [r4, #4]
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801461c:	6021      	str	r1, [r4, #0]
 801461e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014622:	bd70      	pop	{r4, r5, r6, pc}
 8014624:	080155c5 	.word	0x080155c5
 8014628:	08015645 	.word	0x08015645

0801462c <__multadd>:
 801462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014630:	690d      	ldr	r5, [r1, #16]
 8014632:	4607      	mov	r7, r0
 8014634:	460c      	mov	r4, r1
 8014636:	461e      	mov	r6, r3
 8014638:	f101 0c14 	add.w	ip, r1, #20
 801463c:	2000      	movs	r0, #0
 801463e:	f8dc 3000 	ldr.w	r3, [ip]
 8014642:	b299      	uxth	r1, r3
 8014644:	fb02 6101 	mla	r1, r2, r1, r6
 8014648:	0c1e      	lsrs	r6, r3, #16
 801464a:	0c0b      	lsrs	r3, r1, #16
 801464c:	fb02 3306 	mla	r3, r2, r6, r3
 8014650:	b289      	uxth	r1, r1
 8014652:	3001      	adds	r0, #1
 8014654:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014658:	4285      	cmp	r5, r0
 801465a:	f84c 1b04 	str.w	r1, [ip], #4
 801465e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014662:	dcec      	bgt.n	801463e <__multadd+0x12>
 8014664:	b30e      	cbz	r6, 80146aa <__multadd+0x7e>
 8014666:	68a3      	ldr	r3, [r4, #8]
 8014668:	42ab      	cmp	r3, r5
 801466a:	dc19      	bgt.n	80146a0 <__multadd+0x74>
 801466c:	6861      	ldr	r1, [r4, #4]
 801466e:	4638      	mov	r0, r7
 8014670:	3101      	adds	r1, #1
 8014672:	f7ff ff79 	bl	8014568 <_Balloc>
 8014676:	4680      	mov	r8, r0
 8014678:	b928      	cbnz	r0, 8014686 <__multadd+0x5a>
 801467a:	4602      	mov	r2, r0
 801467c:	4b0c      	ldr	r3, [pc, #48]	@ (80146b0 <__multadd+0x84>)
 801467e:	480d      	ldr	r0, [pc, #52]	@ (80146b4 <__multadd+0x88>)
 8014680:	21ba      	movs	r1, #186	@ 0xba
 8014682:	f000 fbaf 	bl	8014de4 <__assert_func>
 8014686:	6922      	ldr	r2, [r4, #16]
 8014688:	3202      	adds	r2, #2
 801468a:	f104 010c 	add.w	r1, r4, #12
 801468e:	0092      	lsls	r2, r2, #2
 8014690:	300c      	adds	r0, #12
 8014692:	f7ff f80e 	bl	80136b2 <memcpy>
 8014696:	4621      	mov	r1, r4
 8014698:	4638      	mov	r0, r7
 801469a:	f7ff ffa5 	bl	80145e8 <_Bfree>
 801469e:	4644      	mov	r4, r8
 80146a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80146a4:	3501      	adds	r5, #1
 80146a6:	615e      	str	r6, [r3, #20]
 80146a8:	6125      	str	r5, [r4, #16]
 80146aa:	4620      	mov	r0, r4
 80146ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146b0:	08015634 	.word	0x08015634
 80146b4:	08015645 	.word	0x08015645

080146b8 <__hi0bits>:
 80146b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80146bc:	4603      	mov	r3, r0
 80146be:	bf36      	itet	cc
 80146c0:	0403      	lslcc	r3, r0, #16
 80146c2:	2000      	movcs	r0, #0
 80146c4:	2010      	movcc	r0, #16
 80146c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80146ca:	bf3c      	itt	cc
 80146cc:	021b      	lslcc	r3, r3, #8
 80146ce:	3008      	addcc	r0, #8
 80146d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80146d4:	bf3c      	itt	cc
 80146d6:	011b      	lslcc	r3, r3, #4
 80146d8:	3004      	addcc	r0, #4
 80146da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80146de:	bf3c      	itt	cc
 80146e0:	009b      	lslcc	r3, r3, #2
 80146e2:	3002      	addcc	r0, #2
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	db05      	blt.n	80146f4 <__hi0bits+0x3c>
 80146e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80146ec:	f100 0001 	add.w	r0, r0, #1
 80146f0:	bf08      	it	eq
 80146f2:	2020      	moveq	r0, #32
 80146f4:	4770      	bx	lr

080146f6 <__lo0bits>:
 80146f6:	6803      	ldr	r3, [r0, #0]
 80146f8:	4602      	mov	r2, r0
 80146fa:	f013 0007 	ands.w	r0, r3, #7
 80146fe:	d00b      	beq.n	8014718 <__lo0bits+0x22>
 8014700:	07d9      	lsls	r1, r3, #31
 8014702:	d421      	bmi.n	8014748 <__lo0bits+0x52>
 8014704:	0798      	lsls	r0, r3, #30
 8014706:	bf49      	itett	mi
 8014708:	085b      	lsrmi	r3, r3, #1
 801470a:	089b      	lsrpl	r3, r3, #2
 801470c:	2001      	movmi	r0, #1
 801470e:	6013      	strmi	r3, [r2, #0]
 8014710:	bf5c      	itt	pl
 8014712:	6013      	strpl	r3, [r2, #0]
 8014714:	2002      	movpl	r0, #2
 8014716:	4770      	bx	lr
 8014718:	b299      	uxth	r1, r3
 801471a:	b909      	cbnz	r1, 8014720 <__lo0bits+0x2a>
 801471c:	0c1b      	lsrs	r3, r3, #16
 801471e:	2010      	movs	r0, #16
 8014720:	b2d9      	uxtb	r1, r3
 8014722:	b909      	cbnz	r1, 8014728 <__lo0bits+0x32>
 8014724:	3008      	adds	r0, #8
 8014726:	0a1b      	lsrs	r3, r3, #8
 8014728:	0719      	lsls	r1, r3, #28
 801472a:	bf04      	itt	eq
 801472c:	091b      	lsreq	r3, r3, #4
 801472e:	3004      	addeq	r0, #4
 8014730:	0799      	lsls	r1, r3, #30
 8014732:	bf04      	itt	eq
 8014734:	089b      	lsreq	r3, r3, #2
 8014736:	3002      	addeq	r0, #2
 8014738:	07d9      	lsls	r1, r3, #31
 801473a:	d403      	bmi.n	8014744 <__lo0bits+0x4e>
 801473c:	085b      	lsrs	r3, r3, #1
 801473e:	f100 0001 	add.w	r0, r0, #1
 8014742:	d003      	beq.n	801474c <__lo0bits+0x56>
 8014744:	6013      	str	r3, [r2, #0]
 8014746:	4770      	bx	lr
 8014748:	2000      	movs	r0, #0
 801474a:	4770      	bx	lr
 801474c:	2020      	movs	r0, #32
 801474e:	4770      	bx	lr

08014750 <__i2b>:
 8014750:	b510      	push	{r4, lr}
 8014752:	460c      	mov	r4, r1
 8014754:	2101      	movs	r1, #1
 8014756:	f7ff ff07 	bl	8014568 <_Balloc>
 801475a:	4602      	mov	r2, r0
 801475c:	b928      	cbnz	r0, 801476a <__i2b+0x1a>
 801475e:	4b05      	ldr	r3, [pc, #20]	@ (8014774 <__i2b+0x24>)
 8014760:	4805      	ldr	r0, [pc, #20]	@ (8014778 <__i2b+0x28>)
 8014762:	f240 1145 	movw	r1, #325	@ 0x145
 8014766:	f000 fb3d 	bl	8014de4 <__assert_func>
 801476a:	2301      	movs	r3, #1
 801476c:	6144      	str	r4, [r0, #20]
 801476e:	6103      	str	r3, [r0, #16]
 8014770:	bd10      	pop	{r4, pc}
 8014772:	bf00      	nop
 8014774:	08015634 	.word	0x08015634
 8014778:	08015645 	.word	0x08015645

0801477c <__multiply>:
 801477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014780:	4614      	mov	r4, r2
 8014782:	690a      	ldr	r2, [r1, #16]
 8014784:	6923      	ldr	r3, [r4, #16]
 8014786:	429a      	cmp	r2, r3
 8014788:	bfa8      	it	ge
 801478a:	4623      	movge	r3, r4
 801478c:	460f      	mov	r7, r1
 801478e:	bfa4      	itt	ge
 8014790:	460c      	movge	r4, r1
 8014792:	461f      	movge	r7, r3
 8014794:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014798:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801479c:	68a3      	ldr	r3, [r4, #8]
 801479e:	6861      	ldr	r1, [r4, #4]
 80147a0:	eb0a 0609 	add.w	r6, sl, r9
 80147a4:	42b3      	cmp	r3, r6
 80147a6:	b085      	sub	sp, #20
 80147a8:	bfb8      	it	lt
 80147aa:	3101      	addlt	r1, #1
 80147ac:	f7ff fedc 	bl	8014568 <_Balloc>
 80147b0:	b930      	cbnz	r0, 80147c0 <__multiply+0x44>
 80147b2:	4602      	mov	r2, r0
 80147b4:	4b44      	ldr	r3, [pc, #272]	@ (80148c8 <__multiply+0x14c>)
 80147b6:	4845      	ldr	r0, [pc, #276]	@ (80148cc <__multiply+0x150>)
 80147b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80147bc:	f000 fb12 	bl	8014de4 <__assert_func>
 80147c0:	f100 0514 	add.w	r5, r0, #20
 80147c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80147c8:	462b      	mov	r3, r5
 80147ca:	2200      	movs	r2, #0
 80147cc:	4543      	cmp	r3, r8
 80147ce:	d321      	bcc.n	8014814 <__multiply+0x98>
 80147d0:	f107 0114 	add.w	r1, r7, #20
 80147d4:	f104 0214 	add.w	r2, r4, #20
 80147d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80147dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80147e0:	9302      	str	r3, [sp, #8]
 80147e2:	1b13      	subs	r3, r2, r4
 80147e4:	3b15      	subs	r3, #21
 80147e6:	f023 0303 	bic.w	r3, r3, #3
 80147ea:	3304      	adds	r3, #4
 80147ec:	f104 0715 	add.w	r7, r4, #21
 80147f0:	42ba      	cmp	r2, r7
 80147f2:	bf38      	it	cc
 80147f4:	2304      	movcc	r3, #4
 80147f6:	9301      	str	r3, [sp, #4]
 80147f8:	9b02      	ldr	r3, [sp, #8]
 80147fa:	9103      	str	r1, [sp, #12]
 80147fc:	428b      	cmp	r3, r1
 80147fe:	d80c      	bhi.n	801481a <__multiply+0x9e>
 8014800:	2e00      	cmp	r6, #0
 8014802:	dd03      	ble.n	801480c <__multiply+0x90>
 8014804:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014808:	2b00      	cmp	r3, #0
 801480a:	d05b      	beq.n	80148c4 <__multiply+0x148>
 801480c:	6106      	str	r6, [r0, #16]
 801480e:	b005      	add	sp, #20
 8014810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014814:	f843 2b04 	str.w	r2, [r3], #4
 8014818:	e7d8      	b.n	80147cc <__multiply+0x50>
 801481a:	f8b1 a000 	ldrh.w	sl, [r1]
 801481e:	f1ba 0f00 	cmp.w	sl, #0
 8014822:	d024      	beq.n	801486e <__multiply+0xf2>
 8014824:	f104 0e14 	add.w	lr, r4, #20
 8014828:	46a9      	mov	r9, r5
 801482a:	f04f 0c00 	mov.w	ip, #0
 801482e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014832:	f8d9 3000 	ldr.w	r3, [r9]
 8014836:	fa1f fb87 	uxth.w	fp, r7
 801483a:	b29b      	uxth	r3, r3
 801483c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014840:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014844:	f8d9 7000 	ldr.w	r7, [r9]
 8014848:	4463      	add	r3, ip
 801484a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801484e:	fb0a c70b 	mla	r7, sl, fp, ip
 8014852:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014856:	b29b      	uxth	r3, r3
 8014858:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801485c:	4572      	cmp	r2, lr
 801485e:	f849 3b04 	str.w	r3, [r9], #4
 8014862:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014866:	d8e2      	bhi.n	801482e <__multiply+0xb2>
 8014868:	9b01      	ldr	r3, [sp, #4]
 801486a:	f845 c003 	str.w	ip, [r5, r3]
 801486e:	9b03      	ldr	r3, [sp, #12]
 8014870:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014874:	3104      	adds	r1, #4
 8014876:	f1b9 0f00 	cmp.w	r9, #0
 801487a:	d021      	beq.n	80148c0 <__multiply+0x144>
 801487c:	682b      	ldr	r3, [r5, #0]
 801487e:	f104 0c14 	add.w	ip, r4, #20
 8014882:	46ae      	mov	lr, r5
 8014884:	f04f 0a00 	mov.w	sl, #0
 8014888:	f8bc b000 	ldrh.w	fp, [ip]
 801488c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014890:	fb09 770b 	mla	r7, r9, fp, r7
 8014894:	4457      	add	r7, sl
 8014896:	b29b      	uxth	r3, r3
 8014898:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801489c:	f84e 3b04 	str.w	r3, [lr], #4
 80148a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80148a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80148a8:	f8be 3000 	ldrh.w	r3, [lr]
 80148ac:	fb09 330a 	mla	r3, r9, sl, r3
 80148b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80148b4:	4562      	cmp	r2, ip
 80148b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80148ba:	d8e5      	bhi.n	8014888 <__multiply+0x10c>
 80148bc:	9f01      	ldr	r7, [sp, #4]
 80148be:	51eb      	str	r3, [r5, r7]
 80148c0:	3504      	adds	r5, #4
 80148c2:	e799      	b.n	80147f8 <__multiply+0x7c>
 80148c4:	3e01      	subs	r6, #1
 80148c6:	e79b      	b.n	8014800 <__multiply+0x84>
 80148c8:	08015634 	.word	0x08015634
 80148cc:	08015645 	.word	0x08015645

080148d0 <__pow5mult>:
 80148d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148d4:	4615      	mov	r5, r2
 80148d6:	f012 0203 	ands.w	r2, r2, #3
 80148da:	4607      	mov	r7, r0
 80148dc:	460e      	mov	r6, r1
 80148de:	d007      	beq.n	80148f0 <__pow5mult+0x20>
 80148e0:	4c25      	ldr	r4, [pc, #148]	@ (8014978 <__pow5mult+0xa8>)
 80148e2:	3a01      	subs	r2, #1
 80148e4:	2300      	movs	r3, #0
 80148e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80148ea:	f7ff fe9f 	bl	801462c <__multadd>
 80148ee:	4606      	mov	r6, r0
 80148f0:	10ad      	asrs	r5, r5, #2
 80148f2:	d03d      	beq.n	8014970 <__pow5mult+0xa0>
 80148f4:	69fc      	ldr	r4, [r7, #28]
 80148f6:	b97c      	cbnz	r4, 8014918 <__pow5mult+0x48>
 80148f8:	2010      	movs	r0, #16
 80148fa:	f7ff fd7f 	bl	80143fc <malloc>
 80148fe:	4602      	mov	r2, r0
 8014900:	61f8      	str	r0, [r7, #28]
 8014902:	b928      	cbnz	r0, 8014910 <__pow5mult+0x40>
 8014904:	4b1d      	ldr	r3, [pc, #116]	@ (801497c <__pow5mult+0xac>)
 8014906:	481e      	ldr	r0, [pc, #120]	@ (8014980 <__pow5mult+0xb0>)
 8014908:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801490c:	f000 fa6a 	bl	8014de4 <__assert_func>
 8014910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014914:	6004      	str	r4, [r0, #0]
 8014916:	60c4      	str	r4, [r0, #12]
 8014918:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801491c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014920:	b94c      	cbnz	r4, 8014936 <__pow5mult+0x66>
 8014922:	f240 2171 	movw	r1, #625	@ 0x271
 8014926:	4638      	mov	r0, r7
 8014928:	f7ff ff12 	bl	8014750 <__i2b>
 801492c:	2300      	movs	r3, #0
 801492e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014932:	4604      	mov	r4, r0
 8014934:	6003      	str	r3, [r0, #0]
 8014936:	f04f 0900 	mov.w	r9, #0
 801493a:	07eb      	lsls	r3, r5, #31
 801493c:	d50a      	bpl.n	8014954 <__pow5mult+0x84>
 801493e:	4631      	mov	r1, r6
 8014940:	4622      	mov	r2, r4
 8014942:	4638      	mov	r0, r7
 8014944:	f7ff ff1a 	bl	801477c <__multiply>
 8014948:	4631      	mov	r1, r6
 801494a:	4680      	mov	r8, r0
 801494c:	4638      	mov	r0, r7
 801494e:	f7ff fe4b 	bl	80145e8 <_Bfree>
 8014952:	4646      	mov	r6, r8
 8014954:	106d      	asrs	r5, r5, #1
 8014956:	d00b      	beq.n	8014970 <__pow5mult+0xa0>
 8014958:	6820      	ldr	r0, [r4, #0]
 801495a:	b938      	cbnz	r0, 801496c <__pow5mult+0x9c>
 801495c:	4622      	mov	r2, r4
 801495e:	4621      	mov	r1, r4
 8014960:	4638      	mov	r0, r7
 8014962:	f7ff ff0b 	bl	801477c <__multiply>
 8014966:	6020      	str	r0, [r4, #0]
 8014968:	f8c0 9000 	str.w	r9, [r0]
 801496c:	4604      	mov	r4, r0
 801496e:	e7e4      	b.n	801493a <__pow5mult+0x6a>
 8014970:	4630      	mov	r0, r6
 8014972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014976:	bf00      	nop
 8014978:	080156a0 	.word	0x080156a0
 801497c:	080155c5 	.word	0x080155c5
 8014980:	08015645 	.word	0x08015645

08014984 <__lshift>:
 8014984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014988:	460c      	mov	r4, r1
 801498a:	6849      	ldr	r1, [r1, #4]
 801498c:	6923      	ldr	r3, [r4, #16]
 801498e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014992:	68a3      	ldr	r3, [r4, #8]
 8014994:	4607      	mov	r7, r0
 8014996:	4691      	mov	r9, r2
 8014998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801499c:	f108 0601 	add.w	r6, r8, #1
 80149a0:	42b3      	cmp	r3, r6
 80149a2:	db0b      	blt.n	80149bc <__lshift+0x38>
 80149a4:	4638      	mov	r0, r7
 80149a6:	f7ff fddf 	bl	8014568 <_Balloc>
 80149aa:	4605      	mov	r5, r0
 80149ac:	b948      	cbnz	r0, 80149c2 <__lshift+0x3e>
 80149ae:	4602      	mov	r2, r0
 80149b0:	4b28      	ldr	r3, [pc, #160]	@ (8014a54 <__lshift+0xd0>)
 80149b2:	4829      	ldr	r0, [pc, #164]	@ (8014a58 <__lshift+0xd4>)
 80149b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80149b8:	f000 fa14 	bl	8014de4 <__assert_func>
 80149bc:	3101      	adds	r1, #1
 80149be:	005b      	lsls	r3, r3, #1
 80149c0:	e7ee      	b.n	80149a0 <__lshift+0x1c>
 80149c2:	2300      	movs	r3, #0
 80149c4:	f100 0114 	add.w	r1, r0, #20
 80149c8:	f100 0210 	add.w	r2, r0, #16
 80149cc:	4618      	mov	r0, r3
 80149ce:	4553      	cmp	r3, sl
 80149d0:	db33      	blt.n	8014a3a <__lshift+0xb6>
 80149d2:	6920      	ldr	r0, [r4, #16]
 80149d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80149d8:	f104 0314 	add.w	r3, r4, #20
 80149dc:	f019 091f 	ands.w	r9, r9, #31
 80149e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80149e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80149e8:	d02b      	beq.n	8014a42 <__lshift+0xbe>
 80149ea:	f1c9 0e20 	rsb	lr, r9, #32
 80149ee:	468a      	mov	sl, r1
 80149f0:	2200      	movs	r2, #0
 80149f2:	6818      	ldr	r0, [r3, #0]
 80149f4:	fa00 f009 	lsl.w	r0, r0, r9
 80149f8:	4310      	orrs	r0, r2
 80149fa:	f84a 0b04 	str.w	r0, [sl], #4
 80149fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a02:	459c      	cmp	ip, r3
 8014a04:	fa22 f20e 	lsr.w	r2, r2, lr
 8014a08:	d8f3      	bhi.n	80149f2 <__lshift+0x6e>
 8014a0a:	ebac 0304 	sub.w	r3, ip, r4
 8014a0e:	3b15      	subs	r3, #21
 8014a10:	f023 0303 	bic.w	r3, r3, #3
 8014a14:	3304      	adds	r3, #4
 8014a16:	f104 0015 	add.w	r0, r4, #21
 8014a1a:	4584      	cmp	ip, r0
 8014a1c:	bf38      	it	cc
 8014a1e:	2304      	movcc	r3, #4
 8014a20:	50ca      	str	r2, [r1, r3]
 8014a22:	b10a      	cbz	r2, 8014a28 <__lshift+0xa4>
 8014a24:	f108 0602 	add.w	r6, r8, #2
 8014a28:	3e01      	subs	r6, #1
 8014a2a:	4638      	mov	r0, r7
 8014a2c:	612e      	str	r6, [r5, #16]
 8014a2e:	4621      	mov	r1, r4
 8014a30:	f7ff fdda 	bl	80145e8 <_Bfree>
 8014a34:	4628      	mov	r0, r5
 8014a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014a3e:	3301      	adds	r3, #1
 8014a40:	e7c5      	b.n	80149ce <__lshift+0x4a>
 8014a42:	3904      	subs	r1, #4
 8014a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a48:	f841 2f04 	str.w	r2, [r1, #4]!
 8014a4c:	459c      	cmp	ip, r3
 8014a4e:	d8f9      	bhi.n	8014a44 <__lshift+0xc0>
 8014a50:	e7ea      	b.n	8014a28 <__lshift+0xa4>
 8014a52:	bf00      	nop
 8014a54:	08015634 	.word	0x08015634
 8014a58:	08015645 	.word	0x08015645

08014a5c <__mcmp>:
 8014a5c:	690a      	ldr	r2, [r1, #16]
 8014a5e:	4603      	mov	r3, r0
 8014a60:	6900      	ldr	r0, [r0, #16]
 8014a62:	1a80      	subs	r0, r0, r2
 8014a64:	b530      	push	{r4, r5, lr}
 8014a66:	d10e      	bne.n	8014a86 <__mcmp+0x2a>
 8014a68:	3314      	adds	r3, #20
 8014a6a:	3114      	adds	r1, #20
 8014a6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014a70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014a74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014a78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014a7c:	4295      	cmp	r5, r2
 8014a7e:	d003      	beq.n	8014a88 <__mcmp+0x2c>
 8014a80:	d205      	bcs.n	8014a8e <__mcmp+0x32>
 8014a82:	f04f 30ff 	mov.w	r0, #4294967295
 8014a86:	bd30      	pop	{r4, r5, pc}
 8014a88:	42a3      	cmp	r3, r4
 8014a8a:	d3f3      	bcc.n	8014a74 <__mcmp+0x18>
 8014a8c:	e7fb      	b.n	8014a86 <__mcmp+0x2a>
 8014a8e:	2001      	movs	r0, #1
 8014a90:	e7f9      	b.n	8014a86 <__mcmp+0x2a>
	...

08014a94 <__mdiff>:
 8014a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a98:	4689      	mov	r9, r1
 8014a9a:	4606      	mov	r6, r0
 8014a9c:	4611      	mov	r1, r2
 8014a9e:	4648      	mov	r0, r9
 8014aa0:	4614      	mov	r4, r2
 8014aa2:	f7ff ffdb 	bl	8014a5c <__mcmp>
 8014aa6:	1e05      	subs	r5, r0, #0
 8014aa8:	d112      	bne.n	8014ad0 <__mdiff+0x3c>
 8014aaa:	4629      	mov	r1, r5
 8014aac:	4630      	mov	r0, r6
 8014aae:	f7ff fd5b 	bl	8014568 <_Balloc>
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	b928      	cbnz	r0, 8014ac2 <__mdiff+0x2e>
 8014ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8014bb4 <__mdiff+0x120>)
 8014ab8:	f240 2137 	movw	r1, #567	@ 0x237
 8014abc:	483e      	ldr	r0, [pc, #248]	@ (8014bb8 <__mdiff+0x124>)
 8014abe:	f000 f991 	bl	8014de4 <__assert_func>
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014ac8:	4610      	mov	r0, r2
 8014aca:	b003      	add	sp, #12
 8014acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad0:	bfbc      	itt	lt
 8014ad2:	464b      	movlt	r3, r9
 8014ad4:	46a1      	movlt	r9, r4
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014adc:	bfba      	itte	lt
 8014ade:	461c      	movlt	r4, r3
 8014ae0:	2501      	movlt	r5, #1
 8014ae2:	2500      	movge	r5, #0
 8014ae4:	f7ff fd40 	bl	8014568 <_Balloc>
 8014ae8:	4602      	mov	r2, r0
 8014aea:	b918      	cbnz	r0, 8014af4 <__mdiff+0x60>
 8014aec:	4b31      	ldr	r3, [pc, #196]	@ (8014bb4 <__mdiff+0x120>)
 8014aee:	f240 2145 	movw	r1, #581	@ 0x245
 8014af2:	e7e3      	b.n	8014abc <__mdiff+0x28>
 8014af4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014af8:	6926      	ldr	r6, [r4, #16]
 8014afa:	60c5      	str	r5, [r0, #12]
 8014afc:	f109 0310 	add.w	r3, r9, #16
 8014b00:	f109 0514 	add.w	r5, r9, #20
 8014b04:	f104 0e14 	add.w	lr, r4, #20
 8014b08:	f100 0b14 	add.w	fp, r0, #20
 8014b0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014b10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014b14:	9301      	str	r3, [sp, #4]
 8014b16:	46d9      	mov	r9, fp
 8014b18:	f04f 0c00 	mov.w	ip, #0
 8014b1c:	9b01      	ldr	r3, [sp, #4]
 8014b1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014b22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014b26:	9301      	str	r3, [sp, #4]
 8014b28:	fa1f f38a 	uxth.w	r3, sl
 8014b2c:	4619      	mov	r1, r3
 8014b2e:	b283      	uxth	r3, r0
 8014b30:	1acb      	subs	r3, r1, r3
 8014b32:	0c00      	lsrs	r0, r0, #16
 8014b34:	4463      	add	r3, ip
 8014b36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014b3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014b44:	4576      	cmp	r6, lr
 8014b46:	f849 3b04 	str.w	r3, [r9], #4
 8014b4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b4e:	d8e5      	bhi.n	8014b1c <__mdiff+0x88>
 8014b50:	1b33      	subs	r3, r6, r4
 8014b52:	3b15      	subs	r3, #21
 8014b54:	f023 0303 	bic.w	r3, r3, #3
 8014b58:	3415      	adds	r4, #21
 8014b5a:	3304      	adds	r3, #4
 8014b5c:	42a6      	cmp	r6, r4
 8014b5e:	bf38      	it	cc
 8014b60:	2304      	movcc	r3, #4
 8014b62:	441d      	add	r5, r3
 8014b64:	445b      	add	r3, fp
 8014b66:	461e      	mov	r6, r3
 8014b68:	462c      	mov	r4, r5
 8014b6a:	4544      	cmp	r4, r8
 8014b6c:	d30e      	bcc.n	8014b8c <__mdiff+0xf8>
 8014b6e:	f108 0103 	add.w	r1, r8, #3
 8014b72:	1b49      	subs	r1, r1, r5
 8014b74:	f021 0103 	bic.w	r1, r1, #3
 8014b78:	3d03      	subs	r5, #3
 8014b7a:	45a8      	cmp	r8, r5
 8014b7c:	bf38      	it	cc
 8014b7e:	2100      	movcc	r1, #0
 8014b80:	440b      	add	r3, r1
 8014b82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014b86:	b191      	cbz	r1, 8014bae <__mdiff+0x11a>
 8014b88:	6117      	str	r7, [r2, #16]
 8014b8a:	e79d      	b.n	8014ac8 <__mdiff+0x34>
 8014b8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014b90:	46e6      	mov	lr, ip
 8014b92:	0c08      	lsrs	r0, r1, #16
 8014b94:	fa1c fc81 	uxtah	ip, ip, r1
 8014b98:	4471      	add	r1, lr
 8014b9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014b9e:	b289      	uxth	r1, r1
 8014ba0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014ba4:	f846 1b04 	str.w	r1, [r6], #4
 8014ba8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014bac:	e7dd      	b.n	8014b6a <__mdiff+0xd6>
 8014bae:	3f01      	subs	r7, #1
 8014bb0:	e7e7      	b.n	8014b82 <__mdiff+0xee>
 8014bb2:	bf00      	nop
 8014bb4:	08015634 	.word	0x08015634
 8014bb8:	08015645 	.word	0x08015645

08014bbc <__d2b>:
 8014bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014bc0:	460f      	mov	r7, r1
 8014bc2:	2101      	movs	r1, #1
 8014bc4:	ec59 8b10 	vmov	r8, r9, d0
 8014bc8:	4616      	mov	r6, r2
 8014bca:	f7ff fccd 	bl	8014568 <_Balloc>
 8014bce:	4604      	mov	r4, r0
 8014bd0:	b930      	cbnz	r0, 8014be0 <__d2b+0x24>
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	4b23      	ldr	r3, [pc, #140]	@ (8014c64 <__d2b+0xa8>)
 8014bd6:	4824      	ldr	r0, [pc, #144]	@ (8014c68 <__d2b+0xac>)
 8014bd8:	f240 310f 	movw	r1, #783	@ 0x30f
 8014bdc:	f000 f902 	bl	8014de4 <__assert_func>
 8014be0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014be4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014be8:	b10d      	cbz	r5, 8014bee <__d2b+0x32>
 8014bea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014bee:	9301      	str	r3, [sp, #4]
 8014bf0:	f1b8 0300 	subs.w	r3, r8, #0
 8014bf4:	d023      	beq.n	8014c3e <__d2b+0x82>
 8014bf6:	4668      	mov	r0, sp
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	f7ff fd7c 	bl	80146f6 <__lo0bits>
 8014bfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014c02:	b1d0      	cbz	r0, 8014c3a <__d2b+0x7e>
 8014c04:	f1c0 0320 	rsb	r3, r0, #32
 8014c08:	fa02 f303 	lsl.w	r3, r2, r3
 8014c0c:	430b      	orrs	r3, r1
 8014c0e:	40c2      	lsrs	r2, r0
 8014c10:	6163      	str	r3, [r4, #20]
 8014c12:	9201      	str	r2, [sp, #4]
 8014c14:	9b01      	ldr	r3, [sp, #4]
 8014c16:	61a3      	str	r3, [r4, #24]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	bf0c      	ite	eq
 8014c1c:	2201      	moveq	r2, #1
 8014c1e:	2202      	movne	r2, #2
 8014c20:	6122      	str	r2, [r4, #16]
 8014c22:	b1a5      	cbz	r5, 8014c4e <__d2b+0x92>
 8014c24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014c28:	4405      	add	r5, r0
 8014c2a:	603d      	str	r5, [r7, #0]
 8014c2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014c30:	6030      	str	r0, [r6, #0]
 8014c32:	4620      	mov	r0, r4
 8014c34:	b003      	add	sp, #12
 8014c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c3a:	6161      	str	r1, [r4, #20]
 8014c3c:	e7ea      	b.n	8014c14 <__d2b+0x58>
 8014c3e:	a801      	add	r0, sp, #4
 8014c40:	f7ff fd59 	bl	80146f6 <__lo0bits>
 8014c44:	9b01      	ldr	r3, [sp, #4]
 8014c46:	6163      	str	r3, [r4, #20]
 8014c48:	3020      	adds	r0, #32
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	e7e8      	b.n	8014c20 <__d2b+0x64>
 8014c4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014c56:	6038      	str	r0, [r7, #0]
 8014c58:	6918      	ldr	r0, [r3, #16]
 8014c5a:	f7ff fd2d 	bl	80146b8 <__hi0bits>
 8014c5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014c62:	e7e5      	b.n	8014c30 <__d2b+0x74>
 8014c64:	08015634 	.word	0x08015634
 8014c68:	08015645 	.word	0x08015645

08014c6c <__sflush_r>:
 8014c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c74:	0716      	lsls	r6, r2, #28
 8014c76:	4605      	mov	r5, r0
 8014c78:	460c      	mov	r4, r1
 8014c7a:	d454      	bmi.n	8014d26 <__sflush_r+0xba>
 8014c7c:	684b      	ldr	r3, [r1, #4]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	dc02      	bgt.n	8014c88 <__sflush_r+0x1c>
 8014c82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	dd48      	ble.n	8014d1a <__sflush_r+0xae>
 8014c88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c8a:	2e00      	cmp	r6, #0
 8014c8c:	d045      	beq.n	8014d1a <__sflush_r+0xae>
 8014c8e:	2300      	movs	r3, #0
 8014c90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014c94:	682f      	ldr	r7, [r5, #0]
 8014c96:	6a21      	ldr	r1, [r4, #32]
 8014c98:	602b      	str	r3, [r5, #0]
 8014c9a:	d030      	beq.n	8014cfe <__sflush_r+0x92>
 8014c9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014c9e:	89a3      	ldrh	r3, [r4, #12]
 8014ca0:	0759      	lsls	r1, r3, #29
 8014ca2:	d505      	bpl.n	8014cb0 <__sflush_r+0x44>
 8014ca4:	6863      	ldr	r3, [r4, #4]
 8014ca6:	1ad2      	subs	r2, r2, r3
 8014ca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014caa:	b10b      	cbz	r3, 8014cb0 <__sflush_r+0x44>
 8014cac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014cae:	1ad2      	subs	r2, r2, r3
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014cb4:	6a21      	ldr	r1, [r4, #32]
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	47b0      	blx	r6
 8014cba:	1c43      	adds	r3, r0, #1
 8014cbc:	89a3      	ldrh	r3, [r4, #12]
 8014cbe:	d106      	bne.n	8014cce <__sflush_r+0x62>
 8014cc0:	6829      	ldr	r1, [r5, #0]
 8014cc2:	291d      	cmp	r1, #29
 8014cc4:	d82b      	bhi.n	8014d1e <__sflush_r+0xb2>
 8014cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8014d70 <__sflush_r+0x104>)
 8014cc8:	410a      	asrs	r2, r1
 8014cca:	07d6      	lsls	r6, r2, #31
 8014ccc:	d427      	bmi.n	8014d1e <__sflush_r+0xb2>
 8014cce:	2200      	movs	r2, #0
 8014cd0:	6062      	str	r2, [r4, #4]
 8014cd2:	04d9      	lsls	r1, r3, #19
 8014cd4:	6922      	ldr	r2, [r4, #16]
 8014cd6:	6022      	str	r2, [r4, #0]
 8014cd8:	d504      	bpl.n	8014ce4 <__sflush_r+0x78>
 8014cda:	1c42      	adds	r2, r0, #1
 8014cdc:	d101      	bne.n	8014ce2 <__sflush_r+0x76>
 8014cde:	682b      	ldr	r3, [r5, #0]
 8014ce0:	b903      	cbnz	r3, 8014ce4 <__sflush_r+0x78>
 8014ce2:	6560      	str	r0, [r4, #84]	@ 0x54
 8014ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ce6:	602f      	str	r7, [r5, #0]
 8014ce8:	b1b9      	cbz	r1, 8014d1a <__sflush_r+0xae>
 8014cea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014cee:	4299      	cmp	r1, r3
 8014cf0:	d002      	beq.n	8014cf8 <__sflush_r+0x8c>
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	f7ff fb38 	bl	8014368 <_free_r>
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8014cfc:	e00d      	b.n	8014d1a <__sflush_r+0xae>
 8014cfe:	2301      	movs	r3, #1
 8014d00:	4628      	mov	r0, r5
 8014d02:	47b0      	blx	r6
 8014d04:	4602      	mov	r2, r0
 8014d06:	1c50      	adds	r0, r2, #1
 8014d08:	d1c9      	bne.n	8014c9e <__sflush_r+0x32>
 8014d0a:	682b      	ldr	r3, [r5, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d0c6      	beq.n	8014c9e <__sflush_r+0x32>
 8014d10:	2b1d      	cmp	r3, #29
 8014d12:	d001      	beq.n	8014d18 <__sflush_r+0xac>
 8014d14:	2b16      	cmp	r3, #22
 8014d16:	d11e      	bne.n	8014d56 <__sflush_r+0xea>
 8014d18:	602f      	str	r7, [r5, #0]
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	e022      	b.n	8014d64 <__sflush_r+0xf8>
 8014d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d22:	b21b      	sxth	r3, r3
 8014d24:	e01b      	b.n	8014d5e <__sflush_r+0xf2>
 8014d26:	690f      	ldr	r7, [r1, #16]
 8014d28:	2f00      	cmp	r7, #0
 8014d2a:	d0f6      	beq.n	8014d1a <__sflush_r+0xae>
 8014d2c:	0793      	lsls	r3, r2, #30
 8014d2e:	680e      	ldr	r6, [r1, #0]
 8014d30:	bf08      	it	eq
 8014d32:	694b      	ldreq	r3, [r1, #20]
 8014d34:	600f      	str	r7, [r1, #0]
 8014d36:	bf18      	it	ne
 8014d38:	2300      	movne	r3, #0
 8014d3a:	eba6 0807 	sub.w	r8, r6, r7
 8014d3e:	608b      	str	r3, [r1, #8]
 8014d40:	f1b8 0f00 	cmp.w	r8, #0
 8014d44:	dde9      	ble.n	8014d1a <__sflush_r+0xae>
 8014d46:	6a21      	ldr	r1, [r4, #32]
 8014d48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014d4a:	4643      	mov	r3, r8
 8014d4c:	463a      	mov	r2, r7
 8014d4e:	4628      	mov	r0, r5
 8014d50:	47b0      	blx	r6
 8014d52:	2800      	cmp	r0, #0
 8014d54:	dc08      	bgt.n	8014d68 <__sflush_r+0xfc>
 8014d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d5e:	81a3      	strh	r3, [r4, #12]
 8014d60:	f04f 30ff 	mov.w	r0, #4294967295
 8014d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d68:	4407      	add	r7, r0
 8014d6a:	eba8 0800 	sub.w	r8, r8, r0
 8014d6e:	e7e7      	b.n	8014d40 <__sflush_r+0xd4>
 8014d70:	dfbffffe 	.word	0xdfbffffe

08014d74 <_fflush_r>:
 8014d74:	b538      	push	{r3, r4, r5, lr}
 8014d76:	690b      	ldr	r3, [r1, #16]
 8014d78:	4605      	mov	r5, r0
 8014d7a:	460c      	mov	r4, r1
 8014d7c:	b913      	cbnz	r3, 8014d84 <_fflush_r+0x10>
 8014d7e:	2500      	movs	r5, #0
 8014d80:	4628      	mov	r0, r5
 8014d82:	bd38      	pop	{r3, r4, r5, pc}
 8014d84:	b118      	cbz	r0, 8014d8e <_fflush_r+0x1a>
 8014d86:	6a03      	ldr	r3, [r0, #32]
 8014d88:	b90b      	cbnz	r3, 8014d8e <_fflush_r+0x1a>
 8014d8a:	f7fe fb99 	bl	80134c0 <__sinit>
 8014d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d0f3      	beq.n	8014d7e <_fflush_r+0xa>
 8014d96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014d98:	07d0      	lsls	r0, r2, #31
 8014d9a:	d404      	bmi.n	8014da6 <_fflush_r+0x32>
 8014d9c:	0599      	lsls	r1, r3, #22
 8014d9e:	d402      	bmi.n	8014da6 <_fflush_r+0x32>
 8014da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014da2:	f7fe fc84 	bl	80136ae <__retarget_lock_acquire_recursive>
 8014da6:	4628      	mov	r0, r5
 8014da8:	4621      	mov	r1, r4
 8014daa:	f7ff ff5f 	bl	8014c6c <__sflush_r>
 8014dae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014db0:	07da      	lsls	r2, r3, #31
 8014db2:	4605      	mov	r5, r0
 8014db4:	d4e4      	bmi.n	8014d80 <_fflush_r+0xc>
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	059b      	lsls	r3, r3, #22
 8014dba:	d4e1      	bmi.n	8014d80 <_fflush_r+0xc>
 8014dbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014dbe:	f7fe fc77 	bl	80136b0 <__retarget_lock_release_recursive>
 8014dc2:	e7dd      	b.n	8014d80 <_fflush_r+0xc>

08014dc4 <_sbrk_r>:
 8014dc4:	b538      	push	{r3, r4, r5, lr}
 8014dc6:	4d06      	ldr	r5, [pc, #24]	@ (8014de0 <_sbrk_r+0x1c>)
 8014dc8:	2300      	movs	r3, #0
 8014dca:	4604      	mov	r4, r0
 8014dcc:	4608      	mov	r0, r1
 8014dce:	602b      	str	r3, [r5, #0]
 8014dd0:	f7ec f8a4 	bl	8000f1c <_sbrk>
 8014dd4:	1c43      	adds	r3, r0, #1
 8014dd6:	d102      	bne.n	8014dde <_sbrk_r+0x1a>
 8014dd8:	682b      	ldr	r3, [r5, #0]
 8014dda:	b103      	cbz	r3, 8014dde <_sbrk_r+0x1a>
 8014ddc:	6023      	str	r3, [r4, #0]
 8014dde:	bd38      	pop	{r3, r4, r5, pc}
 8014de0:	20006944 	.word	0x20006944

08014de4 <__assert_func>:
 8014de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014de6:	4614      	mov	r4, r2
 8014de8:	461a      	mov	r2, r3
 8014dea:	4b09      	ldr	r3, [pc, #36]	@ (8014e10 <__assert_func+0x2c>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	4605      	mov	r5, r0
 8014df0:	68d8      	ldr	r0, [r3, #12]
 8014df2:	b954      	cbnz	r4, 8014e0a <__assert_func+0x26>
 8014df4:	4b07      	ldr	r3, [pc, #28]	@ (8014e14 <__assert_func+0x30>)
 8014df6:	461c      	mov	r4, r3
 8014df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014dfc:	9100      	str	r1, [sp, #0]
 8014dfe:	462b      	mov	r3, r5
 8014e00:	4905      	ldr	r1, [pc, #20]	@ (8014e18 <__assert_func+0x34>)
 8014e02:	f000 f841 	bl	8014e88 <fiprintf>
 8014e06:	f000 f851 	bl	8014eac <abort>
 8014e0a:	4b04      	ldr	r3, [pc, #16]	@ (8014e1c <__assert_func+0x38>)
 8014e0c:	e7f4      	b.n	8014df8 <__assert_func+0x14>
 8014e0e:	bf00      	nop
 8014e10:	20000310 	.word	0x20000310
 8014e14:	080157e5 	.word	0x080157e5
 8014e18:	080157b7 	.word	0x080157b7
 8014e1c:	080157aa 	.word	0x080157aa

08014e20 <_calloc_r>:
 8014e20:	b570      	push	{r4, r5, r6, lr}
 8014e22:	fba1 5402 	umull	r5, r4, r1, r2
 8014e26:	b93c      	cbnz	r4, 8014e38 <_calloc_r+0x18>
 8014e28:	4629      	mov	r1, r5
 8014e2a:	f7ff fb11 	bl	8014450 <_malloc_r>
 8014e2e:	4606      	mov	r6, r0
 8014e30:	b928      	cbnz	r0, 8014e3e <_calloc_r+0x1e>
 8014e32:	2600      	movs	r6, #0
 8014e34:	4630      	mov	r0, r6
 8014e36:	bd70      	pop	{r4, r5, r6, pc}
 8014e38:	220c      	movs	r2, #12
 8014e3a:	6002      	str	r2, [r0, #0]
 8014e3c:	e7f9      	b.n	8014e32 <_calloc_r+0x12>
 8014e3e:	462a      	mov	r2, r5
 8014e40:	4621      	mov	r1, r4
 8014e42:	f7fe fbb6 	bl	80135b2 <memset>
 8014e46:	e7f5      	b.n	8014e34 <_calloc_r+0x14>

08014e48 <__ascii_mbtowc>:
 8014e48:	b082      	sub	sp, #8
 8014e4a:	b901      	cbnz	r1, 8014e4e <__ascii_mbtowc+0x6>
 8014e4c:	a901      	add	r1, sp, #4
 8014e4e:	b142      	cbz	r2, 8014e62 <__ascii_mbtowc+0x1a>
 8014e50:	b14b      	cbz	r3, 8014e66 <__ascii_mbtowc+0x1e>
 8014e52:	7813      	ldrb	r3, [r2, #0]
 8014e54:	600b      	str	r3, [r1, #0]
 8014e56:	7812      	ldrb	r2, [r2, #0]
 8014e58:	1e10      	subs	r0, r2, #0
 8014e5a:	bf18      	it	ne
 8014e5c:	2001      	movne	r0, #1
 8014e5e:	b002      	add	sp, #8
 8014e60:	4770      	bx	lr
 8014e62:	4610      	mov	r0, r2
 8014e64:	e7fb      	b.n	8014e5e <__ascii_mbtowc+0x16>
 8014e66:	f06f 0001 	mvn.w	r0, #1
 8014e6a:	e7f8      	b.n	8014e5e <__ascii_mbtowc+0x16>

08014e6c <__ascii_wctomb>:
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	4608      	mov	r0, r1
 8014e70:	b141      	cbz	r1, 8014e84 <__ascii_wctomb+0x18>
 8014e72:	2aff      	cmp	r2, #255	@ 0xff
 8014e74:	d904      	bls.n	8014e80 <__ascii_wctomb+0x14>
 8014e76:	228a      	movs	r2, #138	@ 0x8a
 8014e78:	601a      	str	r2, [r3, #0]
 8014e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014e7e:	4770      	bx	lr
 8014e80:	700a      	strb	r2, [r1, #0]
 8014e82:	2001      	movs	r0, #1
 8014e84:	4770      	bx	lr
	...

08014e88 <fiprintf>:
 8014e88:	b40e      	push	{r1, r2, r3}
 8014e8a:	b503      	push	{r0, r1, lr}
 8014e8c:	4601      	mov	r1, r0
 8014e8e:	ab03      	add	r3, sp, #12
 8014e90:	4805      	ldr	r0, [pc, #20]	@ (8014ea8 <fiprintf+0x20>)
 8014e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e96:	6800      	ldr	r0, [r0, #0]
 8014e98:	9301      	str	r3, [sp, #4]
 8014e9a:	f000 f837 	bl	8014f0c <_vfiprintf_r>
 8014e9e:	b002      	add	sp, #8
 8014ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ea4:	b003      	add	sp, #12
 8014ea6:	4770      	bx	lr
 8014ea8:	20000310 	.word	0x20000310

08014eac <abort>:
 8014eac:	b508      	push	{r3, lr}
 8014eae:	2006      	movs	r0, #6
 8014eb0:	f000 fa00 	bl	80152b4 <raise>
 8014eb4:	2001      	movs	r0, #1
 8014eb6:	f7ec f85b 	bl	8000f70 <_exit>

08014eba <__sfputc_r>:
 8014eba:	6893      	ldr	r3, [r2, #8]
 8014ebc:	3b01      	subs	r3, #1
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	b410      	push	{r4}
 8014ec2:	6093      	str	r3, [r2, #8]
 8014ec4:	da08      	bge.n	8014ed8 <__sfputc_r+0x1e>
 8014ec6:	6994      	ldr	r4, [r2, #24]
 8014ec8:	42a3      	cmp	r3, r4
 8014eca:	db01      	blt.n	8014ed0 <__sfputc_r+0x16>
 8014ecc:	290a      	cmp	r1, #10
 8014ece:	d103      	bne.n	8014ed8 <__sfputc_r+0x1e>
 8014ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ed4:	f000 b932 	b.w	801513c <__swbuf_r>
 8014ed8:	6813      	ldr	r3, [r2, #0]
 8014eda:	1c58      	adds	r0, r3, #1
 8014edc:	6010      	str	r0, [r2, #0]
 8014ede:	7019      	strb	r1, [r3, #0]
 8014ee0:	4608      	mov	r0, r1
 8014ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ee6:	4770      	bx	lr

08014ee8 <__sfputs_r>:
 8014ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eea:	4606      	mov	r6, r0
 8014eec:	460f      	mov	r7, r1
 8014eee:	4614      	mov	r4, r2
 8014ef0:	18d5      	adds	r5, r2, r3
 8014ef2:	42ac      	cmp	r4, r5
 8014ef4:	d101      	bne.n	8014efa <__sfputs_r+0x12>
 8014ef6:	2000      	movs	r0, #0
 8014ef8:	e007      	b.n	8014f0a <__sfputs_r+0x22>
 8014efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014efe:	463a      	mov	r2, r7
 8014f00:	4630      	mov	r0, r6
 8014f02:	f7ff ffda 	bl	8014eba <__sfputc_r>
 8014f06:	1c43      	adds	r3, r0, #1
 8014f08:	d1f3      	bne.n	8014ef2 <__sfputs_r+0xa>
 8014f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f0c <_vfiprintf_r>:
 8014f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f10:	460d      	mov	r5, r1
 8014f12:	b09d      	sub	sp, #116	@ 0x74
 8014f14:	4614      	mov	r4, r2
 8014f16:	4698      	mov	r8, r3
 8014f18:	4606      	mov	r6, r0
 8014f1a:	b118      	cbz	r0, 8014f24 <_vfiprintf_r+0x18>
 8014f1c:	6a03      	ldr	r3, [r0, #32]
 8014f1e:	b90b      	cbnz	r3, 8014f24 <_vfiprintf_r+0x18>
 8014f20:	f7fe face 	bl	80134c0 <__sinit>
 8014f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f26:	07d9      	lsls	r1, r3, #31
 8014f28:	d405      	bmi.n	8014f36 <_vfiprintf_r+0x2a>
 8014f2a:	89ab      	ldrh	r3, [r5, #12]
 8014f2c:	059a      	lsls	r2, r3, #22
 8014f2e:	d402      	bmi.n	8014f36 <_vfiprintf_r+0x2a>
 8014f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f32:	f7fe fbbc 	bl	80136ae <__retarget_lock_acquire_recursive>
 8014f36:	89ab      	ldrh	r3, [r5, #12]
 8014f38:	071b      	lsls	r3, r3, #28
 8014f3a:	d501      	bpl.n	8014f40 <_vfiprintf_r+0x34>
 8014f3c:	692b      	ldr	r3, [r5, #16]
 8014f3e:	b99b      	cbnz	r3, 8014f68 <_vfiprintf_r+0x5c>
 8014f40:	4629      	mov	r1, r5
 8014f42:	4630      	mov	r0, r6
 8014f44:	f000 f938 	bl	80151b8 <__swsetup_r>
 8014f48:	b170      	cbz	r0, 8014f68 <_vfiprintf_r+0x5c>
 8014f4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f4c:	07dc      	lsls	r4, r3, #31
 8014f4e:	d504      	bpl.n	8014f5a <_vfiprintf_r+0x4e>
 8014f50:	f04f 30ff 	mov.w	r0, #4294967295
 8014f54:	b01d      	add	sp, #116	@ 0x74
 8014f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5a:	89ab      	ldrh	r3, [r5, #12]
 8014f5c:	0598      	lsls	r0, r3, #22
 8014f5e:	d4f7      	bmi.n	8014f50 <_vfiprintf_r+0x44>
 8014f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f62:	f7fe fba5 	bl	80136b0 <__retarget_lock_release_recursive>
 8014f66:	e7f3      	b.n	8014f50 <_vfiprintf_r+0x44>
 8014f68:	2300      	movs	r3, #0
 8014f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f6c:	2320      	movs	r3, #32
 8014f6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f76:	2330      	movs	r3, #48	@ 0x30
 8014f78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015128 <_vfiprintf_r+0x21c>
 8014f7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014f80:	f04f 0901 	mov.w	r9, #1
 8014f84:	4623      	mov	r3, r4
 8014f86:	469a      	mov	sl, r3
 8014f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f8c:	b10a      	cbz	r2, 8014f92 <_vfiprintf_r+0x86>
 8014f8e:	2a25      	cmp	r2, #37	@ 0x25
 8014f90:	d1f9      	bne.n	8014f86 <_vfiprintf_r+0x7a>
 8014f92:	ebba 0b04 	subs.w	fp, sl, r4
 8014f96:	d00b      	beq.n	8014fb0 <_vfiprintf_r+0xa4>
 8014f98:	465b      	mov	r3, fp
 8014f9a:	4622      	mov	r2, r4
 8014f9c:	4629      	mov	r1, r5
 8014f9e:	4630      	mov	r0, r6
 8014fa0:	f7ff ffa2 	bl	8014ee8 <__sfputs_r>
 8014fa4:	3001      	adds	r0, #1
 8014fa6:	f000 80a7 	beq.w	80150f8 <_vfiprintf_r+0x1ec>
 8014faa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014fac:	445a      	add	r2, fp
 8014fae:	9209      	str	r2, [sp, #36]	@ 0x24
 8014fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	f000 809f 	beq.w	80150f8 <_vfiprintf_r+0x1ec>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8014fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fc4:	f10a 0a01 	add.w	sl, sl, #1
 8014fc8:	9304      	str	r3, [sp, #16]
 8014fca:	9307      	str	r3, [sp, #28]
 8014fcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014fd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8014fd2:	4654      	mov	r4, sl
 8014fd4:	2205      	movs	r2, #5
 8014fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fda:	4853      	ldr	r0, [pc, #332]	@ (8015128 <_vfiprintf_r+0x21c>)
 8014fdc:	f7eb f910 	bl	8000200 <memchr>
 8014fe0:	9a04      	ldr	r2, [sp, #16]
 8014fe2:	b9d8      	cbnz	r0, 801501c <_vfiprintf_r+0x110>
 8014fe4:	06d1      	lsls	r1, r2, #27
 8014fe6:	bf44      	itt	mi
 8014fe8:	2320      	movmi	r3, #32
 8014fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014fee:	0713      	lsls	r3, r2, #28
 8014ff0:	bf44      	itt	mi
 8014ff2:	232b      	movmi	r3, #43	@ 0x2b
 8014ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8014ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ffe:	d015      	beq.n	801502c <_vfiprintf_r+0x120>
 8015000:	9a07      	ldr	r2, [sp, #28]
 8015002:	4654      	mov	r4, sl
 8015004:	2000      	movs	r0, #0
 8015006:	f04f 0c0a 	mov.w	ip, #10
 801500a:	4621      	mov	r1, r4
 801500c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015010:	3b30      	subs	r3, #48	@ 0x30
 8015012:	2b09      	cmp	r3, #9
 8015014:	d94b      	bls.n	80150ae <_vfiprintf_r+0x1a2>
 8015016:	b1b0      	cbz	r0, 8015046 <_vfiprintf_r+0x13a>
 8015018:	9207      	str	r2, [sp, #28]
 801501a:	e014      	b.n	8015046 <_vfiprintf_r+0x13a>
 801501c:	eba0 0308 	sub.w	r3, r0, r8
 8015020:	fa09 f303 	lsl.w	r3, r9, r3
 8015024:	4313      	orrs	r3, r2
 8015026:	9304      	str	r3, [sp, #16]
 8015028:	46a2      	mov	sl, r4
 801502a:	e7d2      	b.n	8014fd2 <_vfiprintf_r+0xc6>
 801502c:	9b03      	ldr	r3, [sp, #12]
 801502e:	1d19      	adds	r1, r3, #4
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	9103      	str	r1, [sp, #12]
 8015034:	2b00      	cmp	r3, #0
 8015036:	bfbb      	ittet	lt
 8015038:	425b      	neglt	r3, r3
 801503a:	f042 0202 	orrlt.w	r2, r2, #2
 801503e:	9307      	strge	r3, [sp, #28]
 8015040:	9307      	strlt	r3, [sp, #28]
 8015042:	bfb8      	it	lt
 8015044:	9204      	strlt	r2, [sp, #16]
 8015046:	7823      	ldrb	r3, [r4, #0]
 8015048:	2b2e      	cmp	r3, #46	@ 0x2e
 801504a:	d10a      	bne.n	8015062 <_vfiprintf_r+0x156>
 801504c:	7863      	ldrb	r3, [r4, #1]
 801504e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015050:	d132      	bne.n	80150b8 <_vfiprintf_r+0x1ac>
 8015052:	9b03      	ldr	r3, [sp, #12]
 8015054:	1d1a      	adds	r2, r3, #4
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	9203      	str	r2, [sp, #12]
 801505a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801505e:	3402      	adds	r4, #2
 8015060:	9305      	str	r3, [sp, #20]
 8015062:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015138 <_vfiprintf_r+0x22c>
 8015066:	7821      	ldrb	r1, [r4, #0]
 8015068:	2203      	movs	r2, #3
 801506a:	4650      	mov	r0, sl
 801506c:	f7eb f8c8 	bl	8000200 <memchr>
 8015070:	b138      	cbz	r0, 8015082 <_vfiprintf_r+0x176>
 8015072:	9b04      	ldr	r3, [sp, #16]
 8015074:	eba0 000a 	sub.w	r0, r0, sl
 8015078:	2240      	movs	r2, #64	@ 0x40
 801507a:	4082      	lsls	r2, r0
 801507c:	4313      	orrs	r3, r2
 801507e:	3401      	adds	r4, #1
 8015080:	9304      	str	r3, [sp, #16]
 8015082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015086:	4829      	ldr	r0, [pc, #164]	@ (801512c <_vfiprintf_r+0x220>)
 8015088:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801508c:	2206      	movs	r2, #6
 801508e:	f7eb f8b7 	bl	8000200 <memchr>
 8015092:	2800      	cmp	r0, #0
 8015094:	d03f      	beq.n	8015116 <_vfiprintf_r+0x20a>
 8015096:	4b26      	ldr	r3, [pc, #152]	@ (8015130 <_vfiprintf_r+0x224>)
 8015098:	bb1b      	cbnz	r3, 80150e2 <_vfiprintf_r+0x1d6>
 801509a:	9b03      	ldr	r3, [sp, #12]
 801509c:	3307      	adds	r3, #7
 801509e:	f023 0307 	bic.w	r3, r3, #7
 80150a2:	3308      	adds	r3, #8
 80150a4:	9303      	str	r3, [sp, #12]
 80150a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150a8:	443b      	add	r3, r7
 80150aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80150ac:	e76a      	b.n	8014f84 <_vfiprintf_r+0x78>
 80150ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80150b2:	460c      	mov	r4, r1
 80150b4:	2001      	movs	r0, #1
 80150b6:	e7a8      	b.n	801500a <_vfiprintf_r+0xfe>
 80150b8:	2300      	movs	r3, #0
 80150ba:	3401      	adds	r4, #1
 80150bc:	9305      	str	r3, [sp, #20]
 80150be:	4619      	mov	r1, r3
 80150c0:	f04f 0c0a 	mov.w	ip, #10
 80150c4:	4620      	mov	r0, r4
 80150c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150ca:	3a30      	subs	r2, #48	@ 0x30
 80150cc:	2a09      	cmp	r2, #9
 80150ce:	d903      	bls.n	80150d8 <_vfiprintf_r+0x1cc>
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d0c6      	beq.n	8015062 <_vfiprintf_r+0x156>
 80150d4:	9105      	str	r1, [sp, #20]
 80150d6:	e7c4      	b.n	8015062 <_vfiprintf_r+0x156>
 80150d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80150dc:	4604      	mov	r4, r0
 80150de:	2301      	movs	r3, #1
 80150e0:	e7f0      	b.n	80150c4 <_vfiprintf_r+0x1b8>
 80150e2:	ab03      	add	r3, sp, #12
 80150e4:	9300      	str	r3, [sp, #0]
 80150e6:	462a      	mov	r2, r5
 80150e8:	4b12      	ldr	r3, [pc, #72]	@ (8015134 <_vfiprintf_r+0x228>)
 80150ea:	a904      	add	r1, sp, #16
 80150ec:	4630      	mov	r0, r6
 80150ee:	f7fd fda3 	bl	8012c38 <_printf_float>
 80150f2:	4607      	mov	r7, r0
 80150f4:	1c78      	adds	r0, r7, #1
 80150f6:	d1d6      	bne.n	80150a6 <_vfiprintf_r+0x19a>
 80150f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80150fa:	07d9      	lsls	r1, r3, #31
 80150fc:	d405      	bmi.n	801510a <_vfiprintf_r+0x1fe>
 80150fe:	89ab      	ldrh	r3, [r5, #12]
 8015100:	059a      	lsls	r2, r3, #22
 8015102:	d402      	bmi.n	801510a <_vfiprintf_r+0x1fe>
 8015104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015106:	f7fe fad3 	bl	80136b0 <__retarget_lock_release_recursive>
 801510a:	89ab      	ldrh	r3, [r5, #12]
 801510c:	065b      	lsls	r3, r3, #25
 801510e:	f53f af1f 	bmi.w	8014f50 <_vfiprintf_r+0x44>
 8015112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015114:	e71e      	b.n	8014f54 <_vfiprintf_r+0x48>
 8015116:	ab03      	add	r3, sp, #12
 8015118:	9300      	str	r3, [sp, #0]
 801511a:	462a      	mov	r2, r5
 801511c:	4b05      	ldr	r3, [pc, #20]	@ (8015134 <_vfiprintf_r+0x228>)
 801511e:	a904      	add	r1, sp, #16
 8015120:	4630      	mov	r0, r6
 8015122:	f7fe f821 	bl	8013168 <_printf_i>
 8015126:	e7e4      	b.n	80150f2 <_vfiprintf_r+0x1e6>
 8015128:	080158e7 	.word	0x080158e7
 801512c:	080158f1 	.word	0x080158f1
 8015130:	08012c39 	.word	0x08012c39
 8015134:	08014ee9 	.word	0x08014ee9
 8015138:	080158ed 	.word	0x080158ed

0801513c <__swbuf_r>:
 801513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801513e:	460e      	mov	r6, r1
 8015140:	4614      	mov	r4, r2
 8015142:	4605      	mov	r5, r0
 8015144:	b118      	cbz	r0, 801514e <__swbuf_r+0x12>
 8015146:	6a03      	ldr	r3, [r0, #32]
 8015148:	b90b      	cbnz	r3, 801514e <__swbuf_r+0x12>
 801514a:	f7fe f9b9 	bl	80134c0 <__sinit>
 801514e:	69a3      	ldr	r3, [r4, #24]
 8015150:	60a3      	str	r3, [r4, #8]
 8015152:	89a3      	ldrh	r3, [r4, #12]
 8015154:	071a      	lsls	r2, r3, #28
 8015156:	d501      	bpl.n	801515c <__swbuf_r+0x20>
 8015158:	6923      	ldr	r3, [r4, #16]
 801515a:	b943      	cbnz	r3, 801516e <__swbuf_r+0x32>
 801515c:	4621      	mov	r1, r4
 801515e:	4628      	mov	r0, r5
 8015160:	f000 f82a 	bl	80151b8 <__swsetup_r>
 8015164:	b118      	cbz	r0, 801516e <__swbuf_r+0x32>
 8015166:	f04f 37ff 	mov.w	r7, #4294967295
 801516a:	4638      	mov	r0, r7
 801516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801516e:	6823      	ldr	r3, [r4, #0]
 8015170:	6922      	ldr	r2, [r4, #16]
 8015172:	1a98      	subs	r0, r3, r2
 8015174:	6963      	ldr	r3, [r4, #20]
 8015176:	b2f6      	uxtb	r6, r6
 8015178:	4283      	cmp	r3, r0
 801517a:	4637      	mov	r7, r6
 801517c:	dc05      	bgt.n	801518a <__swbuf_r+0x4e>
 801517e:	4621      	mov	r1, r4
 8015180:	4628      	mov	r0, r5
 8015182:	f7ff fdf7 	bl	8014d74 <_fflush_r>
 8015186:	2800      	cmp	r0, #0
 8015188:	d1ed      	bne.n	8015166 <__swbuf_r+0x2a>
 801518a:	68a3      	ldr	r3, [r4, #8]
 801518c:	3b01      	subs	r3, #1
 801518e:	60a3      	str	r3, [r4, #8]
 8015190:	6823      	ldr	r3, [r4, #0]
 8015192:	1c5a      	adds	r2, r3, #1
 8015194:	6022      	str	r2, [r4, #0]
 8015196:	701e      	strb	r6, [r3, #0]
 8015198:	6962      	ldr	r2, [r4, #20]
 801519a:	1c43      	adds	r3, r0, #1
 801519c:	429a      	cmp	r2, r3
 801519e:	d004      	beq.n	80151aa <__swbuf_r+0x6e>
 80151a0:	89a3      	ldrh	r3, [r4, #12]
 80151a2:	07db      	lsls	r3, r3, #31
 80151a4:	d5e1      	bpl.n	801516a <__swbuf_r+0x2e>
 80151a6:	2e0a      	cmp	r6, #10
 80151a8:	d1df      	bne.n	801516a <__swbuf_r+0x2e>
 80151aa:	4621      	mov	r1, r4
 80151ac:	4628      	mov	r0, r5
 80151ae:	f7ff fde1 	bl	8014d74 <_fflush_r>
 80151b2:	2800      	cmp	r0, #0
 80151b4:	d0d9      	beq.n	801516a <__swbuf_r+0x2e>
 80151b6:	e7d6      	b.n	8015166 <__swbuf_r+0x2a>

080151b8 <__swsetup_r>:
 80151b8:	b538      	push	{r3, r4, r5, lr}
 80151ba:	4b29      	ldr	r3, [pc, #164]	@ (8015260 <__swsetup_r+0xa8>)
 80151bc:	4605      	mov	r5, r0
 80151be:	6818      	ldr	r0, [r3, #0]
 80151c0:	460c      	mov	r4, r1
 80151c2:	b118      	cbz	r0, 80151cc <__swsetup_r+0x14>
 80151c4:	6a03      	ldr	r3, [r0, #32]
 80151c6:	b90b      	cbnz	r3, 80151cc <__swsetup_r+0x14>
 80151c8:	f7fe f97a 	bl	80134c0 <__sinit>
 80151cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151d0:	0719      	lsls	r1, r3, #28
 80151d2:	d422      	bmi.n	801521a <__swsetup_r+0x62>
 80151d4:	06da      	lsls	r2, r3, #27
 80151d6:	d407      	bmi.n	80151e8 <__swsetup_r+0x30>
 80151d8:	2209      	movs	r2, #9
 80151da:	602a      	str	r2, [r5, #0]
 80151dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80151e0:	81a3      	strh	r3, [r4, #12]
 80151e2:	f04f 30ff 	mov.w	r0, #4294967295
 80151e6:	e033      	b.n	8015250 <__swsetup_r+0x98>
 80151e8:	0758      	lsls	r0, r3, #29
 80151ea:	d512      	bpl.n	8015212 <__swsetup_r+0x5a>
 80151ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80151ee:	b141      	cbz	r1, 8015202 <__swsetup_r+0x4a>
 80151f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80151f4:	4299      	cmp	r1, r3
 80151f6:	d002      	beq.n	80151fe <__swsetup_r+0x46>
 80151f8:	4628      	mov	r0, r5
 80151fa:	f7ff f8b5 	bl	8014368 <_free_r>
 80151fe:	2300      	movs	r3, #0
 8015200:	6363      	str	r3, [r4, #52]	@ 0x34
 8015202:	89a3      	ldrh	r3, [r4, #12]
 8015204:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015208:	81a3      	strh	r3, [r4, #12]
 801520a:	2300      	movs	r3, #0
 801520c:	6063      	str	r3, [r4, #4]
 801520e:	6923      	ldr	r3, [r4, #16]
 8015210:	6023      	str	r3, [r4, #0]
 8015212:	89a3      	ldrh	r3, [r4, #12]
 8015214:	f043 0308 	orr.w	r3, r3, #8
 8015218:	81a3      	strh	r3, [r4, #12]
 801521a:	6923      	ldr	r3, [r4, #16]
 801521c:	b94b      	cbnz	r3, 8015232 <__swsetup_r+0x7a>
 801521e:	89a3      	ldrh	r3, [r4, #12]
 8015220:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015228:	d003      	beq.n	8015232 <__swsetup_r+0x7a>
 801522a:	4621      	mov	r1, r4
 801522c:	4628      	mov	r0, r5
 801522e:	f000 f883 	bl	8015338 <__smakebuf_r>
 8015232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015236:	f013 0201 	ands.w	r2, r3, #1
 801523a:	d00a      	beq.n	8015252 <__swsetup_r+0x9a>
 801523c:	2200      	movs	r2, #0
 801523e:	60a2      	str	r2, [r4, #8]
 8015240:	6962      	ldr	r2, [r4, #20]
 8015242:	4252      	negs	r2, r2
 8015244:	61a2      	str	r2, [r4, #24]
 8015246:	6922      	ldr	r2, [r4, #16]
 8015248:	b942      	cbnz	r2, 801525c <__swsetup_r+0xa4>
 801524a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801524e:	d1c5      	bne.n	80151dc <__swsetup_r+0x24>
 8015250:	bd38      	pop	{r3, r4, r5, pc}
 8015252:	0799      	lsls	r1, r3, #30
 8015254:	bf58      	it	pl
 8015256:	6962      	ldrpl	r2, [r4, #20]
 8015258:	60a2      	str	r2, [r4, #8]
 801525a:	e7f4      	b.n	8015246 <__swsetup_r+0x8e>
 801525c:	2000      	movs	r0, #0
 801525e:	e7f7      	b.n	8015250 <__swsetup_r+0x98>
 8015260:	20000310 	.word	0x20000310

08015264 <_raise_r>:
 8015264:	291f      	cmp	r1, #31
 8015266:	b538      	push	{r3, r4, r5, lr}
 8015268:	4605      	mov	r5, r0
 801526a:	460c      	mov	r4, r1
 801526c:	d904      	bls.n	8015278 <_raise_r+0x14>
 801526e:	2316      	movs	r3, #22
 8015270:	6003      	str	r3, [r0, #0]
 8015272:	f04f 30ff 	mov.w	r0, #4294967295
 8015276:	bd38      	pop	{r3, r4, r5, pc}
 8015278:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801527a:	b112      	cbz	r2, 8015282 <_raise_r+0x1e>
 801527c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015280:	b94b      	cbnz	r3, 8015296 <_raise_r+0x32>
 8015282:	4628      	mov	r0, r5
 8015284:	f000 f830 	bl	80152e8 <_getpid_r>
 8015288:	4622      	mov	r2, r4
 801528a:	4601      	mov	r1, r0
 801528c:	4628      	mov	r0, r5
 801528e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015292:	f000 b817 	b.w	80152c4 <_kill_r>
 8015296:	2b01      	cmp	r3, #1
 8015298:	d00a      	beq.n	80152b0 <_raise_r+0x4c>
 801529a:	1c59      	adds	r1, r3, #1
 801529c:	d103      	bne.n	80152a6 <_raise_r+0x42>
 801529e:	2316      	movs	r3, #22
 80152a0:	6003      	str	r3, [r0, #0]
 80152a2:	2001      	movs	r0, #1
 80152a4:	e7e7      	b.n	8015276 <_raise_r+0x12>
 80152a6:	2100      	movs	r1, #0
 80152a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80152ac:	4620      	mov	r0, r4
 80152ae:	4798      	blx	r3
 80152b0:	2000      	movs	r0, #0
 80152b2:	e7e0      	b.n	8015276 <_raise_r+0x12>

080152b4 <raise>:
 80152b4:	4b02      	ldr	r3, [pc, #8]	@ (80152c0 <raise+0xc>)
 80152b6:	4601      	mov	r1, r0
 80152b8:	6818      	ldr	r0, [r3, #0]
 80152ba:	f7ff bfd3 	b.w	8015264 <_raise_r>
 80152be:	bf00      	nop
 80152c0:	20000310 	.word	0x20000310

080152c4 <_kill_r>:
 80152c4:	b538      	push	{r3, r4, r5, lr}
 80152c6:	4d07      	ldr	r5, [pc, #28]	@ (80152e4 <_kill_r+0x20>)
 80152c8:	2300      	movs	r3, #0
 80152ca:	4604      	mov	r4, r0
 80152cc:	4608      	mov	r0, r1
 80152ce:	4611      	mov	r1, r2
 80152d0:	602b      	str	r3, [r5, #0]
 80152d2:	f7eb fe45 	bl	8000f60 <_kill>
 80152d6:	1c43      	adds	r3, r0, #1
 80152d8:	d102      	bne.n	80152e0 <_kill_r+0x1c>
 80152da:	682b      	ldr	r3, [r5, #0]
 80152dc:	b103      	cbz	r3, 80152e0 <_kill_r+0x1c>
 80152de:	6023      	str	r3, [r4, #0]
 80152e0:	bd38      	pop	{r3, r4, r5, pc}
 80152e2:	bf00      	nop
 80152e4:	20006944 	.word	0x20006944

080152e8 <_getpid_r>:
 80152e8:	f7eb be38 	b.w	8000f5c <_getpid>

080152ec <__swhatbuf_r>:
 80152ec:	b570      	push	{r4, r5, r6, lr}
 80152ee:	460c      	mov	r4, r1
 80152f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152f4:	2900      	cmp	r1, #0
 80152f6:	b096      	sub	sp, #88	@ 0x58
 80152f8:	4615      	mov	r5, r2
 80152fa:	461e      	mov	r6, r3
 80152fc:	da0d      	bge.n	801531a <__swhatbuf_r+0x2e>
 80152fe:	89a3      	ldrh	r3, [r4, #12]
 8015300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015304:	f04f 0100 	mov.w	r1, #0
 8015308:	bf14      	ite	ne
 801530a:	2340      	movne	r3, #64	@ 0x40
 801530c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015310:	2000      	movs	r0, #0
 8015312:	6031      	str	r1, [r6, #0]
 8015314:	602b      	str	r3, [r5, #0]
 8015316:	b016      	add	sp, #88	@ 0x58
 8015318:	bd70      	pop	{r4, r5, r6, pc}
 801531a:	466a      	mov	r2, sp
 801531c:	f000 f848 	bl	80153b0 <_fstat_r>
 8015320:	2800      	cmp	r0, #0
 8015322:	dbec      	blt.n	80152fe <__swhatbuf_r+0x12>
 8015324:	9901      	ldr	r1, [sp, #4]
 8015326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801532a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801532e:	4259      	negs	r1, r3
 8015330:	4159      	adcs	r1, r3
 8015332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015336:	e7eb      	b.n	8015310 <__swhatbuf_r+0x24>

08015338 <__smakebuf_r>:
 8015338:	898b      	ldrh	r3, [r1, #12]
 801533a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801533c:	079d      	lsls	r5, r3, #30
 801533e:	4606      	mov	r6, r0
 8015340:	460c      	mov	r4, r1
 8015342:	d507      	bpl.n	8015354 <__smakebuf_r+0x1c>
 8015344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015348:	6023      	str	r3, [r4, #0]
 801534a:	6123      	str	r3, [r4, #16]
 801534c:	2301      	movs	r3, #1
 801534e:	6163      	str	r3, [r4, #20]
 8015350:	b003      	add	sp, #12
 8015352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015354:	ab01      	add	r3, sp, #4
 8015356:	466a      	mov	r2, sp
 8015358:	f7ff ffc8 	bl	80152ec <__swhatbuf_r>
 801535c:	9f00      	ldr	r7, [sp, #0]
 801535e:	4605      	mov	r5, r0
 8015360:	4639      	mov	r1, r7
 8015362:	4630      	mov	r0, r6
 8015364:	f7ff f874 	bl	8014450 <_malloc_r>
 8015368:	b948      	cbnz	r0, 801537e <__smakebuf_r+0x46>
 801536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801536e:	059a      	lsls	r2, r3, #22
 8015370:	d4ee      	bmi.n	8015350 <__smakebuf_r+0x18>
 8015372:	f023 0303 	bic.w	r3, r3, #3
 8015376:	f043 0302 	orr.w	r3, r3, #2
 801537a:	81a3      	strh	r3, [r4, #12]
 801537c:	e7e2      	b.n	8015344 <__smakebuf_r+0xc>
 801537e:	89a3      	ldrh	r3, [r4, #12]
 8015380:	6020      	str	r0, [r4, #0]
 8015382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015386:	81a3      	strh	r3, [r4, #12]
 8015388:	9b01      	ldr	r3, [sp, #4]
 801538a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801538e:	b15b      	cbz	r3, 80153a8 <__smakebuf_r+0x70>
 8015390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015394:	4630      	mov	r0, r6
 8015396:	f000 f81d 	bl	80153d4 <_isatty_r>
 801539a:	b128      	cbz	r0, 80153a8 <__smakebuf_r+0x70>
 801539c:	89a3      	ldrh	r3, [r4, #12]
 801539e:	f023 0303 	bic.w	r3, r3, #3
 80153a2:	f043 0301 	orr.w	r3, r3, #1
 80153a6:	81a3      	strh	r3, [r4, #12]
 80153a8:	89a3      	ldrh	r3, [r4, #12]
 80153aa:	431d      	orrs	r5, r3
 80153ac:	81a5      	strh	r5, [r4, #12]
 80153ae:	e7cf      	b.n	8015350 <__smakebuf_r+0x18>

080153b0 <_fstat_r>:
 80153b0:	b538      	push	{r3, r4, r5, lr}
 80153b2:	4d07      	ldr	r5, [pc, #28]	@ (80153d0 <_fstat_r+0x20>)
 80153b4:	2300      	movs	r3, #0
 80153b6:	4604      	mov	r4, r0
 80153b8:	4608      	mov	r0, r1
 80153ba:	4611      	mov	r1, r2
 80153bc:	602b      	str	r3, [r5, #0]
 80153be:	f7eb fdef 	bl	8000fa0 <_fstat>
 80153c2:	1c43      	adds	r3, r0, #1
 80153c4:	d102      	bne.n	80153cc <_fstat_r+0x1c>
 80153c6:	682b      	ldr	r3, [r5, #0]
 80153c8:	b103      	cbz	r3, 80153cc <_fstat_r+0x1c>
 80153ca:	6023      	str	r3, [r4, #0]
 80153cc:	bd38      	pop	{r3, r4, r5, pc}
 80153ce:	bf00      	nop
 80153d0:	20006944 	.word	0x20006944

080153d4 <_isatty_r>:
 80153d4:	b538      	push	{r3, r4, r5, lr}
 80153d6:	4d06      	ldr	r5, [pc, #24]	@ (80153f0 <_isatty_r+0x1c>)
 80153d8:	2300      	movs	r3, #0
 80153da:	4604      	mov	r4, r0
 80153dc:	4608      	mov	r0, r1
 80153de:	602b      	str	r3, [r5, #0]
 80153e0:	f7eb fde4 	bl	8000fac <_isatty>
 80153e4:	1c43      	adds	r3, r0, #1
 80153e6:	d102      	bne.n	80153ee <_isatty_r+0x1a>
 80153e8:	682b      	ldr	r3, [r5, #0]
 80153ea:	b103      	cbz	r3, 80153ee <_isatty_r+0x1a>
 80153ec:	6023      	str	r3, [r4, #0]
 80153ee:	bd38      	pop	{r3, r4, r5, pc}
 80153f0:	20006944 	.word	0x20006944

080153f4 <_init>:
 80153f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153f6:	bf00      	nop
 80153f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153fa:	bc08      	pop	{r3}
 80153fc:	469e      	mov	lr, r3
 80153fe:	4770      	bx	lr

08015400 <_fini>:
 8015400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015402:	bf00      	nop
 8015404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015406:	bc08      	pop	{r3}
 8015408:	469e      	mov	lr, r3
 801540a:	4770      	bx	lr
 801540c:	0000      	movs	r0, r0
	...
