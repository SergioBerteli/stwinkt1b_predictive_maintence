
STWIN_DATALOG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000170a0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08017260  08017260  00018260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080179b0  080179b0  000194d0  2**0
                  CONTENTS
  4 .ARM          00000008  080179b0  080179b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080179b8  080179b8  000194d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080179b8  080179b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080179c0  080179c0  000189c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d0  20000000  080179c8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006574  200004d0  08017e98  000194d0  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  20006a44  08017e98  00019a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000194d0  2**0
                  CONTENTS, READONLY
 12 .debug_line   0007eb0e  00000000  00000000  00019500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000010e  00000000  00000000  0009800e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000b0df0  00000000  00000000  0009811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000d927  00000000  00000000  00148f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004db0  00000000  00000000  00156838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016f423  00000000  00000000  0015b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000b4d2  00000000  00000000  002caa0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0005ed73  00000000  00000000  002d5edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00041b8a  00000000  00000000  00334c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  003767da  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00011cbc  00000000  00000000  00376820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200004d0 	.word	0x200004d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017244 	.word	0x08017244

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200004d4 	.word	0x200004d4
 80001fc:	08017244 	.word	0x08017244

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ecc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ede:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ee6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <LoopForever+0x16>)
	cmp	r2, r3
 8000eee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef2:	f006 fb23 	bl	800753c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f014 f935 	bl	8015164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f000 fb11 	bl	8001520 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f00:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000f04:	080179c8 	.word	0x080179c8
	ldr	r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f0c:	200004d0 	.word	0x200004d0
	ldr	r2, =_sbss
 8000f10:	200004d0 	.word	0x200004d0
	ldr	r3, = _ebss
 8000f14:	20006a44 	.word	0x20006a44

08000f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_IRQHandler>
	...

08000f1c <_sbrk>:
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 8000f1c:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <_sbrk+0x38>)
{
 8000f1e:	b508      	push	{r3, lr}
 8000f20:	4603      	mov	r3, r0
	if (heap_end == 0)
 8000f22:	6808      	ldr	r0, [r1, #0]
 8000f24:	b158      	cbz	r0, 8000f3e <_sbrk+0x22>

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000f26:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000f2a:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000f2c:	f8d2 2d08 	ldr.w	r2, [r2, #3336]	@ 0xd08
 8000f30:	6812      	ldr	r2, [r2, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8000f32:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d804      	bhi.n	8000f44 <_sbrk+0x28>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000f3a:	600b      	str	r3, [r1, #0]

	return (caddr_t) prev_heap_end;
}
 8000f3c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <_sbrk+0x3c>)
 8000f40:	6008      	str	r0, [r1, #0]
 8000f42:	e7f0      	b.n	8000f26 <_sbrk+0xa>
		errno = ENOMEM;
 8000f44:	f014 f908 	bl	8015158 <__errno>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000f50:	bd08      	pop	{r3, pc}
 8000f52:	bf00      	nop
 8000f54:	200004ec 	.word	0x200004ec
 8000f58:	20006a48 	.word	0x20006a48

08000f5c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <_kill>:

int _kill(int pid, int sig)
{
 8000f60:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f62:	f014 f8f9 	bl	8015158 <__errno>
 8000f66:	2316      	movs	r3, #22
 8000f68:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f6e:	bd08      	pop	{r3, pc}

08000f70 <_exit>:

void _exit (int status)
{
 8000f70:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f72:	f014 f8f1 	bl	8015158 <__errno>
 8000f76:	2316      	movs	r3, #22
 8000f78:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8000f7a:	e7fe      	b.n	8000f7a <_exit+0xa>

08000f7c <_write>:
}

int _write(int file, char *ptr, int len)
{
 8000f7c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	1e16      	subs	r6, r2, #0
 8000f80:	dd07      	ble.n	8000f92 <_write+0x16>
 8000f82:	460c      	mov	r4, r1
 8000f84:	198d      	adds	r5, r1, r6
		{
		   __io_putchar( *ptr++ );
 8000f86:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000f8a:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d1f9      	bne.n	8000f86 <_write+0xa>
		}
	return len;
}
 8000f92:	4630      	mov	r0, r6
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	bf00      	nop

08000f98 <_close>:

int _close(int file)
{
	return -1;
}
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa4:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000fac:	2001      	movs	r0, #1
 8000fae:	4770      	bx	lr

08000fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <_read>:

int _read(int file, char *ptr, int len)
{
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	460c      	mov	r4, r1
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	7020      	strb	r0, [r4, #0]
	return 1;
}
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	bf00      	nop

08000fc4 <DATALOG_SD_Init>:
  * @brief  Start SD-Card demo
  * @param  None
  * @retval None
  */
void DATALOG_SD_Init(void)
{
 8000fc4:	b508      	push	{r3, lr}
  BSP_SD_Detect_Init();
 8000fc6:	f006 f9eb 	bl	80073a0 <BSP_SD_Detect_Init>

      
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000fca:	490d      	ldr	r1, [pc, #52]	@ (8001000 <DATALOG_SD_Init+0x3c>)
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <DATALOG_SD_Init+0x40>)
 8000fce:	f010 fd53 	bl	8011a78 <FATFS_LinkDriver>
 8000fd2:	b100      	cbz	r0, 8000fd6 <DATALOG_SD_Init+0x12>
        BSP_LED_Off(LED1);
        HAL_Delay(100);
      }
    }
  }
}
 8000fd4:	bd08      	pop	{r3, pc}
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8000fd6:	490a      	ldr	r1, [pc, #40]	@ (8001000 <DATALOG_SD_Init+0x3c>)
 8000fd8:	4602      	mov	r2, r0
 8000fda:	1d08      	adds	r0, r1, #4
 8000fdc:	f010 f9b2 	bl	8011344 <f_mount>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d0f7      	beq.n	8000fd4 <DATALOG_SD_Init+0x10>
        BSP_LED_On(LED1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f004 fe0d 	bl	8005c04 <BSP_LED_On>
        HAL_Delay(500);
 8000fea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fee:	f006 fb15 	bl	800761c <HAL_Delay>
        BSP_LED_Off(LED1);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f004 fe14 	bl	8005c20 <BSP_LED_Off>
        HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	@ 0x64
 8000ffa:	f006 fb0f 	bl	800761c <HAL_Delay>
      while(1)
 8000ffe:	e7f1      	b.n	8000fe4 <DATALOG_SD_Init+0x20>
 8001000:	200004f0 	.word	0x200004f0
 8001004:	080173d4 	.word	0x080173d4

08001008 <DATALOG_SD_Log_Enable>:
  * @brief  Start SD-Card demo
  * @param  None
  * @retval None
  */
uint8_t DATALOG_SD_Log_Enable(void)
{
 8001008:	b530      	push	{r4, r5, lr}
 800100a:	b0b1      	sub	sp, #196	@ 0xc4
  static uint16_t sdcard_file_counter = 0;
  char header[] = "T [ms],AccX [mg],AccY [mg],AccZ [mg],GyroX [mdps],GyroY [mdps],GyroZ [mdps],MagX [mgauss],MagY [mgauss],MagZ [mgauss],P [mB],T [�C],H [%]\r\n";
 800100c:	491d      	ldr	r1, [pc, #116]	@ (8001084 <DATALOG_SD_Log_Enable+0x7c>)
  uint32_t byteswritten; /* written byte count */
  char file_name[30] = {0};
 
  sprintf(file_name, "%s%.3d%s", "ind", sdcard_file_counter, ".csv");
 800100e:	4d1e      	ldr	r5, [pc, #120]	@ (8001088 <DATALOG_SD_Log_Enable+0x80>)
  char header[] = "T [ms],AccX [mg],AccY [mg],AccZ [mg],GyroX [mdps],GyroY [mdps],GyroZ [mdps],MagX [mgauss],MagY [mgauss],MagZ [mgauss],P [mB],T [�C],H [%]\r\n";
 8001010:	228e      	movs	r2, #142	@ 0x8e
 8001012:	a80c      	add	r0, sp, #48	@ 0x30
 8001014:	f014 f8cd 	bl	80151b2 <memcpy>
  sprintf(file_name, "%s%.3d%s", "ind", sdcard_file_counter, ".csv");
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <DATALOG_SD_Log_Enable+0x84>)
 800101a:	9300      	str	r3, [sp, #0]
  char file_name[30] = {0};
 800101c:	2400      	movs	r4, #0
  sprintf(file_name, "%s%.3d%s", "ind", sdcard_file_counter, ".csv");
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <DATALOG_SD_Log_Enable+0x88>)
 8001020:	491c      	ldr	r1, [pc, #112]	@ (8001094 <DATALOG_SD_Log_Enable+0x8c>)
 8001022:	f8b5 3234 	ldrh.w	r3, [r5, #564]	@ 0x234
  char file_name[30] = {0};
 8001026:	940a      	str	r4, [sp, #40]	@ 0x28
  sprintf(file_name, "%s%.3d%s", "ind", sdcard_file_counter, ".csv");
 8001028:	a804      	add	r0, sp, #16
  char file_name[30] = {0};
 800102a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800102e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001032:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001036:	f8ad 402c 	strh.w	r4, [sp, #44]	@ 0x2c
  sprintf(file_name, "%s%.3d%s", "ind", sdcard_file_counter, ".csv");
 800103a:	f013 ffd7 	bl	8014fec <siprintf>
  sdcard_file_counter++;
 800103e:	f8b5 3234 	ldrh.w	r3, [r5, #564]	@ 0x234

  HAL_Delay(100);
 8001042:	2064      	movs	r0, #100	@ 0x64
  sdcard_file_counter++;
 8001044:	3301      	adds	r3, #1
 8001046:	f8a5 3234 	strh.w	r3, [r5, #564]	@ 0x234
  HAL_Delay(100);
 800104a:	f006 fae7 	bl	800761c <HAL_Delay>

  if(f_open(&MyFile, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800104e:	220a      	movs	r2, #10
 8001050:	a904      	add	r1, sp, #16
 8001052:	f505 700e 	add.w	r0, r5, #568	@ 0x238
 8001056:	f010 f9b9 	bl	80113cc <f_open>
 800105a:	b138      	cbz	r0, 800106c <DATALOG_SD_Log_Enable+0x64>
  {
    sdcard_file_counter--;
 800105c:	f8b5 3234 	ldrh.w	r3, [r5, #564]	@ 0x234
    return 0;
 8001060:	4620      	mov	r0, r4
    sdcard_file_counter--;
 8001062:	3b01      	subs	r3, #1
 8001064:	f8a5 3234 	strh.w	r3, [r5, #564]	@ 0x234
    return 0;
  }
  
  return 1;
  
}
 8001068:	b031      	add	sp, #196	@ 0xc4
 800106a:	bd30      	pop	{r4, r5, pc}
  if(f_write(&MyFile, (const void*)&header, sizeof(header)-1, (void *)&byteswritten) != FR_OK)
 800106c:	ab03      	add	r3, sp, #12
 800106e:	228d      	movs	r2, #141	@ 0x8d
 8001070:	a90c      	add	r1, sp, #48	@ 0x30
 8001072:	f505 700e 	add.w	r0, r5, #568	@ 0x238
 8001076:	f010 fb19 	bl	80116ac <f_write>
 800107a:	fab0 f080 	clz	r0, r0
 800107e:	0940      	lsrs	r0, r0, #5
}
 8001080:	b031      	add	sp, #196	@ 0xc4
 8001082:	bd30      	pop	{r4, r5, pc}
 8001084:	08017400 	.word	0x08017400
 8001088:	200004f0 	.word	0x200004f0
 800108c:	080173f8 	.word	0x080173f8
 8001090:	080173e8 	.word	0x080173e8
 8001094:	080173ec 	.word	0x080173ec

08001098 <DATALOG_SD_writeBuf>:



uint8_t DATALOG_SD_writeBuf(char *s, uint32_t size)
{
 8001098:	b530      	push	{r4, r5, lr}
 800109a:	460d      	mov	r5, r1
 800109c:	b083      	sub	sp, #12
 800109e:	4604      	mov	r4, r0
  uint32_t byteswritten;
  
  BSP_LED_Toggle(LED1);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f004 fdcb 	bl	8005c3c <BSP_LED_Toggle>

  if(f_write(&MyFile, s, size, (void *)&byteswritten) != FR_OK)
 80010a6:	ab01      	add	r3, sp, #4
 80010a8:	462a      	mov	r2, r5
 80010aa:	4621      	mov	r1, r4
 80010ac:	4803      	ldr	r0, [pc, #12]	@ (80010bc <DATALOG_SD_writeBuf+0x24>)
 80010ae:	f010 fafd 	bl	80116ac <f_write>
  {
    return 0;
  }
  return 1;
}
 80010b2:	fab0 f080 	clz	r0, r0
 80010b6:	0940      	lsrs	r0, r0, #5
 80010b8:	b003      	add	sp, #12
 80010ba:	bd30      	pop	{r4, r5, pc}
 80010bc:	20000728 	.word	0x20000728

080010c0 <DATALOG_SD_Log_Disable>:
  * @brief  Disable SDCard Log
  * @param  None
  * @retval None
  */
void DATALOG_SD_Log_Disable(void)
{
 80010c0:	b508      	push	{r3, lr}
  BSP_LED_Off(LED1);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f004 fdac 	bl	8005c20 <BSP_LED_Off>
  
  f_close(&MyFile);

}
 80010c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  f_close(&MyFile);
 80010cc:	4801      	ldr	r0, [pc, #4]	@ (80010d4 <DATALOG_SD_Log_Disable+0x14>)
 80010ce:	f010 bc51 	b.w	8011974 <f_close>
 80010d2:	bf00      	nop
 80010d4:	20000728 	.word	0x20000728

080010d8 <DATALOG_SD_DeInit>:

void DATALOG_SD_DeInit(void)
{
  FATFS_UnLinkDriver(SDPath);
 80010d8:	4801      	ldr	r0, [pc, #4]	@ (80010e0 <DATALOG_SD_DeInit+0x8>)
 80010da:	f010 bcf1 	b.w	8011ac0 <FATFS_UnLinkDriver>
 80010de:	bf00      	nop
 80010e0:	200004f0 	.word	0x200004f0

080010e4 <getSensorsData>:
}



int32_t getSensorsData( T_SensorsData *mptr)
{
 80010e4:	b538      	push	{r3, r4, r5, lr}
 80010e6:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  mptr->ms_counter = HAL_GetTick();
 80010e8:	f006 fa92 	bl	8007610 <HAL_GetTick>
 80010ec:	4622      	mov	r2, r4
    mptr->acc.z = 0;
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }

#elif USE_IIS3DWB
  if ( BSP_MOTION_SENSOR_GetAxes( IIS3DWB_0, MOTION_ACCELERO, &mptr->acc ) == BSP_ERROR_COMPONENT_FAILURE )
 80010ee:	2102      	movs	r1, #2
  mptr->ms_counter = HAL_GetTick();
 80010f0:	f842 0b10 	str.w	r0, [r2], #16
  if ( BSP_MOTION_SENSOR_GetAxes( IIS3DWB_0, MOTION_ACCELERO, &mptr->acc ) == BSP_ERROR_COMPONENT_FAILURE )
 80010f4:	4608      	mov	r0, r1
 80010f6:	f006 f8cf 	bl	8007298 <BSP_MOTION_SENSOR_GetAxes>
 80010fa:	1d41      	adds	r1, r0, #5
 80010fc:	d039      	beq.n	8001172 <getSensorsData+0x8e>
  int32_t ret = BSP_ERROR_NONE;
 80010fe:	2500      	movs	r5, #0
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  
#endif

  if ( BSP_MOTION_SENSOR_GetAxes(ISM330DHCX_0, MOTION_GYRO, &mptr->gyro ) == BSP_ERROR_COMPONENT_FAILURE )
 8001100:	f104 021c 	add.w	r2, r4, #28
 8001104:	2101      	movs	r1, #1
 8001106:	2003      	movs	r0, #3
 8001108:	f006 f8c6 	bl	8007298 <BSP_MOTION_SENSOR_GetAxes>
 800110c:	1d42      	adds	r2, r0, #5
 800110e:	d104      	bne.n	800111a <getSensorsData+0x36>
  {
    mptr->gyro.x = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	e9c4 3307 	strd	r3, r3, [r4, #28]
    mptr->gyro.y = 0;
    mptr->gyro.z = 0;
 8001116:	6263      	str	r3, [r4, #36]	@ 0x24
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001118:	4605      	mov	r5, r0
  }
  
  if ( BSP_MOTION_SENSOR_GetAxes(IIS2MDC_0, MOTION_MAGNETO, &mptr->mag ) == BSP_ERROR_COMPONENT_FAILURE )
 800111a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800111e:	2104      	movs	r1, #4
 8001120:	2001      	movs	r0, #1
 8001122:	f006 f8b9 	bl	8007298 <BSP_MOTION_SENSOR_GetAxes>
 8001126:	1d43      	adds	r3, r0, #5
 8001128:	d104      	bne.n	8001134 <getSensorsData+0x50>
  {
    mptr->mag.x = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
    mptr->mag.y = 0;
    mptr->mag.z = 0;
 8001130:	6323      	str	r3, [r4, #48]	@ 0x30
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001132:	4605      	mov	r5, r0
  }
  
  if ( BSP_ENV_SENSOR_GetValue(LPS22HH_0, ENV_PRESSURE, &mptr->pressure ) == BSP_ERROR_COMPONENT_FAILURE )
 8001134:	2102      	movs	r1, #2
 8001136:	1d22      	adds	r2, r4, #4
 8001138:	2001      	movs	r0, #1
 800113a:	f005 fb95 	bl	8006868 <BSP_ENV_SENSOR_GetValue>
 800113e:	1d41      	adds	r1, r0, #5
 8001140:	d102      	bne.n	8001148 <getSensorsData+0x64>
  {
    mptr->pressure = 0.0f;
 8001142:	2300      	movs	r3, #0
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001144:	4605      	mov	r5, r0
    mptr->pressure = 0.0f;
 8001146:	6063      	str	r3, [r4, #4]
  }
  
  if ( BSP_ENV_SENSOR_GetValue(STTS751_0, ENV_TEMPERATURE, &mptr->temperature ) == BSP_ERROR_COMPONENT_FAILURE )
 8001148:	f104 020c 	add.w	r2, r4, #12
 800114c:	2101      	movs	r1, #1
 800114e:	2002      	movs	r0, #2
 8001150:	f005 fb8a 	bl	8006868 <BSP_ENV_SENSOR_GetValue>
 8001154:	1d42      	adds	r2, r0, #5
 8001156:	d102      	bne.n	800115e <getSensorsData+0x7a>
  {
    mptr->temperature = 0.0f;
 8001158:	2300      	movs	r3, #0
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800115a:	4605      	mov	r5, r0
    mptr->temperature = 0.0f;
 800115c:	60e3      	str	r3, [r4, #12]
  }
  
  if ( BSP_ENV_SENSOR_GetValue(HTS221_0, ENV_HUMIDITY, &mptr->humidity ) == BSP_ERROR_COMPONENT_FAILURE )
 800115e:	f104 0208 	add.w	r2, r4, #8
 8001162:	2104      	movs	r1, #4
 8001164:	2000      	movs	r0, #0
 8001166:	f005 fb7f 	bl	8006868 <BSP_ENV_SENSOR_GetValue>
 800116a:	1d43      	adds	r3, r0, #5
 800116c:	d007      	beq.n	800117e <getSensorsData+0x9a>
    mptr->humidity = 0.0f;
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  
  return ret;
}
 800116e:	4628      	mov	r0, r5
 8001170:	bd38      	pop	{r3, r4, r5, pc}
    mptr->acc.x = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8001178:	4605      	mov	r5, r0
    mptr->acc.z = 0;
 800117a:	61a3      	str	r3, [r4, #24]
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800117c:	e7c0      	b.n	8001100 <getSensorsData+0x1c>
    mptr->humidity = 0.0f;
 800117e:	2300      	movs	r3, #0
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001180:	4605      	mov	r5, r0
    mptr->humidity = 0.0f;
 8001182:	60a3      	str	r3, [r4, #8]
  return ret;
 8001184:	e7f3      	b.n	800116e <getSensorsData+0x8a>
 8001186:	bf00      	nop

08001188 <MX_X_CUBE_MEMS1_Init>:
}



void MX_X_CUBE_MEMS1_Init(void)
{
 8001188:	b508      	push	{r3, lr}
 800118a:	ed2d 8b02 	vpush	{d8}
  * @retval None
  */
void MX_DataLogTerminal_Init(void)
{
  BSP_MOTION_SENSOR_Init(IIS2MDC_0, MOTION_MAGNETO);
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_ODR);
 800118e:	ed9f 8a22 	vldr	s16, [pc, #136]	@ 8001218 <MX_X_CUBE_MEMS1_Init+0x90>
  Sensor_IO_SPI_CS_Init_All();
 8001192:	f004 fd61 	bl	8005c58 <Sensor_IO_SPI_CS_Init_All>
  BSP_MOTION_SENSOR_Init(IIS2MDC_0, MOTION_MAGNETO);
 8001196:	2104      	movs	r1, #4
 8001198:	2001      	movs	r0, #1
 800119a:	f005 fdb1 	bl	8006d00 <BSP_MOTION_SENSOR_Init>
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_ODR);
 800119e:	eeb0 0a48 	vmov.f32	s0, s16
 80011a2:	2104      	movs	r1, #4
 80011a4:	2001      	movs	r0, #1
 80011a6:	f006 f8a3 	bl	80072f0 <BSP_MOTION_SENSOR_SetOutputDataRate>
  BSP_MOTION_SENSOR_SetFullScale(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_FS);
 80011aa:	2232      	movs	r2, #50	@ 0x32
 80011ac:	2104      	movs	r1, #4
 80011ae:	2001      	movs	r0, #1
 80011b0:	f006 f8c8 	bl	8007344 <BSP_MOTION_SENSOR_SetFullScale>

  // iis3dwb
  BSP_MOTION_SENSOR_Init(IIS3DWB_0, MOTION_ACCELERO);
 80011b4:	2102      	movs	r1, #2
 80011b6:	4608      	mov	r0, r1
 80011b8:	f005 fda2 	bl	8006d00 <BSP_MOTION_SENSOR_Init>
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS3DWB_0, MOTION_ACCELERO, IIS3DWB_ACC_ODR);
 80011bc:	2102      	movs	r1, #2
 80011be:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800121c <MX_X_CUBE_MEMS1_Init+0x94>
 80011c2:	4608      	mov	r0, r1
 80011c4:	f006 f894 	bl	80072f0 <BSP_MOTION_SENSOR_SetOutputDataRate>
  BSP_MOTION_SENSOR_SetFullScale(IIS3DWB_0, MOTION_ACCELERO, IIS3DWB_ACC_FS);
 80011c8:	2202      	movs	r2, #2
 80011ca:	4611      	mov	r1, r2
 80011cc:	4610      	mov	r0, r2
 80011ce:	f006 f8b9 	bl	8007344 <BSP_MOTION_SENSOR_SetFullScale>
  BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DHCX_0, MOTION_GYRO, ISM330DHC_GYRO_ODR);
  BSP_MOTION_SENSOR_SetFullScale(ISM330DHCX_0, MOTION_GYRO, ISM330DHC_GYRO_FS);
  
#endif
  
  BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY);
 80011d2:	2104      	movs	r1, #4
 80011d4:	2000      	movs	r0, #0
 80011d6:	f005 f8bf 	bl	8006358 <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_SetOutputDataRate(HTS221_0, ENV_HUMIDITY, HTS221_ODR);
 80011da:	eeb2 0a09 	vmov.f32	s0, #41	@ 0x41480000  12.5
 80011de:	2104      	movs	r1, #4
 80011e0:	2000      	movs	r0, #0
 80011e2:	f005 fb17 	bl	8006814 <BSP_ENV_SENSOR_SetOutputDataRate>
 
  BSP_ENV_SENSOR_Init(LPS22HH_0, ENV_PRESSURE);
 80011e6:	2102      	movs	r1, #2
 80011e8:	2001      	movs	r0, #1
 80011ea:	f005 f8b5 	bl	8006358 <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_SetOutputDataRate(LPS22HH_0, ENV_PRESSURE, LPS22HH_ODR);
 80011ee:	eeb0 0a48 	vmov.f32	s0, s16
 80011f2:	2102      	movs	r1, #2
 80011f4:	2001      	movs	r0, #1
 80011f6:	f005 fb0d 	bl	8006814 <BSP_ENV_SENSOR_SetOutputDataRate>
  
  BSP_ENV_SENSOR_Init(STTS751_0, ENV_TEMPERATURE);
 80011fa:	2101      	movs	r1, #1
 80011fc:	2002      	movs	r0, #2
 80011fe:	f005 f8ab 	bl	8006358 <BSP_ENV_SENSOR_Init>
}
 8001202:	ecbd 8b02 	vpop	{d8}
  BSP_ENV_SENSOR_SetOutputDataRate(STTS751_0, ENV_TEMPERATURE, STTS751_ODR);
 8001206:	eeb3 0a00 	vmov.f32	s0, #48	@ 0x41800000  16.0
}
 800120a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_ENV_SENSOR_SetOutputDataRate(STTS751_0, ENV_TEMPERATURE, STTS751_ODR);
 800120e:	2101      	movs	r1, #1
 8001210:	2002      	movs	r0, #2
 8001212:	f005 baff 	b.w	8006814 <BSP_ENV_SENSOR_SetOutputDataRate>
 8001216:	bf00      	nop
 8001218:	42480000 	.word	0x42480000
 800121c:	45d05800 	.word	0x45d05800

08001220 <dataTimer_Callback>:

}

void dataTimer_Callback(void const *arg)
{ 
  osSemaphoreRelease(readDataSem_id);
 8001220:	4b01      	ldr	r3, [pc, #4]	@ (8001228 <dataTimer_Callback+0x8>)
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	f010 be18 	b.w	8011e58 <osSemaphoreRelease>
 8001228:	20000968 	.word	0x20000968

0800122c <WriteData_Thread>:
{
 800122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001230:	4d60      	ldr	r5, [pc, #384]	@ (80013b4 <WriteData_Thread+0x188>)
 8001232:	4f61      	ldr	r7, [pc, #388]	@ (80013b8 <WriteData_Thread+0x18c>)
 8001234:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 80013d0 <WriteData_Thread+0x1a4>
 8001238:	b0d3      	sub	sp, #332	@ 0x14c
    evt = osMessageGet(dataQueue_id, osWaitForever);  // wait for message
 800123a:	6869      	ldr	r1, [r5, #4]
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001240:	a80f      	add	r0, sp, #60	@ 0x3c
 8001242:	f010 fee1 	bl	8012008 <osMessageGet>
 8001246:	e9dd 340f 	ldrd	r3, r4, [sp, #60]	@ 0x3c
    if (evt.status == osEventMessage)
 800124a:	2b10      	cmp	r3, #16
 800124c:	d1f5      	bne.n	800123a <WriteData_Thread+0xe>
      if(evt.value.v == MSG_ENABLE_DISABLE)
 800124e:	2c07      	cmp	r4, #7
 8001250:	d04d      	beq.n	80012ee <WriteData_Thread+0xc2>
      if(LoggingInterface == USB_Datalog)
 8001252:	f895 8010 	ldrb.w	r8, [r5, #16]
 8001256:	f1b8 0f00 	cmp.w	r8, #0
 800125a:	d150      	bne.n	80012fe <WriteData_Thread+0xd2>
		snprintf((char*) tx_buffer, sizeof(tx_buffer), "Ola mundo!\r\n");
 800125c:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8001260:	4e56      	ldr	r6, [pc, #344]	@ (80013bc <WriteData_Thread+0x190>)
 8001262:	c607      	stmia	r6!, {r0, r1, r2}
 8001264:	7033      	strb	r3, [r6, #0]
        size = sprintf(data_s, "TimeStamp: %ld\r\n Acc_X: %d, Acc_Y: %d, Acc_Z :%d\r\n Gyro_X:%d, Gyro_Y:%d, Gyro_Z:%d\r\n Magn_X:%d, Magn_Y:%d, Magn_Z:%d\r\n Press:%5.2f, Temp:%5.2f, Hum:%4.1f\r\n",
 8001266:	68a0      	ldr	r0, [r4, #8]
 8001268:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800126c:	f7ff f984 	bl	8000578 <__aeabi_f2d>
 8001270:	f8d4 a000 	ldr.w	sl, [r4]
 8001274:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8001278:	68e0      	ldr	r0, [r4, #12]
 800127a:	f7ff f97d 	bl	8000578 <__aeabi_f2d>
 800127e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8001282:	6860      	ldr	r0, [r4, #4]
 8001284:	f7ff f978 	bl	8000578 <__aeabi_f2d>
 8001288:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800128c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800128e:	9107      	str	r1, [sp, #28]
 8001290:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001292:	9106      	str	r1, [sp, #24]
 8001294:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001296:	9105      	str	r1, [sp, #20]
 8001298:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800129a:	9104      	str	r1, [sp, #16]
 800129c:	6a21      	ldr	r1, [r4, #32]
 800129e:	9103      	str	r1, [sp, #12]
 80012a0:	69e1      	ldr	r1, [r4, #28]
 80012a2:	9102      	str	r1, [sp, #8]
 80012a4:	69a1      	ldr	r1, [r4, #24]
 80012a6:	9101      	str	r1, [sp, #4]
 80012a8:	6961      	ldr	r1, [r4, #20]
 80012aa:	9100      	str	r1, [sp, #0]
 80012ac:	465b      	mov	r3, fp
 80012ae:	4652      	mov	r2, sl
 80012b0:	4943      	ldr	r1, [pc, #268]	@ (80013c0 <WriteData_Thread+0x194>)
 80012b2:	a812      	add	r0, sp, #72	@ 0x48
 80012b4:	f013 fe9a 	bl	8014fec <siprintf>
        osPoolFree(sensorPool_id, rptr);      // free memory allocated for message
 80012b8:	4621      	mov	r1, r4
        size = sprintf(data_s, "TimeStamp: %ld\r\n Acc_X: %d, Acc_Y: %d, Acc_Z :%d\r\n Gyro_X:%d, Gyro_Y:%d, Gyro_Z:%d\r\n Magn_X:%d, Magn_Y:%d, Magn_Z:%d\r\n Press:%5.2f, Temp:%5.2f, Hum:%4.1f\r\n",
 80012ba:	4604      	mov	r4, r0
        osPoolFree(sensorPool_id, rptr);      // free memory allocated for message
 80012bc:	f8d5 0114 	ldr.w	r0, [r5, #276]	@ 0x114
 80012c0:	f010 fe5c 	bl	8011f7c <osPoolFree>
        BSP_LED_Toggle(LED1);
 80012c4:	4640      	mov	r0, r8
 80012c6:	f004 fcb9 	bl	8005c3c <BSP_LED_Toggle>
		tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80012ca:	f1a6 000c 	sub.w	r0, r6, #12
 80012ce:	f7fe ffe7 	bl	80002a0 <strlen>
  /* USER CODE END USART2_Init 2 */

}

static void tx_com (uint8_t *tx2_buffer, uint16_t len){
	HAL_UART_Transmit(&huart2, tx2_buffer, len, 1000);
 80012d2:	f1a6 010c 	sub.w	r1, r6, #12
 80012d6:	b282      	uxth	r2, r0
 80012d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012dc:	f106 00f8 	add.w	r0, r6, #248	@ 0xf8
 80012e0:	f00c f886 	bl	800d3f0 <HAL_UART_Transmit>
        CDC_Transmit_FS(( uint8_t * )data_s, size);
 80012e4:	b2a1      	uxth	r1, r4
 80012e6:	a812      	add	r0, sp, #72	@ 0x48
 80012e8:	f000 fb24 	bl	8001934 <CDC_Transmit_FS>
 80012ec:	e7a5      	b.n	800123a <WriteData_Thread+0xe>
        if (SD_Log_Enabled) 
 80012ee:	783b      	ldrb	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d037      	beq.n	8001364 <WriteData_Thread+0x138>
          DATALOG_SD_Log_Disable();
 80012f4:	f7ff fee4 	bl	80010c0 <DATALOG_SD_Log_Disable>
          SD_Log_Enabled=0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	703b      	strb	r3, [r7, #0]
 80012fc:	e79d      	b.n	800123a <WriteData_Thread+0xe>
          size = sprintf(data_s, "%ld, %d, %d, %d, %d, %d, %d, %d, %d, %d, %5.2f, %5.2f, %4.1f\r\n",
 80012fe:	68a0      	ldr	r0, [r4, #8]
 8001300:	f7ff f93a 	bl	8000578 <__aeabi_f2d>
 8001304:	6826      	ldr	r6, [r4, #0]
 8001306:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800130a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800130e:	68e0      	ldr	r0, [r4, #12]
 8001310:	f7ff f932 	bl	8000578 <__aeabi_f2d>
 8001314:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8001318:	6860      	ldr	r0, [r4, #4]
 800131a:	f7ff f92d 	bl	8000578 <__aeabi_f2d>
 800131e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001322:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001324:	9107      	str	r1, [sp, #28]
 8001326:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001328:	9106      	str	r1, [sp, #24]
 800132a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800132c:	9105      	str	r1, [sp, #20]
 800132e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001330:	9104      	str	r1, [sp, #16]
 8001332:	6a21      	ldr	r1, [r4, #32]
 8001334:	9103      	str	r1, [sp, #12]
 8001336:	69e1      	ldr	r1, [r4, #28]
 8001338:	9102      	str	r1, [sp, #8]
 800133a:	69a1      	ldr	r1, [r4, #24]
 800133c:	9101      	str	r1, [sp, #4]
 800133e:	6961      	ldr	r1, [r4, #20]
 8001340:	9100      	str	r1, [sp, #0]
 8001342:	4632      	mov	r2, r6
 8001344:	4643      	mov	r3, r8
 8001346:	491f      	ldr	r1, [pc, #124]	@ (80013c4 <WriteData_Thread+0x198>)
 8001348:	a812      	add	r0, sp, #72	@ 0x48
 800134a:	f013 fe4f 	bl	8014fec <siprintf>
          osPoolFree(sensorPool_id, rptr);      // free memory allocated for message
 800134e:	4621      	mov	r1, r4
          size = sprintf(data_s, "%ld, %d, %d, %d, %d, %d, %d, %d, %d, %d, %5.2f, %5.2f, %4.1f\r\n",
 8001350:	4606      	mov	r6, r0
          osPoolFree(sensorPool_id, rptr);      // free memory allocated for message
 8001352:	f8d5 0114 	ldr.w	r0, [r5, #276]	@ 0x114
 8001356:	f010 fe11 	bl	8011f7c <osPoolFree>
          DATALOG_SD_writeBuf(data_s, size);
 800135a:	4631      	mov	r1, r6
 800135c:	a812      	add	r0, sp, #72	@ 0x48
 800135e:	f7ff fe9b 	bl	8001098 <DATALOG_SD_writeBuf>
 8001362:	e76a      	b.n	800123a <WriteData_Thread+0xe>
          while(SD_Log_Enabled != 1)
 8001364:	783b      	ldrb	r3, [r7, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	f43f af67 	beq.w	800123a <WriteData_Thread+0xe>
              SD_Log_Enabled=1;
 800136c:	2401      	movs	r4, #1
 800136e:	e011      	b.n	8001394 <WriteData_Thread+0x168>
 8001370:	703c      	strb	r4, [r7, #0]
              osDelay(100);
 8001372:	f010 fca5 	bl	8011cc0 <osDelay>
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 8001376:	2101      	movs	r1, #1
 8001378:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <WriteData_Thread+0x19c>)
 800137a:	4814      	ldr	r0, [pc, #80]	@ (80013cc <WriteData_Thread+0x1a0>)
  exec = 1;
 800137c:	60ac      	str	r4, [r5, #8]
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 800137e:	f010 fca7 	bl	8011cd0 <osTimerCreate>
    status = osTimerStart (sensorTimId, DATA_PERIOD_MS);                // start timer
 8001382:	2114      	movs	r1, #20
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 8001384:	60e8      	str	r0, [r5, #12]
  if (sensorTimId)  {
 8001386:	b108      	cbz	r0, 800138c <WriteData_Thread+0x160>
    status = osTimerStart (sensorTimId, DATA_PERIOD_MS);                // start timer
 8001388:	f010 fcb6 	bl	8011cf8 <osTimerStart>
          while(SD_Log_Enabled != 1)
 800138c:	783b      	ldrb	r3, [r7, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f43f af53 	beq.w	800123a <WriteData_Thread+0xe>
            if(DATALOG_SD_Log_Enable())
 8001394:	f7ff fe38 	bl	8001008 <DATALOG_SD_Log_Enable>
 8001398:	4603      	mov	r3, r0
              osDelay(100);
 800139a:	2064      	movs	r0, #100	@ 0x64
            if(DATALOG_SD_Log_Enable())
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e7      	bne.n	8001370 <WriteData_Thread+0x144>
              DATALOG_SD_Log_Disable();
 80013a0:	f7ff fe8e 	bl	80010c0 <DATALOG_SD_Log_Disable>
              DATALOG_SD_DeInit();
 80013a4:	f7ff fe98 	bl	80010d8 <DATALOG_SD_DeInit>
              DATALOG_SD_Init();
 80013a8:	f7ff fe0c 	bl	8000fc4 <DATALOG_SD_Init>
              osDelay(100);
 80013ac:	2064      	movs	r0, #100	@ 0x64
 80013ae:	f010 fc87 	bl	8011cc0 <osDelay>
 80013b2:	e7eb      	b.n	800138c <WriteData_Thread+0x160>
 80013b4:	20000968 	.word	0x20000968
 80013b8:	20000958 	.word	0x20000958
 80013bc:	2000097c 	.word	0x2000097c
 80013c0:	080174a0 	.word	0x080174a0
 80013c4:	0801753c 	.word	0x0801753c
 80013c8:	20000970 	.word	0x20000970
 80013cc:	08017260 	.word	0x08017260
 80013d0:	08017490 	.word	0x08017490

080013d4 <MX_USB_DEVICE_Init>:
{
 80013d4:	b510      	push	{r4, lr}
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80013d6:	4c09      	ldr	r4, [pc, #36]	@ (80013fc <MX_USB_DEVICE_Init+0x28>)
 80013d8:	4909      	ldr	r1, [pc, #36]	@ (8001400 <MX_USB_DEVICE_Init+0x2c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	4620      	mov	r0, r4
 80013de:	f00e fa21 	bl	800f824 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <MX_USB_DEVICE_Init+0x30>)
 80013e4:	4620      	mov	r0, r4
 80013e6:	f00e fa31 	bl	800f84c <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80013ea:	4620      	mov	r0, r4
 80013ec:	4906      	ldr	r1, [pc, #24]	@ (8001408 <MX_USB_DEVICE_Init+0x34>)
 80013ee:	f00e f9cb 	bl	800f788 <USBD_CDC_RegisterInterface>
  USBD_Start(&hUsbDeviceFS);
 80013f2:	4620      	mov	r0, r4
}
 80013f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80013f8:	f00e ba3e 	b.w	800f878 <USBD_Start>
 80013fc:	20000b10 	.word	0x20000b10
 8001400:	20000038 	.word	0x20000038
 8001404:	200002c4 	.word	0x200002c4
 8001408:	20000000 	.word	0x20000000

0800140c <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == SD_DETECT_GPIO_PIN)
 800140c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8001410:	d015      	beq.n	800143e <HAL_GPIO_EXTI_Callback+0x32>
  if(GPIO_Pin == USER_BUTTON_PIN)
 8001412:	2801      	cmp	r0, #1
{
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4604      	mov	r4, r0
  if(GPIO_Pin == USER_BUTTON_PIN)
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_EXTI_Callback+0x36>
  if (GPIO_Pin == GPIO_PIN_10)
 800141a:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800141e:	d000      	beq.n	8001422 <HAL_GPIO_EXTI_Callback+0x16>
}
 8001420:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_GetTick() - t_stwin > 4000)
 8001422:	f006 f8f5 	bl	8007610 <HAL_GetTick>
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001428:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 800142c:	1ac0      	subs	r0, r0, r3
 800142e:	f5b0 6f7a 	cmp.w	r0, #4000	@ 0xfa0
 8001432:	d9f5      	bls.n	8001420 <HAL_GPIO_EXTI_Callback+0x14>
}
 8001434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8001438:	2017      	movs	r0, #23
 800143a:	f004 bc71 	b.w	8005d20 <BSP_BC_CmdSend>
      BSP_SD_DetectCallback();
 800143e:	f005 bfd3 	b.w	80073e8 <BSP_SD_DetectCallback>
    if( HAL_GetTick() - t_old > 1000 )
 8001442:	4d09      	ldr	r5, [pc, #36]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001444:	f006 f8e4 	bl	8007610 <HAL_GetTick>
 8001448:	f8d5 3478 	ldr.w	r3, [r5, #1144]	@ 0x478
 800144c:	1ac0      	subs	r0, r0, r3
 800144e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001452:	d9e5      	bls.n	8001420 <HAL_GPIO_EXTI_Callback+0x14>
      osSemaphoreRelease(readDataSem_id);
 8001454:	6828      	ldr	r0, [r5, #0]
      MEMSInterrupt=1;
 8001456:	f885 447c 	strb.w	r4, [r5, #1148]	@ 0x47c
      osSemaphoreRelease(readDataSem_id);
 800145a:	f010 fcfd 	bl	8011e58 <osSemaphoreRelease>
      t_old= HAL_GetTick();
 800145e:	f006 f8d7 	bl	8007610 <HAL_GetTick>
 8001462:	f8c5 0478 	str.w	r0, [r5, #1144]	@ 0x478
}
 8001466:	bd38      	pop	{r3, r4, r5, pc}
 8001468:	20000968 	.word	0x20000968

0800146c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == STBC02_USED_TIM)
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800146e:	6802      	ldr	r2, [r0, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d000      	beq.n	8001476 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001474:	4770      	bx	lr
    BC_CmdMng();
 8001476:	f004 bcd5 	b.w	8005e24 <BC_CmdMng>
 800147a:	bf00      	nop
 800147c:	40001400 	.word	0x40001400

08001480 <SystemClock_Config>:
{
 8001480:	b530      	push	{r4, r5, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001482:	2000      	movs	r0, #0
{
 8001484:	b0c1      	sub	sp, #260	@ 0x104
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001486:	f008 f97b 	bl	8009780 <HAL_PWREx_ControlVoltageScaling>
 800148a:	b100      	cbz	r0, 800148e <SystemClock_Config+0xe>
    while(1);
 800148c:	e7fe      	b.n	800148c <SystemClock_Config+0xc>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800148e:	2021      	movs	r0, #33	@ 0x21
 8001490:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001494:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001498:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800149c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149e:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 30;
 80014a0:	221e      	movs	r2, #30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80014a2:	2505      	movs	r5, #5
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a6:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 30;
 80014aa:	e9cd 3212 	strd	r3, r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ae:	e9cd 5314 	strd	r5, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b2:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f008 fa7a 	bl	80099ac <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b100      	cbz	r0, 80014be <SystemClock_Config+0x3e>
 80014bc:	e7fe      	b.n	80014bc <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014c0:	4629      	mov	r1, r5
 80014c2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ca:	e9cd 2401 	strd	r2, r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ce:	f008 fd83 	bl	8009fd8 <HAL_RCC_ClockConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b100      	cbz	r0, 80014d8 <SystemClock_Config+0x58>
 80014d6:	e7fe      	b.n	80014d6 <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_SDMMC1;
 80014d8:	490f      	ldr	r1, [pc, #60]	@ (8001518 <SystemClock_Config+0x98>)
 80014da:	9118      	str	r1, [sp, #96]	@ 0x60
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80014dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e0:	a818      	add	r0, sp, #96	@ 0x60
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80014e2:	e9cd 3235 	strd	r3, r2, [sp, #212]	@ 0xd4
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014e6:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e8:	f009 f85e 	bl	800a5a8 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4604      	mov	r4, r0
 80014ee:	b100      	cbz	r0, 80014f2 <SystemClock_Config+0x72>
 80014f0:	e7fe      	b.n	80014f0 <SystemClock_Config+0x70>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80014f2:	f008 fe7d 	bl	800a1f0 <HAL_RCC_GetHCLKFreq>
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <SystemClock_Config+0x9c>)
 80014f8:	fba3 3000 	umull	r3, r0, r3, r0
 80014fc:	0980      	lsrs	r0, r0, #6
 80014fe:	f006 fded 	bl	80080dc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001502:	2004      	movs	r0, #4
 8001504:	f006 fe04 	bl	8008110 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001508:	4622      	mov	r2, r4
 800150a:	4621      	mov	r1, r4
 800150c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001510:	f006 fd9a 	bl	8008048 <HAL_NVIC_SetPriority>
}
 8001514:	b041      	add	sp, #260	@ 0x104
 8001516:	bd30      	pop	{r4, r5, pc}
 8001518:	00082080 	.word	0x00082080
 800151c:	10624dd3 	.word	0x10624dd3

08001520 <main>:
{
 8001520:	b500      	push	{lr}
 8001522:	b08d      	sub	sp, #52	@ 0x34
  huart2.Instance = USART2;
 8001524:	4c41      	ldr	r4, [pc, #260]	@ (800162c <main+0x10c>)
  HAL_Init();
 8001526:	f006 f857 	bl	80075d8 <HAL_Init>
  SystemClock_Config();  
 800152a:	f7ff ffa9 	bl	8001480 <SystemClock_Config>
  huart2.Instance = USART2;
 800152e:	4840      	ldr	r0, [pc, #256]	@ (8001630 <main+0x110>)
  huart2.Init.BaudRate = 115200;
 8001530:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001534:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001536:	e9c4 0146 	strd	r0, r1, [r4, #280]	@ 0x118
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153a:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153c:	f504 708c 	add.w	r0, r4, #280	@ 0x118
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001540:	e9c4 3348 	strd	r3, r3, [r4, #288]	@ 0x120
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	e9c4 324a 	strd	r3, r2, [r4, #296]	@ 0x128
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	e9c4 334c 	strd	r3, r3, [r4, #304]	@ 0x130
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800154c:	e9c4 334e 	strd	r3, r3, [r4, #312]	@ 0x138
 8001550:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001554:	f00b fec2 	bl	800d2dc <HAL_UART_Init>
 8001558:	b100      	cbz	r0, 800155c <main+0x3c>
 800155a:	e7fe      	b.n	800155a <main+0x3a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800155c:	4601      	mov	r1, r0
 800155e:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 8001562:	f00c f807 	bl	800d574 <HAL_UARTEx_SetTxFifoThreshold>
 8001566:	b100      	cbz	r0, 800156a <main+0x4a>
 8001568:	e7fe      	b.n	8001568 <main+0x48>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156a:	4601      	mov	r1, r0
 800156c:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 8001570:	f00c f83e 	bl	800d5f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001574:	b100      	cbz	r0, 8001578 <main+0x58>
 8001576:	e7fe      	b.n	8001576 <main+0x56>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001578:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 800157c:	f00b ffdc 	bl	800d538 <HAL_UARTEx_DisableFifoMode>
 8001580:	4605      	mov	r5, r0
 8001582:	2800      	cmp	r0, #0
 8001584:	d14d      	bne.n	8001622 <main+0x102>
    HAL_PWREx_EnableVddIO2();
 8001586:	f008 f975 	bl	8009874 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <main+0x114>)
 800158c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800158e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001592:	659a      	str	r2, [r3, #88]	@ 0x58
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_EnableVddUSB(); 
 800159e:	f008 f961 	bl	8009864 <HAL_PWREx_EnableVddUSB>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80015a2:	2101      	movs	r1, #1
 80015a4:	4628      	mov	r0, r5
 80015a6:	f004 fac9 	bl	8005b3c <BSP_PB_Init>
  BSP_LED_Init(LED1);
 80015aa:	4628      	mov	r0, r5
 80015ac:	f004 fafc 	bl	8005ba8 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 80015b0:	4628      	mov	r0, r5
 80015b2:	f004 fb35 	bl	8005c20 <BSP_LED_Off>
  BSP_PB_PWR_Init();  
 80015b6:	f004 fa6f 	bl	8005a98 <BSP_PB_PWR_Init>
  BSP_Enable_DCDC2();
 80015ba:	f004 fa99 	bl	8005af0 <BSP_Enable_DCDC2>
  BSP_BC_Init();
 80015be:	f004 fd03 	bl	8005fc8 <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 80015c2:	f004 fbd1 	bl	8005d68 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);
 80015c6:	200a      	movs	r0, #10
 80015c8:	f004 fbaa 	bl	8005d20 <BSP_BC_CmdSend>
  t_stwin = HAL_GetTick(); 
 80015cc:	f006 f820 	bl	8007610 <HAL_GetTick>
  if(LoggingInterface == USB_Datalog) /* Configure the USB */
 80015d0:	7c22      	ldrb	r2, [r4, #16]
  t_stwin = HAL_GetTick(); 
 80015d2:	f8c4 0480 	str.w	r0, [r4, #1152]	@ 0x480
  if(LoggingInterface == USB_Datalog) /* Configure the USB */
 80015d6:	bb2a      	cbnz	r2, 8001624 <main+0x104>
    MX_USB_DEVICE_Init();
 80015d8:	f7ff fefc 	bl	80013d4 <MX_USB_DEVICE_Init>
  osThreadDef(THREAD_1, GetData_Thread, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*4);
 80015dc:	f8df c058 	ldr.w	ip, [pc, #88]	@ 8001638 <main+0x118>
 80015e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80015e4:	ad02      	add	r5, sp, #8
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80015ec:	602b      	str	r3, [r5, #0]
  osThreadDef(THREAD_2, WriteData_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*4);
 80015ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80015f2:	f10d 0e1c 	add.w	lr, sp, #28
 80015f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80015fa:	f8dc 3000 	ldr.w	r3, [ip]
 80015fe:	f8ce 3000 	str.w	r3, [lr]
  GetDataThreadId = osThreadCreate(osThread(THREAD_1), NULL);
 8001602:	2100      	movs	r1, #0
 8001604:	a802      	add	r0, sp, #8
 8001606:	f010 fb3f 	bl	8011c88 <osThreadCreate>
  WriteDataThreadId = osThreadCreate(osThread(THREAD_2), NULL);  
 800160a:	2100      	movs	r1, #0
  GetDataThreadId = osThreadCreate(osThread(THREAD_1), NULL);
 800160c:	4603      	mov	r3, r0
  WriteDataThreadId = osThreadCreate(osThread(THREAD_2), NULL);  
 800160e:	a807      	add	r0, sp, #28
  GetDataThreadId = osThreadCreate(osThread(THREAD_1), NULL);
 8001610:	f8c4 3484 	str.w	r3, [r4, #1156]	@ 0x484
  WriteDataThreadId = osThreadCreate(osThread(THREAD_2), NULL);  
 8001614:	f010 fb38 	bl	8011c88 <osThreadCreate>
 8001618:	f8c4 0488 	str.w	r0, [r4, #1160]	@ 0x488
  osKernelStart();
 800161c:	f010 fb2e 	bl	8011c7c <osKernelStart>
  while(1);  
 8001620:	e7fe      	b.n	8001620 <main+0x100>
 8001622:	e7fe      	b.n	8001622 <main+0x102>
    DATALOG_SD_Init();
 8001624:	f7ff fcce 	bl	8000fc4 <DATALOG_SD_Init>
 8001628:	e7d8      	b.n	80015dc <main+0xbc>
 800162a:	bf00      	nop
 800162c:	20000968 	.word	0x20000968
 8001630:	40004400 	.word	0x40004400
 8001634:	40021000 	.word	0x40021000
 8001638:	08017264 	.word	0x08017264

0800163c <dataTimerStart>:
{
 800163c:	b510      	push	{r4, lr}
  exec = 1;
 800163e:	4c08      	ldr	r4, [pc, #32]	@ (8001660 <dataTimerStart+0x24>)
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 8001640:	4808      	ldr	r0, [pc, #32]	@ (8001664 <dataTimerStart+0x28>)
  exec = 1;
 8001642:	4622      	mov	r2, r4
 8001644:	2101      	movs	r1, #1
 8001646:	f842 1f08 	str.w	r1, [r2, #8]!
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 800164a:	f010 fb41 	bl	8011cd0 <osTimerCreate>
 800164e:	60e0      	str	r0, [r4, #12]
  if (sensorTimId)  {
 8001650:	b120      	cbz	r0, 800165c <dataTimerStart+0x20>
}
 8001652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = osTimerStart (sensorTimId, DATA_PERIOD_MS);                // start timer
 8001656:	2114      	movs	r1, #20
 8001658:	f010 bb4e 	b.w	8011cf8 <osTimerStart>
}
 800165c:	bd10      	pop	{r4, pc}
 800165e:	bf00      	nop
 8001660:	20000968 	.word	0x20000968
 8001664:	08017260 	.word	0x08017260

08001668 <dataTimerStop>:
{
 8001668:	b510      	push	{r4, lr}
  osTimerStop(sensorTimId);
 800166a:	4c04      	ldr	r4, [pc, #16]	@ (800167c <dataTimerStop+0x14>)
 800166c:	68e0      	ldr	r0, [r4, #12]
 800166e:	f010 fb71 	bl	8011d54 <osTimerStop>
  osTimerDelete(sensorTimId);
 8001672:	68e0      	ldr	r0, [r4, #12]
}
 8001674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osTimerDelete(sensorTimId);
 8001678:	f010 bb96 	b.w	8011da8 <osTimerDelete>
 800167c:	20000968 	.word	0x20000968

08001680 <GetData_Thread>:
{
 8001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sensorPool_id = osPoolCreate(osPool(sensorPool));     
 8001682:	482e      	ldr	r0, [pc, #184]	@ (800173c <GetData_Thread+0xbc>)
 8001684:	4c2e      	ldr	r4, [pc, #184]	@ (8001740 <GetData_Thread+0xc0>)
 8001686:	f010 fc0d 	bl	8011ea4 <osPoolCreate>
  dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 800168a:	2100      	movs	r1, #0
  sensorPool_id = osPoolCreate(osPool(sensorPool));     
 800168c:	4603      	mov	r3, r0
  dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 800168e:	482d      	ldr	r0, [pc, #180]	@ (8001744 <GetData_Thread+0xc4>)
  sensorPool_id = osPoolCreate(osPool(sensorPool));     
 8001690:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001694:	f010 fc88 	bl	8011fa8 <osMessageCreate>
  readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 8001698:	2101      	movs	r1, #1
  dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 800169a:	4603      	mov	r3, r0
  readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 800169c:	482a      	ldr	r0, [pc, #168]	@ (8001748 <GetData_Thread+0xc8>)
  dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 800169e:	6063      	str	r3, [r4, #4]
  readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 80016a0:	f010 fb9a 	bl	8011dd8 <osSemaphoreCreate>
  osSemaphoreWait(readDataSem_id, osWaitForever);
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 80016a8:	6020      	str	r0, [r4, #0]
  osSemaphoreWait(readDataSem_id, osWaitForever);
 80016aa:	f010 fba9 	bl	8011e00 <osSemaphoreWait>
  doubleTapSem_id = osSemaphoreCreate(osSemaphore(doubleTapSem), 1);
 80016ae:	2101      	movs	r1, #1
 80016b0:	4826      	ldr	r0, [pc, #152]	@ (800174c <GetData_Thread+0xcc>)
 80016b2:	f010 fb91 	bl	8011dd8 <osSemaphoreCreate>
  osSemaphoreWait(doubleTapSem_id, osWaitForever);
 80016b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  doubleTapSem_id = osSemaphoreCreate(osSemaphore(doubleTapSem), 1);
 80016ba:	f8c4 048c 	str.w	r0, [r4, #1164]	@ 0x48c
  osSemaphoreWait(doubleTapSem_id, osWaitForever);
 80016be:	f010 fb9f 	bl	8011e00 <osSemaphoreWait>
  MX_X_CUBE_MEMS1_Init();
 80016c2:	f7ff fd61 	bl	8001188 <MX_X_CUBE_MEMS1_Init>
  if(LoggingInterface == USB_Datalog)
 80016c6:	7c23      	ldrb	r3, [r4, #16]
 80016c8:	b3a3      	cbz	r3, 8001734 <GetData_Thread+0xb4>
 80016ca:	4f21      	ldr	r7, [pc, #132]	@ (8001750 <GetData_Thread+0xd0>)
      MEMSInterrupt = 0;
 80016cc:	2600      	movs	r6, #0
    osSemaphoreWait(readDataSem_id, osWaitForever);
 80016ce:	6820      	ldr	r0, [r4, #0]
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016d4:	f010 fb94 	bl	8011e00 <osSemaphoreWait>
    if(MEMSInterrupt && LoggingInterface == SDCARD_Datalog)
 80016d8:	f894 347c 	ldrb.w	r3, [r4, #1148]	@ 0x47c
 80016dc:	b113      	cbz	r3, 80016e4 <GetData_Thread+0x64>
 80016de:	7c23      	ldrb	r3, [r4, #16]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d013      	beq.n	800170c <GetData_Thread+0x8c>
    mptr = osPoolAlloc(sensorPool_id);
 80016e4:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 80016e8:	f010 fc0c 	bl	8011f04 <osPoolAlloc>
    if(mptr != NULL)
 80016ec:	4605      	mov	r5, r0
 80016ee:	b158      	cbz	r0, 8001708 <GetData_Thread+0x88>
      if(getSensorsData(mptr) == BSP_ERROR_NONE)
 80016f0:	f7ff fcf8 	bl	80010e4 <getSensorsData>
        if(osMessagePut(dataQueue_id, (uint32_t)mptr, osWaitForever) != osOK)
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016f8:	4629      	mov	r1, r5
      if(getSensorsData(mptr) == BSP_ERROR_NONE)
 80016fa:	b930      	cbnz	r0, 800170a <GetData_Thread+0x8a>
        if(osMessagePut(dataQueue_id, (uint32_t)mptr, osWaitForever) != osOK)
 80016fc:	6860      	ldr	r0, [r4, #4]
 80016fe:	f010 fc59 	bl	8011fb4 <osMessagePut>
 8001702:	2800      	cmp	r0, #0
 8001704:	d0e3      	beq.n	80016ce <GetData_Thread+0x4e>
 8001706:	e7fe      	b.n	8001706 <GetData_Thread+0x86>
 8001708:	e7fe      	b.n	8001708 <GetData_Thread+0x88>
 800170a:	e7fe      	b.n	800170a <GetData_Thread+0x8a>
      MEMSInterrupt = 0;
 800170c:	f884 647c 	strb.w	r6, [r4, #1148]	@ 0x47c
        if(SD_Log_Enabled) 
 8001710:	783b      	ldrb	r3, [r7, #0]
          osMessagePut(dataQueue_id, MSG_ENABLE_DISABLE, osWaitForever);
 8001712:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001716:	2107      	movs	r1, #7
        if(SD_Log_Enabled) 
 8001718:	b143      	cbz	r3, 800172c <GetData_Thread+0xac>
          dataTimerStop();
 800171a:	f7ff ffa5 	bl	8001668 <dataTimerStop>
          osMessagePut(dataQueue_id, MSG_ENABLE_DISABLE, osWaitForever);
 800171e:	6860      	ldr	r0, [r4, #4]
 8001720:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001724:	2107      	movs	r1, #7
 8001726:	f010 fc45 	bl	8011fb4 <osMessagePut>
 800172a:	e7d0      	b.n	80016ce <GetData_Thread+0x4e>
          osMessagePut(dataQueue_id, MSG_ENABLE_DISABLE, osWaitForever);
 800172c:	6860      	ldr	r0, [r4, #4]
 800172e:	f010 fc41 	bl	8011fb4 <osMessagePut>
 8001732:	e7cc      	b.n	80016ce <GetData_Thread+0x4e>
    dataTimerStart();
 8001734:	f7ff ff82 	bl	800163c <dataTimerStart>
 8001738:	e7c7      	b.n	80016ca <GetData_Thread+0x4a>
 800173a:	bf00      	nop
 800173c:	0801728c 	.word	0x0801728c
 8001740:	20000968 	.word	0x20000968
 8001744:	08017298 	.word	0x08017298
 8001748:	080172a0 	.word	0x080172a0
 800174c:	080172a4 	.word	0x080172a4
 8001750:	20000958 	.word	0x20000958

08001754 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001756:	e7fe      	b.n	8001756 <Error_Handler+0x2>

08001758 <HAL_UART_MspInit>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001758:	b5d0      	push	{r4, r6, r7, lr}
 800175a:	4604      	mov	r4, r0
 800175c:	b0b2      	sub	sp, #200	@ 0xc8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001760:	229c      	movs	r2, #156	@ 0x9c
 8001762:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001768:	e9cd 1108 	strd	r1, r1, [sp, #32]
 800176c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800176e:	f013 fca0 	bl	80150b2 <memset>
  if(huart->Instance==USART2)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	4a43      	ldr	r2, [pc, #268]	@ (8001884 <HAL_UART_MspInit+0x12c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d004      	beq.n	8001784 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800177a:	4a43      	ldr	r2, [pc, #268]	@ (8001888 <HAL_UART_MspInit+0x130>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d033      	beq.n	80017e8 <HAL_UART_MspInit+0x90>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001780:	b032      	add	sp, #200	@ 0xc8
 8001782:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001784:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001786:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001788:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178a:	f008 ff0d 	bl	800a5a8 <HAL_RCCEx_PeriphCLKConfig>
 800178e:	2800      	cmp	r0, #0
 8001790:	d172      	bne.n	8001878 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001792:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001794:	483e      	ldr	r0, [pc, #248]	@ (8001890 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001796:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001798:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800179c:	659a      	str	r2, [r3, #88]	@ 0x58
 800179e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017a0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80017a4:	9201      	str	r2, [sp, #4]
 80017a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017aa:	f042 0208 	orr.w	r2, r2, #8
 80017ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 80017b2:	2670      	movs	r6, #112	@ 0x70
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 80017b8:	2702      	movs	r7, #2
 80017ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c2:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 80017c4:	2600      	movs	r6, #0
 80017c6:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c8:	930a      	str	r3, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 80017cc:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d0:	f006 fcaa 	bl	8008128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	4611      	mov	r1, r2
 80017d8:	2026      	movs	r0, #38	@ 0x26
 80017da:	f006 fc35 	bl	8008048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017de:	2026      	movs	r0, #38	@ 0x26
 80017e0:	f006 fc6e 	bl	80080c0 <HAL_NVIC_EnableIRQ>
}
 80017e4:	b032      	add	sp, #200	@ 0xc8
 80017e6:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017e8:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ea:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017ec:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ee:	f008 fedb 	bl	800a5a8 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d143      	bne.n	800187e <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f6:	4b25      	ldr	r3, [pc, #148]	@ (800188c <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f8:	4825      	ldr	r0, [pc, #148]	@ (8001890 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80017fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017fc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001800:	659a      	str	r2, [r3, #88]	@ 0x58
 8001802:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001804:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001808:	9203      	str	r2, [sp, #12]
 800180a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800180e:	f042 0208 	orr.w	r2, r2, #8
 8001812:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001814:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001816:	f002 0208 	and.w	r2, r2, #8
 800181a:	9204      	str	r2, [sp, #16]
 800181c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001820:	f042 0202 	orr.w	r2, r2, #2
 8001824:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800182e:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001830:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001832:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001836:	2600      	movs	r6, #0
 8001838:	2703      	movs	r7, #3
 800183a:	2302      	movs	r3, #2
 800183c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001840:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001846:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001848:	f006 fc6e 	bl	8008128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 800184c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001850:	f242 0202 	movw	r2, #8194	@ 0x2002
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	480f      	ldr	r0, [pc, #60]	@ (8001894 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001856:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001858:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800185c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f006 fc62 	bl	8008128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	4611      	mov	r1, r2
 8001868:	2027      	movs	r0, #39	@ 0x27
 800186a:	f006 fbed 	bl	8008048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800186e:	2027      	movs	r0, #39	@ 0x27
 8001870:	f006 fc26 	bl	80080c0 <HAL_NVIC_EnableIRQ>
}
 8001874:	b032      	add	sp, #200	@ 0xc8
 8001876:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8001878:	f7ff ff6c 	bl	8001754 <Error_Handler>
 800187c:	e789      	b.n	8001792 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800187e:	f7ff ff69 	bl	8001754 <Error_Handler>
 8001882:	e7b8      	b.n	80017f6 <HAL_UART_MspInit+0x9e>
 8001884:	40004400 	.word	0x40004400
 8001888:	40004800 	.word	0x40004800
 800188c:	40021000 	.word	0x40021000
 8001890:	48000c00 	.word	0x48000c00
 8001894:	48000400 	.word	0x48000400

08001898 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800189c:	e7fe      	b.n	800189c <HardFault_Handler>
 800189e:	bf00      	nop

080018a0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler>
 80018a2:	bf00      	nop

080018a4 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <BusFault_Handler>
 80018a6:	bf00      	nop

080018a8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler>
 80018aa:	bf00      	nop

080018ac <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop

080018b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80018b0:	b508      	push	{r3, lr}
  osSystickHandler();
 80018b2:	f010 fbe9 	bl	8012088 <osSystickHandler>
  HAL_IncTick();
}
 80018b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 80018ba:	f005 be9d 	b.w	80075f8 <HAL_IncTick>
 80018be:	bf00      	nop

080018c0 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018c0:	4801      	ldr	r0, [pc, #4]	@ (80018c8 <OTG_FS_IRQHandler+0x8>)
 80018c2:	f007 bab1 	b.w	8008e28 <HAL_PCD_IRQHandler>
 80018c6:	bf00      	nop
 80018c8:	20002148 	.word	0x20002148

080018cc <SDMMC1_IRQHandler>:
}

void SDMMC1_IRQHandler(void)
{
  HAL_SD_IRQHandler(&hsd1);
 80018cc:	4801      	ldr	r0, [pc, #4]	@ (80018d4 <SDMMC1_IRQHandler+0x8>)
 80018ce:	f009 bd63 	b.w	800b398 <HAL_SD_IRQHandler>
 80018d2:	bf00      	nop
 80018d4:	200010c8 	.word	0x200010c8

080018d8 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);		
 80018d8:	2020      	movs	r0, #32
 80018da:	f006 be0d 	b.w	80084f8 <HAL_GPIO_EXTI_IRQHandler>
 80018de:	bf00      	nop

080018e0 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f006 be09 	b.w	80084f8 <HAL_GPIO_EXTI_IRQHandler>
 80018e6:	bf00      	nop

080018e8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80018e8:	2000      	movs	r0, #0
 80018ea:	4770      	bx	lr

080018ec <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80018ec:	2000      	movs	r0, #0
 80018ee:	4770      	bx	lr

080018f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80018f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80018f2:	4c05      	ldr	r4, [pc, #20]	@ (8001908 <CDC_Receive_FS+0x18>)
{
 80018f4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80018f6:	4620      	mov	r0, r4
 80018f8:	f00d ff5a 	bl	800f7b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80018fc:	4620      	mov	r0, r4
 80018fe:	f00d ff79 	bl	800f7f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8001902:	2000      	movs	r0, #0
 8001904:	bd10      	pop	{r4, pc}
 8001906:	bf00      	nop
 8001908:	20000b10 	.word	0x20000b10

0800190c <CDC_Init_FS>:
{
 800190c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800190e:	4d07      	ldr	r5, [pc, #28]	@ (800192c <CDC_Init_FS+0x20>)
 8001910:	4c07      	ldr	r4, [pc, #28]	@ (8001930 <CDC_Init_FS+0x24>)
 8001912:	2200      	movs	r2, #0
 8001914:	4629      	mov	r1, r5
 8001916:	4620      	mov	r0, r4
 8001918:	f00d ff3e 	bl	800f798 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800191c:	f505 6100 	add.w	r1, r5, #2048	@ 0x800
 8001920:	4620      	mov	r0, r4
 8001922:	f00d ff45 	bl	800f7b0 <USBD_CDC_SetRxBuffer>
}
 8001926:	2000      	movs	r0, #0
 8001928:	bd38      	pop	{r3, r4, r5, pc}
 800192a:	bf00      	nop
 800192c:	20001148 	.word	0x20001148
 8001930:	20000b10 	.word	0x20000b10

08001934 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8001934:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001936:	4c09      	ldr	r4, [pc, #36]	@ (800195c <CDC_Transmit_FS+0x28>)
 8001938:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 800193c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001940:	b10b      	cbz	r3, 8001946 <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8001942:	2001      	movs	r0, #1
 8001944:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8001946:	460a      	mov	r2, r1
 8001948:	4601      	mov	r1, r0
 800194a:	4620      	mov	r0, r4
 800194c:	f00d ff24 	bl	800f798 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001950:	4620      	mov	r0, r4
}
 8001952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001956:	f00d bf35 	b.w	800f7c4 <USBD_CDC_TransmitPacket>
 800195a:	bf00      	nop
 800195c:	20000b10 	.word	0x20000b10

08001960 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8001960:	6803      	ldr	r3, [r0, #0]
 8001962:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001966:	d000      	beq.n	800196a <HAL_PCD_MspInit+0xa>
 8001968:	4770      	bx	lr
{
 800196a:	b510      	push	{r4, lr}
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800196c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
{
 8001970:	b088      	sub	sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001972:	4c1b      	ldr	r4, [pc, #108]	@ (80019e0 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001974:	2102      	movs	r1, #2
 8001976:	2200      	movs	r2, #0
 8001978:	2303      	movs	r3, #3
 800197a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800197e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001984:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800198a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f006 fbcc 	bl	8008128 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001990:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001992:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001996:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001998:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800199a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	9b00      	ldr	r3, [sp, #0]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	d418      	bmi.n	80019da <HAL_PCD_MspInit+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	65a3      	str	r3, [r4, #88]	@ 0x58
 80019b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	9b01      	ldr	r3, [sp, #4]
      HAL_PWREx_EnableVddUSB();
 80019ba:	f007 ff53 	bl	8009864 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	65a3      	str	r3, [r4, #88]	@ 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2105      	movs	r1, #5
 80019ca:	2043      	movs	r0, #67	@ 0x43
 80019cc:	f006 fb3c 	bl	8008048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80019d0:	2043      	movs	r0, #67	@ 0x43
 80019d2:	f006 fb75 	bl	80080c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80019d6:	b008      	add	sp, #32
 80019d8:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 80019da:	f007 ff43 	bl	8009864 <HAL_PWREx_EnableVddUSB>
 80019de:	e7f2      	b.n	80019c6 <HAL_PCD_MspInit+0x66>
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80019e4:	f500 7171 	add.w	r1, r0, #964	@ 0x3c4
 80019e8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 80019ec:	f00d bf56 	b.w	800f89c <USBD_LL_SetupStage>

080019f0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80019f0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80019f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80019f8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 80019fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8001a00:	f00d bf7c 	b.w	800f8fc <USBD_LL_DataOutStage>

08001a04 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001a04:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001a08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001a0c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001a10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a12:	f00d bfa7 	b.w	800f964 <USBD_LL_DataInStage>
 8001a16:	bf00      	nop

08001a18 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001a18:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001a1c:	f00e b840 	b.w	800faa0 <USBD_LL_SOF>

08001a20 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8001a20:	b510      	push	{r4, lr}
 8001a22:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001a24:	2101      	movs	r1, #1
 8001a26:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001a2a:	f00e f81d 	bl	800fa68 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001a2e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 8001a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001a36:	f00d bfeb 	b.w	800fa10 <USBD_LL_Reset>
 8001a3a:	bf00      	nop

08001a3c <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001a3c:	6802      	ldr	r2, [r0, #0]
 8001a3e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
{
 8001a42:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001a44:	f043 0301 	orr.w	r3, r3, #1
{
 8001a48:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001a4a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001a4e:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001a52:	f00e f80d 	bl	800fa70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001a56:	6a23      	ldr	r3, [r4, #32]
 8001a58:	b123      	cbz	r3, 8001a64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001a5a:	4a03      	ldr	r2, [pc, #12]	@ (8001a68 <HAL_PCD_SuspendCallback+0x2c>)
 8001a5c:	6913      	ldr	r3, [r2, #16]
 8001a5e:	f043 0306 	orr.w	r3, r3, #6
 8001a62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001a64:	bd10      	pop	{r4, pc}
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001a6c:	6802      	ldr	r2, [r0, #0]
 8001a6e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8001a72:	f023 0301 	bic.w	r3, r3, #1
{
 8001a76:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001a78:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8001a7c:	6a03      	ldr	r3, [r0, #32]
{
 8001a7e:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8001a80:	b92b      	cbnz	r3, 8001a8e <HAL_PCD_ResumeCallback+0x22>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001a82:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 8001a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001a8a:	f00d bffd 	b.w	800fa88 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001a8e:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <HAL_PCD_ResumeCallback+0x3c>)
 8001a90:	6913      	ldr	r3, [r2, #16]
 8001a92:	f023 0306 	bic.w	r3, r3, #6
 8001a96:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8001a98:	f7ff fcf2 	bl	8001480 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001a9c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 8001aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001aa4:	f00d bff0 	b.w	800fa88 <USBD_LL_Resume>
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001aac:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001ab0:	f00e b81a 	b.w	800fae8 <USBD_LL_IsoOUTIncomplete>

08001ab4 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001ab4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001ab8:	f00e b804 	b.w	800fac4 <USBD_LL_IsoINIncomplete>

08001abc <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001abc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001ac0:	f00e b824 	b.w	800fb0c <USBD_LL_DevConnected>

08001ac4 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001ac4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001ac8:	f00e b822 	b.w	800fb10 <USBD_LL_DevDisconnected>

08001acc <USBD_LL_Init>:
  if (pdev->id == DEVICE_FS) {
 8001acc:	7803      	ldrb	r3, [r0, #0]
 8001ace:	b10b      	cbz	r3, 8001ad4 <USBD_LL_Init+0x8>
}
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	4770      	bx	lr
{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 8001ad6:	4c15      	ldr	r4, [pc, #84]	@ (8001b2c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ad8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001adc:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8001ade:	f8c4 0404 	str.w	r0, [r4, #1028]	@ 0x404
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ae2:	e9c4 1200 	strd	r1, r2, [r4]
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 8001ae6:	2601      	movs	r6, #1
  pdev->pData = &hpcd_USB_OTG_FS;
 8001ae8:	f8c0 42c4 	str.w	r4, [r0, #708]	@ 0x2c4
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 8001aec:	2202      	movs	r2, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001aee:	4620      	mov	r0, r4
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 8001af0:	e9c4 3205 	strd	r3, r2, [r4, #20]
 8001af4:	e9c4 6307 	strd	r6, r3, [r4, #28]
 8001af8:	e9c4 3609 	strd	r3, r6, [r4, #36]	@ 0x24
 8001afc:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b00:	f007 f8e6 	bl	8008cd0 <HAL_PCD_Init>
 8001b04:	4605      	mov	r5, r0
 8001b06:	b100      	cbz	r0, 8001b0a <USBD_LL_Init+0x3e>
 8001b08:	e7fe      	b.n	8001b08 <USBD_LL_Init+0x3c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8001b0a:	2180      	movs	r1, #128	@ 0x80
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f007 fe0d 	bl	800972c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001b12:	4629      	mov	r1, r5
 8001b14:	2240      	movs	r2, #64	@ 0x40
 8001b16:	4620      	mov	r0, r4
 8001b18:	f007 fd86 	bl	8009628 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001b1c:	2280      	movs	r2, #128	@ 0x80
 8001b1e:	4631      	mov	r1, r6
 8001b20:	4620      	mov	r0, r4
 8001b22:	f007 fd81 	bl	8009628 <HAL_PCDEx_SetTxFiFo>
}
 8001b26:	2000      	movs	r0, #0
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20002148 	.word	0x20002148

08001b30 <USBD_LL_Start>:
{
 8001b30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8001b32:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001b36:	f007 f95b 	bl	8008df0 <HAL_PCD_Start>
  switch (hal_status) {
 8001b3a:	b118      	cbz	r0, 8001b44 <USBD_LL_Start+0x14>
 8001b3c:	2802      	cmp	r0, #2
 8001b3e:	bf0c      	ite	eq
 8001b40:	2001      	moveq	r0, #1
 8001b42:	2003      	movne	r0, #3
}
 8001b44:	bd08      	pop	{r3, pc}
 8001b46:	bf00      	nop

08001b48 <USBD_LL_OpenEP>:
{
 8001b48:	4694      	mov	ip, r2
 8001b4a:	b508      	push	{r3, lr}
 8001b4c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001b4e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001b52:	4663      	mov	r3, ip
 8001b54:	f007 fc2e 	bl	80093b4 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8001b58:	b118      	cbz	r0, 8001b62 <USBD_LL_OpenEP+0x1a>
 8001b5a:	2802      	cmp	r0, #2
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2001      	moveq	r0, #1
 8001b60:	2003      	movne	r0, #3
}
 8001b62:	bd08      	pop	{r3, pc}

08001b64 <USBD_LL_CloseEP>:
{
 8001b64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001b66:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001b6a:	f007 fc61 	bl	8009430 <HAL_PCD_EP_Close>
  switch (hal_status) {
 8001b6e:	b118      	cbz	r0, 8001b78 <USBD_LL_CloseEP+0x14>
 8001b70:	2802      	cmp	r0, #2
 8001b72:	bf0c      	ite	eq
 8001b74:	2001      	moveq	r0, #1
 8001b76:	2003      	movne	r0, #3
}
 8001b78:	bd08      	pop	{r3, pc}
 8001b7a:	bf00      	nop

08001b7c <USBD_LL_StallEP>:
{
 8001b7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001b7e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001b82:	f007 fcd7 	bl	8009534 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8001b86:	b118      	cbz	r0, 8001b90 <USBD_LL_StallEP+0x14>
 8001b88:	2802      	cmp	r0, #2
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2001      	moveq	r0, #1
 8001b8e:	2003      	movne	r0, #3
}
 8001b90:	bd08      	pop	{r3, pc}
 8001b92:	bf00      	nop

08001b94 <USBD_LL_ClearStallEP>:
{
 8001b94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8001b96:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001b9a:	f007 fd0d 	bl	80095b8 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8001b9e:	b118      	cbz	r0, 8001ba8 <USBD_LL_ClearStallEP+0x14>
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2001      	moveq	r0, #1
 8001ba6:	2003      	movne	r0, #3
}
 8001ba8:	bd08      	pop	{r3, pc}
 8001baa:	bf00      	nop

08001bac <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8001bac:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001bae:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8001bb2:	d406      	bmi.n	8001bc2 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001bb4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001bb8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001bbc:	f893 01fe 	ldrb.w	r0, [r3, #510]	@ 0x1fe
}
 8001bc0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001bc2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8001bc6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001bca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001bce:	f893 003e 	ldrb.w	r0, [r3, #62]	@ 0x3e
 8001bd2:	4770      	bx	lr

08001bd4 <USBD_LL_SetUSBAddress>:
{
 8001bd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001bd6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001bda:	f007 fbd7 	bl	800938c <HAL_PCD_SetAddress>
  switch (hal_status) {
 8001bde:	b118      	cbz	r0, 8001be8 <USBD_LL_SetUSBAddress+0x14>
 8001be0:	2802      	cmp	r0, #2
 8001be2:	bf0c      	ite	eq
 8001be4:	2001      	moveq	r0, #1
 8001be6:	2003      	movne	r0, #3
}
 8001be8:	bd08      	pop	{r3, pc}
 8001bea:	bf00      	nop

08001bec <USBD_LL_Transmit>:
{
 8001bec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001bee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001bf2:	f007 fc7d 	bl	80094f0 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 8001bf6:	b118      	cbz	r0, 8001c00 <USBD_LL_Transmit+0x14>
 8001bf8:	2802      	cmp	r0, #2
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2001      	moveq	r0, #1
 8001bfe:	2003      	movne	r0, #3
}
 8001c00:	bd08      	pop	{r3, pc}
 8001c02:	bf00      	nop

08001c04 <USBD_LL_PrepareReceive>:
{
 8001c04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001c06:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001c0a:	f007 fc45 	bl	8009498 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8001c0e:	b118      	cbz	r0, 8001c18 <USBD_LL_PrepareReceive+0x14>
 8001c10:	2802      	cmp	r0, #2
 8001c12:	bf0c      	ite	eq
 8001c14:	2001      	moveq	r0, #1
 8001c16:	2003      	movne	r0, #3
}
 8001c18:	bd08      	pop	{r3, pc}
 8001c1a:	bf00      	nop

08001c1c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001c1c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001c20:	f007 bc5c 	b.w	80094dc <HAL_PCD_EP_GetRxCount>

08001c24 <HAL_PCDEx_LPM_Callback>:
{
 8001c24:	b510      	push	{r4, lr}
 8001c26:	4604      	mov	r4, r0
  switch (msg)
 8001c28:	b1a1      	cbz	r1, 8001c54 <HAL_PCDEx_LPM_Callback+0x30>
 8001c2a:	2901      	cmp	r1, #1
 8001c2c:	d111      	bne.n	8001c52 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001c2e:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8001c30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001c34:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8001c40:	f00d ff16 	bl	800fa70 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8001c44:	6a23      	ldr	r3, [r4, #32]
 8001c46:	b123      	cbz	r3, 8001c52 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001c48:	4a0e      	ldr	r2, [pc, #56]	@ (8001c84 <HAL_PCDEx_LPM_Callback+0x60>)
 8001c4a:	6913      	ldr	r3, [r2, #16]
 8001c4c:	f043 0306 	orr.w	r3, r3, #6
 8001c50:	6113      	str	r3, [r2, #16]
}
 8001c52:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8001c54:	6a03      	ldr	r3, [r0, #32]
 8001c56:	b963      	cbnz	r3, 8001c72 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001c58:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8001c5a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001c5e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8001c62:	f023 0301 	bic.w	r3, r3, #1
}
 8001c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001c6a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Resume(hpcd->pData);
 8001c6e:	f00d bf0b 	b.w	800fa88 <USBD_LL_Resume>
      SystemClock_Config();
 8001c72:	f7ff fc05 	bl	8001480 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001c76:	4a03      	ldr	r2, [pc, #12]	@ (8001c84 <HAL_PCDEx_LPM_Callback+0x60>)
 8001c78:	6913      	ldr	r3, [r2, #16]
 8001c7a:	f023 0306 	bic.w	r3, r3, #6
 8001c7e:	6113      	str	r3, [r2, #16]
 8001c80:	e7ea      	b.n	8001c58 <HAL_PCDEx_LPM_Callback+0x34>
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <USBD_static_malloc>:
}
 8001c88:	4800      	ldr	r0, [pc, #0]	@ (8001c8c <USBD_static_malloc+0x4>)
 8001c8a:	4770      	bx	lr
 8001c8c:	20002550 	.word	0x20002550

08001c90 <USBD_static_free>:
}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop

08001c94 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8001c94:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8001c96:	4801      	ldr	r0, [pc, #4]	@ (8001c9c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8001c98:	800b      	strh	r3, [r1, #0]
}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000014 	.word	0x20000014

08001ca0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8001ca0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8001ca2:	4801      	ldr	r0, [pc, #4]	@ (8001ca8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8001ca4:	800b      	strh	r3, [r1, #0]
}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000028 	.word	0x20000028

08001cac <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8001cac:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8001cae:	4801      	ldr	r0, [pc, #4]	@ (8001cb4 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8001cb0:	800b      	strh	r3, [r1, #0]
}
 8001cb2:	4770      	bx	lr
 8001cb4:	2000002c 	.word	0x2000002c

08001cb8 <USBD_FS_ManufacturerStrDescriptor>:
{
 8001cb8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001cba:	4c04      	ldr	r4, [pc, #16]	@ (8001ccc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8001cbc:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 8001cbe:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	f00e f9c9 	bl	8010058 <USBD_GetString>
}
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	bd10      	pop	{r4, pc}
 8001cca:	bf00      	nop
 8001ccc:	20002770 	.word	0x20002770
 8001cd0:	08017594 	.word	0x08017594

08001cd4 <USBD_FS_ProductStrDescriptor>:
{
 8001cd4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001cd6:	4c04      	ldr	r4, [pc, #16]	@ (8001ce8 <USBD_FS_ProductStrDescriptor+0x14>)
 8001cd8:	4804      	ldr	r0, [pc, #16]	@ (8001cec <USBD_FS_ProductStrDescriptor+0x18>)
{
 8001cda:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001cdc:	4621      	mov	r1, r4
 8001cde:	f00e f9bb 	bl	8010058 <USBD_GetString>
}
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	bd10      	pop	{r4, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20002770 	.word	0x20002770
 8001cec:	080175a8 	.word	0x080175a8

08001cf0 <USBD_FS_SerialStrDescriptor>:
{
 8001cf0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8001cf2:	4c04      	ldr	r4, [pc, #16]	@ (8001d04 <USBD_FS_SerialStrDescriptor+0x14>)
 8001cf4:	4804      	ldr	r0, [pc, #16]	@ (8001d08 <USBD_FS_SerialStrDescriptor+0x18>)
{
 8001cf6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	f00e f9ad 	bl	8010058 <USBD_GetString>
}
 8001cfe:	4620      	mov	r0, r4
 8001d00:	bd10      	pop	{r4, pc}
 8001d02:	bf00      	nop
 8001d04:	20002770 	.word	0x20002770
 8001d08:	080175c0 	.word	0x080175c0

08001d0c <USBD_FS_ConfigStrDescriptor>:
{
 8001d0c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001d0e:	4c04      	ldr	r4, [pc, #16]	@ (8001d20 <USBD_FS_ConfigStrDescriptor+0x14>)
 8001d10:	4804      	ldr	r0, [pc, #16]	@ (8001d24 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8001d12:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001d14:	4621      	mov	r1, r4
 8001d16:	f00e f99f 	bl	8010058 <USBD_GetString>
}
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	bd10      	pop	{r4, pc}
 8001d1e:	bf00      	nop
 8001d20:	20002770 	.word	0x20002770
 8001d24:	080175d0 	.word	0x080175d0

08001d28 <USBD_FS_InterfaceStrDescriptor>:
{
 8001d28:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001d2a:	4c04      	ldr	r4, [pc, #16]	@ (8001d3c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8001d2c:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8001d2e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001d30:	4621      	mov	r1, r4
 8001d32:	f00e f991 	bl	8010058 <USBD_GetString>
}
 8001d36:	4620      	mov	r0, r4
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20002770 	.word	0x20002770
 8001d40:	080175dc 	.word	0x080175dc

08001d44 <HTS221_GetCapabilities>:

  Capabilities->Humidity    = 1;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 12.5f;
 8001d44:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <HTS221_GetCapabilities+0x14>)
 8001d46:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
  Capabilities->PressMaxOdr = 0.0f;
 8001d48:	2200      	movs	r2, #0
  Capabilities->Temperature = 1;
 8001d4a:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
 8001d4e:	6008      	str	r0, [r1, #0]
  Capabilities->TempMaxOdr  = 12.5f;
 8001d50:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001d52:	60ca      	str	r2, [r1, #12]
  return HTS221_OK;
}
 8001d54:	2000      	movs	r0, #0
 8001d56:	4770      	bx	lr
 8001d58:	41480000 	.word	0x41480000

08001d5c <HTS221_HUM_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001d5c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d012      	beq.n	8001d8a <HTS221_HUM_Enable+0x2e>
{
 8001d64:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001d66:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001d6a:	4604      	mov	r4, r0
 8001d6c:	b123      	cbz	r3, 8001d78 <HTS221_HUM_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return HTS221_OK;
 8001d74:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001d76:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	301c      	adds	r0, #28
 8001d7c:	f000 fa8e 	bl	800229c <hts221_power_on_set>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d0f4      	beq.n	8001d6e <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001d88:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001d8a:	2000      	movs	r0, #0
}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop

08001d90 <HTS221_HUM_Disable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001d90:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001d94:	b18b      	cbz	r3, 8001dba <HTS221_HUM_Disable+0x2a>
{
 8001d96:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001d98:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	b121      	cbz	r1, 8001daa <HTS221_HUM_Disable+0x1a>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return HTS221_OK;
 8001da6:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001da8:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001daa:	301c      	adds	r0, #28
 8001dac:	f000 fa76 	bl	800229c <hts221_power_on_set>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d0f5      	beq.n	8001da0 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001db8:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001dba:	2000      	movs	r0, #0
}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop

08001dc0 <HTS221_TEMP_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001dc0:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d012      	beq.n	8001dee <HTS221_TEMP_Enable+0x2e>
{
 8001dc8:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001dca:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001dce:	4604      	mov	r4, r0
 8001dd0:	b123      	cbz	r3, 8001ddc <HTS221_TEMP_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return HTS221_OK;
 8001dd8:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001dda:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	301c      	adds	r0, #28
 8001de0:	f000 fa5c 	bl	800229c <hts221_power_on_set>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d0f4      	beq.n	8001dd2 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001dec:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001dee:	2000      	movs	r0, #0
}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop

08001df4 <HTS221_TEMP_Disable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001df4:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001df8:	b18b      	cbz	r3, 8001e1e <HTS221_TEMP_Disable+0x2a>
{
 8001dfa:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001dfc:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
 8001e00:	4604      	mov	r4, r0
 8001e02:	b121      	cbz	r1, 8001e0e <HTS221_TEMP_Disable+0x1a>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return HTS221_OK;
 8001e0a:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001e0c:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001e0e:	301c      	adds	r0, #28
 8001e10:	f000 fa44 	bl	800229c <hts221_power_on_set>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d0f5      	beq.n	8001e04 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001e1c:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001e1e:	2000      	movs	r0, #0
}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop

08001e24 <HTS221_Init>:
{
 8001e24:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8001e26:	f890 1028 	ldrb.w	r1, [r0, #40]	@ 0x28
{
 8001e2a:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8001e2c:	b121      	cbz	r1, 8001e38 <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return HTS221_OK;
 8001e34:	2000      	movs	r0, #0
}
 8001e36:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001e38:	f100 051c 	add.w	r5, r0, #28
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	f000 fa2d 	bl	800229c <hts221_power_on_set>
 8001e42:	b950      	cbnz	r0, 8001e5a <HTS221_Init+0x36>
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001e44:	2101      	movs	r1, #1
 8001e46:	4628      	mov	r0, r5
 8001e48:	f000 f9e0 	bl	800220c <hts221_block_data_update_set>
 8001e4c:	b928      	cbnz	r0, 8001e5a <HTS221_Init+0x36>
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4628      	mov	r0, r5
 8001e52:	f000 f99b 	bl	800218c <hts221_data_rate_set>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d0e9      	beq.n	8001e2e <HTS221_Init+0xa>
      return HTS221_ERROR;
 8001e5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}

08001e60 <HTS221_HUM_SetOutputDataRate>:
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001e60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001e64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001e6c:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001e6e:	d910      	bls.n	8001e92 <HTS221_HUM_SetOutputDataRate+0x32>
 8001e70:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 8001e74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7c:	bf94      	ite	ls
 8001e7e:	2102      	movls	r1, #2
 8001e80:	2103      	movhi	r1, #3
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001e82:	301c      	adds	r0, #28
 8001e84:	f000 f982 	bl	800218c <hts221_data_rate_set>
 8001e88:	3800      	subs	r0, #0
 8001e8a:	bf18      	it	ne
 8001e8c:	2001      	movne	r0, #1
}
 8001e8e:	4240      	negs	r0, r0
 8001e90:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001e92:	2101      	movs	r1, #1
 8001e94:	e7f5      	b.n	8001e82 <HTS221_HUM_SetOutputDataRate+0x22>
 8001e96:	bf00      	nop

08001e98 <HTS221_ReadID>:
{
 8001e98:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001e9a:	301c      	adds	r0, #28
 8001e9c:	f000 f9f4 	bl	8002288 <hts221_device_id_get>
 8001ea0:	3800      	subs	r0, #0
 8001ea2:	bf18      	it	ne
 8001ea4:	2001      	movne	r0, #1
}
 8001ea6:	4240      	negs	r0, r0
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	bf00      	nop

08001eac <HTS221_HUM_GetOutputDataRate>:
{
 8001eac:	b510      	push	{r4, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001eb2:	301c      	adds	r0, #28
 8001eb4:	f10d 0107 	add.w	r1, sp, #7
 8001eb8:	f000 f982 	bl	80021c0 <hts221_data_rate_get>
 8001ebc:	b990      	cbnz	r0, 8001ee4 <HTS221_HUM_GetOutputDataRate+0x38>
  switch (odr_low_level)
 8001ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d80e      	bhi.n	8001ee4 <HTS221_HUM_GetOutputDataRate+0x38>
 8001ec6:	e8df f003 	tbb	[pc, r3]
 8001eca:	0207      	.short	0x0207
 8001ecc:	090b      	.short	0x090b
 8001ece:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
      *Odr = 1.0f;
 8001ed2:	6023      	str	r3, [r4, #0]
}
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e7fa      	b.n	8001ed2 <HTS221_HUM_GetOutputDataRate+0x26>
      break;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HTS221_HUM_GetOutputDataRate+0x40>)
 8001ede:	e7f8      	b.n	8001ed2 <HTS221_HUM_GetOutputDataRate+0x26>
      break;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HTS221_HUM_GetOutputDataRate+0x44>)
 8001ee2:	e7f6      	b.n	8001ed2 <HTS221_HUM_GetOutputDataRate+0x26>
    return HTS221_ERROR;
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001ee8:	e7f4      	b.n	8001ed4 <HTS221_HUM_GetOutputDataRate+0x28>
 8001eea:	bf00      	nop
 8001eec:	41480000 	.word	0x41480000
 8001ef0:	40e00000 	.word	0x40e00000

08001ef4 <HTS221_HUM_GetHumidity>:
{
 8001ef4:	b530      	push	{r4, r5, lr}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001ef6:	f100 041c 	add.w	r4, r0, #28
{
 8001efa:	b087      	sub	sp, #28
 8001efc:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001efe:	4620      	mov	r0, r4
 8001f00:	a902      	add	r1, sp, #8
 8001f02:	f000 fa51 	bl	80023a8 <hts221_hum_adc_point_0_get>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d148      	bne.n	8001f9c <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001f0a:	a903      	add	r1, sp, #12
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f000 f9df 	bl	80022d0 <hts221_hum_rh_point_0_get>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d142      	bne.n	8001f9c <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001f16:	a904      	add	r1, sp, #16
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f000 fa5d 	bl	80023d8 <hts221_hum_adc_point_1_get>
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d13c      	bne.n	8001f9c <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001f22:	a905      	add	r1, sp, #20
 8001f24:	4620      	mov	r0, r4
 8001f26:	f000 f9e7 	bl	80022f8 <hts221_hum_rh_point_1_get>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	bbb0      	cbnz	r0, 8001f9c <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001f2e:	a901      	add	r1, sp, #4
 8001f30:	4620      	mov	r0, r4
  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8001f32:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001f36:	f000 f983 	bl	8002240 <hts221_humidity_raw_get>
 8001f3a:	bb78      	cbnz	r0, 8001f9c <HTS221_HUM_GetHumidity+0xa8>
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001f3c:	eddd 6a05 	vldr	s13, [sp, #20]
 8001f40:	eddd 5a02 	vldr	s11, [sp, #8]
 8001f44:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001f48:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001f4c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001f50:	ee65 7ae6 	vnmul.f32	s15, s11, s13
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001f54:	ee06 3a10 	vmov	s12, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001f58:	eee5 7a07 	vfma.f32	s15, s10, s14
  if (*Value < 0.0f)
 8001f5c:	2300      	movs	r3, #0
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001f5e:	ee76 6ac5 	vsub.f32	s13, s13, s10
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001f62:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001f66:	ee37 7a65 	vsub.f32	s14, s14, s11
 8001f6a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8001f6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  if (*Value < 0.0f)
 8001f72:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	d40c      	bmi.n	8001f96 <HTS221_HUM_GetHumidity+0xa2>
  if (*Value > 100.0f)
 8001f7c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8001fa4 <HTS221_HUM_GetHumidity+0xb0>
 8001f80:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	bfd4      	ite	le
 8001f8a:	edc5 6a00 	vstrle	s13, [r5]
    *Value = 100.0f;
 8001f8e:	edc5 7a00 	vstrgt	s15, [r5]
}
 8001f92:	b007      	add	sp, #28
 8001f94:	bd30      	pop	{r4, r5, pc}
 8001f96:	602b      	str	r3, [r5, #0]
 8001f98:	b007      	add	sp, #28
 8001f9a:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa0:	e7f7      	b.n	8001f92 <HTS221_HUM_GetHumidity+0x9e>
 8001fa2:	bf00      	nop
 8001fa4:	42c80000 	.word	0x42c80000

08001fa8 <HTS221_TEMP_GetTemperature>:
{
 8001fa8:	b530      	push	{r4, r5, lr}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001faa:	f100 041c 	add.w	r4, r0, #28
{
 8001fae:	b087      	sub	sp, #28
 8001fb0:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	a902      	add	r1, sp, #8
 8001fb6:	f000 fa27 	bl	8002408 <hts221_temp_adc_point_0_get>
 8001fba:	bba0      	cbnz	r0, 8002026 <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001fbc:	a903      	add	r1, sp, #12
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f000 f9ae 	bl	8002320 <hts221_temp_deg_point_0_get>
 8001fc4:	bb78      	cbnz	r0, 8002026 <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001fc6:	a904      	add	r1, sp, #16
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f000 fa35 	bl	8002438 <hts221_temp_adc_point_1_get>
 8001fce:	bb50      	cbnz	r0, 8002026 <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001fd0:	a905      	add	r1, sp, #20
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f000 f9c6 	bl	8002364 <hts221_temp_deg_point_1_get>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	bb20      	cbnz	r0, 8002026 <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001fdc:	a901      	add	r1, sp, #4
 8001fde:	4620      	mov	r0, r4
  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8001fe0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001fe4:	f000 f93e 	bl	8002264 <hts221_temperature_raw_get>
 8001fe8:	b9e8      	cbnz	r0, 8002026 <HTS221_TEMP_GetTemperature+0x7e>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001fea:	eddd 6a05 	vldr	s13, [sp, #20]
 8001fee:	eddd 5a02 	vldr	s11, [sp, #8]
 8001ff2:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001ff6:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001ffa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001ffe:	ee65 7ae6 	vnmul.f32	s15, s11, s13
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002002:	ee06 3a10 	vmov	s12, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002006:	eee5 7a07 	vfma.f32	s15, s10, s14
 800200a:	ee76 6ac5 	vsub.f32	s13, s13, s10
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800200e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002012:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002016:	eee6 7a26 	vfma.f32	s15, s12, s13
 800201a:	eec7 6a87 	vdiv.f32	s13, s15, s14
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800201e:	edc5 6a00 	vstr	s13, [r5]
}
 8002022:	b007      	add	sp, #28
 8002024:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8002026:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800202a:	e7fa      	b.n	8002022 <HTS221_TEMP_GetTemperature+0x7a>

0800202c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800202c:	b430      	push	{r4, r5}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800202e:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002030:	6944      	ldr	r4, [r0, #20]
 8002032:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002034:	b925      	cbnz	r5, 8002040 <ReadRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002036:	46a4      	mov	ip, r4
 8002038:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 800203c:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800203e:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002040:	46a4      	mov	ip, r4
 8002042:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8002046:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002048:	4760      	bx	ip
 800204a:	bf00      	nop

0800204c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800204c:	b430      	push	{r4, r5}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800204e:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002050:	6904      	ldr	r4, [r0, #16]
 8002052:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002054:	b925      	cbnz	r5, 8002060 <WriteRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002056:	46a4      	mov	ip, r4
 8002058:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 800205c:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800205e:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002060:	46a4      	mov	ip, r4
 8002062:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8002066:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002068:	4760      	bx	ip
 800206a:	bf00      	nop

0800206c <HTS221_TEMP_GetOutputDataRate>:
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
 800206c:	b510      	push	{r4, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	460c      	mov	r4, r1
 8002072:	301c      	adds	r0, #28
 8002074:	f10d 0107 	add.w	r1, sp, #7
 8002078:	f000 f8a2 	bl	80021c0 <hts221_data_rate_get>
 800207c:	b990      	cbnz	r0, 80020a4 <HTS221_TEMP_GetOutputDataRate+0x38>
 800207e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d80e      	bhi.n	80020a4 <HTS221_TEMP_GetOutputDataRate+0x38>
 8002086:	e8df f003 	tbb	[pc, r3]
 800208a:	0207      	.short	0x0207
 800208c:	090b      	.short	0x090b
 800208e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002092:	6023      	str	r3, [r4, #0]
 8002094:	b002      	add	sp, #8
 8002096:	bd10      	pop	{r4, pc}
 8002098:	2300      	movs	r3, #0
 800209a:	e7fa      	b.n	8002092 <HTS221_TEMP_GetOutputDataRate+0x26>
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <HTS221_TEMP_GetOutputDataRate+0x40>)
 800209e:	e7f8      	b.n	8002092 <HTS221_TEMP_GetOutputDataRate+0x26>
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HTS221_TEMP_GetOutputDataRate+0x44>)
 80020a2:	e7f6      	b.n	8002092 <HTS221_TEMP_GetOutputDataRate+0x26>
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020a8:	e7f4      	b.n	8002094 <HTS221_TEMP_GetOutputDataRate+0x28>
 80020aa:	bf00      	nop
 80020ac:	41480000 	.word	0x41480000
 80020b0:	40e00000 	.word	0x40e00000

080020b4 <HTS221_TEMP_SetOutputDataRate>:
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
 80020b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80020b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80020bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c0:	b508      	push	{r3, lr}
 80020c2:	d910      	bls.n	80020e6 <HTS221_TEMP_SetOutputDataRate+0x32>
 80020c4:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 80020c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	bf94      	ite	ls
 80020d2:	2102      	movls	r1, #2
 80020d4:	2103      	movhi	r1, #3
 80020d6:	301c      	adds	r0, #28
 80020d8:	f000 f858 	bl	800218c <hts221_data_rate_set>
 80020dc:	3800      	subs	r0, #0
 80020de:	bf18      	it	ne
 80020e0:	2001      	movne	r0, #1
 80020e2:	4240      	negs	r0, r0
 80020e4:	bd08      	pop	{r3, pc}
 80020e6:	2101      	movs	r1, #1
 80020e8:	e7f5      	b.n	80020d6 <HTS221_TEMP_SetOutputDataRate+0x22>
 80020ea:	bf00      	nop

080020ec <HTS221_DeInit>:
{
 80020ec:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 80020ee:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80020f2:	2b01      	cmp	r3, #1
{
 80020f4:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80020f6:	d003      	beq.n	8002100 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 80020f8:	2000      	movs	r0, #0
 80020fa:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 80020fe:	bd10      	pop	{r4, pc}
  if (pObj->hum_is_enabled == 0U)
 8002100:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8002104:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
  if (pObj->hum_is_enabled == 0U)
 8002108:	b1a3      	cbz	r3, 8002134 <HTS221_DeInit+0x48>
  if (pObj->temp_is_enabled == 0U)
 800210a:	b159      	cbz	r1, 8002124 <HTS221_DeInit+0x38>
  pObj->hum_is_enabled = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002112:	2100      	movs	r1, #0
 8002114:	f104 001c 	add.w	r0, r4, #28
 8002118:	f000 f8c0 	bl	800229c <hts221_power_on_set>
 800211c:	b968      	cbnz	r0, 800213a <HTS221_DeInit+0x4e>
  pObj->temp_is_enabled = 0;
 800211e:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return HTS221_OK;
 8002122:	e7e9      	b.n	80020f8 <HTS221_DeInit+0xc>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002124:	301c      	adds	r0, #28
 8002126:	f000 f8b9 	bl	800229c <hts221_power_on_set>
 800212a:	b930      	cbnz	r0, 800213a <HTS221_DeInit+0x4e>
  if (pObj->temp_is_enabled == 0U)
 800212c:	f894 102a 	ldrb.w	r1, [r4, #42]	@ 0x2a
  pObj->hum_is_enabled = 0;
 8002130:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8002134:	2900      	cmp	r1, #0
 8002136:	d0df      	beq.n	80020f8 <HTS221_DeInit+0xc>
 8002138:	e7eb      	b.n	8002112 <HTS221_DeInit+0x26>
      return HTS221_ERROR;
 800213a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800213e:	bd10      	pop	{r4, pc}

08002140 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8002140:	b1e0      	cbz	r0, 800217c <HTS221_RegisterBusIO+0x3c>
{
 8002142:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8002144:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8002148:	688a      	ldr	r2, [r1, #8]
 800214a:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800214c:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8002150:	7b0a      	ldrb	r2, [r1, #12]
 8002152:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002154:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 8002158:	6989      	ldr	r1, [r1, #24]
 800215a:	6181      	str	r1, [r0, #24]
 800215c:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800215e:	4909      	ldr	r1, [pc, #36]	@ (8002184 <HTS221_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8002160:	4a09      	ldr	r2, [pc, #36]	@ (8002188 <HTS221_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002162:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002164:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8002168:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 800216a:	b113      	cbz	r3, 8002172 <HTS221_RegisterBusIO+0x32>
}
 800216c:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8002170:	4718      	bx	r3
}
 8002172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	0800202d 	.word	0x0800202d
 8002188:	0800204d 	.word	0x0800204d

0800218c <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	4604      	mov	r4, r0
 8002190:	b082      	sub	sp, #8
 8002192:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002194:	6880      	ldr	r0, [r0, #8]
 8002196:	6866      	ldr	r6, [r4, #4]
 8002198:	2301      	movs	r3, #1
 800219a:	aa01      	add	r2, sp, #4
 800219c:	2120      	movs	r1, #32
 800219e:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80021a0:	b958      	cbnz	r0, 80021ba <hts221_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 80021a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80021a6:	6826      	ldr	r6, [r4, #0]
 80021a8:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 80021aa:	f365 0301 	bfi	r3, r5, #0, #2
 80021ae:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80021b2:	aa01      	add	r2, sp, #4
 80021b4:	2301      	movs	r3, #1
 80021b6:	2120      	movs	r1, #32
 80021b8:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80021ba:	b002      	add	sp, #8
 80021bc:	bd70      	pop	{r4, r5, r6, pc}
 80021be:	bf00      	nop

080021c0 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80021c0:	b530      	push	{r4, r5, lr}
 80021c2:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80021c4:	2301      	movs	r3, #1
 80021c6:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80021ca:	aa01      	add	r2, sp, #4
{
 80021cc:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80021ce:	2120      	movs	r1, #32
 80021d0:	47a8      	blx	r5
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  switch (reg.odr) {
 80021d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d813      	bhi.n	8002206 <hts221_data_rate_get+0x46>
 80021de:	e8df f003 	tbb	[pc, r3]
 80021e2:	0206      	.short	0x0206
 80021e4:	0a0e      	.short	0x0a0e
 80021e6:	2301      	movs	r3, #1
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80021e8:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 80021ea:	b003      	add	sp, #12
 80021ec:	bd30      	pop	{r4, r5, pc}
  switch (reg.odr) {
 80021ee:	2300      	movs	r3, #0
      *val = HTS221_ONE_SHOT;
 80021f0:	7023      	strb	r3, [r4, #0]
}
 80021f2:	b003      	add	sp, #12
 80021f4:	bd30      	pop	{r4, r5, pc}
      break;
 80021f6:	2303      	movs	r3, #3
      *val = HTS221_ONE_SHOT;
 80021f8:	7023      	strb	r3, [r4, #0]
}
 80021fa:	b003      	add	sp, #12
 80021fc:	bd30      	pop	{r4, r5, pc}
      break;
 80021fe:	2302      	movs	r3, #2
      *val = HTS221_ONE_SHOT;
 8002200:	7023      	strb	r3, [r4, #0]
}
 8002202:	b003      	add	sp, #12
 8002204:	bd30      	pop	{r4, r5, pc}
      break;
 8002206:	2304      	movs	r3, #4
 8002208:	e7ee      	b.n	80021e8 <hts221_data_rate_get+0x28>
 800220a:	bf00      	nop

0800220c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	4604      	mov	r4, r0
 8002210:	b082      	sub	sp, #8
 8002212:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002214:	6880      	ldr	r0, [r0, #8]
 8002216:	6866      	ldr	r6, [r4, #4]
 8002218:	2301      	movs	r3, #1
 800221a:	aa01      	add	r2, sp, #4
 800221c:	2120      	movs	r1, #32
 800221e:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002220:	b958      	cbnz	r0, 800223a <hts221_block_data_update_set+0x2e>
    reg.bdu = val;
 8002222:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002226:	6826      	ldr	r6, [r4, #0]
 8002228:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 800222a:	f365 0382 	bfi	r3, r5, #2, #1
 800222e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002232:	aa01      	add	r2, sp, #4
 8002234:	2301      	movs	r3, #1
 8002236:	2120      	movs	r1, #32
 8002238:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800223a:	b002      	add	sp, #8
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	bf00      	nop

08002240 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002240:	b530      	push	{r4, r5, lr}
 8002242:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002244:	aa01      	add	r2, sp, #4
{
 8002246:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002248:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800224c:	2302      	movs	r3, #2
 800224e:	2128      	movs	r1, #40	@ 0x28
 8002250:	47a8      	blx	r5
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 8002252:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002256:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800225a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800225e:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8002260:	b003      	add	sp, #12
 8002262:	bd30      	pop	{r4, r5, pc}

08002264 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002264:	b530      	push	{r4, r5, lr}
 8002266:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002268:	aa01      	add	r2, sp, #4
{
 800226a:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800226c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002270:	2302      	movs	r3, #2
 8002272:	212a      	movs	r1, #42	@ 0x2a
 8002274:	47a8      	blx	r5
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 8002276:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800227a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800227e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002282:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8002284:	b003      	add	sp, #12
 8002286:	bd30      	pop	{r4, r5, pc}

08002288 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002288:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800228a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800228e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002290:	46a4      	mov	ip, r4
 8002292:	2301      	movs	r3, #1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
  return ret;
}
 8002294:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002298:	210f      	movs	r1, #15
 800229a:	4760      	bx	ip

0800229c <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	4604      	mov	r4, r0
 80022a0:	b082      	sub	sp, #8
 80022a2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80022a4:	6880      	ldr	r0, [r0, #8]
 80022a6:	6866      	ldr	r6, [r4, #4]
 80022a8:	2301      	movs	r3, #1
 80022aa:	aa01      	add	r2, sp, #4
 80022ac:	2120      	movs	r1, #32
 80022ae:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80022b0:	b958      	cbnz	r0, 80022ca <hts221_power_on_set+0x2e>
    reg.pd = val;
 80022b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80022b6:	6826      	ldr	r6, [r4, #0]
 80022b8:	68a0      	ldr	r0, [r4, #8]
    reg.pd = val;
 80022ba:	f365 13c7 	bfi	r3, r5, #7, #1
 80022be:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80022c2:	aa01      	add	r2, sp, #4
 80022c4:	2301      	movs	r3, #1
 80022c6:	2120      	movs	r1, #32
 80022c8:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80022ca:	b002      	add	sp, #8
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	bf00      	nop

080022d0 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80022d0:	b530      	push	{r4, r5, lr}
 80022d2:	b083      	sub	sp, #12
 80022d4:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80022d6:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80022da:	2301      	movs	r3, #1
 80022dc:	f10d 0207 	add.w	r2, sp, #7
 80022e0:	2130      	movs	r1, #48	@ 0x30
 80022e2:	47a8      	blx	r5
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
  *val = coeff / 2.0f;
 80022e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 80022f0:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80022f4:	b003      	add	sp, #12
 80022f6:	bd30      	pop	{r4, r5, pc}

080022f8 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80022f8:	b530      	push	{r4, r5, lr}
 80022fa:	b083      	sub	sp, #12
 80022fc:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80022fe:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002302:	2301      	movs	r3, #1
 8002304:	f10d 0207 	add.w	r2, sp, #7
 8002308:	2131      	movs	r1, #49	@ 0x31
 800230a:	47a8      	blx	r5
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
  *val = coeff / 2.0f;
 800230c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8002318:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 800231c:	b003      	add	sp, #12
 800231e:	bd30      	pop	{r4, r5, pc}

08002320 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002320:	b570      	push	{r4, r5, r6, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	b082      	sub	sp, #8
 8002326:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002328:	6880      	ldr	r0, [r0, #8]
 800232a:	6866      	ldr	r6, [r4, #4]
 800232c:	2301      	movs	r3, #1
 800232e:	f10d 0207 	add.w	r2, sp, #7
 8002332:	2132      	movs	r1, #50	@ 0x32
 8002334:	47b0      	blx	r6
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);

  if (ret == 0) {
 8002336:	b998      	cbnz	r0, 8002360 <hts221_temp_deg_point_0_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002338:	2301      	movs	r3, #1
 800233a:	aa01      	add	r2, sp, #4
 800233c:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8002340:	2135      	movs	r1, #53	@ 0x35
 8002342:	47b0      	blx	r6
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
    coeff_h = reg.t0_msb;
 8002344:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002348:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800234c:	f002 0203 	and.w	r2, r2, #3
 8002350:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 800235c:	edc5 7a00 	vstr	s15, [r5]
  }

  return ret;
}
 8002360:	b002      	add	sp, #8
 8002362:	bd70      	pop	{r4, r5, r6, pc}

08002364 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	4604      	mov	r4, r0
 8002368:	b082      	sub	sp, #8
 800236a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800236c:	6880      	ldr	r0, [r0, #8]
 800236e:	6866      	ldr	r6, [r4, #4]
 8002370:	2301      	movs	r3, #1
 8002372:	f10d 0207 	add.w	r2, sp, #7
 8002376:	2133      	movs	r1, #51	@ 0x33
 8002378:	47b0      	blx	r6
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);

  if (ret == 0) {
 800237a:	b998      	cbnz	r0, 80023a4 <hts221_temp_deg_point_1_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800237c:	2301      	movs	r3, #1
 800237e:	aa01      	add	r2, sp, #4
 8002380:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8002384:	2135      	movs	r1, #53	@ 0x35
 8002386:	47b0      	blx	r6
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
    coeff_h = reg.t1_msb;
 8002388:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800238c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002390:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8002394:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 80023a0:	edc5 7a00 	vstr	s15, [r5]
  }

  return ret;
}
 80023a4:	b002      	add	sp, #8
 80023a6:	bd70      	pop	{r4, r5, r6, pc}

080023a8 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80023a8:	b530      	push	{r4, r5, lr}
 80023aa:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80023ac:	aa01      	add	r2, sp, #4
{
 80023ae:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80023b0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80023b4:	2302      	movs	r3, #2
 80023b6:	2136      	movs	r1, #54	@ 0x36
 80023b8:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80023ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80023be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d0:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80023d4:	b003      	add	sp, #12
 80023d6:	bd30      	pop	{r4, r5, pc}

080023d8 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80023d8:	b530      	push	{r4, r5, lr}
 80023da:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80023dc:	aa01      	add	r2, sp, #4
{
 80023de:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80023e0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80023e4:	2302      	movs	r3, #2
 80023e6:	213a      	movs	r1, #58	@ 0x3a
 80023e8:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80023ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80023ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002400:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8002404:	b003      	add	sp, #12
 8002406:	bd30      	pop	{r4, r5, pc}

08002408 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002408:	b530      	push	{r4, r5, lr}
 800240a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800240c:	aa01      	add	r2, sp, #4
{
 800240e:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002410:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002414:	2302      	movs	r3, #2
 8002416:	213c      	movs	r1, #60	@ 0x3c
 8002418:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800241a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800241e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002422:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002426:	b21b      	sxth	r3, r3
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002430:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8002434:	b003      	add	sp, #12
 8002436:	bd30      	pop	{r4, r5, pc}

08002438 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002438:	b530      	push	{r4, r5, lr}
 800243a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800243c:	aa01      	add	r2, sp, #4
{
 800243e:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002440:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002444:	2302      	movs	r3, #2
 8002446:	213e      	movs	r1, #62	@ 0x3e
 8002448:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800244a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800244e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002452:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002456:	b21b      	sxth	r3, r3
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002460:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8002464:	b003      	add	sp, #12
 8002466:	bd30      	pop	{r4, r5, pc}

08002468 <IIS2DH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2DH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DH_GetCapabilities(IIS2DH_Object_t *pObj, IIS2DH_Capabilities_t *Capabilities)
{
 8002468:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800246a:	4c07      	ldr	r4, [pc, #28]	@ (8002488 <IIS2DH_GetCapabilities+0x20>)
  Capabilities->LowPower     = 1;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 5376.0f;
 800246c:	4a07      	ldr	r2, [pc, #28]	@ (800248c <IIS2DH_GetCapabilities+0x24>)
  Capabilities->Acc          = 1;
 800246e:	600c      	str	r4, [r1, #0]
  Capabilities->GyroMaxFS    = 0;
 8002470:	2000      	movs	r0, #0
  Capabilities->GyroMaxOdr   = 0.0f;
 8002472:	2300      	movs	r3, #0
  Capabilities->AccMaxFS     = 16;
 8002474:	2410      	movs	r4, #16
 8002476:	e9c1 0401 	strd	r0, r4, [r1, #4]
  Capabilities->MagMaxOdr    = 0.0f;
  return IIS2DH_OK;
}
 800247a:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxFS     = 0;
 800247e:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002480:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 5376.0f;
 8002482:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002484:	618b      	str	r3, [r1, #24]
}
 8002486:	4770      	bx	lr
 8002488:	01000001 	.word	0x01000001
 800248c:	45a80000 	.word	0x45a80000

08002490 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002490:	b410      	push	{r4}
  IIS2DH_Object_t *pObj = (IIS2DH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002492:	6944      	ldr	r4, [r0, #20]
 8002494:	7b00      	ldrb	r0, [r0, #12]
 8002496:	46a4      	mov	ip, r4
}
 8002498:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800249c:	4760      	bx	ip
 800249e:	bf00      	nop

080024a0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024a0:	b410      	push	{r4}
  IIS2DH_Object_t *pObj = (IIS2DH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80024a2:	6904      	ldr	r4, [r0, #16]
 80024a4:	7b00      	ldrb	r0, [r0, #12]
 80024a6:	46a4      	mov	ip, r4
}
 80024a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80024ac:	4760      	bx	ip
 80024ae:	bf00      	nop

080024b0 <IIS2DH_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 80024b0:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80024b4:	b90b      	cbnz	r3, 80024ba <IIS2DH_ACC_Disable+0xa>
    return IIS2DH_OK;
 80024b6:	2000      	movs	r0, #0
}
 80024b8:	4770      	bx	lr
{
 80024ba:	b510      	push	{r4, lr}
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 80024bc:	2100      	movs	r1, #0
 80024be:	4604      	mov	r4, r0
 80024c0:	301c      	adds	r0, #28
 80024c2:	f000 fbc7 	bl	8002c54 <iis2dh_data_rate_set>
 80024c6:	b918      	cbnz	r0, 80024d0 <IIS2DH_ACC_Disable+0x20>
  pObj->acc_is_enabled = 0;
 80024c8:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS2DH_OK;
 80024cc:	2000      	movs	r0, #0
}
 80024ce:	bd10      	pop	{r4, pc}
    return IIS2DH_ERROR;
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80024d4:	bd10      	pop	{r4, pc}
 80024d6:	bf00      	nop

080024d8 <IIS2DH_DeInit>:
{
 80024d8:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 80024da:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 80024de:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 80024e0:	b933      	cbnz	r3, 80024f0 <IIS2DH_DeInit+0x18>
  pObj->is_initialized = 0;
 80024e2:	2000      	movs	r0, #0
  pObj->acc_odr = IIS2DH_ODR_1Hz;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pObj->is_initialized = 0;
 80024ea:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 80024ee:	bd10      	pop	{r4, pc}
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 80024f0:	2100      	movs	r1, #0
 80024f2:	301c      	adds	r0, #28
 80024f4:	f000 fbae 	bl	8002c54 <iis2dh_data_rate_set>
 80024f8:	b910      	cbnz	r0, 8002500 <IIS2DH_DeInit+0x28>
  pObj->acc_is_enabled = 0;
 80024fa:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS2DH_OK;
 80024fe:	e7f0      	b.n	80024e2 <IIS2DH_DeInit+0xa>
    return IIS2DH_ERROR;
 8002500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8002504:	bd10      	pop	{r4, pc}
 8002506:	bf00      	nop

08002508 <IIS2DH_ACC_SetFullScale>:
         : (FullScale <= 4) ? IIS2DH_4g
 8002508:	2902      	cmp	r1, #2
{
 800250a:	b508      	push	{r3, lr}
         : (FullScale <= 4) ? IIS2DH_4g
 800250c:	dd06      	ble.n	800251c <IIS2DH_ACC_SetFullScale+0x14>
 800250e:	2904      	cmp	r1, #4
 8002510:	dd0d      	ble.n	800252e <IIS2DH_ACC_SetFullScale+0x26>
 8002512:	2908      	cmp	r1, #8
 8002514:	bfcc      	ite	gt
 8002516:	2103      	movgt	r1, #3
 8002518:	2102      	movle	r1, #2
 800251a:	e000      	b.n	800251e <IIS2DH_ACC_SetFullScale+0x16>
 800251c:	2100      	movs	r1, #0
  if (iis2dh_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DH_OK)
 800251e:	301c      	adds	r0, #28
 8002520:	f000 fbf8 	bl	8002d14 <iis2dh_full_scale_set>
 8002524:	3800      	subs	r0, #0
 8002526:	bf18      	it	ne
 8002528:	2001      	movne	r0, #1
}
 800252a:	4240      	negs	r0, r0
 800252c:	bd08      	pop	{r3, pc}
         : (FullScale <= 4) ? IIS2DH_4g
 800252e:	2101      	movs	r1, #1
 8002530:	e7f5      	b.n	800251e <IIS2DH_ACC_SetFullScale+0x16>
 8002532:	bf00      	nop

08002534 <IIS2DH_Init>:
{
 8002534:	b570      	push	{r4, r5, r6, lr}
  if (iis2dh_spi_mode_set(&(pObj->Ctx), IIS2DH_SPI_4_WIRE) != IIS2DH_OK)
 8002536:	f100 041c 	add.w	r4, r0, #28
{
 800253a:	b084      	sub	sp, #16
 800253c:	4605      	mov	r5, r0
  if (iis2dh_spi_mode_set(&(pObj->Ctx), IIS2DH_SPI_4_WIRE) != IIS2DH_OK)
 800253e:	2100      	movs	r1, #0
 8002540:	4620      	mov	r0, r4
 8002542:	f000 fc93 	bl	8002e6c <iis2dh_spi_mode_set>
 8002546:	2800      	cmp	r0, #0
 8002548:	d173      	bne.n	8002632 <IIS2DH_Init+0xfe>
  if (iis2dh_boot_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DH_OK)
 800254a:	2101      	movs	r1, #1
 800254c:	4620      	mov	r0, r4
 800254e:	f000 fc73 	bl	8002e38 <iis2dh_boot_set>
 8002552:	2800      	cmp	r0, #0
 8002554:	d16d      	bne.n	8002632 <IIS2DH_Init+0xfe>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002556:	2301      	movs	r3, #1
 8002558:	aa01      	add	r2, sp, #4
 800255a:	2120      	movs	r1, #32
 800255c:	4620      	mov	r0, r4
 800255e:	f000 fae3 	bl	8002b28 <iis2dh_read_reg>
  if (ret == 0) {
 8002562:	2800      	cmp	r0, #0
 8002564:	d03e      	beq.n	80025e4 <IIS2DH_Init+0xb0>
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 8002566:	2100      	movs	r1, #0
 8002568:	4620      	mov	r0, r4
 800256a:	f000 fb73 	bl	8002c54 <iis2dh_data_rate_set>
 800256e:	4601      	mov	r1, r0
 8002570:	2800      	cmp	r0, #0
 8002572:	d15e      	bne.n	8002632 <IIS2DH_Init+0xfe>
  if (iis2dh_temperature_meas_set(&(pObj->Ctx), IIS2DH_TEMP_DISABLE) != IIS2DH_OK)
 8002574:	4620      	mov	r0, r4
 8002576:	f000 fae7 	bl	8002b48 <iis2dh_temperature_meas_set>
 800257a:	4601      	mov	r1, r0
 800257c:	2800      	cmp	r0, #0
 800257e:	d158      	bne.n	8002632 <IIS2DH_Init+0xfe>
  if (iis2dh_high_pass_on_outputs_set(&(pObj->Ctx), 0) != IIS2DH_OK)
 8002580:	4620      	mov	r0, r4
 8002582:	f000 fbad 	bl	8002ce0 <iis2dh_high_pass_on_outputs_set>
 8002586:	2800      	cmp	r0, #0
 8002588:	d153      	bne.n	8002632 <IIS2DH_Init+0xfe>
  if (iis2dh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DH_OK)
 800258a:	2101      	movs	r1, #1
 800258c:	4620      	mov	r0, r4
 800258e:	f000 fbf5 	bl	8002d7c <iis2dh_block_data_update_set>
 8002592:	4601      	mov	r1, r0
 8002594:	2800      	cmp	r0, #0
 8002596:	d14c      	bne.n	8002632 <IIS2DH_Init+0xfe>
  if (iis2dh_data_format_set(&(pObj->Ctx), IIS2DH_LSB_AT_LOW_ADD) != IIS2DH_OK)
 8002598:	4620      	mov	r0, r4
 800259a:	f000 fc33 	bl	8002e04 <iis2dh_data_format_set>
 800259e:	4601      	mov	r1, r0
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d146      	bne.n	8002632 <IIS2DH_Init+0xfe>
  if (iis2dh_full_scale_set(&(pObj->Ctx), IIS2DH_2g) != IIS2DH_OK)
 80025a4:	4620      	mov	r0, r4
 80025a6:	f000 fbb5 	bl	8002d14 <iis2dh_full_scale_set>
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d141      	bne.n	8002632 <IIS2DH_Init+0xfe>
  if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_LP_8bit) != IIS2DH_OK)
 80025ae:	2102      	movs	r1, #2
 80025b0:	4620      	mov	r0, r4
 80025b2:	f000 fae3 	bl	8002b7c <iis2dh_operating_mode_set>
 80025b6:	4606      	mov	r6, r0
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d13a      	bne.n	8002632 <IIS2DH_Init+0xfe>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 80025bc:	2301      	movs	r3, #1
 80025be:	aa02      	add	r2, sp, #8
 80025c0:	2122      	movs	r1, #34	@ 0x22
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 fab0 	bl	8002b28 <iis2dh_read_reg>
  if (ret == 0) {
 80025c8:	b330      	cbz	r0, 8002618 <IIS2DH_Init+0xe4>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 80025ca:	2301      	movs	r3, #1
 80025cc:	aa03      	add	r2, sp, #12
 80025ce:	2124      	movs	r1, #36	@ 0x24
 80025d0:	4620      	mov	r0, r4
 80025d2:	f000 faa9 	bl	8002b28 <iis2dh_read_reg>
  if (ret == 0) {
 80025d6:	b190      	cbz	r0, 80025fe <IIS2DH_Init+0xca>
  pObj->is_initialized = 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4630      	mov	r0, r6
  pObj->is_initialized = 1;
 80025dc:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 80025e0:	b004      	add	sp, #16
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
    ctrl_reg1.xen = 0;
 80025e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80025e8:	f021 0107 	bic.w	r1, r1, #7
 80025ec:	f88d 1004 	strb.w	r1, [sp, #4]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80025f0:	2301      	movs	r3, #1
 80025f2:	aa01      	add	r2, sp, #4
 80025f4:	2120      	movs	r1, #32
 80025f6:	4620      	mov	r0, r4
 80025f8:	f000 fa9e 	bl	8002b38 <iis2dh_write_reg>
 80025fc:	e7b3      	b.n	8002566 <IIS2DH_Init+0x32>
    ctrl_reg5.lir_int1 = 1;
 80025fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	f88d 300c 	strb.w	r3, [sp, #12]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 800260a:	aa03      	add	r2, sp, #12
 800260c:	4620      	mov	r0, r4
 800260e:	2301      	movs	r3, #1
 8002610:	2124      	movs	r1, #36	@ 0x24
 8002612:	f000 fa91 	bl	8002b38 <iis2dh_write_reg>
 8002616:	e7df      	b.n	80025d8 <IIS2DH_Init+0xa4>
    ctrl_reg3.i1_drdy1 = 1;
 8002618:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800261c:	f043 0310 	orr.w	r3, r3, #16
 8002620:	f88d 3008 	strb.w	r3, [sp, #8]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 8002624:	aa02      	add	r2, sp, #8
 8002626:	2301      	movs	r3, #1
 8002628:	2122      	movs	r1, #34	@ 0x22
 800262a:	4620      	mov	r0, r4
 800262c:	f000 fa84 	bl	8002b38 <iis2dh_write_reg>
 8002630:	e7cb      	b.n	80025ca <IIS2DH_Init+0x96>
    return IIS2DH_ERROR;
 8002632:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
}
 8002636:	4630      	mov	r0, r6
 8002638:	b004      	add	sp, #16
 800263a:	bd70      	pop	{r4, r5, r6, pc}

0800263c <IIS2DH_ACC_SetOutputDataRate>:
{
 800263c:	b510      	push	{r4, lr}
 800263e:	ed2d 8b02 	vpush	{d8}
  if (pObj->acc_is_enabled == 1U)
 8002642:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002646:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->acc_is_enabled == 1U)
 800264a:	2901      	cmp	r1, #1
{
 800264c:	eeb0 8a40 	vmov.f32	s16, s0
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002650:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8002654:	d043      	beq.n	80026de <IIS2DH_ACC_SetOutputDataRate+0xa2>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	d937      	bls.n	80026cc <IIS2DH_ACC_SetOutputDataRate+0x90>
 800265c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002660:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	d937      	bls.n	80026da <IIS2DH_ACC_SetOutputDataRate+0x9e>
 800266a:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 800266e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	f240 8085 	bls.w	8002784 <IIS2DH_ACC_SetOutputDataRate+0x148>
 800267a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80027c4 <IIS2DH_ACC_SetOutputDataRate+0x188>
 800267e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	f240 808a 	bls.w	800279e <IIS2DH_ACC_SetOutputDataRate+0x162>
 800268a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80027c8 <IIS2DH_ACC_SetOutputDataRate+0x18c>
 800268e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002696:	f240 8086 	bls.w	80027a6 <IIS2DH_ACC_SetOutputDataRate+0x16a>
 800269a:	eddf 7a4c 	vldr	s15, [pc, #304]	@ 80027cc <IIS2DH_ACC_SetOutputDataRate+0x190>
 800269e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	f240 8082 	bls.w	80027ae <IIS2DH_ACC_SetOutputDataRate+0x172>
 80026aa:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80027d0 <IIS2DH_ACC_SetOutputDataRate+0x194>
 80026ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b6:	d97e      	bls.n	80027b6 <IIS2DH_ACC_SetOutputDataRate+0x17a>
 80026b8:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80027d4 <IIS2DH_ACC_SetOutputDataRate+0x198>
 80026bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	bf94      	ite	ls
 80026c6:	2308      	movls	r3, #8
 80026c8:	2309      	movhi	r3, #9
 80026ca:	e000      	b.n	80026ce <IIS2DH_ACC_SetOutputDataRate+0x92>
 80026cc:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 80026ce:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    return IIS2DH_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80026d2:	2000      	movs	r0, #0
}
 80026d4:	ecbd 8b02 	vpop	{d8}
 80026d8:	bd10      	pop	{r4, pc}
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80026da:	2302      	movs	r3, #2
 80026dc:	e7f7      	b.n	80026ce <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	d932      	bls.n	800274a <IIS2DH_ACC_SetOutputDataRate+0x10e>
 80026e4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80026e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	d953      	bls.n	800279a <IIS2DH_ACC_SetOutputDataRate+0x15e>
 80026f2:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 80026f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d950      	bls.n	80027a2 <IIS2DH_ACC_SetOutputDataRate+0x166>
 8002700:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80027c4 <IIS2DH_ACC_SetOutputDataRate+0x188>
 8002704:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	d94d      	bls.n	80027aa <IIS2DH_ACC_SetOutputDataRate+0x16e>
 800270e:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 80027c8 <IIS2DH_ACC_SetOutputDataRate+0x18c>
 8002712:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	d94a      	bls.n	80027b2 <IIS2DH_ACC_SetOutputDataRate+0x176>
 800271c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80027cc <IIS2DH_ACC_SetOutputDataRate+0x190>
 8002720:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	d947      	bls.n	80027ba <IIS2DH_ACC_SetOutputDataRate+0x17e>
 800272a:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80027d0 <IIS2DH_ACC_SetOutputDataRate+0x194>
 800272e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002736:	d942      	bls.n	80027be <IIS2DH_ACC_SetOutputDataRate+0x182>
 8002738:	eddf 7a26 	vldr	s15, [pc, #152]	@ 80027d4 <IIS2DH_ACC_SetOutputDataRate+0x198>
 800273c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	bf94      	ite	ls
 8002746:	2108      	movls	r1, #8
 8002748:	2109      	movhi	r1, #9
  if (iis2dh_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DH_OK)
 800274a:	f100 041c 	add.w	r4, r0, #28
 800274e:	4620      	mov	r0, r4
 8002750:	f000 fa80 	bl	8002c54 <iis2dh_data_rate_set>
 8002754:	b9f0      	cbnz	r0, 8002794 <IIS2DH_ACC_SetOutputDataRate+0x158>
  if (Odr <= 1.6f)
 8002756:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80027d8 <IIS2DH_ACC_SetOutputDataRate+0x19c>
 800275a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	d911      	bls.n	8002788 <IIS2DH_ACC_SetOutputDataRate+0x14c>
  if (Odr > 200.0f)
 8002764:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80027cc <IIS2DH_ACC_SetOutputDataRate+0x190>
 8002768:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	ddaf      	ble.n	80026d2 <IIS2DH_ACC_SetOutputDataRate+0x96>
    if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_HR_12bit) != IIS2DH_OK)
 8002772:	2100      	movs	r1, #0
 8002774:	4620      	mov	r0, r4
 8002776:	f000 fa01 	bl	8002b7c <iis2dh_operating_mode_set>
 800277a:	3800      	subs	r0, #0
 800277c:	bf18      	it	ne
 800277e:	2001      	movne	r0, #1
 8002780:	4240      	negs	r0, r0
 8002782:	e7a7      	b.n	80026d4 <IIS2DH_ACC_SetOutputDataRate+0x98>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002784:	2303      	movs	r3, #3
 8002786:	e7a2      	b.n	80026ce <IIS2DH_ACC_SetOutputDataRate+0x92>
    if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_LP_8bit) != IIS2DH_OK)
 8002788:	2102      	movs	r1, #2
 800278a:	4620      	mov	r0, r4
 800278c:	f000 f9f6 	bl	8002b7c <iis2dh_operating_mode_set>
 8002790:	2800      	cmp	r0, #0
 8002792:	d0e7      	beq.n	8002764 <IIS2DH_ACC_SetOutputDataRate+0x128>
    return IIS2DH_ERROR;
 8002794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002798:	e79c      	b.n	80026d4 <IIS2DH_ACC_SetOutputDataRate+0x98>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800279a:	2102      	movs	r1, #2
 800279c:	e7d5      	b.n	800274a <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800279e:	2304      	movs	r3, #4
 80027a0:	e795      	b.n	80026ce <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80027a2:	2103      	movs	r1, #3
 80027a4:	e7d1      	b.n	800274a <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80027a6:	2305      	movs	r3, #5
 80027a8:	e791      	b.n	80026ce <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80027aa:	2104      	movs	r1, #4
 80027ac:	e7cd      	b.n	800274a <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80027ae:	2306      	movs	r3, #6
 80027b0:	e78d      	b.n	80026ce <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80027b2:	2105      	movs	r1, #5
 80027b4:	e7c9      	b.n	800274a <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80027b6:	2307      	movs	r3, #7
 80027b8:	e789      	b.n	80026ce <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80027ba:	2106      	movs	r1, #6
 80027bc:	e7c5      	b.n	800274a <IIS2DH_ACC_SetOutputDataRate+0x10e>
 80027be:	2107      	movs	r1, #7
 80027c0:	e7c3      	b.n	800274a <IIS2DH_ACC_SetOutputDataRate+0x10e>
 80027c2:	bf00      	nop
 80027c4:	42480000 	.word	0x42480000
 80027c8:	42c80000 	.word	0x42c80000
 80027cc:	43480000 	.word	0x43480000
 80027d0:	43c80000 	.word	0x43c80000
 80027d4:	44ca8000 	.word	0x44ca8000
 80027d8:	3fcccccd 	.word	0x3fcccccd

080027dc <IIS2DH_ReadID>:
{
 80027dc:	b508      	push	{r3, lr}
  if (iis2dh_device_id_get(&(pObj->Ctx), Id) != IIS2DH_OK)
 80027de:	301c      	adds	r0, #28
 80027e0:	f000 fb06 	bl	8002df0 <iis2dh_device_id_get>
 80027e4:	3800      	subs	r0, #0
 80027e6:	bf18      	it	ne
 80027e8:	2001      	movne	r0, #1
}
 80027ea:	4240      	negs	r0, r0
 80027ec:	bd08      	pop	{r3, pc}
 80027ee:	bf00      	nop

080027f0 <IIS2DH_ACC_GetFullScale>:
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	460c      	mov	r4, r1
  if (iis2dh_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DH_OK)
 80027f6:	301c      	adds	r0, #28
 80027f8:	f10d 0107 	add.w	r1, sp, #7
 80027fc:	f000 faa4 	bl	8002d48 <iis2dh_full_scale_get>
 8002800:	b9a0      	cbnz	r0, 800282c <IIS2DH_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 8002802:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d80d      	bhi.n	8002826 <IIS2DH_ACC_GetFullScale+0x36>
 800280a:	e8df f003 	tbb	[pc, r3]
 800280e:	0206      	.short	0x0206
 8002810:	080a      	.short	0x080a
 8002812:	2304      	movs	r3, #4
      *FullScale =  2;
 8002814:	6023      	str	r3, [r4, #0]
}
 8002816:	b002      	add	sp, #8
 8002818:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 800281a:	2302      	movs	r3, #2
 800281c:	e7fa      	b.n	8002814 <IIS2DH_ACC_GetFullScale+0x24>
      break;
 800281e:	2310      	movs	r3, #16
 8002820:	e7f8      	b.n	8002814 <IIS2DH_ACC_GetFullScale+0x24>
      break;
 8002822:	2308      	movs	r3, #8
 8002824:	e7f6      	b.n	8002814 <IIS2DH_ACC_GetFullScale+0x24>
      *FullScale = -1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800282a:	6023      	str	r3, [r4, #0]
    return IIS2DH_ERROR;
 800282c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8002830:	b002      	add	sp, #8
 8002832:	bd10      	pop	{r4, pc}

08002834 <IIS2DH_ACC_GetSensitivity>:
{
 8002834:	b530      	push	{r4, r5, lr}
  if (iis2dh_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DH_OK)
 8002836:	f100 041c 	add.w	r4, r0, #28
{
 800283a:	b083      	sub	sp, #12
 800283c:	460d      	mov	r5, r1
  if (iis2dh_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DH_OK)
 800283e:	4620      	mov	r0, r4
 8002840:	f10d 0106 	add.w	r1, sp, #6
 8002844:	f000 fa80 	bl	8002d48 <iis2dh_full_scale_get>
 8002848:	b970      	cbnz	r0, 8002868 <IIS2DH_ACC_GetSensitivity+0x34>
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &mode) != IIS2DH_OK)
 800284a:	f10d 0107 	add.w	r1, sp, #7
 800284e:	4620      	mov	r0, r4
 8002850:	f000 f9e0 	bl	8002c14 <iis2dh_operating_mode_get>
 8002854:	b940      	cbnz	r0, 8002868 <IIS2DH_ACC_GetSensitivity+0x34>
  switch(mode)
 8002856:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d018      	beq.n	8002890 <IIS2DH_ACC_GetSensitivity+0x5c>
 800285e:	2b02      	cmp	r3, #2
 8002860:	d00e      	beq.n	8002880 <IIS2DH_ACC_GetSensitivity+0x4c>
 8002862:	b12b      	cbz	r3, 8002870 <IIS2DH_ACC_GetSensitivity+0x3c>
      *Sensitivity = -1.0f;
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <IIS2DH_ACC_GetSensitivity+0x98>)
 8002866:	602b      	str	r3, [r5, #0]
    return IIS2DH_ERROR;
 8002868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800286c:	b003      	add	sp, #12
 800286e:	bd30      	pop	{r4, r5, pc}
    switch (full_scale)
 8002870:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d8f5      	bhi.n	8002864 <IIS2DH_ACC_GetSensitivity+0x30>
 8002878:	e8df f003 	tbb	[pc, r3]
 800287c:	1d151f1b 	.word	0x1d151f1b
    switch (full_scale)
 8002880:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d8ed      	bhi.n	8002864 <IIS2DH_ACC_GetSensitivity+0x30>
 8002888:	e8df f003 	tbb	[pc, r3]
 800288c:	1d1b0f0a 	.word	0x1d1b0f0a
    switch (full_scale)
 8002890:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d8e5      	bhi.n	8002864 <IIS2DH_ACC_GetSensitivity+0x30>
 8002898:	e8df f003 	tbb	[pc, r3]
 800289c:	11020905 	.word	0x11020905
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <IIS2DH_ACC_GetSensitivity+0x9c>)
      *Sensitivity = IIS2DH_ACC_SENSITIVITY_8G_LPM;
 80028a2:	602b      	str	r3, [r5, #0]
 80028a4:	e7e2      	b.n	800286c <IIS2DH_ACC_GetSensitivity+0x38>
 80028a6:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <IIS2DH_ACC_GetSensitivity+0xa0>)
 80028a8:	e7fb      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
 80028aa:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <IIS2DH_ACC_GetSensitivity+0xa4>)
 80028ac:	e7f9      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
 80028ae:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <IIS2DH_ACC_GetSensitivity+0xa8>)
 80028b0:	e7f7      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
 80028b2:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <IIS2DH_ACC_GetSensitivity+0xac>)
 80028b4:	e7f5      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <IIS2DH_ACC_GetSensitivity+0xb0>)
 80028b8:	e7f3      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <IIS2DH_ACC_GetSensitivity+0xb4>)
 80028bc:	e7f1      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <IIS2DH_ACC_GetSensitivity+0xb8>)
 80028c0:	e7ef      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <IIS2DH_ACC_GetSensitivity+0xbc>)
 80028c4:	e7ed      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <IIS2DH_ACC_GetSensitivity+0xc0>)
 80028c8:	e7eb      	b.n	80028a2 <IIS2DH_ACC_GetSensitivity+0x6e>
 80028ca:	bf00      	nop
 80028cc:	bf800000 	.word	0xbf800000
 80028d0:	417a147b 	.word	0x417a147b
 80028d4:	407a3d71 	.word	0x407a3d71
 80028d8:	41fa0000 	.word	0x41fa0000
 80028dc:	40f9eb85 	.word	0x40f9eb85
 80028e0:	3f7ae148 	.word	0x3f7ae148
 80028e4:	413b851f 	.word	0x413b851f
 80028e8:	3ff9999a 	.word	0x3ff9999a
 80028ec:	423bcccd 	.word	0x423bcccd
 80028f0:	427a0000 	.word	0x427a0000
 80028f4:	433cae14 	.word	0x433cae14

080028f8 <IIS2DH_ACC_GetOutputDataRate>:
{
 80028f8:	b510      	push	{r4, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	460c      	mov	r4, r1
  if (iis2dh_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DH_OK)
 80028fe:	301c      	adds	r0, #28
 8002900:	f10d 0107 	add.w	r1, sp, #7
 8002904:	f000 f9c0 	bl	8002c88 <iis2dh_data_rate_get>
 8002908:	bb18      	cbnz	r0, 8002952 <IIS2DH_ACC_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 800290a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800290e:	2b09      	cmp	r3, #9
 8002910:	d81d      	bhi.n	800294e <IIS2DH_ACC_GetOutputDataRate+0x56>
 8002912:	e8df f003 	tbb	[pc, r3]
 8002916:	050a      	.short	0x050a
 8002918:	1816140c 	.word	0x1816140c
 800291c:	0e12101a 	.word	0x0e12101a
 8002920:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    *odr =  0.0f;
 8002924:	6023      	str	r3, [r4, #0]
}
 8002926:	b002      	add	sp, #8
 8002928:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 800292a:	2300      	movs	r3, #0
 800292c:	e7fa      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <IIS2DH_ACC_GetOutputDataRate+0x60>)
 8002930:	e7f8      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <IIS2DH_ACC_GetOutputDataRate+0x64>)
 8002934:	e7f6      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 8002936:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <IIS2DH_ACC_GetOutputDataRate+0x68>)
 8002938:	e7f4      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <IIS2DH_ACC_GetOutputDataRate+0x6c>)
 800293c:	e7f2      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 800293e:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <IIS2DH_ACC_GetOutputDataRate+0x70>)
 8002940:	e7f0      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <IIS2DH_ACC_GetOutputDataRate+0x74>)
 8002944:	e7ee      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <IIS2DH_ACC_GetOutputDataRate+0x78>)
 8002948:	e7ec      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 800294a:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <IIS2DH_ACC_GetOutputDataRate+0x7c>)
 800294c:	e7ea      	b.n	8002924 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    *odr = -1.0f;
 800294e:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <IIS2DH_ACC_GetOutputDataRate+0x80>)
 8002950:	6023      	str	r3, [r4, #0]
    return IIS2DH_ERROR;
 8002952:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002956:	e7e6      	b.n	8002926 <IIS2DH_ACC_GetOutputDataRate+0x2e>
 8002958:	41200000 	.word	0x41200000
 800295c:	44a80000 	.word	0x44a80000
 8002960:	43c80000 	.word	0x43c80000
 8002964:	44ca8000 	.word	0x44ca8000
 8002968:	41c80000 	.word	0x41c80000
 800296c:	42480000 	.word	0x42480000
 8002970:	42c80000 	.word	0x42c80000
 8002974:	43480000 	.word	0x43480000
 8002978:	bf800000 	.word	0xbf800000

0800297c <IIS2DH_ACC_GetAxesRaw>:
{
 800297c:	b530      	push	{r4, r5, lr}
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 800297e:	f100 051c 	add.w	r5, r0, #28
{
 8002982:	b085      	sub	sp, #20
 8002984:	460c      	mov	r4, r1
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 8002986:	4628      	mov	r0, r5
 8002988:	f10d 0107 	add.w	r1, sp, #7
 800298c:	f000 f942 	bl	8002c14 <iis2dh_operating_mode_get>
 8002990:	b9e0      	cbnz	r0, 80029cc <IIS2DH_ACC_GetAxesRaw+0x50>
  switch (op_mode)
 8002992:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d818      	bhi.n	80029cc <IIS2DH_ACC_GetAxesRaw+0x50>
 800299a:	4a0e      	ldr	r2, [pc, #56]	@ (80029d4 <IIS2DH_ACC_GetAxesRaw+0x58>)
  if (iis2dh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DH_OK)
 800299c:	4628      	mov	r0, r5
 800299e:	a902      	add	r1, sp, #8
 80029a0:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 80029a4:	f000 fa04 	bl	8002db0 <iis2dh_acceleration_raw_get>
 80029a8:	b980      	cbnz	r0, 80029cc <IIS2DH_ACC_GetAxesRaw+0x50>
  Value->x = (data_raw.i16bit[0] / divisor);
 80029aa:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Value->y = (data_raw.i16bit[1] / divisor);
 80029ae:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Value->x = (data_raw.i16bit[0] / divisor);
 80029b2:	fb92 f2f5 	sdiv	r2, r2, r5
  Value->y = (data_raw.i16bit[1] / divisor);
 80029b6:	fb93 f3f5 	sdiv	r3, r3, r5
  Value->x = (data_raw.i16bit[0] / divisor);
 80029ba:	8022      	strh	r2, [r4, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80029bc:	8063      	strh	r3, [r4, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80029be:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80029c2:	fb93 f3f5 	sdiv	r3, r3, r5
 80029c6:	80a3      	strh	r3, [r4, #4]
}
 80029c8:	b005      	add	sp, #20
 80029ca:	bd30      	pop	{r4, r5, pc}
    return IIS2DH_ERROR;
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029d0:	e7fa      	b.n	80029c8 <IIS2DH_ACC_GetAxesRaw+0x4c>
 80029d2:	bf00      	nop
 80029d4:	080172a8 	.word	0x080172a8

080029d8 <IIS2DH_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 80029d8:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d023      	beq.n	8002a28 <IIS2DH_ACC_Enable+0x50>
{
 80029e0:	b530      	push	{r4, r5, lr}
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 80029e2:	2309      	movs	r3, #9
{
 80029e4:	b083      	sub	sp, #12
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80029e6:	f100 051c 	add.w	r5, r0, #28
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 80029ea:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80029ee:	4604      	mov	r4, r0
 80029f0:	2301      	movs	r3, #1
 80029f2:	aa01      	add	r2, sp, #4
 80029f4:	2120      	movs	r1, #32
 80029f6:	4628      	mov	r0, r5
 80029f8:	f000 f896 	bl	8002b28 <iis2dh_read_reg>
  if (ret == 0) {
 80029fc:	b128      	cbz	r0, 8002a0a <IIS2DH_ACC_Enable+0x32>
  pObj->acc_is_enabled = 1;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	2000      	movs	r0, #0
  pObj->acc_is_enabled = 1;
 8002a02:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
}
 8002a06:	b003      	add	sp, #12
 8002a08:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.xen = 1;
 8002a0a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002a0e:	f021 0107 	bic.w	r1, r1, #7
 8002a12:	f041 0107 	orr.w	r1, r1, #7
 8002a16:	f88d 1004 	strb.w	r1, [sp, #4]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	aa01      	add	r2, sp, #4
 8002a1e:	4628      	mov	r0, r5
 8002a20:	2120      	movs	r1, #32
 8002a22:	f000 f889 	bl	8002b38 <iis2dh_write_reg>
 8002a26:	e7ea      	b.n	80029fe <IIS2DH_ACC_Enable+0x26>
}
 8002a28:	2000      	movs	r0, #0
 8002a2a:	4770      	bx	lr

08002a2c <IIS2DH_ACC_GetAxes>:
{
 8002a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 8002a30:	f100 051c 	add.w	r5, r0, #28
{
 8002a34:	b084      	sub	sp, #16
 8002a36:	4604      	mov	r4, r0
  float sensitivity = 0.0f;
 8002a38:	2300      	movs	r3, #0
{
 8002a3a:	460e      	mov	r6, r1
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f10d 0103 	add.w	r1, sp, #3
  float sensitivity = 0.0f;
 8002a42:	9301      	str	r3, [sp, #4]
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 8002a44:	f000 f8e6 	bl	8002c14 <iis2dh_operating_mode_get>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d142      	bne.n	8002ad2 <IIS2DH_ACC_GetAxes+0xa6>
  switch (op_mode)
 8002a4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d83e      	bhi.n	8002ad2 <IIS2DH_ACC_GetAxes+0xa6>
 8002a54:	4a20      	ldr	r2, [pc, #128]	@ (8002ad8 <IIS2DH_ACC_GetAxes+0xac>)
  if (iis2dh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DH_OK)
 8002a56:	4628      	mov	r0, r5
 8002a58:	a902      	add	r1, sp, #8
 8002a5a:	f932 8013 	ldrsh.w	r8, [r2, r3, lsl #1]
 8002a5e:	f000 f9a7 	bl	8002db0 <iis2dh_acceleration_raw_get>
 8002a62:	bbb0      	cbnz	r0, 8002ad2 <IIS2DH_ACC_GetAxes+0xa6>
  if (IIS2DH_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DH_OK)
 8002a64:	4620      	mov	r0, r4
 8002a66:	a901      	add	r1, sp, #4
  Value->x = (data_raw.i16bit[0] / divisor);
 8002a68:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002a6c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Value->x = (data_raw.i16bit[0] / divisor);
 8002a70:	fb92 f2f8 	sdiv	r2, r2, r8
  Value->y = (data_raw.i16bit[1] / divisor);
 8002a74:	fb93 f3f8 	sdiv	r3, r3, r8
  Value->x = (data_raw.i16bit[0] / divisor);
 8002a78:	b217      	sxth	r7, r2
  Value->y = (data_raw.i16bit[1] / divisor);
 8002a7a:	b21d      	sxth	r5, r3
  Value->z = (data_raw.i16bit[2] / divisor);
 8002a7c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002a80:	fb93 f3f8 	sdiv	r3, r3, r8
 8002a84:	b21c      	sxth	r4, r3
  if (IIS2DH_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DH_OK)
 8002a86:	f7ff fed5 	bl	8002834 <IIS2DH_ACC_GetSensitivity>
 8002a8a:	bb10      	cbnz	r0, 8002ad2 <IIS2DH_ACC_GetAxes+0xa6>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002a8c:	ee07 7a90 	vmov	s15, r7
 8002a90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002a94:	ee07 5a90 	vmov	s15, r5
 8002a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002a9c:	ee07 4a90 	vmov	s15, r4
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002aa0:	ed9d 6a01 	vldr	s12, [sp, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002aa8:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002aac:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002ab0:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002ab4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002ab8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002ac0:	edc6 6a00 	vstr	s13, [r6]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002ac4:	ed86 7a01 	vstr	s14, [r6, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002ac8:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8002acc:	b004      	add	sp, #16
 8002ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return IIS2DH_ERROR;
 8002ad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ad6:	e7f9      	b.n	8002acc <IIS2DH_ACC_GetAxes+0xa0>
 8002ad8:	080172a8 	.word	0x080172a8

08002adc <IIS2DH_RegisterBusIO>:
  if (pObj == NULL)
 8002adc:	b1e0      	cbz	r0, 8002b18 <IIS2DH_RegisterBusIO+0x3c>
{
 8002ade:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8002ae0:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8002ae4:	688a      	ldr	r2, [r1, #8]
 8002ae6:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ae8:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8002aec:	7b0a      	ldrb	r2, [r1, #12]
 8002aee:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002af0:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 8002af4:	6989      	ldr	r1, [r1, #24]
 8002af6:	6181      	str	r1, [r0, #24]
 8002af8:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8002afa:	4909      	ldr	r1, [pc, #36]	@ (8002b20 <IIS2DH_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8002afc:	4a09      	ldr	r2, [pc, #36]	@ (8002b24 <IIS2DH_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002afe:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002b00:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8002b04:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 8002b06:	b113      	cbz	r3, 8002b0e <IIS2DH_RegisterBusIO+0x32>
}
 8002b08:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8002b0c:	4718      	bx	r3
}
 8002b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	08002491 	.word	0x08002491
 8002b24:	080024a1 	.word	0x080024a1

08002b28 <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8002b28:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b2a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8002b2e:	46a4      	mov	ip, r4
  return ret;
}
 8002b30:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b34:	4760      	bx	ip
 8002b36:	bf00      	nop

08002b38 <iis2dh_write_reg>:
  *
  */
int32_t iis2dh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002b38:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b3a:	6804      	ldr	r4, [r0, #0]
 8002b3c:	6880      	ldr	r0, [r0, #8]
 8002b3e:	46a4      	mov	ip, r4
  return ret;
}
 8002b40:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b44:	4760      	bx	ip
 8002b46:	bf00      	nop

08002b48 <iis2dh_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_temperature_meas_set(stmdev_ctx_t *ctx,
                                    iis2dh_temp_en_t val)
{
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b50:	6880      	ldr	r0, [r0, #8]
 8002b52:	6866      	ldr	r6, [r4, #4]
 8002b54:	2301      	movs	r3, #1
 8002b56:	aa01      	add	r2, sp, #4
 8002b58:	211f      	movs	r1, #31
 8002b5a:	47b0      	blx	r6
  iis2dh_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_TEMP_CFG_REG,
                        (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0) {
 8002b5c:	b958      	cbnz	r0, 8002b76 <iis2dh_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
 8002b5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b62:	6826      	ldr	r6, [r4, #0]
 8002b64:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
 8002b66:	f365 1387 	bfi	r3, r5, #6, #2
 8002b6a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b6e:	aa01      	add	r2, sp, #4
 8002b70:	2301      	movs	r3, #1
 8002b72:	211f      	movs	r1, #31
 8002b74:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_TEMP_CFG_REG,
                           (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
}
 8002b76:	b002      	add	sp, #8
 8002b78:	bd70      	pop	{r4, r5, r6, pc}
 8002b7a:	bf00      	nop

08002b7c <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	4604      	mov	r4, r0
 8002b80:	b082      	sub	sp, #8
 8002b82:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b84:	6880      	ldr	r0, [r0, #8]
 8002b86:	6866      	ldr	r6, [r4, #4]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	466a      	mov	r2, sp
 8002b8c:	2120      	movs	r1, #32
 8002b8e:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 8002b90:	bb10      	cbnz	r0, 8002bd8 <iis2dh_operating_mode_set+0x5c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b92:	68a0      	ldr	r0, [r4, #8]
 8002b94:	6866      	ldr	r6, [r4, #4]
 8002b96:	2301      	movs	r3, #1
 8002b98:	aa01      	add	r2, sp, #4
 8002b9a:	2123      	movs	r1, #35	@ 0x23
 8002b9c:	47b0      	blx	r6
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                          1);
  }

  if (ret == 0) {
 8002b9e:	b9d8      	cbnz	r0, 8002bd8 <iis2dh_operating_mode_set+0x5c>
    if ( val == IIS2DH_HR_12bit ) {
 8002ba0:	b1e5      	cbz	r5, 8002bdc <iis2dh_operating_mode_set+0x60>
      ctrl_reg1.lpen = 0;
      ctrl_reg4.hr   = 1;
    }

    if (val == IIS2DH_NM_10bit) {
 8002ba2:	2d01      	cmp	r5, #1
 8002ba4:	d127      	bne.n	8002bf6 <iis2dh_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
 8002ba6:	f89d 3000 	ldrb.w	r3, [sp]
 8002baa:	f360 03c3 	bfi	r3, r0, #3, #1
 8002bae:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
 8002bb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bb6:	f360 03c3 	bfi	r3, r0, #3, #1
 8002bba:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002bbe:	6825      	ldr	r5, [r4, #0]
 8002bc0:	68a0      	ldr	r0, [r4, #8]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	466a      	mov	r2, sp
 8002bc6:	2120      	movs	r1, #32
 8002bc8:	47a8      	blx	r5

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                           1);
  }

  if (ret == 0) {
 8002bca:	b928      	cbnz	r0, 8002bd8 <iis2dh_operating_mode_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002bcc:	6825      	ldr	r5, [r4, #0]
 8002bce:	68a0      	ldr	r0, [r4, #8]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	aa01      	add	r2, sp, #4
 8002bd4:	2123      	movs	r1, #35	@ 0x23
 8002bd6:	47a8      	blx	r5
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
      ctrl_reg1.lpen = 0;
 8002bdc:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
 8002be0:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
 8002be4:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
 8002be8:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
 8002bec:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
 8002bf0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == IIS2DH_LP_8bit) {
 8002bf4:	e7e3      	b.n	8002bbe <iis2dh_operating_mode_set+0x42>
 8002bf6:	2d02      	cmp	r5, #2
 8002bf8:	d1e1      	bne.n	8002bbe <iis2dh_operating_mode_set+0x42>
      ctrl_reg1.lpen = 1;
 8002bfa:	f89d 3000 	ldrb.w	r3, [sp]
 8002bfe:	f043 0308 	orr.w	r3, r3, #8
 8002c02:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
 8002c06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c0a:	f360 03c3 	bfi	r3, r0, #3, #1
 8002c0e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002c12:	e7d4      	b.n	8002bbe <iis2dh_operating_mode_set+0x42>

08002c14 <iis2dh_operating_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_get(stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t *val)
{
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4604      	mov	r4, r0
 8002c18:	b082      	sub	sp, #8
 8002c1a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c1c:	6880      	ldr	r0, [r0, #8]
 8002c1e:	6866      	ldr	r6, [r4, #4]
 8002c20:	2301      	movs	r3, #1
 8002c22:	466a      	mov	r2, sp
 8002c24:	2120      	movs	r1, #32
 8002c26:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 8002c28:	b988      	cbnz	r0, 8002c4e <iis2dh_operating_mode_get+0x3a>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8002c30:	aa01      	add	r2, sp, #4
 8002c32:	2123      	movs	r1, #35	@ 0x23
 8002c34:	47b0      	blx	r6
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                          1);

    if ( ctrl_reg1.lpen == PROPERTY_ENABLE ) {
 8002c36:	f89d 3000 	ldrb.w	r3, [sp]
 8002c3a:	071b      	lsls	r3, r3, #28
      *val = IIS2DH_LP_8bit;
    }

    else if (ctrl_reg4.hr == PROPERTY_ENABLE ) {
 8002c3c:	bf5d      	ittte	pl
 8002c3e:	f89d 3004 	ldrbpl.w	r3, [sp, #4]
 8002c42:	f083 0308 	eorpl.w	r3, r3, #8
 8002c46:	f3c3 03c0 	ubfxpl	r3, r3, #3, #1
 8002c4a:	2302      	movmi	r3, #2
      *val = IIS2DH_HR_12bit;
 8002c4c:	702b      	strb	r3, [r5, #0]
      *val = IIS2DH_NM_10bit;
    }
  }

  return ret;
}
 8002c4e:	b002      	add	sp, #8
 8002c50:	bd70      	pop	{r4, r5, r6, pc}
 8002c52:	bf00      	nop

08002c54 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4604      	mov	r4, r0
 8002c58:	b082      	sub	sp, #8
 8002c5a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c5c:	6880      	ldr	r0, [r0, #8]
 8002c5e:	6866      	ldr	r6, [r4, #4]
 8002c60:	2301      	movs	r3, #1
 8002c62:	aa01      	add	r2, sp, #4
 8002c64:	2120      	movs	r1, #32
 8002c66:	47b0      	blx	r6
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 8002c68:	b958      	cbnz	r0, 8002c82 <iis2dh_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
 8002c6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002c6e:	6826      	ldr	r6, [r4, #0]
 8002c70:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
 8002c72:	f365 1307 	bfi	r3, r5, #4, #4
 8002c76:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002c7a:	aa01      	add	r2, sp, #4
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	2120      	movs	r1, #32
 8002c80:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                           1);
  }

  return ret;
}
 8002c82:	b002      	add	sp, #8
 8002c84:	bd70      	pop	{r4, r5, r6, pc}
 8002c86:	bf00      	nop

08002c88 <iis2dh_data_rate_get>:
  * @param  val      get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_get(stmdev_ctx_t *ctx, iis2dh_odr_t *val)
{
 8002c88:	b530      	push	{r4, r5, lr}
 8002c8a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002c92:	aa01      	add	r2, sp, #4
{
 8002c94:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c96:	2120      	movs	r1, #32
 8002c98:	47a8      	blx	r5
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  switch (ctrl_reg1.odr) {
 8002c9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d81a      	bhi.n	8002cdc <iis2dh_data_rate_get+0x54>
 8002ca6:	e8df f003 	tbb	[pc, r3]
 8002caa:	0905      	.short	0x0905
 8002cac:	110f0d0b 	.word	0x110f0d0b
 8002cb0:	1513      	.short	0x1513
 8002cb2:	17          	.byte	0x17
 8002cb3:	00          	.byte	0x00
 8002cb4:	2301      	movs	r3, #1
    case IIS2DH_POWER_DOWN:
      *val = IIS2DH_POWER_DOWN;
 8002cb6:	7023      	strb	r3, [r4, #0]
      *val = IIS2DH_POWER_DOWN;
      break;
  }

  return ret;
}
 8002cb8:	b003      	add	sp, #12
 8002cba:	bd30      	pop	{r4, r5, pc}
      break;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e7fa      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>
      break;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e7f8      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>
      break;
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e7f6      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>
      break;
 8002cc8:	2305      	movs	r3, #5
 8002cca:	e7f4      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>
      break;
 8002ccc:	2306      	movs	r3, #6
 8002cce:	e7f2      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>
      break;
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	e7f0      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>
      break;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	e7ee      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>
      break;
 8002cd8:	2309      	movs	r3, #9
 8002cda:	e7ec      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>
  switch (ctrl_reg1.odr) {
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e7ea      	b.n	8002cb6 <iis2dh_data_rate_get+0x2e>

08002ce0 <iis2dh_high_pass_on_outputs_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_high_pass_on_outputs_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ce8:	6880      	ldr	r0, [r0, #8]
 8002cea:	6866      	ldr	r6, [r4, #4]
 8002cec:	2301      	movs	r3, #1
 8002cee:	aa01      	add	r2, sp, #4
 8002cf0:	2121      	movs	r1, #33	@ 0x21
 8002cf2:	47b0      	blx	r6
  iis2dh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                        1);

  if (ret == 0) {
 8002cf4:	b958      	cbnz	r0, 8002d0e <iis2dh_high_pass_on_outputs_set+0x2e>
    ctrl_reg2.fds = val;
 8002cf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002cfa:	6826      	ldr	r6, [r4, #0]
 8002cfc:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg2.fds = val;
 8002cfe:	f365 03c3 	bfi	r3, r5, #3, #1
 8002d02:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d06:	aa01      	add	r2, sp, #4
 8002d08:	2301      	movs	r3, #1
 8002d0a:	2121      	movs	r1, #33	@ 0x21
 8002d0c:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  return ret;
}
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
 8002d12:	bf00      	nop

08002d14 <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4604      	mov	r4, r0
 8002d18:	b082      	sub	sp, #8
 8002d1a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d1c:	6880      	ldr	r0, [r0, #8]
 8002d1e:	6866      	ldr	r6, [r4, #4]
 8002d20:	2301      	movs	r3, #1
 8002d22:	aa01      	add	r2, sp, #4
 8002d24:	2123      	movs	r1, #35	@ 0x23
 8002d26:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002d28:	b958      	cbnz	r0, 8002d42 <iis2dh_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
 8002d2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d2e:	6826      	ldr	r6, [r4, #0]
 8002d30:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
 8002d32:	f365 1305 	bfi	r3, r5, #4, #2
 8002d36:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d3a:	aa01      	add	r2, sp, #4
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	2123      	movs	r1, #35	@ 0x23
 8002d40:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002d42:	b002      	add	sp, #8
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
 8002d46:	bf00      	nop

08002d48 <iis2dh_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_get(stmdev_ctx_t *ctx, iis2dh_fs_t *val)
{
 8002d48:	b530      	push	{r4, r5, lr}
 8002d4a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002d52:	aa01      	add	r2, sp, #4
{
 8002d54:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d56:	2123      	movs	r1, #35	@ 0x23
 8002d58:	47a8      	blx	r5
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  switch (ctrl_reg4.fs) {
 8002d5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d5e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d006      	beq.n	8002d74 <iis2dh_full_scale_get+0x2c>
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d004      	beq.n	8002d74 <iis2dh_full_scale_get+0x2c>
 8002d6a:	f1a3 0301 	sub.w	r3, r3, #1
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
    case IIS2DH_2g:
      *val = IIS2DH_2g;
 8002d74:	7023      	strb	r3, [r4, #0]
      *val = IIS2DH_2g;
      break;
  }

  return ret;
}
 8002d76:	b003      	add	sp, #12
 8002d78:	bd30      	pop	{r4, r5, pc}
 8002d7a:	bf00      	nop

08002d7c <iis2dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	4604      	mov	r4, r0
 8002d80:	b082      	sub	sp, #8
 8002d82:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d84:	6880      	ldr	r0, [r0, #8]
 8002d86:	6866      	ldr	r6, [r4, #4]
 8002d88:	2301      	movs	r3, #1
 8002d8a:	aa01      	add	r2, sp, #4
 8002d8c:	2123      	movs	r1, #35	@ 0x23
 8002d8e:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002d90:	b958      	cbnz	r0, 8002daa <iis2dh_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
 8002d92:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d96:	6826      	ldr	r6, [r4, #0]
 8002d98:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
 8002d9a:	f365 13c7 	bfi	r3, r5, #7, #1
 8002d9e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002da2:	aa01      	add	r2, sp, #4
 8002da4:	2301      	movs	r3, #1
 8002da6:	2123      	movs	r1, #35	@ 0x23
 8002da8:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002daa:	b002      	add	sp, #8
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
 8002dae:	bf00      	nop

08002db0 <iis2dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002db0:	b530      	push	{r4, r5, lr}
 8002db2:	b083      	sub	sp, #12
 8002db4:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002db6:	466a      	mov	r2, sp
 8002db8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002dbc:	2306      	movs	r3, #6
 8002dbe:	2128      	movs	r1, #40	@ 0x28
 8002dc0:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_OUT_X_L, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002dc2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002dc6:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002dca:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002dce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002dd2:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002dd4:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002dd8:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002ddc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002de0:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002de2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002de6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002dea:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8002dec:	b003      	add	sp, #12
 8002dee:	bd30      	pop	{r4, r5, pc}

08002df0 <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002df0:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002df2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8002df6:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002df8:	46a4      	mov	ip, r4
 8002dfa:	2301      	movs	r3, #1
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
  return ret;
}
 8002dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e00:	210f      	movs	r1, #15
 8002e02:	4760      	bx	ip

08002e04 <iis2dh_data_format_set>:
  * @param  val      change the values of ble in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_format_set(stmdev_ctx_t *ctx, iis2dh_ble_t val)
{
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4604      	mov	r4, r0
 8002e08:	b082      	sub	sp, #8
 8002e0a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e0c:	6880      	ldr	r0, [r0, #8]
 8002e0e:	6866      	ldr	r6, [r4, #4]
 8002e10:	2301      	movs	r3, #1
 8002e12:	aa01      	add	r2, sp, #4
 8002e14:	2123      	movs	r1, #35	@ 0x23
 8002e16:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002e18:	b958      	cbnz	r0, 8002e32 <iis2dh_data_format_set+0x2e>
    ctrl_reg4.ble = (uint8_t)val;
 8002e1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e1e:	6826      	ldr	r6, [r4, #0]
 8002e20:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.ble = (uint8_t)val;
 8002e22:	f365 1386 	bfi	r3, r5, #6, #1
 8002e26:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e2a:	aa01      	add	r2, sp, #4
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	2123      	movs	r1, #35	@ 0x23
 8002e30:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002e32:	b002      	add	sp, #8
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	bf00      	nop

08002e38 <iis2dh_boot_set>:
  * @param  val      change the values of boot in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e40:	6880      	ldr	r0, [r0, #8]
 8002e42:	6866      	ldr	r6, [r4, #4]
 8002e44:	2301      	movs	r3, #1
 8002e46:	aa01      	add	r2, sp, #4
 8002e48:	2124      	movs	r1, #36	@ 0x24
 8002e4a:	47b0      	blx	r6
  iis2dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5,
                        1);

  if (ret == 0) {
 8002e4c:	b958      	cbnz	r0, 8002e66 <iis2dh_boot_set+0x2e>
    ctrl_reg5.boot = val;
 8002e4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e52:	6826      	ldr	r6, [r4, #0]
 8002e54:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg5.boot = val;
 8002e56:	f365 13c7 	bfi	r3, r5, #7, #1
 8002e5a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e5e:	aa01      	add	r2, sp, #4
 8002e60:	2301      	movs	r3, #1
 8002e62:	2124      	movs	r1, #36	@ 0x24
 8002e64:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5,
                           1);
  }

  return ret;
}
 8002e66:	b002      	add	sp, #8
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
 8002e6a:	bf00      	nop

08002e6c <iis2dh_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_spi_mode_set(stmdev_ctx_t *ctx, iis2dh_sim_t val)
{
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	4604      	mov	r4, r0
 8002e70:	b082      	sub	sp, #8
 8002e72:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e74:	6880      	ldr	r0, [r0, #8]
 8002e76:	6866      	ldr	r6, [r4, #4]
 8002e78:	2301      	movs	r3, #1
 8002e7a:	aa01      	add	r2, sp, #4
 8002e7c:	2123      	movs	r1, #35	@ 0x23
 8002e7e:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002e80:	b958      	cbnz	r0, 8002e9a <iis2dh_spi_mode_set+0x2e>
    ctrl_reg4.sim = (uint8_t)val;
 8002e82:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e86:	6826      	ldr	r6, [r4, #0]
 8002e88:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.sim = (uint8_t)val;
 8002e8a:	f365 0300 	bfi	r3, r5, #0, #1
 8002e8e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e92:	aa01      	add	r2, sp, #4
 8002e94:	2301      	movs	r3, #1
 8002e96:	2123      	movs	r1, #35	@ 0x23
 8002e98:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002e9a:	b002      	add	sp, #8
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	bf00      	nop

08002ea0 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002ea0:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002ea2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
  Capabilities->Magneto      = 1;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
  Capabilities->GyroMaxOdr   = 0.0f;
 8002ea6:	2300      	movs	r3, #0
  Capabilities->GyroMaxFS    = 0;
 8002ea8:	2000      	movs	r0, #0
  Capabilities->AccMaxOdr    = 0.0f;
  Capabilities->MagMaxOdr    = 100.0f;
 8002eaa:	4a06      	ldr	r2, [pc, #24]	@ (8002ec4 <IIS2MDC_GetCapabilities+0x24>)
  Capabilities->Acc          = 0;
 8002eac:	600c      	str	r4, [r1, #0]
  Capabilities->MagMaxFS     = 50;
 8002eae:	2432      	movs	r4, #50	@ 0x32
 8002eb0:	60cc      	str	r4, [r1, #12]
  Capabilities->AccMaxFS     = 0;
 8002eb2:	e9c1 0001 	strd	r0, r0, [r1, #4]
  return IIS2MDC_OK;
}
 8002eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->GyroMaxOdr   = 0.0f;
 8002eba:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002ebc:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002ebe:	618a      	str	r2, [r1, #24]
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	42c80000 	.word	0x42c80000

08002ec8 <IIS2MDC_MAG_GetSensitivity>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8002ec8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002ecc:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 8002ece:	2000      	movs	r0, #0
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop

08002ed4 <IIS2MDC_MAG_GetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
  UNUSED(pObj);
  *FullScale = 50;
 8002ed4:	2332      	movs	r3, #50	@ 0x32
 8002ed6:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 8002ed8:	2000      	movs	r0, #0
 8002eda:	4770      	bx	lr

08002edc <IIS2MDC_MAG_SetFullScale>:
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
}
 8002edc:	2000      	movs	r0, #0
 8002ede:	4770      	bx	lr

08002ee0 <IIS2MDC_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8002ee0:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d00b      	beq.n	8002f00 <IIS2MDC_MAG_Enable+0x20>
{
 8002ee8:	b510      	push	{r4, lr}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8002eea:	2100      	movs	r1, #0
 8002eec:	4604      	mov	r4, r0
 8002eee:	301c      	adds	r0, #28
 8002ef0:	f000 f944 	bl	800317c <iis2mdc_operating_mode_set>
 8002ef4:	b930      	cbnz	r0, 8002f04 <IIS2MDC_MAG_Enable+0x24>
  pObj->mag_is_enabled = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return IIS2MDC_OK;
 8002efc:	2000      	movs	r0, #0
}
 8002efe:	bd10      	pop	{r4, pc}
    return IIS2MDC_OK;
 8002f00:	2000      	movs	r0, #0
}
 8002f02:	4770      	bx	lr
    return IIS2MDC_ERROR;
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8002f08:	bd10      	pop	{r4, pc}
 8002f0a:	bf00      	nop

08002f0c <IIS2MDC_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8002f0c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002f10:	b90b      	cbnz	r3, 8002f16 <IIS2MDC_MAG_Disable+0xa>
    return IIS2MDC_OK;
 8002f12:	2000      	movs	r0, #0
}
 8002f14:	4770      	bx	lr
{
 8002f16:	b510      	push	{r4, lr}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	301c      	adds	r0, #28
 8002f1e:	f000 f92d 	bl	800317c <iis2mdc_operating_mode_set>
 8002f22:	b918      	cbnz	r0, 8002f2c <IIS2MDC_MAG_Disable+0x20>
  pObj->mag_is_enabled = 0;
 8002f24:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS2MDC_OK;
 8002f28:	2000      	movs	r0, #0
}
 8002f2a:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	bf00      	nop

08002f34 <IIS2MDC_DeInit>:
{
 8002f34:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 0U)
 8002f36:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8002f3a:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 8002f3c:	b91b      	cbnz	r3, 8002f46 <IIS2MDC_DeInit+0x12>
  pObj->is_initialized = 0;
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8002f44:	bd10      	pop	{r4, pc}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002f46:	2102      	movs	r1, #2
 8002f48:	301c      	adds	r0, #28
 8002f4a:	f000 f917 	bl	800317c <iis2mdc_operating_mode_set>
 8002f4e:	b910      	cbnz	r0, 8002f56 <IIS2MDC_DeInit+0x22>
  pObj->mag_is_enabled = 0;
 8002f50:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS2MDC_OK;
 8002f54:	e7f3      	b.n	8002f3e <IIS2MDC_DeInit+0xa>
    return IIS2MDC_ERROR;
 8002f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8002f5a:	bd10      	pop	{r4, pc}

08002f5c <IIS2MDC_MAG_SetOutputDataRate>:
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002f5c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002f60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002f68:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002f6a:	d908      	bls.n	8002f7e <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8002f6c:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8002f70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	d80a      	bhi.n	8002f90 <IIS2MDC_MAG_SetOutputDataRate+0x34>
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	e000      	b.n	8002f80 <IIS2MDC_MAG_SetOutputDataRate+0x24>
 8002f7e:	2100      	movs	r1, #0
  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8002f80:	301c      	adds	r0, #28
 8002f82:	f000 f915 	bl	80031b0 <iis2mdc_data_rate_set>
 8002f86:	3800      	subs	r0, #0
 8002f88:	bf18      	it	ne
 8002f8a:	2001      	movne	r0, #1
}
 8002f8c:	4240      	negs	r0, r0
 8002f8e:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002f90:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8002fa4 <IIS2MDC_MAG_SetOutputDataRate+0x48>
 8002f94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	bf94      	ite	ls
 8002f9e:	2102      	movls	r1, #2
 8002fa0:	2103      	movhi	r1, #3
 8002fa2:	e7ed      	b.n	8002f80 <IIS2MDC_MAG_SetOutputDataRate+0x24>
 8002fa4:	42480000 	.word	0x42480000

08002fa8 <IIS2MDC_Init>:
{
 8002fa8:	b538      	push	{r3, r4, r5, lr}
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002faa:	f100 051c 	add.w	r5, r0, #28
{
 8002fae:	4604      	mov	r4, r0
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f000 f930 	bl	8003218 <iis2mdc_block_data_update_set>
 8002fb8:	b990      	cbnz	r0, 8002fe0 <IIS2MDC_Init+0x38>
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002fba:	2102      	movs	r1, #2
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 f8dd 	bl	800317c <iis2mdc_operating_mode_set>
 8002fc2:	b968      	cbnz	r0, 8002fe0 <IIS2MDC_Init+0x38>
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8002fc4:	2103      	movs	r1, #3
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f000 f8f2 	bl	80031b0 <iis2mdc_data_rate_set>
 8002fcc:	4601      	mov	r1, r0
 8002fce:	b938      	cbnz	r0, 8002fe0 <IIS2MDC_Init+0x38>
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f965 	bl	80032a0 <iis2mdc_self_test_set>
 8002fd6:	b918      	cbnz	r0, 8002fe0 <IIS2MDC_Init+0x38>
  pObj->is_initialized = 1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 8002fde:	bd38      	pop	{r3, r4, r5, pc}
    return IIS2MDC_ERROR;
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8002fe4:	bd38      	pop	{r3, r4, r5, pc}
 8002fe6:	bf00      	nop

08002fe8 <IIS2MDC_ReadID>:
{
 8002fe8:	b508      	push	{r3, lr}
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002fea:	301c      	adds	r0, #28
 8002fec:	f000 f94e 	bl	800328c <iis2mdc_device_id_get>
 8002ff0:	3800      	subs	r0, #0
 8002ff2:	bf18      	it	ne
 8002ff4:	2001      	movne	r0, #1
}
 8002ff6:	4240      	negs	r0, r0
 8002ff8:	bd08      	pop	{r3, pc}
 8002ffa:	bf00      	nop

08002ffc <IIS2MDC_MAG_GetOutputDataRate>:
{
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	460c      	mov	r4, r1
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8003002:	301c      	adds	r0, #28
 8003004:	f10d 0107 	add.w	r1, sp, #7
 8003008:	f000 f8ec 	bl	80031e4 <iis2mdc_data_rate_get>
 800300c:	b988      	cbnz	r0, 8003032 <IIS2MDC_MAG_GetOutputDataRate+0x36>
  switch (odr_low_level)
 800300e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d80d      	bhi.n	8003032 <IIS2MDC_MAG_GetOutputDataRate+0x36>
 8003016:	e8df f003 	tbb	[pc, r3]
 800301a:	0206      	.short	0x0206
 800301c:	080a      	.short	0x080a
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <IIS2MDC_MAG_GetOutputDataRate+0x3c>)
      *Odr = 10.0f;
 8003020:	6023      	str	r3, [r4, #0]
}
 8003022:	b002      	add	sp, #8
 8003024:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8003026:	4b05      	ldr	r3, [pc, #20]	@ (800303c <IIS2MDC_MAG_GetOutputDataRate+0x40>)
 8003028:	e7fa      	b.n	8003020 <IIS2MDC_MAG_GetOutputDataRate+0x24>
      break;
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <IIS2MDC_MAG_GetOutputDataRate+0x44>)
 800302c:	e7f8      	b.n	8003020 <IIS2MDC_MAG_GetOutputDataRate+0x24>
      break;
 800302e:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <IIS2MDC_MAG_GetOutputDataRate+0x48>)
 8003030:	e7f6      	b.n	8003020 <IIS2MDC_MAG_GetOutputDataRate+0x24>
  switch (odr_low_level)
 8003032:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003036:	e7f4      	b.n	8003022 <IIS2MDC_MAG_GetOutputDataRate+0x26>
 8003038:	41a00000 	.word	0x41a00000
 800303c:	41200000 	.word	0x41200000
 8003040:	42c80000 	.word	0x42c80000
 8003044:	42480000 	.word	0x42480000

08003048 <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8003048:	b510      	push	{r4, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	460c      	mov	r4, r1
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 800304e:	301c      	adds	r0, #28
 8003050:	4669      	mov	r1, sp
 8003052:	f000 f8fb 	bl	800324c <iis2mdc_magnetic_raw_get>
 8003056:	b930      	cbnz	r0, 8003066 <IIS2MDC_MAG_GetAxesRaw+0x1e>
  {
    return IIS2MDC_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003058:	9a00      	ldr	r2, [sp, #0]
  Value->y = data_raw.i16bit[1];
  Value->z = data_raw.i16bit[2];
 800305a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 800305e:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8003060:	80a3      	strh	r3, [r4, #4]

  return IIS2MDC_OK;
}
 8003062:	b002      	add	sp, #8
 8003064:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8003066:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800306a:	e7fa      	b.n	8003062 <IIS2MDC_MAG_GetAxesRaw+0x1a>

0800306c <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 800306c:	b510      	push	{r4, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	460c      	mov	r4, r1
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003072:	301c      	adds	r0, #28
 8003074:	4669      	mov	r1, sp
 8003076:	f000 f8e9 	bl	800324c <iis2mdc_magnetic_raw_get>
 800307a:	bb38      	cbnz	r0, 80030cc <IIS2MDC_MAG_GetAxes+0x60>

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800307c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003080:	ee06 3a90 	vmov	s13, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003084:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003088:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800308c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003090:	ee07 3a90 	vmov	s15, r3
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003094:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003098:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800309c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80030a0:	eeb7 6a08 	vmov.f32	s12, #120	@ 0x3fc00000  1.5
 80030a4:	ee66 6a86 	vmul.f32	s13, s13, s12
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80030a8:	ee27 7a06 	vmul.f32	s14, s14, s12
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80030ac:	ee67 7a86 	vmul.f32	s15, s15, s12
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80030b0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80030b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80030b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80030bc:	edc4 6a00 	vstr	s13, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80030c0:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80030c4:	edc4 7a02 	vstr	s15, [r4, #8]

  return IIS2MDC_OK;
}
 80030c8:	b002      	add	sp, #8
 80030ca:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030d0:	e7fa      	b.n	80030c8 <IIS2MDC_MAG_GetAxes+0x5c>
 80030d2:	bf00      	nop

080030d4 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030d4:	b430      	push	{r4, r5}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80030d6:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80030d8:	6944      	ldr	r4, [r0, #20]
 80030da:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80030dc:	b925      	cbnz	r5, 80030e8 <ReadMagRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80030de:	46a4      	mov	ip, r4
 80030e0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 80030e4:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80030e6:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80030e8:	46a4      	mov	ip, r4
 80030ea:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 80030ee:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80030f0:	4760      	bx	ip
 80030f2:	bf00      	nop

080030f4 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030f4:	b430      	push	{r4, r5}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80030f6:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80030f8:	6904      	ldr	r4, [r0, #16]
 80030fa:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80030fc:	b925      	cbnz	r5, 8003108 <WriteMagRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80030fe:	46a4      	mov	ip, r4
 8003100:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8003104:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003106:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003108:	46a4      	mov	ip, r4
 800310a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 800310e:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003110:	4760      	bx	ip
 8003112:	bf00      	nop

08003114 <IIS2MDC_RegisterBusIO>:
  if (pObj == NULL)
 8003114:	b350      	cbz	r0, 800316c <IIS2MDC_RegisterBusIO+0x58>
{
 8003116:	b510      	push	{r4, lr}
 8003118:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 800311a:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 800311e:	688a      	ldr	r2, [r1, #8]
 8003120:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8003122:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8003126:	7b0a      	ldrb	r2, [r1, #12]
 8003128:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800312a:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 800312e:	6989      	ldr	r1, [r1, #24]
 8003130:	61a1      	str	r1, [r4, #24]
 8003132:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003134:	490f      	ldr	r1, [pc, #60]	@ (8003174 <IIS2MDC_RegisterBusIO+0x60>)
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003136:	4a10      	ldr	r2, [pc, #64]	@ (8003178 <IIS2MDC_RegisterBusIO+0x64>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003138:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800313a:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle    = pObj;
 800313e:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 8003140:	b18b      	cbz	r3, 8003166 <IIS2MDC_RegisterBusIO+0x52>
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8003142:	4798      	blx	r3
 8003144:	b978      	cbnz	r0, 8003166 <IIS2MDC_RegisterBusIO+0x52>
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8003146:	68a3      	ldr	r3, [r4, #8]
 8003148:	b113      	cbz	r3, 8003150 <IIS2MDC_RegisterBusIO+0x3c>
        if (pObj->is_initialized == 0U)
 800314a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800314e:	b103      	cbz	r3, 8003152 <IIS2MDC_RegisterBusIO+0x3e>
}
 8003150:	bd10      	pop	{r4, pc}
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8003152:	2101      	movs	r1, #1
 8003154:	f104 001c 	add.w	r0, r4, #28
 8003158:	f000 f8bc 	bl	80032d4 <iis2mdc_i2c_interface_set>
 800315c:	3800      	subs	r0, #0
 800315e:	bf18      	it	ne
 8003160:	2001      	movne	r0, #1
 8003162:	4240      	negs	r0, r0
}
 8003164:	bd10      	pop	{r4, pc}
    ret = IIS2MDC_ERROR;
 8003166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800316a:	bd10      	pop	{r4, pc}
    ret = IIS2MDC_ERROR;
 800316c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	080030d5 	.word	0x080030d5
 8003178:	080030f5 	.word	0x080030f5

0800317c <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	4604      	mov	r4, r0
 8003180:	b082      	sub	sp, #8
 8003182:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003184:	6880      	ldr	r0, [r0, #8]
 8003186:	6866      	ldr	r6, [r4, #4]
 8003188:	2301      	movs	r3, #1
 800318a:	aa01      	add	r2, sp, #4
 800318c:	2160      	movs	r1, #96	@ 0x60
 800318e:	47b0      	blx	r6
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8003190:	b958      	cbnz	r0, 80031aa <iis2mdc_operating_mode_set+0x2e>
    reg.md = (uint8_t)val;
 8003192:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003196:	6826      	ldr	r6, [r4, #0]
 8003198:	68a0      	ldr	r0, [r4, #8]
    reg.md = (uint8_t)val;
 800319a:	f365 0301 	bfi	r3, r5, #0, #2
 800319e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80031a2:	aa01      	add	r2, sp, #4
 80031a4:	2301      	movs	r3, #1
 80031a6:	2160      	movs	r1, #96	@ 0x60
 80031a8:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80031aa:	b002      	add	sp, #8
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
 80031ae:	bf00      	nop

080031b0 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4604      	mov	r4, r0
 80031b4:	b082      	sub	sp, #8
 80031b6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031b8:	6880      	ldr	r0, [r0, #8]
 80031ba:	6866      	ldr	r6, [r4, #4]
 80031bc:	2301      	movs	r3, #1
 80031be:	aa01      	add	r2, sp, #4
 80031c0:	2160      	movs	r1, #96	@ 0x60
 80031c2:	47b0      	blx	r6
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80031c4:	b958      	cbnz	r0, 80031de <iis2mdc_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 80031c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80031ca:	6826      	ldr	r6, [r4, #0]
 80031cc:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 80031ce:	f365 0383 	bfi	r3, r5, #2, #2
 80031d2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80031d6:	aa01      	add	r2, sp, #4
 80031d8:	2301      	movs	r3, #1
 80031da:	2160      	movs	r1, #96	@ 0x60
 80031dc:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80031de:	b002      	add	sp, #8
 80031e0:	bd70      	pop	{r4, r5, r6, pc}
 80031e2:	bf00      	nop

080031e4 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 80031e4:	b530      	push	{r4, r5, lr}
 80031e6:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031e8:	2301      	movs	r3, #1
 80031ea:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80031ee:	aa01      	add	r2, sp, #4
{
 80031f0:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031f2:	2160      	movs	r1, #96	@ 0x60
 80031f4:	47a8      	blx	r5
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  switch (reg.odr) {
 80031f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031fa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d006      	beq.n	8003210 <iis2mdc_data_rate_get+0x2c>
 8003202:	2b03      	cmp	r3, #3
 8003204:	d004      	beq.n	8003210 <iis2mdc_data_rate_get+0x2c>
 8003206:	f1a3 0301 	sub.w	r3, r3, #1
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	095b      	lsrs	r3, r3, #5
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8003210:	7023      	strb	r3, [r4, #0]
      *val = IIS2MDC_ODR_10Hz;
      break;
  }

  return ret;
}
 8003212:	b003      	add	sp, #12
 8003214:	bd30      	pop	{r4, r5, pc}
 8003216:	bf00      	nop

08003218 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4604      	mov	r4, r0
 800321c:	b082      	sub	sp, #8
 800321e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003220:	6880      	ldr	r0, [r0, #8]
 8003222:	6866      	ldr	r6, [r4, #4]
 8003224:	2301      	movs	r3, #1
 8003226:	aa01      	add	r2, sp, #4
 8003228:	2162      	movs	r1, #98	@ 0x62
 800322a:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 800322c:	b958      	cbnz	r0, 8003246 <iis2mdc_block_data_update_set+0x2e>
    reg.bdu = val;
 800322e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003232:	6826      	ldr	r6, [r4, #0]
 8003234:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8003236:	f365 1304 	bfi	r3, r5, #4, #1
 800323a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800323e:	aa01      	add	r2, sp, #4
 8003240:	2301      	movs	r3, #1
 8003242:	2162      	movs	r1, #98	@ 0x62
 8003244:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8003246:	b002      	add	sp, #8
 8003248:	bd70      	pop	{r4, r5, r6, pc}
 800324a:	bf00      	nop

0800324c <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800324c:	b530      	push	{r4, r5, lr}
 800324e:	b083      	sub	sp, #12
 8003250:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003252:	466a      	mov	r2, sp
 8003254:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003258:	2306      	movs	r3, #6
 800325a:	2168      	movs	r1, #104	@ 0x68
 800325c:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800325e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003262:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003266:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800326a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800326e:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003270:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003274:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003278:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800327c:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800327e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003282:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003286:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8003288:	b003      	add	sp, #12
 800328a:	bd30      	pop	{r4, r5, pc}

0800328c <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800328c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800328e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8003292:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003294:	46a4      	mov	ip, r4
 8003296:	2301      	movs	r3, #1
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
  return ret;
}
 8003298:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800329c:	214f      	movs	r1, #79	@ 0x4f
 800329e:	4760      	bx	ip

080032a0 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4604      	mov	r4, r0
 80032a4:	b082      	sub	sp, #8
 80032a6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80032a8:	6880      	ldr	r0, [r0, #8]
 80032aa:	6866      	ldr	r6, [r4, #4]
 80032ac:	2301      	movs	r3, #1
 80032ae:	aa01      	add	r2, sp, #4
 80032b0:	2162      	movs	r1, #98	@ 0x62
 80032b2:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80032b4:	b958      	cbnz	r0, 80032ce <iis2mdc_self_test_set+0x2e>
    reg.self_test = val;
 80032b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032ba:	6826      	ldr	r6, [r4, #0]
 80032bc:	68a0      	ldr	r0, [r4, #8]
    reg.self_test = val;
 80032be:	f365 0341 	bfi	r3, r5, #1, #1
 80032c2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032c6:	aa01      	add	r2, sp, #4
 80032c8:	2301      	movs	r3, #1
 80032ca:	2162      	movs	r1, #98	@ 0x62
 80032cc:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80032ce:	b002      	add	sp, #8
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
 80032d2:	bf00      	nop

080032d4 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4604      	mov	r4, r0
 80032d8:	b082      	sub	sp, #8
 80032da:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80032dc:	6880      	ldr	r0, [r0, #8]
 80032de:	6866      	ldr	r6, [r4, #4]
 80032e0:	2301      	movs	r3, #1
 80032e2:	aa01      	add	r2, sp, #4
 80032e4:	2162      	movs	r1, #98	@ 0x62
 80032e6:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80032e8:	b958      	cbnz	r0, 8003302 <iis2mdc_i2c_interface_set+0x2e>
    reg.i2c_dis = (uint8_t)val;
 80032ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032ee:	6826      	ldr	r6, [r4, #0]
 80032f0:	68a0      	ldr	r0, [r4, #8]
    reg.i2c_dis = (uint8_t)val;
 80032f2:	f365 1345 	bfi	r3, r5, #5, #1
 80032f6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032fa:	aa01      	add	r2, sp, #4
 80032fc:	2301      	movs	r3, #1
 80032fe:	2162      	movs	r1, #98	@ 0x62
 8003300:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8003302:	b002      	add	sp, #8
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	bf00      	nop

08003308 <IIS3DWB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS3DWB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_GetCapabilities(IIS3DWB_Object_t *pObj, IIS3DWB_Capabilities_t *Capabilities)
{
 8003308:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800330a:	2401      	movs	r4, #1
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
 800330c:	2000      	movs	r0, #0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
 800330e:	2300      	movs	r3, #0
  Capabilities->AccMaxOdr    = 26700.0f;
 8003310:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <IIS3DWB_GetCapabilities+0x20>)
  Capabilities->Acc          = 1;
 8003312:	600c      	str	r4, [r1, #0]
  Capabilities->AccMaxFS     = 16;
 8003314:	2410      	movs	r4, #16
 8003316:	e9c1 0401 	strd	r0, r4, [r1, #4]
  Capabilities->MagMaxOdr    = 0.0f;
  return IIS3DWB_OK;
}
 800331a:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxFS     = 0;
 800331e:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003320:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 26700.0f;
 8003322:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003324:	618b      	str	r3, [r1, #24]
}
 8003326:	4770      	bx	lr
 8003328:	46d09800 	.word	0x46d09800

0800332c <IIS3DWB_ACC_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_Enable(IIS3DWB_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800332c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8003330:	2b01      	cmp	r3, #1
  {
    return IIS3DWB_OK;
  }

  pObj->acc_is_enabled = 1;
 8003332:	bf1c      	itt	ne
 8003334:	2301      	movne	r3, #1
 8003336:	f880 3029 	strbne.w	r3, [r0, #41]	@ 0x29

  return IIS3DWB_OK;
}
 800333a:	2000      	movs	r0, #0
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003340:	b410      	push	{r4}
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003342:	6944      	ldr	r4, [r0, #20]
 8003344:	7b00      	ldrb	r0, [r0, #12]
 8003346:	46a4      	mov	ip, r4
}
 8003348:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800334c:	4760      	bx	ip
 800334e:	bf00      	nop

08003350 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003350:	b410      	push	{r4}
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003352:	6904      	ldr	r4, [r0, #16]
 8003354:	7b00      	ldrb	r0, [r0, #12]
 8003356:	46a4      	mov	ip, r4
}
 8003358:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800335c:	4760      	bx	ip
 800335e:	bf00      	nop

08003360 <IIS3DWB_Init>:
{
 8003360:	b538      	push	{r3, r4, r5, lr}
  if (iis3dwb_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != IIS3DWB_OK)
 8003362:	f100 041c 	add.w	r4, r0, #28
{
 8003366:	4605      	mov	r5, r0
  if (iis3dwb_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != IIS3DWB_OK)
 8003368:	2101      	movs	r1, #1
 800336a:	4620      	mov	r0, r4
 800336c:	f000 fa16 	bl	800379c <iis3dwb_reset_set>
 8003370:	b9b8      	cbnz	r0, 80033a2 <IIS3DWB_Init+0x42>
  if (iis3dwb_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS3DWB_OK)
 8003372:	2101      	movs	r1, #1
 8003374:	4620      	mov	r0, r4
 8003376:	f000 fa2b 	bl	80037d0 <iis3dwb_auto_increment_set>
 800337a:	b990      	cbnz	r0, 80033a2 <IIS3DWB_Init+0x42>
  if (iis3dwb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS3DWB_OK)
 800337c:	2101      	movs	r1, #1
 800337e:	4620      	mov	r0, r4
 8003380:	f000 f9c8 	bl	8003714 <iis3dwb_block_data_update_set>
 8003384:	4601      	mov	r1, r0
 8003386:	b960      	cbnz	r0, 80033a2 <IIS3DWB_Init+0x42>
  if (iis3dwb_fifo_mode_set(&(pObj->Ctx), IIS3DWB_BYPASS_MODE) != IIS3DWB_OK)
 8003388:	4620      	mov	r0, r4
 800338a:	f000 fa3b 	bl	8003804 <iis3dwb_fifo_mode_set>
 800338e:	4601      	mov	r1, r0
 8003390:	b938      	cbnz	r0, 80033a2 <IIS3DWB_Init+0x42>
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), IIS3DWB_2g) != IIS3DWB_OK)
 8003392:	4620      	mov	r0, r4
 8003394:	f000 f95c 	bl	8003650 <iis3dwb_xl_full_scale_set>
 8003398:	b918      	cbnz	r0, 80033a2 <IIS3DWB_Init+0x42>
  pObj->is_initialized = 1;
 800339a:	2301      	movs	r3, #1
 800339c:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
    return IIS3DWB_ERROR;
 80033a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80033a6:	bd38      	pop	{r3, r4, r5, pc}

080033a8 <IIS3DWB_ACC_SetFullScale>:
         : (FullScale <= 4) ? IIS3DWB_4g
 80033a8:	2902      	cmp	r1, #2
{
 80033aa:	b508      	push	{r3, lr}
         : (FullScale <= 4) ? IIS3DWB_4g
 80033ac:	dd06      	ble.n	80033bc <IIS3DWB_ACC_SetFullScale+0x14>
 80033ae:	2904      	cmp	r1, #4
 80033b0:	dd0d      	ble.n	80033ce <IIS3DWB_ACC_SetFullScale+0x26>
 80033b2:	2908      	cmp	r1, #8
 80033b4:	bfcc      	ite	gt
 80033b6:	2101      	movgt	r1, #1
 80033b8:	2103      	movle	r1, #3
 80033ba:	e000      	b.n	80033be <IIS3DWB_ACC_SetFullScale+0x16>
 80033bc:	2100      	movs	r1, #0
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), new_fs) != IIS3DWB_OK)
 80033be:	301c      	adds	r0, #28
 80033c0:	f000 f946 	bl	8003650 <iis3dwb_xl_full_scale_set>
 80033c4:	3800      	subs	r0, #0
 80033c6:	bf18      	it	ne
 80033c8:	2001      	movne	r0, #1
}
 80033ca:	4240      	negs	r0, r0
 80033cc:	bd08      	pop	{r3, pc}
         : (FullScale <= 4) ? IIS3DWB_4g
 80033ce:	2102      	movs	r1, #2
 80033d0:	e7f5      	b.n	80033be <IIS3DWB_ACC_SetFullScale+0x16>
 80033d2:	bf00      	nop

080033d4 <IIS3DWB_ReadID>:
{
 80033d4:	b508      	push	{r3, lr}
  if (iis3dwb_device_id_get(&(pObj->Ctx), Id) != IIS3DWB_OK)
 80033d6:	301c      	adds	r0, #28
 80033d8:	f000 f9d6 	bl	8003788 <iis3dwb_device_id_get>
 80033dc:	3800      	subs	r0, #0
 80033de:	bf18      	it	ne
 80033e0:	2001      	movne	r0, #1
}
 80033e2:	4240      	negs	r0, r0
 80033e4:	bd08      	pop	{r3, pc}
 80033e6:	bf00      	nop

080033e8 <IIS3DWB_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 80033e8:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80033ec:	b90b      	cbnz	r3, 80033f2 <IIS3DWB_ACC_Disable+0xa>
    return IIS3DWB_OK;
 80033ee:	2000      	movs	r0, #0
}
 80033f0:	4770      	bx	lr
{
 80033f2:	b510      	push	{r4, lr}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
 80033f4:	2100      	movs	r1, #0
 80033f6:	4604      	mov	r4, r0
 80033f8:	301c      	adds	r0, #28
 80033fa:	f000 f95d 	bl	80036b8 <iis3dwb_xl_data_rate_set>
 80033fe:	b918      	cbnz	r0, 8003408 <IIS3DWB_ACC_Disable+0x20>
  pObj->acc_is_enabled = 0;
 8003400:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS3DWB_OK;
 8003404:	2000      	movs	r0, #0
}
 8003406:	bd10      	pop	{r4, pc}
    return IIS3DWB_ERROR;
 8003408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800340c:	bd10      	pop	{r4, pc}
 800340e:	bf00      	nop

08003410 <IIS3DWB_DeInit>:
{
 8003410:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 8003412:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8003416:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8003418:	b91b      	cbnz	r3, 8003422 <IIS3DWB_DeInit+0x12>
  pObj->is_initialized = 0;
 800341a:	2000      	movs	r0, #0
 800341c:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8003420:	bd10      	pop	{r4, pc}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
 8003422:	2100      	movs	r1, #0
 8003424:	301c      	adds	r0, #28
 8003426:	f000 f947 	bl	80036b8 <iis3dwb_xl_data_rate_set>
 800342a:	b910      	cbnz	r0, 8003432 <IIS3DWB_DeInit+0x22>
  pObj->acc_is_enabled = 0;
 800342c:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS3DWB_OK;
 8003430:	e7f3      	b.n	800341a <IIS3DWB_DeInit+0xa>
    return IIS3DWB_ERROR;
 8003432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003436:	bd10      	pop	{r4, pc}

08003438 <IIS3DWB_ACC_SetOutputDataRate>:
          :                    IIS3DWB_XL_ODR_26k7Hz;
 8003438:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800343c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
 8003444:	bf8c      	ite	hi
 8003446:	2105      	movhi	r1, #5
 8003448:	2100      	movls	r1, #0
{
 800344a:	b508      	push	{r3, lr}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
 800344c:	301c      	adds	r0, #28
 800344e:	f000 f933 	bl	80036b8 <iis3dwb_xl_data_rate_set>
 8003452:	3800      	subs	r0, #0
 8003454:	bf18      	it	ne
 8003456:	2001      	movne	r0, #1
}
 8003458:	4240      	negs	r0, r0
 800345a:	bd08      	pop	{r3, pc}

0800345c <IIS3DWB_ACC_GetSensitivity>:
{
 800345c:	b510      	push	{r4, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	460c      	mov	r4, r1
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
 8003462:	301c      	adds	r0, #28
 8003464:	f10d 0107 	add.w	r1, sp, #7
 8003468:	f000 f90c 	bl	8003684 <iis3dwb_xl_full_scale_get>
 800346c:	b998      	cbnz	r0, 8003496 <IIS3DWB_ACC_GetSensitivity+0x3a>
  switch (full_scale)
 800346e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d80d      	bhi.n	8003492 <IIS3DWB_ACC_GetSensitivity+0x36>
 8003476:	e8df f003 	tbb	[pc, r3]
 800347a:	0806      	.short	0x0806
 800347c:	0a02      	.short	0x0a02
 800347e:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <IIS3DWB_ACC_GetSensitivity+0x44>)
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003480:	6023      	str	r3, [r4, #0]
}
 8003482:	b002      	add	sp, #8
 8003484:	bd10      	pop	{r4, pc}
  switch (full_scale)
 8003486:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <IIS3DWB_ACC_GetSensitivity+0x48>)
 8003488:	e7fa      	b.n	8003480 <IIS3DWB_ACC_GetSensitivity+0x24>
    break;
 800348a:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <IIS3DWB_ACC_GetSensitivity+0x4c>)
 800348c:	e7f8      	b.n	8003480 <IIS3DWB_ACC_GetSensitivity+0x24>
    break;
 800348e:	4b07      	ldr	r3, [pc, #28]	@ (80034ac <IIS3DWB_ACC_GetSensitivity+0x50>)
 8003490:	e7f6      	b.n	8003480 <IIS3DWB_ACC_GetSensitivity+0x24>
    *Sensitivity = -1.0f;
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <IIS3DWB_ACC_GetSensitivity+0x54>)
 8003494:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 8003496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800349a:	b002      	add	sp, #8
 800349c:	bd10      	pop	{r4, pc}
 800349e:	bf00      	nop
 80034a0:	3df9db23 	.word	0x3df9db23
 80034a4:	3d79db23 	.word	0x3d79db23
 80034a8:	3ef9db23 	.word	0x3ef9db23
 80034ac:	3e79db23 	.word	0x3e79db23
 80034b0:	bf800000 	.word	0xbf800000

080034b4 <IIS3DWB_ACC_GetFullScale>:
{
 80034b4:	b510      	push	{r4, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	460c      	mov	r4, r1
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS3DWB_OK)
 80034ba:	301c      	adds	r0, #28
 80034bc:	f10d 0107 	add.w	r1, sp, #7
 80034c0:	f000 f8e0 	bl	8003684 <iis3dwb_xl_full_scale_get>
 80034c4:	b9a0      	cbnz	r0, 80034f0 <IIS3DWB_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 80034c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d80d      	bhi.n	80034ea <IIS3DWB_ACC_GetFullScale+0x36>
 80034ce:	e8df f003 	tbb	[pc, r3]
 80034d2:	0806      	.short	0x0806
 80034d4:	0a02      	.short	0x0a02
 80034d6:	2304      	movs	r3, #4
      *FullScale =  2;
 80034d8:	6023      	str	r3, [r4, #0]
}
 80034da:	b002      	add	sp, #8
 80034dc:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 80034de:	2302      	movs	r3, #2
 80034e0:	e7fa      	b.n	80034d8 <IIS3DWB_ACC_GetFullScale+0x24>
      break;
 80034e2:	2310      	movs	r3, #16
 80034e4:	e7f8      	b.n	80034d8 <IIS3DWB_ACC_GetFullScale+0x24>
      break;
 80034e6:	2308      	movs	r3, #8
 80034e8:	e7f6      	b.n	80034d8 <IIS3DWB_ACC_GetFullScale+0x24>
      *FullScale = -1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034ee:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80034f4:	b002      	add	sp, #8
 80034f6:	bd10      	pop	{r4, pc}

080034f8 <IIS3DWB_ACC_GetOutputDataRate>:
{
 80034f8:	b510      	push	{r4, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	460c      	mov	r4, r1
  if (iis3dwb_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS3DWB_OK)
 80034fe:	301c      	adds	r0, #28
 8003500:	f10d 0107 	add.w	r1, sp, #7
 8003504:	f000 f8f2 	bl	80036ec <iis3dwb_xl_data_rate_get>
 8003508:	b950      	cbnz	r0, 8003520 <IIS3DWB_ACC_GetOutputDataRate+0x28>
  switch (odr_low_level)
 800350a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800350e:	b15b      	cbz	r3, 8003528 <IIS3DWB_ACC_GetOutputDataRate+0x30>
 8003510:	2b05      	cmp	r3, #5
 8003512:	d103      	bne.n	800351c <IIS3DWB_ACC_GetOutputDataRate+0x24>
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <IIS3DWB_ACC_GetOutputDataRate+0x34>)
    *odr =  0.0f;
 8003516:	6023      	str	r3, [r4, #0]
}
 8003518:	b002      	add	sp, #8
 800351a:	bd10      	pop	{r4, pc}
    *odr = -1.0f;
 800351c:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <IIS3DWB_ACC_GetOutputDataRate+0x38>)
 800351e:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 8003520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003524:	b002      	add	sp, #8
 8003526:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8003528:	2300      	movs	r3, #0
 800352a:	e7f4      	b.n	8003516 <IIS3DWB_ACC_GetOutputDataRate+0x1e>
 800352c:	46d09800 	.word	0x46d09800
 8003530:	bf800000 	.word	0xbf800000

08003534 <IIS3DWB_ACC_GetAxesRaw>:
{
 8003534:	b510      	push	{r4, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	460c      	mov	r4, r1
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 800353a:	301c      	adds	r0, #28
 800353c:	4669      	mov	r1, sp
 800353e:	f000 f903 	bl	8003748 <iis3dwb_acceleration_raw_get>
 8003542:	b930      	cbnz	r0, 8003552 <IIS3DWB_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8003544:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8003546:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 800354a:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 800354c:	80a3      	strh	r3, [r4, #4]
}
 800354e:	b002      	add	sp, #8
 8003550:	bd10      	pop	{r4, pc}
    return IIS3DWB_ERROR;
 8003552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003556:	e7fa      	b.n	800354e <IIS3DWB_ACC_GetAxesRaw+0x1a>

08003558 <IIS3DWB_ACC_GetAxes>:
{
 8003558:	b530      	push	{r4, r5, lr}
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 800355a:	f100 051c 	add.w	r5, r0, #28
{
 800355e:	b085      	sub	sp, #20
 8003560:	460c      	mov	r4, r1
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 8003562:	4628      	mov	r0, r5
 8003564:	a902      	add	r1, sp, #8
 8003566:	f000 f8ef 	bl	8003748 <iis3dwb_acceleration_raw_get>
 800356a:	2800      	cmp	r0, #0
 800356c:	d13e      	bne.n	80035ec <IIS3DWB_ACC_GetAxes+0x94>
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
 800356e:	f10d 0107 	add.w	r1, sp, #7
 8003572:	4628      	mov	r0, r5
 8003574:	f000 f886 	bl	8003684 <iis3dwb_xl_full_scale_get>
 8003578:	bbc0      	cbnz	r0, 80035ec <IIS3DWB_ACC_GetAxes+0x94>
  switch (full_scale)
 800357a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d834      	bhi.n	80035ec <IIS3DWB_ACC_GetAxes+0x94>
 8003582:	e8df f003 	tbb	[pc, r3]
 8003586:	2a30      	.short	0x2a30
 8003588:	022d      	.short	0x022d
 800358a:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80035f4 <IIS3DWB_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800358e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003592:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003596:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800359a:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800359e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80035a2:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80035a6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80035aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80035ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80035b2:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80035b6:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80035ba:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80035be:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80035c2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80035c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80035ca:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80035ce:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80035d2:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80035d6:	b005      	add	sp, #20
 80035d8:	bd30      	pop	{r4, r5, pc}
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80035da:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80035f8 <IIS3DWB_ACC_GetAxes+0xa0>
 80035de:	e7d6      	b.n	800358e <IIS3DWB_ACC_GetAxes+0x36>
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80035e0:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 80035fc <IIS3DWB_ACC_GetAxes+0xa4>
 80035e4:	e7d3      	b.n	800358e <IIS3DWB_ACC_GetAxes+0x36>
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80035e6:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003600 <IIS3DWB_ACC_GetAxes+0xa8>
 80035ea:	e7d0      	b.n	800358e <IIS3DWB_ACC_GetAxes+0x36>
    return IIS3DWB_ERROR;
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035f0:	e7f1      	b.n	80035d6 <IIS3DWB_ACC_GetAxes+0x7e>
 80035f2:	bf00      	nop
 80035f4:	3e79db23 	.word	0x3e79db23
 80035f8:	3ef9db23 	.word	0x3ef9db23
 80035fc:	3df9db23 	.word	0x3df9db23
 8003600:	3d79db23 	.word	0x3d79db23

08003604 <IIS3DWB_RegisterBusIO>:
  if (pObj == NULL)
 8003604:	b1e0      	cbz	r0, 8003640 <IIS3DWB_RegisterBusIO+0x3c>
{
 8003606:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8003608:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 800360c:	688a      	ldr	r2, [r1, #8]
 800360e:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8003610:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8003614:	7b0a      	ldrb	r2, [r1, #12]
 8003616:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003618:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 800361c:	6989      	ldr	r1, [r1, #24]
 800361e:	6181      	str	r1, [r0, #24]
 8003620:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003622:	4909      	ldr	r1, [pc, #36]	@ (8003648 <IIS3DWB_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8003624:	4a09      	ldr	r2, [pc, #36]	@ (800364c <IIS3DWB_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003626:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003628:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 800362c:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 800362e:	b113      	cbz	r3, 8003636 <IIS3DWB_RegisterBusIO+0x32>
}
 8003630:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8003634:	4718      	bx	r3
}
 8003636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800363a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	08003341 	.word	0x08003341
 800364c:	08003351 	.word	0x08003351

08003650 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	4604      	mov	r4, r0
 8003654:	b082      	sub	sp, #8
 8003656:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003658:	6880      	ldr	r0, [r0, #8]
 800365a:	6866      	ldr	r6, [r4, #4]
 800365c:	2301      	movs	r3, #1
 800365e:	aa01      	add	r2, sp, #4
 8003660:	2110      	movs	r1, #16
 8003662:	47b0      	blx	r6
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  if (ret == 0) {
 8003664:	b958      	cbnz	r0, 800367e <iis3dwb_xl_full_scale_set+0x2e>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003666:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800366a:	6826      	ldr	r6, [r4, #0]
 800366c:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.fs_xl = (uint8_t)val;
 800366e:	f365 0383 	bfi	r3, r5, #2, #2
 8003672:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003676:	aa01      	add	r2, sp, #4
 8003678:	2301      	movs	r3, #1
 800367a:	2110      	movs	r1, #16
 800367c:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 800367e:	b002      	add	sp, #8
 8003680:	bd70      	pop	{r4, r5, r6, pc}
 8003682:	bf00      	nop

08003684 <iis3dwb_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t *val)
{
 8003684:	b530      	push	{r4, r5, lr}
 8003686:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003688:	2301      	movs	r3, #1
 800368a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800368e:	aa01      	add	r2, sp, #4
{
 8003690:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003692:	2110      	movs	r1, #16
 8003694:	47a8      	blx	r5
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  switch (ctrl1_xl.fs_xl) {
 8003696:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800369a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d006      	beq.n	80036b0 <iis3dwb_xl_full_scale_get+0x2c>
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d004      	beq.n	80036b0 <iis3dwb_xl_full_scale_get+0x2c>
 80036a6:	f1a3 0301 	sub.w	r3, r3, #1
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
    case IIS3DWB_2g:
      *val = IIS3DWB_2g;
 80036b0:	7023      	strb	r3, [r4, #0]
      *val = IIS3DWB_2g;
      break;
  }

  return ret;
}
 80036b2:	b003      	add	sp, #12
 80036b4:	bd30      	pop	{r4, r5, pc}
 80036b6:	bf00      	nop

080036b8 <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	4604      	mov	r4, r0
 80036bc:	b082      	sub	sp, #8
 80036be:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80036c0:	6880      	ldr	r0, [r0, #8]
 80036c2:	6866      	ldr	r6, [r4, #4]
 80036c4:	2301      	movs	r3, #1
 80036c6:	aa01      	add	r2, sp, #4
 80036c8:	2110      	movs	r1, #16
 80036ca:	47b0      	blx	r6
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  if (ret == 0) {
 80036cc:	b958      	cbnz	r0, 80036e6 <iis3dwb_xl_data_rate_set+0x2e>
    ctrl1_xl.xl_en = (uint8_t)val;
 80036ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80036d2:	6826      	ldr	r6, [r4, #0]
 80036d4:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.xl_en = (uint8_t)val;
 80036d6:	f365 1347 	bfi	r3, r5, #5, #3
 80036da:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80036de:	aa01      	add	r2, sp, #4
 80036e0:	2301      	movs	r3, #1
 80036e2:	2110      	movs	r1, #16
 80036e4:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80036e6:	b002      	add	sp, #8
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	bf00      	nop

080036ec <iis3dwb_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t *val)
{
 80036ec:	b530      	push	{r4, r5, lr}
 80036ee:	b083      	sub	sp, #12
 80036f0:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80036f2:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80036f6:	2301      	movs	r3, #1
 80036f8:	aa01      	add	r2, sp, #4
 80036fa:	2110      	movs	r1, #16
 80036fc:	47a8      	blx	r5
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  switch (ctrl1_xl.xl_en) {
 80036fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2b05      	cmp	r3, #5
 8003706:	bf14      	ite	ne
 8003708:	2300      	movne	r3, #0
 800370a:	2305      	moveq	r3, #5
    case IIS3DWB_XL_ODR_OFF:
      *val = IIS3DWB_XL_ODR_OFF;
 800370c:	7023      	strb	r3, [r4, #0]
      *val = IIS3DWB_XL_ODR_OFF;
      break;
  }

  return ret;
}
 800370e:	b003      	add	sp, #12
 8003710:	bd30      	pop	{r4, r5, pc}
 8003712:	bf00      	nop

08003714 <iis3dwb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	4604      	mov	r4, r0
 8003718:	b082      	sub	sp, #8
 800371a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800371c:	6880      	ldr	r0, [r0, #8]
 800371e:	6866      	ldr	r6, [r4, #4]
 8003720:	2301      	movs	r3, #1
 8003722:	aa01      	add	r2, sp, #4
 8003724:	2112      	movs	r1, #18
 8003726:	47b0      	blx	r6
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8003728:	b958      	cbnz	r0, 8003742 <iis3dwb_block_data_update_set+0x2e>
    ctrl3_c.bdu = (uint8_t)val;
 800372a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800372e:	6826      	ldr	r6, [r4, #0]
 8003730:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.bdu = (uint8_t)val;
 8003732:	f365 1386 	bfi	r3, r5, #6, #1
 8003736:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800373a:	aa01      	add	r2, sp, #4
 800373c:	2301      	movs	r3, #1
 800373e:	2112      	movs	r1, #18
 8003740:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8003742:	b002      	add	sp, #8
 8003744:	bd70      	pop	{r4, r5, r6, pc}
 8003746:	bf00      	nop

08003748 <iis3dwb_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003748:	b530      	push	{r4, r5, lr}
 800374a:	b083      	sub	sp, #12
 800374c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800374e:	466a      	mov	r2, sp
 8003750:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003754:	2306      	movs	r3, #6
 8003756:	2128      	movs	r1, #40	@ 0x28
 8003758:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800375a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800375e:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003762:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8003766:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800376a:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800376c:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003770:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003774:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003778:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800377a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800377e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003782:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8003784:	b003      	add	sp, #12
 8003786:	bd30      	pop	{r4, r5, pc}

08003788 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003788:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800378a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800378e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003790:	46a4      	mov	ip, r4
 8003792:	2301      	movs	r3, #1
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
  return ret;
}
 8003794:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003798:	210f      	movs	r1, #15
 800379a:	4760      	bx	ip

0800379c <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	4604      	mov	r4, r0
 80037a0:	b082      	sub	sp, #8
 80037a2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80037a4:	6880      	ldr	r0, [r0, #8]
 80037a6:	6866      	ldr	r6, [r4, #4]
 80037a8:	2301      	movs	r3, #1
 80037aa:	aa01      	add	r2, sp, #4
 80037ac:	2112      	movs	r1, #18
 80037ae:	47b0      	blx	r6
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80037b0:	b958      	cbnz	r0, 80037ca <iis3dwb_reset_set+0x2e>
    ctrl3_c.sw_reset = (uint8_t)val;
 80037b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80037b6:	6826      	ldr	r6, [r4, #0]
 80037b8:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.sw_reset = (uint8_t)val;
 80037ba:	f365 0300 	bfi	r3, r5, #0, #1
 80037be:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80037c2:	aa01      	add	r2, sp, #4
 80037c4:	2301      	movs	r3, #1
 80037c6:	2112      	movs	r1, #18
 80037c8:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80037ca:	b002      	add	sp, #8
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
 80037ce:	bf00      	nop

080037d0 <iis3dwb_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	4604      	mov	r4, r0
 80037d4:	b082      	sub	sp, #8
 80037d6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80037d8:	6880      	ldr	r0, [r0, #8]
 80037da:	6866      	ldr	r6, [r4, #4]
 80037dc:	2301      	movs	r3, #1
 80037de:	aa01      	add	r2, sp, #4
 80037e0:	2112      	movs	r1, #18
 80037e2:	47b0      	blx	r6
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80037e4:	b958      	cbnz	r0, 80037fe <iis3dwb_auto_increment_set+0x2e>
    ctrl3_c.if_inc = (uint8_t)val;
 80037e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80037ea:	6826      	ldr	r6, [r4, #0]
 80037ec:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.if_inc = (uint8_t)val;
 80037ee:	f365 0382 	bfi	r3, r5, #2, #1
 80037f2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80037f6:	aa01      	add	r2, sp, #4
 80037f8:	2301      	movs	r3, #1
 80037fa:	2112      	movs	r1, #18
 80037fc:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80037fe:	b002      	add	sp, #8
 8003800:	bd70      	pop	{r4, r5, r6, pc}
 8003802:	bf00      	nop

08003804 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                              iis3dwb_fifo_mode_t val)
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4604      	mov	r4, r0
 8003808:	b082      	sub	sp, #8
 800380a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800380c:	6880      	ldr	r0, [r0, #8]
 800380e:	6866      	ldr	r6, [r4, #4]
 8003810:	2301      	movs	r3, #1
 8003812:	aa01      	add	r2, sp, #4
 8003814:	210a      	movs	r1, #10
 8003816:	47b0      	blx	r6
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8003818:	b958      	cbnz	r0, 8003832 <iis3dwb_fifo_mode_set+0x2e>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800381a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800381e:	6826      	ldr	r6, [r4, #0]
 8003820:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8003822:	f365 0302 	bfi	r3, r5, #0, #3
 8003826:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800382a:	aa01      	add	r2, sp, #4
 800382c:	2301      	movs	r3, #1
 800382e:	210a      	movs	r1, #10
 8003830:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 8003832:	b002      	add	sp, #8
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	bf00      	nop

08003838 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8003838:	b410      	push	{r4}

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 1;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 800383a:	f240 1c01 	movw	ip, #257	@ 0x101
 800383e:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6667.0f;
 8003842:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <ISM330DHCX_GetCapabilities+0x28>)
 8003844:	610b      	str	r3, [r1, #16]
  Capabilities->MagMaxFS     = 0;
 8003846:	2000      	movs	r0, #0
  Capabilities->GyroMaxFS    = 2000;
 8003848:	e9c1 c400 	strd	ip, r4, [r1]
  Capabilities->AccMaxFS     = 16;
 800384c:	2410      	movs	r4, #16
  Capabilities->AccMaxOdr    = 6667.0f;
  Capabilities->MagMaxOdr    = 0.0f;
 800384e:	2200      	movs	r2, #0
  Capabilities->MagMaxFS     = 0;
 8003850:	e9c1 4002 	strd	r4, r0, [r1, #8]
  Capabilities->AccMaxOdr    = 6667.0f;
 8003854:	614b      	str	r3, [r1, #20]
  return ISM330DHCX_OK;
}
 8003856:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxOdr    = 0.0f;
 800385a:	618a      	str	r2, [r1, #24]
}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	45d05800 	.word	0x45d05800

08003864 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003864:	b410      	push	{r4}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003866:	6944      	ldr	r4, [r0, #20]
 8003868:	7b00      	ldrb	r0, [r0, #12]
 800386a:	46a4      	mov	ip, r4
}
 800386c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003870:	4760      	bx	ip
 8003872:	bf00      	nop

08003874 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003874:	b410      	push	{r4}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003876:	6904      	ldr	r4, [r0, #16]
 8003878:	7b00      	ldrb	r0, [r0, #12]
 800387a:	46a4      	mov	ip, r4
}
 800387c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003880:	4760      	bx	ip
 8003882:	bf00      	nop

08003884 <ISM330DHCX_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8003884:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8003888:	2b01      	cmp	r3, #1
 800388a:	d00c      	beq.n	80038a6 <ISM330DHCX_ACC_Enable+0x22>
{
 800388c:	b510      	push	{r4, lr}
 800388e:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8003890:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 8003894:	301c      	adds	r0, #28
 8003896:	f000 feed 	bl	8004674 <ism330dhcx_xl_data_rate_set>
 800389a:	b930      	cbnz	r0, 80038aa <ISM330DHCX_ACC_Enable+0x26>
  pObj->acc_is_enabled = 1;
 800389c:	2301      	movs	r3, #1
 800389e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return ISM330DHCX_OK;
 80038a2:	2000      	movs	r0, #0
}
 80038a4:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 80038a6:	2000      	movs	r0, #0
}
 80038a8:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 80038aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80038ae:	bd10      	pop	{r4, pc}

080038b0 <ISM330DHCX_ACC_SetFullScale>:
           : (FullScale <= 4) ? ISM330DHCX_4g
 80038b0:	2902      	cmp	r1, #2
{
 80038b2:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? ISM330DHCX_4g
 80038b4:	dd06      	ble.n	80038c4 <ISM330DHCX_ACC_SetFullScale+0x14>
 80038b6:	2904      	cmp	r1, #4
 80038b8:	dd0d      	ble.n	80038d6 <ISM330DHCX_ACC_SetFullScale+0x26>
 80038ba:	2908      	cmp	r1, #8
 80038bc:	bfcc      	ite	gt
 80038be:	2101      	movgt	r1, #1
 80038c0:	2103      	movle	r1, #3
 80038c2:	e000      	b.n	80038c6 <ISM330DHCX_ACC_SetFullScale+0x16>
 80038c4:	2100      	movs	r1, #0
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80038c6:	301c      	adds	r0, #28
 80038c8:	f000 fcbc 	bl	8004244 <ism330dhcx_xl_full_scale_set>
 80038cc:	3800      	subs	r0, #0
 80038ce:	bf18      	it	ne
 80038d0:	2001      	movne	r0, #1
}
 80038d2:	4240      	negs	r0, r0
 80038d4:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? ISM330DHCX_4g
 80038d6:	2102      	movs	r1, #2
 80038d8:	e7f5      	b.n	80038c6 <ISM330DHCX_ACC_SetFullScale+0x16>
 80038da:	bf00      	nop

080038dc <ISM330DHCX_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 80038dc:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d00c      	beq.n	80038fe <ISM330DHCX_GYRO_Enable+0x22>
{
 80038e4:	b510      	push	{r4, lr}
 80038e6:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 80038e8:	f890 102c 	ldrb.w	r1, [r0, #44]	@ 0x2c
 80038ec:	301c      	adds	r0, #28
 80038ee:	f000 ffbd 	bl	800486c <ism330dhcx_gy_data_rate_set>
 80038f2:	b930      	cbnz	r0, 8003902 <ISM330DHCX_GYRO_Enable+0x26>
  pObj->gyro_is_enabled = 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return ISM330DHCX_OK;
 80038fa:	2000      	movs	r0, #0
}
 80038fc:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 80038fe:	2000      	movs	r0, #0
}
 8003900:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 8003902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003906:	bd10      	pop	{r4, pc}

08003908 <ISM330DHCX_GYRO_SetOutputDataRate>:
{
 8003908:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 800390a:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800390e:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
  if (pObj->gyro_is_enabled == 1U)
 8003912:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003914:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->gyro_is_enabled == 1U)
 8003918:	d042      	beq.n	80039a0 <ISM330DHCX_GYRO_SetOutputDataRate+0x98>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800391a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391e:	d804      	bhi.n	800392a <ISM330DHCX_GYRO_SetOutputDataRate+0x22>
 8003920:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003922:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003926:	2000      	movs	r0, #0
}
 8003928:	bd08      	pop	{r3, pc}
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800392a:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 800392e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003936:	d978      	bls.n	8003a2a <ISM330DHCX_GYRO_SetOutputDataRate+0x122>
 8003938:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8003a64 <ISM330DHCX_GYRO_SetOutputDataRate+0x15c>
 800393c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003944:	d975      	bls.n	8003a32 <ISM330DHCX_GYRO_SetOutputDataRate+0x12a>
 8003946:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8003a68 <ISM330DHCX_GYRO_SetOutputDataRate+0x160>
 800394a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800394e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003952:	d972      	bls.n	8003a3a <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 8003954:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8003a6c <ISM330DHCX_GYRO_SetOutputDataRate+0x164>
 8003958:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800395c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003960:	d96f      	bls.n	8003a42 <ISM330DHCX_GYRO_SetOutputDataRate+0x13a>
 8003962:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8003a70 <ISM330DHCX_GYRO_SetOutputDataRate+0x168>
 8003966:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800396a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396e:	d96c      	bls.n	8003a4a <ISM330DHCX_GYRO_SetOutputDataRate+0x142>
 8003970:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8003a74 <ISM330DHCX_GYRO_SetOutputDataRate+0x16c>
 8003974:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	d969      	bls.n	8003a52 <ISM330DHCX_GYRO_SetOutputDataRate+0x14a>
 800397e:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8003a78 <ISM330DHCX_GYRO_SetOutputDataRate+0x170>
 8003982:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398a:	d966      	bls.n	8003a5a <ISM330DHCX_GYRO_SetOutputDataRate+0x152>
 800398c:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003a7c <ISM330DHCX_GYRO_SetOutputDataRate+0x174>
 8003990:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003998:	bf94      	ite	ls
 800399a:	2309      	movls	r3, #9
 800399c:	230a      	movhi	r3, #10
 800399e:	e7c0      	b.n	8003922 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	d939      	bls.n	8003a1a <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
 80039a6:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 80039aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80039ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b2:	d93c      	bls.n	8003a2e <ISM330DHCX_GYRO_SetOutputDataRate+0x126>
 80039b4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8003a64 <ISM330DHCX_GYRO_SetOutputDataRate+0x15c>
 80039b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	d939      	bls.n	8003a36 <ISM330DHCX_GYRO_SetOutputDataRate+0x12e>
 80039c2:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8003a68 <ISM330DHCX_GYRO_SetOutputDataRate+0x160>
 80039c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80039ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ce:	d936      	bls.n	8003a3e <ISM330DHCX_GYRO_SetOutputDataRate+0x136>
 80039d0:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8003a6c <ISM330DHCX_GYRO_SetOutputDataRate+0x164>
 80039d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80039d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039dc:	d933      	bls.n	8003a46 <ISM330DHCX_GYRO_SetOutputDataRate+0x13e>
 80039de:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003a70 <ISM330DHCX_GYRO_SetOutputDataRate+0x168>
 80039e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80039e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ea:	d930      	bls.n	8003a4e <ISM330DHCX_GYRO_SetOutputDataRate+0x146>
 80039ec:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8003a74 <ISM330DHCX_GYRO_SetOutputDataRate+0x16c>
 80039f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80039f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f8:	d92d      	bls.n	8003a56 <ISM330DHCX_GYRO_SetOutputDataRate+0x14e>
 80039fa:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003a78 <ISM330DHCX_GYRO_SetOutputDataRate+0x170>
 80039fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a06:	d92a      	bls.n	8003a5e <ISM330DHCX_GYRO_SetOutputDataRate+0x156>
 8003a08:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8003a7c <ISM330DHCX_GYRO_SetOutputDataRate+0x174>
 8003a0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	bf94      	ite	ls
 8003a16:	2109      	movls	r1, #9
 8003a18:	210a      	movhi	r1, #10
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003a1a:	301c      	adds	r0, #28
 8003a1c:	f000 ff26 	bl	800486c <ism330dhcx_gy_data_rate_set>
 8003a20:	3800      	subs	r0, #0
 8003a22:	bf18      	it	ne
 8003a24:	2001      	movne	r0, #1
 8003a26:	4240      	negs	r0, r0
}
 8003a28:	bd08      	pop	{r3, pc}
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e779      	b.n	8003922 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a2e:	2102      	movs	r1, #2
 8003a30:	e7f3      	b.n	8003a1a <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a32:	2303      	movs	r3, #3
 8003a34:	e775      	b.n	8003922 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a36:	2103      	movs	r1, #3
 8003a38:	e7ef      	b.n	8003a1a <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e771      	b.n	8003922 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a3e:	2104      	movs	r1, #4
 8003a40:	e7eb      	b.n	8003a1a <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a42:	2305      	movs	r3, #5
 8003a44:	e76d      	b.n	8003922 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a46:	2105      	movs	r1, #5
 8003a48:	e7e7      	b.n	8003a1a <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a4a:	2306      	movs	r3, #6
 8003a4c:	e769      	b.n	8003922 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a4e:	2106      	movs	r1, #6
 8003a50:	e7e3      	b.n	8003a1a <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a52:	2307      	movs	r3, #7
 8003a54:	e765      	b.n	8003922 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a56:	2107      	movs	r1, #7
 8003a58:	e7df      	b.n	8003a1a <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	e761      	b.n	8003922 <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003a5e:	2108      	movs	r1, #8
 8003a60:	e7db      	b.n	8003a1a <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
 8003a62:	bf00      	nop
 8003a64:	42500000 	.word	0x42500000
 8003a68:	42d00000 	.word	0x42d00000
 8003a6c:	43500000 	.word	0x43500000
 8003a70:	43d08000 	.word	0x43d08000
 8003a74:	44504000 	.word	0x44504000
 8003a78:	44d06000 	.word	0x44d06000
 8003a7c:	45505000 	.word	0x45505000

08003a80 <ISM330DHCX_Init>:
{
 8003a80:	b570      	push	{r4, r5, r6, lr}
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003a82:	f100 041c 	add.w	r4, r0, #28
{
 8003a86:	4605      	mov	r5, r0
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f000 fd34 	bl	80044f8 <ism330dhcx_auto_increment_set>
 8003a90:	bb80      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 8003a92:	2101      	movs	r1, #1
 8003a94:	4620      	mov	r0, r4
 8003a96:	f000 fd15 	bl	80044c4 <ism330dhcx_reset_set>
 8003a9a:	bb58      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f000 fd2a 	bl	80044f8 <ism330dhcx_auto_increment_set>
 8003aa4:	bb30      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f000 fca7 	bl	80043fc <ism330dhcx_block_data_update_set>
 8003aae:	4601      	mov	r1, r0
 8003ab0:	bb00      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f000 fd3a 	bl	800452c <ism330dhcx_fifo_mode_set>
 8003ab8:	4601      	mov	r1, r0
 8003aba:	b9d8      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8003abc:	2604      	movs	r6, #4
 8003abe:	f885 602b 	strb.w	r6, [r5, #43]	@ 0x2b
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f000 fdd6 	bl	8004674 <ism330dhcx_xl_data_rate_set>
 8003ac8:	4601      	mov	r1, r0
 8003aca:	b998      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8003acc:	4620      	mov	r0, r4
 8003ace:	f000 fbb9 	bl	8004244 <ism330dhcx_xl_full_scale_set>
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	b970      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8003ad6:	f885 602c 	strb.w	r6, [r5, #44]	@ 0x2c
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 fec6 	bl	800486c <ism330dhcx_gy_data_rate_set>
 8003ae0:	b940      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8003ae2:	210c      	movs	r1, #12
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f000 fc13 	bl	8004310 <ism330dhcx_gy_full_scale_set>
 8003aea:	b918      	cbnz	r0, 8003af4 <ISM330DHCX_Init+0x74>
  pObj->is_initialized = 1;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
    return ISM330DHCX_ERROR;
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003af8:	bd70      	pop	{r4, r5, r6, pc}
 8003afa:	bf00      	nop

08003afc <ISM330DHCX_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003afc:	297d      	cmp	r1, #125	@ 0x7d
{
 8003afe:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003b00:	dd0a      	ble.n	8003b18 <ISM330DHCX_GYRO_SetFullScale+0x1c>
 8003b02:	29fa      	cmp	r1, #250	@ 0xfa
 8003b04:	dd11      	ble.n	8003b2a <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8003b06:	f5b1 7ffa 	cmp.w	r1, #500	@ 0x1f4
 8003b0a:	dd10      	ble.n	8003b2e <ISM330DHCX_GYRO_SetFullScale+0x32>
 8003b0c:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8003b10:	bfcc      	ite	gt
 8003b12:	210c      	movgt	r1, #12
 8003b14:	2108      	movle	r1, #8
 8003b16:	e000      	b.n	8003b1a <ISM330DHCX_GYRO_SetFullScale+0x1e>
 8003b18:	2102      	movs	r1, #2
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003b1a:	301c      	adds	r0, #28
 8003b1c:	f000 fbf8 	bl	8004310 <ism330dhcx_gy_full_scale_set>
 8003b20:	3800      	subs	r0, #0
 8003b22:	bf18      	it	ne
 8003b24:	2001      	movne	r0, #1
}
 8003b26:	4240      	negs	r0, r0
 8003b28:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	e7f5      	b.n	8003b1a <ISM330DHCX_GYRO_SetFullScale+0x1e>
 8003b2e:	2104      	movs	r1, #4
 8003b30:	e7f3      	b.n	8003b1a <ISM330DHCX_GYRO_SetFullScale+0x1e>
 8003b32:	bf00      	nop

08003b34 <ISM330DHCX_ReadID>:
{
 8003b34:	b508      	push	{r3, lr}
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8003b36:	301c      	adds	r0, #28
 8003b38:	f000 fcba 	bl	80044b0 <ism330dhcx_device_id_get>
 8003b3c:	3800      	subs	r0, #0
 8003b3e:	bf18      	it	ne
 8003b40:	2001      	movne	r0, #1
}
 8003b42:	4240      	negs	r0, r0
 8003b44:	bd08      	pop	{r3, pc}
 8003b46:	bf00      	nop

08003b48 <ISM330DHCX_ACC_Disable>:
{
 8003b48:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003b4a:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8003b4e:	b90b      	cbnz	r3, 8003b54 <ISM330DHCX_ACC_Disable+0xc>
    return ISM330DHCX_OK;
 8003b50:	2000      	movs	r0, #0
}
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003b54:	f100 051c 	add.w	r5, r0, #28
 8003b58:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	4628      	mov	r0, r5
 8003b60:	f000 fba4 	bl	80042ac <ism330dhcx_xl_data_rate_get>
 8003b64:	4601      	mov	r1, r0
 8003b66:	b930      	cbnz	r0, 8003b76 <ISM330DHCX_ACC_Disable+0x2e>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f000 fd83 	bl	8004674 <ism330dhcx_xl_data_rate_set>
 8003b6e:	b910      	cbnz	r0, 8003b76 <ISM330DHCX_ACC_Disable+0x2e>
  pObj->acc_is_enabled = 0;
 8003b70:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return ISM330DHCX_OK;
 8003b74:	e7ec      	b.n	8003b50 <ISM330DHCX_ACC_Disable+0x8>
    return ISM330DHCX_ERROR;
 8003b76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}

08003b7c <ISM330DHCX_ACC_GetOutputDataRate>:
{
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	460c      	mov	r4, r1
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003b82:	301c      	adds	r0, #28
 8003b84:	f10d 0107 	add.w	r1, sp, #7
 8003b88:	f000 fb90 	bl	80042ac <ism330dhcx_xl_data_rate_get>
 8003b8c:	bb18      	cbnz	r0, 8003bd6 <ISM330DHCX_ACC_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 8003b8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b92:	2b0a      	cmp	r3, #10
 8003b94:	d81f      	bhi.n	8003bd6 <ISM330DHCX_ACC_GetOutputDataRate+0x5a>
 8003b96:	e8df f003 	tbb	[pc, r3]
 8003b9a:	060a      	.short	0x060a
 8003b9c:	18160e0c 	.word	0x18160e0c
 8003ba0:	14121c1a 	.word	0x14121c1a
 8003ba4:	10          	.byte	0x10
 8003ba5:	00          	.byte	0x00
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <ISM330DHCX_ACC_GetOutputDataRate+0x60>)
      *Odr = 0.0f;
 8003ba8:	6023      	str	r3, [r4, #0]
}
 8003baa:	b002      	add	sp, #8
 8003bac:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e7fa      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <ISM330DHCX_ACC_GetOutputDataRate+0x64>)
 8003bb4:	e7f8      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <ISM330DHCX_ACC_GetOutputDataRate+0x68>)
 8003bb8:	e7f6      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <ISM330DHCX_ACC_GetOutputDataRate+0x6c>)
 8003bbc:	e7f4      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <ISM330DHCX_ACC_GetOutputDataRate+0x70>)
 8003bc0:	e7f2      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <ISM330DHCX_ACC_GetOutputDataRate+0x74>)
 8003bc4:	e7f0      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <ISM330DHCX_ACC_GetOutputDataRate+0x78>)
 8003bc8:	e7ee      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <ISM330DHCX_ACC_GetOutputDataRate+0x7c>)
 8003bcc:	e7ec      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bce:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <ISM330DHCX_ACC_GetOutputDataRate+0x80>)
 8003bd0:	e7ea      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <ISM330DHCX_ACC_GetOutputDataRate+0x84>)
 8003bd4:	e7e8      	b.n	8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
  switch (odr_low_level)
 8003bd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bda:	e7e6      	b.n	8003baa <ISM330DHCX_ACC_GetOutputDataRate+0x2e>
 8003bdc:	41480000 	.word	0x41480000
 8003be0:	41d00000 	.word	0x41d00000
 8003be4:	42500000 	.word	0x42500000
 8003be8:	45d05800 	.word	0x45d05800
 8003bec:	44d06000 	.word	0x44d06000
 8003bf0:	45505000 	.word	0x45505000
 8003bf4:	42d00000 	.word	0x42d00000
 8003bf8:	43500000 	.word	0x43500000
 8003bfc:	43d08000 	.word	0x43d08000
 8003c00:	44504000 	.word	0x44504000

08003c04 <ISM330DHCX_ACC_GetSensitivity>:
{
 8003c04:	b510      	push	{r4, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003c0a:	301c      	adds	r0, #28
 8003c0c:	f10d 0107 	add.w	r1, sp, #7
 8003c10:	f000 fb32 	bl	8004278 <ism330dhcx_xl_full_scale_get>
 8003c14:	b988      	cbnz	r0, 8003c3a <ISM330DHCX_ACC_GetSensitivity+0x36>
  switch (full_scale)
 8003c16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d80d      	bhi.n	8003c3a <ISM330DHCX_ACC_GetSensitivity+0x36>
 8003c1e:	e8df f003 	tbb	[pc, r3]
 8003c22:	0a06      	.short	0x0a06
 8003c24:	0802      	.short	0x0802
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <ISM330DHCX_ACC_GetSensitivity+0x3c>)
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003c28:	6023      	str	r3, [r4, #0]
}
 8003c2a:	b002      	add	sp, #8
 8003c2c:	bd10      	pop	{r4, pc}
  switch (full_scale)
 8003c2e:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <ISM330DHCX_ACC_GetSensitivity+0x40>)
 8003c30:	e7fa      	b.n	8003c28 <ISM330DHCX_ACC_GetSensitivity+0x24>
      break;
 8003c32:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <ISM330DHCX_ACC_GetSensitivity+0x44>)
 8003c34:	e7f8      	b.n	8003c28 <ISM330DHCX_ACC_GetSensitivity+0x24>
      break;
 8003c36:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <ISM330DHCX_ACC_GetSensitivity+0x48>)
 8003c38:	e7f6      	b.n	8003c28 <ISM330DHCX_ACC_GetSensitivity+0x24>
  switch (full_scale)
 8003c3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c3e:	e7f4      	b.n	8003c2a <ISM330DHCX_ACC_GetSensitivity+0x26>
 8003c40:	3df9db23 	.word	0x3df9db23
 8003c44:	3d79db23 	.word	0x3d79db23
 8003c48:	3e79db23 	.word	0x3e79db23
 8003c4c:	3ef9db23 	.word	0x3ef9db23

08003c50 <ISM330DHCX_ACC_GetFullScale>:
{
 8003c50:	b510      	push	{r4, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003c56:	301c      	adds	r0, #28
 8003c58:	f10d 0107 	add.w	r1, sp, #7
 8003c5c:	f000 fb0c 	bl	8004278 <ism330dhcx_xl_full_scale_get>
 8003c60:	b988      	cbnz	r0, 8003c86 <ISM330DHCX_ACC_GetFullScale+0x36>
  switch (fs_low_level)
 8003c62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d80d      	bhi.n	8003c86 <ISM330DHCX_ACC_GetFullScale+0x36>
 8003c6a:	e8df f003 	tbb	[pc, r3]
 8003c6e:	0a06      	.short	0x0a06
 8003c70:	0802      	.short	0x0802
 8003c72:	2304      	movs	r3, #4
      *FullScale =  2;
 8003c74:	6023      	str	r3, [r4, #0]
}
 8003c76:	b002      	add	sp, #8
 8003c78:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e7fa      	b.n	8003c74 <ISM330DHCX_ACC_GetFullScale+0x24>
      break;
 8003c7e:	2308      	movs	r3, #8
 8003c80:	e7f8      	b.n	8003c74 <ISM330DHCX_ACC_GetFullScale+0x24>
      break;
 8003c82:	2310      	movs	r3, #16
 8003c84:	e7f6      	b.n	8003c74 <ISM330DHCX_ACC_GetFullScale+0x24>
  switch (fs_low_level)
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c8a:	e7f4      	b.n	8003c76 <ISM330DHCX_ACC_GetFullScale+0x26>

08003c8c <ISM330DHCX_ACC_GetAxesRaw>:
{
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003c92:	301c      	adds	r0, #28
 8003c94:	4669      	mov	r1, sp
 8003c96:	f000 fbeb 	bl	8004470 <ism330dhcx_acceleration_raw_get>
 8003c9a:	b930      	cbnz	r0, 8003caa <ISM330DHCX_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8003c9c:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8003c9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8003ca2:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8003ca4:	80a3      	strh	r3, [r4, #4]
}
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8003caa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cae:	e7fa      	b.n	8003ca6 <ISM330DHCX_ACC_GetAxesRaw+0x1a>

08003cb0 <ISM330DHCX_GYRO_Disable>:
{
 8003cb0:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8003cb2:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8003cb6:	b90b      	cbnz	r3, 8003cbc <ISM330DHCX_GYRO_Disable+0xc>
    return ISM330DHCX_OK;
 8003cb8:	2000      	movs	r0, #0
}
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003cbc:	f100 051c 	add.w	r5, r0, #28
 8003cc0:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 fb6a 	bl	80043a0 <ism330dhcx_gy_data_rate_get>
 8003ccc:	4601      	mov	r1, r0
 8003cce:	b930      	cbnz	r0, 8003cde <ISM330DHCX_GYRO_Disable+0x2e>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 fdcb 	bl	800486c <ism330dhcx_gy_data_rate_set>
 8003cd6:	b910      	cbnz	r0, 8003cde <ISM330DHCX_GYRO_Disable+0x2e>
  pObj->gyro_is_enabled = 0;
 8003cd8:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return ISM330DHCX_OK;
 8003cdc:	e7ec      	b.n	8003cb8 <ISM330DHCX_GYRO_Disable+0x8>
    return ISM330DHCX_ERROR;
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}

08003ce4 <ISM330DHCX_GYRO_GetOutputDataRate>:
{
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	460c      	mov	r4, r1
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003cea:	301c      	adds	r0, #28
 8003cec:	f10d 0107 	add.w	r1, sp, #7
 8003cf0:	f000 fb56 	bl	80043a0 <ism330dhcx_gy_data_rate_get>
 8003cf4:	bb18      	cbnz	r0, 8003d3e <ISM330DHCX_GYRO_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 8003cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003cfa:	2b0a      	cmp	r3, #10
 8003cfc:	d81f      	bhi.n	8003d3e <ISM330DHCX_GYRO_GetOutputDataRate+0x5a>
 8003cfe:	e8df f003 	tbb	[pc, r3]
 8003d02:	060a      	.short	0x060a
 8003d04:	18160e0c 	.word	0x18160e0c
 8003d08:	14121c1a 	.word	0x14121c1a
 8003d0c:	10          	.byte	0x10
 8003d0d:	00          	.byte	0x00
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <ISM330DHCX_GYRO_GetOutputDataRate+0x60>)
      *Odr = 0.0f;
 8003d10:	6023      	str	r3, [r4, #0]
}
 8003d12:	b002      	add	sp, #8
 8003d14:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8003d16:	2300      	movs	r3, #0
 8003d18:	e7fa      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <ISM330DHCX_GYRO_GetOutputDataRate+0x64>)
 8003d1c:	e7f8      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <ISM330DHCX_GYRO_GetOutputDataRate+0x68>)
 8003d20:	e7f6      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <ISM330DHCX_GYRO_GetOutputDataRate+0x6c>)
 8003d24:	e7f4      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d26:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <ISM330DHCX_GYRO_GetOutputDataRate+0x70>)
 8003d28:	e7f2      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <ISM330DHCX_GYRO_GetOutputDataRate+0x74>)
 8003d2c:	e7f0      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <ISM330DHCX_GYRO_GetOutputDataRate+0x78>)
 8003d30:	e7ee      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d32:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <ISM330DHCX_GYRO_GetOutputDataRate+0x7c>)
 8003d34:	e7ec      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d36:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <ISM330DHCX_GYRO_GetOutputDataRate+0x80>)
 8003d38:	e7ea      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <ISM330DHCX_GYRO_GetOutputDataRate+0x84>)
 8003d3c:	e7e8      	b.n	8003d10 <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
  switch (odr_low_level)
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d42:	e7e6      	b.n	8003d12 <ISM330DHCX_GYRO_GetOutputDataRate+0x2e>
 8003d44:	41480000 	.word	0x41480000
 8003d48:	41d00000 	.word	0x41d00000
 8003d4c:	42500000 	.word	0x42500000
 8003d50:	45d05800 	.word	0x45d05800
 8003d54:	44d06000 	.word	0x44d06000
 8003d58:	45505000 	.word	0x45505000
 8003d5c:	42d00000 	.word	0x42d00000
 8003d60:	43500000 	.word	0x43500000
 8003d64:	43d08000 	.word	0x43d08000
 8003d68:	44504000 	.word	0x44504000

08003d6c <ISM330DHCX_GYRO_GetSensitivity>:
{
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003d72:	301c      	adds	r0, #28
 8003d74:	f10d 0107 	add.w	r1, sp, #7
 8003d78:	f000 fae4 	bl	8004344 <ism330dhcx_gy_full_scale_get>
 8003d7c:	b960      	cbnz	r0, 8003d98 <ISM330DHCX_GYRO_GetSensitivity+0x2c>
  switch (full_scale)
 8003d7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d808      	bhi.n	8003d98 <ISM330DHCX_GYRO_GetSensitivity+0x2c>
 8003d86:	e8df f003 	tbb	[pc, r3]
 8003d8a:	0713      	.short	0x0713
 8003d8c:	070f0715 	.word	0x070f0715
 8003d90:	07110707 	.word	0x07110707
 8003d94:	0707      	.short	0x0707
 8003d96:	0b          	.byte	0x0b
 8003d97:	00          	.byte	0x00
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd10      	pop	{r4, pc}
      break;
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <ISM330DHCX_GYRO_GetSensitivity+0x4c>)
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003da2:	6023      	str	r3, [r4, #0]
}
 8003da4:	b002      	add	sp, #8
 8003da6:	bd10      	pop	{r4, pc}
      break;
 8003da8:	4b04      	ldr	r3, [pc, #16]	@ (8003dbc <ISM330DHCX_GYRO_GetSensitivity+0x50>)
 8003daa:	e7fa      	b.n	8003da2 <ISM330DHCX_GYRO_GetSensitivity+0x36>
      break;
 8003dac:	4b04      	ldr	r3, [pc, #16]	@ (8003dc0 <ISM330DHCX_GYRO_GetSensitivity+0x54>)
 8003dae:	e7f8      	b.n	8003da2 <ISM330DHCX_GYRO_GetSensitivity+0x36>
  switch (full_scale)
 8003db0:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <ISM330DHCX_GYRO_GetSensitivity+0x58>)
 8003db2:	e7f6      	b.n	8003da2 <ISM330DHCX_GYRO_GetSensitivity+0x36>
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <ISM330DHCX_GYRO_GetSensitivity+0x5c>)
 8003db6:	e7f4      	b.n	8003da2 <ISM330DHCX_GYRO_GetSensitivity+0x36>
 8003db8:	428c0000 	.word	0x428c0000
 8003dbc:	418c0000 	.word	0x418c0000
 8003dc0:	420c0000 	.word	0x420c0000
 8003dc4:	410c0000 	.word	0x410c0000
 8003dc8:	408c0000 	.word	0x408c0000

08003dcc <ISM330DHCX_GYRO_GetFullScale>:
{
 8003dcc:	b510      	push	{r4, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003dd2:	301c      	adds	r0, #28
 8003dd4:	f10d 0107 	add.w	r1, sp, #7
 8003dd8:	f000 fab4 	bl	8004344 <ism330dhcx_gy_full_scale_get>
 8003ddc:	b960      	cbnz	r0, 8003df8 <ISM330DHCX_GYRO_GetFullScale+0x2c>
  switch (fs_low_level)
 8003dde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d808      	bhi.n	8003df8 <ISM330DHCX_GYRO_GetFullScale+0x2c>
 8003de6:	e8df f003 	tbb	[pc, r3]
 8003dea:	0716      	.short	0x0716
 8003dec:	07100718 	.word	0x07100718
 8003df0:	07130707 	.word	0x07130707
 8003df4:	0707      	.short	0x0707
 8003df6:	0b          	.byte	0x0b
 8003df7:	00          	.byte	0x00
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd10      	pop	{r4, pc}
      break;
 8003e00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
      *FullScale =  125;
 8003e04:	6023      	str	r3, [r4, #0]
}
 8003e06:	b002      	add	sp, #8
 8003e08:	bd10      	pop	{r4, pc}
      break;
 8003e0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e0e:	e7f9      	b.n	8003e04 <ISM330DHCX_GYRO_GetFullScale+0x38>
      break;
 8003e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e14:	e7f6      	b.n	8003e04 <ISM330DHCX_GYRO_GetFullScale+0x38>
  switch (fs_low_level)
 8003e16:	23fa      	movs	r3, #250	@ 0xfa
 8003e18:	e7f4      	b.n	8003e04 <ISM330DHCX_GYRO_GetFullScale+0x38>
 8003e1a:	237d      	movs	r3, #125	@ 0x7d
 8003e1c:	e7f2      	b.n	8003e04 <ISM330DHCX_GYRO_GetFullScale+0x38>
 8003e1e:	bf00      	nop

08003e20 <ISM330DHCX_GYRO_GetAxesRaw>:
{
 8003e20:	b510      	push	{r4, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003e26:	301c      	adds	r0, #28
 8003e28:	4669      	mov	r1, sp
 8003e2a:	f000 fb01 	bl	8004430 <ism330dhcx_angular_rate_raw_get>
 8003e2e:	b930      	cbnz	r0, 8003e3e <ISM330DHCX_GYRO_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8003e30:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8003e32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8003e36:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8003e38:	80a3      	strh	r3, [r4, #4]
}
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e42:	e7fa      	b.n	8003e3a <ISM330DHCX_GYRO_GetAxesRaw+0x1a>

08003e44 <ISM330DHCX_ACC_SetOutputDataRate>:
{
 8003e44:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8003e46:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003e4a:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
  if (pObj->acc_is_enabled == 1U)
 8003e4e:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003e50:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8003e54:	d042      	beq.n	8003edc <ISM330DHCX_ACC_SetOutputDataRate+0x98>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5a:	d804      	bhi.n	8003e66 <ISM330DHCX_ACC_SetOutputDataRate+0x22>
 8003e5c:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003e5e:	f880 302b 	strb.w	r3, [r0, #43]	@ 0x2b
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003e62:	2000      	movs	r0, #0
}
 8003e64:	bd08      	pop	{r3, pc}
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003e66:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003e6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e72:	d978      	bls.n	8003f66 <ISM330DHCX_ACC_SetOutputDataRate+0x122>
 8003e74:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8003fa0 <ISM330DHCX_ACC_SetOutputDataRate+0x15c>
 8003e78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e80:	d975      	bls.n	8003f6e <ISM330DHCX_ACC_SetOutputDataRate+0x12a>
 8003e82:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8003fa4 <ISM330DHCX_ACC_SetOutputDataRate+0x160>
 8003e86:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8e:	d972      	bls.n	8003f76 <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8003e90:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8003fa8 <ISM330DHCX_ACC_SetOutputDataRate+0x164>
 8003e94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9c:	d96f      	bls.n	8003f7e <ISM330DHCX_ACC_SetOutputDataRate+0x13a>
 8003e9e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8003fac <ISM330DHCX_ACC_SetOutputDataRate+0x168>
 8003ea2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eaa:	d96c      	bls.n	8003f86 <ISM330DHCX_ACC_SetOutputDataRate+0x142>
 8003eac:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8003fb0 <ISM330DHCX_ACC_SetOutputDataRate+0x16c>
 8003eb0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb8:	d969      	bls.n	8003f8e <ISM330DHCX_ACC_SetOutputDataRate+0x14a>
 8003eba:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8003fb4 <ISM330DHCX_ACC_SetOutputDataRate+0x170>
 8003ebe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec6:	d966      	bls.n	8003f96 <ISM330DHCX_ACC_SetOutputDataRate+0x152>
 8003ec8:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003fb8 <ISM330DHCX_ACC_SetOutputDataRate+0x174>
 8003ecc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed4:	bf94      	ite	ls
 8003ed6:	2309      	movls	r3, #9
 8003ed8:	230a      	movhi	r3, #10
 8003eda:	e7c0      	b.n	8003e5e <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	d939      	bls.n	8003f56 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
 8003ee2:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003ee6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eee:	d93c      	bls.n	8003f6a <ISM330DHCX_ACC_SetOutputDataRate+0x126>
 8003ef0:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8003fa0 <ISM330DHCX_ACC_SetOutputDataRate+0x15c>
 8003ef4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efc:	d939      	bls.n	8003f72 <ISM330DHCX_ACC_SetOutputDataRate+0x12e>
 8003efe:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8003fa4 <ISM330DHCX_ACC_SetOutputDataRate+0x160>
 8003f02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0a:	d936      	bls.n	8003f7a <ISM330DHCX_ACC_SetOutputDataRate+0x136>
 8003f0c:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8003fa8 <ISM330DHCX_ACC_SetOutputDataRate+0x164>
 8003f10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	d933      	bls.n	8003f82 <ISM330DHCX_ACC_SetOutputDataRate+0x13e>
 8003f1a:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003fac <ISM330DHCX_ACC_SetOutputDataRate+0x168>
 8003f1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f26:	d930      	bls.n	8003f8a <ISM330DHCX_ACC_SetOutputDataRate+0x146>
 8003f28:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8003fb0 <ISM330DHCX_ACC_SetOutputDataRate+0x16c>
 8003f2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f34:	d92d      	bls.n	8003f92 <ISM330DHCX_ACC_SetOutputDataRate+0x14e>
 8003f36:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003fb4 <ISM330DHCX_ACC_SetOutputDataRate+0x170>
 8003f3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	d92a      	bls.n	8003f9a <ISM330DHCX_ACC_SetOutputDataRate+0x156>
 8003f44:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8003fb8 <ISM330DHCX_ACC_SetOutputDataRate+0x174>
 8003f48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f50:	bf94      	ite	ls
 8003f52:	2109      	movls	r1, #9
 8003f54:	210a      	movhi	r1, #10
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003f56:	301c      	adds	r0, #28
 8003f58:	f000 fb8c 	bl	8004674 <ism330dhcx_xl_data_rate_set>
 8003f5c:	3800      	subs	r0, #0
 8003f5e:	bf18      	it	ne
 8003f60:	2001      	movne	r0, #1
 8003f62:	4240      	negs	r0, r0
}
 8003f64:	bd08      	pop	{r3, pc}
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f66:	2302      	movs	r3, #2
 8003f68:	e779      	b.n	8003e5e <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	e7f3      	b.n	8003f56 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e775      	b.n	8003e5e <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f72:	2103      	movs	r1, #3
 8003f74:	e7ef      	b.n	8003f56 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f76:	2304      	movs	r3, #4
 8003f78:	e771      	b.n	8003e5e <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f7a:	2104      	movs	r1, #4
 8003f7c:	e7eb      	b.n	8003f56 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f7e:	2305      	movs	r3, #5
 8003f80:	e76d      	b.n	8003e5e <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f82:	2105      	movs	r1, #5
 8003f84:	e7e7      	b.n	8003f56 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f86:	2306      	movs	r3, #6
 8003f88:	e769      	b.n	8003e5e <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f8a:	2106      	movs	r1, #6
 8003f8c:	e7e3      	b.n	8003f56 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f8e:	2307      	movs	r3, #7
 8003f90:	e765      	b.n	8003e5e <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f92:	2107      	movs	r1, #7
 8003f94:	e7df      	b.n	8003f56 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f96:	2308      	movs	r3, #8
 8003f98:	e761      	b.n	8003e5e <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003f9a:	2108      	movs	r1, #8
 8003f9c:	e7db      	b.n	8003f56 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
 8003f9e:	bf00      	nop
 8003fa0:	42500000 	.word	0x42500000
 8003fa4:	42d00000 	.word	0x42d00000
 8003fa8:	43500000 	.word	0x43500000
 8003fac:	43d08000 	.word	0x43d08000
 8003fb0:	44504000 	.word	0x44504000
 8003fb4:	44d06000 	.word	0x44d06000
 8003fb8:	45505000 	.word	0x45505000

08003fbc <ISM330DHCX_DeInit>:
{
 8003fbc:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003fbe:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8003fc2:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8003fc4:	b943      	cbnz	r3, 8003fd8 <ISM330DHCX_DeInit+0x1c>
  if (pObj->gyro_is_enabled == 0U)
 8003fc6:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003fca:	b9c3      	cbnz	r3, 8003ffe <ISM330DHCX_DeInit+0x42>
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f8a4 002b 	strh.w	r0, [r4, #43]	@ 0x2b
  pObj->is_initialized = 0;
 8003fd2:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003fd8:	f100 051c 	add.w	r5, r0, #28
 8003fdc:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f963 	bl	80042ac <ism330dhcx_xl_data_rate_get>
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	b9c8      	cbnz	r0, 800401e <ISM330DHCX_DeInit+0x62>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 fb42 	bl	8004674 <ism330dhcx_xl_data_rate_set>
 8003ff0:	b9a8      	cbnz	r0, 800401e <ISM330DHCX_DeInit+0x62>
  if (pObj->gyro_is_enabled == 0U)
 8003ff2:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
  pObj->acc_is_enabled = 0;
 8003ff6:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->gyro_is_enabled == 0U)
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0e6      	beq.n	8003fcc <ISM330DHCX_DeInit+0x10>
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003ffe:	f104 051c 	add.w	r5, r4, #28
 8004002:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 8004006:	4628      	mov	r0, r5
 8004008:	f000 f9ca 	bl	80043a0 <ism330dhcx_gy_data_rate_get>
 800400c:	4601      	mov	r1, r0
 800400e:	b930      	cbnz	r0, 800401e <ISM330DHCX_DeInit+0x62>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004010:	4628      	mov	r0, r5
 8004012:	f000 fc2b 	bl	800486c <ism330dhcx_gy_data_rate_set>
 8004016:	b910      	cbnz	r0, 800401e <ISM330DHCX_DeInit+0x62>
  pObj->gyro_is_enabled = 0;
 8004018:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return ISM330DHCX_OK;
 800401c:	e7d6      	b.n	8003fcc <ISM330DHCX_DeInit+0x10>
    return ISM330DHCX_ERROR;
 800401e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004022:	bd38      	pop	{r3, r4, r5, pc}

08004024 <ISM330DHCX_ACC_GetAxes>:
{
 8004024:	b530      	push	{r4, r5, lr}
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004026:	f100 051c 	add.w	r5, r0, #28
{
 800402a:	b085      	sub	sp, #20
 800402c:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800402e:	4628      	mov	r0, r5
 8004030:	a902      	add	r1, sp, #8
 8004032:	f000 fa1d 	bl	8004470 <ism330dhcx_acceleration_raw_get>
 8004036:	2800      	cmp	r0, #0
 8004038:	d13e      	bne.n	80040b8 <ISM330DHCX_ACC_GetAxes+0x94>
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800403a:	f10d 0107 	add.w	r1, sp, #7
 800403e:	4628      	mov	r0, r5
 8004040:	f000 f91a 	bl	8004278 <ism330dhcx_xl_full_scale_get>
 8004044:	bbc0      	cbnz	r0, 80040b8 <ISM330DHCX_ACC_GetAxes+0x94>
  switch (full_scale)
 8004046:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d834      	bhi.n	80040b8 <ISM330DHCX_ACC_GetAxes+0x94>
 800404e:	e8df f003 	tbb	[pc, r3]
 8004052:	2a2d      	.short	0x2a2d
 8004054:	0230      	.short	0x0230
 8004056:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80040c0 <ISM330DHCX_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800405a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800405e:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004062:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004066:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800406a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800406e:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004072:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004076:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800407a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800407e:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004082:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004086:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800408a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800408e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004096:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800409a:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800409e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80040a2:	b005      	add	sp, #20
 80040a4:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 80040a6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80040c4 <ISM330DHCX_ACC_GetAxes+0xa0>
 80040aa:	e7d6      	b.n	800405a <ISM330DHCX_ACC_GetAxes+0x36>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 80040ac:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 80040c8 <ISM330DHCX_ACC_GetAxes+0xa4>
 80040b0:	e7d3      	b.n	800405a <ISM330DHCX_ACC_GetAxes+0x36>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 80040b2:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 80040cc <ISM330DHCX_ACC_GetAxes+0xa8>
 80040b6:	e7d0      	b.n	800405a <ISM330DHCX_ACC_GetAxes+0x36>
    return ISM330DHCX_ERROR;
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80040bc:	b005      	add	sp, #20
 80040be:	bd30      	pop	{r4, r5, pc}
 80040c0:	3e79db23 	.word	0x3e79db23
 80040c4:	3ef9db23 	.word	0x3ef9db23
 80040c8:	3d79db23 	.word	0x3d79db23
 80040cc:	3df9db23 	.word	0x3df9db23

080040d0 <ISM330DHCX_GYRO_GetAxes>:
{
 80040d0:	b530      	push	{r4, r5, lr}
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80040d2:	f100 051c 	add.w	r5, r0, #28
{
 80040d6:	b085      	sub	sp, #20
 80040d8:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80040da:	4628      	mov	r0, r5
 80040dc:	a902      	add	r1, sp, #8
 80040de:	f000 f9a7 	bl	8004430 <ism330dhcx_angular_rate_raw_get>
 80040e2:	b990      	cbnz	r0, 800410a <ISM330DHCX_GYRO_GetAxes+0x3a>
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80040e4:	f10d 0107 	add.w	r1, sp, #7
 80040e8:	4628      	mov	r0, r5
 80040ea:	f000 f92b 	bl	8004344 <ism330dhcx_gy_full_scale_get>
 80040ee:	b960      	cbnz	r0, 800410a <ISM330DHCX_GYRO_GetAxes+0x3a>
  switch (full_scale)
 80040f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d808      	bhi.n	800410a <ISM330DHCX_GYRO_GetAxes+0x3a>
 80040f8:	e8df f003 	tbb	[pc, r3]
 80040fc:	0733070b 	.word	0x0733070b
 8004100:	07070739 	.word	0x07070739
 8004104:	0707073c 	.word	0x0707073c
 8004108:	36          	.byte	0x36
 8004109:	00          	.byte	0x00
    return ISM330DHCX_ERROR;
 800410a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800410e:	b005      	add	sp, #20
 8004110:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004112:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800417c <ISM330DHCX_GYRO_GetAxes+0xac>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004116:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800411a:	ee06 3a90 	vmov	s13, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800411e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004122:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004126:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800412a:	ee07 3a90 	vmov	s15, r3
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800412e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004132:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800413a:	ee66 6a86 	vmul.f32	s13, s13, s12
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800413e:	ee27 7a06 	vmul.f32	s14, s14, s12
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004142:	ee67 7a86 	vmul.f32	s15, s15, s12
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004146:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800414a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800414e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004152:	edc4 6a00 	vstr	s13, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004156:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800415a:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800415e:	b005      	add	sp, #20
 8004160:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004162:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8004180 <ISM330DHCX_GYRO_GetAxes+0xb0>
 8004166:	e7d6      	b.n	8004116 <ISM330DHCX_GYRO_GetAxes+0x46>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004168:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8004184 <ISM330DHCX_GYRO_GetAxes+0xb4>
 800416c:	e7d3      	b.n	8004116 <ISM330DHCX_GYRO_GetAxes+0x46>
  switch (full_scale)
 800416e:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8004188 <ISM330DHCX_GYRO_GetAxes+0xb8>
 8004172:	e7d0      	b.n	8004116 <ISM330DHCX_GYRO_GetAxes+0x46>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004174:	ed9f 6a05 	vldr	s12, [pc, #20]	@ 800418c <ISM330DHCX_GYRO_GetAxes+0xbc>
 8004178:	e7cd      	b.n	8004116 <ISM330DHCX_GYRO_GetAxes+0x46>
 800417a:	bf00      	nop
 800417c:	410c0000 	.word	0x410c0000
 8004180:	408c0000 	.word	0x408c0000
 8004184:	428c0000 	.word	0x428c0000
 8004188:	418c0000 	.word	0x418c0000
 800418c:	420c0000 	.word	0x420c0000

08004190 <ISM330DHCX_RegisterBusIO>:
{
 8004190:	b530      	push	{r4, r5, lr}
 8004192:	b083      	sub	sp, #12
  if (pObj == NULL)
 8004194:	b370      	cbz	r0, 80041f4 <ISM330DHCX_RegisterBusIO+0x64>
    pObj->IO.Init      = pIO->Init;
 8004196:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8004198:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 800419c:	688a      	ldr	r2, [r1, #8]
 800419e:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80041a0:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 80041a4:	7b0a      	ldrb	r2, [r1, #12]
 80041a6:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80041a8:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 80041ac:	6989      	ldr	r1, [r1, #24]
 80041ae:	61a1      	str	r1, [r4, #24]
 80041b0:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80041b2:	4912      	ldr	r1, [pc, #72]	@ (80041fc <ISM330DHCX_RegisterBusIO+0x6c>)
    pObj->Ctx.write_reg = WriteRegWrap;
 80041b4:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <ISM330DHCX_RegisterBusIO+0x70>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80041b6:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 80041b8:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 80041bc:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 80041be:	b1cb      	cbz	r3, 80041f4 <ISM330DHCX_RegisterBusIO+0x64>
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80041c0:	4798      	blx	r3
 80041c2:	4605      	mov	r5, r0
 80041c4:	b9b0      	cbnz	r0, 80041f4 <ISM330DHCX_RegisterBusIO+0x64>
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80041c6:	68a3      	ldr	r3, [r4, #8]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d002      	beq.n	80041d2 <ISM330DHCX_RegisterBusIO+0x42>
}
 80041cc:	4628      	mov	r0, r5
 80041ce:	b003      	add	sp, #12
 80041d0:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 80041d2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f8      	bne.n	80041cc <ISM330DHCX_RegisterBusIO+0x3c>
          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80041da:	210c      	movs	r1, #12
 80041dc:	f88d 1007 	strb.w	r1, [sp, #7]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80041e0:	2301      	movs	r3, #1
 80041e2:	f10d 0207 	add.w	r2, sp, #7
 80041e6:	f104 001c 	add.w	r0, r4, #28
 80041ea:	2112      	movs	r1, #18
 80041ec:	f000 f822 	bl	8004234 <ism330dhcx_write_reg>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d0eb      	beq.n	80041cc <ISM330DHCX_RegisterBusIO+0x3c>
    ret = ISM330DHCX_ERROR;
 80041f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  return ret;
 80041f8:	e7e8      	b.n	80041cc <ISM330DHCX_RegisterBusIO+0x3c>
 80041fa:	bf00      	nop
 80041fc:	08003865 	.word	0x08003865
 8004200:	08003875 	.word	0x08003875

08004204 <ism330dhcx_mem_bank_set.constprop.0>:
  * @param  ctx    Read / write interface definitions.(ptr)
  * @param  val    Change the values of reg_access in reg FUNC_CFG_ACCESS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
 8004204:	b530      	push	{r4, r5, lr}
 8004206:	4604      	mov	r4, r0
 8004208:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800420a:	2301      	movs	r3, #1
 800420c:	6880      	ldr	r0, [r0, #8]
 800420e:	6865      	ldr	r5, [r4, #4]
 8004210:	aa01      	add	r2, sp, #4
 8004212:	4619      	mov	r1, r3
 8004214:	47a8      	blx	r5
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8004216:	b958      	cbnz	r0, 8004230 <ism330dhcx_mem_bank_set.constprop.0+0x2c>
    func_cfg_access.reg_access = (uint8_t)val;
 8004218:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800421c:	6825      	ldr	r5, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800421e:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004222:	2301      	movs	r3, #1
 8004224:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 8004226:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800422a:	4619      	mov	r1, r3
 800422c:	aa01      	add	r2, sp, #4
 800422e:	47a8      	blx	r5
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
}
 8004230:	b003      	add	sp, #12
 8004232:	bd30      	pop	{r4, r5, pc}

08004234 <ism330dhcx_write_reg>:
{
 8004234:	b410      	push	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004236:	6804      	ldr	r4, [r0, #0]
 8004238:	6880      	ldr	r0, [r0, #8]
 800423a:	46a4      	mov	ip, r4
}
 800423c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004240:	4760      	bx	ip
 8004242:	bf00      	nop

08004244 <ism330dhcx_xl_full_scale_set>:
{
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4604      	mov	r4, r0
 8004248:	b082      	sub	sp, #8
 800424a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800424c:	6880      	ldr	r0, [r0, #8]
 800424e:	6866      	ldr	r6, [r4, #4]
 8004250:	2301      	movs	r3, #1
 8004252:	aa01      	add	r2, sp, #4
 8004254:	2110      	movs	r1, #16
 8004256:	47b0      	blx	r6
  if (ret == 0) {
 8004258:	b958      	cbnz	r0, 8004272 <ism330dhcx_xl_full_scale_set+0x2e>
    ctrl1_xl.fs_xl = (uint8_t)val;
 800425a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800425e:	6826      	ldr	r6, [r4, #0]
 8004260:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004262:	f365 0383 	bfi	r3, r5, #2, #2
 8004266:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800426a:	aa01      	add	r2, sp, #4
 800426c:	2301      	movs	r3, #1
 800426e:	2110      	movs	r1, #16
 8004270:	47b0      	blx	r6
}
 8004272:	b002      	add	sp, #8
 8004274:	bd70      	pop	{r4, r5, r6, pc}
 8004276:	bf00      	nop

08004278 <ism330dhcx_xl_full_scale_get>:
{
 8004278:	b530      	push	{r4, r5, lr}
 800427a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800427c:	2301      	movs	r3, #1
 800427e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004282:	aa01      	add	r2, sp, #4
{
 8004284:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004286:	2110      	movs	r1, #16
 8004288:	47a8      	blx	r5
  switch (ctrl1_xl.fs_xl) {
 800428a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800428e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d006      	beq.n	80042a4 <ism330dhcx_xl_full_scale_get+0x2c>
 8004296:	2b03      	cmp	r3, #3
 8004298:	d004      	beq.n	80042a4 <ism330dhcx_xl_full_scale_get+0x2c>
 800429a:	f1a3 0301 	sub.w	r3, r3, #1
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	095b      	lsrs	r3, r3, #5
      *val = ISM330DHCX_2g;
 80042a4:	7023      	strb	r3, [r4, #0]
}
 80042a6:	b003      	add	sp, #12
 80042a8:	bd30      	pop	{r4, r5, pc}
 80042aa:	bf00      	nop

080042ac <ism330dhcx_xl_data_rate_get>:
{
 80042ac:	b530      	push	{r4, r5, lr}
 80042ae:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042b0:	2301      	movs	r3, #1
 80042b2:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80042b6:	aa01      	add	r2, sp, #4
{
 80042b8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042ba:	2110      	movs	r1, #16
 80042bc:	47a8      	blx	r5
  switch (ctrl1_xl.odr_xl) {
 80042be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	3b01      	subs	r3, #1
 80042c6:	2b0a      	cmp	r3, #10
 80042c8:	d81f      	bhi.n	800430a <ism330dhcx_xl_data_rate_get+0x5e>
 80042ca:	e8df f003 	tbb	[pc, r3]
 80042ce:	0a06      	.short	0x0a06
 80042d0:	12100e0c 	.word	0x12100e0c
 80042d4:	1a181614 	.word	0x1a181614
 80042d8:	1c          	.byte	0x1c
 80042d9:	00          	.byte	0x00
 80042da:	2301      	movs	r3, #1
      *val = ISM330DHCX_XL_ODR_OFF;
 80042dc:	7023      	strb	r3, [r4, #0]
}
 80042de:	b003      	add	sp, #12
 80042e0:	bd30      	pop	{r4, r5, pc}
      break;
 80042e2:	2302      	movs	r3, #2
 80042e4:	e7fa      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e7f8      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80042ea:	2304      	movs	r3, #4
 80042ec:	e7f6      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80042ee:	2305      	movs	r3, #5
 80042f0:	e7f4      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80042f2:	2306      	movs	r3, #6
 80042f4:	e7f2      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80042f6:	2307      	movs	r3, #7
 80042f8:	e7f0      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80042fa:	2308      	movs	r3, #8
 80042fc:	e7ee      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80042fe:	2309      	movs	r3, #9
 8004300:	e7ec      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 8004302:	230a      	movs	r3, #10
 8004304:	e7ea      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
      break;
 8004306:	230b      	movs	r3, #11
 8004308:	e7e8      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
  switch (ctrl1_xl.odr_xl) {
 800430a:	2300      	movs	r3, #0
 800430c:	e7e6      	b.n	80042dc <ism330dhcx_xl_data_rate_get+0x30>
 800430e:	bf00      	nop

08004310 <ism330dhcx_gy_full_scale_set>:
{
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4604      	mov	r4, r0
 8004314:	b082      	sub	sp, #8
 8004316:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004318:	6880      	ldr	r0, [r0, #8]
 800431a:	6866      	ldr	r6, [r4, #4]
 800431c:	2301      	movs	r3, #1
 800431e:	aa01      	add	r2, sp, #4
 8004320:	2111      	movs	r1, #17
 8004322:	47b0      	blx	r6
  if (ret == 0) {
 8004324:	b958      	cbnz	r0, 800433e <ism330dhcx_gy_full_scale_set+0x2e>
    ctrl2_g.fs_g = (uint8_t)val;
 8004326:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800432a:	6826      	ldr	r6, [r4, #0]
 800432c:	68a0      	ldr	r0, [r4, #8]
    ctrl2_g.fs_g = (uint8_t)val;
 800432e:	f365 0303 	bfi	r3, r5, #0, #4
 8004332:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004336:	aa01      	add	r2, sp, #4
 8004338:	2301      	movs	r3, #1
 800433a:	2111      	movs	r1, #17
 800433c:	47b0      	blx	r6
}
 800433e:	b002      	add	sp, #8
 8004340:	bd70      	pop	{r4, r5, r6, pc}
 8004342:	bf00      	nop

08004344 <ism330dhcx_gy_full_scale_get>:
{
 8004344:	b530      	push	{r4, r5, lr}
 8004346:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004348:	2301      	movs	r3, #1
 800434a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800434e:	aa01      	add	r2, sp, #4
{
 8004350:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004352:	2111      	movs	r1, #17
 8004354:	47a8      	blx	r5
  switch (ctrl2_g.fs_g) {
 8004356:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d808      	bhi.n	8004374 <ism330dhcx_gy_full_scale_get+0x30>
 8004362:	e8df f003 	tbb	[pc, r3]
 8004366:	0f1b      	.short	0x0f1b
 8004368:	07130707 	.word	0x07130707
 800436c:	07170707 	.word	0x07170707
 8004370:	0707      	.short	0x0707
 8004372:	0b          	.byte	0x0b
 8004373:	00          	.byte	0x00
 8004374:	2302      	movs	r3, #2
      *val = ISM330DHCX_125dps;
 8004376:	7023      	strb	r3, [r4, #0]
}
 8004378:	b003      	add	sp, #12
 800437a:	bd30      	pop	{r4, r5, pc}
      break;
 800437c:	230c      	movs	r3, #12
      *val = ISM330DHCX_125dps;
 800437e:	7023      	strb	r3, [r4, #0]
}
 8004380:	b003      	add	sp, #12
 8004382:	bd30      	pop	{r4, r5, pc}
      break;
 8004384:	2301      	movs	r3, #1
      *val = ISM330DHCX_125dps;
 8004386:	7023      	strb	r3, [r4, #0]
}
 8004388:	b003      	add	sp, #12
 800438a:	bd30      	pop	{r4, r5, pc}
      break;
 800438c:	2304      	movs	r3, #4
      *val = ISM330DHCX_125dps;
 800438e:	7023      	strb	r3, [r4, #0]
}
 8004390:	b003      	add	sp, #12
 8004392:	bd30      	pop	{r4, r5, pc}
      break;
 8004394:	2308      	movs	r3, #8
      *val = ISM330DHCX_125dps;
 8004396:	7023      	strb	r3, [r4, #0]
}
 8004398:	b003      	add	sp, #12
 800439a:	bd30      	pop	{r4, r5, pc}
  switch (ctrl2_g.fs_g) {
 800439c:	2300      	movs	r3, #0
 800439e:	e7ea      	b.n	8004376 <ism330dhcx_gy_full_scale_get+0x32>

080043a0 <ism330dhcx_gy_data_rate_get>:
{
 80043a0:	b530      	push	{r4, r5, lr}
 80043a2:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043a4:	2301      	movs	r3, #1
 80043a6:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80043aa:	aa01      	add	r2, sp, #4
{
 80043ac:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043ae:	2111      	movs	r1, #17
 80043b0:	47a8      	blx	r5
  switch (ctrl2_g.odr_g) {
 80043b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	3b01      	subs	r3, #1
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	d81c      	bhi.n	80043f8 <ism330dhcx_gy_data_rate_get+0x58>
 80043be:	e8df f003 	tbb	[pc, r3]
 80043c2:	0905      	.short	0x0905
 80043c4:	110f0d0b 	.word	0x110f0d0b
 80043c8:	19171513 	.word	0x19171513
 80043cc:	2301      	movs	r3, #1
      *val = ISM330DHCX_GY_ODR_OFF;
 80043ce:	7023      	strb	r3, [r4, #0]
}
 80043d0:	b003      	add	sp, #12
 80043d2:	bd30      	pop	{r4, r5, pc}
      break;
 80043d4:	2302      	movs	r3, #2
 80043d6:	e7fa      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80043d8:	2303      	movs	r3, #3
 80043da:	e7f8      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80043dc:	2304      	movs	r3, #4
 80043de:	e7f6      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80043e0:	2305      	movs	r3, #5
 80043e2:	e7f4      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80043e4:	2306      	movs	r3, #6
 80043e6:	e7f2      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80043e8:	2307      	movs	r3, #7
 80043ea:	e7f0      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80043ec:	2308      	movs	r3, #8
 80043ee:	e7ee      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80043f0:	2309      	movs	r3, #9
 80043f2:	e7ec      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80043f4:	230a      	movs	r3, #10
 80043f6:	e7ea      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>
  switch (ctrl2_g.odr_g) {
 80043f8:	2300      	movs	r3, #0
 80043fa:	e7e8      	b.n	80043ce <ism330dhcx_gy_data_rate_get+0x2e>

080043fc <ism330dhcx_block_data_update_set>:
{
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4604      	mov	r4, r0
 8004400:	b082      	sub	sp, #8
 8004402:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004404:	6880      	ldr	r0, [r0, #8]
 8004406:	6866      	ldr	r6, [r4, #4]
 8004408:	2301      	movs	r3, #1
 800440a:	aa01      	add	r2, sp, #4
 800440c:	2112      	movs	r1, #18
 800440e:	47b0      	blx	r6
  if (ret == 0) {
 8004410:	b958      	cbnz	r0, 800442a <ism330dhcx_block_data_update_set+0x2e>
    ctrl3_c.bdu = (uint8_t)val;
 8004412:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004416:	6826      	ldr	r6, [r4, #0]
 8004418:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.bdu = (uint8_t)val;
 800441a:	f365 1386 	bfi	r3, r5, #6, #1
 800441e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004422:	aa01      	add	r2, sp, #4
 8004424:	2301      	movs	r3, #1
 8004426:	2112      	movs	r1, #18
 8004428:	47b0      	blx	r6
}
 800442a:	b002      	add	sp, #8
 800442c:	bd70      	pop	{r4, r5, r6, pc}
 800442e:	bf00      	nop

08004430 <ism330dhcx_angular_rate_raw_get>:
{
 8004430:	b530      	push	{r4, r5, lr}
 8004432:	b083      	sub	sp, #12
 8004434:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004436:	466a      	mov	r2, sp
 8004438:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800443c:	2306      	movs	r3, #6
 800443e:	2122      	movs	r1, #34	@ 0x22
 8004440:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004442:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004446:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800444a:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800444e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004452:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004454:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004458:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800445c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8004460:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004462:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004466:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800446a:	80a3      	strh	r3, [r4, #4]
}
 800446c:	b003      	add	sp, #12
 800446e:	bd30      	pop	{r4, r5, pc}

08004470 <ism330dhcx_acceleration_raw_get>:
{
 8004470:	b530      	push	{r4, r5, lr}
 8004472:	b083      	sub	sp, #12
 8004474:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004476:	466a      	mov	r2, sp
 8004478:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800447c:	2306      	movs	r3, #6
 800447e:	2128      	movs	r1, #40	@ 0x28
 8004480:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004482:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004486:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800448a:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800448e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004492:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004494:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004498:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800449c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80044a0:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80044a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80044a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044aa:	80a3      	strh	r3, [r4, #4]
}
 80044ac:	b003      	add	sp, #12
 80044ae:	bd30      	pop	{r4, r5, pc}

080044b0 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044b0:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044b2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 80044b6:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044b8:	46a4      	mov	ip, r4
 80044ba:	2301      	movs	r3, #1
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
  return ret;
}
 80044bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044c0:	210f      	movs	r1, #15
 80044c2:	4760      	bx	ip

080044c4 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4604      	mov	r4, r0
 80044c8:	b082      	sub	sp, #8
 80044ca:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044cc:	6880      	ldr	r0, [r0, #8]
 80044ce:	6866      	ldr	r6, [r4, #4]
 80044d0:	2301      	movs	r3, #1
 80044d2:	aa01      	add	r2, sp, #4
 80044d4:	2112      	movs	r1, #18
 80044d6:	47b0      	blx	r6
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80044d8:	b958      	cbnz	r0, 80044f2 <ism330dhcx_reset_set+0x2e>
    ctrl3_c.sw_reset = (uint8_t)val;
 80044da:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044de:	6826      	ldr	r6, [r4, #0]
 80044e0:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.sw_reset = (uint8_t)val;
 80044e2:	f365 0300 	bfi	r3, r5, #0, #1
 80044e6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044ea:	aa01      	add	r2, sp, #4
 80044ec:	2301      	movs	r3, #1
 80044ee:	2112      	movs	r1, #18
 80044f0:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80044f2:	b002      	add	sp, #8
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
 80044f6:	bf00      	nop

080044f8 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	4604      	mov	r4, r0
 80044fc:	b082      	sub	sp, #8
 80044fe:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004500:	6880      	ldr	r0, [r0, #8]
 8004502:	6866      	ldr	r6, [r4, #4]
 8004504:	2301      	movs	r3, #1
 8004506:	aa01      	add	r2, sp, #4
 8004508:	2112      	movs	r1, #18
 800450a:	47b0      	blx	r6
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800450c:	b958      	cbnz	r0, 8004526 <ism330dhcx_auto_increment_set+0x2e>
    ctrl3_c.if_inc = (uint8_t)val;
 800450e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004512:	6826      	ldr	r6, [r4, #0]
 8004514:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.if_inc = (uint8_t)val;
 8004516:	f365 0382 	bfi	r3, r5, #2, #1
 800451a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800451e:	aa01      	add	r2, sp, #4
 8004520:	2301      	movs	r3, #1
 8004522:	2112      	movs	r1, #18
 8004524:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8004526:	b002      	add	sp, #8
 8004528:	bd70      	pop	{r4, r5, r6, pc}
 800452a:	bf00      	nop

0800452c <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4604      	mov	r4, r0
 8004530:	b082      	sub	sp, #8
 8004532:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004534:	6880      	ldr	r0, [r0, #8]
 8004536:	6866      	ldr	r6, [r4, #4]
 8004538:	2301      	movs	r3, #1
 800453a:	aa01      	add	r2, sp, #4
 800453c:	210a      	movs	r1, #10
 800453e:	47b0      	blx	r6
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8004540:	b958      	cbnz	r0, 800455a <ism330dhcx_fifo_mode_set+0x2e>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8004542:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004546:	6826      	ldr	r6, [r4, #0]
 8004548:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800454a:	f365 0302 	bfi	r3, r5, #0, #3
 800454e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004552:	aa01      	add	r2, sp, #4
 8004554:	2301      	movs	r3, #1
 8004556:	210a      	movs	r1, #10
 8004558:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 800455a:	b002      	add	sp, #8
 800455c:	bd70      	pop	{r4, r5, r6, pc}
 800455e:	bf00      	nop

08004560 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	4605      	mov	r5, r0
 8004564:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004566:	2301      	movs	r3, #1
{
 8004568:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800456a:	6880      	ldr	r0, [r0, #8]
 800456c:	686e      	ldr	r6, [r5, #4]
 800456e:	aa01      	add	r2, sp, #4
 8004570:	4619      	mov	r1, r3
 8004572:	47b0      	blx	r6
  if (ret == 0) {
 8004574:	b9a0      	cbnz	r0, 80045a0 <ism330dhcx_fsm_data_rate_get+0x40>
    func_cfg_access.reg_access = (uint8_t)val;
 8004576:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800457a:	68a8      	ldr	r0, [r5, #8]
 800457c:	682e      	ldr	r6, [r5, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800457e:	2302      	movs	r3, #2
 8004580:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004584:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004586:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800458a:	4619      	mov	r1, r3
 800458c:	aa01      	add	r2, sp, #4
 800458e:	47b0      	blx	r6
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 8004590:	b930      	cbnz	r0, 80045a0 <ism330dhcx_fsm_data_rate_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004592:	68a8      	ldr	r0, [r5, #8]
 8004594:	686e      	ldr	r6, [r5, #4]
 8004596:	2301      	movs	r3, #1
 8004598:	466a      	mov	r2, sp
 800459a:	215f      	movs	r1, #95	@ 0x5f
 800459c:	47b0      	blx	r6
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800459e:	b178      	cbz	r0, 80045c0 <ism330dhcx_fsm_data_rate_get+0x60>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 80045a0:	f89d 3000 	ldrb.w	r3, [sp]
 80045a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d006      	beq.n	80045ba <ism330dhcx_fsm_data_rate_get+0x5a>
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d004      	beq.n	80045ba <ism330dhcx_fsm_data_rate_get+0x5a>
 80045b0:	f1a3 0301 	sub.w	r3, r3, #1
 80045b4:	fab3 f383 	clz	r3, r3
 80045b8:	095b      	lsrs	r3, r3, #5
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80045ba:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_ODR_FSM_12Hz5;
      break;
  }

  return ret;
}
 80045bc:	b002      	add	sp, #8
 80045be:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045c0:	2301      	movs	r3, #1
 80045c2:	68a8      	ldr	r0, [r5, #8]
 80045c4:	686e      	ldr	r6, [r5, #4]
 80045c6:	aa01      	add	r2, sp, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	47b0      	blx	r6
  if (ret == 0) {
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d1e7      	bne.n	80045a0 <ism330dhcx_fsm_data_rate_get+0x40>
    func_cfg_access.reg_access = (uint8_t)val;
 80045d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045d4:	682e      	ldr	r6, [r5, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80045d6:	f360 1187 	bfi	r1, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045da:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80045dc:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045e0:	68a8      	ldr	r0, [r5, #8]
 80045e2:	aa01      	add	r2, sp, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	47b0      	blx	r6
  return ret;
 80045e8:	e7da      	b.n	80045a0 <ism330dhcx_fsm_data_rate_get+0x40>
 80045ea:	bf00      	nop

080045ec <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	4604      	mov	r4, r0
 80045f0:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045f2:	2301      	movs	r3, #1
{
 80045f4:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045f6:	6880      	ldr	r0, [r0, #8]
 80045f8:	6866      	ldr	r6, [r4, #4]
 80045fa:	aa01      	add	r2, sp, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	47b0      	blx	r6
  if (ret == 0) {
 8004600:	2800      	cmp	r0, #0
 8004602:	d135      	bne.n	8004670 <ism330dhcx_mlc_data_rate_get+0x84>
    func_cfg_access.reg_access = (uint8_t)val;
 8004604:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004608:	68a0      	ldr	r0, [r4, #8]
 800460a:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800460c:	2302      	movs	r3, #2
 800460e:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004612:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004614:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004618:	4619      	mov	r1, r3
 800461a:	aa01      	add	r2, sp, #4
 800461c:	47b0      	blx	r6
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 800461e:	bb38      	cbnz	r0, 8004670 <ism330dhcx_mlc_data_rate_get+0x84>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004620:	68a0      	ldr	r0, [r4, #8]
 8004622:	6866      	ldr	r6, [r4, #4]
 8004624:	2301      	movs	r3, #1
 8004626:	466a      	mov	r2, sp
 8004628:	2160      	movs	r1, #96	@ 0x60
 800462a:	47b0      	blx	r6
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 800462c:	bb00      	cbnz	r0, 8004670 <ism330dhcx_mlc_data_rate_get+0x84>
    switch (reg.mlc_odr) {
 800462e:	f89d 3000 	ldrb.w	r3, [sp]
 8004632:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004636:	2b02      	cmp	r3, #2
 8004638:	d006      	beq.n	8004648 <ism330dhcx_mlc_data_rate_get+0x5c>
 800463a:	2b03      	cmp	r3, #3
 800463c:	d004      	beq.n	8004648 <ism330dhcx_mlc_data_rate_get+0x5c>
 800463e:	f1a3 0301 	sub.w	r3, r3, #1
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	095b      	lsrs	r3, r3, #5
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004648:	702b      	strb	r3, [r5, #0]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800464a:	2301      	movs	r3, #1
 800464c:	6865      	ldr	r5, [r4, #4]
 800464e:	68a0      	ldr	r0, [r4, #8]
 8004650:	aa01      	add	r2, sp, #4
 8004652:	4619      	mov	r1, r3
 8004654:	47a8      	blx	r5
  if (ret == 0) {
 8004656:	b958      	cbnz	r0, 8004670 <ism330dhcx_mlc_data_rate_get+0x84>
    func_cfg_access.reg_access = (uint8_t)val;
 8004658:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800465c:	6825      	ldr	r5, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800465e:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004662:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004664:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004668:	68a0      	ldr	r0, [r4, #8]
 800466a:	aa01      	add	r2, sp, #4
 800466c:	4619      	mov	r1, r3
 800466e:	47a8      	blx	r5

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  return ret;
}
 8004670:	b002      	add	sp, #8
 8004672:	bd70      	pop	{r4, r5, r6, pc}

08004674 <ism330dhcx_xl_data_rate_set>:
{
 8004674:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004676:	2301      	movs	r3, #1
{
 8004678:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800467a:	6846      	ldr	r6, [r0, #4]
{
 800467c:	4604      	mov	r4, r0
 800467e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004680:	6880      	ldr	r0, [r0, #8]
 8004682:	aa03      	add	r2, sp, #12
 8004684:	4619      	mov	r1, r3
 8004686:	47b0      	blx	r6
  if (ret == 0) {
 8004688:	2800      	cmp	r0, #0
 800468a:	f040 80a5 	bne.w	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 800468e:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004692:	6826      	ldr	r6, [r4, #0]
 8004694:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 8004696:	2302      	movs	r3, #2
 8004698:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800469c:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 800469e:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046a2:	4619      	mov	r1, r3
 80046a4:	aa03      	add	r2, sp, #12
 80046a6:	47b0      	blx	r6
  if (ret == 0) {
 80046a8:	2800      	cmp	r0, #0
 80046aa:	f040 8095 	bne.w	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046ae:	6866      	ldr	r6, [r4, #4]
 80046b0:	68a0      	ldr	r0, [r4, #8]
 80046b2:	2301      	movs	r3, #1
 80046b4:	aa03      	add	r2, sp, #12
 80046b6:	2146      	movs	r1, #70	@ 0x46
 80046b8:	47b0      	blx	r6
  if (ret == 0) {
 80046ba:	2800      	cmp	r0, #0
 80046bc:	f040 808c 	bne.w	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046c0:	6866      	ldr	r6, [r4, #4]
 80046c2:	68a0      	ldr	r0, [r4, #8]
 80046c4:	2301      	movs	r3, #1
 80046c6:	f10d 020d 	add.w	r2, sp, #13
 80046ca:	2147      	movs	r1, #71	@ 0x47
 80046cc:	47b0      	blx	r6
  if (ret == 0) {
 80046ce:	2800      	cmp	r0, #0
 80046d0:	f040 8082 	bne.w	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046d4:	2301      	movs	r3, #1
 80046d6:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80046da:	aa02      	add	r2, sp, #8
 80046dc:	4619      	mov	r1, r3
 80046de:	47b0      	blx	r6
  if (ret == 0) {
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d179      	bne.n	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 80046e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046e8:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80046ea:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046ee:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80046f0:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046f4:	68a0      	ldr	r0, [r4, #8]
 80046f6:	aa02      	add	r2, sp, #8
 80046f8:	4619      	mov	r1, r3
 80046fa:	47b0      	blx	r6
  if (ret == 0) {
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d16b      	bne.n	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004700:	f89d 100c 	ldrb.w	r1, [sp, #12]
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004704:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004708:	f3c1 0300 	ubfx	r3, r1, #0, #1
 800470c:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm3_en  |
 800470e:	f3c1 0280 	ubfx	r2, r1, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004712:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004714:	f3c1 02c0 	ubfx	r2, r1, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004718:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm5_en  |
 800471a:	f3c1 1200 	ubfx	r2, r1, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 800471e:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004720:	f3c1 1240 	ubfx	r2, r1, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004724:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004726:	f3c1 1080 	ubfx	r0, r1, #6, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 800472a:	f89d 200d 	ldrb.w	r2, [sp, #13]
          fsm_enable.fsm_enable_a.fsm6_en  |
 800472e:	4303      	orrs	r3, r0
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004730:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004734:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004738:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 800473a:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 800473e:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 8004740:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 8004744:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 8004746:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 800474a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 800474c:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 8004750:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 8004752:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 8004756:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8004758:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 800475c:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 800475e:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004762:	07da      	lsls	r2, r3, #31
 8004764:	d43a      	bmi.n	80047dc <ism330dhcx_xl_data_rate_set+0x168>
  ism330dhcx_odr_xl_t odr_xl =  val;
 8004766:	462e      	mov	r6, r5
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004768:	2301      	movs	r3, #1
 800476a:	68a0      	ldr	r0, [r4, #8]
 800476c:	6867      	ldr	r7, [r4, #4]
 800476e:	aa02      	add	r2, sp, #8
 8004770:	4619      	mov	r1, r3
 8004772:	47b8      	blx	r7
  if (ret == 0) {
 8004774:	2800      	cmp	r0, #0
 8004776:	d12f      	bne.n	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 8004778:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800477c:	68a0      	ldr	r0, [r4, #8]
 800477e:	6827      	ldr	r7, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 8004780:	2202      	movs	r2, #2
 8004782:	f362 1387 	bfi	r3, r2, #6, #2
 8004786:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800478a:	2301      	movs	r3, #1
 800478c:	aa02      	add	r2, sp, #8
 800478e:	4619      	mov	r1, r3
 8004790:	47b8      	blx	r7
  if (ret == 0) {
 8004792:	bb08      	cbnz	r0, 80047d8 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004794:	68a0      	ldr	r0, [r4, #8]
 8004796:	6867      	ldr	r7, [r4, #4]
 8004798:	2301      	movs	r3, #1
 800479a:	aa02      	add	r2, sp, #8
 800479c:	2105      	movs	r1, #5
 800479e:	47b8      	blx	r7
  if (ret == 0) {
 80047a0:	b9d0      	cbnz	r0, 80047d8 <ism330dhcx_xl_data_rate_set+0x164>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80047a2:	4620      	mov	r0, r4
 80047a4:	f7ff fd2e 	bl	8004204 <ism330dhcx_mem_bank_set.constprop.0>
    *val  = reg.mlc_en;
 80047a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if ( mlc_enable == PROPERTY_ENABLE ) {
 80047ac:	06db      	lsls	r3, r3, #27
 80047ae:	d424      	bmi.n	80047fa <ism330dhcx_xl_data_rate_set+0x186>
  if (ret == 0) {
 80047b0:	b990      	cbnz	r0, 80047d8 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80047b2:	6865      	ldr	r5, [r4, #4]
 80047b4:	68a0      	ldr	r0, [r4, #8]
 80047b6:	2301      	movs	r3, #1
 80047b8:	aa01      	add	r2, sp, #4
 80047ba:	2110      	movs	r1, #16
 80047bc:	47a8      	blx	r5
  if (ret == 0) {
 80047be:	b958      	cbnz	r0, 80047d8 <ism330dhcx_xl_data_rate_set+0x164>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80047c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047c4:	6825      	ldr	r5, [r4, #0]
 80047c6:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80047c8:	f366 1307 	bfi	r3, r6, #4, #4
 80047cc:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047d0:	aa01      	add	r2, sp, #4
 80047d2:	2301      	movs	r3, #1
 80047d4:	2110      	movs	r1, #16
 80047d6:	47a8      	blx	r5
}
 80047d8:	b005      	add	sp, #20
 80047da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80047dc:	f10d 0107 	add.w	r1, sp, #7
 80047e0:	4620      	mov	r0, r4
 80047e2:	f7ff febd 	bl	8004560 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0) {
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d1f6      	bne.n	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
        switch (fsm_odr) {
 80047ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d8b9      	bhi.n	8004766 <ism330dhcx_xl_data_rate_set+0xf2>
 80047f2:	e8df f003 	tbb	[pc, r3]
 80047f6:	151a      	.short	0x151a
 80047f8:	101f      	.short	0x101f
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80047fa:	a902      	add	r1, sp, #8
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7ff fef5 	bl	80045ec <ism330dhcx_mlc_data_rate_get>
      if (ret == 0) {
 8004802:	2800      	cmp	r0, #0
 8004804:	d1e8      	bne.n	80047d8 <ism330dhcx_xl_data_rate_set+0x164>
        switch (mlc_odr) {
 8004806:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d82b      	bhi.n	8004866 <ism330dhcx_xl_data_rate_set+0x1f2>
 800480e:	e8df f003 	tbb	[pc, r3]
 8004812:	2025      	.short	0x2025
 8004814:	161b      	.short	0x161b
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004816:	2d04      	cmp	r5, #4
 8004818:	462e      	mov	r6, r5
 800481a:	bf38      	it	cc
 800481c:	2604      	movcc	r6, #4
 800481e:	e7a3      	b.n	8004768 <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004820:	2d02      	cmp	r5, #2
 8004822:	462e      	mov	r6, r5
 8004824:	bf38      	it	cc
 8004826:	2602      	movcc	r6, #2
 8004828:	e79e      	b.n	8004768 <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800482a:	2d01      	cmp	r5, #1
 800482c:	462e      	mov	r6, r5
 800482e:	bf38      	it	cc
 8004830:	2601      	movcc	r6, #1
  if (ret == 0) {
 8004832:	e799      	b.n	8004768 <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004834:	2d03      	cmp	r5, #3
 8004836:	462e      	mov	r6, r5
 8004838:	bf38      	it	cc
 800483a:	2603      	movcc	r6, #3
 800483c:	e794      	b.n	8004768 <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800483e:	2d04      	cmp	r5, #4
 8004840:	bf38      	it	cc
 8004842:	2504      	movcc	r5, #4
 8004844:	462e      	mov	r6, r5
 8004846:	e7b4      	b.n	80047b2 <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004848:	2d03      	cmp	r5, #3
 800484a:	bf38      	it	cc
 800484c:	2503      	movcc	r5, #3
 800484e:	462e      	mov	r6, r5
 8004850:	e7af      	b.n	80047b2 <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004852:	2d02      	cmp	r5, #2
 8004854:	bf38      	it	cc
 8004856:	2502      	movcc	r5, #2
 8004858:	462e      	mov	r6, r5
 800485a:	e7aa      	b.n	80047b2 <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800485c:	2d01      	cmp	r5, #1
 800485e:	bf38      	it	cc
 8004860:	2501      	movcc	r5, #1
 8004862:	462e      	mov	r6, r5
  if (ret == 0) {
 8004864:	e7a5      	b.n	80047b2 <ism330dhcx_xl_data_rate_set+0x13e>
        switch (mlc_odr) {
 8004866:	462e      	mov	r6, r5
 8004868:	e7a3      	b.n	80047b2 <ism330dhcx_xl_data_rate_set+0x13e>
 800486a:	bf00      	nop

0800486c <ism330dhcx_gy_data_rate_set>:
{
 800486c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800486e:	2301      	movs	r3, #1
{
 8004870:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004872:	6846      	ldr	r6, [r0, #4]
{
 8004874:	4604      	mov	r4, r0
 8004876:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004878:	6880      	ldr	r0, [r0, #8]
 800487a:	aa03      	add	r2, sp, #12
 800487c:	4619      	mov	r1, r3
 800487e:	47b0      	blx	r6
  if (ret == 0) {
 8004880:	2800      	cmp	r0, #0
 8004882:	f040 80a5 	bne.w	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 8004886:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800488a:	6826      	ldr	r6, [r4, #0]
 800488c:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 800488e:	2302      	movs	r3, #2
 8004890:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004894:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004896:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800489a:	4619      	mov	r1, r3
 800489c:	aa03      	add	r2, sp, #12
 800489e:	47b0      	blx	r6
  if (ret == 0) {
 80048a0:	2800      	cmp	r0, #0
 80048a2:	f040 8095 	bne.w	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80048a6:	6866      	ldr	r6, [r4, #4]
 80048a8:	68a0      	ldr	r0, [r4, #8]
 80048aa:	2301      	movs	r3, #1
 80048ac:	aa03      	add	r2, sp, #12
 80048ae:	2146      	movs	r1, #70	@ 0x46
 80048b0:	47b0      	blx	r6
  if (ret == 0) {
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f040 808c 	bne.w	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80048b8:	6866      	ldr	r6, [r4, #4]
 80048ba:	68a0      	ldr	r0, [r4, #8]
 80048bc:	2301      	movs	r3, #1
 80048be:	f10d 020d 	add.w	r2, sp, #13
 80048c2:	2147      	movs	r1, #71	@ 0x47
 80048c4:	47b0      	blx	r6
  if (ret == 0) {
 80048c6:	2800      	cmp	r0, #0
 80048c8:	f040 8082 	bne.w	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80048cc:	2301      	movs	r3, #1
 80048ce:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80048d2:	aa02      	add	r2, sp, #8
 80048d4:	4619      	mov	r1, r3
 80048d6:	47b0      	blx	r6
  if (ret == 0) {
 80048d8:	2800      	cmp	r0, #0
 80048da:	d179      	bne.n	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 80048dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80048e0:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80048e2:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80048e6:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80048e8:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80048ec:	68a0      	ldr	r0, [r4, #8]
 80048ee:	aa02      	add	r2, sp, #8
 80048f0:	4619      	mov	r1, r3
 80048f2:	47b0      	blx	r6
  if (ret == 0) {
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d16b      	bne.n	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80048f8:	f89d 100c 	ldrb.w	r1, [sp, #12]
          fsm_enable.fsm_enable_a.fsm2_en  |
 80048fc:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004900:	f3c1 0300 	ubfx	r3, r1, #0, #1
 8004904:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004906:	f3c1 0280 	ubfx	r2, r1, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 800490a:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm4_en  |
 800490c:	f3c1 02c0 	ubfx	r2, r1, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004910:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004912:	f3c1 1200 	ubfx	r2, r1, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004916:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004918:	f3c1 1240 	ubfx	r2, r1, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 800491c:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm7_en  |
 800491e:	f3c1 1080 	ubfx	r0, r1, #6, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004922:	f89d 200d 	ldrb.w	r2, [sp, #13]
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004926:	4303      	orrs	r3, r0
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004928:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 800492c:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004930:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 8004932:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004936:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 8004938:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 800493c:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 800493e:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 8004942:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 8004944:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 8004948:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 800494a:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 800494e:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8004950:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 8004954:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8004956:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800495a:	07da      	lsls	r2, r3, #31
 800495c:	d43a      	bmi.n	80049d4 <ism330dhcx_gy_data_rate_set+0x168>
  ism330dhcx_odr_g_t odr_gy =  val;
 800495e:	462e      	mov	r6, r5
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004960:	2301      	movs	r3, #1
 8004962:	68a0      	ldr	r0, [r4, #8]
 8004964:	6867      	ldr	r7, [r4, #4]
 8004966:	aa02      	add	r2, sp, #8
 8004968:	4619      	mov	r1, r3
 800496a:	47b8      	blx	r7
  if (ret == 0) {
 800496c:	2800      	cmp	r0, #0
 800496e:	d12f      	bne.n	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 8004970:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004974:	68a0      	ldr	r0, [r4, #8]
 8004976:	6827      	ldr	r7, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 8004978:	2202      	movs	r2, #2
 800497a:	f362 1387 	bfi	r3, r2, #6, #2
 800497e:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004982:	2301      	movs	r3, #1
 8004984:	aa02      	add	r2, sp, #8
 8004986:	4619      	mov	r1, r3
 8004988:	47b8      	blx	r7
  if (ret == 0) {
 800498a:	bb08      	cbnz	r0, 80049d0 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800498c:	68a0      	ldr	r0, [r4, #8]
 800498e:	6867      	ldr	r7, [r4, #4]
 8004990:	2301      	movs	r3, #1
 8004992:	aa02      	add	r2, sp, #8
 8004994:	2105      	movs	r1, #5
 8004996:	47b8      	blx	r7
  if (ret == 0) {
 8004998:	b9d0      	cbnz	r0, 80049d0 <ism330dhcx_gy_data_rate_set+0x164>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800499a:	4620      	mov	r0, r4
 800499c:	f7ff fc32 	bl	8004204 <ism330dhcx_mem_bank_set.constprop.0>
    *val  = reg.mlc_en;
 80049a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if ( mlc_enable == PROPERTY_ENABLE ) {
 80049a4:	06db      	lsls	r3, r3, #27
 80049a6:	d424      	bmi.n	80049f2 <ism330dhcx_gy_data_rate_set+0x186>
  if (ret == 0) {
 80049a8:	b990      	cbnz	r0, 80049d0 <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80049aa:	6865      	ldr	r5, [r4, #4]
 80049ac:	68a0      	ldr	r0, [r4, #8]
 80049ae:	2301      	movs	r3, #1
 80049b0:	aa01      	add	r2, sp, #4
 80049b2:	2111      	movs	r1, #17
 80049b4:	47a8      	blx	r5
  if (ret == 0) {
 80049b6:	b958      	cbnz	r0, 80049d0 <ism330dhcx_gy_data_rate_set+0x164>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80049b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80049bc:	6825      	ldr	r5, [r4, #0]
 80049be:	68a0      	ldr	r0, [r4, #8]
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80049c0:	f366 1307 	bfi	r3, r6, #4, #4
 80049c4:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80049c8:	aa01      	add	r2, sp, #4
 80049ca:	2301      	movs	r3, #1
 80049cc:	2111      	movs	r1, #17
 80049ce:	47a8      	blx	r5
}
 80049d0:	b005      	add	sp, #20
 80049d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80049d4:	f10d 0107 	add.w	r1, sp, #7
 80049d8:	4620      	mov	r0, r4
 80049da:	f7ff fdc1 	bl	8004560 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0) {
 80049de:	2800      	cmp	r0, #0
 80049e0:	d1f6      	bne.n	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
        switch (fsm_odr) {
 80049e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d8b9      	bhi.n	800495e <ism330dhcx_gy_data_rate_set+0xf2>
 80049ea:	e8df f003 	tbb	[pc, r3]
 80049ee:	151a      	.short	0x151a
 80049f0:	101f      	.short	0x101f
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80049f2:	a902      	add	r1, sp, #8
 80049f4:	4620      	mov	r0, r4
 80049f6:	f7ff fdf9 	bl	80045ec <ism330dhcx_mlc_data_rate_get>
      if (ret == 0) {
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d1e8      	bne.n	80049d0 <ism330dhcx_gy_data_rate_set+0x164>
        switch (mlc_odr) {
 80049fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d82b      	bhi.n	8004a5e <ism330dhcx_gy_data_rate_set+0x1f2>
 8004a06:	e8df f003 	tbb	[pc, r3]
 8004a0a:	2025      	.short	0x2025
 8004a0c:	161b      	.short	0x161b
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004a0e:	2d04      	cmp	r5, #4
 8004a10:	462e      	mov	r6, r5
 8004a12:	bf38      	it	cc
 8004a14:	2604      	movcc	r6, #4
 8004a16:	e7a3      	b.n	8004960 <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004a18:	2d02      	cmp	r5, #2
 8004a1a:	462e      	mov	r6, r5
 8004a1c:	bf38      	it	cc
 8004a1e:	2602      	movcc	r6, #2
 8004a20:	e79e      	b.n	8004960 <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004a22:	2d01      	cmp	r5, #1
 8004a24:	462e      	mov	r6, r5
 8004a26:	bf38      	it	cc
 8004a28:	2601      	movcc	r6, #1
  if (ret == 0) {
 8004a2a:	e799      	b.n	8004960 <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004a2c:	2d03      	cmp	r5, #3
 8004a2e:	462e      	mov	r6, r5
 8004a30:	bf38      	it	cc
 8004a32:	2603      	movcc	r6, #3
 8004a34:	e794      	b.n	8004960 <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004a36:	2d04      	cmp	r5, #4
 8004a38:	bf38      	it	cc
 8004a3a:	2504      	movcc	r5, #4
 8004a3c:	462e      	mov	r6, r5
 8004a3e:	e7b4      	b.n	80049aa <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004a40:	2d03      	cmp	r5, #3
 8004a42:	bf38      	it	cc
 8004a44:	2503      	movcc	r5, #3
 8004a46:	462e      	mov	r6, r5
 8004a48:	e7af      	b.n	80049aa <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004a4a:	2d02      	cmp	r5, #2
 8004a4c:	bf38      	it	cc
 8004a4e:	2502      	movcc	r5, #2
 8004a50:	462e      	mov	r6, r5
 8004a52:	e7aa      	b.n	80049aa <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004a54:	2d01      	cmp	r5, #1
 8004a56:	bf38      	it	cc
 8004a58:	2501      	movcc	r5, #1
 8004a5a:	462e      	mov	r6, r5
  if (ret == 0) {
 8004a5c:	e7a5      	b.n	80049aa <ism330dhcx_gy_data_rate_set+0x13e>
        switch (mlc_odr) {
 8004a5e:	462e      	mov	r6, r5
 8004a60:	e7a3      	b.n	80049aa <ism330dhcx_gy_data_rate_set+0x13e>
 8004a62:	bf00      	nop

08004a64 <LPS22HH_GetCapabilities>:
  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
  Capabilities->TempMaxOdr  = 200.0f;
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <LPS22HH_GetCapabilities+0x14>)
 8004a66:	608b      	str	r3, [r1, #8]
  Capabilities->HumMaxOdr   = 0.0f;
 8004a68:	2200      	movs	r2, #0
  Capabilities->Temperature = 1;
 8004a6a:	f240 1001 	movw	r0, #257	@ 0x101
 8004a6e:	6008      	str	r0, [r1, #0]
  Capabilities->HumMaxOdr   = 0.0f;
 8004a70:	604a      	str	r2, [r1, #4]
  Capabilities->PressMaxOdr = 200.0f;
 8004a72:	60cb      	str	r3, [r1, #12]
  return LPS22HH_OK;
}
 8004a74:	2000      	movs	r0, #0
 8004a76:	4770      	bx	lr
 8004a78:	43480000 	.word	0x43480000

08004a7c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a7c:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a7e:	6944      	ldr	r4, [r0, #20]
 8004a80:	7b00      	ldrb	r0, [r0, #12]
 8004a82:	46a4      	mov	ip, r4
}
 8004a84:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a88:	4760      	bx	ip
 8004a8a:	bf00      	nop

08004a8c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a8c:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004a8e:	6904      	ldr	r4, [r0, #16]
 8004a90:	7b00      	ldrb	r0, [r0, #12]
 8004a92:	46a4      	mov	ip, r4
}
 8004a94:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004a98:	4760      	bx	ip
 8004a9a:	bf00      	nop

08004a9c <LPS22HH_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 8004a9c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d00c      	beq.n	8004abe <LPS22HH_PRESS_Enable+0x22>
{
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004aa8:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 8004aac:	301c      	adds	r0, #28
 8004aae:	f000 fae7 	bl	8005080 <lps22hh_data_rate_set>
 8004ab2:	b930      	cbnz	r0, 8004ac2 <LPS22HH_PRESS_Enable+0x26>
  pObj->press_is_enabled = 1;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return LPS22HH_OK;
 8004aba:	2000      	movs	r0, #0
}
 8004abc:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 8004abe:	2000      	movs	r0, #0
}
 8004ac0:	4770      	bx	lr
    return LPS22HH_ERROR;
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004ac6:	bd10      	pop	{r4, pc}

08004ac8 <LPS22HH_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8004ac8:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d00c      	beq.n	8004aea <LPS22HH_TEMP_Enable+0x22>
{
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004ad4:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 8004ad8:	301c      	adds	r0, #28
 8004ada:	f000 fad1 	bl	8005080 <lps22hh_data_rate_set>
 8004ade:	b930      	cbnz	r0, 8004aee <LPS22HH_TEMP_Enable+0x26>
  pObj->temp_is_enabled = 1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return LPS22HH_OK;
 8004ae6:	2000      	movs	r0, #0
}
 8004ae8:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 8004aea:	2000      	movs	r0, #0
}
 8004aec:	4770      	bx	lr
    return LPS22HH_ERROR;
 8004aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004af2:	bd10      	pop	{r4, pc}

08004af4 <LPS22HH_Init>:
{
 8004af4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8004af6:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
{
 8004afa:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8004afc:	b123      	cbz	r3, 8004b08 <LPS22HH_Init+0x14>
  pObj->is_initialized = 1U;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return LPS22HH_OK;
 8004b04:	2000      	movs	r0, #0
}
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004b08:	f100 051c 	add.w	r5, r0, #28
 8004b0c:	2111      	movs	r1, #17
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 fbac 	bl	800526c <lps22hh_i3c_interface_set>
 8004b14:	b9b8      	cbnz	r0, 8004b46 <LPS22HH_Init+0x52>
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8004b16:	2110      	movs	r1, #16
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 fab1 	bl	8005080 <lps22hh_data_rate_set>
 8004b1e:	4601      	mov	r1, r0
 8004b20:	b988      	cbnz	r0, 8004b46 <LPS22HH_Init+0x52>
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004b22:	4628      	mov	r0, r5
 8004b24:	f000 fb88 	bl	8005238 <lps22hh_lp_bandwidth_set>
 8004b28:	b968      	cbnz	r0, 8004b46 <LPS22HH_Init+0x52>
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 fa8d 	bl	800504c <lps22hh_block_data_update_set>
 8004b32:	b940      	cbnz	r0, 8004b46 <LPS22HH_Init+0x52>
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004b34:	2101      	movs	r1, #1
 8004b36:	4628      	mov	r0, r5
 8004b38:	f000 fb64 	bl	8005204 <lps22hh_auto_increment_set>
 8004b3c:	b918      	cbnz	r0, 8004b46 <LPS22HH_Init+0x52>
  pObj->last_odr = LPS22HH_25_Hz;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  return LPS22HH_OK;
 8004b44:	e7db      	b.n	8004afe <LPS22HH_Init+0xa>
      return LPS22HH_ERROR;
 8004b46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}

08004b4c <LPS22HH_ReadID>:
{
 8004b4c:	b508      	push	{r3, lr}
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8004b4e:	301c      	adds	r0, #28
 8004b50:	f000 fb4e 	bl	80051f0 <lps22hh_device_id_get>
 8004b54:	3800      	subs	r0, #0
 8004b56:	bf18      	it	ne
 8004b58:	2001      	movne	r0, #1
}
 8004b5a:	4240      	negs	r0, r0
 8004b5c:	bd08      	pop	{r3, pc}
 8004b5e:	bf00      	nop

08004b60 <LPS22HH_PRESS_Disable>:
{
 8004b60:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 8004b62:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8004b66:	b133      	cbz	r3, 8004b76 <LPS22HH_PRESS_Disable+0x16>
  if (pObj->temp_is_enabled == 0U)
 8004b68:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	b123      	cbz	r3, 8004b7a <LPS22HH_PRESS_Disable+0x1a>
  pObj->press_is_enabled = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return LPS22HH_OK;
 8004b76:	2000      	movs	r0, #0
}
 8004b78:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004b7a:	f100 051c 	add.w	r5, r0, #28
 8004b7e:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 faac 	bl	80050e0 <lps22hh_data_rate_get>
 8004b88:	4601      	mov	r1, r0
 8004b8a:	b920      	cbnz	r0, 8004b96 <LPS22HH_PRESS_Disable+0x36>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f000 fa77 	bl	8005080 <lps22hh_data_rate_set>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d0ec      	beq.n	8004b70 <LPS22HH_PRESS_Disable+0x10>
      return LPS22HH_ERROR;
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}

08004b9c <LPS22HH_TEMP_SetOutputDataRate>:
{
 8004b9c:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 1U)
 8004b9e:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004ba2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->temp_is_enabled == 1U)
 8004ba6:	2901      	cmp	r1, #1
{
 8004ba8:	4604      	mov	r4, r0
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004baa:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->temp_is_enabled == 1U)
 8004bae:	d027      	beq.n	8004c00 <LPS22HH_TEMP_SetOutputDataRate+0x64>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb4:	d91d      	bls.n	8004bf2 <LPS22HH_TEMP_SetOutputDataRate+0x56>
 8004bb6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004bba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	d91b      	bls.n	8004bfc <LPS22HH_TEMP_SetOutputDataRate+0x60>
 8004bc4:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8004bc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd0:	d94e      	bls.n	8004c70 <LPS22HH_TEMP_SetOutputDataRate+0xd4>
 8004bd2:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8004ca4 <LPS22HH_TEMP_SetOutputDataRate+0x108>
 8004bd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bde:	d94b      	bls.n	8004c78 <LPS22HH_TEMP_SetOutputDataRate+0xdc>
 8004be0:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8004ca8 <LPS22HH_TEMP_SetOutputDataRate+0x10c>
 8004be4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bec:	d848      	bhi.n	8004c80 <LPS22HH_TEMP_SetOutputDataRate+0xe4>
 8004bee:	2305      	movs	r3, #5
 8004bf0:	e000      	b.n	8004bf4 <LPS22HH_TEMP_SetOutputDataRate+0x58>
 8004bf2:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004bf4:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004bf8:	2000      	movs	r0, #0
}
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e7f9      	b.n	8004bf4 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c04:	d924      	bls.n	8004c50 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 8004c06:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004c0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	d92f      	bls.n	8004c74 <LPS22HH_TEMP_SetOutputDataRate+0xd8>
 8004c14:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8004c18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	d92c      	bls.n	8004c7c <LPS22HH_TEMP_SetOutputDataRate+0xe0>
 8004c22:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8004ca4 <LPS22HH_TEMP_SetOutputDataRate+0x108>
 8004c26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2e:	d934      	bls.n	8004c9a <LPS22HH_TEMP_SetOutputDataRate+0xfe>
 8004c30:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8004ca8 <LPS22HH_TEMP_SetOutputDataRate+0x10c>
 8004c34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3c:	d92f      	bls.n	8004c9e <LPS22HH_TEMP_SetOutputDataRate+0x102>
 8004c3e:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8004cac <LPS22HH_TEMP_SetOutputDataRate+0x110>
 8004c42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	bf94      	ite	ls
 8004c4c:	2106      	movls	r1, #6
 8004c4e:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004c50:	f104 051c 	add.w	r5, r4, #28
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 fa13 	bl	8005080 <lps22hh_data_rate_set>
 8004c5a:	b9d8      	cbnz	r0, 8004c94 <LPS22HH_TEMP_SetOutputDataRate+0xf8>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004c5c:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 fa3d 	bl	80050e0 <lps22hh_data_rate_get>
 8004c66:	3800      	subs	r0, #0
 8004c68:	bf18      	it	ne
 8004c6a:	2001      	movne	r0, #1
 8004c6c:	4240      	negs	r0, r0
}
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c70:	2303      	movs	r3, #3
 8004c72:	e7bf      	b.n	8004bf4 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c74:	2102      	movs	r1, #2
 8004c76:	e7eb      	b.n	8004c50 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c78:	2304      	movs	r3, #4
 8004c7a:	e7bb      	b.n	8004bf4 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c7c:	2103      	movs	r1, #3
 8004c7e:	e7e7      	b.n	8004c50 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c80:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8004cac <LPS22HH_TEMP_SetOutputDataRate+0x110>
 8004c84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8c:	bf94      	ite	ls
 8004c8e:	2306      	movls	r3, #6
 8004c90:	2307      	movhi	r3, #7
 8004c92:	e7af      	b.n	8004bf4 <LPS22HH_TEMP_SetOutputDataRate+0x58>
    return LPS22HH_ERROR;
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004c98:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c9a:	2104      	movs	r1, #4
 8004c9c:	e7d8      	b.n	8004c50 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 8004c9e:	2105      	movs	r1, #5
 8004ca0:	e7d6      	b.n	8004c50 <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 8004ca2:	bf00      	nop
 8004ca4:	42480000 	.word	0x42480000
 8004ca8:	42960000 	.word	0x42960000
 8004cac:	42c80000 	.word	0x42c80000

08004cb0 <LPS22HH_TEMP_Disable>:
{
 8004cb0:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 8004cb2:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8004cb6:	b133      	cbz	r3, 8004cc6 <LPS22HH_TEMP_Disable+0x16>
  if (pObj->press_is_enabled == 0U)
 8004cb8:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	b123      	cbz	r3, 8004cca <LPS22HH_TEMP_Disable+0x1a>
  pObj->temp_is_enabled = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return LPS22HH_OK;
 8004cc6:	2000      	movs	r0, #0
}
 8004cc8:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004cca:	f100 051c 	add.w	r5, r0, #28
 8004cce:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 fa04 	bl	80050e0 <lps22hh_data_rate_get>
 8004cd8:	4601      	mov	r1, r0
 8004cda:	b920      	cbnz	r0, 8004ce6 <LPS22HH_TEMP_Disable+0x36>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f000 f9cf 	bl	8005080 <lps22hh_data_rate_set>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d0ec      	beq.n	8004cc0 <LPS22HH_TEMP_Disable+0x10>
      return LPS22HH_ERROR;
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004cea:	bd38      	pop	{r3, r4, r5, pc}

08004cec <LPS22HH_PRESS_GetPressure>:
{
 8004cec:	b530      	push	{r4, r5, lr}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	460d      	mov	r5, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004cf2:	2200      	movs	r2, #0
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004cf4:	a901      	add	r1, sp, #4
 8004cf6:	301c      	adds	r0, #28
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004cf8:	9201      	str	r2, [sp, #4]
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004cfa:	f000 fa4f 	bl	800519c <lps22hh_pressure_raw_get>
 8004cfe:	b940      	cbnz	r0, 8004d12 <LPS22HH_PRESS_GetPressure+0x26>
  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004d00:	4604      	mov	r4, r0
 8004d02:	9801      	ldr	r0, [sp, #4]
 8004d04:	f000 f990 	bl	8005028 <lps22hh_from_lsb_to_hpa>
 8004d08:	ed85 0a00 	vstr	s0, [r5]
}
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	b003      	add	sp, #12
 8004d10:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8004d12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004d16:	e7f9      	b.n	8004d0c <LPS22HH_PRESS_GetPressure+0x20>

08004d18 <LPS22HH_TEMP_GetTemperature>:
{
 8004d18:	b530      	push	{r4, r5, lr}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	460d      	mov	r5, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004d1e:	2200      	movs	r2, #0
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004d20:	a901      	add	r1, sp, #4
 8004d22:	301c      	adds	r0, #28
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004d24:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004d28:	f000 fa50 	bl	80051cc <lps22hh_temperature_raw_get>
 8004d2c:	b948      	cbnz	r0, 8004d42 <LPS22HH_TEMP_GetTemperature+0x2a>
  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004d2e:	4604      	mov	r4, r0
 8004d30:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004d34:	f000 f97e 	bl	8005034 <lps22hh_from_lsb_to_celsius>
 8004d38:	ed85 0a00 	vstr	s0, [r5]
}
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	b003      	add	sp, #12
 8004d40:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8004d42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004d46:	e7f9      	b.n	8004d3c <LPS22HH_TEMP_GetTemperature+0x24>

08004d48 <LPS22HH_TEMP_GetOutputDataRate>:
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	301c      	adds	r0, #28
 8004d50:	f10d 0107 	add.w	r1, sp, #7
 8004d54:	f000 f9c4 	bl	80050e0 <lps22hh_data_rate_get>
 8004d58:	b9e0      	cbnz	r0, 8004d94 <LPS22HH_TEMP_GetOutputDataRate+0x4c>
 8004d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d5e:	2b07      	cmp	r3, #7
 8004d60:	d818      	bhi.n	8004d94 <LPS22HH_TEMP_GetOutputDataRate+0x4c>
 8004d62:	e8df f003 	tbb	[pc, r3]
 8004d66:	0409      	.short	0x0409
 8004d68:	0d151311 	.word	0x0d151311
 8004d6c:	0b0f      	.short	0x0b0f
 8004d6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	b002      	add	sp, #8
 8004d76:	bd10      	pop	{r4, pc}
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e7fa      	b.n	8004d72 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004d7c:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <LPS22HH_TEMP_GetOutputDataRate+0x54>)
 8004d7e:	e7f8      	b.n	8004d72 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004d80:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <LPS22HH_TEMP_GetOutputDataRate+0x58>)
 8004d82:	e7f6      	b.n	8004d72 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004d84:	4b07      	ldr	r3, [pc, #28]	@ (8004da4 <LPS22HH_TEMP_GetOutputDataRate+0x5c>)
 8004d86:	e7f4      	b.n	8004d72 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004d88:	4b07      	ldr	r3, [pc, #28]	@ (8004da8 <LPS22HH_TEMP_GetOutputDataRate+0x60>)
 8004d8a:	e7f2      	b.n	8004d72 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004d8c:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <LPS22HH_TEMP_GetOutputDataRate+0x64>)
 8004d8e:	e7f0      	b.n	8004d72 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004d90:	4b07      	ldr	r3, [pc, #28]	@ (8004db0 <LPS22HH_TEMP_GetOutputDataRate+0x68>)
 8004d92:	e7ee      	b.n	8004d72 <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d98:	e7ec      	b.n	8004d74 <LPS22HH_TEMP_GetOutputDataRate+0x2c>
 8004d9a:	bf00      	nop
 8004d9c:	43480000 	.word	0x43480000
 8004da0:	42960000 	.word	0x42960000
 8004da4:	42c80000 	.word	0x42c80000
 8004da8:	41200000 	.word	0x41200000
 8004dac:	41c80000 	.word	0x41c80000
 8004db0:	42480000 	.word	0x42480000

08004db4 <LPS22HH_PRESS_GetOutputDataRate>:
{
 8004db4:	b510      	push	{r4, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	460c      	mov	r4, r1
  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8004dba:	301c      	adds	r0, #28
 8004dbc:	f10d 0107 	add.w	r1, sp, #7
 8004dc0:	f000 f98e 	bl	80050e0 <lps22hh_data_rate_get>
 8004dc4:	b9e0      	cbnz	r0, 8004e00 <LPS22HH_PRESS_GetOutputDataRate+0x4c>
  switch (odr_low_level)
 8004dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004dca:	2b07      	cmp	r3, #7
 8004dcc:	d818      	bhi.n	8004e00 <LPS22HH_PRESS_GetOutputDataRate+0x4c>
 8004dce:	e8df f003 	tbb	[pc, r3]
 8004dd2:	0409      	.short	0x0409
 8004dd4:	0d151311 	.word	0x0d151311
 8004dd8:	0b0f      	.short	0x0b0f
 8004dda:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
      *Odr = 1.0f;
 8004dde:	6023      	str	r3, [r4, #0]
}
 8004de0:	b002      	add	sp, #8
 8004de2:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8004de4:	2300      	movs	r3, #0
 8004de6:	e7fa      	b.n	8004dde <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004de8:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <LPS22HH_PRESS_GetOutputDataRate+0x54>)
 8004dea:	e7f8      	b.n	8004dde <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <LPS22HH_PRESS_GetOutputDataRate+0x58>)
 8004dee:	e7f6      	b.n	8004dde <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004df0:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <LPS22HH_PRESS_GetOutputDataRate+0x5c>)
 8004df2:	e7f4      	b.n	8004dde <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004df4:	4b07      	ldr	r3, [pc, #28]	@ (8004e14 <LPS22HH_PRESS_GetOutputDataRate+0x60>)
 8004df6:	e7f2      	b.n	8004dde <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004df8:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <LPS22HH_PRESS_GetOutputDataRate+0x64>)
 8004dfa:	e7f0      	b.n	8004dde <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004dfc:	4b07      	ldr	r3, [pc, #28]	@ (8004e1c <LPS22HH_PRESS_GetOutputDataRate+0x68>)
 8004dfe:	e7ee      	b.n	8004dde <LPS22HH_PRESS_GetOutputDataRate+0x2a>
    return LPS22HH_ERROR;
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004e04:	e7ec      	b.n	8004de0 <LPS22HH_PRESS_GetOutputDataRate+0x2c>
 8004e06:	bf00      	nop
 8004e08:	43480000 	.word	0x43480000
 8004e0c:	42960000 	.word	0x42960000
 8004e10:	42c80000 	.word	0x42c80000
 8004e14:	41200000 	.word	0x41200000
 8004e18:	41c80000 	.word	0x41c80000
 8004e1c:	42480000 	.word	0x42480000

08004e20 <LPS22HH_PRESS_SetOutputDataRate>:
{
 8004e20:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 1U)
 8004e22:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004e26:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->press_is_enabled == 1U)
 8004e2a:	2901      	cmp	r1, #1
{
 8004e2c:	4604      	mov	r4, r0
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004e2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->press_is_enabled == 1U)
 8004e32:	d027      	beq.n	8004e84 <LPS22HH_PRESS_SetOutputDataRate+0x64>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e38:	d91d      	bls.n	8004e76 <LPS22HH_PRESS_SetOutputDataRate+0x56>
 8004e3a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004e3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e46:	d91b      	bls.n	8004e80 <LPS22HH_PRESS_SetOutputDataRate+0x60>
 8004e48:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8004e4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	d94e      	bls.n	8004ef4 <LPS22HH_PRESS_SetOutputDataRate+0xd4>
 8004e56:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8004f28 <LPS22HH_PRESS_SetOutputDataRate+0x108>
 8004e5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e62:	d94b      	bls.n	8004efc <LPS22HH_PRESS_SetOutputDataRate+0xdc>
 8004e64:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8004f2c <LPS22HH_PRESS_SetOutputDataRate+0x10c>
 8004e68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e70:	d848      	bhi.n	8004f04 <LPS22HH_PRESS_SetOutputDataRate+0xe4>
 8004e72:	2305      	movs	r3, #5
 8004e74:	e000      	b.n	8004e78 <LPS22HH_PRESS_SetOutputDataRate+0x58>
 8004e76:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004e78:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004e7c:	2000      	movs	r0, #0
}
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004e80:	2302      	movs	r3, #2
 8004e82:	e7f9      	b.n	8004e78 <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e88:	d924      	bls.n	8004ed4 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004e8a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004e8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e96:	d92f      	bls.n	8004ef8 <LPS22HH_PRESS_SetOutputDataRate+0xd8>
 8004e98:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8004e9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea4:	d92c      	bls.n	8004f00 <LPS22HH_PRESS_SetOutputDataRate+0xe0>
 8004ea6:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8004f28 <LPS22HH_PRESS_SetOutputDataRate+0x108>
 8004eaa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb2:	d934      	bls.n	8004f1e <LPS22HH_PRESS_SetOutputDataRate+0xfe>
 8004eb4:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8004f2c <LPS22HH_PRESS_SetOutputDataRate+0x10c>
 8004eb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	d92f      	bls.n	8004f22 <LPS22HH_PRESS_SetOutputDataRate+0x102>
 8004ec2:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8004f30 <LPS22HH_PRESS_SetOutputDataRate+0x110>
 8004ec6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ece:	bf94      	ite	ls
 8004ed0:	2106      	movls	r1, #6
 8004ed2:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004ed4:	f104 051c 	add.w	r5, r4, #28
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 f8d1 	bl	8005080 <lps22hh_data_rate_set>
 8004ede:	b9d8      	cbnz	r0, 8004f18 <LPS22HH_PRESS_SetOutputDataRate+0xf8>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004ee0:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 f8fb 	bl	80050e0 <lps22hh_data_rate_get>
 8004eea:	3800      	subs	r0, #0
 8004eec:	bf18      	it	ne
 8004eee:	2001      	movne	r0, #1
 8004ef0:	4240      	negs	r0, r0
}
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e7bf      	b.n	8004e78 <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004ef8:	2102      	movs	r1, #2
 8004efa:	e7eb      	b.n	8004ed4 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004efc:	2304      	movs	r3, #4
 8004efe:	e7bb      	b.n	8004e78 <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004f00:	2103      	movs	r1, #3
 8004f02:	e7e7      	b.n	8004ed4 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004f04:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8004f30 <LPS22HH_PRESS_SetOutputDataRate+0x110>
 8004f08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f10:	bf94      	ite	ls
 8004f12:	2306      	movls	r3, #6
 8004f14:	2307      	movhi	r3, #7
 8004f16:	e7af      	b.n	8004e78 <LPS22HH_PRESS_SetOutputDataRate+0x58>
    return LPS22HH_ERROR;
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004f1c:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004f1e:	2104      	movs	r1, #4
 8004f20:	e7d8      	b.n	8004ed4 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004f22:	2105      	movs	r1, #5
 8004f24:	e7d6      	b.n	8004ed4 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004f26:	bf00      	nop
 8004f28:	42480000 	.word	0x42480000
 8004f2c:	42960000 	.word	0x42960000
 8004f30:	42c80000 	.word	0x42c80000

08004f34 <LPS22HH_DeInit>:
{
 8004f34:	b570      	push	{r4, r5, r6, lr}
  if (pObj->is_initialized == 1U)
 8004f36:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8004f3a:	2b01      	cmp	r3, #1
{
 8004f3c:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8004f3e:	d003      	beq.n	8004f48 <LPS22HH_DeInit+0x14>
  pObj->is_initialized = 0;
 8004f40:	2000      	movs	r0, #0
 8004f42:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
  if (pObj->press_is_enabled == 0U)
 8004f48:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8004f4c:	f890 502a 	ldrb.w	r5, [r0, #42]	@ 0x2a
  if (pObj->press_is_enabled == 0U)
 8004f50:	b323      	cbz	r3, 8004f9c <LPS22HH_DeInit+0x68>
  if (pObj->temp_is_enabled == 0U)
 8004f52:	b195      	cbz	r5, 8004f7a <LPS22HH_DeInit+0x46>
  pObj->press_is_enabled = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004f5a:	f104 051c 	add.w	r5, r4, #28
 8004f5e:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 f8bc 	bl	80050e0 <lps22hh_data_rate_get>
 8004f68:	4601      	mov	r1, r0
 8004f6a:	b9d0      	cbnz	r0, 8004fa2 <LPS22HH_DeInit+0x6e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 f887 	bl	8005080 <lps22hh_data_rate_set>
 8004f72:	b9b0      	cbnz	r0, 8004fa2 <LPS22HH_DeInit+0x6e>
  pObj->temp_is_enabled = 0;
 8004f74:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return LPS22HH_OK;
 8004f78:	e7e2      	b.n	8004f40 <LPS22HH_DeInit+0xc>
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004f7a:	f100 061c 	add.w	r6, r0, #28
 8004f7e:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8004f82:	4630      	mov	r0, r6
 8004f84:	f000 f8ac 	bl	80050e0 <lps22hh_data_rate_get>
 8004f88:	b958      	cbnz	r0, 8004fa2 <LPS22HH_DeInit+0x6e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f000 f877 	bl	8005080 <lps22hh_data_rate_set>
 8004f92:	b930      	cbnz	r0, 8004fa2 <LPS22HH_DeInit+0x6e>
  if (pObj->temp_is_enabled == 0U)
 8004f94:	f894 502a 	ldrb.w	r5, [r4, #42]	@ 0x2a
  pObj->press_is_enabled = 0;
 8004f98:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	d0cf      	beq.n	8004f40 <LPS22HH_DeInit+0xc>
 8004fa0:	e7db      	b.n	8004f5a <LPS22HH_DeInit+0x26>
      return LPS22HH_ERROR;
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}

08004fa8 <LPS22HH_RegisterBusIO>:
{
 8004fa8:	b530      	push	{r4, r5, lr}
 8004faa:	b083      	sub	sp, #12
  if (pObj == NULL)
 8004fac:	b368      	cbz	r0, 800500a <LPS22HH_RegisterBusIO+0x62>
    pObj->IO.Init      = pIO->Init;
 8004fae:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8004fb0:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8004fb4:	688a      	ldr	r2, [r1, #8]
 8004fb6:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8004fb8:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8004fbc:	7b0a      	ldrb	r2, [r1, #12]
 8004fbe:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004fc0:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8004fc4:	6989      	ldr	r1, [r1, #24]
 8004fc6:	61a1      	str	r1, [r4, #24]
 8004fc8:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004fca:	4911      	ldr	r1, [pc, #68]	@ (8005010 <LPS22HH_RegisterBusIO+0x68>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8004fcc:	4a11      	ldr	r2, [pc, #68]	@ (8005014 <LPS22HH_RegisterBusIO+0x6c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004fce:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004fd0:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8004fd4:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 8004fd6:	b1c3      	cbz	r3, 800500a <LPS22HH_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004fd8:	4798      	blx	r3
 8004fda:	4605      	mov	r5, r0
 8004fdc:	b9a8      	cbnz	r0, 800500a <LPS22HH_RegisterBusIO+0x62>
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004fde:	68a3      	ldr	r3, [r4, #8]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d002      	beq.n	8004fea <LPS22HH_RegisterBusIO+0x42>
}
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	b003      	add	sp, #12
 8004fe8:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8004fea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f8      	bne.n	8004fe4 <LPS22HH_RegisterBusIO+0x3c>
          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004ff2:	2301      	movs	r3, #1
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8004ff4:	f10d 0207 	add.w	r2, sp, #7
 8004ff8:	f104 001c 	add.w	r0, r4, #28
 8004ffc:	2110      	movs	r1, #16
 8004ffe:	f88d 3007 	strb.w	r3, [sp, #7]
 8005002:	f000 f809 	bl	8005018 <lps22hh_write_reg>
 8005006:	2800      	cmp	r0, #0
 8005008:	d0ec      	beq.n	8004fe4 <LPS22HH_RegisterBusIO+0x3c>
    ret = LPS22HH_ERROR;
 800500a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  return ret;
 800500e:	e7e9      	b.n	8004fe4 <LPS22HH_RegisterBusIO+0x3c>
 8005010:	08004a7d 	.word	0x08004a7d
 8005014:	08004a8d 	.word	0x08004a8d

08005018 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005018:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800501a:	6804      	ldr	r4, [r0, #0]
 800501c:	6880      	ldr	r0, [r0, #8]
 800501e:	46a4      	mov	ip, r4
  return ret;
}
 8005020:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005024:	4760      	bx	ip
 8005026:	bf00      	nop

08005028 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005028:	ee00 0a10 	vmov	s0, r0
  return ( (float_t) lsb / 1048576.0f );
}
 800502c:	eebb 0ac6 	vcvt.f32.u32	s0, s0, #20
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop

08005034 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005034:	ee07 0a90 	vmov	s15, r0
  return ( (float_t) lsb / 100.0f );
 8005038:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8005048 <lps22hh_from_lsb_to_celsius+0x14>
 800503c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005040:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	42c80000 	.word	0x42c80000

0800504c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	b082      	sub	sp, #8
 8005052:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005054:	6880      	ldr	r0, [r0, #8]
 8005056:	6866      	ldr	r6, [r4, #4]
 8005058:	2301      	movs	r3, #1
 800505a:	aa01      	add	r2, sp, #4
 800505c:	2110      	movs	r1, #16
 800505e:	47b0      	blx	r6
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8005060:	b958      	cbnz	r0, 800507a <lps22hh_block_data_update_set+0x2e>
    reg.bdu = val;
 8005062:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005066:	6826      	ldr	r6, [r4, #0]
 8005068:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 800506a:	f365 0341 	bfi	r3, r5, #1, #1
 800506e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005072:	aa01      	add	r2, sp, #4
 8005074:	2301      	movs	r3, #1
 8005076:	2110      	movs	r1, #16
 8005078:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800507a:	b002      	add	sp, #8
 800507c:	bd70      	pop	{r4, r5, r6, pc}
 800507e:	bf00      	nop

08005080 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	4604      	mov	r4, r0
 8005084:	b082      	sub	sp, #8
 8005086:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005088:	6880      	ldr	r0, [r0, #8]
 800508a:	6866      	ldr	r6, [r4, #4]
 800508c:	2301      	movs	r3, #1
 800508e:	466a      	mov	r2, sp
 8005090:	2110      	movs	r1, #16
 8005092:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                         1);

  if (ret == 0) {
 8005094:	bb10      	cbnz	r0, 80050dc <lps22hh_data_rate_set+0x5c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005096:	68a0      	ldr	r0, [r4, #8]
 8005098:	6866      	ldr	r6, [r4, #4]
 800509a:	2301      	movs	r3, #1
 800509c:	aa01      	add	r2, sp, #4
 800509e:	2111      	movs	r1, #17
 80050a0:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  if (ret == 0) {
 80050a2:	b9d8      	cbnz	r0, 80050dc <lps22hh_data_rate_set+0x5c>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80050a4:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80050a8:	68a0      	ldr	r0, [r4, #8]
 80050aa:	6826      	ldr	r6, [r4, #0]
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80050ac:	f365 1306 	bfi	r3, r5, #4, #3
 80050b0:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80050b4:	466a      	mov	r2, sp
 80050b6:	2301      	movs	r3, #1
 80050b8:	2110      	movs	r1, #16
 80050ba:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                            1);
  }

  if (ret == 0) {
 80050bc:	b970      	cbnz	r0, 80050dc <lps22hh_data_rate_set+0x5c>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80050be:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80050c2:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80050c4:	f3c5 01c1 	ubfx	r1, r5, #3, #2
 80050c8:	f023 0303 	bic.w	r3, r3, #3
 80050cc:	4319      	orrs	r1, r3
 80050ce:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80050d2:	6825      	ldr	r5, [r4, #0]
 80050d4:	2301      	movs	r3, #1
 80050d6:	aa01      	add	r2, sp, #4
 80050d8:	2111      	movs	r1, #17
 80050da:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                            1);
  }

  return ret;
}
 80050dc:	b002      	add	sp, #8
 80050de:	bd70      	pop	{r4, r5, r6, pc}

080050e0 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	4604      	mov	r4, r0
 80050e4:	b082      	sub	sp, #8
 80050e6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80050e8:	6880      	ldr	r0, [r0, #8]
 80050ea:	6866      	ldr	r6, [r4, #4]
 80050ec:	2301      	movs	r3, #1
 80050ee:	466a      	mov	r2, sp
 80050f0:	2110      	movs	r1, #16
 80050f2:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                         1);

  if (ret == 0) {
 80050f4:	bb40      	cbnz	r0, 8005148 <lps22hh_data_rate_get+0x68>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80050f6:	68a0      	ldr	r0, [r4, #8]
 80050f8:	6866      	ldr	r6, [r4, #4]
 80050fa:	2301      	movs	r3, #1
 80050fc:	aa01      	add	r2, sp, #4
 80050fe:	2111      	movs	r1, #17
 8005100:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  if (ret == 0) {
 8005102:	bb08      	cbnz	r0, 8005148 <lps22hh_data_rate_get+0x68>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005104:	2301      	movs	r3, #1
 8005106:	aa01      	add	r2, sp, #4
 8005108:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 800510c:	2111      	movs	r1, #17
 800510e:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005110:	f89d 3004 	ldrb.w	r3, [sp, #4]
             ctrl_reg1.odr )) {
 8005114:	f89d 2000 	ldrb.w	r2, [sp]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	f003 0318 	and.w	r3, r3, #24
             ctrl_reg1.odr )) {
 800511e:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005122:	4413      	add	r3, r2
 8005124:	3b01      	subs	r3, #1
 8005126:	2b14      	cmp	r3, #20
 8005128:	d80c      	bhi.n	8005144 <lps22hh_data_rate_get+0x64>
 800512a:	e8df f003 	tbb	[pc, r3]
 800512e:	120f      	.short	0x120f
 8005130:	1e1b1815 	.word	0x1e1b1815
 8005134:	0b0b3321 	.word	0x0b0b3321
 8005138:	0b0b0b0b 	.word	0x0b0b0b0b
 800513c:	27240b0b 	.word	0x27240b0b
 8005140:	2d2a      	.short	0x2d2a
 8005142:	30          	.byte	0x30
 8005143:	00          	.byte	0x00
 8005144:	2300      	movs	r3, #0
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
        break;

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005146:	702b      	strb	r3, [r5, #0]
        break;
    }
  }

  return ret;
}
 8005148:	b002      	add	sp, #8
 800514a:	bd70      	pop	{r4, r5, r6, pc}
        break;
 800514c:	2301      	movs	r3, #1
        *val = LPS22HH_ONE_SHOOT;
 800514e:	702b      	strb	r3, [r5, #0]
 8005150:	e7fa      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 8005152:	2302      	movs	r3, #2
        *val = LPS22HH_ONE_SHOOT;
 8005154:	702b      	strb	r3, [r5, #0]
 8005156:	e7f7      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 8005158:	2303      	movs	r3, #3
        *val = LPS22HH_ONE_SHOOT;
 800515a:	702b      	strb	r3, [r5, #0]
 800515c:	e7f4      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 800515e:	2304      	movs	r3, #4
        *val = LPS22HH_ONE_SHOOT;
 8005160:	702b      	strb	r3, [r5, #0]
 8005162:	e7f1      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 8005164:	2305      	movs	r3, #5
        *val = LPS22HH_ONE_SHOOT;
 8005166:	702b      	strb	r3, [r5, #0]
 8005168:	e7ee      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 800516a:	2306      	movs	r3, #6
        *val = LPS22HH_ONE_SHOOT;
 800516c:	702b      	strb	r3, [r5, #0]
 800516e:	e7eb      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 8005170:	2307      	movs	r3, #7
        *val = LPS22HH_ONE_SHOOT;
 8005172:	702b      	strb	r3, [r5, #0]
 8005174:	e7e8      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 8005176:	2311      	movs	r3, #17
        *val = LPS22HH_ONE_SHOOT;
 8005178:	702b      	strb	r3, [r5, #0]
 800517a:	e7e5      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 800517c:	2312      	movs	r3, #18
        *val = LPS22HH_ONE_SHOOT;
 800517e:	702b      	strb	r3, [r5, #0]
 8005180:	e7e2      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 8005182:	2313      	movs	r3, #19
        *val = LPS22HH_ONE_SHOOT;
 8005184:	702b      	strb	r3, [r5, #0]
 8005186:	e7df      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 8005188:	2314      	movs	r3, #20
        *val = LPS22HH_ONE_SHOOT;
 800518a:	702b      	strb	r3, [r5, #0]
 800518c:	e7dc      	b.n	8005148 <lps22hh_data_rate_get+0x68>
        break;
 800518e:	2315      	movs	r3, #21
        *val = LPS22HH_ONE_SHOOT;
 8005190:	702b      	strb	r3, [r5, #0]
 8005192:	e7d9      	b.n	8005148 <lps22hh_data_rate_get+0x68>
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005194:	2308      	movs	r3, #8
        *val = LPS22HH_ONE_SHOOT;
 8005196:	702b      	strb	r3, [r5, #0]
 8005198:	e7d6      	b.n	8005148 <lps22hh_data_rate_get+0x68>
 800519a:	bf00      	nop

0800519c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800519c:	b530      	push	{r4, r5, lr}
 800519e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051a0:	aa01      	add	r2, sp, #4
{
 80051a2:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051a4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80051a8:	2303      	movs	r3, #3
 80051aa:	2128      	movs	r1, #40	@ 0x28
 80051ac:	47a8      	blx	r5
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
  *buff = reg[2];
 80051ae:	f89d 1006 	ldrb.w	r1, [sp, #6]
  *buff = (*buff * 256) + reg[1];
 80051b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
  *buff = (*buff * 256) + reg[0];
 80051b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  *buff = (*buff * 256) + reg[1];
 80051ba:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  *buff = (*buff * 256) + reg[0];
 80051be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *buff *= 256;
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	6023      	str	r3, [r4, #0]
  return ret;
}
 80051c6:	b003      	add	sp, #12
 80051c8:	bd30      	pop	{r4, r5, pc}
 80051ca:	bf00      	nop

080051cc <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80051cc:	b530      	push	{r4, r5, lr}
 80051ce:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051d0:	aa01      	add	r2, sp, #4
{
 80051d2:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051d4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80051d8:	2302      	movs	r3, #2
 80051da:	212b      	movs	r1, #43	@ 0x2b
 80051dc:	47a8      	blx	r5
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
  *buff = reg[1];
  *buff = (*buff * 256) + reg[0];
 80051de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80051e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80051ea:	8023      	strh	r3, [r4, #0]
  return ret;
}
 80051ec:	b003      	add	sp, #12
 80051ee:	bd30      	pop	{r4, r5, pc}

080051f0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80051f0:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051f2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 80051f6:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051f8:	46a4      	mov	ip, r4
 80051fa:	2301      	movs	r3, #1
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
  return ret;
}
 80051fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005200:	210f      	movs	r1, #15
 8005202:	4760      	bx	ip

08005204 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4604      	mov	r4, r0
 8005208:	b082      	sub	sp, #8
 800520a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800520c:	6880      	ldr	r0, [r0, #8]
 800520e:	6866      	ldr	r6, [r4, #4]
 8005210:	2301      	movs	r3, #1
 8005212:	aa01      	add	r2, sp, #4
 8005214:	2111      	movs	r1, #17
 8005216:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8005218:	b958      	cbnz	r0, 8005232 <lps22hh_auto_increment_set+0x2e>
    reg.if_add_inc = val;
 800521a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800521e:	6826      	ldr	r6, [r4, #0]
 8005220:	68a0      	ldr	r0, [r4, #8]
    reg.if_add_inc = val;
 8005222:	f365 1304 	bfi	r3, r5, #4, #1
 8005226:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800522a:	aa01      	add	r2, sp, #4
 800522c:	2301      	movs	r3, #1
 800522e:	2111      	movs	r1, #17
 8005230:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8005232:	b002      	add	sp, #8
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	bf00      	nop

08005238 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	4604      	mov	r4, r0
 800523c:	b082      	sub	sp, #8
 800523e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005240:	6880      	ldr	r0, [r0, #8]
 8005242:	6866      	ldr	r6, [r4, #4]
 8005244:	2301      	movs	r3, #1
 8005246:	aa01      	add	r2, sp, #4
 8005248:	2110      	movs	r1, #16
 800524a:	47b0      	blx	r6
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 800524c:	b958      	cbnz	r0, 8005266 <lps22hh_lp_bandwidth_set+0x2e>
    reg.lpfp_cfg = (uint8_t)val;
 800524e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005252:	6826      	ldr	r6, [r4, #0]
 8005254:	68a0      	ldr	r0, [r4, #8]
    reg.lpfp_cfg = (uint8_t)val;
 8005256:	f365 0383 	bfi	r3, r5, #2, #2
 800525a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800525e:	aa01      	add	r2, sp, #4
 8005260:	2301      	movs	r3, #1
 8005262:	2110      	movs	r1, #16
 8005264:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8005266:	b002      	add	sp, #8
 8005268:	bd70      	pop	{r4, r5, r6, pc}
 800526a:	bf00      	nop

0800526c <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4604      	mov	r4, r0
 8005270:	b082      	sub	sp, #8
 8005272:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005274:	6880      	ldr	r0, [r0, #8]
 8005276:	6866      	ldr	r6, [r4, #4]
 8005278:	2301      	movs	r3, #1
 800527a:	aa01      	add	r2, sp, #4
 800527c:	210e      	movs	r1, #14
 800527e:	47b0      	blx	r6
  lps22hh_if_ctrl_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8005280:	b990      	cbnz	r0, 80052a8 <lps22hh_i3c_interface_set+0x3c>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005282:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005286:	68a0      	ldr	r0, [r4, #8]
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005288:	0069      	lsls	r1, r5, #1
 800528a:	f001 0102 	and.w	r1, r1, #2
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 800528e:	092d      	lsrs	r5, r5, #4
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005290:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8005294:	f003 037d 	and.w	r3, r3, #125	@ 0x7d
 8005298:	4319      	orrs	r1, r3
 800529a:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800529e:	6825      	ldr	r5, [r4, #0]
 80052a0:	2301      	movs	r3, #1
 80052a2:	aa01      	add	r2, sp, #4
 80052a4:	210e      	movs	r1, #14
 80052a6:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80052a8:	b002      	add	sp, #8
 80052aa:	bd70      	pop	{r4, r5, r6, pc}

080052ac <STTS751_GetCapabilities>:

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
 80052ac:	2300      	movs	r3, #0
  Capabilities->TempMaxOdr  = 32.0f;
 80052ae:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
  Capabilities->Temperature = 1;
 80052b2:	2001      	movs	r0, #1
 80052b4:	6008      	str	r0, [r1, #0]
  Capabilities->HumMaxOdr   = 0.0f;
 80052b6:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 80052b8:	608a      	str	r2, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80052ba:	60cb      	str	r3, [r1, #12]
  return STTS751_OK;
}
 80052bc:	2000      	movs	r0, #0
 80052be:	4770      	bx	lr

080052c0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c4:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80052c6:	6880      	ldr	r0, [r0, #8]
 80052c8:	b9a8      	cbnz	r0, 80052f6 <ReadRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 80052ca:	b1a3      	cbz	r3, 80052f6 <ReadRegWrap+0x36>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80052cc:	4614      	mov	r4, r2
 80052ce:	eb02 0803 	add.w	r8, r2, r3
 80052d2:	1a8f      	subs	r7, r1, r2
 80052d4:	e001      	b.n	80052da <ReadRegWrap+0x1a>
    for (i = 0; i < Length; i++)
 80052d6:	4544      	cmp	r4, r8
 80052d8:	d00d      	beq.n	80052f6 <ReadRegWrap+0x36>
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80052da:	1939      	adds	r1, r7, r4
 80052dc:	4622      	mov	r2, r4
 80052de:	2301      	movs	r3, #1
 80052e0:	7b28      	ldrb	r0, [r5, #12]
 80052e2:	696e      	ldr	r6, [r5, #20]
 80052e4:	b289      	uxth	r1, r1
    for (i = 0; i < Length; i++)
 80052e6:	441c      	add	r4, r3
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80052e8:	47b0      	blx	r6
      if (ret != STTS751_OK)
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d0f3      	beq.n	80052d6 <ReadRegWrap+0x16>
      {
        return STTS751_ERROR;
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
      }
    }
  }

  return ret;
}
 80052f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ret;
 80052f6:	2000      	movs	r0, #0
}
 80052f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052fc <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005300:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8005302:	6880      	ldr	r0, [r0, #8]
 8005304:	b9a8      	cbnz	r0, 8005332 <WriteRegWrap+0x36>
  {
	for (i = 0; i < Length; i++)
 8005306:	b1a3      	cbz	r3, 8005332 <WriteRegWrap+0x36>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005308:	4614      	mov	r4, r2
 800530a:	eb02 0803 	add.w	r8, r2, r3
 800530e:	1a8f      	subs	r7, r1, r2
 8005310:	e001      	b.n	8005316 <WriteRegWrap+0x1a>
	for (i = 0; i < Length; i++)
 8005312:	4544      	cmp	r4, r8
 8005314:	d00d      	beq.n	8005332 <WriteRegWrap+0x36>
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005316:	1939      	adds	r1, r7, r4
 8005318:	4622      	mov	r2, r4
 800531a:	2301      	movs	r3, #1
 800531c:	7b28      	ldrb	r0, [r5, #12]
 800531e:	692e      	ldr	r6, [r5, #16]
 8005320:	b289      	uxth	r1, r1
	for (i = 0; i < Length; i++)
 8005322:	441c      	add	r4, r3
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005324:	47b0      	blx	r6
      if (ret != STTS751_OK)
 8005326:	2800      	cmp	r0, #0
 8005328:	d0f3      	beq.n	8005312 <WriteRegWrap+0x16>
      {
        return STTS751_ERROR;
 800532a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
      }
    }
  }

  return ret;
}
 800532e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ret;
 8005332:	2000      	movs	r0, #0
}
 8005334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005338 <STTS751_Init>:
{
 8005338:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 800533a:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
{
 800533e:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8005340:	b123      	cbz	r3, 800534c <STTS751_Init+0x14>
  pObj->is_initialized = 1;
 8005342:	2301      	movs	r3, #1
 8005344:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return STTS751_OK;
 8005348:	2000      	movs	r0, #0
}
 800534a:	bd38      	pop	{r3, r4, r5, pc}
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800534c:	f100 051c 	add.w	r5, r0, #28
 8005350:	2101      	movs	r1, #1
 8005352:	4628      	mov	r0, r5
 8005354:	f000 fb18 	bl	8005988 <stts751_pin_event_route_set>
 8005358:	b968      	cbnz	r0, 8005376 <STTS751_Init+0x3e>
    pObj->temp_odr = 1.0f;
 800535a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800535e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8005360:	2103      	movs	r1, #3
 8005362:	4628      	mov	r0, r5
 8005364:	f000 fac2 	bl	80058ec <stts751_resolution_set>
 8005368:	b928      	cbnz	r0, 8005376 <STTS751_Init+0x3e>
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800536a:	2180      	movs	r1, #128	@ 0x80
 800536c:	4628      	mov	r0, r5
 800536e:	f000 fa45 	bl	80057fc <stts751_temp_data_rate_set>
 8005372:	2800      	cmp	r0, #0
 8005374:	d0e5      	beq.n	8005342 <STTS751_Init+0xa>
      return STTS751_ERROR;
 8005376:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800537a:	bd38      	pop	{r3, r4, r5, pc}

0800537c <STTS751_ReadID>:
{
 800537c:	b510      	push	{r4, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	460c      	mov	r4, r1
  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8005382:	301c      	adds	r0, #28
 8005384:	a901      	add	r1, sp, #4
 8005386:	f000 fb19 	bl	80059bc <stts751_device_id_get>
 800538a:	b920      	cbnz	r0, 8005396 <STTS751_ReadID+0x1a>
  *Id = buf.manufacturer_id;
 800538c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005390:	7023      	strb	r3, [r4, #0]
}
 8005392:	b002      	add	sp, #8
 8005394:	bd10      	pop	{r4, pc}
    return STTS751_ERROR;
 8005396:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800539a:	e7fa      	b.n	8005392 <STTS751_ReadID+0x16>

0800539c <STTS751_TEMP_GetOutputDataRate>:
{
 800539c:	b510      	push	{r4, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	460c      	mov	r4, r1
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80053a2:	301c      	adds	r0, #28
 80053a4:	f10d 0107 	add.w	r1, sp, #7
 80053a8:	f000 fa64 	bl	8005874 <stts751_temp_data_rate_get>
 80053ac:	b988      	cbnz	r0, 80053d2 <STTS751_TEMP_GetOutputDataRate+0x36>
  switch (odr_low_level)
 80053ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80053b2:	2b09      	cmp	r3, #9
 80053b4:	d809      	bhi.n	80053ca <STTS751_TEMP_GetOutputDataRate+0x2e>
 80053b6:	3b01      	subs	r3, #1
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d82c      	bhi.n	8005416 <STTS751_TEMP_GetOutputDataRate+0x7a>
 80053bc:	e8df f003 	tbb	[pc, r3]
 80053c0:	19161310 	.word	0x19161310
 80053c4:	25221f1c 	.word	0x25221f1c
 80053c8:	28          	.byte	0x28
 80053c9:	00          	.byte	0x00
 80053ca:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80053ce:	2b80      	cmp	r3, #128	@ 0x80
 80053d0:	d003      	beq.n	80053da <STTS751_TEMP_GetOutputDataRate+0x3e>
 80053d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80053d6:	b002      	add	sp, #8
 80053d8:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 80053da:	2300      	movs	r3, #0
      *Odr = 0.0f;
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	e7fa      	b.n	80053d6 <STTS751_TEMP_GetOutputDataRate+0x3a>
  switch (odr_low_level)
 80053e0:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 80053e4:	e7fa      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80053e6:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80053ea:	e7f7      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80053ec:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80053f0:	e7f4      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80053f2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053f6:	e7f1      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80053f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80053fc:	e7ee      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80053fe:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005402:	e7eb      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 8005404:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005408:	e7e8      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 800540a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800540e:	e7e5      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 8005410:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8005414:	e7e2      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>
  switch (odr_low_level)
 8005416:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 800541a:	e7df      	b.n	80053dc <STTS751_TEMP_GetOutputDataRate+0x40>

0800541c <STTS751_TEMP_SetOutputDataRate>:
{
 800541c:	b510      	push	{r4, lr}
 800541e:	ed2d 8b02 	vpush	{d8}
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005422:	f100 041c 	add.w	r4, r0, #28
{
 8005426:	b082      	sub	sp, #8
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005428:	f10d 0107 	add.w	r1, sp, #7
 800542c:	4620      	mov	r0, r4
{
 800542e:	eeb0 8a40 	vmov.f32	s16, s0
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005432:	f000 fa75 	bl	8005920 <stts751_resolution_get>
 8005436:	2800      	cmp	r0, #0
 8005438:	d146      	bne.n	80054c8 <STTS751_TEMP_SetOutputDataRate+0xac>
  if(Odr == 16.0f && res == STTS751_12bit)
 800543a:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 800543e:	eeb4 8a67 	vcmp.f32	s16, s15
 8005442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005446:	d018      	beq.n	800547a <STTS751_TEMP_SetOutputDataRate+0x5e>
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8005448:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8005548 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800544c:	eeb4 8a67 	vcmp.f32	s16, s15
 8005450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005454:	d117      	bne.n	8005486 <STTS751_TEMP_SetOutputDataRate+0x6a>
 8005456:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800545a:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 800545e:	2b01      	cmp	r3, #1
 8005460:	d02c      	beq.n	80054bc <STTS751_TEMP_SetOutputDataRate+0xa0>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005462:	2109      	movs	r1, #9
  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8005464:	4620      	mov	r0, r4
 8005466:	f000 f9c9 	bl	80057fc <stts751_temp_data_rate_set>
 800546a:	3800      	subs	r0, #0
 800546c:	bf18      	it	ne
 800546e:	2001      	movne	r0, #1
 8005470:	4240      	negs	r0, r0
}
 8005472:	b002      	add	sp, #8
 8005474:	ecbd 8b02 	vpop	{d8}
 8005478:	bd10      	pop	{r4, pc}
  if(Odr == 16.0f && res == STTS751_12bit)
 800547a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d03c      	beq.n	80054fc <STTS751_TEMP_SetOutputDataRate+0xe0>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005482:	2108      	movs	r1, #8
 8005484:	e7ee      	b.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005486:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800554c <STTS751_TEMP_SetOutputDataRate+0x130>
 800548a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005492:	d801      	bhi.n	8005498 <STTS751_TEMP_SetOutputDataRate+0x7c>
 8005494:	4601      	mov	r1, r0
 8005496:	e7e5      	b.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005498:	eef4 7a00 	vmov.f32	s15, #64	@ 0x3e000000  0.125
 800549c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a4:	d908      	bls.n	80054b8 <STTS751_TEMP_SetOutputDataRate+0x9c>
 80054a6:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80054aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	d80c      	bhi.n	80054ce <STTS751_TEMP_SetOutputDataRate+0xb2>
 80054b4:	2102      	movs	r1, #2
 80054b6:	e7d5      	b.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
 80054b8:	2101      	movs	r1, #1
 80054ba:	e7d3      	b.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80054bc:	4601      	mov	r1, r0
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 fa14 	bl	80058ec <stts751_resolution_set>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d0cc      	beq.n	8005462 <STTS751_TEMP_SetOutputDataRate+0x46>
    return STTS751_ERROR;
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054cc:	e7d1      	b.n	8005472 <STTS751_TEMP_SetOutputDataRate+0x56>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80054ce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80054d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054da:	d916      	bls.n	800550a <STTS751_TEMP_SetOutputDataRate+0xee>
 80054dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80054e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e8:	d911      	bls.n	800550e <STTS751_TEMP_SetOutputDataRate+0xf2>
 80054ea:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80054ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f6:	d80c      	bhi.n	8005512 <STTS751_TEMP_SetOutputDataRate+0xf6>
 80054f8:	2105      	movs	r1, #5
 80054fa:	e7b3      	b.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80054fc:	2101      	movs	r1, #1
 80054fe:	4620      	mov	r0, r4
 8005500:	f000 f9f4 	bl	80058ec <stts751_resolution_set>
 8005504:	2800      	cmp	r0, #0
 8005506:	d0bc      	beq.n	8005482 <STTS751_TEMP_SetOutputDataRate+0x66>
 8005508:	e7de      	b.n	80054c8 <STTS751_TEMP_SetOutputDataRate+0xac>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800550a:	2103      	movs	r1, #3
 800550c:	e7aa      	b.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
 800550e:	2104      	movs	r1, #4
 8005510:	e7a8      	b.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005512:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8005516:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d801      	bhi.n	8005524 <STTS751_TEMP_SetOutputDataRate+0x108>
 8005520:	2106      	movs	r1, #6
 8005522:	e79f      	b.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005524:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005528:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800552c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005530:	bf98      	it	ls
 8005532:	2107      	movls	r1, #7
 8005534:	d996      	bls.n	8005464 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005536:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 800553a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800553e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005542:	d88e      	bhi.n	8005462 <STTS751_TEMP_SetOutputDataRate+0x46>
 8005544:	e79d      	b.n	8005482 <STTS751_TEMP_SetOutputDataRate+0x66>
 8005546:	bf00      	nop
 8005548:	42000000 	.word	0x42000000
 800554c:	3d800000 	.word	0x3d800000

08005550 <STTS751_TEMP_GetTemperature>:
{
 8005550:	b530      	push	{r4, r5, lr}
 8005552:	b083      	sub	sp, #12
 8005554:	460d      	mov	r5, r1
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8005556:	301c      	adds	r0, #28
 8005558:	f10d 0106 	add.w	r1, sp, #6
 800555c:	f000 f9f8 	bl	8005950 <stts751_temperature_raw_get>
 8005560:	b948      	cbnz	r0, 8005576 <STTS751_TEMP_GetTemperature+0x26>
  *Value = stts751_from_lsb_to_celsius(raw_value);
 8005562:	4604      	mov	r4, r0
 8005564:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8005568:	f000 f942 	bl	80057f0 <stts751_from_lsb_to_celsius>
 800556c:	ed85 0a00 	vstr	s0, [r5]
}
 8005570:	4620      	mov	r0, r4
 8005572:	b003      	add	sp, #12
 8005574:	bd30      	pop	{r4, r5, pc}
    return STTS751_ERROR;
 8005576:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800557a:	e7f9      	b.n	8005570 <STTS751_TEMP_GetTemperature+0x20>

0800557c <STTS751_DeInit>:
{
 800557c:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 800557e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8005582:	2b01      	cmp	r3, #1
{
 8005584:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8005586:	d003      	beq.n	8005590 <STTS751_DeInit+0x14>
  pObj->is_initialized = 0;
 8005588:	2000      	movs	r0, #0
 800558a:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 800558e:	bd10      	pop	{r4, pc}
  if (pObj->temp_is_enabled == 0U)
 8005590:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f7      	beq.n	8005588 <STTS751_DeInit+0xc>
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8005598:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 800559c:	f7ff fefe 	bl	800539c <STTS751_TEMP_GetOutputDataRate>
 80055a0:	b940      	cbnz	r0, 80055b4 <STTS751_DeInit+0x38>
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80055a2:	2180      	movs	r1, #128	@ 0x80
 80055a4:	f104 001c 	add.w	r0, r4, #28
 80055a8:	f000 f928 	bl	80057fc <stts751_temp_data_rate_set>
 80055ac:	b910      	cbnz	r0, 80055b4 <STTS751_DeInit+0x38>
  pObj->temp_is_enabled = 0;
 80055ae:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return STTS751_OK;
 80055b2:	e7e9      	b.n	8005588 <STTS751_DeInit+0xc>
      return STTS751_ERROR;
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop

080055bc <STTS751_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 80055bc:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80055c0:	b90b      	cbnz	r3, 80055c6 <STTS751_TEMP_Disable+0xa>
    return STTS751_OK;
 80055c2:	2000      	movs	r0, #0
}
 80055c4:	4770      	bx	lr
{
 80055c6:	b530      	push	{r4, r5, lr}
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80055c8:	f100 051c 	add.w	r5, r0, #28
{
 80055cc:	b083      	sub	sp, #12
 80055ce:	4604      	mov	r4, r0
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80055d0:	f10d 0107 	add.w	r1, sp, #7
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 f94d 	bl	8005874 <stts751_temp_data_rate_get>
 80055da:	b988      	cbnz	r0, 8005600 <STTS751_TEMP_Disable+0x44>
  switch (odr_low_level)
 80055dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80055e0:	2b09      	cmp	r3, #9
 80055e2:	d809      	bhi.n	80055f8 <STTS751_TEMP_Disable+0x3c>
 80055e4:	3b01      	subs	r3, #1
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d836      	bhi.n	8005658 <STTS751_TEMP_Disable+0x9c>
 80055ea:	e8df f003 	tbb	[pc, r3]
 80055ee:	0d1d      	.short	0x0d1d
 80055f0:	29262320 	.word	0x29262320
 80055f4:	322f      	.short	0x322f
 80055f6:	2c          	.byte	0x2c
 80055f7:	00          	.byte	0x00
 80055f8:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80055fc:	2b80      	cmp	r3, #128	@ 0x80
 80055fe:	d011      	beq.n	8005624 <STTS751_TEMP_Disable+0x68>
    return STTS751_ERROR;
 8005600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8005604:	b003      	add	sp, #12
 8005606:	bd30      	pop	{r4, r5, pc}
  switch (odr_low_level)
 8005608:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
      *Odr = 0.0625f;
 800560c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800560e:	2180      	movs	r1, #128	@ 0x80
 8005610:	4628      	mov	r0, r5
 8005612:	f000 f8f3 	bl	80057fc <stts751_temp_data_rate_set>
 8005616:	2800      	cmp	r0, #0
 8005618:	d1f2      	bne.n	8005600 <STTS751_TEMP_Disable+0x44>
  pObj->temp_is_enabled = 0;
 800561a:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return STTS751_OK;
 800561e:	2000      	movs	r0, #0
}
 8005620:	b003      	add	sp, #12
 8005622:	bd30      	pop	{r4, r5, pc}
  switch (odr_low_level)
 8005624:	2300      	movs	r3, #0
 8005626:	e7f1      	b.n	800560c <STTS751_TEMP_Disable+0x50>
 8005628:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 800562c:	e7ee      	b.n	800560c <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_500mHz:
 800562e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8005632:	e7eb      	b.n	800560c <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_1Hz:
 8005634:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005638:	e7e8      	b.n	800560c <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_2Hz:
 800563a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800563e:	e7e5      	b.n	800560c <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_4Hz:
 8005640:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005644:	e7e2      	b.n	800560c <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_32Hz:
 8005646:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 800564a:	e7df      	b.n	800560c <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_8Hz:
 800564c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005650:	e7dc      	b.n	800560c <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_16Hz:
 8005652:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005656:	e7d9      	b.n	800560c <STTS751_TEMP_Disable+0x50>
  switch (odr_low_level)
 8005658:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 800565c:	e7d6      	b.n	800560c <STTS751_TEMP_Disable+0x50>
 800565e:	bf00      	nop

08005660 <STTS751_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8005660:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8005664:	2b01      	cmp	r3, #1
 8005666:	d048      	beq.n	80056fa <STTS751_TEMP_Enable+0x9a>
{
 8005668:	b530      	push	{r4, r5, lr}
 800566a:	ed2d 8b02 	vpush	{d8}
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800566e:	f100 051c 	add.w	r5, r0, #28
{
 8005672:	b083      	sub	sp, #12
 8005674:	4604      	mov	r4, r0
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005676:	f10d 0107 	add.w	r1, sp, #7
 800567a:	4628      	mov	r0, r5
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800567c:	ed94 8a0b 	vldr	s16, [r4, #44]	@ 0x2c
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005680:	f000 f94e 	bl	8005920 <stts751_resolution_get>
 8005684:	2800      	cmp	r0, #0
 8005686:	d150      	bne.n	800572a <STTS751_TEMP_Enable+0xca>
  if(Odr == 16.0f && res == STTS751_12bit)
 8005688:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 800568c:	eeb4 8a67 	vcmp.f32	s16, s15
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	d019      	beq.n	80056ca <STTS751_TEMP_Enable+0x6a>
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8005696:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800579c <STTS751_TEMP_Enable+0x13c>
 800569a:	eeb4 8a67 	vcmp.f32	s16, s15
 800569e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a2:	d118      	bne.n	80056d6 <STTS751_TEMP_Enable+0x76>
 80056a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80056a8:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d036      	beq.n	800571e <STTS751_TEMP_Enable+0xbe>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80056b0:	2109      	movs	r1, #9
  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f8a2 	bl	80057fc <stts751_temp_data_rate_set>
 80056b8:	bbb8      	cbnz	r0, 800572a <STTS751_TEMP_Enable+0xca>
  pObj->temp_is_enabled = 1;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return STTS751_OK;
 80056c0:	2000      	movs	r0, #0
}
 80056c2:	b003      	add	sp, #12
 80056c4:	ecbd 8b02 	vpop	{d8}
 80056c8:	bd30      	pop	{r4, r5, pc}
  if(Odr == 16.0f && res == STTS751_12bit)
 80056ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d030      	beq.n	8005734 <STTS751_TEMP_Enable+0xd4>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80056d2:	2108      	movs	r1, #8
 80056d4:	e7ed      	b.n	80056b2 <STTS751_TEMP_Enable+0x52>
 80056d6:	eddf 7a32 	vldr	s15, [pc, #200]	@ 80057a0 <STTS751_TEMP_Enable+0x140>
 80056da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80056de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e2:	d801      	bhi.n	80056e8 <STTS751_TEMP_Enable+0x88>
 80056e4:	4601      	mov	r1, r0
 80056e6:	e7e4      	b.n	80056b2 <STTS751_TEMP_Enable+0x52>
 80056e8:	eef4 7a00 	vmov.f32	s15, #64	@ 0x3e000000  0.125
 80056ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80056f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f4:	d803      	bhi.n	80056fe <STTS751_TEMP_Enable+0x9e>
 80056f6:	2101      	movs	r1, #1
 80056f8:	e7db      	b.n	80056b2 <STTS751_TEMP_Enable+0x52>
    return STTS751_OK;
 80056fa:	2000      	movs	r0, #0
}
 80056fc:	4770      	bx	lr
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80056fe:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005702:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570a:	d911      	bls.n	8005730 <STTS751_TEMP_Enable+0xd0>
 800570c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005710:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005718:	d813      	bhi.n	8005742 <STTS751_TEMP_Enable+0xe2>
 800571a:	2103      	movs	r1, #3
 800571c:	e7c9      	b.n	80056b2 <STTS751_TEMP_Enable+0x52>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800571e:	4601      	mov	r1, r0
 8005720:	4628      	mov	r0, r5
 8005722:	f000 f8e3 	bl	80058ec <stts751_resolution_set>
 8005726:	2800      	cmp	r0, #0
 8005728:	d0c2      	beq.n	80056b0 <STTS751_TEMP_Enable+0x50>
    return STTS751_ERROR;
 800572a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800572e:	e7c8      	b.n	80056c2 <STTS751_TEMP_Enable+0x62>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005730:	2102      	movs	r1, #2
 8005732:	e7be      	b.n	80056b2 <STTS751_TEMP_Enable+0x52>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8005734:	2101      	movs	r1, #1
 8005736:	4628      	mov	r0, r5
 8005738:	f000 f8d8 	bl	80058ec <stts751_resolution_set>
 800573c:	2800      	cmp	r0, #0
 800573e:	d0c8      	beq.n	80056d2 <STTS751_TEMP_Enable+0x72>
 8005740:	e7f3      	b.n	800572a <STTS751_TEMP_Enable+0xca>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 8005742:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005746:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574e:	d908      	bls.n	8005762 <STTS751_TEMP_Enable+0x102>
 8005750:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005754:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575c:	d803      	bhi.n	8005766 <STTS751_TEMP_Enable+0x106>
 800575e:	2105      	movs	r1, #5
 8005760:	e7a7      	b.n	80056b2 <STTS751_TEMP_Enable+0x52>
 8005762:	2104      	movs	r1, #4
 8005764:	e7a5      	b.n	80056b2 <STTS751_TEMP_Enable+0x52>
 8005766:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800576a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800576e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005772:	d801      	bhi.n	8005778 <STTS751_TEMP_Enable+0x118>
 8005774:	2106      	movs	r1, #6
 8005776:	e79c      	b.n	80056b2 <STTS751_TEMP_Enable+0x52>
 8005778:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800577c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005784:	bf98      	it	ls
 8005786:	2107      	movls	r1, #7
 8005788:	d993      	bls.n	80056b2 <STTS751_TEMP_Enable+0x52>
 800578a:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 800578e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005796:	d99c      	bls.n	80056d2 <STTS751_TEMP_Enable+0x72>
 8005798:	e78a      	b.n	80056b0 <STTS751_TEMP_Enable+0x50>
 800579a:	bf00      	nop
 800579c:	42000000 	.word	0x42000000
 80057a0:	3d800000 	.word	0x3d800000

080057a4 <STTS751_RegisterBusIO>:
  if (pObj == NULL)
 80057a4:	b1e0      	cbz	r0, 80057e0 <STTS751_RegisterBusIO+0x3c>
{
 80057a6:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 80057a8:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 80057ac:	688a      	ldr	r2, [r1, #8]
 80057ae:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80057b0:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 80057b4:	7b0a      	ldrb	r2, [r1, #12]
 80057b6:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80057b8:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 80057bc:	6989      	ldr	r1, [r1, #24]
 80057be:	6181      	str	r1, [r0, #24]
 80057c0:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80057c2:	4909      	ldr	r1, [pc, #36]	@ (80057e8 <STTS751_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 80057c4:	4a09      	ldr	r2, [pc, #36]	@ (80057ec <STTS751_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80057c6:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 80057c8:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 80057cc:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 80057ce:	b113      	cbz	r3, 80057d6 <STTS751_RegisterBusIO+0x32>
}
 80057d0:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 80057d4:	4718      	bx	r3
}
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	080052c1 	.word	0x080052c1
 80057ec:	080052fd 	.word	0x080052fd

080057f0 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float stts751_from_lsb_to_celsius(int16_t lsb)
{
 80057f0:	ee00 0a10 	vmov	s0, r0
  return ((float)lsb) / 256.0f;
}
 80057f4:	eeba 0acc 	vcvt.f32.s32	s0, s0, #8
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop

080057fc <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	4604      	mov	r4, r0
 8005800:	b082      	sub	sp, #8
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8005802:	23aa      	movs	r3, #170	@ 0xaa
{
 8005804:	460d      	mov	r5, r1
  uint8_t dummy_value = 0xAA;
 8005806:	f88d 3007 	strb.w	r3, [sp, #7]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800580a:	6880      	ldr	r0, [r0, #8]
 800580c:	6866      	ldr	r6, [r4, #4]
 800580e:	2301      	movs	r3, #1
 8005810:	aa01      	add	r2, sp, #4
 8005812:	2104      	movs	r1, #4
 8005814:	47b0      	blx	r6
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0) {
 8005816:	bb50      	cbnz	r0, 800586e <stts751_temp_data_rate_set+0x72>
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8005818:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800581c:	68a0      	ldr	r0, [r4, #8]
 800581e:	6826      	ldr	r6, [r4, #0]
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8005820:	f365 0303 	bfi	r3, r5, #0, #4
 8005824:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005828:	aa01      	add	r2, sp, #4
 800582a:	2301      	movs	r3, #1
 800582c:	2104      	movs	r1, #4
 800582e:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0) {
 8005830:	b9e8      	cbnz	r0, 800586e <stts751_temp_data_rate_set+0x72>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005832:	6866      	ldr	r6, [r4, #4]
 8005834:	68a0      	ldr	r0, [r4, #8]
 8005836:	2301      	movs	r3, #1
 8005838:	466a      	mov	r2, sp
 800583a:	2103      	movs	r1, #3
 800583c:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0) {
 800583e:	b9b0      	cbnz	r0, 800586e <stts751_temp_data_rate_set+0x72>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8005840:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005844:	6826      	ldr	r6, [r4, #0]
 8005846:	68a0      	ldr	r0, [r4, #8]
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8005848:	09ea      	lsrs	r2, r5, #7
 800584a:	f362 1386 	bfi	r3, r2, #6, #1
 800584e:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005852:	466a      	mov	r2, sp
 8005854:	2301      	movs	r3, #1
 8005856:	2103      	movs	r1, #3
 8005858:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT)) {
 800585a:	b940      	cbnz	r0, 800586e <stts751_temp_data_rate_set+0x72>
 800585c:	2d90      	cmp	r5, #144	@ 0x90
 800585e:	d106      	bne.n	800586e <stts751_temp_data_rate_set+0x72>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005860:	6825      	ldr	r5, [r4, #0]
 8005862:	68a0      	ldr	r0, [r4, #8]
 8005864:	2301      	movs	r3, #1
 8005866:	f10d 0207 	add.w	r2, sp, #7
 800586a:	210f      	movs	r1, #15
 800586c:	47a8      	blx	r5
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
  }

  return ret;
}
 800586e:	b002      	add	sp, #8
 8005870:	bd70      	pop	{r4, r5, r6, pc}
 8005872:	bf00      	nop

08005874 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4604      	mov	r4, r0
 8005878:	b082      	sub	sp, #8
 800587a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800587c:	6880      	ldr	r0, [r0, #8]
 800587e:	6866      	ldr	r6, [r4, #4]
 8005880:	2301      	movs	r3, #1
 8005882:	466a      	mov	r2, sp
 8005884:	2104      	movs	r1, #4
 8005886:	47b0      	blx	r6
  stts751_configuration_t configuration;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0) {
 8005888:	b928      	cbnz	r0, 8005896 <stts751_temp_data_rate_get+0x22>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800588a:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 800588e:	2301      	movs	r3, #1
 8005890:	aa01      	add	r2, sp, #4
 8005892:	2103      	movs	r1, #3
 8005894:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 8005896:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800589a:	f89d 3000 	ldrb.w	r3, [sp]
 800589e:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80058aa:	2b09      	cmp	r3, #9
 80058ac:	d81c      	bhi.n	80058e8 <stts751_temp_data_rate_get+0x74>
 80058ae:	e8df f003 	tbb	[pc, r3]
 80058b2:	0905      	.short	0x0905
 80058b4:	110f0d0b 	.word	0x110f0d0b
 80058b8:	19171513 	.word	0x19171513
 80058bc:	2300      	movs	r3, #0
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80058be:	702b      	strb	r3, [r5, #0]
      *val = STTS751_TEMP_ODR_OFF;
      break;
  }

  return ret;
}
 80058c0:	b002      	add	sp, #8
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
      break;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e7fa      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
      break;
 80058c8:	2302      	movs	r3, #2
 80058ca:	e7f8      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
      break;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e7f6      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
      break;
 80058d0:	2304      	movs	r3, #4
 80058d2:	e7f4      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
      break;
 80058d4:	2305      	movs	r3, #5
 80058d6:	e7f2      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
      break;
 80058d8:	2306      	movs	r3, #6
 80058da:	e7f0      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
      break;
 80058dc:	2307      	movs	r3, #7
 80058de:	e7ee      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
      break;
 80058e0:	2308      	movs	r3, #8
 80058e2:	e7ec      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
      break;
 80058e4:	2309      	movs	r3, #9
 80058e6:	e7ea      	b.n	80058be <stts751_temp_data_rate_get+0x4a>
  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	e7e8      	b.n	80058be <stts751_temp_data_rate_get+0x4a>

080058ec <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4604      	mov	r4, r0
 80058f0:	b082      	sub	sp, #8
 80058f2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80058f4:	6880      	ldr	r0, [r0, #8]
 80058f6:	6866      	ldr	r6, [r4, #4]
 80058f8:	2301      	movs	r3, #1
 80058fa:	aa01      	add	r2, sp, #4
 80058fc:	2103      	movs	r1, #3
 80058fe:	47b0      	blx	r6
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                         1);

  if (ret == 0) {
 8005900:	b958      	cbnz	r0, 800591a <stts751_resolution_set+0x2e>
    reg.tres = (uint8_t) val;
 8005902:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005906:	6826      	ldr	r6, [r4, #0]
 8005908:	68a0      	ldr	r0, [r4, #8]
    reg.tres = (uint8_t) val;
 800590a:	f365 0383 	bfi	r3, r5, #2, #2
 800590e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005912:	aa01      	add	r2, sp, #4
 8005914:	2301      	movs	r3, #1
 8005916:	2103      	movs	r1, #3
 8005918:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                            1);
  }

  return ret;
}
 800591a:	b002      	add	sp, #8
 800591c:	bd70      	pop	{r4, r5, r6, pc}
 800591e:	bf00      	nop

08005920 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8005920:	b530      	push	{r4, r5, lr}
 8005922:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005924:	2301      	movs	r3, #1
 8005926:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800592a:	aa01      	add	r2, sp, #4
{
 800592c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800592e:	2103      	movs	r1, #3
 8005930:	47a8      	blx	r5
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                         1);

  switch (reg.tres) {
 8005932:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005936:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800593a:	2b01      	cmp	r3, #1
 800593c:	d005      	beq.n	800594a <stts751_resolution_get+0x2a>
 800593e:	2b03      	cmp	r3, #3
 8005940:	d003      	beq.n	800594a <stts751_resolution_get+0x2a>
 8005942:	3b00      	subs	r3, #0
 8005944:	bf18      	it	ne
 8005946:	2301      	movne	r3, #1
 8005948:	005b      	lsls	r3, r3, #1
    case STTS751_9bit:
      *val = STTS751_9bit;
 800594a:	7023      	strb	r3, [r4, #0]
      *val = STTS751_9bit;
      break;
  }

  return ret;
}
 800594c:	b003      	add	sp, #12
 800594e:	bd30      	pop	{r4, r5, pc}

08005950 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4604      	mov	r4, r0
 8005954:	b082      	sub	sp, #8
 8005956:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005958:	6880      	ldr	r0, [r0, #8]
 800595a:	6866      	ldr	r6, [r4, #4]
 800595c:	2301      	movs	r3, #1
 800595e:	f10d 0205 	add.w	r2, sp, #5
 8005962:	2100      	movs	r1, #0
 8005964:	47b0      	blx	r6
  uint8_t buff[2];
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
                         (uint8_t *)&buff[1], 1);

  if (ret == 0) {
 8005966:	b960      	cbnz	r0, 8005982 <stts751_temperature_raw_get+0x32>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005968:	2301      	movs	r3, #1
 800596a:	aa01      	add	r2, sp, #4
 800596c:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005970:	2102      	movs	r1, #2
 8005972:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
                           &buff[0], 1);
    *val = (int16_t)buff[1];
    *val = (*val * 256) + (int16_t)buff[0];
 8005974:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005978:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800597c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005980:	802b      	strh	r3, [r5, #0]
  }

  return ret;
}
 8005982:	b002      	add	sp, #8
 8005984:	bd70      	pop	{r4, r5, r6, pc}
 8005986:	bf00      	nop

08005988 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4604      	mov	r4, r0
 800598c:	b082      	sub	sp, #8
 800598e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005990:	6880      	ldr	r0, [r0, #8]
 8005992:	6866      	ldr	r6, [r4, #4]
 8005994:	2301      	movs	r3, #1
 8005996:	aa01      	add	r2, sp, #4
 8005998:	2103      	movs	r1, #3
 800599a:	47b0      	blx	r6
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg,
                         1);

  if (ret == 0) {
 800599c:	b958      	cbnz	r0, 80059b6 <stts751_pin_event_route_set+0x2e>
    reg.mask1 = val;
 800599e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80059a2:	6826      	ldr	r6, [r4, #0]
 80059a4:	68a0      	ldr	r0, [r4, #8]
    reg.mask1 = val;
 80059a6:	f365 13c7 	bfi	r3, r5, #7, #1
 80059aa:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80059ae:	aa01      	add	r2, sp, #4
 80059b0:	2301      	movs	r3, #1
 80059b2:	2103      	movs	r1, #3
 80059b4:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg,
                            1);
  }

  return ret;
}
 80059b6:	b002      	add	sp, #8
 80059b8:	bd70      	pop	{r4, r5, r6, pc}
 80059ba:	bf00      	nop

080059bc <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	4604      	mov	r4, r0
 80059c0:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80059c2:	460a      	mov	r2, r1
 80059c4:	6880      	ldr	r0, [r0, #8]
 80059c6:	6866      	ldr	r6, [r4, #4]
 80059c8:	2301      	movs	r3, #1
 80059ca:	21fd      	movs	r1, #253	@ 0xfd
 80059cc:	47b0      	blx	r6
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0) {
 80059ce:	b978      	cbnz	r0, 80059f0 <stts751_device_id_get+0x34>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80059d0:	2301      	movs	r3, #1
 80059d2:	68a0      	ldr	r0, [r4, #8]
 80059d4:	6866      	ldr	r6, [r4, #4]
 80059d6:	18ea      	adds	r2, r5, r3
 80059d8:	21fe      	movs	r1, #254	@ 0xfe
 80059da:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0) {
 80059dc:	b940      	cbnz	r0, 80059f0 <stts751_device_id_get+0x34>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80059de:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80059e2:	1caa      	adds	r2, r5, #2
 80059e4:	46b4      	mov	ip, r6
 80059e6:	2301      	movs	r3, #1
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
}
 80059e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80059ec:	21ff      	movs	r1, #255	@ 0xff
 80059ee:	4760      	bx	ip
}
 80059f0:	bd70      	pop	{r4, r5, r6, pc}
 80059f2:	bf00      	nop

080059f4 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 80059f4:	b570      	push	{r4, r5, r6, lr}
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 80059f6:	4c1a      	ldr	r4, [pc, #104]	@ (8005a60 <BSP_ADC1_Initialization+0x6c>)
 80059f8:	7823      	ldrb	r3, [r4, #0]
{
 80059fa:	4605      	mov	r5, r0
  if(ADC_UsedFor == ADC1_NOT_USED){
 80059fc:	b123      	cbz	r3, 8005a08 <BSP_ADC1_Initialization+0x14>
      return BSP_ERROR_PERIPH_FAILURE;
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 80059fe:	ea45 0003 	orr.w	r0, r5, r3
 8005a02:	7020      	strb	r0, [r4, #0]

  return BSP_ERROR_NONE;
 8005a04:	2000      	movs	r0, #0
}
 8005a06:	bd70      	pop	{r4, r5, r6, pc}
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a08:	2204      	movs	r2, #4
    ADC1_Handle.Instance = ADC1;
 8005a0a:	4916      	ldr	r1, [pc, #88]	@ (8005a64 <BSP_ADC1_Initialization+0x70>)
 8005a0c:	6061      	str	r1, [r4, #4]
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8005a0e:	18a6      	adds	r6, r4, r2
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 8005a10:	e9c4 3302 	strd	r3, r3, [r4, #8]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8005a14:	e9c4 3304 	strd	r3, r3, [r4, #16]
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a18:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8005a1c:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8005a20:	f44f 7180 	mov.w	r1, #256	@ 0x100
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a24:	61a2      	str	r2, [r4, #24]
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8005a26:	6522      	str	r2, [r4, #80]	@ 0x50
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 8005a28:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8005a2c:	2201      	movs	r2, #1
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 8005a2e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 8005a32:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8005a36:	4630      	mov	r0, r6
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8005a3c:	83a1      	strh	r1, [r4, #28]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8005a3e:	6222      	str	r2, [r4, #32]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 8005a40:	62a2      	str	r2, [r4, #40]	@ 0x28
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 8005a42:	64e2      	str	r2, [r4, #76]	@ 0x4c
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005a44:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8005a46:	f001 fdfb 	bl	8007640 <HAL_ADC_Init>
 8005a4a:	b930      	cbnz	r0, 8005a5a <BSP_ADC1_Initialization+0x66>
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8005a4c:	217f      	movs	r1, #127	@ 0x7f
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f002 f82e 	bl	8007ab0 <HAL_ADCEx_Calibration_Start>
 8005a54:	b908      	cbnz	r0, 8005a5a <BSP_ADC1_Initialization+0x66>
  ADC_UsedFor |= ADC_InitFor;
 8005a56:	7823      	ldrb	r3, [r4, #0]
 8005a58:	e7d1      	b.n	80059fe <BSP_ADC1_Initialization+0xa>
      return BSP_ERROR_PERIPH_FAILURE;
 8005a5a:	f06f 0003 	mvn.w	r0, #3
}
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	20002970 	.word	0x20002970
 8005a64:	50040000 	.word	0x50040000

08005a68 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8005a68:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <HAL_ADC_MspInit+0x2c>)
 8005a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a70:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{ 
 8005a74:	b082      	sub	sp, #8
  __HAL_RCC_ADC_CLK_ENABLE();
 8005a76:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005a7a:	9201      	str	r2, [sp, #4]
 8005a7c:	9a01      	ldr	r2, [sp, #4]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8005a7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a82:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005a86:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005a8e:	b002      	add	sp, #8
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40021000 	.word	0x40021000

08005a98 <BSP_PB_PWR_Init>:
*/
void BSP_PB_PWR_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005a98:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <BSP_PB_PWR_Init+0x50>)
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8005a9a:	4814      	ldr	r0, [pc, #80]	@ (8005aec <BSP_PB_PWR_Init+0x54>)
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005a9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 8005a9e:	b500      	push	{lr}
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005aa0:	f042 0208 	orr.w	r2, r2, #8
 8005aa4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 8005aa8:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 8005aaa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8005ae0 <BSP_PB_PWR_Init+0x48>
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8005ab4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	2302      	movs	r3, #2
 8005aba:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005abe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005ac2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8005ac4:	f002 fb30 	bl	8008128 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	210f      	movs	r1, #15
 8005acc:	2028      	movs	r0, #40	@ 0x28
 8005ace:	f002 fabb 	bl	8008048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 8005ad2:	2028      	movs	r0, #40	@ 0x28
 8005ad4:	f002 faf4 	bl	80080c0 <HAL_NVIC_EnableIRQ>
  
}
 8005ad8:	b009      	add	sp, #36	@ 0x24
 8005ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ade:	bf00      	nop
 8005ae0:	00000400 	.word	0x00000400
 8005ae4:	10110000 	.word	0x10110000
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	48000c00 	.word	0x48000c00

08005af0 <BSP_Enable_DCDC2>:
*/
void BSP_Enable_DCDC2(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005af0:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <BSP_Enable_DCDC2+0x44>)
{
 8005af2:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005af4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005af6:	4c10      	ldr	r4, [pc, #64]	@ (8005b38 <BSP_Enable_DCDC2+0x48>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005af8:	f042 0210 	orr.w	r2, r2, #16
 8005afc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 8005b00:	b088      	sub	sp, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b12:	a902      	add	r1, sp, #8
 8005b14:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005b16:	2200      	movs	r2, #0
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b1e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b20:	f002 fb02 	bl	8008128 <HAL_GPIO_Init>
  
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8005b24:	2201      	movs	r2, #1
 8005b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f002 fcd4 	bl	80084d8 <HAL_GPIO_WritePin>
}
 8005b30:	b008      	add	sp, #32
 8005b32:	bd10      	pop	{r4, pc}
 8005b34:	40021000 	.word	0x40021000
 8005b38:	48001000 	.word	0x48001000

08005b3c <BSP_PB_Init>:
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005b3c:	4a17      	ldr	r2, [pc, #92]	@ (8005b9c <BSP_PB_Init+0x60>)
{
 8005b3e:	b510      	push	{r4, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005b40:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8005b42:	f040 0010 	orr.w	r0, r0, #16
 8005b46:	64d0      	str	r0, [r2, #76]	@ 0x4c
 8005b48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
{
 8005b4a:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005b4c:	f002 0210 	and.w	r2, r2, #16
 8005b50:	9201      	str	r2, [sp, #4]
 8005b52:	9a01      	ldr	r2, [sp, #4]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005b54:	b969      	cbnz	r1, 8005b72 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005b56:	460b      	mov	r3, r1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b58:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005b5a:	4811      	ldr	r0, [pc, #68]	@ (8005ba0 <BSP_PB_Init+0x64>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005b5c:	2401      	movs	r4, #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005b5e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b60:	e9cd 4302 	strd	r4, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b64:	e9cd 2204 	strd	r2, r2, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005b68:	f002 fade 	bl	8008128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;  
}
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	b008      	add	sp, #32
 8005b70:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005b72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <BSP_PB_Init+0x68>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005b74:	480a      	ldr	r0, [pc, #40]	@ (8005ba0 <BSP_PB_Init+0x64>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b76:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005b78:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b80:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005b82:	f002 fad1 	bl	8008128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005b86:	4622      	mov	r2, r4
 8005b88:	210f      	movs	r1, #15
 8005b8a:	2006      	movs	r0, #6
 8005b8c:	f002 fa5c 	bl	8008048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005b90:	2006      	movs	r0, #6
 8005b92:	f002 fa95 	bl	80080c0 <HAL_NVIC_EnableIRQ>
}
 8005b96:	2000      	movs	r0, #0
 8005b98:	b008      	add	sp, #32
 8005b9a:	bd10      	pop	{r4, pc}
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	48001000 	.word	0x48001000
 8005ba4:	10210000 	.word	0x10210000

08005ba8 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005ba8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 8005baa:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <BSP_LED_Init+0x54>)
{
 8005bac:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 8005bae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bb0:	b9d0      	cbnz	r0, 8005be8 <BSP_LED_Init+0x40>
 8005bb2:	f042 0210 	orr.w	r2, r2, #16
 8005bb6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005bc4:	eb03 0280 	add.w	r2, r3, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8005bc8:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005bcc:	6850      	ldr	r0, [r2, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bce:	2201      	movs	r2, #1
 8005bd0:	e9cd 1203 	strd	r1, r2, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd4:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005bd6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005bd8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005bda:	e9cd 4305 	strd	r4, r3, [sp, #20]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005bde:	f002 faa3 	bl	8008128 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
}
 8005be2:	4620      	mov	r0, r4
 8005be4:	b008      	add	sp, #32
 8005be6:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 8005be8:	f042 0208 	orr.w	r2, r2, #8
 8005bec:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	9302      	str	r3, [sp, #8]
 8005bf6:	9b02      	ldr	r3, [sp, #8]
 8005bf8:	e7e3      	b.n	8005bc2 <BSP_LED_Init+0x1a>
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	080172b0 	.word	0x080172b0

08005c04 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8005c04:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8005c06:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <BSP_LED_On+0x18>)
 8005c08:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005c0c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8005c10:	6850      	ldr	r0, [r2, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f002 fc60 	bl	80084d8 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 8005c18:	2000      	movs	r0, #0
 8005c1a:	bd08      	pop	{r3, pc}
 8005c1c:	080172b0 	.word	0x080172b0

08005c20 <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8005c20:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005c22:	4b05      	ldr	r3, [pc, #20]	@ (8005c38 <BSP_LED_Off+0x18>)
 8005c24:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005c28:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8005c2c:	6850      	ldr	r0, [r2, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f002 fc52 	bl	80084d8 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 8005c34:	2000      	movs	r0, #0
 8005c36:	bd08      	pop	{r3, pc}
 8005c38:	080172b0 	.word	0x080172b0

08005c3c <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8005c3c:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8005c3e:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <BSP_LED_Toggle+0x18>)
 8005c40:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005c44:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8005c48:	6850      	ldr	r0, [r2, #4]
 8005c4a:	f002 fc4b 	bl	80084e4 <HAL_GPIO_TogglePin>
  
  return BSP_ERROR_NONE;    
}
 8005c4e:	2000      	movs	r0, #0
 8005c50:	bd08      	pop	{r3, pc}
 8005c52:	bf00      	nop
 8005c54:	080172b0 	.word	0x080172b0

08005c58 <Sensor_IO_SPI_CS_Init_All>:
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005c58:	4b2e      	ldr	r3, [pc, #184]	@ (8005d14 <Sensor_IO_SPI_CS_Init_All+0xbc>)
{
 8005c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005c5c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();

  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005c5e:	4d2e      	ldr	r5, [pc, #184]	@ (8005d18 <Sensor_IO_SPI_CS_Init_All+0xc0>)
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 8005c60:	4c2e      	ldr	r4, [pc, #184]	@ (8005d1c <Sensor_IO_SPI_CS_Init_All+0xc4>)
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005c62:	f041 0108 	orr.w	r1, r1, #8
 8005c66:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8005c68:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
{
 8005c6a:	b08b      	sub	sp, #44	@ 0x2c
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005c6c:	f000 0008 	and.w	r0, r0, #8
 8005c70:	9001      	str	r0, [sp, #4]
 8005c72:	9801      	ldr	r0, [sp, #4]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8005c74:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005c76:	f040 0020 	orr.w	r0, r0, #32
 8005c7a:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8005c7c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005c7e:	f000 0020 	and.w	r0, r0, #32
 8005c82:	9002      	str	r0, [sp, #8]
 8005c84:	9802      	ldr	r0, [sp, #8]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8005c86:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005c88:	f040 0020 	orr.w	r0, r0, #32
 8005c8c:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8005c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005c96:	4628      	mov	r0, r5
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8005c9e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005ca0:	f002 fc1a 	bl	80084d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	2120      	movs	r1, #32
 8005caa:	f002 fc15 	bl	80084d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN,GPIO_PIN_SET);
 8005cae:	4620      	mov	r0, r4
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005cb6:	f002 fc0f 	bl	80084d8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;

  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8005cba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8005cc4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8005cc6:	2303      	movs	r3, #3
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8005cc8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8005cca:	2200      	movs	r2, #0
 8005ccc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8005cd0:	f002 fa2a 	bl	8008128 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cdc:	f002 fbfc 	bl	80084d8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8005ce0:	2720      	movs	r7, #32
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8005ce2:	a904      	add	r1, sp, #16
 8005ce4:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8005ce6:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8005ce8:	f002 fa1e 	bl	8008128 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 8005cec:	2201      	movs	r2, #1
 8005cee:	4639      	mov	r1, r7
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f002 fbf1 	bl	80084d8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8005cf6:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8005cfa:	a904      	add	r1, sp, #16
 8005cfc:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8005cfe:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8005d00:	f002 fa12 	bl	8008128 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN,GPIO_PIN_SET);
 8005d04:	4620      	mov	r0, r4
 8005d06:	2201      	movs	r2, #1
 8005d08:	4631      	mov	r1, r6
 8005d0a:	f002 fbe5 	bl	80084d8 <HAL_GPIO_WritePin>

  return 0;
}
 8005d0e:	2000      	movs	r0, #0
 8005d10:	b00b      	add	sp, #44	@ 0x2c
 8005d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d14:	40021000 	.word	0x40021000
 8005d18:	48000c00 	.word	0x48000c00
 8005d1c:	48001400 	.word	0x48001400

08005d20 <BSP_BC_CmdSend>:
* @param stbc02_SwCmd The command to be sent
* @retval 0 in case of success
* @retval 1 in case of failure
*/
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4604      	mov	r4, r0
  uint32_t tk = STBC02_GetTick();
 8005d24:	f001 fc74 	bl	8007610 <HAL_GetTick>
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005d28:	4d0d      	ldr	r5, [pc, #52]	@ (8005d60 <BSP_BC_CmdSend+0x40>)
  uint32_t tk = STBC02_GetTick();
 8005d2a:	4606      	mov	r6, r0
  stbc02_SwState = start;
 8005d2c:	2301      	movs	r3, #1
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005d2e:	f105 0050 	add.w	r0, r5, #80	@ 0x50
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005d32:	f885 404c 	strb.w	r4, [r5, #76]	@ 0x4c
  stbc02_SwState = start;
 8005d36:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005d3a:	f006 ff49 	bl	800cbd0 <HAL_TIM_Base_Start_IT>
  
  while(stbc02_SwState != idle)
 8005d3e:	e004      	b.n	8005d4a <BSP_BC_CmdSend+0x2a>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8005d40:	f001 fc66 	bl	8007610 <HAL_GetTick>
 8005d44:	1b80      	subs	r0, r0, r6
 8005d46:	280a      	cmp	r0, #10
 8005d48:	d808      	bhi.n	8005d5c <BSP_BC_CmdSend+0x3c>
  while(stbc02_SwState != idle)
 8005d4a:	f895 404d 	ldrb.w	r4, [r5, #77]	@ 0x4d
 8005d4e:	2c00      	cmp	r4, #0
 8005d50:	d1f6      	bne.n	8005d40 <BSP_BC_CmdSend+0x20>
    {
      return 1;
    }
  }
  /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 8005d52:	4804      	ldr	r0, [pc, #16]	@ (8005d64 <BSP_BC_CmdSend+0x44>)
 8005d54:	f006 ff7a 	bl	800cc4c <HAL_TIM_Base_Stop_IT>
  
  return 0;
 8005d58:	4620      	mov	r0, r4
}
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8005d5c:	2001      	movs	r0, #1
}
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	20002a70 	.word	0x20002a70
 8005d64:	20002ac0 	.word	0x20002ac0

08005d68 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8005d68:	b510      	push	{r4, lr}
  /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005d6a:	2002      	movs	r0, #2
{
 8005d6c:	b094      	sub	sp, #80	@ 0x50
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005d6e:	f7ff fe41 	bl	80059f4 <BSP_ADC1_Initialization>
* @retval 0 in case of success
* @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005d72:	2234      	movs	r2, #52	@ 0x34
 8005d74:	2100      	movs	r1, #0
 8005d76:	a807      	add	r0, sp, #28
 8005d78:	f00f f99b 	bl	80150b2 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8005d7c:	4824      	ldr	r0, [pc, #144]	@ (8005e10 <BSP_BC_BatMS_Init+0xa8>)
 8005d7e:	f001 fd39 	bl	80077f4 <HAL_ADC_GetState>
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 8005d82:	05c4      	lsls	r4, r0, #23
 8005d84:	d436      	bmi.n	8005df4 <BSP_BC_BatMS_Init+0x8c>
 8005d86:	4c23      	ldr	r4, [pc, #140]	@ (8005e14 <BSP_BC_BatMS_Init+0xac>)
  }
  
  
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8005d88:	4923      	ldr	r1, [pc, #140]	@ (8005e18 <BSP_BC_BatMS_Init+0xb0>)
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	e9cd 1207 	strd	r1, r2, [sp, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8005d90:	2007      	movs	r0, #7
 8005d92:	227f      	movs	r2, #127	@ 0x7f
 8005d94:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8005d98:	2204      	movs	r2, #4
  sConfigInjected.InjectedOffset = 0;
 8005d9a:	2300      	movs	r3, #0
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8005d9c:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8005d9e:	2201      	movs	r2, #1
 8005da0:	e9cd 320c 	strd	r3, r2, [sp, #48]	@ 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8005da4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005da8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005dac:	4a1b      	ldr	r2, [pc, #108]	@ (8005e1c <BSP_BC_BatMS_Init+0xb4>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005dae:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  sConfigInjected.QueueInjectedContext = DISABLE;
 8005db2:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 8005db6:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dba:	9306      	str	r3, [sp, #24]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005dbc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005dbe:	4818      	ldr	r0, [pc, #96]	@ (8005e20 <BSP_BC_BatMS_Init+0xb8>)
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005dc0:	f043 0304 	orr.w	r3, r3, #4
 8005dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dc6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8005dce:	2210      	movs	r2, #16
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005dd0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8005dd2:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8005dd4:	230b      	movs	r3, #11
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005dd6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8005dd8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005dda:	f002 f9a5 	bl	8008128 <HAL_GPIO_Init>
  
  HAL_ADC_BC_MspInit();
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 8005dde:	480c      	ldr	r0, [pc, #48]	@ (8005e10 <BSP_BC_BatMS_Init+0xa8>)
 8005de0:	a907      	add	r1, sp, #28
 8005de2:	f001 feb1 	bl	8007b48 <HAL_ADCEx_InjectedConfigChannel>
  
  if (ADC_stopped == 1U)
 8005de6:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d00a      	beq.n	8005e04 <BSP_BC_BatMS_Init+0x9c>
}
 8005dee:	2000      	movs	r0, #0
 8005df0:	b014      	add	sp, #80	@ 0x50
 8005df2:	bd10      	pop	{r4, pc}
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8005df4:	4806      	ldr	r0, [pc, #24]	@ (8005e10 <BSP_BC_BatMS_Init+0xa8>)
    ADC_stopped=1;
 8005df6:	4c07      	ldr	r4, [pc, #28]	@ (8005e14 <BSP_BC_BatMS_Init+0xac>)
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8005df8:	f001 fe36 	bl	8007a68 <HAL_ADC_Stop>
    ADC_stopped=1;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f884 30b1 	strb.w	r3, [r4, #177]	@ 0xb1
 8005e02:	e7c1      	b.n	8005d88 <BSP_BC_BatMS_Init+0x20>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8005e04:	4802      	ldr	r0, [pc, #8]	@ (8005e10 <BSP_BC_BatMS_Init+0xa8>)
 8005e06:	f001 fdb5 	bl	8007974 <HAL_ADC_Start>
}
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	b014      	add	sp, #80	@ 0x50
 8005e0e:	bd10      	pop	{r4, pc}
 8005e10:	20002974 	.word	0x20002974
 8005e14:	20002a70 	.word	0x20002a70
 8005e18:	36902000 	.word	0x36902000
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	48000800 	.word	0x48000800

08005e24 <BC_CmdMng>:
{
 8005e24:	b510      	push	{r4, lr}
  TIMx_Pulse++;
 8005e26:	4c39      	ldr	r4, [pc, #228]	@ (8005f0c <BC_CmdMng+0xe8>)
 8005e28:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
  switch (stbc02_SwState)
 8005e2c:	f894 204d 	ldrb.w	r2, [r4, #77]	@ 0x4d
  TIMx_Pulse++;
 8005e30:	3301      	adds	r3, #1
 8005e32:	b29b      	uxth	r3, r3
  switch (stbc02_SwState)
 8005e34:	3a01      	subs	r2, #1
  TIMx_Pulse++;
 8005e36:	f8a4 30b2 	strh.w	r3, [r4, #178]	@ 0xb2
  switch (stbc02_SwState)
 8005e3a:	2a05      	cmp	r2, #5
 8005e3c:	d814      	bhi.n	8005e68 <BC_CmdMng+0x44>
 8005e3e:	e8df f002 	tbb	[pc, r2]
 8005e42:	0314      	.short	0x0314
 8005e44:	36250303 	.word	0x36250303
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005e48:	2140      	movs	r1, #64	@ 0x40
 8005e4a:	4831      	ldr	r0, [pc, #196]	@ (8005f10 <BC_CmdMng+0xec>)
 8005e4c:	f002 fb4a 	bl	80084e4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005e50:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005e54:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005e58:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005e5c:	3314      	adds	r3, #20
    stbc02_SwState = wait;
 8005e5e:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005e60:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
    stbc02_SwState = wait;
 8005e64:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
}
 8005e68:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005e6a:	2140      	movs	r1, #64	@ 0x40
 8005e6c:	4828      	ldr	r0, [pc, #160]	@ (8005f10 <BC_CmdMng+0xec>)
 8005e6e:	f002 fb39 	bl	80084e4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005e72:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005e76:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005e7a:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    stbc02_SwState = wait;
 8005e7e:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005e80:	3346      	adds	r3, #70	@ 0x46
    stbc02_SwState = wait;
 8005e82:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005e86:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
}
 8005e8a:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005e8c:	2140      	movs	r1, #64	@ 0x40
 8005e8e:	4820      	ldr	r0, [pc, #128]	@ (8005f10 <BC_CmdMng+0xec>)
 8005e90:	f002 fb28 	bl	80084e4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005e94:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005e98:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005e9c:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    stbc02_SwState = wait;
 8005ea0:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005ea2:	3364      	adds	r3, #100	@ 0x64
    stbc02_SwState = wait;
 8005ea4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005ea8:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
}
 8005eac:	bd10      	pop	{r4, pc}
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8005eae:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	@ 0xb4
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d2d8      	bcs.n	8005e68 <BC_CmdMng+0x44>
      if ( stbc02_sw_state_prv == stop_h )
 8005eb6:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d016      	beq.n	8005eec <BC_CmdMng+0xc8>
        if ( stbc02_sw_state_prv == pulse_h )
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d005      	beq.n	8005ece <BC_CmdMng+0xaa>
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1U);
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        __NOP();
 8005eca:	bf00      	nop
}
 8005ecc:	bd10      	pop	{r4, pc}
          CmdPulse++;
 8005ece:	f894 30b7 	ldrb.w	r3, [r4, #183]	@ 0xb7
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005ed2:	f894 204c 	ldrb.w	r2, [r4, #76]	@ 0x4c
          CmdPulse++;
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005eda:	429a      	cmp	r2, r3
          CmdPulse++;
 8005edc:	f884 30b7 	strb.w	r3, [r4, #183]	@ 0xb7
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005ee0:	d90f      	bls.n	8005f02 <BC_CmdMng+0xde>
            stbc02_sw_state_prv = start;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e7ec      	b.n	8005ec6 <BC_CmdMng+0xa2>
        CmdPulse = 0;
 8005eec:	2200      	movs	r2, #0
 8005eee:	f884 20b7 	strb.w	r2, [r4, #183]	@ 0xb7
        stbc02_SwState = idle;
 8005ef2:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
}
 8005ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005efa:	4805      	ldr	r0, [pc, #20]	@ (8005f10 <BC_CmdMng+0xec>)
 8005efc:	2140      	movs	r1, #64	@ 0x40
 8005efe:	f002 baeb 	b.w	80084d8 <HAL_GPIO_WritePin>
            __NOP();
 8005f02:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1U);
 8005f04:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8005f08:	e7db      	b.n	8005ec2 <BC_CmdMng+0x9e>
 8005f0a:	bf00      	nop
 8005f0c:	20002a70 	.word	0x20002a70
 8005f10:	48001400 	.word	0x48001400

08005f14 <BC_TIMx_Init>:
{
 8005f14:	b530      	push	{r4, r5, lr}
 8005f16:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005f1e:	9303      	str	r3, [sp, #12]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005f20:	f004 f96c 	bl	800a1fc <HAL_RCC_GetPCLK1Freq>
 8005f24:	4b23      	ldr	r3, [pc, #140]	@ (8005fb4 <BC_TIMx_Init+0xa0>)
  float prescaler = 0.0f;
 8005f26:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005fb8 <BC_TIMx_Init+0xa4>
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005f2a:	689b      	ldr	r3, [r3, #8]
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005f2c:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8005fbc <BC_TIMx_Init+0xa8>
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005f30:	055b      	lsls	r3, r3, #21
 8005f32:	bf48      	it	mi
 8005f34:	0040      	lslmi	r0, r0, #1
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005f36:	ee07 0a90 	vmov	s15, r0
 8005f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
    prescaler++;
 8005f3e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005f42:	ee37 7a06 	vadd.f32	s14, s14, s12
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    loop_counter = (uint32_t) period;
 8005f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f52:	ee17 3a90 	vmov	r3, s15
  } while (loop_counter > 65535U);
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f5a:	d2f2      	bcs.n	8005f42 <BC_TIMx_Init+0x2e>
    STBC02_USED_TIM_CLK_ENABLE();
 8005f5c:	4a15      	ldr	r2, [pc, #84]	@ (8005fb4 <BC_TIMx_Init+0xa0>)
  hstbc02_UsedTim.Instance = STBC02_USED_TIM; 
 8005f5e:	4c18      	ldr	r4, [pc, #96]	@ (8005fc0 <BC_TIMx_Init+0xac>)
    STBC02_USED_TIM_CLK_ENABLE();
 8005f60:	6d91      	ldr	r1, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Period = (uint32_t)period;
 8005f62:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
    STBC02_USED_TIM_CLK_ENABLE();
 8005f66:	f041 0120 	orr.w	r1, r1, #32
 8005f6a:	6591      	str	r1, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005f6c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    STBC02_USED_TIM_CLK_ENABLE();
 8005f70:	6d92      	ldr	r2, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005f72:	ee17 3a10 	vmov	r3, s14
    STBC02_USED_TIM_CLK_ENABLE();
 8005f76:	f002 0220 	and.w	r2, r2, #32
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP; 
 8005f7a:	2500      	movs	r5, #0
    STBC02_USED_TIM_CLK_ENABLE();
 8005f7c:	9200      	str	r2, [sp, #0]
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005f7e:	3b01      	subs	r3, #1
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005f80:	462a      	mov	r2, r5
 8005f82:	2103      	movs	r1, #3
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005f84:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005f86:	2037      	movs	r0, #55	@ 0x37
    STBC02_USED_TIM_CLK_ENABLE();
 8005f88:	9b00      	ldr	r3, [sp, #0]
  hstbc02_UsedTim.Instance = STBC02_USED_TIM; 
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc4 <BC_TIMx_Init+0xb0>)
 8005f8c:	6523      	str	r3, [r4, #80]	@ 0x50
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP; 
 8005f8e:	65a5      	str	r5, [r4, #88]	@ 0x58
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005f90:	f002 f85a 	bl	8008048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8005f94:	2037      	movs	r0, #55	@ 0x37
 8005f96:	f002 f893 	bl	80080c0 <HAL_NVIC_EnableIRQ>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 8005f9a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f9e:	f006 fd89 	bl	800cab4 <HAL_TIM_Base_Init>
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005fa2:	a901      	add	r1, sp, #4
 8005fa4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fa8:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005faa:	9503      	str	r5, [sp, #12]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005fac:	f006 ff26 	bl	800cdfc <HAL_TIMEx_MasterConfigSynchronization>
}
 8005fb0:	b005      	add	sp, #20
 8005fb2:	bd30      	pop	{r4, r5, pc}
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	00000000 	.word	0x00000000
 8005fbc:	36a7c5ac 	.word	0x36a7c5ac
 8005fc0:	20002a70 	.word	0x20002a70
 8005fc4:	40001400 	.word	0x40001400

08005fc8 <BSP_BC_Init>:
{
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	b088      	sub	sp, #32
  BC_TIMx_Init();
 8005fcc:	f7ff ffa2 	bl	8005f14 <BC_TIMx_Init>
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800600c <BSP_BC_Init+0x44>)
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005fd2:	4c0f      	ldr	r4, [pc, #60]	@ (8006010 <BSP_BC_Init+0x48>)
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005fd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fd6:	f042 0220 	orr.w	r2, r2, #32
 8005fda:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 8005fe4:	2240      	movs	r2, #64	@ 0x40
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2140      	movs	r1, #64	@ 0x40
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005ffa:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005ffc:	f002 fa6c 	bl	80084d8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 8006000:	a902      	add	r1, sp, #8
 8006002:	4620      	mov	r0, r4
 8006004:	f002 f890 	bl	8008128 <HAL_GPIO_Init>
}
 8006008:	b008      	add	sp, #32
 800600a:	bd10      	pop	{r4, pc}
 800600c:	40021000 	.word	0x40021000
 8006010:	48001400 	.word	0x48001400

08006014 <EXTI15_10_IRQHandler>:
}


void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006014:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006018:	f002 ba6e 	b.w	80084f8 <HAL_GPIO_EXTI_IRQHandler>

0800601c <TIM7_IRQHandler>:
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 800601c:	4801      	ldr	r0, [pc, #4]	@ (8006024 <TIM7_IRQHandler+0x8>)
 800601e:	f006 be35 	b.w	800cc8c <HAL_TIM_IRQHandler>
 8006022:	bf00      	nop
 8006024:	20002ac0 	.word	0x20002ac0

08006028 <TIM3_IRQHandler>:
* @param  None
* @retval None
*/
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimBCHandle);
 8006028:	4801      	ldr	r0, [pc, #4]	@ (8006030 <TIM3_IRQHandler+0x8>)
 800602a:	f006 be2f 	b.w	800cc8c <HAL_TIM_IRQHandler>
 800602e:	bf00      	nop
 8006030:	20002a70 	.word	0x20002a70

08006034 <BSP_I2C2_DeInit>:
static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
  UNUSED(i2cHandle);
  
  /* Peripheral clock disable */
  __HAL_RCC_I2C2_CLK_DISABLE();
 8006034:	4a09      	ldr	r2, [pc, #36]	@ (800605c <BSP_I2C2_DeInit+0x28>)
  
  /**I2C2 GPIO Configuration    
  PF1     ------> I2C2_SCL
  PF0     ------> I2C2_SDA 
  */
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8006036:	480a      	ldr	r0, [pc, #40]	@ (8006060 <BSP_I2C2_DeInit+0x2c>)
{
 8006038:	b508      	push	{r3, lr}
  __HAL_RCC_I2C2_CLK_DISABLE();
 800603a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800603c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8006040:	2103      	movs	r1, #3
  __HAL_RCC_I2C2_CLK_DISABLE();
 8006042:	6593      	str	r3, [r2, #88]	@ 0x58
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8006044:	f002 f994 	bl	8008370 <HAL_GPIO_DeInit>
  if (HAL_I2C_DeInit(&hi2c2) == HAL_OK)
 8006048:	4806      	ldr	r0, [pc, #24]	@ (8006064 <BSP_I2C2_DeInit+0x30>)
 800604a:	f002 fb79 	bl	8008740 <HAL_I2C_DeInit>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800604e:	2800      	cmp	r0, #0
}
 8006050:	bf14      	ite	ne
 8006052:	f06f 0007 	mvnne.w	r0, #7
 8006056:	2000      	moveq	r0, #0
 8006058:	bd08      	pop	{r3, pc}
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	48001400 	.word	0x48001400
 8006064:	20002b74 	.word	0x20002b74

08006068 <BSP_I2C2_WriteReg>:
{
 8006068:	b500      	push	{lr}
 800606a:	b085      	sub	sp, #20
 800606c:	4684      	mov	ip, r0
  if(HAL_I2C_Mem_Write(&hi2c2, (uint8_t)DevAddr,
 800606e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006072:	e9cd 2300 	strd	r2, r3, [sp]
 8006076:	9002      	str	r0, [sp, #8]
 8006078:	460a      	mov	r2, r1
 800607a:	2301      	movs	r3, #1
 800607c:	fa5f f18c 	uxtb.w	r1, ip
 8006080:	4805      	ldr	r0, [pc, #20]	@ (8006098 <BSP_I2C2_WriteReg+0x30>)
 8006082:	f002 fb77 	bl	8008774 <HAL_I2C_Mem_Write>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8006086:	2800      	cmp	r0, #0
}
 8006088:	bf14      	ite	ne
 800608a:	f06f 0007 	mvnne.w	r0, #7
 800608e:	2000      	moveq	r0, #0
 8006090:	b005      	add	sp, #20
 8006092:	f85d fb04 	ldr.w	pc, [sp], #4
 8006096:	bf00      	nop
 8006098:	20002b74 	.word	0x20002b74

0800609c <BSP_I2C2_ReadReg>:
{
 800609c:	b500      	push	{lr}
 800609e:	b085      	sub	sp, #20
 80060a0:	4684      	mov	ip, r0
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, (uint16_t)Reg,
 80060a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060a6:	e9cd 2300 	strd	r2, r3, [sp]
 80060aa:	9002      	str	r0, [sp, #8]
 80060ac:	460a      	mov	r2, r1
 80060ae:	2301      	movs	r3, #1
 80060b0:	4661      	mov	r1, ip
 80060b2:	4805      	ldr	r0, [pc, #20]	@ (80060c8 <BSP_I2C2_ReadReg+0x2c>)
 80060b4:	f002 fc86 	bl	80089c4 <HAL_I2C_Mem_Read>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80060b8:	2800      	cmp	r0, #0
}
 80060ba:	bf14      	ite	ne
 80060bc:	f06f 0007 	mvnne.w	r0, #7
 80060c0:	2000      	moveq	r0, #0
 80060c2:	b005      	add	sp, #20
 80060c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80060c8:	20002b74 	.word	0x20002b74

080060cc <BSP_SPI3_DeInit>:
  __HAL_RCC_SPI3_CLK_DISABLE();
 80060cc:	4a09      	ldr	r2, [pc, #36]	@ (80060f4 <BSP_SPI3_DeInit+0x28>)
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 80060ce:	480a      	ldr	r0, [pc, #40]	@ (80060f8 <BSP_SPI3_DeInit+0x2c>)
{
 80060d0:	b508      	push	{r3, lr}
  __HAL_RCC_SPI3_CLK_DISABLE();
 80060d2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80060d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 80060d8:	2128      	movs	r1, #40	@ 0x28
  __HAL_RCC_SPI3_CLK_DISABLE();
 80060da:	6593      	str	r3, [r2, #88]	@ 0x58
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 80060dc:	f002 f948 	bl	8008370 <HAL_GPIO_DeInit>
  if (HAL_SPI_DeInit(&hbusspi3) == HAL_OK) 
 80060e0:	4806      	ldr	r0, [pc, #24]	@ (80060fc <BSP_SPI3_DeInit+0x30>)
 80060e2:	f006 f89d 	bl	800c220 <HAL_SPI_DeInit>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80060e6:	2800      	cmp	r0, #0
}
 80060e8:	bf14      	ite	ne
 80060ea:	f06f 0007 	mvnne.w	r0, #7
 80060ee:	2000      	moveq	r0, #0
 80060f0:	bd08      	pop	{r3, pc}
 80060f2:	bf00      	nop
 80060f4:	40021000 	.word	0x40021000
 80060f8:	48000400 	.word	0x48000400
 80060fc:	20002d20 	.word	0x20002d20

08006100 <BSP_SPI3_Send>:
{
 8006100:	b510      	push	{r4, lr}
 8006102:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8006104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8006108:	4601      	mov	r1, r0
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 800610a:	4622      	mov	r2, r4
 800610c:	4804      	ldr	r0, [pc, #16]	@ (8006120 <BSP_SPI3_Send+0x20>)
 800610e:	f006 f89d 	bl	800c24c <HAL_SPI_Transmit>
      ret = (int32_t)len;
 8006112:	2800      	cmp	r0, #0
}
 8006114:	bf0c      	ite	eq
 8006116:	4620      	moveq	r0, r4
 8006118:	f06f 0005 	mvnne.w	r0, #5
 800611c:	bd10      	pop	{r4, pc}
 800611e:	bf00      	nop
 8006120:	20002d20 	.word	0x20002d20

08006124 <BSP_SPI3_Recv>:
{
 8006124:	b510      	push	{r4, lr}
 8006126:	460c      	mov	r4, r1
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8006128:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 800612c:	4601      	mov	r1, r0
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 800612e:	4622      	mov	r2, r4
 8006130:	4804      	ldr	r0, [pc, #16]	@ (8006144 <BSP_SPI3_Recv+0x20>)
 8006132:	f006 fb31 	bl	800c798 <HAL_SPI_Receive>
      ret = (int32_t)len;
 8006136:	2800      	cmp	r0, #0
}
 8006138:	bf0c      	ite	eq
 800613a:	4620      	moveq	r0, r4
 800613c:	f06f 0005 	mvnne.w	r0, #5
 8006140:	bd10      	pop	{r4, pc}
 8006142:	bf00      	nop
 8006144:	20002d20 	.word	0x20002d20

08006148 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8006148:	f001 ba62 	b.w	8007610 <HAL_GetTick>

0800614c <MX_SPI3_Init>:
  hspi->Init.Mode = SPI_MODE_MASTER;
 800614c:	4913      	ldr	r1, [pc, #76]	@ (800619c <MX_SPI3_Init+0x50>)
 800614e:	f44f 7282 	mov.w	r2, #260	@ 0x104
{
 8006152:	b510      	push	{r4, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006154:	2300      	movs	r3, #0
 8006156:	e9c0 1200 	strd	r1, r2, [r0]
 800615a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800615e:	2202      	movs	r2, #2
 8006160:	e9c0 3102 	strd	r3, r1, [r0, #8]
 8006164:	6102      	str	r2, [r0, #16]
 8006166:	2101      	movs	r1, #1
 8006168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800616c:	e9c0 1205 	strd	r1, r2, [r0, #20]
 8006170:	2207      	movs	r2, #7
{
 8006172:	4604      	mov	r4, r0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006174:	2118      	movs	r1, #24
 8006176:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006178:	2208      	movs	r2, #8
  hspi->Init.Mode = SPI_MODE_MASTER;
 800617a:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800617e:	e9c0 320c 	strd	r3, r2, [r0, #48]	@ 0x30
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006182:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006186:	f005 ffcd 	bl	800c124 <HAL_SPI_Init>
  __HAL_SPI_ENABLE(hspi);
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	6813      	ldr	r3, [r2, #0]
}
 800618e:	3800      	subs	r0, #0
  __HAL_SPI_ENABLE(hspi);
 8006190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
}
 8006194:	bf18      	it	ne
 8006196:	2001      	movne	r0, #1
  __HAL_SPI_ENABLE(hspi);
 8006198:	6013      	str	r3, [r2, #0]
}
 800619a:	bd10      	pop	{r4, pc}
 800619c:	40003c00 	.word	0x40003c00

080061a0 <BSP_SPI3_Init>:
{
 80061a0:	b510      	push	{r4, lr}
  hbusspi3.Instance  = SPI3;
 80061a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006210 <BSP_SPI3_Init+0x70>)
 80061a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006214 <BSP_SPI3_Init+0x74>)
 80061a6:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 80061aa:	f503 74fc 	add.w	r4, r3, #504	@ 0x1f8
{
 80061ae:	b088      	sub	sp, #32
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 80061b0:	4620      	mov	r0, r4
 80061b2:	f006 fc79 	bl	800caa8 <HAL_SPI_GetState>
 80061b6:	b110      	cbz	r0, 80061be <BSP_SPI3_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 80061b8:	2000      	movs	r0, #0
}
 80061ba:	b008      	add	sp, #32
 80061bc:	bd10      	pop	{r4, pc}
  __HAL_RCC_SPI3_CLK_ENABLE();
 80061be:	4b16      	ldr	r3, [pc, #88]	@ (8006218 <BSP_SPI3_Init+0x78>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061c0:	4816      	ldr	r0, [pc, #88]	@ (800621c <BSP_SPI3_Init+0x7c>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 80061c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80061c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80061ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80061cc:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80061d0:	9200      	str	r2, [sp, #0]
 80061d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061d6:	f042 0202 	orr.w	r2, r2, #2
 80061da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80061dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80061e4:	2238      	movs	r2, #56	@ 0x38
 80061e6:	2302      	movs	r3, #2
 80061e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2303      	movs	r3, #3
 80061f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061f4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80061f6:	2306      	movs	r3, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f8:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80061fa:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061fc:	f001 ff94 	bl	8008128 <HAL_GPIO_Init>
    if (MX_SPI3_Init(&hbusspi3) != HAL_OK)
 8006200:	4620      	mov	r0, r4
 8006202:	f7ff ffa3 	bl	800614c <MX_SPI3_Init>
 8006206:	2800      	cmp	r0, #0
 8006208:	d0d6      	beq.n	80061b8 <BSP_SPI3_Init+0x18>
      ret = BSP_ERROR_BUS_FAILURE;
 800620a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800620e:	e7d4      	b.n	80061ba <BSP_SPI3_Init+0x1a>
 8006210:	20002b28 	.word	0x20002b28
 8006214:	40003c00 	.word	0x40003c00
 8006218:	40021000 	.word	0x40021000
 800621c:	48000400 	.word	0x48000400

08006220 <MX_I2C2_Init>:
  hi2c->Init.Timing = 0x00B03FDB;
 8006220:	4a11      	ldr	r2, [pc, #68]	@ (8006268 <MX_I2C2_Init+0x48>)
 8006222:	4b12      	ldr	r3, [pc, #72]	@ (800626c <MX_I2C2_Init+0x4c>)
{
 8006224:	b570      	push	{r4, r5, r6, lr}
  hi2c->Init.Timing = 0x00B03FDB;
 8006226:	2600      	movs	r6, #0
 8006228:	e9c0 2300 	strd	r2, r3, [r0]
 800622c:	2301      	movs	r3, #1
 800622e:	e9c0 6302 	strd	r6, r3, [r0, #8]
 8006232:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8006236:	e9c0 6606 	strd	r6, r6, [r0, #24]
 800623a:	6206      	str	r6, [r0, #32]
{
 800623c:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800623e:	f002 fa29 	bl	8008694 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006242:	4631      	mov	r1, r6
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8006244:	4605      	mov	r5, r0
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006246:	4620      	mov	r0, r4
 8006248:	f002 fcec 	bl	8008c24 <HAL_I2CEx_ConfigAnalogFilter>
 800624c:	4305      	orrs	r5, r0
 800624e:	b2ed      	uxtb	r5, r5
 8006250:	1bad      	subs	r5, r5, r6
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8006252:	4631      	mov	r1, r6
 8006254:	4620      	mov	r0, r4
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006256:	bf18      	it	ne
 8006258:	2501      	movne	r5, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800625a:	f002 fd0d 	bl	8008c78 <HAL_I2CEx_ConfigDigitalFilter>
    ret = HAL_ERROR;
 800625e:	42b0      	cmp	r0, r6
}
 8006260:	bf0c      	ite	eq
 8006262:	4628      	moveq	r0, r5
 8006264:	2001      	movne	r0, #1
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	40005800 	.word	0x40005800
 800626c:	00b03fdb 	.word	0x00b03fdb

08006270 <BSP_I2C2_Init>:
{
 8006270:	b570      	push	{r4, r5, r6, lr}
  hi2c2.Instance  = I2C2;
 8006272:	4d2c      	ldr	r5, [pc, #176]	@ (8006324 <BSP_I2C2_Init+0xb4>)
 8006274:	4b2c      	ldr	r3, [pc, #176]	@ (8006328 <BSP_I2C2_Init+0xb8>)
 8006276:	f845 3f4c 	str.w	r3, [r5, #76]!
{
 800627a:	b0ae      	sub	sp, #184	@ 0xb8
  if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 800627c:	4628      	mov	r0, r5
 800627e:	f002 fccd 	bl	8008c1c <HAL_I2C_GetState>
 8006282:	b110      	cbz	r0, 800628a <BSP_I2C2_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006284:	2000      	movs	r0, #0
}
 8006286:	b02e      	add	sp, #184	@ 0xb8
 8006288:	bd70      	pop	{r4, r5, r6, pc}
  __GPIOF_CLK_ENABLE();
 800628a:	4e28      	ldr	r6, [pc, #160]	@ (800632c <BSP_I2C2_Init+0xbc>)
 800628c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800628e:	2380      	movs	r3, #128	@ 0x80
  (void)HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8006290:	a807      	add	r0, sp, #28
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006292:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006294:	941d      	str	r4, [sp, #116]	@ 0x74
  (void)HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8006296:	f004 f987 	bl	800a5a8 <HAL_RCCEx_PeriphCLKConfig>
  __GPIOF_CLK_ENABLE();
 800629a:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800629c:	4824      	ldr	r0, [pc, #144]	@ (8006330 <BSP_I2C2_Init+0xc0>)
  __GPIOF_CLK_ENABLE();
 800629e:	f043 0320 	orr.w	r3, r3, #32
 80062a2:	64f3      	str	r3, [r6, #76]	@ 0x4c
 80062a4:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80062ac:	2203      	movs	r2, #3
 80062ae:	2312      	movs	r3, #18
 80062b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062b4:	2201      	movs	r2, #1
 80062b6:	2302      	movs	r3, #2
 80062b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80062bc:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80062be:	2304      	movs	r3, #4
 80062c0:	9306      	str	r3, [sp, #24]
  __GPIOF_CLK_ENABLE();
 80062c2:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80062c4:	f001 ff30 	bl	8008128 <HAL_GPIO_Init>
  __HAL_RCC_I2C2_CLK_ENABLE();  
 80062c8:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80062ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80062ce:	65b3      	str	r3, [r6, #88]	@ 0x58
 80062d0:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	9b01      	ldr	r3, [sp, #4]
  __I2C2_FORCE_RESET();
 80062da:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80062dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80062e0:	63b3      	str	r3, [r6, #56]	@ 0x38
  __I2C2_RELEASE_RESET();
 80062e2:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80062e4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80062e8:	63b3      	str	r3, [r6, #56]	@ 0x38
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80062ea:	4622      	mov	r2, r4
 80062ec:	4621      	mov	r1, r4
 80062ee:	2021      	movs	r0, #33	@ 0x21
 80062f0:	f001 feaa 	bl	8008048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80062f4:	2021      	movs	r0, #33	@ 0x21
 80062f6:	f001 fee3 	bl	80080c0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80062fa:	4621      	mov	r1, r4
 80062fc:	4622      	mov	r2, r4
 80062fe:	2022      	movs	r0, #34	@ 0x22
 8006300:	f001 fea2 	bl	8008048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006304:	2022      	movs	r0, #34	@ 0x22
 8006306:	f001 fedb 	bl	80080c0 <HAL_NVIC_EnableIRQ>
    if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 800630a:	4628      	mov	r0, r5
 800630c:	f7ff ff88 	bl	8006220 <MX_I2C2_Init>
 8006310:	4601      	mov	r1, r0
 8006312:	b920      	cbnz	r0, 800631e <BSP_I2C2_Init+0xae>
    else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8006314:	4628      	mov	r0, r5
 8006316:	f002 fc85 	bl	8008c24 <HAL_I2CEx_ConfigAnalogFilter>
 800631a:	2800      	cmp	r0, #0
 800631c:	d0b2      	beq.n	8006284 <BSP_I2C2_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 800631e:	f06f 0007 	mvn.w	r0, #7
 8006322:	e7b0      	b.n	8006286 <BSP_I2C2_Init+0x16>
 8006324:	20002b28 	.word	0x20002b28
 8006328:	40005800 	.word	0x40005800
 800632c:	40021000 	.word	0x40021000
 8006330:	48001400 	.word	0x48001400

08006334 <BSP_HTS221_WriteReg>:
}

#if (USE_ENV_SENSOR_HTS221_0 == 1)

int32_t BSP_HTS221_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006334:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  
  if (BSP_I2C2_WriteReg(Addr, dataReg, pdata, len) != BSP_ERROR_NONE)
 8006336:	f7ff fe97 	bl	8006068 <BSP_I2C2_WriteReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800633a:	2800      	cmp	r0, #0
  }
  
  
  return ret;
}
 800633c:	bf18      	it	ne
 800633e:	f06f 0007 	mvnne.w	r0, #7
 8006342:	bd08      	pop	{r3, pc}

08006344 <BSP_HTS221_ReadReg>:


int32_t BSP_HTS221_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006344:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  dataReg |= 0x80U;
  
  if (BSP_I2C2_ReadReg(Addr, dataReg, pdata, len) !=BSP_ERROR_NONE)
 8006346:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800634a:	f7ff fea7 	bl	800609c <BSP_I2C2_ReadReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800634e:	2800      	cmp	r0, #0
  }
  
  
  return ret;
}
 8006350:	bf18      	it	ne
 8006352:	f06f 0007 	mvnne.w	r0, #7
 8006356:	bd08      	pop	{r3, pc}

08006358 <BSP_ENV_SENSOR_Init>:
{
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch (Instance)
 800635c:	2801      	cmp	r0, #1
{
 800635e:	b08c      	sub	sp, #48	@ 0x30
 8006360:	4604      	mov	r4, r0
 8006362:	460d      	mov	r5, r1
  switch (Instance)
 8006364:	d009      	beq.n	800637a <BSP_ENV_SENSOR_Init+0x22>
 8006366:	2802      	cmp	r0, #2
 8006368:	f000 80dd 	beq.w	8006526 <BSP_ENV_SENSOR_Init+0x1ce>
 800636c:	2800      	cmp	r0, #0
 800636e:	d07b      	beq.n	8006468 <BSP_ENV_SENSOR_Init+0x110>
 8006370:	f06f 0001 	mvn.w	r0, #1
}
 8006374:	b00c      	add	sp, #48	@ 0x30
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LPS22HH_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
  io_ctx.Init        = BSP_I2C2_Init;
 800637a:	4bbe      	ldr	r3, [pc, #760]	@ (8006674 <BSP_ENV_SENSOR_Init+0x31c>)
 800637c:	9305      	str	r3, [sp, #20]
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800637e:	2300      	movs	r3, #0
 8006380:	9307      	str	r3, [sp, #28]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006382:	4bbd      	ldr	r3, [pc, #756]	@ (8006678 <BSP_ENV_SENSOR_Init+0x320>)
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8006384:	4fbd      	ldr	r7, [pc, #756]	@ (800667c <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006386:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 8006388:	4bbd      	ldr	r3, [pc, #756]	@ (8006680 <BSP_ENV_SENSOR_Init+0x328>)
 800638a:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 800638c:	4bbd      	ldr	r3, [pc, #756]	@ (8006684 <BSP_ENV_SENSOR_Init+0x32c>)
 800638e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8006390:	ae05      	add	r6, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 8006392:	4bbd      	ldr	r3, [pc, #756]	@ (8006688 <BSP_ENV_SENSOR_Init+0x330>)
 8006394:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8006396:	f107 0a2c 	add.w	sl, r7, #44	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800639a:	23bb      	movs	r3, #187	@ 0xbb
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800639c:	4631      	mov	r1, r6
 800639e:	4650      	mov	r0, sl
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80063a0:	f88d 3020 	strb.w	r3, [sp, #32]
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80063a4:	f7fe fe00 	bl	8004fa8 <LPS22HH_RegisterBusIO>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f040 81c6 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80063ae:	f10d 0103 	add.w	r1, sp, #3
 80063b2:	4650      	mov	r0, sl
 80063b4:	f7fe fbca 	bl	8004b4c <LPS22HH_ReadID>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f040 81be 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HH_ID)
 80063be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063c2:	2bb3      	cmp	r3, #179	@ 0xb3
 80063c4:	f040 81b9 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 80063c8:	a901      	add	r1, sp, #4
 80063ca:	4650      	mov	r0, sl
 80063cc:	f7fe fb4a 	bl	8004a64 <LPS22HH_GetCapabilities>
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
                                   uint32_t)cap.Humidity << 2);
 80063d0:	f89d 0006 	ldrb.w	r0, [sp, #6]
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80063d4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80063d8:	f89d 2004 	ldrb.w	r2, [sp, #4]

    EnvCompObj[LPS22HH_0] = &lps22hh_obj_0;
 80063dc:	f8c7 a098 	str.w	sl, [r7, #152]	@ 0x98
                                   uint32_t)cap.Humidity << 2);
 80063e0:	0083      	lsls	r3, r0, #2
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80063e2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80063ec:	f005 0804 	and.w	r8, r5, #4
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80063f0:	4ba6      	ldr	r3, [pc, #664]	@ (800668c <BSP_ENV_SENSOR_Init+0x334>)
 80063f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80063f6:	f005 0902 	and.w	r9, r5, #2

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80063fa:	f015 0501 	ands.w	r5, r5, #1
 80063fe:	f040 80fe 	bne.w	80065fe <BSP_ENV_SENSOR_Init+0x2a6>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8006402:	f1b9 0f00 	cmp.w	r9, #0
 8006406:	f040 81a8 	bne.w	800675a <BSP_ENV_SENSOR_Init+0x402>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 800640a:	f1b8 0f00 	cmp.w	r8, #0
 800640e:	f040 81b1 	bne.w	8006774 <BSP_ENV_SENSOR_Init+0x41c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
 8006412:	489f      	ldr	r0, [pc, #636]	@ (8006690 <BSP_ENV_SENSOR_Init+0x338>)
 8006414:	4b9d      	ldr	r3, [pc, #628]	@ (800668c <BSP_ENV_SENSOR_Init+0x334>)
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4631      	mov	r1, r6
 800641a:	4798      	blx	r3
 800641c:	2800      	cmp	r0, #0
 800641e:	f040 81f0 	bne.w	8006802 <BSP_ENV_SENSOR_Init+0x4aa>
      if (cap.Temperature == 1U)
 8006422:	f89d 6014 	ldrb.w	r6, [sp, #20]
      if (cap.Humidity == 1U)
 8006426:	f89d 3016 	ldrb.w	r3, [sp, #22]
      if (cap.Temperature == 1U)
 800642a:	f1a6 0601 	sub.w	r6, r6, #1
      if (cap.Humidity == 1U)
 800642e:	2b01      	cmp	r3, #1
      if (cap.Temperature == 1U)
 8006430:	fab6 f686 	clz	r6, r6
      if (cap.Pressure == 1U)
 8006434:	f89d 3015 	ldrb.w	r3, [sp, #21]
      if (cap.Temperature == 1U)
 8006438:	ea4f 1656 	mov.w	r6, r6, lsr #5
        component_functions |= ENV_HUMIDITY;
 800643c:	bf08      	it	eq
 800643e:	f046 0604 	orreq.w	r6, r6, #4
      if (cap.Pressure == 1U)
 8006442:	2b01      	cmp	r3, #1
        component_functions |= ENV_PRESSURE;
 8006444:	bf08      	it	eq
 8006446:	f046 0602 	orreq.w	r6, r6, #2
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800644a:	2d00      	cmp	r5, #0
 800644c:	f040 8134 	bne.w	80066b8 <BSP_ENV_SENSOR_Init+0x360>
 8006450:	f1b9 0f00 	cmp.w	r9, #0
 8006454:	f040 8145 	bne.w	80066e2 <BSP_ENV_SENSOR_Init+0x38a>
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	f040 8156 	bne.w	800670c <BSP_ENV_SENSOR_Init+0x3b4>
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8006460:	2000      	movs	r0, #0
}
 8006462:	b00c      	add	sp, #48	@ 0x30
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  io_ctx.Init        = BSP_I2C2_Init;
 8006468:	4b82      	ldr	r3, [pc, #520]	@ (8006674 <BSP_ENV_SENSOR_Init+0x31c>)
 800646a:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800646c:	4b82      	ldr	r3, [pc, #520]	@ (8006678 <BSP_ENV_SENSOR_Init+0x320>)
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800646e:	4f83      	ldr	r7, [pc, #524]	@ (800667c <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006470:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_HTS221_ReadReg;
 8006472:	4b88      	ldr	r3, [pc, #544]	@ (8006694 <BSP_ENV_SENSOR_Init+0x33c>)
 8006474:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006476:	ae05      	add	r6, sp, #20
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
 8006478:	4b87      	ldr	r3, [pc, #540]	@ (8006698 <BSP_ENV_SENSOR_Init+0x340>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800647a:	9007      	str	r0, [sp, #28]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800647c:	22bf      	movs	r2, #191	@ 0xbf
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
 800647e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006480:	4631      	mov	r1, r6
  io_ctx.GetTick     = BSP_GetTick;
 8006482:	4b81      	ldr	r3, [pc, #516]	@ (8006688 <BSP_ENV_SENSOR_Init+0x330>)
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8006484:	f88d 2020 	strb.w	r2, [sp, #32]
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006488:	4638      	mov	r0, r7
  io_ctx.GetTick     = BSP_GetTick;
 800648a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800648c:	f7fb fe58 	bl	8002140 <HTS221_RegisterBusIO>
 8006490:	2800      	cmp	r0, #0
 8006492:	f040 8152 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8006496:	f10d 0103 	add.w	r1, sp, #3
 800649a:	4638      	mov	r0, r7
 800649c:	f7fb fcfc 	bl	8001e98 <HTS221_ReadID>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f040 814a 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  else if (id != HTS221_ID)
 80064a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80064aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80064ac:	f040 8145 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80064b0:	a901      	add	r1, sp, #4
 80064b2:	4638      	mov	r0, r7
 80064b4:	f7fb fc46 	bl	8001d44 <HTS221_GetCapabilities>
                                   uint32_t)cap.Humidity << 2);
 80064b8:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80064bc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80064c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    EnvCompObj[HTS221_0] = &hts221_obj_0;
 80064c4:	f8c7 7094 	str.w	r7, [r7, #148]	@ 0x94
                                   uint32_t)cap.Humidity << 2);
 80064c8:	008b      	lsls	r3, r1, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80064ca:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80064d4:	f005 0804 	and.w	r8, r5, #4
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80064d8:	4b70      	ldr	r3, [pc, #448]	@ (800669c <BSP_ENV_SENSOR_Init+0x344>)
 80064da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80064de:	f005 0902 	and.w	r9, r5, #2
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80064e2:	f015 0501 	ands.w	r5, r5, #1
 80064e6:	f000 80b4 	beq.w	8006652 <BSP_ENV_SENSOR_Init+0x2fa>
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	f000 8148 	beq.w	8006780 <BSP_ENV_SENSOR_Init+0x428>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80064f0:	f1b8 0f00 	cmp.w	r8, #0
 80064f4:	f000 811d 	beq.w	8006732 <BSP_ENV_SENSOR_Init+0x3da>
 80064f8:	2901      	cmp	r1, #1
 80064fa:	f040 80b0 	bne.w	800665e <BSP_ENV_SENSOR_Init+0x306>
 80064fe:	485f      	ldr	r0, [pc, #380]	@ (800667c <BSP_ENV_SENSOR_Init+0x324>)
 8006500:	4b66      	ldr	r3, [pc, #408]	@ (800669c <BSP_ENV_SENSOR_Init+0x344>)
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8006502:	4a67      	ldr	r2, [pc, #412]	@ (80066a0 <BSP_ENV_SENSOR_Init+0x348>)
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8006504:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8006506:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 800650a:	4798      	blx	r3
 800650c:	2800      	cmp	r0, #0
 800650e:	f040 8114 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006512:	f1b9 0f00 	cmp.w	r9, #0
 8006516:	f000 80a7 	beq.w	8006668 <BSP_ENV_SENSOR_Init+0x310>
 800651a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f040 80a2 	bne.w	8006668 <BSP_ENV_SENSOR_Init+0x310>
 8006524:	e109      	b.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
  io_ctx.Init        = BSP_I2C2_Init;
 8006526:	4b53      	ldr	r3, [pc, #332]	@ (8006674 <BSP_ENV_SENSOR_Init+0x31c>)
 8006528:	9305      	str	r3, [sp, #20]
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800652a:	2300      	movs	r3, #0
 800652c:	9307      	str	r3, [sp, #28]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800652e:	4b52      	ldr	r3, [pc, #328]	@ (8006678 <BSP_ENV_SENSOR_Init+0x320>)
  io_ctx.ReadReg     = BSP_I2C2_ReadReg; 
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006530:	4f52      	ldr	r7, [pc, #328]	@ (800667c <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006532:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg; 
 8006534:	4b52      	ldr	r3, [pc, #328]	@ (8006680 <BSP_ENV_SENSOR_Init+0x328>)
 8006536:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8006538:	4b52      	ldr	r3, [pc, #328]	@ (8006684 <BSP_ENV_SENSOR_Init+0x32c>)
 800653a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800653c:	ae05      	add	r6, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 800653e:	4b52      	ldr	r3, [pc, #328]	@ (8006688 <BSP_ENV_SENSOR_Init+0x330>)
 8006540:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006542:	f107 0a58 	add.w	sl, r7, #88	@ 0x58
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
 8006546:	2391      	movs	r3, #145	@ 0x91
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006548:	4631      	mov	r1, r6
 800654a:	4650      	mov	r0, sl
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
 800654c:	f88d 3020 	strb.w	r3, [sp, #32]
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006550:	f7ff f928 	bl	80057a4 <STTS751_RegisterBusIO>
 8006554:	2800      	cmp	r0, #0
 8006556:	f040 80f0 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800655a:	f10d 0103 	add.w	r1, sp, #3
 800655e:	4650      	mov	r0, sl
 8006560:	f7fe ff0c 	bl	800537c <STTS751_ReadID>
 8006564:	2800      	cmp	r0, #0
 8006566:	f040 80e8 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != STTS751_ID_MAN)
 800656a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800656e:	2b53      	cmp	r3, #83	@ 0x53
 8006570:	f040 80e3 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8006574:	a901      	add	r1, sp, #4
 8006576:	4650      	mov	r0, sl
 8006578:	f7fe fe98 	bl	80052ac <STTS751_GetCapabilities>

    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
                                            uint32_t)cap.Humidity << 2);
 800657c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006580:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8006584:	f89d 2004 	ldrb.w	r2, [sp, #4]

    EnvCompObj[STTS751_0] = &stts751_obj_0;
 8006588:	f8c7 a09c 	str.w	sl, [r7, #156]	@ 0x9c
                                            uint32_t)cap.Humidity << 2);
 800658c:	008b      	lsls	r3, r1, #2
    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800658e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006598:	f005 0804 	and.w	r8, r5, #4
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800659c:	4b41      	ldr	r3, [pc, #260]	@ (80066a4 <BSP_ENV_SENSOR_Init+0x34c>)
 800659e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80065a2:	f005 0902 	and.w	r9, r5, #2

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80065a6:	f015 0501 	ands.w	r5, r5, #1
 80065aa:	d10c      	bne.n	80065c6 <BSP_ENV_SENSOR_Init+0x26e>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80065ac:	f1b8 0f00 	cmp.w	r8, #0
 80065b0:	f040 80c9 	bne.w	8006746 <BSP_ENV_SENSOR_Init+0x3ee>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80065b4:	f1b9 0f00 	cmp.w	r9, #0
 80065b8:	d002      	beq.n	80065c0 <BSP_ENV_SENSOR_Init+0x268>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	f000 80bd 	beq.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
 80065c0:	4839      	ldr	r0, [pc, #228]	@ (80066a8 <BSP_ENV_SENSOR_Init+0x350>)
 80065c2:	4b38      	ldr	r3, [pc, #224]	@ (80066a4 <BSP_ENV_SENSOR_Init+0x34c>)
 80065c4:	e727      	b.n	8006416 <BSP_ENV_SENSOR_Init+0xbe>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80065c6:	2a01      	cmp	r2, #1
 80065c8:	d1f0      	bne.n	80065ac <BSP_ENV_SENSOR_Init+0x254>
      EnvFuncDrv[STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80065ca:	4a38      	ldr	r2, [pc, #224]	@ (80066ac <BSP_ENV_SENSOR_Init+0x354>)
      if (EnvDrv[STTS751_0]->Init(EnvCompObj[STTS751_0]) != STTS751_OK)
 80065cc:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80065ce:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
      if (EnvDrv[STTS751_0]->Init(EnvCompObj[STTS751_0]) != STTS751_OK)
 80065d2:	4650      	mov	r0, sl
 80065d4:	4798      	blx	r3
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f040 80af 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80065dc:	f1b8 0f00 	cmp.w	r8, #0
 80065e0:	f040 8101 	bne.w	80067e6 <BSP_ENV_SENSOR_Init+0x48e>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	d004      	beq.n	80065f4 <BSP_ENV_SENSOR_Init+0x29c>
 80065ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80a3 	beq.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80065f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065f8:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80065fc:	e70b      	b.n	8006416 <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80065fe:	2a01      	cmp	r2, #1
 8006600:	f47f aeff 	bne.w	8006402 <BSP_ENV_SENSOR_Init+0xaa>
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8006604:	4a2a      	ldr	r2, [pc, #168]	@ (80066b0 <BSP_ENV_SENSOR_Init+0x358>)
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8006606:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8006608:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 800660c:	4650      	mov	r0, sl
 800660e:	4798      	blx	r3
 8006610:	2800      	cmp	r0, #0
 8006612:	f000 80ca 	beq.w	80067aa <BSP_ENV_SENSOR_Init+0x452>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8006616:	f1b9 0f00 	cmp.w	r9, #0
 800661a:	f000 808e 	beq.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
 800661e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006622:	2b01      	cmp	r3, #1
 8006624:	f040 8089 	bne.w	800673a <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8006628:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800662c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8006630:	4a20      	ldr	r2, [pc, #128]	@ (80066b4 <BSP_ENV_SENSOR_Init+0x35c>)
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8006632:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8006634:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 8006638:	4798      	blx	r3
 800663a:	2800      	cmp	r0, #0
 800663c:	d17d      	bne.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 800663e:	f1b8 0f00 	cmp.w	r8, #0
 8006642:	f000 8092 	beq.w	800676a <BSP_ENV_SENSOR_Init+0x412>
 8006646:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 808d 	bne.w	800676a <BSP_ENV_SENSOR_Init+0x412>
 8006650:	e073      	b.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006652:	f1b8 0f00 	cmp.w	r8, #0
 8006656:	d06c      	beq.n	8006732 <BSP_ENV_SENSOR_Init+0x3da>
 8006658:	2901      	cmp	r1, #1
 800665a:	f000 808f 	beq.w	800677c <BSP_ENV_SENSOR_Init+0x424>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800665e:	f1b9 0f00 	cmp.w	r9, #0
 8006662:	d06d      	beq.n	8006740 <BSP_ENV_SENSOR_Init+0x3e8>
 8006664:	2800      	cmp	r0, #0
 8006666:	d068      	beq.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006668:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800666c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8006670:	e6d1      	b.n	8006416 <BSP_ENV_SENSOR_Init+0xbe>
 8006672:	bf00      	nop
 8006674:	08006271 	.word	0x08006271
 8006678:	08006035 	.word	0x08006035
 800667c:	20002e14 	.word	0x20002e14
 8006680:	0800609d 	.word	0x0800609d
 8006684:	08006069 	.word	0x08006069
 8006688:	08006149 	.word	0x08006149
 800668c:	200001ac 	.word	0x200001ac
 8006690:	20002e40 	.word	0x20002e40
 8006694:	08006345 	.word	0x08006345
 8006698:	08006335 	.word	0x08006335
 800669c:	20000080 	.word	0x20000080
 80066a0:	2000006c 	.word	0x2000006c
 80066a4:	200001d0 	.word	0x200001d0
 80066a8:	20002e6c 	.word	0x20002e6c
 80066ac:	200001bc 	.word	0x200001bc
 80066b0:	20000184 	.word	0x20000184
 80066b4:	20000198 	.word	0x20000198
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80066b8:	07f1      	lsls	r1, r6, #31
 80066ba:	f57f aec9 	bpl.w	8006450 <BSP_ENV_SENSOR_Init+0xf8>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80066be:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80066c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80066c6:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 80066ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066ce:	f8d2 0094 	ldr.w	r0, [r2, #148]	@ 0x94
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4798      	blx	r3
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f43f aeba 	beq.w	8006450 <BSP_ENV_SENSOR_Init+0xf8>
        return BSP_ERROR_COMPONENT_FAILURE;
 80066dc:	f06f 0004 	mvn.w	r0, #4
 80066e0:	e648      	b.n	8006374 <BSP_ENV_SENSOR_Init+0x1c>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80066e2:	07b2      	lsls	r2, r6, #30
 80066e4:	f57f aeb8 	bpl.w	8006458 <BSP_ENV_SENSOR_Init+0x100>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80066e8:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80066ec:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
 80066f0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80066f4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80066f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4798      	blx	r3
 8006700:	2800      	cmp	r0, #0
 8006702:	d1eb      	bne.n	80066dc <BSP_ENV_SENSOR_Init+0x384>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006704:	f1b8 0f00 	cmp.w	r8, #0
 8006708:	f43f aeaa 	beq.w	8006460 <BSP_ENV_SENSOR_Init+0x108>
 800670c:	0773      	lsls	r3, r6, #29
 800670e:	f57f aea7 	bpl.w	8006460 <BSP_ENV_SENSOR_Init+0x108>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8006712:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006716:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800671a:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 800671e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006722:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4798      	blx	r3
 800672a:	2800      	cmp	r0, #0
 800672c:	f43f ae98 	beq.w	8006460 <BSP_ENV_SENSOR_Init+0x108>
 8006730:	e7d4      	b.n	80066dc <BSP_ENV_SENSOR_Init+0x384>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006732:	f1b9 0f00 	cmp.w	r9, #0
 8006736:	d003      	beq.n	8006740 <BSP_ENV_SENSOR_Init+0x3e8>
 8006738:	b910      	cbnz	r0, 8006740 <BSP_ENV_SENSOR_Init+0x3e8>
        return BSP_ERROR_NO_INIT;
 800673a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800673e:	e619      	b.n	8006374 <BSP_ENV_SENSOR_Init+0x1c>
  return ret;
 8006740:	4831      	ldr	r0, [pc, #196]	@ (8006808 <BSP_ENV_SENSOR_Init+0x4b0>)
 8006742:	4b32      	ldr	r3, [pc, #200]	@ (800680c <BSP_ENV_SENSOR_Init+0x4b4>)
 8006744:	e667      	b.n	8006416 <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006746:	2900      	cmp	r1, #0
 8006748:	d0f7      	beq.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800674a:	f1b9 0f00 	cmp.w	r9, #0
 800674e:	f43f af37 	beq.w	80065c0 <BSP_ENV_SENSOR_Init+0x268>
 8006752:	2800      	cmp	r0, #0
 8006754:	f47f af4e 	bne.w	80065f4 <BSP_ENV_SENSOR_Init+0x29c>
 8006758:	e7ef      	b.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800675a:	2901      	cmp	r1, #1
 800675c:	d023      	beq.n	80067a6 <BSP_ENV_SENSOR_Init+0x44e>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 800675e:	f1b8 0f00 	cmp.w	r8, #0
 8006762:	f43f ae56 	beq.w	8006412 <BSP_ENV_SENSOR_Init+0xba>
 8006766:	2800      	cmp	r0, #0
 8006768:	d0e7      	beq.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800676a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800676e:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8006772:	e650      	b.n	8006416 <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006774:	2800      	cmp	r0, #0
 8006776:	f47f ae4c 	bne.w	8006412 <BSP_ENV_SENSOR_Init+0xba>
 800677a:	e7de      	b.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800677c:	4638      	mov	r0, r7
 800677e:	e6c0      	b.n	8006502 <BSP_ENV_SENSOR_Init+0x1aa>
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8006780:	4a23      	ldr	r2, [pc, #140]	@ (8006810 <BSP_ENV_SENSOR_Init+0x4b8>)
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8006782:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8006784:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8006788:	4638      	mov	r0, r7
 800678a:	4798      	blx	r3
 800678c:	b1e0      	cbz	r0, 80067c8 <BSP_ENV_SENSOR_Init+0x470>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800678e:	f1b8 0f00 	cmp.w	r8, #0
 8006792:	d0d2      	beq.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
 8006794:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d1ce      	bne.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 800679c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067a0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80067a4:	e6ad      	b.n	8006502 <BSP_ENV_SENSOR_Init+0x1aa>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80067a6:	4650      	mov	r0, sl
 80067a8:	e742      	b.n	8006630 <BSP_ENV_SENSOR_Init+0x2d8>
 80067aa:	f1b9 0f00 	cmp.w	r9, #0
 80067ae:	f43f af46 	beq.w	800663e <BSP_ENV_SENSOR_Init+0x2e6>
 80067b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	f43f af36 	beq.w	8006628 <BSP_ENV_SENSOR_Init+0x2d0>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80067bc:	f1b8 0f00 	cmp.w	r8, #0
 80067c0:	d0d3      	beq.n	800676a <BSP_ENV_SENSOR_Init+0x412>
 80067c2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80067c6:	e7ce      	b.n	8006766 <BSP_ENV_SENSOR_Init+0x40e>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80067c8:	f1b8 0f00 	cmp.w	r8, #0
 80067cc:	f43f aea1 	beq.w	8006512 <BSP_ENV_SENSOR_Init+0x1ba>
 80067d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d0e1      	beq.n	800679c <BSP_ENV_SENSOR_Init+0x444>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80067d8:	f1b9 0f00 	cmp.w	r9, #0
 80067dc:	f43f af44 	beq.w	8006668 <BSP_ENV_SENSOR_Init+0x310>
 80067e0:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80067e4:	e73e      	b.n	8006664 <BSP_ENV_SENSOR_Init+0x30c>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80067e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0a5      	beq.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80067ee:	f1b9 0f00 	cmp.w	r9, #0
 80067f2:	f43f aeff 	beq.w	80065f4 <BSP_ENV_SENSOR_Init+0x29c>
 80067f6:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f47f aefa 	bne.w	80065f4 <BSP_ENV_SENSOR_Init+0x29c>
 8006800:	e79b      	b.n	800673a <BSP_ENV_SENSOR_Init+0x3e2>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006802:	f06f 0006 	mvn.w	r0, #6
 8006806:	e5b5      	b.n	8006374 <BSP_ENV_SENSOR_Init+0x1c>
 8006808:	20002e14 	.word	0x20002e14
 800680c:	20000080 	.word	0x20000080
 8006810:	20000058 	.word	0x20000058

08006814 <BSP_ENV_SENSOR_SetOutputDataRate>:
  if (Instance >= ENV_INSTANCES_NBR)
 8006814:	2802      	cmp	r0, #2
 8006816:	d81f      	bhi.n	8006858 <BSP_ENV_SENSOR_SetOutputDataRate+0x44>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8006818:	4a11      	ldr	r2, [pc, #68]	@ (8006860 <BSP_ENV_SENSOR_SetOutputDataRate+0x4c>)
 800681a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
{
 800681e:	b508      	push	{r3, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8006820:	f8dc 3088 	ldr.w	r3, [ip, #136]	@ 0x88
 8006824:	ea01 0e03 	and.w	lr, r1, r3
 8006828:	4399      	bics	r1, r3
 800682a:	d112      	bne.n	8006852 <BSP_ENV_SENSOR_SetOutputDataRate+0x3e>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800682c:	490d      	ldr	r1, [pc, #52]	@ (8006864 <BSP_ENV_SENSOR_SetOutputDataRate+0x50>)
 800682e:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 8006832:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006836:	440b      	add	r3, r1
 8006838:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800683c:	f8dc 0094 	ldr.w	r0, [ip, #148]	@ 0x94
 8006840:	f8d2 30ac 	ldr.w	r3, [r2, #172]	@ 0xac
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006848:	2800      	cmp	r0, #0
 800684a:	bf18      	it	ne
 800684c:	f06f 0004 	mvnne.w	r0, #4
}
 8006850:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006852:	f06f 0001 	mvn.w	r0, #1
}
 8006856:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006858:	f06f 0001 	mvn.w	r0, #1
}
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20002e14 	.word	0x20002e14
 8006864:	080172bc 	.word	0x080172bc

08006868 <BSP_ENV_SENSOR_GetValue>:
  if (Instance >= ENV_INSTANCES_NBR)
 8006868:	2802      	cmp	r0, #2
 800686a:	d821      	bhi.n	80068b0 <BSP_ENV_SENSOR_GetValue+0x48>
{
 800686c:	b510      	push	{r4, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800686e:	4c12      	ldr	r4, [pc, #72]	@ (80068b8 <BSP_ENV_SENSOR_GetValue+0x50>)
 8006870:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8006874:	460b      	mov	r3, r1
 8006876:	4611      	mov	r1, r2
 8006878:	f8dc 2088 	ldr.w	r2, [ip, #136]	@ 0x88
 800687c:	ea03 0e02 	and.w	lr, r3, r2
 8006880:	4393      	bics	r3, r2
 8006882:	d112      	bne.n	80068aa <BSP_ENV_SENSOR_GetValue+0x42>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8006884:	4a0d      	ldr	r2, [pc, #52]	@ (80068bc <BSP_ENV_SENSOR_GetValue+0x54>)
 8006886:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800688a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800688e:	4413      	add	r3, r2
 8006890:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006894:	f8dc 0094 	ldr.w	r0, [ip, #148]	@ 0x94
 8006898:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068a0:	2800      	cmp	r0, #0
 80068a2:	bf18      	it	ne
 80068a4:	f06f 0004 	mvnne.w	r0, #4
}
 80068a8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80068aa:	f06f 0001 	mvn.w	r0, #1
}
 80068ae:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80068b0:	f06f 0001 	mvn.w	r0, #1
}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20002e14 	.word	0x20002e14
 80068bc:	080172bc 	.word	0x080172bc

080068c0 <BSP_IIS3DWB_WriteReg>:

  return ret;
}

static int32_t BSP_IIS3DWB_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80068c0:	b530      	push	{r4, r5, lr}
 80068c2:	b083      	sub	sp, #12
 80068c4:	468c      	mov	ip, r1
 80068c6:	4615      	mov	r5, r2
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80068c8:	4812      	ldr	r0, [pc, #72]	@ (8006914 <BSP_IIS3DWB_WriteReg+0x54>)
  uint8_t dataReg = (uint8_t)Reg;
 80068ca:	f88d c007 	strb.w	ip, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80068ce:	2200      	movs	r2, #0
 80068d0:	2120      	movs	r1, #32
{
 80068d2:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80068d4:	f001 fe00 	bl	80084d8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 80068d8:	2101      	movs	r1, #1
 80068da:	f10d 0007 	add.w	r0, sp, #7
 80068de:	f7ff fc0f 	bl	8006100 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 80068e2:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 80068e4:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 80068e6:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 80068e8:	bf14      	ite	ne
 80068ea:	f06f 0505 	mvnne.w	r5, #5
 80068ee:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 80068f0:	f7ff fc06 	bl	8006100 <BSP_SPI3_Send>
 80068f4:	b224      	sxth	r4, r4
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80068f6:	42a0      	cmp	r0, r4
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 80068f8:	f04f 0201 	mov.w	r2, #1
 80068fc:	4805      	ldr	r0, [pc, #20]	@ (8006914 <BSP_IIS3DWB_WriteReg+0x54>)
 80068fe:	f04f 0120 	mov.w	r1, #32
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006902:	bf18      	it	ne
 8006904:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006908:	f001 fde6 	bl	80084d8 <HAL_GPIO_WritePin>

  return ret;
}
 800690c:	4628      	mov	r0, r5
 800690e:	b003      	add	sp, #12
 8006910:	bd30      	pop	{r4, r5, pc}
 8006912:	bf00      	nop
 8006914:	48001400 	.word	0x48001400

08006918 <BSP_IIS2DH_WriteReg>:
{
 8006918:	b530      	push	{r4, r5, lr}
 800691a:	461c      	mov	r4, r3
 800691c:	b083      	sub	sp, #12
  uint8_t dataReg = (uint8_t)Reg;
 800691e:	b2cb      	uxtb	r3, r1
  if (len > 1U)
 8006920:	2c01      	cmp	r4, #1
{
 8006922:	4615      	mov	r5, r2
    dataReg |= 0x40U;
 8006924:	bf88      	it	hi
 8006926:	f043 0340 	orrhi.w	r3, r3, #64	@ 0x40
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 800692a:	2200      	movs	r2, #0
 800692c:	4810      	ldr	r0, [pc, #64]	@ (8006970 <BSP_IIS2DH_WriteReg+0x58>)
  uint8_t dataReg = (uint8_t)Reg;
 800692e:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 8006932:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006936:	f001 fdcf 	bl	80084d8 <HAL_GPIO_WritePin>
  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 800693a:	2101      	movs	r1, #1
 800693c:	f10d 0007 	add.w	r0, sp, #7
 8006940:	f7ff fbde 	bl	8006100 <BSP_SPI3_Send>
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006944:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 8006946:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006948:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 800694a:	bf14      	ite	ne
 800694c:	f06f 0505 	mvnne.w	r5, #5
 8006950:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006952:	f7ff fbd5 	bl	8006100 <BSP_SPI3_Send>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006956:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006958:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 800695a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800695e:	4804      	ldr	r0, [pc, #16]	@ (8006970 <BSP_IIS2DH_WriteReg+0x58>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006960:	bf18      	it	ne
 8006962:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006966:	f001 fdb7 	bl	80084d8 <HAL_GPIO_WritePin>
}
 800696a:	4628      	mov	r0, r5
 800696c:	b003      	add	sp, #12
 800696e:	bd30      	pop	{r4, r5, pc}
 8006970:	48000c00 	.word	0x48000c00

08006974 <BSP_ISM330DHCX_WriteReg>:

  return ret;
}

static int32_t BSP_ISM330DHCX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006974:	b530      	push	{r4, r5, lr}
 8006976:	b083      	sub	sp, #12
 8006978:	468c      	mov	ip, r1
 800697a:	4615      	mov	r5, r2
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 800697c:	4811      	ldr	r0, [pc, #68]	@ (80069c4 <BSP_ISM330DHCX_WriteReg+0x50>)
  uint8_t dataReg = (uint8_t)Reg;
 800697e:	f88d c007 	strb.w	ip, [sp, #7]
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8006982:	2200      	movs	r2, #0
 8006984:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
 8006988:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 800698a:	f001 fda5 	bl	80084d8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 800698e:	2101      	movs	r1, #1
 8006990:	f10d 0007 	add.w	r0, sp, #7
 8006994:	f7ff fbb4 	bl	8006100 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006998:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 800699a:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 800699c:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 800699e:	bf14      	ite	ne
 80069a0:	f06f 0505 	mvnne.w	r5, #5
 80069a4:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 80069a6:	f7ff fbab 	bl	8006100 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80069aa:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80069ac:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80069ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80069b2:	4804      	ldr	r0, [pc, #16]	@ (80069c4 <BSP_ISM330DHCX_WriteReg+0x50>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80069b4:	bf18      	it	ne
 80069b6:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80069ba:	f001 fd8d 	bl	80084d8 <HAL_GPIO_WritePin>

  return ret;
}
 80069be:	4628      	mov	r0, r5
 80069c0:	b003      	add	sp, #12
 80069c2:	bd30      	pop	{r4, r5, pc}
 80069c4:	48001400 	.word	0x48001400

080069c8 <BSP_IIS3DWB_ReadReg>:
{
 80069c8:	b530      	push	{r4, r5, lr}
 80069ca:	b083      	sub	sp, #12
  dataReg |= 0x80U;
 80069cc:	f061 017f 	orn	r1, r1, #127	@ 0x7f
{
 80069d0:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 80069d2:	f88d 1007 	strb.w	r1, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80069d6:	2200      	movs	r2, #0
 80069d8:	4810      	ldr	r0, [pc, #64]	@ (8006a1c <BSP_IIS3DWB_ReadReg+0x54>)
 80069da:	2120      	movs	r1, #32
{
 80069dc:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80069de:	f001 fd7b 	bl	80084d8 <HAL_GPIO_WritePin>
  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 80069e2:	2101      	movs	r1, #1
 80069e4:	f10d 0007 	add.w	r0, sp, #7
 80069e8:	f7ff fb8a 	bl	8006100 <BSP_SPI3_Send>
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 80069ec:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 80069ee:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 80069f0:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 80069f2:	bf14      	ite	ne
 80069f4:	f06f 0505 	mvnne.w	r5, #5
 80069f8:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 80069fa:	f7ff fb93 	bl	8006124 <BSP_SPI3_Recv>
 80069fe:	b224      	sxth	r4, r4
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006a00:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006a02:	f04f 0201 	mov.w	r2, #1
 8006a06:	4805      	ldr	r0, [pc, #20]	@ (8006a1c <BSP_IIS3DWB_ReadReg+0x54>)
 8006a08:	f04f 0120 	mov.w	r1, #32
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006a0c:	bf18      	it	ne
 8006a0e:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006a12:	f001 fd61 	bl	80084d8 <HAL_GPIO_WritePin>
}
 8006a16:	4628      	mov	r0, r5
 8006a18:	b003      	add	sp, #12
 8006a1a:	bd30      	pop	{r4, r5, pc}
 8006a1c:	48001400 	.word	0x48001400

08006a20 <BSP_IIS2DH_ReadReg>:
{
 8006a20:	b530      	push	{r4, r5, lr}
  if (len > 1U)
 8006a22:	2b01      	cmp	r3, #1
{
 8006a24:	b083      	sub	sp, #12
  uint8_t dataReg = (uint8_t)Reg;
 8006a26:	b2c9      	uxtb	r1, r1
{
 8006a28:	461c      	mov	r4, r3
 8006a2a:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 8006a2c:	bf94      	ite	ls
 8006a2e:	f041 0380 	orrls.w	r3, r1, #128	@ 0x80
    dataReg |= 0x40U;
 8006a32:	f041 03c0 	orrhi.w	r3, r1, #192	@ 0xc0
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 8006a36:	2200      	movs	r2, #0
 8006a38:	4810      	ldr	r0, [pc, #64]	@ (8006a7c <BSP_IIS2DH_ReadReg+0x5c>)
  dataReg |= 0x80U;
 8006a3a:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 8006a3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a42:	f001 fd49 	bl	80084d8 <HAL_GPIO_WritePin>
  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8006a46:	2101      	movs	r1, #1
 8006a48:	f10d 0007 	add.w	r0, sp, #7
 8006a4c:	f7ff fb58 	bl	8006100 <BSP_SPI3_Send>
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006a50:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 8006a52:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006a54:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 8006a56:	bf14      	ite	ne
 8006a58:	f06f 0505 	mvnne.w	r5, #5
 8006a5c:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006a5e:	f7ff fb61 	bl	8006124 <BSP_SPI3_Recv>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006a62:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006a64:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006a66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a6a:	4804      	ldr	r0, [pc, #16]	@ (8006a7c <BSP_IIS2DH_ReadReg+0x5c>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006a6c:	bf18      	it	ne
 8006a6e:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006a72:	f001 fd31 	bl	80084d8 <HAL_GPIO_WritePin>
}
 8006a76:	4628      	mov	r0, r5
 8006a78:	b003      	add	sp, #12
 8006a7a:	bd30      	pop	{r4, r5, pc}
 8006a7c:	48000c00 	.word	0x48000c00

08006a80 <BSP_ISM330DHCX_ReadReg>:

static int32_t BSP_ISM330DHCX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006a80:	b530      	push	{r4, r5, lr}
 8006a82:	b083      	sub	sp, #12
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  dataReg |= 0x80U;
 8006a84:	f061 017f 	orn	r1, r1, #127	@ 0x7f
{
 8006a88:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 8006a8a:	f88d 1007 	strb.w	r1, [sp, #7]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8006a8e:	2200      	movs	r2, #0
 8006a90:	4810      	ldr	r0, [pc, #64]	@ (8006ad4 <BSP_ISM330DHCX_ReadReg+0x54>)
 8006a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
 8006a96:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8006a98:	f001 fd1e 	bl	80084d8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	f10d 0007 	add.w	r0, sp, #7
 8006aa2:	f7ff fb2d 	bl	8006100 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006aa6:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 8006aa8:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006aaa:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 8006aac:	bf14      	ite	ne
 8006aae:	f06f 0505 	mvnne.w	r5, #5
 8006ab2:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006ab4:	f7ff fb36 	bl	8006124 <BSP_SPI3_Recv>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006ab8:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006aba:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006abc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006ac0:	4804      	ldr	r0, [pc, #16]	@ (8006ad4 <BSP_ISM330DHCX_ReadReg+0x54>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006ac2:	bf18      	it	ne
 8006ac4:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006ac8:	f001 fd06 	bl	80084d8 <HAL_GPIO_WritePin>

  return ret;
}
 8006acc:	4628      	mov	r0, r5
 8006ace:	b003      	add	sp, #12
 8006ad0:	bd30      	pop	{r4, r5, pc}
 8006ad2:	bf00      	nop
 8006ad4:	48001400 	.word	0x48001400

08006ad8 <BSP_IIS2DH_DeInit>:
{
 8006ad8:	b508      	push	{r3, lr}
  if(BSP_SPI3_DeInit() == BSP_ERROR_NONE)
 8006ada:	f7ff faf7 	bl	80060cc <BSP_SPI3_DeInit>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006ade:	2800      	cmp	r0, #0
}
 8006ae0:	bf18      	it	ne
 8006ae2:	f06f 0005 	mvnne.w	r0, #5
 8006ae6:	bd08      	pop	{r3, pc}

08006ae8 <BSP_IIS3DWB_Init>:
{
 8006ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 8006aea:	4c2e      	ldr	r4, [pc, #184]	@ (8006ba4 <BSP_IIS3DWB_Init+0xbc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006aec:	4f2e      	ldr	r7, [pc, #184]	@ (8006ba8 <BSP_IIS3DWB_Init+0xc0>)
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 8006aee:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 8006af0:	482e      	ldr	r0, [pc, #184]	@ (8006bac <BSP_IIS3DWB_Init+0xc4>)
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 8006af2:	f043 0310 	orr.w	r3, r3, #16
 8006af6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006af8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
{
 8006afa:	b08b      	sub	sp, #44	@ 0x2c
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 8006afc:	f003 0310 	and.w	r3, r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b00:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b02:	2602      	movs	r6, #2
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 8006b04:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 8006b06:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BSP_IIS3DWB_INT1_PIN;
 8006b08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b0c:	9304      	str	r3, [sp, #16]
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 8006b0e:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b10:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b12:	e9cd 7505 	strd	r7, r5, [sp, #20]
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 8006b16:	f001 fb07 	bl	8008128 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(BSP_IIS3DWB_INT1_EXTI_IRQn, BSP_IIS3DWB_INT1_EXTI_IRQ_PP, BSP_IIS3DWB_INT1_EXTI_IRQ_SP);
 8006b1a:	462a      	mov	r2, r5
 8006b1c:	2107      	movs	r1, #7
 8006b1e:	2028      	movs	r0, #40	@ 0x28
 8006b20:	f001 fa92 	bl	8008048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_IIS3DWB_INT1_EXTI_IRQn);
 8006b24:	2028      	movs	r0, #40	@ 0x28
 8006b26:	f001 facb 	bl	80080c0 <HAL_NVIC_EnableIRQ>
  BSP_IIS3DWB_INT2_GPIO_CLK_ENABLE();
 8006b2a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_Init(BSP_IIS3DWB_INT2_PORT, &GPIO_InitStruct);
 8006b2c:	4820      	ldr	r0, [pc, #128]	@ (8006bb0 <BSP_IIS3DWB_Init+0xc8>)
  BSP_IIS3DWB_INT2_GPIO_CLK_ENABLE();
 8006b2e:	4333      	orrs	r3, r6
 8006b30:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006b32:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b34:	9705      	str	r7, [sp, #20]
  BSP_IIS3DWB_INT2_GPIO_CLK_ENABLE();
 8006b36:	4033      	ands	r3, r6
 8006b38:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(BSP_IIS3DWB_INT2_PORT, &GPIO_InitStruct);
 8006b3a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BSP_IIS3DWB_INT2_PIN;
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b40:	e9cd 5606 	strd	r5, r6, [sp, #24]
  BSP_IIS3DWB_INT2_GPIO_CLK_ENABLE();
 8006b44:	9a02      	ldr	r2, [sp, #8]
  HAL_GPIO_Init(BSP_IIS3DWB_INT2_PORT, &GPIO_InitStruct);
 8006b46:	f001 faef 	bl	8008128 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(BSP_IIS3DWB_INT2_EXTI_IRQn, BSP_IIS3DWB_INT2_EXTI_IRQ_PP, BSP_IIS3DWB_INT2_EXTI_IRQ_SP);
 8006b4a:	462a      	mov	r2, r5
 8006b4c:	2107      	movs	r1, #7
 8006b4e:	2008      	movs	r0, #8
 8006b50:	f001 fa7a 	bl	8008048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_IIS3DWB_INT2_EXTI_IRQn);
 8006b54:	2008      	movs	r0, #8
 8006b56:	f001 fab3 	bl	80080c0 <HAL_NVIC_EnableIRQ>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b5a:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4815      	ldr	r0, [pc, #84]	@ (8006bb4 <BSP_IIS3DWB_Init+0xcc>)
 8006b60:	2120      	movs	r1, #32
 8006b62:	f001 fcb9 	bl	80084d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b66:	e9cd 6505 	strd	r6, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	9307      	str	r3, [sp, #28]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006b6e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8006b70:	4810      	ldr	r0, [pc, #64]	@ (8006bb4 <BSP_IIS3DWB_Init+0xcc>)
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006b72:	f043 0320 	orr.w	r3, r3, #32
 8006b76:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006b78:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8006b7a:	2420      	movs	r4, #32
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006b7c:	4023      	ands	r3, r4
 8006b7e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8006b80:	a904      	add	r1, sp, #16
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006b82:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8006b84:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8006b86:	f001 facf 	bl	8008128 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006b8a:	4632      	mov	r2, r6
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4809      	ldr	r0, [pc, #36]	@ (8006bb4 <BSP_IIS3DWB_Init+0xcc>)
 8006b90:	f001 fca2 	bl	80084d8 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8006b94:	f7ff fb04 	bl	80061a0 <BSP_SPI3_Init>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006b98:	2800      	cmp	r0, #0
}
 8006b9a:	bf18      	it	ne
 8006b9c:	f06f 0005 	mvnne.w	r0, #5
 8006ba0:	b00b      	add	sp, #44	@ 0x2c
 8006ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba4:	40021000 	.word	0x40021000
 8006ba8:	10110000 	.word	0x10110000
 8006bac:	48001000 	.word	0x48001000
 8006bb0:	48000400 	.word	0x48000400
 8006bb4:	48001400 	.word	0x48001400

08006bb8 <BSP_IIS2DH_Init>:
{
 8006bb8:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006bba:	4815      	ldr	r0, [pc, #84]	@ (8006c10 <BSP_IIS2DH_Init+0x58>)
{
 8006bbc:	b089      	sub	sp, #36	@ 0x24
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006bc4:	f001 fc88 	bl	80084d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bc8:	2501      	movs	r5, #1
 8006bca:	2200      	movs	r2, #0
 8006bcc:	e9cd 5203 	strd	r5, r2, [sp, #12]
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8006bd0:	4b10      	ldr	r3, [pc, #64]	@ (8006c14 <BSP_IIS2DH_Init+0x5c>)
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8006bd2:	480f      	ldr	r0, [pc, #60]	@ (8006c10 <BSP_IIS2DH_Init+0x58>)
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006bd4:	2103      	movs	r1, #3
 8006bd6:	9105      	str	r1, [sp, #20]
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8006bd8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006bda:	f041 0108 	orr.w	r1, r1, #8
 8006bde:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8006be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be2:	f003 0308 	and.w	r3, r3, #8
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8006be6:	f44f 4400 	mov.w	r4, #32768	@ 0x8000
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8006bea:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8006bec:	a902      	add	r1, sp, #8
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8006bee:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8006bf0:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8006bf2:	f001 fa99 	bl	8008128 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4805      	ldr	r0, [pc, #20]	@ (8006c10 <BSP_IIS2DH_Init+0x58>)
 8006bfc:	f001 fc6c 	bl	80084d8 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8006c00:	f7ff face 	bl	80061a0 <BSP_SPI3_Init>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006c04:	2800      	cmp	r0, #0
}
 8006c06:	bf18      	it	ne
 8006c08:	f06f 0005 	mvnne.w	r0, #5
 8006c0c:	b009      	add	sp, #36	@ 0x24
 8006c0e:	bd30      	pop	{r4, r5, pc}
 8006c10:	48000c00 	.word	0x48000c00
 8006c14:	40021000 	.word	0x40021000

08006c18 <BSP_ISM330DHCX_Init>:
{
 8006c18:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006c1a:	2201      	movs	r2, #1
{
 8006c1c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c1e:	2600      	movs	r6, #0
 8006c20:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006c22:	4823      	ldr	r0, [pc, #140]	@ (8006cb0 <BSP_ISM330DHCX_Init+0x98>)
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006c24:	4d23      	ldr	r5, [pc, #140]	@ (8006cb4 <BSP_ISM330DHCX_Init+0x9c>)
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006c26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006c2a:	f001 fc55 	bl	80084d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c2e:	e9cd 7603 	strd	r7, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006c32:	2303      	movs	r3, #3
 8006c34:	9305      	str	r3, [sp, #20]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006c36:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8006c38:	481d      	ldr	r0, [pc, #116]	@ (8006cb0 <BSP_ISM330DHCX_Init+0x98>)
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006c3a:	f043 0320 	orr.w	r3, r3, #32
 8006c3e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8006c40:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8006c48:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8006c4c:	a902      	add	r1, sp, #8
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006c4e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8006c50:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8006c52:	f001 fa69 	bl	8008128 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006c56:	463a      	mov	r2, r7
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4815      	ldr	r0, [pc, #84]	@ (8006cb0 <BSP_ISM330DHCX_Init+0x98>)
 8006c5c:	f001 fc3c 	bl	80084d8 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8006c60:	f7ff fa9e 	bl	80061a0 <BSP_SPI3_Init>
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 8006c64:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006c66:	f043 0320 	orr.w	r3, r3, #32
 8006c6a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8006c6c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c74:	4b10      	ldr	r3, [pc, #64]	@ (8006cb8 <BSP_ISM330DHCX_Init+0xa0>)
 8006c76:	9303      	str	r3, [sp, #12]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006c78:	1e04      	subs	r4, r0, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c7a:	f04f 0302 	mov.w	r3, #2
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 8006c7e:	a902      	add	r1, sp, #8
 8006c80:	480b      	ldr	r0, [pc, #44]	@ (8006cb0 <BSP_ISM330DHCX_Init+0x98>)
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 8006c82:	f04f 0210 	mov.w	r2, #16
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006c86:	bf18      	it	ne
 8006c88:	f06f 0405 	mvnne.w	r4, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8c:	e9cd 6304 	strd	r6, r3, [sp, #16]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 8006c90:	9202      	str	r2, [sp, #8]
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 8006c92:	9a01      	ldr	r2, [sp, #4]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 8006c94:	f001 fa48 	bl	8008128 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT2_EXTI_IRQn, BSP_ISM330DHCX_INT2_EXTI_IRQ_PP, BSP_ISM330DHCX_INT2_EXTI_IRQ_SP);
 8006c98:	4632      	mov	r2, r6
 8006c9a:	2107      	movs	r1, #7
 8006c9c:	200a      	movs	r0, #10
 8006c9e:	f001 f9d3 	bl	8008048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT2_EXTI_IRQn);
 8006ca2:	200a      	movs	r0, #10
 8006ca4:	f001 fa0c 	bl	80080c0 <HAL_NVIC_EnableIRQ>
}
 8006ca8:	4620      	mov	r0, r4
 8006caa:	b009      	add	sp, #36	@ 0x24
 8006cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	48001400 	.word	0x48001400
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	10110000 	.word	0x10110000

08006cbc <BSP_IIS2MDC_WriteReg>:
{
 8006cbc:	b508      	push	{r3, lr}
  if (BSP_I2C2_WriteReg(Addr, dataReg, pdata, len) != BSP_ERROR_NONE)
 8006cbe:	f7ff f9d3 	bl	8006068 <BSP_I2C2_WriteReg>
    ret = BSP_ERROR_BUS_FAILURE;
 8006cc2:	2800      	cmp	r0, #0
}
 8006cc4:	bf18      	it	ne
 8006cc6:	f06f 0007 	mvnne.w	r0, #7
 8006cca:	bd08      	pop	{r3, pc}

08006ccc <BSP_IIS2MDC_ReadReg>:
{
 8006ccc:	b508      	push	{r3, lr}
  if (BSP_I2C2_ReadReg(Addr, dataReg, pdata, len) !=BSP_ERROR_NONE)
 8006cce:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006cd2:	f7ff f9e3 	bl	800609c <BSP_I2C2_ReadReg>
    ret = BSP_ERROR_BUS_FAILURE;
 8006cd6:	2800      	cmp	r0, #0
}
 8006cd8:	bf18      	it	ne
 8006cda:	f06f 0007 	mvnne.w	r0, #7
 8006cde:	bd08      	pop	{r3, pc}

08006ce0 <BSP_ISM330DHCX_DeInit>:
static int32_t BSP_ISM330DHCX_DeInit(void)
 8006ce0:	b508      	push	{r3, lr}
 8006ce2:	f7ff f9f3 	bl	80060cc <BSP_SPI3_DeInit>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	bf18      	it	ne
 8006cea:	f06f 0005 	mvnne.w	r0, #5
 8006cee:	bd08      	pop	{r3, pc}

08006cf0 <BSP_IIS3DWB_DeInit>:
static int32_t BSP_IIS3DWB_DeInit(void)
 8006cf0:	b508      	push	{r3, lr}
 8006cf2:	f7ff f9eb 	bl	80060cc <BSP_SPI3_DeInit>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	bf18      	it	ne
 8006cfa:	f06f 0005 	mvnne.w	r0, #5
 8006cfe:	bd08      	pop	{r3, pc}

08006d00 <BSP_MOTION_SENSOR_Init>:
{
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	4604      	mov	r4, r0
 8006d06:	b091      	sub	sp, #68	@ 0x44
 8006d08:	460d      	mov	r5, r1
  switch (Instance)
 8006d0a:	2803      	cmp	r0, #3
 8006d0c:	f200 82b2 	bhi.w	8007274 <BSP_MOTION_SENSOR_Init+0x574>
 8006d10:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006d14:	00cc011b 	.word	0x00cc011b
 8006d18:	0004007f 	.word	0x0004007f
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 8006d1c:	4bbd      	ldr	r3, [pc, #756]	@ (8007014 <BSP_MOTION_SENSOR_Init+0x314>)
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006d1e:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8007074 <BSP_MOTION_SENSOR_Init+0x374>
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 8006d22:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_ISM330DHCX_ReadReg;
 8006d24:	4bbc      	ldr	r3, [pc, #752]	@ (8007018 <BSP_MOTION_SENSOR_Init+0x318>)
 8006d26:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 8006d28:	4bbc      	ldr	r3, [pc, #752]	@ (800701c <BSP_MOTION_SENSOR_Init+0x31c>)
  io_ctx.DeInit      = BSP_ISM330DHCX_DeInit;
 8006d2a:	4abd      	ldr	r2, [pc, #756]	@ (8007020 <BSP_MOTION_SENSOR_Init+0x320>)
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 8006d2c:	9306      	str	r3, [sp, #24]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006d2e:	f108 0b88 	add.w	fp, r8, #136	@ 0x88
  io_ctx.GetTick     = BSP_GetTick;
 8006d32:	4bbc      	ldr	r3, [pc, #752]	@ (8007024 <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_ISM330DHCX_DeInit;
 8006d34:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006d36:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006d38:	2201      	movs	r2, #1
  io_ctx.Address     = 0x0;
 8006d3a:	2300      	movs	r3, #0
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006d3c:	a902      	add	r1, sp, #8
 8006d3e:	4658      	mov	r0, fp
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006d40:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = 0x0;
 8006d42:	f88d 3014 	strb.w	r3, [sp, #20]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006d46:	f7fd fa23 	bl	8004190 <ISM330DHCX_RegisterBusIO>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f040 80ab 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8006d50:	f10d 0107 	add.w	r1, sp, #7
 8006d54:	4658      	mov	r0, fp
 8006d56:	f7fc feed 	bl	8003b34 <ISM330DHCX_ReadID>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	f040 80a3 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  else if (id != ISM330DHCX_ID)
 8006d60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d64:	2b6b      	cmp	r3, #107	@ 0x6b
 8006d66:	f040 809e 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8006d6a:	ae09      	add	r6, sp, #36	@ 0x24
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	4658      	mov	r0, fp
 8006d70:	f7fc fd62 	bl	8003838 <ISM330DHCX_GetCapabilities>
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006d74:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006d78:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006d7c:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[ISM330DHCX_0] = &ism330dhcx_obj_0;
 8006d80:	f8c8 b0d4 	str.w	fp, [r8, #212]	@ 0xd4
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006d84:	0083      	lsls	r3, r0, #2
 8006d86:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	f8c8 30c4 	str.w	r3, [r8, #196]	@ 0xc4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006d90:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8006d94:	4ba4      	ldr	r3, [pc, #656]	@ (8007028 <BSP_MOTION_SENSOR_Init+0x328>)
 8006d96:	f8c8 30e4 	str.w	r3, [r8, #228]	@ 0xe4
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006d9a:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006d9e:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006da2:	d002      	beq.n	8006daa <BSP_MOTION_SENSOR_Init+0xaa>
 8006da4:	2a01      	cmp	r2, #1
 8006da6:	f000 81c0 	beq.w	800712a <BSP_MOTION_SENSOR_Init+0x42a>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006daa:	2f00      	cmp	r7, #0
 8006dac:	f040 8196 	bne.w	80070dc <BSP_MOTION_SENSOR_Init+0x3dc>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006db0:	f1b9 0f00 	cmp.w	r9, #0
 8006db4:	f040 81b5 	bne.w	8007122 <BSP_MOTION_SENSOR_Init+0x422>
  return ret;
 8006db8:	489c      	ldr	r0, [pc, #624]	@ (800702c <BSP_MOTION_SENSOR_Init+0x32c>)
 8006dba:	4b9b      	ldr	r3, [pc, #620]	@ (8007028 <BSP_MOTION_SENSOR_Init+0x328>)
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4798      	blx	r3
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f040 8239 	bne.w	800723a <BSP_MOTION_SENSOR_Init+0x53a>
      if (cap.Acc == 1U)
 8006dc8:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
      if (cap.Gyro == 1U)
 8006dcc:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
      if (cap.Acc == 1U)
 8006dd0:	f1a5 0501 	sub.w	r5, r5, #1
 8006dd4:	fab5 f585 	clz	r5, r5
      if (cap.Gyro == 1U)
 8006dd8:	2b01      	cmp	r3, #1
      if (cap.Acc == 1U)
 8006dda:	ea4f 1555 	mov.w	r5, r5, lsr #5
      if (cap.Magneto == 1U)
 8006dde:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
      if (cap.Acc == 1U)
 8006de2:	ea4f 0545 	mov.w	r5, r5, lsl #1
        component_functions |= MOTION_GYRO;
 8006de6:	bf08      	it	eq
 8006de8:	f045 0501 	orreq.w	r5, r5, #1
      if (cap.Magneto == 1U)
 8006dec:	2b01      	cmp	r3, #1
        component_functions |= MOTION_MAGNETO;
 8006dee:	bf08      	it	eq
 8006df0:	f045 0504 	orreq.w	r5, r5, #4
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006df4:	2f00      	cmp	r7, #0
 8006df6:	f040 80f8 	bne.w	8006fea <BSP_MOTION_SENSOR_Init+0x2ea>
 8006dfa:	f1ba 0f00 	cmp.w	sl, #0
 8006dfe:	f040 813b 	bne.w	8007078 <BSP_MOTION_SENSOR_Init+0x378>
 8006e02:	f1b9 0f00 	cmp.w	r9, #0
 8006e06:	f040 814c 	bne.w	80070a2 <BSP_MOTION_SENSOR_Init+0x3a2>
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8006e0a:	2000      	movs	r0, #0
}
 8006e0c:	b011      	add	sp, #68	@ 0x44
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  io_ctx.Init        = BSP_IIS3DWB_Init;
 8006e12:	4b87      	ldr	r3, [pc, #540]	@ (8007030 <BSP_MOTION_SENSOR_Init+0x330>)
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006e14:	f8df 825c 	ldr.w	r8, [pc, #604]	@ 8007074 <BSP_MOTION_SENSOR_Init+0x374>
  io_ctx.Init        = BSP_IIS3DWB_Init;
 8006e18:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS3DWB_ReadReg;
 8006e1a:	4b86      	ldr	r3, [pc, #536]	@ (8007034 <BSP_MOTION_SENSOR_Init+0x334>)
  io_ctx.DeInit      = BSP_IIS3DWB_DeInit;
 8006e1c:	4a86      	ldr	r2, [pc, #536]	@ (8007038 <BSP_MOTION_SENSOR_Init+0x338>)
  io_ctx.ReadReg     = BSP_IIS3DWB_ReadReg;
 8006e1e:	9307      	str	r3, [sp, #28]
  io_ctx.BusType     = IIS3DWB_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006e20:	2101      	movs	r1, #1
  io_ctx.GetTick     = BSP_GetTick;
 8006e22:	4b80      	ldr	r3, [pc, #512]	@ (8007024 <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.BusType     = IIS3DWB_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006e24:	9104      	str	r1, [sp, #16]
  io_ctx.DeInit      = BSP_IIS3DWB_DeInit;
 8006e26:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006e28:	9308      	str	r3, [sp, #32]
  io_ctx.WriteReg    = BSP_IIS3DWB_WriteReg;
 8006e2a:	4a84      	ldr	r2, [pc, #528]	@ (800703c <BSP_MOTION_SENSOR_Init+0x33c>)
 8006e2c:	9206      	str	r2, [sp, #24]
  io_ctx.Address     = 0x0;
 8006e2e:	2300      	movs	r3, #0
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006e30:	a902      	add	r1, sp, #8
 8006e32:	4640      	mov	r0, r8
  io_ctx.Address     = 0x0;
 8006e34:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006e38:	f7fc fbe4 	bl	8003604 <IIS3DWB_RegisterBusIO>
 8006e3c:	bb98      	cbnz	r0, 8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  else if (IIS3DWB_ReadID(&iis3dwb_obj_0, &id) != IIS3DWB_OK)
 8006e3e:	f10d 0107 	add.w	r1, sp, #7
 8006e42:	4640      	mov	r0, r8
 8006e44:	f7fc fac6 	bl	80033d4 <IIS3DWB_ReadID>
 8006e48:	bb68      	cbnz	r0, 8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  else if (id != IIS3DWB_ID)
 8006e4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e4e:	2b7b      	cmp	r3, #123	@ 0x7b
 8006e50:	d129      	bne.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    (void)IIS3DWB_GetCapabilities(&iis3dwb_obj_0, &cap);
 8006e52:	ae09      	add	r6, sp, #36	@ 0x24
 8006e54:	4631      	mov	r1, r6
 8006e56:	4640      	mov	r0, r8
 8006e58:	f7fc fa56 	bl	8003308 <IIS3DWB_GetCapabilities>
    MotionCtx[IIS3DWB_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006e5c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006e60:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006e64:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[IIS3DWB_0] = &iis3dwb_obj_0;
 8006e68:	f8c8 80d0 	str.w	r8, [r8, #208]	@ 0xd0
    MotionCtx[IIS3DWB_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006e6c:	0083      	lsls	r3, r0, #2
 8006e6e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006e72:	430b      	orrs	r3, r1
 8006e74:	f8c8 30c0 	str.w	r3, [r8, #192]	@ 0xc0
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006e78:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[IIS3DWB_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS3DWB_COMMON_Driver;
 8006e7c:	4b70      	ldr	r3, [pc, #448]	@ (8007040 <BSP_MOTION_SENSOR_Init+0x340>)
 8006e7e:	f8c8 30e0 	str.w	r3, [r8, #224]	@ 0xe0
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006e82:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e86:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006e8a:	d002      	beq.n	8006e92 <BSP_MOTION_SENSOR_Init+0x192>
 8006e8c:	2a01      	cmp	r2, #1
 8006e8e:	f000 8170 	beq.w	8007172 <BSP_MOTION_SENSOR_Init+0x472>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006e92:	2f00      	cmp	r7, #0
 8006e94:	f040 8118 	bne.w	80070c8 <BSP_MOTION_SENSOR_Init+0x3c8>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e98:	f1b9 0f00 	cmp.w	r9, #0
 8006e9c:	f000 811b 	beq.w	80070d6 <BSP_MOTION_SENSOR_Init+0x3d6>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f040 8118 	bne.w	80070d6 <BSP_MOTION_SENSOR_Init+0x3d6>
        return BSP_ERROR_NO_INIT;
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eaa:	e7af      	b.n	8006e0c <BSP_MOTION_SENSOR_Init+0x10c>
  io_ctx.Init        = BSP_I2C2_Init;
 8006eac:	4b65      	ldr	r3, [pc, #404]	@ (8007044 <BSP_MOTION_SENSOR_Init+0x344>)
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006eae:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8007074 <BSP_MOTION_SENSOR_Init+0x374>
  io_ctx.Init        = BSP_I2C2_Init;
 8006eb2:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS2MDC_ReadReg;
 8006eb4:	4b64      	ldr	r3, [pc, #400]	@ (8007048 <BSP_MOTION_SENSOR_Init+0x348>)
 8006eb6:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_IIS2MDC_WriteReg;
 8006eb8:	4b64      	ldr	r3, [pc, #400]	@ (800704c <BSP_MOTION_SENSOR_Init+0x34c>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006eba:	4a65      	ldr	r2, [pc, #404]	@ (8007050 <BSP_MOTION_SENSOR_Init+0x350>)
  io_ctx.WriteReg    = BSP_IIS2MDC_WriteReg;
 8006ebc:	9306      	str	r3, [sp, #24]
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006ebe:	f108 0b5c 	add.w	fp, r8, #92	@ 0x5c
  io_ctx.GetTick     = BSP_GetTick;
 8006ec2:	4b58      	ldr	r3, [pc, #352]	@ (8007024 <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006ec4:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006ec6:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8006ec8:	2200      	movs	r2, #0
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006eca:	233d      	movs	r3, #61	@ 0x3d
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006ecc:	a902      	add	r1, sp, #8
 8006ece:	4658      	mov	r0, fp
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8006ed0:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006ed2:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006ed6:	f7fc f91d 	bl	8003114 <IIS2MDC_RegisterBusIO>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d1e3      	bne.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8006ede:	f10d 0107 	add.w	r1, sp, #7
 8006ee2:	4658      	mov	r0, fp
 8006ee4:	f7fc f880 	bl	8002fe8 <IIS2MDC_ReadID>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d1dc      	bne.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  else if (id != IIS2MDC_ID)
 8006eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	d1d8      	bne.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 8006ef4:	ae09      	add	r6, sp, #36	@ 0x24
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4658      	mov	r0, fp
 8006efa:	f7fb ffd1 	bl	8002ea0 <IIS2MDC_GetCapabilities>
    MotionCtx[IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006efe:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8006f02:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8006f06:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[IIS2MDC_0] = &iis2mdc_obj_0;
 8006f0a:	f8c8 b0cc 	str.w	fp, [r8, #204]	@ 0xcc
    MotionCtx[IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006f0e:	0093      	lsls	r3, r2, #2
 8006f10:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8006f14:	430b      	orrs	r3, r1
 8006f16:	f8c8 30bc 	str.w	r3, [r8, #188]	@ 0xbc
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006f1a:	f015 0904 	ands.w	r9, r5, #4
    MotionDrv[IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8006f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8007054 <BSP_MOTION_SENSOR_Init+0x354>)
 8006f20:	f8c8 30dc 	str.w	r3, [r8, #220]	@ 0xdc
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006f24:	f005 0a02 	and.w	sl, r5, #2
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006f28:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006f2c:	d002      	beq.n	8006f34 <BSP_MOTION_SENSOR_Init+0x234>
 8006f2e:	2a01      	cmp	r2, #1
 8006f30:	f000 8137 	beq.w	80071a2 <BSP_MOTION_SENSOR_Init+0x4a2>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	f040 80ea 	bne.w	800710e <BSP_MOTION_SENSOR_Init+0x40e>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006f3a:	f1ba 0f00 	cmp.w	sl, #0
 8006f3e:	d001      	beq.n	8006f44 <BSP_MOTION_SENSOR_Init+0x244>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d0b0      	beq.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  return ret;
 8006f44:	4844      	ldr	r0, [pc, #272]	@ (8007058 <BSP_MOTION_SENSOR_Init+0x358>)
 8006f46:	4b43      	ldr	r3, [pc, #268]	@ (8007054 <BSP_MOTION_SENSOR_Init+0x354>)
 8006f48:	e738      	b.n	8006dbc <BSP_MOTION_SENSOR_Init+0xbc>
  io_ctx.Init        = BSP_IIS2DH_Init;
 8006f4a:	4b44      	ldr	r3, [pc, #272]	@ (800705c <BSP_MOTION_SENSOR_Init+0x35c>)
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006f4c:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8007074 <BSP_MOTION_SENSOR_Init+0x374>
  io_ctx.Init        = BSP_IIS2DH_Init;
 8006f50:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS2DH_ReadReg;
 8006f52:	4b43      	ldr	r3, [pc, #268]	@ (8007060 <BSP_MOTION_SENSOR_Init+0x360>)
 8006f54:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_IIS2DH_WriteReg;
 8006f56:	4b43      	ldr	r3, [pc, #268]	@ (8007064 <BSP_MOTION_SENSOR_Init+0x364>)
  io_ctx.DeInit      = BSP_IIS2DH_DeInit;
 8006f58:	4a43      	ldr	r2, [pc, #268]	@ (8007068 <BSP_MOTION_SENSOR_Init+0x368>)
  io_ctx.WriteReg    = BSP_IIS2DH_WriteReg;
 8006f5a:	9306      	str	r3, [sp, #24]
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006f5c:	f108 0b30 	add.w	fp, r8, #48	@ 0x30
  io_ctx.GetTick     = BSP_GetTick;
 8006f60:	4b30      	ldr	r3, [pc, #192]	@ (8007024 <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_IIS2DH_DeInit;
 8006f62:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006f64:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = IIS2DH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006f66:	2201      	movs	r2, #1
  io_ctx.Address     = 0x0;
 8006f68:	2300      	movs	r3, #0
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006f6a:	a902      	add	r1, sp, #8
 8006f6c:	4658      	mov	r0, fp
  io_ctx.BusType     = IIS2DH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006f6e:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = 0x0;
 8006f70:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006f74:	f7fb fdb2 	bl	8002adc <IIS2DH_RegisterBusIO>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d194      	bne.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  else if (IIS2DH_ReadID(&iis2dh_obj_0, &id) != IIS2DH_OK)
 8006f7c:	f10d 0107 	add.w	r1, sp, #7
 8006f80:	4658      	mov	r0, fp
 8006f82:	f7fb fc2b 	bl	80027dc <IIS2DH_ReadID>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d18d      	bne.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  else if (id != IIS2DH_ID)
 8006f8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f8e:	2b33      	cmp	r3, #51	@ 0x33
 8006f90:	d189      	bne.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    (void)IIS2DH_GetCapabilities(&iis2dh_obj_0, &cap);
 8006f92:	ae09      	add	r6, sp, #36	@ 0x24
 8006f94:	4631      	mov	r1, r6
 8006f96:	4658      	mov	r0, fp
 8006f98:	f7fb fa66 	bl	8002468 <IIS2DH_GetCapabilities>
    MotionCtx[IIS2DH_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006f9c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006fa0:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006fa4:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[IIS2DH_0] = &iis2dh_obj_0;
 8006fa8:	f8c8 b0c8 	str.w	fp, [r8, #200]	@ 0xc8
    MotionCtx[IIS2DH_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006fac:	0083      	lsls	r3, r0, #2
 8006fae:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	f8c8 30b8 	str.w	r3, [r8, #184]	@ 0xb8
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006fb8:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[IIS2DH_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DH_COMMON_Driver;
 8006fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800706c <BSP_MOTION_SENSOR_Init+0x36c>)
 8006fbe:	f8c8 30d8 	str.w	r3, [r8, #216]	@ 0xd8
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006fc2:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006fc6:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006fca:	d002      	beq.n	8006fd2 <BSP_MOTION_SENSOR_Init+0x2d2>
 8006fcc:	2a01      	cmp	r2, #1
 8006fce:	f000 8100 	beq.w	80071d2 <BSP_MOTION_SENSOR_Init+0x4d2>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006fd2:	2f00      	cmp	r7, #0
 8006fd4:	f040 8091 	bne.w	80070fa <BSP_MOTION_SENSOR_Init+0x3fa>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006fd8:	f1b9 0f00 	cmp.w	r9, #0
 8006fdc:	d002      	beq.n	8006fe4 <BSP_MOTION_SENSOR_Init+0x2e4>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f43f af61 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  return ret;
 8006fe4:	4822      	ldr	r0, [pc, #136]	@ (8007070 <BSP_MOTION_SENSOR_Init+0x370>)
 8006fe6:	4b21      	ldr	r3, [pc, #132]	@ (800706c <BSP_MOTION_SENSOR_Init+0x36c>)
 8006fe8:	e6e8      	b.n	8006dbc <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006fea:	07e9      	lsls	r1, r5, #31
 8006fec:	f57f af05 	bpl.w	8006dfa <BSP_MOTION_SENSOR_Init+0xfa>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006ff0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006ff4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006ff8:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007000:	f8d2 00c8 	ldr.w	r0, [r2, #200]	@ 0xc8
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4798      	blx	r3
 8007008:	2800      	cmp	r0, #0
 800700a:	f43f aef6 	beq.w	8006dfa <BSP_MOTION_SENSOR_Init+0xfa>
        return BSP_ERROR_COMPONENT_FAILURE;
 800700e:	f06f 0004 	mvn.w	r0, #4
 8007012:	e6fb      	b.n	8006e0c <BSP_MOTION_SENSOR_Init+0x10c>
 8007014:	08006c19 	.word	0x08006c19
 8007018:	08006a81 	.word	0x08006a81
 800701c:	08006975 	.word	0x08006975
 8007020:	08006ce1 	.word	0x08006ce1
 8007024:	08006149 	.word	0x08006149
 8007028:	20000174 	.word	0x20000174
 800702c:	20002f6c 	.word	0x20002f6c
 8007030:	08006ae9 	.word	0x08006ae9
 8007034:	080069c9 	.word	0x080069c9
 8007038:	08006cf1 	.word	0x08006cf1
 800703c:	080068c1 	.word	0x080068c1
 8007040:	2000011c 	.word	0x2000011c
 8007044:	08006271 	.word	0x08006271
 8007048:	08006ccd 	.word	0x08006ccd
 800704c:	08006cbd 	.word	0x08006cbd
 8007050:	08006035 	.word	0x08006035
 8007054:	200000e8 	.word	0x200000e8
 8007058:	20002f40 	.word	0x20002f40
 800705c:	08006bb9 	.word	0x08006bb9
 8007060:	08006a21 	.word	0x08006a21
 8007064:	08006919 	.word	0x08006919
 8007068:	08006ad9 	.word	0x08006ad9
 800706c:	200000b4 	.word	0x200000b4
 8007070:	20002f14 	.word	0x20002f14
 8007074:	20002ee4 	.word	0x20002ee4
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007078:	07aa      	lsls	r2, r5, #30
 800707a:	f57f aec2 	bpl.w	8006e02 <BSP_MOTION_SENSOR_Init+0x102>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800707e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8007082:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007086:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800708a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800708e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4798      	blx	r3
 8007096:	2800      	cmp	r0, #0
 8007098:	d1b9      	bne.n	800700e <BSP_MOTION_SENSOR_Init+0x30e>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800709a:	f1b9 0f00 	cmp.w	r9, #0
 800709e:	f43f aeb4 	beq.w	8006e0a <BSP_MOTION_SENSOR_Init+0x10a>
 80070a2:	076b      	lsls	r3, r5, #29
 80070a4:	f57f aeb1 	bpl.w	8006e0a <BSP_MOTION_SENSOR_Init+0x10a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80070a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80070ac:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80070b0:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80070b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070b8:	f8d8 00c8 	ldr.w	r0, [r8, #200]	@ 0xc8
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4798      	blx	r3
 80070c0:	2800      	cmp	r0, #0
 80070c2:	f43f aea2 	beq.w	8006e0a <BSP_MOTION_SENSOR_Init+0x10a>
 80070c6:	e7a2      	b.n	800700e <BSP_MOTION_SENSOR_Init+0x30e>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 80070c8:	2900      	cmp	r1, #0
 80070ca:	f43f aeec 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 80070ce:	f1b9 0f00 	cmp.w	r9, #0
 80070d2:	f040 80a2 	bne.w	800721a <BSP_MOTION_SENSOR_Init+0x51a>
  return ret;
 80070d6:	4869      	ldr	r0, [pc, #420]	@ (800727c <BSP_MOTION_SENSOR_Init+0x57c>)
 80070d8:	4b69      	ldr	r3, [pc, #420]	@ (8007280 <BSP_MOTION_SENSOR_Init+0x580>)
 80070da:	e66f      	b.n	8006dbc <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80070dc:	2901      	cmp	r1, #1
 80070de:	f000 8090 	beq.w	8007202 <BSP_MOTION_SENSOR_Init+0x502>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 80070e2:	f1b9 0f00 	cmp.w	r9, #0
 80070e6:	f43f ae67 	beq.w	8006db8 <BSP_MOTION_SENSOR_Init+0xb8>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	f43f aedb 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80070f0:	f8d8 30e4 	ldr.w	r3, [r8, #228]	@ 0xe4
 80070f4:	f8d8 00d4 	ldr.w	r0, [r8, #212]	@ 0xd4
 80070f8:	e660      	b.n	8006dbc <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 80070fa:	2900      	cmp	r1, #0
 80070fc:	f43f aed3 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8007100:	f1b9 0f00 	cmp.w	r9, #0
 8007104:	f43f af6e 	beq.w	8006fe4 <BSP_MOTION_SENSOR_Init+0x2e4>
 8007108:	2800      	cmp	r0, #0
 800710a:	d175      	bne.n	80071f8 <BSP_MOTION_SENSOR_Init+0x4f8>
 800710c:	e6cb      	b.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 800710e:	2900      	cmp	r1, #0
 8007110:	f43f aec9 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8007114:	f1ba 0f00 	cmp.w	sl, #0
 8007118:	f43f af14 	beq.w	8006f44 <BSP_MOTION_SENSOR_Init+0x244>
 800711c:	2800      	cmp	r0, #0
 800711e:	d153      	bne.n	80071c8 <BSP_MOTION_SENSOR_Init+0x4c8>
 8007120:	e6c1      	b.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8007122:	2800      	cmp	r0, #0
 8007124:	f47f ae48 	bne.w	8006db8 <BSP_MOTION_SENSOR_Init+0xb8>
 8007128:	e6bd      	b.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 800712a:	4a56      	ldr	r2, [pc, #344]	@ (8007284 <BSP_MOTION_SENSOR_Init+0x584>)
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 800712c:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 800712e:	f8c8 2110 	str.w	r2, [r8, #272]	@ 0x110
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8007132:	4658      	mov	r0, fp
 8007134:	4798      	blx	r3
 8007136:	2800      	cmp	r0, #0
 8007138:	d072      	beq.n	8007220 <BSP_MOTION_SENSOR_Init+0x520>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800713a:	2f00      	cmp	r7, #0
 800713c:	f43f aeb3 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
 8007140:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8007144:	2b01      	cmp	r3, #1
 8007146:	f47f aeae 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 800714a:	f8d8 30e4 	ldr.w	r3, [r8, #228]	@ 0xe4
 800714e:	f8d8 00d4 	ldr.w	r0, [r8, #212]	@ 0xd4
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8007152:	4a4d      	ldr	r2, [pc, #308]	@ (8007288 <BSP_MOTION_SENSOR_Init+0x588>)
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8007154:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8007156:	f8c8 210c 	str.w	r2, [r8, #268]	@ 0x10c
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 800715a:	4798      	blx	r3
 800715c:	2800      	cmp	r0, #0
 800715e:	f47f aea2 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8007162:	f1b9 0f00 	cmp.w	r9, #0
 8007166:	d0c3      	beq.n	80070f0 <BSP_MOTION_SENSOR_Init+0x3f0>
 8007168:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1bf      	bne.n	80070f0 <BSP_MOTION_SENSOR_Init+0x3f0>
 8007170:	e699      	b.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
      MotionFuncDrv[IIS3DWB_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS3DWB_ACC_Driver;
 8007172:	4a46      	ldr	r2, [pc, #280]	@ (800728c <BSP_MOTION_SENSOR_Init+0x58c>)
      if (MotionDrv[IIS3DWB_0]->Init(MotionCompObj[IIS3DWB_0]) != IIS3DWB_OK)
 8007174:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS3DWB_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS3DWB_ACC_Driver;
 8007176:	f8c8 2104 	str.w	r2, [r8, #260]	@ 0x104
      if (MotionDrv[IIS3DWB_0]->Init(MotionCompObj[IIS3DWB_0]) != IIS3DWB_OK)
 800717a:	4640      	mov	r0, r8
 800717c:	4798      	blx	r3
 800717e:	2800      	cmp	r0, #0
 8007180:	f47f ae91 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8007184:	2f00      	cmp	r7, #0
 8007186:	d13e      	bne.n	8007206 <BSP_MOTION_SENSOR_Init+0x506>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8007188:	f1b9 0f00 	cmp.w	r9, #0
 800718c:	d004      	beq.n	8007198 <BSP_MOTION_SENSOR_Init+0x498>
 800718e:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8007192:	2b00      	cmp	r3, #0
 8007194:	f43f ae87 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007198:	f8d8 30e0 	ldr.w	r3, [r8, #224]	@ 0xe0
 800719c:	f8d8 00d0 	ldr.w	r0, [r8, #208]	@ 0xd0
 80071a0:	e60c      	b.n	8006dbc <BSP_MOTION_SENSOR_Init+0xbc>
      MotionFuncDrv[IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2MDC_MAG_Driver;
 80071a2:	4a3b      	ldr	r2, [pc, #236]	@ (8007290 <BSP_MOTION_SENSOR_Init+0x590>)
      if (MotionDrv[IIS2MDC_0]->Init(MotionCompObj[IIS2MDC_0]) != IIS2MDC_OK)
 80071a4:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2MDC_MAG_Driver;
 80071a6:	f8c8 20fc 	str.w	r2, [r8, #252]	@ 0xfc
      if (MotionDrv[IIS2MDC_0]->Init(MotionCompObj[IIS2MDC_0]) != IIS2MDC_OK)
 80071aa:	4658      	mov	r0, fp
 80071ac:	4798      	blx	r3
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f47f ae79 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 80071b4:	2f00      	cmp	r7, #0
 80071b6:	d143      	bne.n	8007240 <BSP_MOTION_SENSOR_Init+0x540>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 80071b8:	f1ba 0f00 	cmp.w	sl, #0
 80071bc:	d004      	beq.n	80071c8 <BSP_MOTION_SENSOR_Init+0x4c8>
 80071be:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f43f ae6f 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80071c8:	f8d8 30dc 	ldr.w	r3, [r8, #220]	@ 0xdc
 80071cc:	f8d8 00cc 	ldr.w	r0, [r8, #204]	@ 0xcc
 80071d0:	e5f4      	b.n	8006dbc <BSP_MOTION_SENSOR_Init+0xbc>
      MotionFuncDrv[IIS2DH_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2DH_ACC_Driver;
 80071d2:	4a30      	ldr	r2, [pc, #192]	@ (8007294 <BSP_MOTION_SENSOR_Init+0x594>)
      if (MotionDrv[IIS2DH_0]->Init(MotionCompObj[IIS2DH_0]) != IIS2DH_OK)
 80071d4:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS2DH_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2DH_ACC_Driver;
 80071d6:	f8c8 20ec 	str.w	r2, [r8, #236]	@ 0xec
      if (MotionDrv[IIS2DH_0]->Init(MotionCompObj[IIS2DH_0]) != IIS2DH_OK)
 80071da:	4658      	mov	r0, fp
 80071dc:	4798      	blx	r3
 80071de:	2800      	cmp	r0, #0
 80071e0:	f47f ae61 	bne.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 80071e4:	2f00      	cmp	r7, #0
 80071e6:	d138      	bne.n	800725a <BSP_MOTION_SENSOR_Init+0x55a>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 80071e8:	f1b9 0f00 	cmp.w	r9, #0
 80071ec:	d004      	beq.n	80071f8 <BSP_MOTION_SENSOR_Init+0x4f8>
 80071ee:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f43f ae57 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80071f8:	f8d8 30d8 	ldr.w	r3, [r8, #216]	@ 0xd8
 80071fc:	f8d8 00c8 	ldr.w	r0, [r8, #200]	@ 0xc8
 8007200:	e5dc      	b.n	8006dbc <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8007202:	4658      	mov	r0, fp
 8007204:	e7a5      	b.n	8007152 <BSP_MOTION_SENSOR_Init+0x452>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8007206:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800720a:	2b00      	cmp	r3, #0
 800720c:	f43f ae4b 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8007210:	f1b9 0f00 	cmp.w	r9, #0
 8007214:	d0c0      	beq.n	8007198 <BSP_MOTION_SENSOR_Init+0x498>
 8007216:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 800721a:	2800      	cmp	r0, #0
 800721c:	d1bc      	bne.n	8007198 <BSP_MOTION_SENSOR_Init+0x498>
 800721e:	e642      	b.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8007220:	2f00      	cmp	r7, #0
 8007222:	d09e      	beq.n	8007162 <BSP_MOTION_SENSOR_Init+0x462>
 8007224:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8007228:	2b01      	cmp	r3, #1
 800722a:	d08e      	beq.n	800714a <BSP_MOTION_SENSOR_Init+0x44a>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 800722c:	f1b9 0f00 	cmp.w	r9, #0
 8007230:	f43f af5e 	beq.w	80070f0 <BSP_MOTION_SENSOR_Init+0x3f0>
 8007234:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8007238:	e757      	b.n	80070ea <BSP_MOTION_SENSOR_Init+0x3ea>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800723a:	f06f 0006 	mvn.w	r0, #6
 800723e:	e5e5      	b.n	8006e0c <BSP_MOTION_SENSOR_Init+0x10c>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8007240:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8007244:	2b00      	cmp	r3, #0
 8007246:	f43f ae2e 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 800724a:	f1ba 0f00 	cmp.w	sl, #0
 800724e:	d0bb      	beq.n	80071c8 <BSP_MOTION_SENSOR_Init+0x4c8>
 8007250:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8007254:	2800      	cmp	r0, #0
 8007256:	d1b7      	bne.n	80071c8 <BSP_MOTION_SENSOR_Init+0x4c8>
 8007258:	e625      	b.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 800725a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800725e:	2b00      	cmp	r3, #0
 8007260:	f43f ae21 	beq.w	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8007264:	f1b9 0f00 	cmp.w	r9, #0
 8007268:	d0c6      	beq.n	80071f8 <BSP_MOTION_SENSOR_Init+0x4f8>
 800726a:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 800726e:	2800      	cmp	r0, #0
 8007270:	d1c2      	bne.n	80071f8 <BSP_MOTION_SENSOR_Init+0x4f8>
 8007272:	e618      	b.n	8006ea6 <BSP_MOTION_SENSOR_Init+0x1a6>
  switch (Instance)
 8007274:	f06f 0001 	mvn.w	r0, #1
 8007278:	e5c8      	b.n	8006e0c <BSP_MOTION_SENSOR_Init+0x10c>
 800727a:	bf00      	nop
 800727c:	20002ee4 	.word	0x20002ee4
 8007280:	2000011c 	.word	0x2000011c
 8007284:	20000150 	.word	0x20000150
 8007288:	2000012c 	.word	0x2000012c
 800728c:	200000f8 	.word	0x200000f8
 8007290:	200000c4 	.word	0x200000c4
 8007294:	20000090 	.word	0x20000090

08007298 <BSP_MOTION_SENSOR_GetAxes>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8007298:	2803      	cmp	r0, #3
 800729a:	d821      	bhi.n	80072e0 <BSP_MOTION_SENSOR_GetAxes+0x48>
{
 800729c:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800729e:	4c12      	ldr	r4, [pc, #72]	@ (80072e8 <BSP_MOTION_SENSOR_GetAxes+0x50>)
 80072a0:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 80072a4:	460b      	mov	r3, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	f8dc 20b8 	ldr.w	r2, [ip, #184]	@ 0xb8
 80072ac:	ea03 0e02 	and.w	lr, r3, r2
 80072b0:	4393      	bics	r3, r2
 80072b2:	d112      	bne.n	80072da <BSP_MOTION_SENSOR_GetAxes+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80072b4:	4a0d      	ldr	r2, [pc, #52]	@ (80072ec <BSP_MOTION_SENSOR_GetAxes+0x54>)
 80072b6:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80072ba:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80072be:	4413      	add	r3, r2
 80072c0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80072c4:	f8dc 00c8 	ldr.w	r0, [ip, #200]	@ 0xc8
 80072c8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80072d0:	2800      	cmp	r0, #0
 80072d2:	bf18      	it	ne
 80072d4:	f06f 0004 	mvnne.w	r0, #4
}
 80072d8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80072da:	f06f 0001 	mvn.w	r0, #1
}
 80072de:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80072e0:	f06f 0001 	mvn.w	r0, #1
}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20002ee4 	.word	0x20002ee4
 80072ec:	080172d0 	.word	0x080172d0

080072f0 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= MOTION_INSTANCES_NBR)
 80072f0:	2803      	cmp	r0, #3
 80072f2:	d81f      	bhi.n	8007334 <BSP_MOTION_SENSOR_SetOutputDataRate+0x44>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80072f4:	4a11      	ldr	r2, [pc, #68]	@ (800733c <BSP_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 80072f6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
{
 80072fa:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80072fc:	f8dc 30b8 	ldr.w	r3, [ip, #184]	@ 0xb8
 8007300:	ea01 0e03 	and.w	lr, r1, r3
 8007304:	4399      	bics	r1, r3
 8007306:	d112      	bne.n	800732e <BSP_MOTION_SENSOR_SetOutputDataRate+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007308:	490d      	ldr	r1, [pc, #52]	@ (8007340 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>)
 800730a:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 800730e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007312:	440b      	add	r3, r1
 8007314:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007318:	f8dc 00c8 	ldr.w	r0, [ip, #200]	@ 0xc8
 800731c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007324:	2800      	cmp	r0, #0
 8007326:	bf18      	it	ne
 8007328:	f06f 0004 	mvnne.w	r0, #4
}
 800732c:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800732e:	f06f 0001 	mvn.w	r0, #1
}
 8007332:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007334:	f06f 0001 	mvn.w	r0, #1
}
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	20002ee4 	.word	0x20002ee4
 8007340:	080172d0 	.word	0x080172d0

08007344 <BSP_MOTION_SENSOR_SetFullScale>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8007344:	2803      	cmp	r0, #3
 8007346:	d821      	bhi.n	800738c <BSP_MOTION_SENSOR_SetFullScale+0x48>
{
 8007348:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800734a:	4c12      	ldr	r4, [pc, #72]	@ (8007394 <BSP_MOTION_SENSOR_SetFullScale+0x50>)
 800734c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8007350:	460b      	mov	r3, r1
 8007352:	4611      	mov	r1, r2
 8007354:	f8dc 20b8 	ldr.w	r2, [ip, #184]	@ 0xb8
 8007358:	ea03 0e02 	and.w	lr, r3, r2
 800735c:	4393      	bics	r3, r2
 800735e:	d112      	bne.n	8007386 <BSP_MOTION_SENSOR_SetFullScale+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8007360:	4a0d      	ldr	r2, [pc, #52]	@ (8007398 <BSP_MOTION_SENSOR_SetFullScale+0x54>)
 8007362:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8007366:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800736a:	4413      	add	r3, r2
 800736c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007370:	f8dc 00c8 	ldr.w	r0, [ip, #200]	@ 0xc8
 8007374:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800737c:	2800      	cmp	r0, #0
 800737e:	bf18      	it	ne
 8007380:	f06f 0004 	mvnne.w	r0, #4
}
 8007384:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007386:	f06f 0001 	mvn.w	r0, #1
}
 800738a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800738c:	f06f 0001 	mvn.w	r0, #1
}
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20002ee4 	.word	0x20002ee4
 8007398:	080172d0 	.word	0x080172d0
 800739c:	00000000 	.word	0x00000000

080073a0 <BSP_SD_Detect_Init>:
 */
void BSP_SD_Detect_Init(void)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 80073a0:	4b0f      	ldr	r3, [pc, #60]	@ (80073e0 <BSP_SD_Detect_Init+0x40>)
  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80073a2:	4810      	ldr	r0, [pc, #64]	@ (80073e4 <BSP_SD_Detect_Init+0x44>)
  SD_DETECT_GPIO_CLK_ENABLE();
 80073a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 80073a6:	b500      	push	{lr}
  SD_DETECT_GPIO_CLK_ENABLE();
 80073a8:	f042 0202 	orr.w	r2, r2, #2
 80073ac:	64da      	str	r2, [r3, #76]	@ 0x4c
 80073ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 80073b0:	b089      	sub	sp, #36	@ 0x24
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 80073b2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80073d8 <BSP_SD_Detect_Init+0x38>
  SD_DETECT_GPIO_CLK_ENABLE();
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 80073bc:	2201      	movs	r2, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80073be:	a902      	add	r1, sp, #8
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 80073c0:	2300      	movs	r3, #0
 80073c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073c6:	ed8d 7b02 	vstr	d7, [sp, #8]
  SD_DETECT_GPIO_CLK_ENABLE();
 80073ca:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80073cc:	f000 feac 	bl	8008128 <HAL_GPIO_Init>
}
 80073d0:	b009      	add	sp, #36	@ 0x24
 80073d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80073d6:	bf00      	nop
 80073d8:	00001000 	.word	0x00001000
 80073dc:	00000000 	.word	0x00000000
 80073e0:	40021000 	.word	0x40021000
 80073e4:	48000400 	.word	0x48000400

080073e8 <BSP_SD_DetectCallback>:
{
  /* NOTE: This function Should not be modified, when the callback is needed,
  the BSP_SD_DetectCallback could be implemented in the user file
  */ 
  
}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop

080073ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80073ec:	4684      	mov	ip, r0
 80073ee:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80073f0:	4804      	ldr	r0, [pc, #16]	@ (8007404 <BSP_SD_ReadBlocks_DMA+0x18>)
{
 80073f2:	4613      	mov	r3, r2
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80073f4:	460a      	mov	r2, r1
 80073f6:	4661      	mov	r1, ip
 80073f8:	f003 fefc 	bl	800b1f4 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 80073fc:	3800      	subs	r0, #0
 80073fe:	bf18      	it	ne
 8007400:	2001      	movne	r0, #1
 8007402:	bd08      	pop	{r3, pc}
 8007404:	200010c8 	.word	0x200010c8

08007408 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007408:	4684      	mov	ip, r0
 800740a:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800740c:	4804      	ldr	r0, [pc, #16]	@ (8007420 <BSP_SD_WriteBlocks_DMA+0x18>)
{
 800740e:	4613      	mov	r3, r2
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007410:	460a      	mov	r2, r1
 8007412:	4661      	mov	r1, ip
 8007414:	f003 ff54 	bl	800b2c0 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 8007418:	3800      	subs	r0, #0
 800741a:	bf18      	it	ne
 800741c:	2001      	movne	r0, #1
 800741e:	bd08      	pop	{r3, pc}
 8007420:	200010c8 	.word	0x200010c8

08007424 <BSP_SD_MspInit>:
{
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007424:	4b1e      	ldr	r3, [pc, #120]	@ (80074a0 <BSP_SD_MspInit+0x7c>)
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8007426:	481f      	ldr	r0, [pc, #124]	@ (80074a4 <BSP_SD_MspInit+0x80>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007428:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 800742a:	b500      	push	{lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800742c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007430:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 8007434:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007436:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800743a:	9201      	str	r2, [sp, #4]
 800743c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800743e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007440:	f042 0204 	orr.w	r2, r2, #4
 8007444:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007448:	f002 0204 	and.w	r2, r2, #4
 800744c:	9202      	str	r2, [sp, #8]
 800744e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007450:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007452:	f042 0208 	orr.w	r2, r2, #8
 8007456:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8007460:	210c      	movs	r1, #12
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8007462:	f44f 52f8 	mov.w	r2, #7936	@ 0x1f00
 8007466:	2302      	movs	r3, #2
 8007468:	e9cd 2304 	strd	r2, r3, [sp, #16]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 800746c:	9108      	str	r1, [sp, #32]
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800746e:	2201      	movs	r2, #1
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8007470:	a904      	add	r1, sp, #16
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8007472:	2303      	movs	r3, #3
 8007474:	e9cd 2306 	strd	r2, r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007478:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800747a:	f000 fe55 	bl	8008128 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 800747e:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8007480:	a904      	add	r1, sp, #16
 8007482:	4809      	ldr	r0, [pc, #36]	@ (80074a8 <BSP_SD_MspInit+0x84>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 8007484:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8007486:	f000 fe4f 	bl	8008128 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 800748a:	2200      	movs	r2, #0
 800748c:	2105      	movs	r1, #5
 800748e:	2031      	movs	r0, #49	@ 0x31
 8007490:	f000 fdda 	bl	8008048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8007494:	2031      	movs	r0, #49	@ 0x31
 8007496:	f000 fe13 	bl	80080c0 <HAL_NVIC_EnableIRQ>


}
 800749a:	b00b      	add	sp, #44	@ 0x2c
 800749c:	f85d fb04 	ldr.w	pc, [sp], #4
 80074a0:	40021000 	.word	0x40021000
 80074a4:	48000800 	.word	0x48000800
 80074a8:	48000c00 	.word	0x48000c00

080074ac <BSP_SD_Init>:
  hsd1.Instance = SDMMC1;
 80074ac:	4813      	ldr	r0, [pc, #76]	@ (80074fc <BSP_SD_Init+0x50>)
 80074ae:	4914      	ldr	r1, [pc, #80]	@ (8007500 <BSP_SD_Init+0x54>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80074b0:	2300      	movs	r3, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80074b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
{
 80074b6:	b510      	push	{r4, lr}
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80074b8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hsd1.Init.ClockDiv = 1;
 80074bc:	2401      	movs	r4, #1
 80074be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80074c2:	e9c0 1300 	strd	r1, r3, [r0]
  hsd1.Init.ClockDiv = 1;
 80074c6:	6183      	str	r3, [r0, #24]
 80074c8:	e9c0 2404 	strd	r2, r4, [r0, #16]
  BSP_SD_MspInit(&hsd1);
 80074cc:	f7ff ffaa 	bl	8007424 <BSP_SD_MspInit>
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 80074d0:	480c      	ldr	r0, [pc, #48]	@ (8007504 <BSP_SD_Init+0x58>)
 80074d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80074d6:	f000 fff9 	bl	80084cc <HAL_GPIO_ReadPin>
    SD_Status = SD_NOT_PRESENT;
 80074da:	4b0b      	ldr	r3, [pc, #44]	@ (8007508 <BSP_SD_Init+0x5c>)
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 80074dc:	b928      	cbnz	r0, 80074ea <BSP_SD_Init+0x3e>
    SD_Status = SD_NOT_PRESENT;
 80074de:	7018      	strb	r0, [r3, #0]
  return SD_Status;
 80074e0:	781b      	ldrb	r3, [r3, #0]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d005      	beq.n	80074f2 <BSP_SD_Init+0x46>
}
 80074e6:	2002      	movs	r0, #2
 80074e8:	bd10      	pop	{r4, pc}
    SD_Status = SD_PRESENT;
 80074ea:	701c      	strb	r4, [r3, #0]
  return SD_Status;
 80074ec:	781b      	ldrb	r3, [r3, #0]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d1f9      	bne.n	80074e6 <BSP_SD_Init+0x3a>
}
 80074f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 80074f6:	4801      	ldr	r0, [pc, #4]	@ (80074fc <BSP_SD_Init+0x50>)
 80074f8:	f004 bc84 	b.w	800be04 <HAL_SD_Init>
 80074fc:	200010c8 	.word	0x200010c8
 8007500:	50062400 	.word	0x50062400
 8007504:	48000400 	.word	0x48000400
 8007508:	20002ffc 	.word	0x20002ffc

0800750c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800750c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800750e:	4803      	ldr	r0, [pc, #12]	@ (800751c <BSP_SD_GetCardState+0x10>)
 8007510:	f004 fcdc 	bl	800becc <HAL_SD_GetCardState>
}
 8007514:	3804      	subs	r0, #4
 8007516:	bf18      	it	ne
 8007518:	2001      	movne	r0, #1
 800751a:	bd08      	pop	{r3, pc}
 800751c:	200010c8 	.word	0x200010c8

08007520 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007520:	4601      	mov	r1, r0
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007522:	4801      	ldr	r0, [pc, #4]	@ (8007528 <BSP_SD_GetCardInfo+0x8>)
 8007524:	f004 bb8c 	b.w	800bc40 <HAL_SD_GetCardInfo>
 8007528:	200010c8 	.word	0x200010c8

0800752c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800752c:	b508      	push	{r3, lr}
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 800752e:	f00a fb99 	bl	8011c64 <BSP_SD_WriteCpltCallback>
}
 8007532:	bd08      	pop	{r3, pc}

08007534 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007534:	b508      	push	{r3, lr}
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8007536:	f00a fb9b 	bl	8011c70 <BSP_SD_ReadCpltCallback>
}
 800753a:	bd08      	pop	{r3, pc}

0800753c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800753c:	4911      	ldr	r1, [pc, #68]	@ (8007584 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800753e:	4b12      	ldr	r3, [pc, #72]	@ (8007588 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007540:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007544:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
{
 8007548:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800754a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 800754e:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007550:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007558:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8007560:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8007564:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8007568:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000;
 800756a:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800756c:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800756e:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007572:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007576:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 8007578:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800757a:	608c      	str	r4, [r1, #8]
#endif
}
 800757c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	e000ed00 	.word	0xe000ed00
 8007588:	40021000 	.word	0x40021000

0800758c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop

08007590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007590:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007592:	4e0f      	ldr	r6, [pc, #60]	@ (80075d0 <HAL_InitTick+0x40>)
 8007594:	7833      	ldrb	r3, [r6, #0]
 8007596:	b90b      	cbnz	r3, 800759c <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8007598:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800759a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800759c:	490d      	ldr	r1, [pc, #52]	@ (80075d4 <HAL_InitTick+0x44>)
 800759e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80075a2:	4605      	mov	r5, r0
 80075a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a8:	6808      	ldr	r0, [r1, #0]
 80075aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80075ae:	f000 fd95 	bl	80080dc <HAL_SYSTICK_Config>
 80075b2:	4604      	mov	r4, r0
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d1ef      	bne.n	8007598 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075b8:	2d0f      	cmp	r5, #15
 80075ba:	d8ed      	bhi.n	8007598 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075bc:	4602      	mov	r2, r0
 80075be:	4629      	mov	r1, r5
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075c4:	f000 fd40 	bl	8008048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80075c8:	6075      	str	r5, [r6, #4]
 80075ca:	4620      	mov	r0, r4
}
 80075cc:	bd70      	pop	{r4, r5, r6, pc}
 80075ce:	bf00      	nop
 80075d0:	200001e4 	.word	0x200001e4
 80075d4:	200001e0 	.word	0x200001e0

080075d8 <HAL_Init>:
{
 80075d8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075da:	2003      	movs	r0, #3
 80075dc:	f000 fd22 	bl	8008024 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80075e0:	2000      	movs	r0, #0
 80075e2:	f7ff ffd5 	bl	8007590 <HAL_InitTick>
 80075e6:	b110      	cbz	r0, 80075ee <HAL_Init+0x16>
    status = HAL_ERROR;
 80075e8:	2401      	movs	r4, #1
}
 80075ea:	4620      	mov	r0, r4
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	4604      	mov	r4, r0
    HAL_MspInit();
 80075f0:	f7ff ffcc 	bl	800758c <HAL_MspInit>
}
 80075f4:	4620      	mov	r0, r4
 80075f6:	bd10      	pop	{r4, pc}

080075f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80075f8:	4a03      	ldr	r2, [pc, #12]	@ (8007608 <HAL_IncTick+0x10>)
 80075fa:	4b04      	ldr	r3, [pc, #16]	@ (800760c <HAL_IncTick+0x14>)
 80075fc:	6811      	ldr	r1, [r2, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	440b      	add	r3, r1
 8007602:	6013      	str	r3, [r2, #0]
}
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20003000 	.word	0x20003000
 800760c:	200001e4 	.word	0x200001e4

08007610 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007610:	4b01      	ldr	r3, [pc, #4]	@ (8007618 <HAL_GetTick+0x8>)
 8007612:	6818      	ldr	r0, [r3, #0]
}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20003000 	.word	0x20003000

0800761c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007620:	f7ff fff6 	bl	8007610 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007624:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8007626:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8007628:	d002      	beq.n	8007630 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 800762a:	4b04      	ldr	r3, [pc, #16]	@ (800763c <HAL_Delay+0x20>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007630:	f7ff ffee 	bl	8007610 <HAL_GetTick>
 8007634:	1b40      	subs	r0, r0, r5
 8007636:	42a0      	cmp	r0, r4
 8007638:	d3fa      	bcc.n	8007630 <HAL_Delay+0x14>
  {
  }
}
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	200001e4 	.word	0x200001e4

08007640 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007640:	b530      	push	{r4, r5, lr}
 8007642:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007644:	2300      	movs	r3, #0
 8007646:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007648:	2800      	cmp	r0, #0
 800764a:	f000 8087 	beq.w	800775c <HAL_ADC_Init+0x11c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800764e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8007650:	4604      	mov	r4, r0
 8007652:	2d00      	cmp	r5, #0
 8007654:	f000 8087 	beq.w	8007766 <HAL_ADC_Init+0x126>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007658:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800765a:	6893      	ldr	r3, [r2, #8]
 800765c:	0098      	lsls	r0, r3, #2
 800765e:	d505      	bpl.n	800766c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007660:	6893      	ldr	r3, [r2, #8]
 8007662:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007666:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800766a:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800766c:	6893      	ldr	r3, [r2, #8]
 800766e:	00d9      	lsls	r1, r3, #3
 8007670:	d419      	bmi.n	80076a6 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007672:	4b5b      	ldr	r3, [pc, #364]	@ (80077e0 <HAL_ADC_Init+0x1a0>)
 8007674:	485b      	ldr	r0, [pc, #364]	@ (80077e4 <HAL_ADC_Init+0x1a4>)
 8007676:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8007678:	6891      	ldr	r1, [r2, #8]
 800767a:	099b      	lsrs	r3, r3, #6
 800767c:	fba0 0303 	umull	r0, r3, r0, r3
 8007680:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8007684:	099b      	lsrs	r3, r3, #6
 8007686:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800768a:	3301      	adds	r3, #1
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8007692:	6091      	str	r1, [r2, #8]
 8007694:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	b12b      	cbz	r3, 80076a6 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	3b01      	subs	r3, #1
 800769e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80076a0:	9b01      	ldr	r3, [sp, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f9      	bne.n	800769a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80076a6:	6893      	ldr	r3, [r2, #8]
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	d45a      	bmi.n	8007762 <HAL_ADC_Init+0x122>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076ae:	f043 0310 	orr.w	r3, r3, #16
 80076b2:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076b4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80076b6:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076b8:	4303      	orrs	r3, r0
 80076ba:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076bc:	6893      	ldr	r3, [r2, #8]
 80076be:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80076c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076c4:	d146      	bne.n	8007754 <HAL_ADC_Init+0x114>
 80076c6:	06dd      	lsls	r5, r3, #27
 80076c8:	d444      	bmi.n	8007754 <HAL_ADC_Init+0x114>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80076d0:	f043 0302 	orr.w	r3, r3, #2
 80076d4:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076d6:	6893      	ldr	r3, [r2, #8]
 80076d8:	07d9      	lsls	r1, r3, #31
 80076da:	d40a      	bmi.n	80076f2 <HAL_ADC_Init+0xb2>
 80076dc:	4b42      	ldr	r3, [pc, #264]	@ (80077e8 <HAL_ADC_Init+0x1a8>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	07db      	lsls	r3, r3, #31
 80076e2:	d406      	bmi.n	80076f2 <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80076e4:	4941      	ldr	r1, [pc, #260]	@ (80077ec <HAL_ADC_Init+0x1ac>)
 80076e6:	6865      	ldr	r5, [r4, #4]
 80076e8:	688b      	ldr	r3, [r1, #8]
 80076ea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80076ee:	432b      	orrs	r3, r5
 80076f0:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80076f2:	68e5      	ldr	r5, [r4, #12]
 80076f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80076f6:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80076fa:	432b      	orrs	r3, r5
 80076fc:	68a5      	ldr	r5, [r4, #8]
 80076fe:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007700:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007702:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8007704:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800770c:	d049      	beq.n	80077a2 <HAL_ADC_Init+0x162>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800770e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007710:	b121      	cbz	r1, 800771c <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8007712:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007714:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007718:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800771a:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800771c:	68d5      	ldr	r5, [r2, #12]
 800771e:	4934      	ldr	r1, [pc, #208]	@ (80077f0 <HAL_ADC_Init+0x1b0>)
 8007720:	4029      	ands	r1, r5
 8007722:	4319      	orrs	r1, r3
 8007724:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007726:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007728:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800772a:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	430b      	orrs	r3, r1
 8007734:	d01d      	beq.n	8007772 <HAL_ADC_Init+0x132>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d037      	beq.n	80077ac <HAL_ADC_Init+0x16c>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800773c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800773e:	f023 030f 	bic.w	r3, r3, #15
 8007742:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007744:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8007750:	b003      	add	sp, #12
 8007752:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007754:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007756:	f043 0310 	orr.w	r3, r3, #16
 800775a:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800775c:	2001      	movs	r0, #1
}
 800775e:	b003      	add	sp, #12
 8007760:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007762:	2000      	movs	r0, #0
 8007764:	e7aa      	b.n	80076bc <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8007766:	f7fe f97f 	bl	8005a68 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800776a:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800776c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8007770:	e772      	b.n	8007658 <HAL_ADC_Init+0x18>
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007772:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007776:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007778:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800777a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800777c:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8007780:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007782:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8007786:	f021 0106 	bic.w	r1, r1, #6
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800778a:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800778c:	430b      	orrs	r3, r1
 800778e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8007790:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8007794:	2b01      	cmp	r3, #1
 8007796:	d011      	beq.n	80077bc <HAL_ADC_Init+0x17c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007798:	6913      	ldr	r3, [r2, #16]
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	6113      	str	r3, [r2, #16]
 80077a0:	e7c9      	b.n	8007736 <HAL_ADC_Init+0xf6>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80077a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80077a4:	3901      	subs	r1, #1
 80077a6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80077aa:	e7b0      	b.n	800770e <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80077ac:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80077ae:	69e3      	ldr	r3, [r4, #28]
 80077b0:	f021 010f 	bic.w	r1, r1, #15
 80077b4:	3b01      	subs	r3, #1
 80077b6:	430b      	orrs	r3, r1
 80077b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80077ba:	e7c3      	b.n	8007744 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 80077bc:	6911      	ldr	r1, [r2, #16]
 80077be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80077c0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80077c2:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 80077c6:	f021 0104 	bic.w	r1, r1, #4
 80077ca:	432b      	orrs	r3, r5
 80077cc:	430b      	orrs	r3, r1
 80077ce:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80077d0:	430b      	orrs	r3, r1
 80077d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077d4:	430b      	orrs	r3, r1
 80077d6:	f043 0301 	orr.w	r3, r3, #1
 80077da:	6113      	str	r3, [r2, #16]
 80077dc:	e7ab      	b.n	8007736 <HAL_ADC_Init+0xf6>
 80077de:	bf00      	nop
 80077e0:	200001e0 	.word	0x200001e0
 80077e4:	053e2d63 	.word	0x053e2d63
 80077e8:	50040000 	.word	0x50040000
 80077ec:	50040300 	.word	0x50040300
 80077f0:	fff0c007 	.word	0xfff0c007

080077f4 <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 80077f4:	6d80      	ldr	r0, [r0, #88]	@ 0x58
}
 80077f6:	4770      	bx	lr

080077f8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80077f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	f012 0f04 	tst.w	r2, #4
{
 8007800:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007806:	d101      	bne.n	800780c <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007808:	0716      	lsls	r6, r2, #28
 800780a:	d53c      	bpl.n	8007886 <ADC_ConversionStop+0x8e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	0195      	lsls	r5, r2, #6
 8007810:	d504      	bpl.n	800781c <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007812:	8b20      	ldrh	r0, [r4, #24]
 8007814:	f240 1201 	movw	r2, #257	@ 0x101
 8007818:	4290      	cmp	r0, r2
 800781a:	d045      	beq.n	80078a8 <ADC_ConversionStop+0xb0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800781c:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	d033      	beq.n	800788a <ADC_ConversionStop+0x92>
 8007822:	0750      	lsls	r0, r2, #29
 8007824:	d502      	bpl.n	800782c <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	0792      	lsls	r2, r2, #30
 800782a:	d559      	bpl.n	80078e0 <ADC_ConversionStop+0xe8>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800782c:	2901      	cmp	r1, #1
 800782e:	d055      	beq.n	80078dc <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	0710      	lsls	r0, r2, #28
 8007834:	d50a      	bpl.n	800784c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	0792      	lsls	r2, r2, #30
 800783a:	d407      	bmi.n	800784c <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007842:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8007846:	f042 0220 	orr.w	r2, r2, #32
 800784a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800784c:	2903      	cmp	r1, #3
 800784e:	d145      	bne.n	80078dc <ADC_ConversionStop+0xe4>
 8007850:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007852:	f7ff fedd 	bl	8007610 <HAL_GetTick>

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007856:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007858:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	421d      	tst	r5, r3
 800785e:	d012      	beq.n	8007886 <ADC_ConversionStop+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007860:	f7ff fed6 	bl	8007610 <HAL_GetTick>
 8007864:	1b80      	subs	r0, r0, r6
 8007866:	2805      	cmp	r0, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007868:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800786a:	d9f6      	bls.n	800785a <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	422a      	tst	r2, r5
 8007870:	d0f3      	beq.n	800785a <ADC_ConversionStop+0x62>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007872:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007874:	f043 0310 	orr.w	r3, r3, #16
 8007878:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800787a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800787c:	f043 0301 	orr.w	r3, r3, #1
 8007880:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8007882:	2001      	movs	r0, #1

  }

  /* Return HAL status */
  return HAL_OK;
}
 8007884:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8007886:	2000      	movs	r0, #0
}
 8007888:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800788a:	0716      	lsls	r6, r2, #28
 800788c:	d50a      	bpl.n	80078a4 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	0795      	lsls	r5, r2, #30
 8007892:	d407      	bmi.n	80078a4 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800789a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800789e:	f042 0220 	orr.w	r2, r2, #32
 80078a2:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80078a4:	2508      	movs	r5, #8
 80078a6:	e7d4      	b.n	8007852 <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	0650      	lsls	r0, r2, #25
 80078ac:	d406      	bmi.n	80078bc <ADC_ConversionStop+0xc4>
 80078ae:	4a11      	ldr	r2, [pc, #68]	@ (80078f4 <ADC_ConversionStop+0xfc>)
 80078b0:	e001      	b.n	80078b6 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80078b2:	3a01      	subs	r2, #1
 80078b4:	d0dd      	beq.n	8007872 <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80078b6:	6819      	ldr	r1, [r3, #0]
 80078b8:	0649      	lsls	r1, r1, #25
 80078ba:	d5fa      	bpl.n	80078b2 <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80078bc:	2240      	movs	r2, #64	@ 0x40
 80078be:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	0756      	lsls	r6, r2, #29
 80078c4:	d50a      	bpl.n	80078dc <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	0795      	lsls	r5, r2, #30
 80078ca:	d407      	bmi.n	80078dc <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80078d2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80078d6:	f042 0210 	orr.w	r2, r2, #16
 80078da:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80078dc:	2504      	movs	r5, #4
 80078de:	e7b8      	b.n	8007852 <ADC_ConversionStop+0x5a>
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80078e6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80078ea:	f042 0210 	orr.w	r2, r2, #16
 80078ee:	609a      	str	r2, [r3, #8]
}
 80078f0:	e79c      	b.n	800782c <ADC_ConversionStop+0x34>
 80078f2:	bf00      	nop
 80078f4:	a3400000 	.word	0xa3400000

080078f8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	07d2      	lsls	r2, r2, #31
 80078fe:	d501      	bpl.n	8007904 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007900:	2000      	movs	r0, #0
}
 8007902:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007904:	6899      	ldr	r1, [r3, #8]
 8007906:	4a19      	ldr	r2, [pc, #100]	@ (800796c <ADC_Enable+0x74>)
 8007908:	4211      	tst	r1, r2
{
 800790a:	b570      	push	{r4, r5, r6, lr}
 800790c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800790e:	d009      	beq.n	8007924 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007910:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8007912:	f043 0310 	orr.w	r3, r3, #16
 8007916:	65b3      	str	r3, [r6, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007918:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	65f3      	str	r3, [r6, #92]	@ 0x5c
      return HAL_ERROR;
 8007920:	2001      	movs	r0, #1
}
 8007922:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	4d12      	ldr	r5, [pc, #72]	@ (8007970 <ADC_Enable+0x78>)
 8007928:	402a      	ands	r2, r5
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007930:	f7ff fe6e 	bl	8007610 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007934:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007936:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	07d0      	lsls	r0, r2, #31
 800793c:	d413      	bmi.n	8007966 <ADC_Enable+0x6e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	07d1      	lsls	r1, r2, #31
 8007942:	d404      	bmi.n	800794e <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	402a      	ands	r2, r5
 8007948:	f042 0201 	orr.w	r2, r2, #1
 800794c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800794e:	f7ff fe5f 	bl	8007610 <HAL_GetTick>
 8007952:	1b03      	subs	r3, r0, r4
 8007954:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007956:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007958:	d9ee      	bls.n	8007938 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	07d2      	lsls	r2, r2, #31
 800795e:	d5d7      	bpl.n	8007910 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	07d0      	lsls	r0, r2, #31
 8007964:	d5eb      	bpl.n	800793e <ADC_Enable+0x46>
  return HAL_OK;
 8007966:	2000      	movs	r0, #0
}
 8007968:	bd70      	pop	{r4, r5, r6, pc}
 800796a:	bf00      	nop
 800796c:	8000003f 	.word	0x8000003f
 8007970:	7fffffc0 	.word	0x7fffffc0

08007974 <HAL_ADC_Start>:
{
 8007974:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007976:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007978:	689d      	ldr	r5, [r3, #8]
 800797a:	f015 0504 	ands.w	r5, r5, #4
 800797e:	d133      	bne.n	80079e8 <HAL_ADC_Start+0x74>
    __HAL_LOCK(hadc);
 8007980:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8007984:	2b01      	cmp	r3, #1
 8007986:	4604      	mov	r4, r0
 8007988:	d02e      	beq.n	80079e8 <HAL_ADC_Start+0x74>
 800798a:	2301      	movs	r3, #1
 800798c:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8007990:	f7ff ffb2 	bl	80078f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007994:	bb50      	cbnz	r0, 80079ec <HAL_ADC_Start+0x78>
      ADC_STATE_CLR_SET(hadc->State,
 8007996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007998:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800799c:	f023 0301 	bic.w	r3, r3, #1
 80079a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a4:	65a3      	str	r3, [r4, #88]	@ 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079a8:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80079aa:	bf48      	it	mi
 80079ac:	6de3      	ldrmi	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80079ae:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc);
 80079b0:	bf52      	itee	pl
 80079b2:	65e0      	strpl	r0, [r4, #92]	@ 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80079b4:	f023 0306 	bicmi.w	r3, r3, #6
 80079b8:	65e3      	strmi	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80079ba:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 80079bc:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80079be:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80079c0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80079c4:	68d3      	ldr	r3, [r2, #12]
 80079c6:	019b      	lsls	r3, r3, #6
 80079c8:	d505      	bpl.n	80079d6 <HAL_ADC_Start+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80079ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80079d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079d4:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 80079d6:	6893      	ldr	r3, [r2, #8]
 80079d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80079e0:	f043 0304 	orr.w	r3, r3, #4
 80079e4:	6093      	str	r3, [r2, #8]
}
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 80079e8:	2002      	movs	r0, #2
}
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80079ec:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop

080079f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80079f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80079f6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	0795      	lsls	r5, r2, #30
 80079fc:	d502      	bpl.n	8007a04 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80079fe:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007a00:	2000      	movs	r0, #0
}
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	07d4      	lsls	r4, r2, #31
 8007a08:	d5fa      	bpl.n	8007a00 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	f002 020d 	and.w	r2, r2, #13
 8007a10:	2a01      	cmp	r2, #1
 8007a12:	4604      	mov	r4, r0
 8007a14:	d009      	beq.n	8007a2a <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a18:	f043 0310 	orr.w	r3, r3, #16
 8007a1c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a1e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007a20:	f043 0301 	orr.w	r3, r3, #1
 8007a24:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8007a26:	2001      	movs	r0, #1
}
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007a30:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007a34:	2103      	movs	r1, #3
 8007a36:	f042 0202 	orr.w	r2, r2, #2
 8007a3a:	609a      	str	r2, [r3, #8]
 8007a3c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8007a3e:	f7ff fde7 	bl	8007610 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8007a48:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a4a:	d403      	bmi.n	8007a54 <ADC_Disable+0x60>
 8007a4c:	e7d8      	b.n	8007a00 <ADC_Disable+0xc>
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	07db      	lsls	r3, r3, #31
 8007a52:	d5d5      	bpl.n	8007a00 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007a54:	f7ff fddc 	bl	8007610 <HAL_GetTick>
 8007a58:	1b40      	subs	r0, r0, r5
 8007a5a:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a5c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007a5e:	d9f6      	bls.n	8007a4e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	07d2      	lsls	r2, r2, #31
 8007a64:	d5f3      	bpl.n	8007a4e <ADC_Disable+0x5a>
 8007a66:	e7d6      	b.n	8007a16 <ADC_Disable+0x22>

08007a68 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8007a68:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d01d      	beq.n	8007aac <HAL_ADC_Stop+0x44>
 8007a70:	2301      	movs	r3, #1
{
 8007a72:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007a74:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8007a76:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	f7ff febc 	bl	80077f8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8007a80:	b118      	cbz	r0, 8007a8a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8007a82:	2300      	movs	r3, #0
 8007a84:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8007a88:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7ff ffb2 	bl	80079f4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d1f6      	bne.n	8007a82 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8007a94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8007aaa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8007aac:	2002      	movs	r0, #2
}
 8007aae:	4770      	bx	lr

08007ab0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007ab0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ab2:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 8007ab6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8007ab8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8007aba:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8007abc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8007abe:	d03f      	beq.n	8007b40 <HAL_ADCEx_Calibration_Start+0x90>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	f7ff ff93 	bl	80079f4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ace:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8007ad0:	b9e0      	cbnz	r0, 8007b0c <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8007ad2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007ad6:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007ada:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8007adc:	f043 0302 	orr.w	r3, r3, #2
 8007ae0:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8007ae2:	6893      	ldr	r3, [r2, #8]
 8007ae4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007ae8:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 8007aec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007af0:	430b      	orrs	r3, r1
 8007af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007af6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007af8:	6893      	ldr	r3, [r2, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	db0e      	blt.n	8007b1c <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007afe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b00:	f023 0303 	bic.w	r3, r3, #3
 8007b04:	f043 0301 	orr.w	r3, r3, #1
 8007b08:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007b0a:	e002      	b.n	8007b12 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b0c:	f043 0310 	orr.w	r3, r3, #16
 8007b10:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b12:	2300      	movs	r3, #0
 8007b14:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8007b18:	b003      	add	sp, #12
 8007b1a:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8007b1c:	9b01      	ldr	r3, [sp, #4]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007b22:	9b01      	ldr	r3, [sp, #4]
 8007b24:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8007b28:	d3e6      	bcc.n	8007af8 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8007b2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b2c:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8007b30:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8007b32:	f043 0310 	orr.w	r3, r3, #16
 8007b36:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8007b38:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	e7eb      	b.n	8007b18 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8007b40:	2002      	movs	r0, #2
}
 8007b42:	b003      	add	sp, #12
 8007b44:	bd30      	pop	{r4, r5, pc}
 8007b46:	bf00      	nop

08007b48 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8007b48:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b4a:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007b4e:	6904      	ldr	r4, [r0, #16]
{
 8007b50:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8007b52:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8007b54:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8007b56:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8007b58:	f000 8180 	beq.w	8007e5c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8007b5c:	4684      	mov	ip, r0
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8007b64:	e9d1 2000 	ldrd	r2, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007b68:	f8dc 3000 	ldr.w	r3, [ip]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007b6c:	2c00      	cmp	r4, #0
 8007b6e:	d064      	beq.n	8007c3a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8007b70:	698c      	ldr	r4, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007b72:	2c01      	cmp	r4, #1
 8007b74:	d061      	beq.n	8007c3a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007b76:	f8dc 6064 	ldr.w	r6, [ip, #100]	@ 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8007b7a:	f000 001f 	and.w	r0, r0, #31
 8007b7e:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8007b82:	4085      	lsls	r5, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	f040 80c6 	bne.w	8007d16 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007b8a:	6a08      	ldr	r0, [r1, #32]
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8007b8c:	3c01      	subs	r4, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	f000 81c9 	beq.w	8007f26 <HAL_ADCEx_InjectedConfigChannel+0x3de>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8007b94:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007b96:	f000 003c 	and.w	r0, r0, #60	@ 0x3c
 8007b9a:	4320      	orrs	r0, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8007b9c:	4330      	orrs	r0, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8007b9e:	4328      	orrs	r0, r5
 8007ba0:	e9cc 0418 	strd	r0, r4, [ip, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007ba4:	6898      	ldr	r0, [r3, #8]
 8007ba6:	0707      	lsls	r7, r0, #28
 8007ba8:	d40d      	bmi.n	8007bc6 <HAL_ADCEx_InjectedConfigChannel+0x7e>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007baa:	7f88      	ldrb	r0, [r1, #30]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8007bac:	7f4c      	ldrb	r4, [r1, #29]
      MODIFY_REG(hadc->Instance->CFGR,
 8007bae:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8007bb0:	2c00      	cmp	r4, #0
 8007bb2:	f040 80a6 	bne.w	8007d02 <HAL_ADCEx_InjectedConfigChannel+0x1ba>
      MODIFY_REG(hadc->Instance->CFGR,
 8007bb6:	68dc      	ldr	r4, [r3, #12]
 8007bb8:	7f0d      	ldrb	r5, [r1, #28]
 8007bba:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 8007bbe:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8007bc2:	4320      	orrs	r0, r4
 8007bc4:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007bc6:	6898      	ldr	r0, [r3, #8]
 8007bc8:	f010 0004 	ands.w	r0, r0, #4
 8007bcc:	d04c      	beq.n	8007c68 <HAL_ADCEx_InjectedConfigChannel+0x120>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007bce:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bd0:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007bd2:	689c      	ldr	r4, [r3, #8]
 8007bd4:	07e5      	lsls	r5, r4, #31
 8007bd6:	d413      	bmi.n	8007c00 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8007bd8:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8007bda:	4cab      	ldr	r4, [pc, #684]	@ (8007e88 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8007bdc:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 8007be0:	f006 0718 	and.w	r7, r6, #24
 8007be4:	40fc      	lsrs	r4, r7
 8007be6:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8007bea:	4014      	ands	r4, r2
 8007bec:	ea25 0e07 	bic.w	lr, r5, r7
 8007bf0:	ea44 040e 	orr.w	r4, r4, lr
 8007bf4:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007bf8:	4ca4      	ldr	r4, [pc, #656]	@ (8007e8c <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8007bfa:	42a6      	cmp	r6, r4
 8007bfc:	f000 80b7 	beq.w	8007d6e <HAL_ADCEx_InjectedConfigChannel+0x226>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8007c00:	49a3      	ldr	r1, [pc, #652]	@ (8007e90 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8007c02:	420a      	tst	r2, r1
 8007c04:	d014      	beq.n	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007c06:	4da3      	ldr	r5, [pc, #652]	@ (8007e94 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8007c08:	4ca3      	ldr	r4, [pc, #652]	@ (8007e98 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8007c0a:	68a9      	ldr	r1, [r5, #8]
 8007c0c:	42a2      	cmp	r2, r4
 8007c0e:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8007c12:	f000 80fe 	beq.w	8007e12 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8007c16:	4ca1      	ldr	r4, [pc, #644]	@ (8007e9c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8007c18:	42a2      	cmp	r2, r4
 8007c1a:	f000 8099 	beq.w	8007d50 <HAL_ADCEx_InjectedConfigChannel+0x208>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8007c1e:	4ca0      	ldr	r4, [pc, #640]	@ (8007ea0 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8007c20:	42a2      	cmp	r2, r4
 8007c22:	d105      	bne.n	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007c24:	024a      	lsls	r2, r1, #9
 8007c26:	d403      	bmi.n	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8007c28:	4a9e      	ldr	r2, [pc, #632]	@ (8007ea4 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	f000 81bd 	beq.w	8007faa <HAL_ADCEx_InjectedConfigChannel+0x462>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c30:	2300      	movs	r3, #0
 8007c32:	f88c 3054 	strb.w	r3, [ip, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8007c36:	b003      	add	sp, #12
 8007c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007c3a:	2808      	cmp	r0, #8
 8007c3c:	d1b2      	bne.n	8007ba4 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007c3e:	6a08      	ldr	r0, [r1, #32]
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007c40:	0c94      	lsrs	r4, r2, #18
 8007c42:	f404 54f8 	and.w	r4, r4, #7936	@ 0x1f00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007c46:	b120      	cbz	r0, 8007c52 <HAL_ADCEx_InjectedConfigChannel+0x10a>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007c48:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007c4a:	f000 003c 	and.w	r0, r0, #60	@ 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007c4e:	4328      	orrs	r0, r5
 8007c50:	4304      	orrs	r4, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8007c52:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007c54:	4d94      	ldr	r5, [pc, #592]	@ (8007ea8 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8007c56:	4028      	ands	r0, r5
 8007c58:	4320      	orrs	r0, r4
 8007c5a:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c5c:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8007c5e:	f8cc 4060 	str.w	r4, [ip, #96]	@ 0x60
 8007c62:	0707      	lsls	r7, r0, #28
 8007c64:	d4af      	bmi.n	8007bc6 <HAL_ADCEx_InjectedConfigChannel+0x7e>
 8007c66:	e7a0      	b.n	8007baa <HAL_ADCEx_InjectedConfigChannel+0x62>
 8007c68:	689c      	ldr	r4, [r3, #8]
 8007c6a:	0726      	lsls	r6, r4, #28
 8007c6c:	d4b1      	bmi.n	8007bd2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007c6e:	6a0c      	ldr	r4, [r1, #32]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8007c70:	7f48      	ldrb	r0, [r1, #29]
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007c72:	2c00      	cmp	r4, #0
 8007c74:	d164      	bne.n	8007d40 <HAL_ADCEx_InjectedConfigChannel+0x1f8>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007c76:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007c78:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007c7a:	f000 8156 	beq.w	8007f2a <HAL_ADCEx_InjectedConfigChannel+0x3e2>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007c7e:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8007c82:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c84:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8007c86:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
 8007c8a:	2c01      	cmp	r4, #1
 8007c8c:	f000 80f1 	beq.w	8007e72 <HAL_ADCEx_InjectedConfigChannel+0x32a>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8007c90:	691c      	ldr	r4, [r3, #16]
 8007c92:	f024 0402 	bic.w	r4, r4, #2
 8007c96:	611c      	str	r4, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007c98:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8007c9a:	f3c2 5604 	ubfx	r6, r2, #20, #5
 8007c9e:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007ca0:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 8007ca2:	40b4      	lsls	r4, r6
 8007ca4:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007ca8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8007cac:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007cb0:	f103 0714 	add.w	r7, r3, #20
 8007cb4:	f000 80d5 	beq.w	8007e62 <HAL_ADCEx_InjectedConfigChannel+0x31a>
  MODIFY_REG(*preg,
 8007cb8:	40b5      	lsls	r5, r6
 8007cba:	58be      	ldr	r6, [r7, r2]
 8007cbc:	4034      	ands	r4, r6
 8007cbe:	432c      	orrs	r4, r5
 8007cc0:	50bc      	str	r4, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007cc2:	695a      	ldr	r2, [r3, #20]
 8007cc4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007cc8:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007cca:	e9d1 7404 	ldrd	r7, r4, [r1, #16]
 8007cce:	2f04      	cmp	r7, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8007cd0:	68de      	ldr	r6, [r3, #12]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8007cd2:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cd4:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007cd8:	f000 80ee 	beq.w	8007eb8 <HAL_ADCEx_InjectedConfigChannel+0x370>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8007cdc:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8007ce0:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8007ce2:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8007ce6:	40b4      	lsls	r4, r6
 8007ce8:	4e70      	ldr	r6, [pc, #448]	@ (8007eac <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8007cea:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8007cee:	ea0e 0606 	and.w	r6, lr, r6
 8007cf2:	4316      	orrs	r6, r2
 8007cf4:	4334      	orrs	r4, r6
 8007cf6:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8007cfa:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8007cfe:	680a      	ldr	r2, [r1, #0]
}
 8007d00:	e767      	b.n	8007bd2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
      MODIFY_REG(hadc->Instance->CFGR,
 8007d02:	68dc      	ldr	r4, [r3, #12]
 8007d04:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 8007d08:	4320      	orrs	r0, r4
 8007d0a:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d0c:	6898      	ldr	r0, [r3, #8]
 8007d0e:	f010 0004 	ands.w	r0, r0, #4
 8007d12:	d0a9      	beq.n	8007c68 <HAL_ADCEx_InjectedConfigChannel+0x120>
 8007d14:	e75b      	b.n	8007bce <HAL_ADCEx_InjectedConfigChannel+0x86>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8007d16:	f8dc 4060 	ldr.w	r4, [ip, #96]	@ 0x60
    hadc->InjectionConfig.ChannelCount--;
 8007d1a:	3e01      	subs	r6, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8007d1c:	432c      	orrs	r4, r5
    hadc->InjectionConfig.ChannelCount--;
 8007d1e:	f8cc 6064 	str.w	r6, [ip, #100]	@ 0x64
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8007d22:	f8cc 4060 	str.w	r4, [ip, #96]	@ 0x60
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007d26:	2e00      	cmp	r6, #0
 8007d28:	f47f af3c 	bne.w	8007ba4 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007d2c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007d2e:	4d5e      	ldr	r5, [pc, #376]	@ (8007ea8 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8007d30:	4028      	ands	r0, r5
 8007d32:	4320      	orrs	r0, r4
 8007d34:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007d36:	6898      	ldr	r0, [r3, #8]
 8007d38:	0707      	lsls	r7, r0, #28
 8007d3a:	f53f af44 	bmi.w	8007bc6 <HAL_ADCEx_InjectedConfigChannel+0x7e>
 8007d3e:	e734      	b.n	8007baa <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8007d40:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8007d42:	2c00      	cmp	r4, #0
 8007d44:	d097      	beq.n	8007c76 <HAL_ADCEx_InjectedConfigChannel+0x12e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007d46:	2801      	cmp	r0, #1
 8007d48:	f000 8128 	beq.w	8007f9c <HAL_ADCEx_InjectedConfigChannel+0x454>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007d4c:	68d8      	ldr	r0, [r3, #12]
 8007d4e:	e796      	b.n	8007c7e <HAL_ADCEx_InjectedConfigChannel+0x136>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007d50:	01c9      	lsls	r1, r1, #7
 8007d52:	f53f af6d 	bmi.w	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007d56:	4a53      	ldr	r2, [pc, #332]	@ (8007ea4 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	f47f af69 	bne.w	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007d5e:	68ab      	ldr	r3, [r5, #8]
 8007d60:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007d64:	4333      	orrs	r3, r6
 8007d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d6a:	60ab      	str	r3, [r5, #8]
}
 8007d6c:	e760      	b.n	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007d6e:	bb47      	cbnz	r7, 8007dc2 <HAL_ADCEx_InjectedConfigChannel+0x27a>
 8007d70:	0e94      	lsrs	r4, r2, #26
 8007d72:	3401      	adds	r4, #1
 8007d74:	f004 051f 	and.w	r5, r4, #31
 8007d78:	2201      	movs	r2, #1
 8007d7a:	06a4      	lsls	r4, r4, #26
 8007d7c:	40aa      	lsls	r2, r5
 8007d7e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d82:	2d09      	cmp	r5, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007d84:	ea44 0402 	orr.w	r4, r4, r2
 8007d88:	eb05 0245 	add.w	r2, r5, r5, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d8c:	d93f      	bls.n	8007e0e <HAL_ADCEx_InjectedConfigChannel+0x2c6>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007d8e:	3a1e      	subs	r2, #30
 8007d90:	0512      	lsls	r2, r2, #20
 8007d92:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d96:	4314      	orrs	r4, r2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007d98:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8007d9a:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007d9c:	f005 0504 	and.w	r5, r5, #4
 8007da0:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8007da4:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8007da8:	fa02 f704 	lsl.w	r7, r2, r4
 8007dac:	f04f 0e07 	mov.w	lr, #7
 8007db0:	5972      	ldr	r2, [r6, r5]
 8007db2:	fa0e f404 	lsl.w	r4, lr, r4
 8007db6:	ea22 0204 	bic.w	r2, r2, r4
 8007dba:	433a      	orrs	r2, r7
 8007dbc:	5172      	str	r2, [r6, r5]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8007dbe:	680a      	ldr	r2, [r1, #0]
}
 8007dc0:	e71e      	b.n	8007c00 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dc2:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007dc6:	fab4 f484 	clz	r4, r4
 8007dca:	3401      	adds	r4, #1
 8007dcc:	f004 041f 	and.w	r4, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007dd0:	2c09      	cmp	r4, #9
 8007dd2:	f200 80ae 	bhi.w	8007f32 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8007dd6:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007dda:	fab4 f484 	clz	r4, r4
 8007dde:	fa92 f5a2 	rbit	r5, r2
 8007de2:	fab5 f585 	clz	r5, r5
 8007de6:	3401      	adds	r4, #1
 8007de8:	3501      	adds	r5, #1
 8007dea:	2601      	movs	r6, #1
 8007dec:	06a4      	lsls	r4, r4, #26
 8007dee:	f005 051f 	and.w	r5, r5, #31
 8007df2:	fa06 f505 	lsl.w	r5, r6, r5
 8007df6:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007dfa:	432c      	orrs	r4, r5
 8007dfc:	fa92 f2a2 	rbit	r2, r2
 8007e00:	fab2 f282 	clz	r2, r2
 8007e04:	4432      	add	r2, r6
 8007e06:	f002 021f 	and.w	r2, r2, #31
 8007e0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007e0e:	0512      	lsls	r2, r2, #20
 8007e10:	e7c1      	b.n	8007d96 <HAL_ADCEx_InjectedConfigChannel+0x24e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007e12:	020c      	lsls	r4, r1, #8
 8007e14:	f53f af0c 	bmi.w	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e18:	4a22      	ldr	r2, [pc, #136]	@ (8007ea4 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	f47f af08 	bne.w	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007e20:	68ab      	ldr	r3, [r5, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8007e22:	4a23      	ldr	r2, [pc, #140]	@ (8007eb0 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8007e24:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007e28:	4333      	orrs	r3, r6
 8007e2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e2e:	60ab      	str	r3, [r5, #8]
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	4a20      	ldr	r2, [pc, #128]	@ (8007eb4 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8007e34:	099b      	lsrs	r3, r3, #6
 8007e36:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3a:	099b      	lsrs	r3, r3, #6
 8007e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	3318      	adds	r3, #24
 8007e44:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8007e46:	9b01      	ldr	r3, [sp, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f43f aef1 	beq.w	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
          wait_loop_index--;
 8007e4e:	9b01      	ldr	r3, [sp, #4]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f9      	bne.n	8007e4e <HAL_ADCEx_InjectedConfigChannel+0x306>
 8007e5a:	e6e9      	b.n	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  __HAL_LOCK(hadc);
 8007e5c:	2002      	movs	r0, #2
}
 8007e5e:	b003      	add	sp, #12
 8007e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(*preg,
 8007e62:	58bd      	ldr	r5, [r7, r2]
 8007e64:	402c      	ands	r4, r5
 8007e66:	50bc      	str	r4, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007e68:	695a      	ldr	r2, [r3, #20]
 8007e6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007e6e:	615a      	str	r2, [r3, #20]
}
 8007e70:	e72b      	b.n	8007cca <HAL_ADCEx_InjectedConfigChannel+0x182>
      MODIFY_REG(hadc->Instance->CFGR2,
 8007e72:	e9d1 460b 	ldrd	r4, r6, [r1, #44]	@ 0x2c
 8007e76:	691d      	ldr	r5, [r3, #16]
 8007e78:	4334      	orrs	r4, r6
 8007e7a:	f425 75ff 	bic.w	r5, r5, #510	@ 0x1fe
 8007e7e:	432c      	orrs	r4, r5
 8007e80:	f044 0402 	orr.w	r4, r4, #2
 8007e84:	611c      	str	r4, [r3, #16]
 8007e86:	e707      	b.n	8007c98 <HAL_ADCEx_InjectedConfigChannel+0x150>
 8007e88:	0007ffff 	.word	0x0007ffff
 8007e8c:	407f0000 	.word	0x407f0000
 8007e90:	80080000 	.word	0x80080000
 8007e94:	50040300 	.word	0x50040300
 8007e98:	c7520000 	.word	0xc7520000
 8007e9c:	cb840000 	.word	0xcb840000
 8007ea0:	80000001 	.word	0x80000001
 8007ea4:	50040000 	.word	0x50040000
 8007ea8:	82082000 	.word	0x82082000
 8007eac:	03fff000 	.word	0x03fff000
 8007eb0:	200001e0 	.word	0x200001e0
 8007eb4:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007eb8:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8007eba:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007ebc:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007ec0:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007ec4:	2c00      	cmp	r4, #0
 8007ec6:	d051      	beq.n	8007f6c <HAL_ADCEx_InjectedConfigChannel+0x424>
 8007ec8:	fa92 f4a2 	rbit	r4, r2
 8007ecc:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007ed0:	42a6      	cmp	r6, r4
 8007ed2:	f000 8096 	beq.w	8008002 <HAL_ADCEx_InjectedConfigChannel+0x4ba>
 8007ed6:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8007ed8:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007eda:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007ede:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007ee2:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ee6:	42b4      	cmp	r4, r6
 8007ee8:	d078      	beq.n	8007fdc <HAL_ADCEx_InjectedConfigChannel+0x494>
 8007eea:	68ac      	ldr	r4, [r5, #8]
 8007eec:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007eee:	f105 0708 	add.w	r7, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007ef2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007ef6:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007efa:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007efe:	42b4      	cmp	r4, r6
 8007f00:	d05b      	beq.n	8007fba <HAL_ADCEx_InjectedConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007f02:	68ec      	ldr	r4, [r5, #12]
 8007f04:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f06:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007f08:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007f0c:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007f10:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007f14:	42b4      	cmp	r4, r6
 8007f16:	f47f ae5c 	bne.w	8007bd2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
  MODIFY_REG(*preg,
 8007f1a:	682a      	ldr	r2, [r5, #0]
 8007f1c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007f20:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8007f22:	680a      	ldr	r2, [r1, #0]
}
 8007f24:	e655      	b.n	8007bd2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8007f26:	4620      	mov	r0, r4
 8007f28:	e639      	b.n	8007b9e <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007f2a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8007f2e:	60d8      	str	r0, [r3, #12]
 8007f30:	e6a8      	b.n	8007c84 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8007f32:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007f36:	fab4 f484 	clz	r4, r4
 8007f3a:	fa92 f5a2 	rbit	r5, r2
 8007f3e:	fab5 f585 	clz	r5, r5
 8007f42:	3401      	adds	r4, #1
 8007f44:	3501      	adds	r5, #1
 8007f46:	2601      	movs	r6, #1
 8007f48:	06a4      	lsls	r4, r4, #26
 8007f4a:	f005 051f 	and.w	r5, r5, #31
 8007f4e:	fa06 f505 	lsl.w	r5, r6, r5
 8007f52:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007f56:	432c      	orrs	r4, r5
 8007f58:	fa92 f2a2 	rbit	r2, r2
 8007f5c:	fab2 f282 	clz	r2, r2
 8007f60:	4432      	add	r2, r6
 8007f62:	f002 021f 	and.w	r2, r2, #31
 8007f66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007f6a:	e710      	b.n	8007d8e <HAL_ADCEx_InjectedConfigChannel+0x246>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007f6c:	f3c2 6484 	ubfx	r4, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	d046      	beq.n	8008002 <HAL_ADCEx_InjectedConfigChannel+0x4ba>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007f74:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8007f76:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007f78:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007f7c:	42a6      	cmp	r6, r4
 8007f7e:	d02d      	beq.n	8007fdc <HAL_ADCEx_InjectedConfigChannel+0x494>
 8007f80:	68ae      	ldr	r6, [r5, #8]
 8007f82:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f84:	f105 0708 	add.w	r7, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007f88:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007f8c:	42a6      	cmp	r6, r4
 8007f8e:	d014      	beq.n	8007fba <HAL_ADCEx_InjectedConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007f90:	68ee      	ldr	r6, [r5, #12]
 8007f92:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f94:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007f96:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007f9a:	e7bb      	b.n	8007f14 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f9c:	f8dc 4058 	ldr.w	r4, [ip, #88]	@ 0x58
 8007fa0:	f044 0420 	orr.w	r4, r4, #32
 8007fa4:	f8cc 4058 	str.w	r4, [ip, #88]	@ 0x58
        tmp_hal_status = HAL_ERROR;
 8007fa8:	e66d      	b.n	8007c86 <HAL_ADCEx_InjectedConfigChannel+0x13e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007faa:	68ab      	ldr	r3, [r5, #8]
 8007fac:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007fb0:	4333      	orrs	r3, r6
 8007fb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007fb6:	60ab      	str	r3, [r5, #8]
}
 8007fb8:	e63a      	b.n	8007c30 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(*preg,
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007fc0:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007fc2:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007fc4:	680a      	ldr	r2, [r1, #0]
 8007fc6:	68ee      	ldr	r6, [r5, #12]
 8007fc8:	f3c2 0412 	ubfx	r4, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007fcc:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007fce:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	d19a      	bne.n	8007f0c <HAL_ADCEx_InjectedConfigChannel+0x3c4>
 8007fd6:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8007fda:	e79b      	b.n	8007f14 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
  MODIFY_REG(*preg,
 8007fdc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007fde:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007fe2:	665a      	str	r2, [r3, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007fe4:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007fe6:	680a      	ldr	r2, [r1, #0]
 8007fe8:	68ae      	ldr	r6, [r5, #8]
 8007fea:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007fee:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ff2:	f105 0708 	add.w	r7, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007ff6:	2c00      	cmp	r4, #0
 8007ff8:	f47f af7d 	bne.w	8007ef6 <HAL_ADCEx_InjectedConfigChannel+0x3ae>
 8007ffc:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8008000:	e7c4      	b.n	8007f8c <HAL_ADCEx_InjectedConfigChannel+0x444>
  MODIFY_REG(*preg,
 8008002:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008004:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008008:	661a      	str	r2, [r3, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800800a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800800c:	680a      	ldr	r2, [r1, #0]
 800800e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8008010:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008014:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008018:	2c00      	cmp	r4, #0
 800801a:	f47f af60 	bne.w	8007ede <HAL_ADCEx_InjectedConfigChannel+0x396>
 800801e:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8008022:	e7ab      	b.n	8007f7c <HAL_ADCEx_InjectedConfigChannel+0x434>

08008024 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008024:	4907      	ldr	r1, [pc, #28]	@ (8008044 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008026:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008028:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800802a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800802e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008032:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008034:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008036:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800803a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800803e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	e000ed00 	.word	0xe000ed00

08008048 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008048:	4b1b      	ldr	r3, [pc, #108]	@ (80080b8 <HAL_NVIC_SetPriority+0x70>)
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008050:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008052:	f1c3 0e07 	rsb	lr, r3, #7
 8008056:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800805a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800805e:	bf28      	it	cs
 8008060:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008064:	f1bc 0f06 	cmp.w	ip, #6
 8008068:	d91c      	bls.n	80080a4 <HAL_NVIC_SetPriority+0x5c>
 800806a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800806e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008072:	fa03 f30c 	lsl.w	r3, r3, ip
 8008076:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800807a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800807e:	fa03 f30e 	lsl.w	r3, r3, lr
 8008082:	ea21 0303 	bic.w	r3, r1, r3
 8008086:	fa03 f30c 	lsl.w	r3, r3, ip
 800808a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800808c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800808e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008090:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8008092:	db0a      	blt.n	80080aa <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008094:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008098:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800809c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80080a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80080a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080a6:	4694      	mov	ip, r2
 80080a8:	e7e7      	b.n	800807a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080aa:	4a04      	ldr	r2, [pc, #16]	@ (80080bc <HAL_NVIC_SetPriority+0x74>)
 80080ac:	f000 000f 	and.w	r0, r0, #15
 80080b0:	4402      	add	r2, r0
 80080b2:	7613      	strb	r3, [r2, #24]
 80080b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80080b8:	e000ed00 	.word	0xe000ed00
 80080bc:	e000ecfc 	.word	0xe000ecfc

080080c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80080c0:	2800      	cmp	r0, #0
 80080c2:	db07      	blt.n	80080d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080c4:	0941      	lsrs	r1, r0, #5
 80080c6:	4a04      	ldr	r2, [pc, #16]	@ (80080d8 <HAL_NVIC_EnableIRQ+0x18>)
 80080c8:	f000 001f 	and.w	r0, r0, #31
 80080cc:	2301      	movs	r3, #1
 80080ce:	4083      	lsls	r3, r0
 80080d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	e000e100 	.word	0xe000e100

080080dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080dc:	3801      	subs	r0, #1
 80080de:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80080e2:	d301      	bcc.n	80080e8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080e4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80080e6:	4770      	bx	lr
{
 80080e8:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ee:	4c07      	ldr	r4, [pc, #28]	@ (800810c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080f0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080f2:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80080f6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080fa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080fc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080fe:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008100:	619a      	str	r2, [r3, #24]
}
 8008102:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008106:	6119      	str	r1, [r3, #16]
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	e000ed00 	.word	0xe000ed00

08008110 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8008110:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8008114:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8008116:	6913      	ldr	r3, [r2, #16]
 8008118:	bf0c      	ite	eq
 800811a:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800811e:	f023 0304 	bicne.w	r3, r3, #4
 8008122:	6113      	str	r3, [r2, #16]
  }
}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop

08008128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800812c:	680c      	ldr	r4, [r1, #0]
{
 800812e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008130:	2c00      	cmp	r4, #0
 8008132:	f000 8098 	beq.w	8008266 <HAL_GPIO_Init+0x13e>
  uint32_t position = 0x00u;
 8008136:	2200      	movs	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008138:	f04f 0901 	mov.w	r9, #1
 800813c:	fa09 f502 	lsl.w	r5, r9, r2

    if (iocurrent != 0x00u)
 8008140:	ea15 0a04 	ands.w	sl, r5, r4
 8008144:	f000 808a 	beq.w	800825c <HAL_GPIO_Init+0x134>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008148:	684b      	ldr	r3, [r1, #4]
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800814a:	688f      	ldr	r7, [r1, #8]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800814c:	f023 0e10 	bic.w	lr, r3, #16
 8008150:	ea4f 0c42 	mov.w	ip, r2, lsl #1
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008154:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008156:	f10e 3bff 	add.w	fp, lr, #4294967295	@ 0xffffffff
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800815a:	fa07 f80c 	lsl.w	r8, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800815e:	f1bb 0f01 	cmp.w	fp, #1
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008162:	fa06 f70c 	lsl.w	r7, r6, ip
 8008166:	ea6f 0707 	mvn.w	r7, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800816a:	d97f      	bls.n	800826c <HAL_GPIO_Init+0x144>
      temp = GPIOx->PUPDR;
 800816c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800816e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008170:	ea45 0508 	orr.w	r5, r5, r8
      GPIOx->PUPDR = temp;
 8008174:	60c5      	str	r5, [r0, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008176:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008178:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800817a:	ea03 0506 	and.w	r5, r3, r6
 800817e:	fa05 f50c 	lsl.w	r5, r5, ip
 8008182:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008184:	00df      	lsls	r7, r3, #3
      GPIOx->MODER = temp;
 8008186:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008188:	d568      	bpl.n	800825c <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800818a:	4f70      	ldr	r7, [pc, #448]	@ (800834c <HAL_GPIO_Init+0x224>)
 800818c:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 800818e:	f045 0501 	orr.w	r5, r5, #1
 8008192:	663d      	str	r5, [r7, #96]	@ 0x60
 8008194:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8008196:	f005 0501 	and.w	r5, r5, #1
 800819a:	9501      	str	r5, [sp, #4]
 800819c:	9d01      	ldr	r5, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 800819e:	f022 0503 	bic.w	r5, r2, #3
 80081a2:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 80081a6:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80081aa:	f002 0c03 	and.w	ip, r2, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80081ae:	68af      	ldr	r7, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80081b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80081b4:	260f      	movs	r6, #15
 80081b6:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80081ba:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80081be:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80081c2:	d027      	beq.n	8008214 <HAL_GPIO_Init+0xec>
 80081c4:	4e62      	ldr	r6, [pc, #392]	@ (8008350 <HAL_GPIO_Init+0x228>)
 80081c6:	42b0      	cmp	r0, r6
 80081c8:	f000 809f 	beq.w	800830a <HAL_GPIO_Init+0x1e2>
 80081cc:	4e61      	ldr	r6, [pc, #388]	@ (8008354 <HAL_GPIO_Init+0x22c>)
 80081ce:	42b0      	cmp	r0, r6
 80081d0:	f000 80a0 	beq.w	8008314 <HAL_GPIO_Init+0x1ec>
 80081d4:	f8df e184 	ldr.w	lr, [pc, #388]	@ 800835c <HAL_GPIO_Init+0x234>
 80081d8:	4570      	cmp	r0, lr
 80081da:	f000 8090 	beq.w	80082fe <HAL_GPIO_Init+0x1d6>
 80081de:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8008360 <HAL_GPIO_Init+0x238>
 80081e2:	4570      	cmp	r0, lr
 80081e4:	f000 80a4 	beq.w	8008330 <HAL_GPIO_Init+0x208>
 80081e8:	f8df e178 	ldr.w	lr, [pc, #376]	@ 8008364 <HAL_GPIO_Init+0x23c>
 80081ec:	4570      	cmp	r0, lr
 80081ee:	f000 80a6 	beq.w	800833e <HAL_GPIO_Init+0x216>
 80081f2:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8008368 <HAL_GPIO_Init+0x240>
 80081f6:	4570      	cmp	r0, lr
 80081f8:	f000 8093 	beq.w	8008322 <HAL_GPIO_Init+0x1fa>
 80081fc:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 800836c <HAL_GPIO_Init+0x244>
 8008200:	4570      	cmp	r0, lr
 8008202:	bf0c      	ite	eq
 8008204:	f04f 0e07 	moveq.w	lr, #7
 8008208:	f04f 0e08 	movne.w	lr, #8
 800820c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008210:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008214:	60af      	str	r7, [r5, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008216:	4d50      	ldr	r5, [pc, #320]	@ (8008358 <HAL_GPIO_Init+0x230>)
 8008218:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800821a:	03de      	lsls	r6, r3, #15
        temp &= ~(iocurrent);
 800821c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8008220:	4e4d      	ldr	r6, [pc, #308]	@ (8008358 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8008222:	bf54      	ite	pl
 8008224:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8008226:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->IMR1 = temp;
 800822a:	6035      	str	r5, [r6, #0]

        temp = EXTI->EMR1;
 800822c:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800822e:	039e      	lsls	r6, r3, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8008230:	4e49      	ldr	r6, [pc, #292]	@ (8008358 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8008232:	bf54      	ite	pl
 8008234:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8008236:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 800823a:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800823c:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800823e:	02de      	lsls	r6, r3, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8008240:	4e45      	ldr	r6, [pc, #276]	@ (8008358 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8008242:	bf54      	ite	pl
 8008244:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8008246:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR1 = temp;
 800824a:	60b5      	str	r5, [r6, #8]

        temp = EXTI->FTSR1;
 800824c:	68f5      	ldr	r5, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800824e:	029b      	lsls	r3, r3, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8008250:	4b41      	ldr	r3, [pc, #260]	@ (8008358 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8008252:	bf54      	ite	pl
 8008254:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8008256:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 800825a:	60dd      	str	r5, [r3, #12]
      }
    }

    position++;
 800825c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800825e:	fa34 f302 	lsrs.w	r3, r4, r2
 8008262:	f47f af6b 	bne.w	800813c <HAL_GPIO_Init+0x14>
  }
}
 8008266:	b003      	add	sp, #12
 8008268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800826c:	f8d0 b008 	ldr.w	fp, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008270:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008272:	ea0b 0b07 	and.w	fp, fp, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008276:	fa06 fa0c 	lsl.w	sl, r6, ip
 800827a:	ea4a 0a0b 	orr.w	sl, sl, fp
        GPIOx->OSPEEDR = temp;
 800827e:	f8c0 a008 	str.w	sl, [r0, #8]
        temp = GPIOx->OTYPER;
 8008282:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008286:	ea2a 0a05 	bic.w	sl, sl, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800828a:	091d      	lsrs	r5, r3, #4
 800828c:	4095      	lsls	r5, r2
 800828e:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8008292:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8008294:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008296:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008298:	ea45 0508 	orr.w	r5, r5, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800829c:	f003 0303 	and.w	r3, r3, #3
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082a0:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 80082a4:	60c5      	str	r5, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082a6:	fa03 f30c 	lsl.w	r3, r3, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80082aa:	d009      	beq.n	80082c0 <HAL_GPIO_Init+0x198>
      temp = GPIOx->MODER;
 80082ac:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082ae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082b0:	432b      	orrs	r3, r5
    position++;
 80082b2:	3201      	adds	r2, #1
      GPIOx->MODER = temp;
 80082b4:	6003      	str	r3, [r0, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082b6:	fa34 f302 	lsrs.w	r3, r4, r2
 80082ba:	f47f af3f 	bne.w	800813c <HAL_GPIO_Init+0x14>
 80082be:	e7d2      	b.n	8008266 <HAL_GPIO_Init+0x13e>
        temp = GPIOx->AFR[position >> 3u];
 80082c0:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082c4:	690e      	ldr	r6, [r1, #16]
 80082c6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80082ca:	f002 0507 	and.w	r5, r2, #7
 80082ce:	00ad      	lsls	r5, r5, #2
        temp = GPIOx->AFR[position >> 3u];
 80082d0:	f8dc 8020 	ldr.w	r8, [ip, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082d4:	fa06 fe05 	lsl.w	lr, r6, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80082d8:	260f      	movs	r6, #15
 80082da:	fa06 f505 	lsl.w	r5, r6, r5
 80082de:	ea28 0505 	bic.w	r5, r8, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082e2:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->AFR[position >> 3u] = temp;
 80082e6:	f8cc 5020 	str.w	r5, [ip, #32]
      temp = GPIOx->MODER;
 80082ea:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082ec:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082ee:	432b      	orrs	r3, r5
    position++;
 80082f0:	3201      	adds	r2, #1
      GPIOx->MODER = temp;
 80082f2:	6003      	str	r3, [r0, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082f4:	fa34 f302 	lsrs.w	r3, r4, r2
 80082f8:	f47f af20 	bne.w	800813c <HAL_GPIO_Init+0x14>
 80082fc:	e7b3      	b.n	8008266 <HAL_GPIO_Init+0x13e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80082fe:	2603      	movs	r6, #3
 8008300:	fa06 fc0c 	lsl.w	ip, r6, ip
 8008304:	ea47 070c 	orr.w	r7, r7, ip
 8008308:	e784      	b.n	8008214 <HAL_GPIO_Init+0xec>
 800830a:	fa09 fc0c 	lsl.w	ip, r9, ip
 800830e:	ea47 070c 	orr.w	r7, r7, ip
 8008312:	e77f      	b.n	8008214 <HAL_GPIO_Init+0xec>
 8008314:	f04f 0e02 	mov.w	lr, #2
 8008318:	fa0e fc0c 	lsl.w	ip, lr, ip
 800831c:	ea47 070c 	orr.w	r7, r7, ip
 8008320:	e778      	b.n	8008214 <HAL_GPIO_Init+0xec>
 8008322:	f04f 0e06 	mov.w	lr, #6
 8008326:	fa0e fc0c 	lsl.w	ip, lr, ip
 800832a:	ea47 070c 	orr.w	r7, r7, ip
 800832e:	e771      	b.n	8008214 <HAL_GPIO_Init+0xec>
 8008330:	f04f 0e04 	mov.w	lr, #4
 8008334:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008338:	ea47 070c 	orr.w	r7, r7, ip
 800833c:	e76a      	b.n	8008214 <HAL_GPIO_Init+0xec>
 800833e:	f04f 0e05 	mov.w	lr, #5
 8008342:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008346:	ea47 070c 	orr.w	r7, r7, ip
 800834a:	e763      	b.n	8008214 <HAL_GPIO_Init+0xec>
 800834c:	40021000 	.word	0x40021000
 8008350:	48000400 	.word	0x48000400
 8008354:	48000800 	.word	0x48000800
 8008358:	40010400 	.word	0x40010400
 800835c:	48000c00 	.word	0x48000c00
 8008360:	48001000 	.word	0x48001000
 8008364:	48001400 	.word	0x48001400
 8008368:	48001800 	.word	0x48001800
 800836c:	48001c00 	.word	0x48001c00

08008370 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008370:	2900      	cmp	r1, #0
 8008372:	f000 8099 	beq.w	80084a8 <HAL_GPIO_DeInit+0x138>
{
 8008376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800837a:	4e4c      	ldr	r6, [pc, #304]	@ (80084ac <HAL_GPIO_DeInit+0x13c>)
  uint32_t position = 0x00u;
 800837c:	2300      	movs	r3, #0
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800837e:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008382:	f04f 0a03 	mov.w	sl, #3
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008386:	2201      	movs	r2, #1
 8008388:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800838a:	ea12 0e01 	ands.w	lr, r2, r1
 800838e:	d068      	beq.n	8008462 <HAL_GPIO_DeInit+0xf2>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8008390:	f023 0503 	bic.w	r5, r3, #3
 8008394:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8008398:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800839c:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 80083a0:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80083a4:	00a4      	lsls	r4, r4, #2
 80083a6:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80083aa:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80083ae:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80083b2:	d01e      	beq.n	80083f2 <HAL_GPIO_DeInit+0x82>
 80083b4:	4f3e      	ldr	r7, [pc, #248]	@ (80084b0 <HAL_GPIO_DeInit+0x140>)
 80083b6:	42b8      	cmp	r0, r7
 80083b8:	d059      	beq.n	800846e <HAL_GPIO_DeInit+0xfe>
 80083ba:	4f3e      	ldr	r7, [pc, #248]	@ (80084b4 <HAL_GPIO_DeInit+0x144>)
 80083bc:	42b8      	cmp	r0, r7
 80083be:	d05a      	beq.n	8008476 <HAL_GPIO_DeInit+0x106>
 80083c0:	4f3d      	ldr	r7, [pc, #244]	@ (80084b8 <HAL_GPIO_DeInit+0x148>)
 80083c2:	42b8      	cmp	r0, r7
 80083c4:	d061      	beq.n	800848a <HAL_GPIO_DeInit+0x11a>
 80083c6:	4f3d      	ldr	r7, [pc, #244]	@ (80084bc <HAL_GPIO_DeInit+0x14c>)
 80083c8:	42b8      	cmp	r0, r7
 80083ca:	d063      	beq.n	8008494 <HAL_GPIO_DeInit+0x124>
 80083cc:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 80084c0 <HAL_GPIO_DeInit+0x150>
 80083d0:	4558      	cmp	r0, fp
 80083d2:	d055      	beq.n	8008480 <HAL_GPIO_DeInit+0x110>
 80083d4:	f8df b0ec 	ldr.w	fp, [pc, #236]	@ 80084c4 <HAL_GPIO_DeInit+0x154>
 80083d8:	4558      	cmp	r0, fp
 80083da:	d060      	beq.n	800849e <HAL_GPIO_DeInit+0x12e>
 80083dc:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 80084c8 <HAL_GPIO_DeInit+0x158>
 80083e0:	4558      	cmp	r0, fp
 80083e2:	bf14      	ite	ne
 80083e4:	f04f 0b08 	movne.w	fp, #8
 80083e8:	f04f 0b07 	moveq.w	fp, #7
 80083ec:	fa0b f404 	lsl.w	r4, fp, r4
 80083f0:	e000      	b.n	80083f4 <HAL_GPIO_DeInit+0x84>
 80083f2:	2400      	movs	r4, #0
 80083f4:	45a4      	cmp	ip, r4
 80083f6:	d113      	bne.n	8008420 <HAL_GPIO_DeInit+0xb0>
        EXTI->IMR1 &= ~(iocurrent);
 80083f8:	6834      	ldr	r4, [r6, #0]
 80083fa:	ea24 040e 	bic.w	r4, r4, lr
 80083fe:	6034      	str	r4, [r6, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008400:	6874      	ldr	r4, [r6, #4]
 8008402:	ea24 040e 	bic.w	r4, r4, lr
 8008406:	6074      	str	r4, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008408:	68b4      	ldr	r4, [r6, #8]
 800840a:	ea24 040e 	bic.w	r4, r4, lr
 800840e:	60b4      	str	r4, [r6, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8008410:	68f4      	ldr	r4, [r6, #12]
 8008412:	ea24 040e 	bic.w	r4, r4, lr
 8008416:	60f4      	str	r4, [r6, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008418:	68ac      	ldr	r4, [r5, #8]
 800841a:	ea24 0408 	bic.w	r4, r4, r8
 800841e:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008420:	6804      	ldr	r4, [r0, #0]
 8008422:	005d      	lsls	r5, r3, #1
 8008424:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008428:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800842c:	432c      	orrs	r4, r5
 800842e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8008432:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008434:	f003 0407 	and.w	r4, r3, #7
 8008438:	f8dc e020 	ldr.w	lr, [ip, #32]
 800843c:	00a4      	lsls	r4, r4, #2
 800843e:	fa09 f404 	lsl.w	r4, r9, r4
 8008442:	ea2e 0404 	bic.w	r4, lr, r4
 8008446:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800844a:	6884      	ldr	r4, [r0, #8]
 800844c:	ea24 0405 	bic.w	r4, r4, r5
 8008450:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008452:	6844      	ldr	r4, [r0, #4]
 8008454:	ea24 0202 	bic.w	r2, r4, r2
 8008458:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800845a:	68c2      	ldr	r2, [r0, #12]
 800845c:	ea22 0205 	bic.w	r2, r2, r5
 8008460:	60c2      	str	r2, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008462:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8008464:	fa31 f203 	lsrs.w	r2, r1, r3
 8008468:	d18d      	bne.n	8008386 <HAL_GPIO_DeInit+0x16>
  }
}
 800846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800846e:	2701      	movs	r7, #1
 8008470:	fa07 f404 	lsl.w	r4, r7, r4
 8008474:	e7be      	b.n	80083f4 <HAL_GPIO_DeInit+0x84>
 8008476:	f04f 0b02 	mov.w	fp, #2
 800847a:	fa0b f404 	lsl.w	r4, fp, r4
 800847e:	e7b9      	b.n	80083f4 <HAL_GPIO_DeInit+0x84>
 8008480:	f04f 0b05 	mov.w	fp, #5
 8008484:	fa0b f404 	lsl.w	r4, fp, r4
 8008488:	e7b4      	b.n	80083f4 <HAL_GPIO_DeInit+0x84>
 800848a:	f04f 0b03 	mov.w	fp, #3
 800848e:	fa0b f404 	lsl.w	r4, fp, r4
 8008492:	e7af      	b.n	80083f4 <HAL_GPIO_DeInit+0x84>
 8008494:	f04f 0b04 	mov.w	fp, #4
 8008498:	fa0b f404 	lsl.w	r4, fp, r4
 800849c:	e7aa      	b.n	80083f4 <HAL_GPIO_DeInit+0x84>
 800849e:	f04f 0b06 	mov.w	fp, #6
 80084a2:	fa0b f404 	lsl.w	r4, fp, r4
 80084a6:	e7a5      	b.n	80083f4 <HAL_GPIO_DeInit+0x84>
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40010400 	.word	0x40010400
 80084b0:	48000400 	.word	0x48000400
 80084b4:	48000800 	.word	0x48000800
 80084b8:	48000c00 	.word	0x48000c00
 80084bc:	48001000 	.word	0x48001000
 80084c0:	48001400 	.word	0x48001400
 80084c4:	48001800 	.word	0x48001800
 80084c8:	48001c00 	.word	0x48001c00

080084cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80084cc:	6903      	ldr	r3, [r0, #16]
 80084ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80084d0:	bf14      	ite	ne
 80084d2:	2001      	movne	r0, #1
 80084d4:	2000      	moveq	r0, #0
 80084d6:	4770      	bx	lr

080084d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084d8:	b10a      	cbz	r2, 80084de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084da:	6181      	str	r1, [r0, #24]
 80084dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80084de:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop

080084e4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80084e4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80084e6:	ea01 0203 	and.w	r2, r1, r3
 80084ea:	ea21 0103 	bic.w	r1, r1, r3
 80084ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084f2:	6181      	str	r1, [r0, #24]
}
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop

080084f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80084f8:	4a04      	ldr	r2, [pc, #16]	@ (800850c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80084fa:	6951      	ldr	r1, [r2, #20]
 80084fc:	4201      	tst	r1, r0
 80084fe:	d100      	bne.n	8008502 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008500:	4770      	bx	lr
{
 8008502:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008504:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008506:	f7f8 ff81 	bl	800140c <HAL_GPIO_EXTI_Callback>
  }
}
 800850a:	bd08      	pop	{r3, pc}
 800850c:	40010400 	.word	0x40010400

08008510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	460d      	mov	r5, r1
 8008514:	1c6e      	adds	r6, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008516:	6801      	ldr	r1, [r0, #0]
{
 8008518:	4604      	mov	r4, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800851a:	bf18      	it	ne
 800851c:	4616      	movne	r6, r2
 800851e:	d132      	bne.n	8008586 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8008520:	698b      	ldr	r3, [r1, #24]
 8008522:	0798      	lsls	r0, r3, #30
 8008524:	d451      	bmi.n	80085ca <I2C_WaitOnTXISFlagUntilTimeout+0xba>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008526:	698b      	ldr	r3, [r1, #24]
 8008528:	06da      	lsls	r2, r3, #27
 800852a:	d5f9      	bpl.n	8008520 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800852c:	698b      	ldr	r3, [r1, #24]
 800852e:	069a      	lsls	r2, r3, #26
 8008530:	d5fc      	bpl.n	800852c <I2C_WaitOnTXISFlagUntilTimeout+0x1c>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008532:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008534:	2210      	movs	r2, #16
 8008536:	61ca      	str	r2, [r1, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008538:	61cb      	str	r3, [r1, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800853a:	698b      	ldr	r3, [r1, #24]
 800853c:	079e      	lsls	r6, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800853e:	bf44      	itt	mi
 8008540:	2300      	movmi	r3, #0
 8008542:	628b      	strmi	r3, [r1, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008544:	698b      	ldr	r3, [r1, #24]
 8008546:	07dd      	lsls	r5, r3, #31
 8008548:	d403      	bmi.n	8008552 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800854a:	698b      	ldr	r3, [r1, #24]
 800854c:	f043 0301 	orr.w	r3, r3, #1
 8008550:	618b      	str	r3, [r1, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008552:	684b      	ldr	r3, [r1, #4]
 8008554:	4a1e      	ldr	r2, [pc, #120]	@ (80085d0 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)
 8008556:	4013      	ands	r3, r2
 8008558:	604b      	str	r3, [r1, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800855a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800855c:	2020      	movs	r0, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800855e:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008560:	f043 0304 	orr.w	r3, r3, #4
 8008564:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008566:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800856a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800856e:	2300      	movs	r3, #0
 8008570:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008574:	2001      	movs	r0, #1
}
 8008576:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008578:	f7ff f84a 	bl	8007610 <HAL_GetTick>
 800857c:	1b83      	subs	r3, r0, r6
 800857e:	42ab      	cmp	r3, r5
 8008580:	d819      	bhi.n	80085b6 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
 8008582:	b1c5      	cbz	r5, 80085b6 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008584:	6821      	ldr	r1, [r4, #0]
 8008586:	698b      	ldr	r3, [r1, #24]
 8008588:	079b      	lsls	r3, r3, #30
 800858a:	d41e      	bmi.n	80085ca <I2C_WaitOnTXISFlagUntilTimeout+0xba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800858c:	698b      	ldr	r3, [r1, #24]
 800858e:	06d8      	lsls	r0, r3, #27
 8008590:	d5f2      	bpl.n	8008578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008592:	698b      	ldr	r3, [r1, #24]
 8008594:	069b      	lsls	r3, r3, #26
 8008596:	d4cc      	bmi.n	8008532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008598:	f7ff f83a 	bl	8007610 <HAL_GetTick>
 800859c:	1b80      	subs	r0, r0, r6
 800859e:	4285      	cmp	r5, r0
 80085a0:	d309      	bcc.n	80085b6 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
 80085a2:	b145      	cbz	r5, 80085b6 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085a4:	6821      	ldr	r1, [r4, #0]
 80085a6:	698b      	ldr	r3, [r1, #24]
 80085a8:	069b      	lsls	r3, r3, #26
 80085aa:	d4c2      	bmi.n	8008532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ac:	f7ff f830 	bl	8007610 <HAL_GetTick>
 80085b0:	1b80      	subs	r0, r0, r6
 80085b2:	4285      	cmp	r5, r0
 80085b4:	d2f5      	bcs.n	80085a2 <I2C_WaitOnTXISFlagUntilTimeout+0x92>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085b8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085ba:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085bc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085be:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085c0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085c4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 80085c8:	e7d1      	b.n	800856e <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
  return HAL_OK;
 80085ca:	2000      	movs	r0, #0
}
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
 80085ce:	bf00      	nop
 80085d0:	fe00e800 	.word	0xfe00e800

080085d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	4616      	mov	r6, r2
 80085da:	460d      	mov	r5, r1
 80085dc:	2900      	cmp	r1, #0
 80085de:	d048      	beq.n	8008672 <I2C_WaitOnSTOPFlagUntilTimeout+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	6993      	ldr	r3, [r2, #24]
 80085e4:	0698      	lsls	r0, r3, #26
 80085e6:	d44e      	bmi.n	8008686 <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085e8:	6993      	ldr	r3, [r2, #24]
 80085ea:	06d9      	lsls	r1, r3, #27
 80085ec:	d532      	bpl.n	8008654 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
 80085ee:	1c68      	adds	r0, r5, #1
 80085f0:	d12c      	bne.n	800864c <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085f2:	6993      	ldr	r3, [r2, #24]
 80085f4:	0699      	lsls	r1, r3, #26
 80085f6:	d5fc      	bpl.n	80085f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085f8:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085fa:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085fc:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085fe:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008600:	6993      	ldr	r3, [r2, #24]
 8008602:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8008604:	bf44      	itt	mi
 8008606:	2300      	movmi	r3, #0
 8008608:	6293      	strmi	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800860a:	6993      	ldr	r3, [r2, #24]
 800860c:	07d9      	lsls	r1, r3, #31
 800860e:	d403      	bmi.n	8008618 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008610:	6993      	ldr	r3, [r2, #24]
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 8008618:	6853      	ldr	r3, [r2, #4]
 800861a:	481c      	ldr	r0, [pc, #112]	@ (800868c <I2C_WaitOnSTOPFlagUntilTimeout+0xb8>)
 800861c:	4003      	ands	r3, r0
 800861e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008620:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008622:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008624:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008626:	f043 0304 	orr.w	r3, r3, #4
 800862a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800862c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008630:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008634:	2300      	movs	r3, #0
 8008636:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800863a:	2001      	movs	r0, #1
}
 800863c:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863e:	f7fe ffe7 	bl	8007610 <HAL_GetTick>
 8008642:	1b80      	subs	r0, r0, r6
 8008644:	4285      	cmp	r5, r0
 8008646:	d30a      	bcc.n	800865e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
 8008648:	b14d      	cbz	r5, 800865e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	6993      	ldr	r3, [r2, #24]
 800864e:	069b      	lsls	r3, r3, #26
 8008650:	d5f5      	bpl.n	800863e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 8008652:	e7d1      	b.n	80085f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008654:	f7fe ffdc 	bl	8007610 <HAL_GetTick>
 8008658:	1b80      	subs	r0, r0, r6
 800865a:	4285      	cmp	r5, r0
 800865c:	d2c0      	bcs.n	80085e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800865e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008660:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008662:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008664:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008666:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008668:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800866c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008670:	e7e0      	b.n	8008634 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008672:	6802      	ldr	r2, [r0, #0]
 8008674:	6993      	ldr	r3, [r2, #24]
 8008676:	069b      	lsls	r3, r3, #26
 8008678:	d405      	bmi.n	8008686 <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800867a:	6993      	ldr	r3, [r2, #24]
 800867c:	06db      	lsls	r3, r3, #27
 800867e:	d4e5      	bmi.n	800864c <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008680:	f7fe ffc6 	bl	8007610 <HAL_GetTick>
 8008684:	e7eb      	b.n	800865e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
  return HAL_OK;
 8008686:	2000      	movs	r0, #0
}
 8008688:	bd70      	pop	{r4, r5, r6, pc}
 800868a:	bf00      	nop
 800868c:	fe00e800 	.word	0xfe00e800

08008690 <HAL_I2C_MspInit>:
}
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop

08008694 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008694:	2800      	cmp	r0, #0
 8008696:	d04f      	beq.n	8008738 <HAL_I2C_Init+0xa4>
{
 8008698:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800869a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800869e:	4604      	mov	r4, r0
 80086a0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d042      	beq.n	800872e <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 80086a8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80086aa:	2224      	movs	r2, #36	@ 0x24
 80086ac:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80086b0:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80086b2:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80086b4:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80086b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80086bc:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80086be:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80086c0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086c2:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80086c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086c8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80086ca:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80086cc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086ce:	d02a      	beq.n	8008726 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80086d0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086d4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80086d6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80086d8:	bf04      	itt	eq
 80086da:	f44f 6200 	moveq.w	r2, #2048	@ 0x800
 80086de:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086e0:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086e2:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086e4:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80086e8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80086ec:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086ee:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086f0:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086f2:	430a      	orrs	r2, r1
 80086f4:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086f6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086fe:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008700:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008702:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008704:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008706:	4301      	orrs	r1, r0
 8008708:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800870a:	6819      	ldr	r1, [r3, #0]
 800870c:	f041 0101 	orr.w	r1, r1, #1
 8008710:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008712:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008714:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008716:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008718:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800871c:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800871e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8008722:	4610      	mov	r0, r2
}
 8008724:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800872a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800872c:	e7d8      	b.n	80086e0 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800872e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008732:	f7ff ffad 	bl	8008690 <HAL_I2C_MspInit>
 8008736:	e7b7      	b.n	80086a8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8008738:	2001      	movs	r0, #1
}
 800873a:	4770      	bx	lr

0800873c <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop

08008740 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8008740:	b1b0      	cbz	r0, 8008770 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8008742:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008744:	2324      	movs	r3, #36	@ 0x24
{
 8008746:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008748:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800874c:	6813      	ldr	r3, [r2, #0]
 800874e:	f023 0301 	bic.w	r3, r3, #1
 8008752:	4604      	mov	r4, r0
 8008754:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008756:	f7ff fff1 	bl	800873c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800875a:	2300      	movs	r3, #0
 800875c:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800875e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008762:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008766:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  return HAL_OK;
 800876c:	4618      	mov	r0, r3
}
 800876e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008770:	2001      	movs	r0, #1
}
 8008772:	4770      	bx	lr

08008774 <HAL_I2C_Mem_Write>:
{
 8008774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800877a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800877e:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 8008782:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008786:	2b20      	cmp	r3, #32
 8008788:	f040 809f 	bne.w	80088ca <HAL_I2C_Mem_Write+0x156>
    if ((pData == NULL) || (Size == 0U))
 800878c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800878e:	4604      	mov	r4, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8094 	beq.w	80088be <HAL_I2C_Mem_Write+0x14a>
 8008796:	f1bb 0f00 	cmp.w	fp, #0
 800879a:	f000 8090 	beq.w	80088be <HAL_I2C_Mem_Write+0x14a>
    __HAL_LOCK(hi2c);
 800879e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	f000 8091 	beq.w	80088ca <HAL_I2C_Mem_Write+0x156>
 80087a8:	2301      	movs	r3, #1
 80087aa:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80087ae:	460f      	mov	r7, r1
 80087b0:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 80087b2:	f7fe ff2d 	bl	8007610 <HAL_GetTick>
 80087b6:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80087b8:	e005      	b.n	80087c6 <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ba:	f7fe ff29 	bl	8007610 <HAL_GetTick>
 80087be:	1b80      	subs	r0, r0, r6
 80087c0:	2819      	cmp	r0, #25
 80087c2:	f200 8085 	bhi.w	80088d0 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	699d      	ldr	r5, [r3, #24]
 80087ca:	f415 4500 	ands.w	r5, r5, #32768	@ 0x8000
 80087ce:	d1f4      	bne.n	80087ba <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 80087d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087d2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087d4:	2221      	movs	r2, #33	@ 0x21
 80087d6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087da:	2240      	movs	r2, #64	@ 0x40
 80087dc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087e0:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80087e2:	f8a4 b02a 	strh.w	fp, [r4, #42]	@ 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	4973      	ldr	r1, [pc, #460]	@ (80089b8 <HAL_I2C_Mem_Write+0x244>)
    hi2c->XferISR   = NULL;
 80087ea:	6365      	str	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 80087ec:	400a      	ands	r2, r1
 80087ee:	fa5f f189 	uxtb.w	r1, r9
 80087f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80087f6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80087fa:	433a      	orrs	r2, r7
 80087fc:	f042 4201 	orr.w	r2, r2, #2164260864	@ 0x81000000
 8008800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008804:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008806:	4651      	mov	r1, sl
 8008808:	4632      	mov	r2, r6
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff fe80 	bl	8008510 <I2C_WaitOnTXISFlagUntilTimeout>
 8008810:	2800      	cmp	r0, #0
 8008812:	f040 80a9 	bne.w	8008968 <HAL_I2C_Mem_Write+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008816:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800881a:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800881c:	d17f      	bne.n	800891e <HAL_I2C_Mem_Write+0x1aa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800881e:	fa5f f388 	uxtb.w	r3, r8
 8008822:	6293      	str	r3, [r2, #40]	@ 0x28
 8008824:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8008828:	d175      	bne.n	8008916 <HAL_I2C_Mem_Write+0x1a2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800882a:	6993      	ldr	r3, [r2, #24]
 800882c:	061d      	lsls	r5, r3, #24
 800882e:	d5fc      	bpl.n	800882a <HAL_I2C_Mem_Write+0xb6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008830:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008832:	b29b      	uxth	r3, r3
 8008834:	2bff      	cmp	r3, #255	@ 0xff
 8008836:	f240 809b 	bls.w	8008970 <HAL_I2C_Mem_Write+0x1fc>
  MODIFY_REG(hi2c->Instance->CR2,
 800883a:	6853      	ldr	r3, [r2, #4]
 800883c:	495f      	ldr	r1, [pc, #380]	@ (80089bc <HAL_I2C_Mem_Write+0x248>)
 800883e:	400b      	ands	r3, r1
 8008840:	433b      	orrs	r3, r7
 8008842:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800884a:	21ff      	movs	r1, #255	@ 0xff
 800884c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800884e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008850:	e004      	b.n	800885c <HAL_I2C_Mem_Write+0xe8>
    } while (hi2c->XferCount > 0U);
 8008852:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8098 	beq.w	800898c <HAL_I2C_Mem_Write+0x218>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800885c:	4632      	mov	r2, r6
 800885e:	4651      	mov	r1, sl
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff fe55 	bl	8008510 <I2C_WaitOnTXISFlagUntilTimeout>
 8008866:	2800      	cmp	r0, #0
 8008868:	d12c      	bne.n	80088c4 <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800886a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800886c:	6822      	ldr	r2, [r4, #0]
 800886e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008872:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008874:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008876:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008878:	3b01      	subs	r3, #1
 800887a:	b29b      	uxth	r3, r3
 800887c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800887e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008880:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008882:	3b01      	subs	r3, #1
 8008884:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008886:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8008888:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800888a:	2900      	cmp	r1, #0
 800888c:	d0e1      	beq.n	8008852 <HAL_I2C_Mem_Write+0xde>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1df      	bne.n	8008852 <HAL_I2C_Mem_Write+0xde>
 8008892:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8008896:	d131      	bne.n	80088fc <HAL_I2C_Mem_Write+0x188>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008898:	6993      	ldr	r3, [r2, #24]
 800889a:	0619      	lsls	r1, r3, #24
 800889c:	d5fc      	bpl.n	8008898 <HAL_I2C_Mem_Write+0x124>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800889e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	2bff      	cmp	r3, #255	@ 0xff
 80088a4:	d949      	bls.n	800893a <HAL_I2C_Mem_Write+0x1c6>
  MODIFY_REG(hi2c->Instance->CR2,
 80088a6:	6853      	ldr	r3, [r2, #4]
 80088a8:	4944      	ldr	r1, [pc, #272]	@ (80089bc <HAL_I2C_Mem_Write+0x248>)
 80088aa:	400b      	ands	r3, r1
 80088ac:	433b      	orrs	r3, r7
 80088ae:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 80088b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088b6:	21ff      	movs	r1, #255	@ 0xff
 80088b8:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80088ba:	6053      	str	r3, [r2, #4]
}
 80088bc:	e7c9      	b.n	8008852 <HAL_I2C_Mem_Write+0xde>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088c2:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80088c4:	2001      	movs	r0, #1
}
 80088c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80088ca:	2002      	movs	r0, #2
}
 80088cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088d0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d2:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088d4:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80088d8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088da:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80088dc:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80088e0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088e4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 80088e8:	e7ec      	b.n	80088c4 <HAL_I2C_Mem_Write+0x150>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ea:	f7fe fe91 	bl	8007610 <HAL_GetTick>
 80088ee:	1b80      	subs	r0, r0, r6
 80088f0:	4582      	cmp	sl, r0
 80088f2:	d3ed      	bcc.n	80088d0 <HAL_I2C_Mem_Write+0x15c>
 80088f4:	f1ba 0f00 	cmp.w	sl, #0
 80088f8:	d0ea      	beq.n	80088d0 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	6993      	ldr	r3, [r2, #24]
 80088fe:	061b      	lsls	r3, r3, #24
 8008900:	d5f3      	bpl.n	80088ea <HAL_I2C_Mem_Write+0x176>
 8008902:	e7cc      	b.n	800889e <HAL_I2C_Mem_Write+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008904:	f7fe fe84 	bl	8007610 <HAL_GetTick>
 8008908:	1b80      	subs	r0, r0, r6
 800890a:	4582      	cmp	sl, r0
 800890c:	d323      	bcc.n	8008956 <HAL_I2C_Mem_Write+0x1e2>
 800890e:	f1ba 0f00 	cmp.w	sl, #0
 8008912:	d020      	beq.n	8008956 <HAL_I2C_Mem_Write+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	6993      	ldr	r3, [r2, #24]
 8008918:	0618      	lsls	r0, r3, #24
 800891a:	d5f3      	bpl.n	8008904 <HAL_I2C_Mem_Write+0x190>
 800891c:	e788      	b.n	8008830 <HAL_I2C_Mem_Write+0xbc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800891e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8008922:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008924:	4651      	mov	r1, sl
 8008926:	4632      	mov	r2, r6
 8008928:	4620      	mov	r0, r4
 800892a:	f7ff fdf1 	bl	8008510 <I2C_WaitOnTXISFlagUntilTimeout>
 800892e:	b9d8      	cbnz	r0, 8008968 <HAL_I2C_Mem_Write+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008930:	6822      	ldr	r2, [r4, #0]
 8008932:	fa5f f388 	uxtb.w	r3, r8
 8008936:	6293      	str	r3, [r2, #40]	@ 0x28
 8008938:	e774      	b.n	8008824 <HAL_I2C_Mem_Write+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 800893a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800893c:	481f      	ldr	r0, [pc, #124]	@ (80089bc <HAL_I2C_Mem_Write+0x248>)
          hi2c->XferSize = hi2c->XferCount;
 800893e:	b29b      	uxth	r3, r3
 8008940:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008942:	b2d9      	uxtb	r1, r3
 8008944:	6853      	ldr	r3, [r2, #4]
 8008946:	4003      	ands	r3, r0
 8008948:	433b      	orrs	r3, r7
 800894a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800894e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008952:	6053      	str	r3, [r2, #4]
}
 8008954:	e77d      	b.n	8008852 <HAL_I2C_Mem_Write+0xde>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008956:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008958:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800895a:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800895c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800895e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008960:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008964:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008968:	2300      	movs	r3, #0
 800896a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800896e:	e7a9      	b.n	80088c4 <HAL_I2C_Mem_Write+0x150>
      hi2c->XferSize = hi2c->XferCount;
 8008970:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8008972:	4812      	ldr	r0, [pc, #72]	@ (80089bc <HAL_I2C_Mem_Write+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 8008974:	b29b      	uxth	r3, r3
 8008976:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008978:	b2d9      	uxtb	r1, r3
 800897a:	6853      	ldr	r3, [r2, #4]
 800897c:	4003      	ands	r3, r0
 800897e:	433b      	orrs	r3, r7
 8008980:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008984:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008988:	6053      	str	r3, [r2, #4]
}
 800898a:	e767      	b.n	800885c <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800898c:	4632      	mov	r2, r6
 800898e:	4651      	mov	r1, sl
 8008990:	4620      	mov	r0, r4
 8008992:	f7ff fe1f 	bl	80085d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008996:	2800      	cmp	r0, #0
 8008998:	d194      	bne.n	80088c4 <HAL_I2C_Mem_Write+0x150>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800899a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800899c:	4d08      	ldr	r5, [pc, #32]	@ (80089c0 <HAL_I2C_Mem_Write+0x24c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800899e:	2120      	movs	r1, #32
 80089a0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	402a      	ands	r2, r5
 80089a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80089a8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80089ac:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089b0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80089b4:	e787      	b.n	80088c6 <HAL_I2C_Mem_Write+0x152>
 80089b6:	bf00      	nop
 80089b8:	fc009800 	.word	0xfc009800
 80089bc:	fc009c00 	.word	0xfc009c00
 80089c0:	fe00e800 	.word	0xfe00e800

080089c4 <HAL_I2C_Mem_Read>:
{
 80089c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80089ca:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80089ce:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 80089d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d17f      	bne.n	8008ad8 <HAL_I2C_Mem_Read+0x114>
    if ((pData == NULL) || (Size == 0U))
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	4604      	mov	r4, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d075      	beq.n	8008acc <HAL_I2C_Mem_Read+0x108>
 80089e0:	f1ba 0f00 	cmp.w	sl, #0
 80089e4:	d072      	beq.n	8008acc <HAL_I2C_Mem_Read+0x108>
    __HAL_LOCK(hi2c);
 80089e6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d074      	beq.n	8008ad8 <HAL_I2C_Mem_Read+0x114>
 80089ee:	2301      	movs	r3, #1
 80089f0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80089f4:	460f      	mov	r7, r1
 80089f6:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 80089f8:	f7fe fe0a 	bl	8007610 <HAL_GetTick>
 80089fc:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80089fe:	e004      	b.n	8008a0a <HAL_I2C_Mem_Read+0x46>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a00:	f7fe fe06 	bl	8007610 <HAL_GetTick>
 8008a04:	1b40      	subs	r0, r0, r5
 8008a06:	2819      	cmp	r0, #25
 8008a08:	d869      	bhi.n	8008ade <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	6998      	ldr	r0, [r3, #24]
 8008a0e:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 8008a12:	d1f5      	bne.n	8008a00 <HAL_I2C_Mem_Read+0x3c>
    hi2c->pBuffPtr  = pData;
 8008a14:	9a08      	ldr	r2, [sp, #32]
 8008a16:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a18:	2222      	movs	r2, #34	@ 0x22
 8008a1a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a1e:	2240      	movs	r2, #64	@ 0x40
 8008a20:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a24:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8008a26:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	4977      	ldr	r1, [pc, #476]	@ (8008c0c <HAL_I2C_Mem_Read+0x248>)
    hi2c->XferISR   = NULL;
 8008a2e:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8008a30:	400a      	ands	r2, r1
 8008a32:	fa5f f188 	uxtb.w	r1, r8
 8008a36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008a3a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008a3e:	433a      	orrs	r2, r7
 8008a40:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008a44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a48:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7ff fd5e 	bl	8008510 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f040 80bf 	bne.w	8008bd8 <HAL_I2C_Mem_Read+0x214>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a5a:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a5e:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a60:	d162      	bne.n	8008b28 <HAL_I2C_Mem_Read+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a62:	fa5f f389 	uxtb.w	r3, r9
 8008a66:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a68:	1c70      	adds	r0, r6, #1
 8008a6a:	d159      	bne.n	8008b20 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a6c:	698b      	ldr	r3, [r1, #24]
 8008a6e:	065a      	lsls	r2, r3, #25
 8008a70:	d5fc      	bpl.n	8008a6c <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a72:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2bff      	cmp	r3, #255	@ 0xff
 8008a78:	f240 8095 	bls.w	8008ba6 <HAL_I2C_Mem_Read+0x1e2>
  MODIFY_REG(hi2c->Instance->CR2,
 8008a7c:	684b      	ldr	r3, [r1, #4]
 8008a7e:	4a63      	ldr	r2, [pc, #396]	@ (8008c0c <HAL_I2C_Mem_Read+0x248>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	4a63      	ldr	r2, [pc, #396]	@ (8008c10 <HAL_I2C_Mem_Read+0x24c>)
 8008a84:	433b      	orrs	r3, r7
 8008a86:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a88:	23ff      	movs	r3, #255	@ 0xff
 8008a8a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008a8c:	604a      	str	r2, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a8e:	1c70      	adds	r0, r6, #1
 8008a90:	d13a      	bne.n	8008b08 <HAL_I2C_Mem_Read+0x144>
 8008a92:	698b      	ldr	r3, [r1, #24]
 8008a94:	075a      	lsls	r2, r3, #29
 8008a96:	d5fc      	bpl.n	8008a92 <HAL_I2C_Mem_Read+0xce>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008a9a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8008a9c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8008a9e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008aa0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008aa2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008aa4:	3a01      	subs	r2, #1
 8008aa6:	b292      	uxth	r2, r2
 8008aa8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008aaa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008aac:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8008aae:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8008ab0:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ab2:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008ab4:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008ab6:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ab8:	b10a      	cbz	r2, 8008abe <HAL_I2C_Mem_Read+0xfa>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d043      	beq.n	8008b46 <HAL_I2C_Mem_Read+0x182>
    } while (hi2c->XferCount > 0U);
 8008abe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 808c 	beq.w	8008be0 <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ac8:	6821      	ldr	r1, [r4, #0]
 8008aca:	e7e0      	b.n	8008a8e <HAL_I2C_Mem_Read+0xca>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ad0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008ad2:	2001      	movs	r0, #1
}
 8008ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8008ad8:	2002      	movs	r0, #2
}
 8008ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ade:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae0:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ae2:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8008ae6:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ae8:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008aea:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8008aee:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 8008af6:	e7ec      	b.n	8008ad2 <HAL_I2C_Mem_Read+0x10e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af8:	f7fe fd8a 	bl	8007610 <HAL_GetTick>
 8008afc:	1b40      	subs	r0, r0, r5
 8008afe:	4286      	cmp	r6, r0
 8008b00:	d3ed      	bcc.n	8008ade <HAL_I2C_Mem_Read+0x11a>
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	d0eb      	beq.n	8008ade <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b06:	6821      	ldr	r1, [r4, #0]
 8008b08:	698b      	ldr	r3, [r1, #24]
 8008b0a:	075b      	lsls	r3, r3, #29
 8008b0c:	d5f4      	bpl.n	8008af8 <HAL_I2C_Mem_Read+0x134>
 8008b0e:	e7c3      	b.n	8008a98 <HAL_I2C_Mem_Read+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b10:	f7fe fd7e 	bl	8007610 <HAL_GetTick>
 8008b14:	1b43      	subs	r3, r0, r5
 8008b16:	429e      	cmp	r6, r3
 8008b18:	d355      	bcc.n	8008bc6 <HAL_I2C_Mem_Read+0x202>
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	d053      	beq.n	8008bc6 <HAL_I2C_Mem_Read+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b1e:	6821      	ldr	r1, [r4, #0]
 8008b20:	698b      	ldr	r3, [r1, #24]
 8008b22:	065b      	lsls	r3, r3, #25
 8008b24:	d5f4      	bpl.n	8008b10 <HAL_I2C_Mem_Read+0x14c>
 8008b26:	e7a4      	b.n	8008a72 <HAL_I2C_Mem_Read+0xae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b28:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8008b2c:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b2e:	462a      	mov	r2, r5
 8008b30:	4631      	mov	r1, r6
 8008b32:	4620      	mov	r0, r4
 8008b34:	f7ff fcec 	bl	8008510 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d14d      	bne.n	8008bd8 <HAL_I2C_Mem_Read+0x214>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b3c:	6821      	ldr	r1, [r4, #0]
 8008b3e:	fa5f f389 	uxtb.w	r3, r9
 8008b42:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b44:	e790      	b.n	8008a68 <HAL_I2C_Mem_Read+0xa4>
 8008b46:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	d11a      	bne.n	8008b82 <HAL_I2C_Mem_Read+0x1be>
 8008b4c:	6993      	ldr	r3, [r2, #24]
 8008b4e:	0619      	lsls	r1, r3, #24
 8008b50:	d5fc      	bpl.n	8008b4c <HAL_I2C_Mem_Read+0x188>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b52:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	2bff      	cmp	r3, #255	@ 0xff
 8008b58:	d917      	bls.n	8008b8a <HAL_I2C_Mem_Read+0x1c6>
  MODIFY_REG(hi2c->Instance->CR2,
 8008b5a:	6853      	ldr	r3, [r2, #4]
 8008b5c:	492d      	ldr	r1, [pc, #180]	@ (8008c14 <HAL_I2C_Mem_Read+0x250>)
 8008b5e:	400b      	ands	r3, r1
 8008b60:	433b      	orrs	r3, r7
 8008b62:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b6a:	21ff      	movs	r1, #255	@ 0xff
 8008b6c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008b6e:	6053      	str	r3, [r2, #4]
}
 8008b70:	e7a5      	b.n	8008abe <HAL_I2C_Mem_Read+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b72:	f7fe fd4d 	bl	8007610 <HAL_GetTick>
 8008b76:	1b43      	subs	r3, r0, r5
 8008b78:	429e      	cmp	r6, r3
 8008b7a:	d3b0      	bcc.n	8008ade <HAL_I2C_Mem_Read+0x11a>
 8008b7c:	2e00      	cmp	r6, #0
 8008b7e:	d0ae      	beq.n	8008ade <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b80:	6822      	ldr	r2, [r4, #0]
 8008b82:	6993      	ldr	r3, [r2, #24]
 8008b84:	061b      	lsls	r3, r3, #24
 8008b86:	d5f4      	bpl.n	8008b72 <HAL_I2C_Mem_Read+0x1ae>
 8008b88:	e7e3      	b.n	8008b52 <HAL_I2C_Mem_Read+0x18e>
          hi2c->XferSize = hi2c->XferCount;
 8008b8a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8008b8c:	4821      	ldr	r0, [pc, #132]	@ (8008c14 <HAL_I2C_Mem_Read+0x250>)
          hi2c->XferSize = hi2c->XferCount;
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008b92:	b2d9      	uxtb	r1, r3
 8008b94:	6853      	ldr	r3, [r2, #4]
 8008b96:	4003      	ands	r3, r0
 8008b98:	433b      	orrs	r3, r7
 8008b9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008ba2:	6053      	str	r3, [r2, #4]
}
 8008ba4:	e78b      	b.n	8008abe <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8008ba6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8008ba8:	4818      	ldr	r0, [pc, #96]	@ (8008c0c <HAL_I2C_Mem_Read+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	684b      	ldr	r3, [r1, #4]
 8008bb2:	4003      	ands	r3, r0
 8008bb4:	433b      	orrs	r3, r7
 8008bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bba:	f043 4302 	orr.w	r3, r3, #2181038080	@ 0x82000000
 8008bbe:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 8008bc2:	604b      	str	r3, [r1, #4]
}
 8008bc4:	e763      	b.n	8008a8e <HAL_I2C_Mem_Read+0xca>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bc6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bc8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bca:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bcc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bce:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bd0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008bde:	e778      	b.n	8008ad2 <HAL_I2C_Mem_Read+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008be0:	462a      	mov	r2, r5
 8008be2:	4631      	mov	r1, r6
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7ff fcf5 	bl	80085d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f47f af71 	bne.w	8008ad2 <HAL_I2C_Mem_Read+0x10e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bf0:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8008bf2:	4d09      	ldr	r5, [pc, #36]	@ (8008c18 <HAL_I2C_Mem_Read+0x254>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bf4:	2120      	movs	r1, #32
 8008bf6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	402a      	ands	r2, r5
 8008bfc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008bfe:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008c02:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c06:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008c0a:	e763      	b.n	8008ad4 <HAL_I2C_Mem_Read+0x110>
 8008c0c:	fc009800 	.word	0xfc009800
 8008c10:	81ff2400 	.word	0x81ff2400
 8008c14:	fc009c00 	.word	0xfc009c00
 8008c18:	fe00e800 	.word	0xfe00e800

08008c1c <HAL_I2C_GetState>:
  return hi2c->State;
 8008c1c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop

08008c24 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c24:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8008c28:	2a20      	cmp	r2, #32
 8008c2a:	d123      	bne.n	8008c74 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8008c2c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c30:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008c34:	2a01      	cmp	r2, #1
 8008c36:	4603      	mov	r3, r0
 8008c38:	d01c      	beq.n	8008c74 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c3a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c3c:	2024      	movs	r0, #36	@ 0x24
{
 8008c3e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c40:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008c44:	6810      	ldr	r0, [r2, #0]
 8008c46:	f020 0001 	bic.w	r0, r0, #1
 8008c4a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c4c:	6810      	ldr	r0, [r2, #0]
 8008c4e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008c52:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c54:	6810      	ldr	r0, [r2, #0]
 8008c56:	4301      	orrs	r1, r0
 8008c58:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c5a:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c5c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8008c60:	f041 0101 	orr.w	r1, r1, #1
 8008c64:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008c66:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008c6a:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c6e:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008c70:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8008c74:	2002      	movs	r0, #2
}
 8008c76:	4770      	bx	lr

08008c78 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c78:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8008c7c:	2a20      	cmp	r2, #32
 8008c7e:	d122      	bne.n	8008cc6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8008c80:	b500      	push	{lr}
 8008c82:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c86:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008c8a:	2a01      	cmp	r2, #1
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	d01c      	beq.n	8008cca <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c90:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c92:	2024      	movs	r0, #36	@ 0x24
 8008c94:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008c98:	6810      	ldr	r0, [r2, #0]
 8008c9a:	f020 0001 	bic.w	r0, r0, #1
 8008c9e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008ca0:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ca2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ca6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008caa:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cac:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cae:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8008cb2:	f041 0101 	orr.w	r1, r1, #1
 8008cb6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008cb8:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008cbc:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8008cc0:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008cc2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8008cc6:	2002      	movs	r0, #2
}
 8008cc8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8008cca:	2002      	movs	r0, #2
}
 8008ccc:	f85d fb04 	ldr.w	pc, [sp], #4

08008cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cd2:	b08b      	sub	sp, #44	@ 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008cd4:	b360      	cbz	r0, 8008d30 <HAL_PCD_Init+0x60>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008cd6:	f890 33bd 	ldrb.w	r3, [r0, #957]	@ 0x3bd
  USBx = hpcd->Instance;
 8008cda:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008cdc:	4605      	mov	r5, r0
 8008cde:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d079      	beq.n	8008dda <HAL_PCD_Init+0x10a>
 8008ce6:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	f885 33bd 	strb.w	r3, [r5, #957]	@ 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008cee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cf0:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008cf2:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
    hpcd->Init.dma_enable = 0U;
 8008cf6:	bf08      	it	eq
 8008cf8:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8008cfa:	f005 ffc3 	bl	800ec84 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cfe:	f856 eb10 	ldr.w	lr, [r6], #16
 8008d02:	46b4      	mov	ip, r6
 8008d04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008d08:	466c      	mov	r4, sp
 8008d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d12:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8008d16:	e884 0003 	stmia.w	r4, {r0, r1}
 8008d1a:	1d2f      	adds	r7, r5, #4
 8008d1c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008d20:	4670      	mov	r0, lr
 8008d22:	f005 fef5 	bl	800eb10 <USB_CoreInit>
 8008d26:	4604      	mov	r4, r0
 8008d28:	b130      	cbz	r0, 8008d38 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	f885 33bd 	strb.w	r3, [r5, #957]	@ 0x3bd
    return HAL_ERROR;
 8008d30:	2401      	movs	r4, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8008d32:	4620      	mov	r0, r4
 8008d34:	b00b      	add	sp, #44	@ 0x2c
 8008d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008d38:	4601      	mov	r1, r0
 8008d3a:	6828      	ldr	r0, [r5, #0]
 8008d3c:	f005 ffaa 	bl	800ec94 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d40:	6868      	ldr	r0, [r5, #4]
 8008d42:	b358      	cbz	r0, 8008d9c <HAL_PCD_Init+0xcc>
 8008d44:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008d46:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d4a:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008d4c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8008d50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d54:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8008d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008d5c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d60:	fa5f f28c 	uxtb.w	r2, ip
 8008d64:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d66:	e9c3 1111 	strd	r1, r1, [r3, #68]	@ 0x44
    hpcd->IN_ep[i].is_in = 1U;
 8008d6a:	f883 e03d 	strb.w	lr, [r3, #61]	@ 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d6e:	f883 103f 	strb.w	r1, [r3, #63]	@ 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d72:	6519      	str	r1, [r3, #80]	@ 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d74:	d3ea      	bcc.n	8008d4c <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8008d76:	2200      	movs	r2, #0
 8008d78:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8008d7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d80:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8008d82:	f883 41fc 	strb.w	r4, [r3, #508]	@ 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d86:	b2cc      	uxtb	r4, r1
 8008d88:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d8a:	e9c3 2281 	strd	r2, r2, [r3, #516]	@ 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 8008d8e:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d92:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d9a:	d3ed      	bcc.n	8008d78 <HAL_PCD_Init+0xa8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008d9e:	466c      	mov	r4, sp
 8008da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008da2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008da6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008daa:	e884 0003 	stmia.w	r4, {r0, r1}
 8008dae:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008db2:	6828      	ldr	r0, [r5, #0]
 8008db4:	f005 ff86 	bl	800ecc4 <USB_DevInit>
 8008db8:	4604      	mov	r4, r0
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d1b5      	bne.n	8008d2a <HAL_PCD_Init+0x5a>
  if (hpcd->Init.lpm_enable == 1U)
 8008dbe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  hpcd->USB_Address = 0U;
 8008dc0:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008dc4:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8008dc6:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8008dc8:	f885 23bd 	strb.w	r2, [r5, #957]	@ 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8008dcc:	d00b      	beq.n	8008de6 <HAL_PCD_Init+0x116>
  (void)USB_DevDisconnect(hpcd->Instance);
 8008dce:	6828      	ldr	r0, [r5, #0]
 8008dd0:	f006 fb06 	bl	800f3e0 <USB_DevDisconnect>
}
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	b00b      	add	sp, #44	@ 0x2c
 8008dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8008dda:	f880 23bc 	strb.w	r2, [r0, #956]	@ 0x3bc
    HAL_PCD_MspInit(hpcd);
 8008dde:	f7f8 fdbf 	bl	8001960 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8008de2:	6828      	ldr	r0, [r5, #0]
 8008de4:	e780      	b.n	8008ce8 <HAL_PCD_Init+0x18>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008de6:	4628      	mov	r0, r5
 8008de8:	f000 fca4 	bl	8009734 <HAL_PCDEx_ActivateLPM>
 8008dec:	e7ef      	b.n	8008dce <HAL_PCD_Init+0xfe>
 8008dee:	bf00      	nop

08008df0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008df0:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008df2:	f890 33bc 	ldrb.w	r3, [r0, #956]	@ 0x3bc
 8008df6:	2b01      	cmp	r3, #1
{
 8008df8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dfa:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008dfc:	d012      	beq.n	8008e24 <HAL_PCD_Start+0x34>
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008dfe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  __HAL_LOCK(hpcd);
 8008e00:	2201      	movs	r2, #1
  if (hpcd->Init.battery_charging_enable == 1U)
 8008e02:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8008e04:	f884 23bc 	strb.w	r2, [r4, #956]	@ 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 8008e08:	d103      	bne.n	8008e12 <HAL_PCD_Start+0x22>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e0a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e10:	6383      	str	r3, [r0, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008e12:	f005 ff2f 	bl	800ec74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	f006 fad2 	bl	800f3c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc

  return HAL_OK;
}
 8008e22:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008e24:	2002      	movs	r0, #2
}
 8008e26:	bd10      	pop	{r4, pc}

08008e28 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e2c:	6806      	ldr	r6, [r0, #0]
{
 8008e2e:	b085      	sub	sp, #20
 8008e30:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008e32:	4630      	mov	r0, r6
 8008e34:	f006 fb12 	bl	800f45c <USB_GetMode>
 8008e38:	b110      	cbz	r0, 8008e40 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8008e3a:	b005      	add	sp, #20
 8008e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008e40:	4605      	mov	r5, r0
 8008e42:	6820      	ldr	r0, [r4, #0]
 8008e44:	f006 fadc 	bl	800f400 <USB_ReadInterrupts>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d0f6      	beq.n	8008e3a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008e4c:	6820      	ldr	r0, [r4, #0]
 8008e4e:	f006 fad7 	bl	800f400 <USB_ReadInterrupts>
 8008e52:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008e56:	6820      	ldr	r0, [r4, #0]
 8008e58:	bf1e      	ittt	ne
 8008e5a:	6943      	ldrne	r3, [r0, #20]
 8008e5c:	f003 0302 	andne.w	r3, r3, #2
 8008e60:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008e62:	f006 facd 	bl	800f400 <USB_ReadInterrupts>
 8008e66:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e6a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008e6c:	d012      	beq.n	8008e94 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e6e:	6983      	ldr	r3, [r0, #24]
 8008e70:	f023 0310 	bic.w	r3, r3, #16
 8008e74:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8008e76:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008e78:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8008e7c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008e7e:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008e82:	f000 824f 	beq.w	8009324 <HAL_PCD_IRQHandler+0x4fc>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008e86:	2b06      	cmp	r3, #6
 8008e88:	f000 81ec 	beq.w	8009264 <HAL_PCD_IRQHandler+0x43c>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e8c:	6983      	ldr	r3, [r0, #24]
 8008e8e:	f043 0310 	orr.w	r3, r3, #16
 8008e92:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008e94:	f006 fab4 	bl	800f400 <USB_ReadInterrupts>
 8008e98:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008e9c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008e9e:	f040 8106 	bne.w	80090ae <HAL_PCD_IRQHandler+0x286>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ea2:	f006 faad 	bl	800f400 <USB_ReadInterrupts>
 8008ea6:	0340      	lsls	r0, r0, #13
 8008ea8:	d478      	bmi.n	8008f9c <HAL_PCD_IRQHandler+0x174>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008eaa:	f8d4 c000 	ldr.w	ip, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008eae:	4660      	mov	r0, ip
 8008eb0:	f006 faa6 	bl	800f400 <USB_ReadInterrupts>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	db5d      	blt.n	8008f74 <HAL_PCD_IRQHandler+0x14c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008eb8:	6820      	ldr	r0, [r4, #0]
 8008eba:	f006 faa1 	bl	800f400 <USB_ReadInterrupts>
 8008ebe:	0500      	lsls	r0, r0, #20
 8008ec0:	d44d      	bmi.n	8008f5e <HAL_PCD_IRQHandler+0x136>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008ec2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008ec4:	f006 fa9c 	bl	800f400 <USB_ReadInterrupts>
 8008ec8:	0102      	lsls	r2, r0, #4
 8008eca:	d514      	bpl.n	8008ef6 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008ecc:	6822      	ldr	r2, [r4, #0]
 8008ece:	6953      	ldr	r3, [r2, #20]
 8008ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ed4:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008ed6:	f894 33f4 	ldrb.w	r3, [r4, #1012]	@ 0x3f4
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f040 81ac 	bne.w	8009238 <HAL_PCD_IRQHandler+0x410>
        hpcd->LPM_State = LPM_L1;
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	f884 13f4 	strb.w	r1, [r4, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008ee6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008ee8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008eec:	f8c4 33f8 	str.w	r3, [r4, #1016]	@ 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f7f8 fe97 	bl	8001c24 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ef6:	6820      	ldr	r0, [r4, #0]
 8008ef8:	f006 fa82 	bl	800f400 <USB_ReadInterrupts>
 8008efc:	04c3      	lsls	r3, r0, #19
 8008efe:	f100 814c 	bmi.w	800919a <HAL_PCD_IRQHandler+0x372>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	f006 fa7c 	bl	800f400 <USB_ReadInterrupts>
 8008f08:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8008f0c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f0e:	f040 812d 	bne.w	800916c <HAL_PCD_IRQHandler+0x344>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008f12:	f006 fa75 	bl	800f400 <USB_ReadInterrupts>
 8008f16:	0707      	lsls	r7, r0, #28
 8008f18:	f100 811f 	bmi.w	800915a <HAL_PCD_IRQHandler+0x332>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	f006 fa6f 	bl	800f400 <USB_ReadInterrupts>
 8008f22:	02c6      	lsls	r6, r0, #11
 8008f24:	f100 810f 	bmi.w	8009146 <HAL_PCD_IRQHandler+0x31e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008f28:	6820      	ldr	r0, [r4, #0]
 8008f2a:	f006 fa69 	bl	800f400 <USB_ReadInterrupts>
 8008f2e:	0285      	lsls	r5, r0, #10
 8008f30:	f100 80ff 	bmi.w	8009132 <HAL_PCD_IRQHandler+0x30a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008f34:	6820      	ldr	r0, [r4, #0]
 8008f36:	f006 fa63 	bl	800f400 <USB_ReadInterrupts>
 8008f3a:	0040      	lsls	r0, r0, #1
 8008f3c:	f100 80f0 	bmi.w	8009120 <HAL_PCD_IRQHandler+0x2f8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	f006 fa5d 	bl	800f400 <USB_ReadInterrupts>
 8008f46:	0741      	lsls	r1, r0, #29
 8008f48:	f57f af77 	bpl.w	8008e3a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f50:	076a      	lsls	r2, r5, #29
 8008f52:	f100 8208 	bmi.w	8009366 <HAL_PCD_IRQHandler+0x53e>
      hpcd->Instance->GOTGINT |= temp;
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	432a      	orrs	r2, r5
 8008f5a:	605a      	str	r2, [r3, #4]
 8008f5c:	e76d      	b.n	8008e3a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008f5e:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 8008f62:	07d9      	lsls	r1, r3, #31
 8008f64:	f100 81fb 	bmi.w	800935e <HAL_PCD_IRQHandler+0x536>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008f68:	6820      	ldr	r0, [r4, #0]
 8008f6a:	6943      	ldr	r3, [r0, #20]
 8008f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f70:	6143      	str	r3, [r0, #20]
 8008f72:	e7a7      	b.n	8008ec4 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008f74:	f8d6 2804 	ldr.w	r2, [r6, #2052]	@ 0x804
 8008f78:	f022 0201 	bic.w	r2, r2, #1
 8008f7c:	f8c6 2804 	str.w	r2, [r6, #2052]	@ 0x804
      if (hpcd->LPM_State == LPM_L1)
 8008f80:	f894 33f4 	ldrb.w	r3, [r4, #1012]	@ 0x3f4
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	f000 8166 	beq.w	8009256 <HAL_PCD_IRQHandler+0x42e>
        HAL_PCD_ResumeCallback(hpcd);
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f7f8 fd6e 	bl	8001a6c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	6943      	ldr	r3, [r0, #20]
 8008f94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f98:	6143      	str	r3, [r0, #20]
 8008f9a:	e78e      	b.n	8008eba <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	f006 fa3b 	bl	800f418 <USB_ReadDevAllInEpInterrupt>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008fa2:	f8d4 c000 	ldr.w	ip, [r4]
      while (ep_intr != 0U)
 8008fa6:	4681      	mov	r9, r0
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d080      	beq.n	8008eae <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	46a0      	mov	r8, r4
 8008fb0:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008fb4:	9600      	str	r6, [sp, #0]
 8008fb6:	469b      	mov	fp, r3
 8008fb8:	9501      	str	r5, [sp, #4]
 8008fba:	4660      	mov	r0, ip
 8008fbc:	e009      	b.n	8008fd2 <HAL_PCD_IRQHandler+0x1aa>
      while (ep_intr != 0U)
 8008fbe:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8008fc2:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 8008fc6:	f108 081c 	add.w	r8, r8, #28
 8008fca:	f107 0720 	add.w	r7, r7, #32
 8008fce:	f000 8160 	beq.w	8009292 <HAL_PCD_IRQHandler+0x46a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008fd2:	f019 0f01 	tst.w	r9, #1
 8008fd6:	d0f2      	beq.n	8008fbe <HAL_PCD_IRQHandler+0x196>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008fd8:	fa5f fa8b 	uxtb.w	sl, fp
 8008fdc:	4651      	mov	r1, sl
 8008fde:	f006 fa2d 	bl	800f43c <USB_ReadDevInEPInterrupt>
 8008fe2:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008fe4:	07e8      	lsls	r0, r5, #31
 8008fe6:	f100 8158 	bmi.w	800929a <HAL_PCD_IRQHandler+0x472>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008fea:	0729      	lsls	r1, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008fec:	bf44      	itt	mi
 8008fee:	2308      	movmi	r3, #8
 8008ff0:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008ff2:	06ea      	lsls	r2, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008ff4:	bf44      	itt	mi
 8008ff6:	2310      	movmi	r3, #16
 8008ff8:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008ffa:	066b      	lsls	r3, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008ffc:	bf44      	itt	mi
 8008ffe:	2340      	movmi	r3, #64	@ 0x40
 8009000:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009002:	07ae      	lsls	r6, r5, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009004:	bf44      	itt	mi
 8009006:	2302      	movmi	r3, #2
 8009008:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800900a:	062d      	lsls	r5, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800900c:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800900e:	d5d6      	bpl.n	8008fbe <HAL_PCD_IRQHandler+0x196>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8009010:	e9d8 5214 	ldrd	r5, r2, [r8, #80]	@ 0x50
 8009014:	42aa      	cmp	r2, r5
 8009016:	d8d2      	bhi.n	8008fbe <HAL_PCD_IRQHandler+0x196>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009018:	f500 6110 	add.w	r1, r0, #2304	@ 0x900
 800901c:	eb01 164b 	add.w	r6, r1, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8009020:	f8d8 1044 	ldr.w	r1, [r8, #68]	@ 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009024:	69b3      	ldr	r3, [r6, #24]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	9003      	str	r0, [sp, #12]
  len = ep->xfer_len - ep->xfer_count;
 8009028:	eba5 0c02 	sub.w	ip, r5, r2
  len32b = (len + 3U) / 4U;
 800902c:	458c      	cmp	ip, r1
 800902e:	bf28      	it	cs
 8009030:	468c      	movcs	ip, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009032:	fa1f fe83 	uxth.w	lr, r3
  len32b = (len + 3U) / 4U;
 8009036:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800903a:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 800903e:	f0c0 819c 	bcc.w	800937a <HAL_PCD_IRQHandler+0x552>
 8009042:	f8cd b008 	str.w	fp, [sp, #8]
 8009046:	4683      	mov	fp, r0
 8009048:	e01e      	b.n	8009088 <HAL_PCD_IRQHandler+0x260>
 800904a:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800904e:	f8d8 1048 	ldr.w	r1, [r8, #72]	@ 0x48
 8009052:	429d      	cmp	r5, r3
 8009054:	bf28      	it	cs
 8009056:	461d      	movcs	r5, r3
 8009058:	b2ab      	uxth	r3, r5
 800905a:	4652      	mov	r2, sl
 800905c:	4658      	mov	r0, fp
 800905e:	f006 f925 	bl	800f2ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8009062:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
    ep->xfer_count += len;
 8009066:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
    ep->xfer_buff  += len;
 800906a:	442b      	add	r3, r5
 800906c:	f8c8 3048 	str.w	r3, [r8, #72]	@ 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009070:	69b3      	ldr	r3, [r6, #24]
    ep->xfer_count += len;
 8009072:	442a      	add	r2, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009074:	b29b      	uxth	r3, r3
    len32b = (len + 3U) / 4U;
 8009076:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009078:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
    ep->xfer_count += len;
 800907c:	f8c8 2054 	str.w	r2, [r8, #84]	@ 0x54
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009080:	f0c0 8176 	bcc.w	8009370 <HAL_PCD_IRQHandler+0x548>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009084:	f8d8 5050 	ldr.w	r5, [r8, #80]	@ 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009088:	4295      	cmp	r5, r2
    len = ep->xfer_len - ep->xfer_count;
 800908a:	eba5 0502 	sub.w	r5, r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800908e:	d8dc      	bhi.n	800904a <HAL_PCD_IRQHandler+0x222>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009090:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009094:	6820      	ldr	r0, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009096:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009098:	f00b 050f 	and.w	r5, fp, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800909c:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80090a0:	2101      	movs	r1, #1
 80090a2:	40a9      	lsls	r1, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090a4:	ea22 0201 	bic.w	r2, r2, r1
 80090a8:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
 80090ac:	e787      	b.n	8008fbe <HAL_PCD_IRQHandler+0x196>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80090ae:	f006 f9ab 	bl	800f408 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80090b2:	4607      	mov	r7, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f000 80e8 	beq.w	800928a <HAL_PCD_IRQHandler+0x462>
 80090ba:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80090bc:	9500      	str	r5, [sp, #0]
 80090be:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
      epnum = 0U;
 80090c2:	f04f 0900 	mov.w	r9, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80090c6:	f44f 5b00 	mov.w	fp, #8192	@ 0x2000
 80090ca:	e006      	b.n	80090da <HAL_PCD_IRQHandler+0x2b2>
      while (ep_intr != 0U)
 80090cc:	087f      	lsrs	r7, r7, #1
        epnum++;
 80090ce:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 80090d2:	f108 0820 	add.w	r8, r8, #32
 80090d6:	f000 80da 	beq.w	800928e <HAL_PCD_IRQHandler+0x466>
        if ((ep_intr & 0x1U) != 0U)
 80090da:	07f9      	lsls	r1, r7, #31
 80090dc:	d5f6      	bpl.n	80090cc <HAL_PCD_IRQHandler+0x2a4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80090de:	fa5f f589 	uxtb.w	r5, r9
 80090e2:	4629      	mov	r1, r5
 80090e4:	f006 f9a0 	bl	800f428 <USB_ReadDevOutEPInterrupt>
 80090e8:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80090ea:	f01a 0f01 	tst.w	sl, #1
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090ee:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80090f0:	f040 80fb 	bne.w	80092ea <HAL_PCD_IRQHandler+0x4c2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80090f4:	f01a 0f08 	tst.w	sl, #8
 80090f8:	f040 80e1 	bne.w	80092be <HAL_PCD_IRQHandler+0x496>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80090fc:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009100:	bf1c      	itt	ne
 8009102:	2310      	movne	r3, #16
 8009104:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009108:	f01a 0f20 	tst.w	sl, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800910c:	bf1c      	itt	ne
 800910e:	2320      	movne	r3, #32
 8009110:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009114:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009118:	bf18      	it	ne
 800911a:	f8c8 b008 	strne.w	fp, [r8, #8]
 800911e:	e7d5      	b.n	80090cc <HAL_PCD_IRQHandler+0x2a4>
      HAL_PCD_ConnectCallback(hpcd);
 8009120:	4620      	mov	r0, r4
 8009122:	f7f8 fccb 	bl	8001abc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009126:	6820      	ldr	r0, [r4, #0]
 8009128:	6943      	ldr	r3, [r0, #20]
 800912a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800912e:	6143      	str	r3, [r0, #20]
 8009130:	e707      	b.n	8008f42 <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009132:	4620      	mov	r0, r4
 8009134:	2100      	movs	r1, #0
 8009136:	f7f8 fcb9 	bl	8001aac <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800913a:	6820      	ldr	r0, [r4, #0]
 800913c:	6943      	ldr	r3, [r0, #20]
 800913e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009142:	6143      	str	r3, [r0, #20]
 8009144:	e6f7      	b.n	8008f36 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009146:	4620      	mov	r0, r4
 8009148:	2100      	movs	r1, #0
 800914a:	f7f8 fcb3 	bl	8001ab4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800914e:	6820      	ldr	r0, [r4, #0]
 8009150:	6943      	ldr	r3, [r0, #20]
 8009152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009156:	6143      	str	r3, [r0, #20]
 8009158:	e6e7      	b.n	8008f2a <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 800915a:	4620      	mov	r0, r4
 800915c:	f7f8 fc5c 	bl	8001a18 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009160:	6820      	ldr	r0, [r4, #0]
 8009162:	6943      	ldr	r3, [r0, #20]
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	6143      	str	r3, [r0, #20]
 800916a:	e6d8      	b.n	8008f1e <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 800916c:	f006 f97a 	bl	800f464 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	f005 fe93 	bl	800ee9c <USB_GetDevSpeed>
 8009176:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009178:	6825      	ldr	r5, [r4, #0]
 800917a:	f001 f839 	bl	800a1f0 <HAL_RCC_GetHCLKFreq>
 800917e:	7b22      	ldrb	r2, [r4, #12]
 8009180:	4601      	mov	r1, r0
 8009182:	4628      	mov	r0, r5
 8009184:	f005 fcfc 	bl	800eb80 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8009188:	4620      	mov	r0, r4
 800918a:	f7f8 fc49 	bl	8001a20 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800918e:	6820      	ldr	r0, [r4, #0]
 8009190:	6943      	ldr	r3, [r0, #20]
 8009192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009196:	6143      	str	r3, [r0, #20]
 8009198:	e6bb      	b.n	8008f12 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800919a:	f8d6 3804 	ldr.w	r3, [r6, #2052]	@ 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800919e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091a0:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80091a4:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091a6:	f8c6 3804 	str.w	r3, [r6, #2052]	@ 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80091aa:	f005 fe65 	bl	800ee78 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091ae:	6860      	ldr	r0, [r4, #4]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091b0:	f506 6700 	add.w	r7, r6, #2048	@ 0x800
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091b4:	b1f8      	cbz	r0, 80091f6 <HAL_PCD_IRQHandler+0x3ce>
 80091b6:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80091ba:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 80091be:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80091c6:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80091ce:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80091d0:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80091d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80091d8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80091dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091e4:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091e6:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091ea:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091f0:	f103 0320 	add.w	r3, r3, #32
 80091f4:	d1e3      	bne.n	80091be <HAL_PCD_IRQHandler+0x396>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80091f6:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80091f8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80091fa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80091fe:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009200:	b9f2      	cbnz	r2, 8009240 <HAL_PCD_IRQHandler+0x418>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009208:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800920c:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f043 030b 	orr.w	r3, r3, #11
 8009214:	613b      	str	r3, [r7, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009216:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800921a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800921c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009220:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009224:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 8009228:	f006 f92e 	bl	800f488 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800922c:	6820      	ldr	r0, [r4, #0]
 800922e:	6943      	ldr	r3, [r0, #20]
 8009230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009234:	6143      	str	r3, [r0, #20]
 8009236:	e665      	b.n	8008f04 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 8009238:	4620      	mov	r0, r4
 800923a:	f7f8 fbff 	bl	8001a3c <HAL_PCD_SuspendCallback>
 800923e:	e65a      	b.n	8008ef6 <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009244:	f043 030b 	orr.w	r3, r3, #11
 8009248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800924c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800924e:	f043 030b 	orr.w	r3, r3, #11
 8009252:	647b      	str	r3, [r7, #68]	@ 0x44
 8009254:	e7df      	b.n	8009216 <HAL_PCD_IRQHandler+0x3ee>
        hpcd->LPM_State = LPM_L0;
 8009256:	2100      	movs	r1, #0
 8009258:	f884 13f4 	strb.w	r1, [r4, #1012]	@ 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800925c:	4620      	mov	r0, r4
 800925e:	f7f8 fce1 	bl	8001c24 <HAL_PCDEx_LPM_Callback>
 8009262:	e695      	b.n	8008f90 <HAL_PCD_IRQHandler+0x168>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009264:	2208      	movs	r2, #8
 8009266:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 800926a:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800926c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009270:	f006 f82c 	bl	800f2cc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009274:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8009278:	f3c7 130a 	ubfx	r3, r7, #4, #11
 800927c:	f8d2 1214 	ldr.w	r1, [r2, #532]	@ 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009280:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009282:	440b      	add	r3, r1
 8009284:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 8009288:	e600      	b.n	8008e8c <HAL_PCD_IRQHandler+0x64>
 800928a:	6820      	ldr	r0, [r4, #0]
 800928c:	e609      	b.n	8008ea2 <HAL_PCD_IRQHandler+0x7a>
 800928e:	9d00      	ldr	r5, [sp, #0]
 8009290:	e607      	b.n	8008ea2 <HAL_PCD_IRQHandler+0x7a>
 8009292:	e9dd 6500 	ldrd	r6, r5, [sp]
 8009296:	4684      	mov	ip, r0
 8009298:	e609      	b.n	8008eae <HAL_PCD_IRQHandler+0x86>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800929a:	9800      	ldr	r0, [sp, #0]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800929c:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800929e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80092a2:	f00b 020f 	and.w	r2, fp, #15
 80092a6:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80092aa:	ea23 0302 	bic.w	r3, r3, r2
 80092ae:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80092b2:	60b9      	str	r1, [r7, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80092b4:	4620      	mov	r0, r4
 80092b6:	4651      	mov	r1, sl
 80092b8:	f7f8 fba4 	bl	8001a04 <HAL_PCD_DataInStageCallback>
 80092bc:	e695      	b.n	8008fea <HAL_PCD_IRQHandler+0x1c2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80092be:	2308      	movs	r3, #8
 80092c0:	f8c8 3008 	str.w	r3, [r8, #8]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092c4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092c6:	4a2f      	ldr	r2, [pc, #188]	@ (8009384 <HAL_PCD_IRQHandler+0x55c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092c8:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 80092cc:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092d0:	4291      	cmp	r1, r2
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092d2:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092d4:	d904      	bls.n	80092e0 <HAL_PCD_IRQHandler+0x4b8>
 80092d6:	0405      	lsls	r5, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092d8:	bf44      	itt	mi
 80092da:	f44f 4200 	movmi.w	r2, #32768	@ 0x8000
 80092de:	609a      	strmi	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80092e0:	4620      	mov	r0, r4
 80092e2:	f7f8 fb7f 	bl	80019e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80092e6:	6820      	ldr	r0, [r4, #0]
 80092e8:	e708      	b.n	80090fc <HAL_PCD_IRQHandler+0x2d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80092ea:	2301      	movs	r3, #1
 80092ec:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092f0:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092f4:	4a24      	ldr	r2, [pc, #144]	@ (8009388 <HAL_PCD_IRQHandler+0x560>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092f6:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 80092fa:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092fe:	4594      	cmp	ip, r2
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009300:	6899      	ldr	r1, [r3, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009302:	d109      	bne.n	8009318 <HAL_PCD_IRQHandler+0x4f0>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009304:	040a      	lsls	r2, r1, #16
 8009306:	d503      	bpl.n	8009310 <HAL_PCD_IRQHandler+0x4e8>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009308:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800930c:	609a      	str	r2, [r3, #8]
 800930e:	e6f1      	b.n	80090f4 <HAL_PCD_IRQHandler+0x2cc>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009310:	068a      	lsls	r2, r1, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009312:	bf44      	itt	mi
 8009314:	2220      	movmi	r2, #32
 8009316:	609a      	strmi	r2, [r3, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009318:	4620      	mov	r0, r4
 800931a:	4629      	mov	r1, r5
 800931c:	f7f8 fb68 	bl	80019f0 <HAL_PCD_DataOutStageCallback>
 8009320:	6820      	ldr	r0, [r4, #0]
 8009322:	e6e7      	b.n	80090f4 <HAL_PCD_IRQHandler+0x2cc>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009324:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009328:	421f      	tst	r7, r3
 800932a:	f43f adaf 	beq.w	8008e8c <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800932e:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009332:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8009336:	f3c7 120a 	ubfx	r2, r7, #4, #11
 800933a:	f8d8 1208 	ldr.w	r1, [r8, #520]	@ 0x208
 800933e:	4630      	mov	r0, r6
 8009340:	4617      	mov	r7, r2
 8009342:	f005 ffc3 	bl	800f2cc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009346:	f8d8 3208 	ldr.w	r3, [r8, #520]	@ 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800934a:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800934c:	443b      	add	r3, r7
 800934e:	f8c8 3208 	str.w	r3, [r8, #520]	@ 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009352:	f8d8 3214 	ldr.w	r3, [r8, #532]	@ 0x214
 8009356:	443b      	add	r3, r7
 8009358:	f8c8 3214 	str.w	r3, [r8, #532]	@ 0x214
 800935c:	e596      	b.n	8008e8c <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800935e:	4620      	mov	r0, r4
 8009360:	f7f8 fb6c 	bl	8001a3c <HAL_PCD_SuspendCallback>
 8009364:	e600      	b.n	8008f68 <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 8009366:	4620      	mov	r0, r4
 8009368:	f7f8 fbac 	bl	8001ac4 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	e5f2      	b.n	8008f56 <HAL_PCD_IRQHandler+0x12e>
  if (ep->xfer_len <= ep->xfer_count)
 8009370:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009374:	f8d8 5050 	ldr.w	r5, [r8, #80]	@ 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009378:	6820      	ldr	r0, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 800937a:	42aa      	cmp	r2, r5
 800937c:	f4ff ae1f 	bcc.w	8008fbe <HAL_PCD_IRQHandler+0x196>
 8009380:	e689      	b.n	8009096 <HAL_PCD_IRQHandler+0x26e>
 8009382:	bf00      	nop
 8009384:	4f54300a 	.word	0x4f54300a
 8009388:	4f54310a 	.word	0x4f54310a

0800938c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800938c:	f890 23bc 	ldrb.w	r2, [r0, #956]	@ 0x3bc
 8009390:	2a01      	cmp	r2, #1
 8009392:	d00d      	beq.n	80093b0 <HAL_PCD_SetAddress+0x24>
{
 8009394:	b510      	push	{r4, lr}
 8009396:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8009398:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800939a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800939c:	f884 23bc 	strb.w	r2, [r4, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 80093a0:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80093a4:	f005 fffc 	bl	800f3a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80093a8:	2000      	movs	r0, #0
 80093aa:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 80093ae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80093b0:	2002      	movs	r0, #2
}
 80093b2:	4770      	bx	lr

080093b4 <HAL_PCD_EP_Open>:
{
 80093b4:	b510      	push	{r4, lr}
 80093b6:	f001 0e0f 	and.w	lr, r1, #15
 80093ba:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80093be:	0609      	lsls	r1, r1, #24
{
 80093c0:	4604      	mov	r4, r0
 80093c2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80093c6:	d424      	bmi.n	8009412 <HAL_PCD_EP_Open+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093c8:	f50c 71fe 	add.w	r1, ip, #508	@ 0x1fc
 80093cc:	4401      	add	r1, r0
    ep->is_in = 0U;
 80093ce:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 80093d2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80093d6:	f04f 0c00 	mov.w	ip, #0
 80093da:	f880 c1fd 	strb.w	ip, [r0, #509]	@ 0x1fd
  ep->maxpacket = ep_mps;
 80093de:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80093e0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093e2:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 80093e6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80093e8:	b10a      	cbz	r2, 80093ee <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 80093ea:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80093ee:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80093f0:	bf04      	itt	eq
 80093f2:	2300      	moveq	r3, #0
 80093f4:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80093f6:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d015      	beq.n	800942a <HAL_PCD_EP_Open+0x76>
 80093fe:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009400:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009402:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009406:	f005 fd53 	bl	800eeb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800940a:	2000      	movs	r0, #0
 800940c:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 8009410:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009412:	f10c 013c 	add.w	r1, ip, #60	@ 0x3c
 8009416:	4401      	add	r1, r0
    ep->is_in = 1U;
 8009418:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800941c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8009420:	f04f 0c01 	mov.w	ip, #1
 8009424:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
 8009428:	e7d9      	b.n	80093de <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 800942a:	2002      	movs	r0, #2
}
 800942c:	bd10      	pop	{r4, pc}
 800942e:	bf00      	nop

08009430 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009430:	f001 030f 	and.w	r3, r1, #15
 8009434:	f001 020f 	and.w	r2, r1, #15
{
 8009438:	b510      	push	{r4, lr}
 800943a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800943e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009440:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 8009442:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
 8009446:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800944a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 800944e:	d415      	bmi.n	800947c <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009450:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009454:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8009456:	f04f 0c00 	mov.w	ip, #0
 800945a:	f880 c1fd 	strb.w	ip, [r0, #509]	@ 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800945e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009460:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 8009464:	2b01      	cmp	r3, #1
 8009466:	d014      	beq.n	8009492 <HAL_PCD_EP_Close+0x62>
 8009468:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800946a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800946c:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009470:	f005 fd66 	bl	800ef40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009474:	2000      	movs	r0, #0
 8009476:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 800947a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800947c:	333c      	adds	r3, #60	@ 0x3c
 800947e:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8009480:	f04f 0c01 	mov.w	ip, #1
 8009484:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009488:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800948a:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 800948e:	2b01      	cmp	r3, #1
 8009490:	d1ea      	bne.n	8009468 <HAL_PCD_EP_Close+0x38>
 8009492:	2002      	movs	r0, #2
}
 8009494:	bd10      	pop	{r4, pc}
 8009496:	bf00      	nop

08009498 <HAL_PCD_EP_Receive>:
{
 8009498:	b510      	push	{r4, lr}
 800949a:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 800949e:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 80094a2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094a6:	211c      	movs	r1, #28
 80094a8:	fb01 0104 	mla	r1, r1, r4, r0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80094ac:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 80094ae:	f8cc 3210 	str.w	r3, [ip, #528]	@ 0x210
  ep->xfer_count = 0U;
 80094b2:	2300      	movs	r3, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094b4:	f501 71fe 	add.w	r1, r1, #508	@ 0x1fc
  ep->xfer_buff = pBuf;
 80094b8:	f8cc 2208 	str.w	r2, [ip, #520]	@ 0x208
  ep->xfer_count = 0U;
 80094bc:	f8cc 3214 	str.w	r3, [ip, #532]	@ 0x214
  ep->is_in = 0U;
 80094c0:	f88c 31fd 	strb.w	r3, [ip, #509]	@ 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80094c4:	f88c 41fc 	strb.w	r4, [ip, #508]	@ 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80094c8:	b91c      	cbnz	r4, 80094d2 <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80094ca:	f005 fe7d 	bl	800f1c8 <USB_EP0StartXfer>
}
 80094ce:	2000      	movs	r0, #0
 80094d0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80094d2:	f005 fd97 	bl	800f004 <USB_EPStartXfer>
}
 80094d6:	2000      	movs	r0, #0
 80094d8:	bd10      	pop	{r4, pc}
 80094da:	bf00      	nop

080094dc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80094dc:	f001 010f 	and.w	r1, r1, #15
 80094e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80094e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80094e8:	f8d0 0214 	ldr.w	r0, [r0, #532]	@ 0x214
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <HAL_PCD_EP_Transmit>:
{
 80094f0:	b510      	push	{r4, lr}
 80094f2:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 80094f6:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 80094fa:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094fe:	211c      	movs	r1, #28
 8009500:	fb01 0104 	mla	r1, r1, r4, r0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009504:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 8009506:	f8cc 3050 	str.w	r3, [ip, #80]	@ 0x50
  ep->xfer_count = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	f8cc 3054 	str.w	r3, [ip, #84]	@ 0x54
  ep->is_in = 1U;
 8009510:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009512:	313c      	adds	r1, #60	@ 0x3c
  ep->xfer_buff = pBuf;
 8009514:	f8cc 2048 	str.w	r2, [ip, #72]	@ 0x48
  ep->is_in = 1U;
 8009518:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800951c:	f88c 403c 	strb.w	r4, [ip, #60]	@ 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009520:	b91c      	cbnz	r4, 800952a <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009522:	f005 fe51 	bl	800f1c8 <USB_EP0StartXfer>
}
 8009526:	2000      	movs	r0, #0
 8009528:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800952a:	f005 fd6b 	bl	800f004 <USB_EPStartXfer>
}
 800952e:	2000      	movs	r0, #0
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop

08009534 <HAL_PCD_EP_SetStall>:
{
 8009534:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009536:	6843      	ldr	r3, [r0, #4]
 8009538:	f001 050f 	and.w	r5, r1, #15
 800953c:	429d      	cmp	r5, r3
 800953e:	d833      	bhi.n	80095a8 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8009540:	060b      	lsls	r3, r1, #24
 8009542:	4604      	mov	r4, r0
 8009544:	d41c      	bmi.n	8009580 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8009546:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800954a:	221c      	movs	r2, #28
 800954c:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8009550:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8009554:	f501 71fe 	add.w	r1, r1, #508	@ 0x1fc
    ep->is_in = 0U;
 8009558:	2200      	movs	r2, #0
 800955a:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
  ep->is_stall = 1U;
 800955e:	2301      	movs	r3, #1
 8009560:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009562:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8009564:	f894 23bc 	ldrb.w	r2, [r4, #956]	@ 0x3bc
 8009568:	429a      	cmp	r2, r3
 800956a:	d01b      	beq.n	80095a4 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800956c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800956e:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009572:	f005 febb 	bl	800f2ec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009576:	b1cd      	cbz	r5, 80095ac <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8009578:	2000      	movs	r0, #0
 800957a:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 800957e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8009580:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009584:	211c      	movs	r1, #28
 8009586:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800958a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800958e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009590:	313c      	adds	r1, #60	@ 0x3c
    ep->is_in = 1U;
 8009592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  ep->is_stall = 1U;
 8009596:	2301      	movs	r3, #1
 8009598:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800959a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800959c:	f894 23bc 	ldrb.w	r2, [r4, #956]	@ 0x3bc
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d1e3      	bne.n	800956c <HAL_PCD_EP_SetStall+0x38>
 80095a4:	2002      	movs	r0, #2
}
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80095a8:	2001      	movs	r0, #1
}
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80095ac:	6820      	ldr	r0, [r4, #0]
 80095ae:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 80095b2:	f005 ff69 	bl	800f488 <USB_EP0_OutStart>
 80095b6:	e7df      	b.n	8009578 <HAL_PCD_EP_SetStall+0x44>

080095b8 <HAL_PCD_EP_ClrStall>:
{
 80095b8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80095ba:	6843      	ldr	r3, [r0, #4]
 80095bc:	f001 020f 	and.w	r2, r1, #15
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d82f      	bhi.n	8009624 <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 80095c4:	4604      	mov	r4, r0
 80095c6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 80095ca:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80095ce:	0609      	lsls	r1, r1, #24
 80095d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 80095d4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 80095d8:	d416      	bmi.n	8009608 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095da:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80095de:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 80095e0:	2500      	movs	r5, #0
 80095e2:	f880 51fd 	strb.w	r5, [r0, #509]	@ 0x1fd
  ep->is_stall = 0U;
 80095e6:	2500      	movs	r5, #0
 80095e8:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095ea:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80095ec:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d015      	beq.n	8009620 <HAL_PCD_EP_ClrStall+0x68>
 80095f4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095f6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80095f8:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095fc:	f005 fea4 	bl	800f348 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009600:	f884 53bc 	strb.w	r5, [r4, #956]	@ 0x3bc
  return HAL_OK;
 8009604:	4628      	mov	r0, r5
}
 8009606:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009608:	333c      	adds	r3, #60	@ 0x3c
 800960a:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800960c:	2501      	movs	r5, #1
 800960e:	f880 503d 	strb.w	r5, [r0, #61]	@ 0x3d
  ep->is_stall = 0U;
 8009612:	2500      	movs	r5, #0
 8009614:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009616:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009618:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 800961c:	2b01      	cmp	r3, #1
 800961e:	d1e9      	bne.n	80095f4 <HAL_PCD_EP_ClrStall+0x3c>
 8009620:	2002      	movs	r0, #2
}
 8009622:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009624:	2001      	movs	r0, #1
}
 8009626:	bd38      	pop	{r3, r4, r5, pc}

08009628 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009628:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800962a:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800962c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (fifo == 0U)
 800962e:	b919      	cbnz	r1, 8009638 <HAL_PCDEx_SetTxFiFo+0x10>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009630:	4313      	orrs	r3, r2
 8009632:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8009634:	2000      	movs	r0, #0
 8009636:	4770      	bx	lr
{
 8009638:	b430      	push	{r4, r5}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800963a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800963c:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800963e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009642:	d06b      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009644:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
    for (i = 0U; i < (fifo - 1U); i++)
 8009648:	2901      	cmp	r1, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800964a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800964e:	d065      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009650:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    for (i = 0U; i < (fifo - 1U); i++)
 8009654:	2902      	cmp	r1, #2
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009656:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800965a:	d05f      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800965c:	f8d0 410c 	ldr.w	r4, [r0, #268]	@ 0x10c
    for (i = 0U; i < (fifo - 1U); i++)
 8009660:	2903      	cmp	r1, #3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009662:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009666:	d059      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009668:	f8d0 4110 	ldr.w	r4, [r0, #272]	@ 0x110
    for (i = 0U; i < (fifo - 1U); i++)
 800966c:	2904      	cmp	r1, #4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800966e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009672:	d053      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009674:	f8d0 4114 	ldr.w	r4, [r0, #276]	@ 0x114
    for (i = 0U; i < (fifo - 1U); i++)
 8009678:	2905      	cmp	r1, #5
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800967a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800967e:	d04d      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009680:	f8d0 4118 	ldr.w	r4, [r0, #280]	@ 0x118
    for (i = 0U; i < (fifo - 1U); i++)
 8009684:	2906      	cmp	r1, #6
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009686:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800968a:	d047      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800968c:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
    for (i = 0U; i < (fifo - 1U); i++)
 8009690:	2907      	cmp	r1, #7
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009692:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009696:	d041      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009698:	f8d0 4120 	ldr.w	r4, [r0, #288]	@ 0x120
    for (i = 0U; i < (fifo - 1U); i++)
 800969c:	2908      	cmp	r1, #8
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800969e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096a2:	d03b      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096a4:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
    for (i = 0U; i < (fifo - 1U); i++)
 80096a8:	2909      	cmp	r1, #9
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096ae:	d035      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096b0:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
    for (i = 0U; i < (fifo - 1U); i++)
 80096b4:	290a      	cmp	r1, #10
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096ba:	d02f      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096bc:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
    for (i = 0U; i < (fifo - 1U); i++)
 80096c0:	290b      	cmp	r1, #11
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096c6:	d029      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096c8:	f8d0 4130 	ldr.w	r4, [r0, #304]	@ 0x130
    for (i = 0U; i < (fifo - 1U); i++)
 80096cc:	290c      	cmp	r1, #12
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096d2:	d023      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096d4:	f8d0 4134 	ldr.w	r4, [r0, #308]	@ 0x134
    for (i = 0U; i < (fifo - 1U); i++)
 80096d8:	290d      	cmp	r1, #13
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096de:	d01d      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096e0:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
    for (i = 0U; i < (fifo - 1U); i++)
 80096e4:	290e      	cmp	r1, #14
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096e6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096ea:	d017      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096ec:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
    for (i = 0U; i < (fifo - 1U); i++)
 80096f0:	290f      	cmp	r1, #15
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096f2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80096f6:	d011      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096f8:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
    for (i = 0U; i < (fifo - 1U); i++)
 80096fc:	2910      	cmp	r1, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009702:	d00b      	beq.n	800971c <HAL_PCDEx_SetTxFiFo+0xf4>
 8009704:	2410      	movs	r4, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009706:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 800970a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800970e:	3401      	adds	r4, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009710:	f8dc 5004 	ldr.w	r5, [ip, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8009714:	428c      	cmp	r4, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009716:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800971a:	d3f4      	bcc.n	8009706 <HAL_PCDEx_SetTxFiFo+0xde>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800971c:	3140      	adds	r1, #64	@ 0x40
 800971e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009722:	431a      	orrs	r2, r3
}
 8009724:	2000      	movs	r0, #0
 8009726:	bc30      	pop	{r4, r5}
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009728:	604a      	str	r2, [r1, #4]
}
 800972a:	4770      	bx	lr

0800972c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800972c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800972e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8009730:	6259      	str	r1, [r3, #36]	@ 0x24
}
 8009732:	4770      	bx	lr

08009734 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009734:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8009736:	2000      	movs	r0, #0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009738:	681a      	ldr	r2, [r3, #0]
{
 800973a:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 800973c:	f883 03f4 	strb.w	r0, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009740:	6991      	ldr	r1, [r2, #24]
  hpcd->lpm_active = 1U;
 8009742:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009744:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
  hpcd->lpm_active = 1U;
 8009748:	f8c3 43fc 	str.w	r4, [r3, #1020]	@ 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800974c:	6191      	str	r1, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800974e:	6d53      	ldr	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8009750:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009758:	f043 0303 	orr.w	r3, r3, #3
 800975c:	6553      	str	r3, [r2, #84]	@ 0x54
}
 800975e:	4770      	bx	lr

08009760 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009760:	4b06      	ldr	r3, [pc, #24]	@ (800977c <HAL_PWREx_GetVoltageRange+0x1c>)
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8009768:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800976c:	d004      	beq.n	8009778 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800976e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009772:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8009776:	0240      	lsls	r0, r0, #9
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	40007000 	.word	0x40007000

08009780 <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009780:	4a35      	ldr	r2, [pc, #212]	@ (8009858 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8009782:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009784:	b960      	cbnz	r0, 80097a0 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009786:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800978a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800978e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009792:	d01b      	beq.n	80097cc <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009798:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800979c:	2000      	movs	r0, #0
}
 800979e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097a0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80097a4:	d006      	beq.n	80097b4 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80097a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80097aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80097ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80097b0:	2000      	movs	r0, #0
}
 80097b2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80097b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80097b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097bc:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80097c0:	d029      	beq.n	8009816 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80097ca:	e7f1      	b.n	80097b0 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097d4:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80097d6:	4821      	ldr	r0, [pc, #132]	@ (800985c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80097d8:	4921      	ldr	r1, [pc, #132]	@ (8009860 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80097de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097e2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80097e4:	6803      	ldr	r3, [r0, #0]
 80097e6:	2032      	movs	r0, #50	@ 0x32
 80097e8:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097ec:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80097ee:	fba1 1303 	umull	r1, r3, r1, r3
 80097f2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097f4:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80097f6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097fa:	d506      	bpl.n	800980a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80097fc:	e000      	b.n	8009800 <HAL_PWREx_ControlVoltageScaling+0x80>
 80097fe:	b123      	cbz	r3, 800980a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8009800:	6951      	ldr	r1, [r2, #20]
 8009802:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8009804:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009808:	d4f9      	bmi.n	80097fe <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800980a:	4b13      	ldr	r3, [pc, #76]	@ (8009858 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	055b      	lsls	r3, r3, #21
 8009810:	d5ce      	bpl.n	80097b0 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8009812:	2003      	movs	r0, #3
 8009814:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800981a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800981e:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009820:	480e      	ldr	r0, [pc, #56]	@ (800985c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009822:	490f      	ldr	r1, [pc, #60]	@ (8009860 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009824:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009828:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800982c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800982e:	6803      	ldr	r3, [r0, #0]
 8009830:	2032      	movs	r0, #50	@ 0x32
 8009832:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009836:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009838:	fba1 1303 	umull	r1, r3, r1, r3
 800983c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800983e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009840:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009844:	d5e1      	bpl.n	800980a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8009846:	e001      	b.n	800984c <HAL_PWREx_ControlVoltageScaling+0xcc>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0de      	beq.n	800980a <HAL_PWREx_ControlVoltageScaling+0x8a>
 800984c:	6951      	ldr	r1, [r2, #20]
 800984e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8009850:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009854:	d5d9      	bpl.n	800980a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8009856:	e7f7      	b.n	8009848 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8009858:	40007000 	.word	0x40007000
 800985c:	200001e0 	.word	0x200001e0
 8009860:	431bde83 	.word	0x431bde83

08009864 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009864:	4a02      	ldr	r2, [pc, #8]	@ (8009870 <HAL_PWREx_EnableVddUSB+0xc>)
 8009866:	6853      	ldr	r3, [r2, #4]
 8009868:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800986c:	6053      	str	r3, [r2, #4]
}
 800986e:	4770      	bx	lr
 8009870:	40007000 	.word	0x40007000

08009874 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009874:	4a02      	ldr	r2, [pc, #8]	@ (8009880 <HAL_PWREx_EnableVddIO2+0xc>)
 8009876:	6853      	ldr	r3, [r2, #4]
 8009878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800987c:	6053      	str	r3, [r2, #4]
}
 800987e:	4770      	bx	lr
 8009880:	40007000 	.word	0x40007000

08009884 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009884:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009886:	4d1e      	ldr	r5, [pc, #120]	@ (8009900 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009888:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800988a:	00db      	lsls	r3, r3, #3
{
 800988c:	b083      	sub	sp, #12
 800988e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009890:	d51b      	bpl.n	80098ca <RCC_SetFlashLatencyFromMSIRange+0x46>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009892:	f7ff ff65 	bl	8009760 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009896:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800989a:	d028      	beq.n	80098ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800989c:	2c7f      	cmp	r4, #127	@ 0x7f
 800989e:	d812      	bhi.n	80098c6 <RCC_SetFlashLatencyFromMSIRange+0x42>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80098a0:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 80098a4:	fab4 f484 	clz	r4, r4
 80098a8:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80098aa:	4916      	ldr	r1, [pc, #88]	@ (8009904 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80098ac:	680b      	ldr	r3, [r1, #0]
 80098ae:	f023 030f 	bic.w	r3, r3, #15
 80098b2:	4323      	orrs	r3, r4
 80098b4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80098b6:	6808      	ldr	r0, [r1, #0]
 80098b8:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80098bc:	1b00      	subs	r0, r0, r4
 80098be:	bf18      	it	ne
 80098c0:	2001      	movne	r0, #1
 80098c2:	b003      	add	sp, #12
 80098c4:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80098c6:	2402      	movs	r4, #2
 80098c8:	e7ef      	b.n	80098aa <RCC_SetFlashLatencyFromMSIRange+0x26>
    __HAL_RCC_PWR_CLK_ENABLE();
 80098ca:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80098cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098d0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80098d2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80098d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80098dc:	f7ff ff40 	bl	8009760 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80098e0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80098e2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80098e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098ea:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80098ec:	d1d6      	bne.n	800989c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80098ee:	2c80      	cmp	r4, #128	@ 0x80
 80098f0:	d904      	bls.n	80098fc <RCC_SetFlashLatencyFromMSIRange+0x78>
        latency = FLASH_LATENCY_2; /* 2WS */
 80098f2:	2ca1      	cmp	r4, #161	@ 0xa1
 80098f4:	bf34      	ite	cc
 80098f6:	2401      	movcc	r4, #1
 80098f8:	2402      	movcs	r4, #2
 80098fa:	e7d6      	b.n	80098aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80098fc:	2400      	movs	r4, #0
 80098fe:	e7d4      	b.n	80098aa <RCC_SetFlashLatencyFromMSIRange+0x26>
 8009900:	40021000 	.word	0x40021000
 8009904:	40022000 	.word	0x40022000

08009908 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009908:	4a25      	ldr	r2, [pc, #148]	@ (80099a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800990a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800990c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800990e:	f013 030c 	ands.w	r3, r3, #12
 8009912:	d00b      	beq.n	800992c <HAL_RCC_GetSysClockFreq+0x24>
 8009914:	2b0c      	cmp	r3, #12
 8009916:	d03a      	beq.n	800998e <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009918:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800991c:	fa42 f303 	asr.w	r3, r2, r3
    sysclockfreq = HSE_VALUE;
 8009920:	f013 0f01 	tst.w	r3, #1
 8009924:	481f      	ldr	r0, [pc, #124]	@ (80099a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009926:	bf18      	it	ne
 8009928:	2000      	movne	r0, #0
 800992a:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800992c:	4a1c      	ldr	r2, [pc, #112]	@ (80099a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800992e:	6811      	ldr	r1, [r2, #0]
 8009930:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009932:	bf54      	ite	pl
 8009934:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009938:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800993a:	491b      	ldr	r1, [pc, #108]	@ (80099a8 <HAL_RCC_GetSysClockFreq+0xa0>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800993c:	bf54      	ite	pl
 800993e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009942:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8009946:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800994a:	b333      	cbz	r3, 800999a <HAL_RCC_GetSysClockFreq+0x92>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800994c:	2b0c      	cmp	r3, #12
 800994e:	d125      	bne.n	800999c <HAL_RCC_GetSysClockFreq+0x94>
{
 8009950:	b410      	push	{r4}
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009952:	4c13      	ldr	r4, [pc, #76]	@ (80099a0 <HAL_RCC_GetSysClockFreq+0x98>)
      pllvco = HSI_VALUE;
 8009954:	4a13      	ldr	r2, [pc, #76]	@ (80099a4 <HAL_RCC_GetSysClockFreq+0x9c>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009956:	68e3      	ldr	r3, [r4, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009958:	68e1      	ldr	r1, [r4, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800995a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800995e:	3b02      	subs	r3, #2
      pllvco = HSI_VALUE;
 8009960:	2b01      	cmp	r3, #1
 8009962:	bf98      	it	ls
 8009964:	4610      	movls	r0, r2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009966:	68e2      	ldr	r2, [r4, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009968:	68e3      	ldr	r3, [r4, #12]
}
 800996a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800996e:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009972:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009976:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800997a:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800997c:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009980:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009982:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009984:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8009988:	fbb2 f0f3 	udiv	r0, r2, r3
}
 800998c:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800998e:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009992:	2a01      	cmp	r2, #1
 8009994:	d0ca      	beq.n	800992c <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009996:	2000      	movs	r0, #0
 8009998:	e7da      	b.n	8009950 <HAL_RCC_GetSysClockFreq+0x48>
}
 800999a:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800999c:	2000      	movs	r0, #0
  return sysclockfreq;
 800999e:	4770      	bx	lr
 80099a0:	40021000 	.word	0x40021000
 80099a4:	00f42400 	.word	0x00f42400
 80099a8:	080172e4 	.word	0x080172e4

080099ac <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f000 830c 	beq.w	8009fca <HAL_RCC_OscConfig+0x61e>
{
 80099b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099b6:	4a99      	ldr	r2, [pc, #612]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80099b8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ba:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099bc:	68d6      	ldr	r6, [r2, #12]
 80099be:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80099c0:	06d8      	lsls	r0, r3, #27
{
 80099c2:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099c4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099c8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80099cc:	d52e      	bpl.n	8009a2c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80099ce:	2d00      	cmp	r5, #0
 80099d0:	f000 812b 	beq.w	8009c2a <HAL_RCC_OscConfig+0x27e>
 80099d4:	2d0c      	cmp	r5, #12
 80099d6:	f000 8125 	beq.w	8009c24 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80099da:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80099dc:	4f8f      	ldr	r7, [pc, #572]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 819a 	beq.w	8009d18 <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	f043 0301 	orr.w	r3, r3, #1
 80099ea:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80099ec:	f7fd fe10 	bl	8007610 <HAL_GetTick>
 80099f0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80099f2:	e006      	b.n	8009a02 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80099f4:	f7fd fe0c 	bl	8007610 <HAL_GetTick>
 80099f8:	eba0 0008 	sub.w	r0, r0, r8
 80099fc:	2802      	cmp	r0, #2
 80099fe:	f200 819b 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	079b      	lsls	r3, r3, #30
 8009a06:	d5f5      	bpl.n	80099f4 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	f043 0308 	orr.w	r3, r3, #8
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	6a22      	ldr	r2, [r4, #32]
 8009a14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	69e2      	ldr	r2, [r4, #28]
 8009a20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009a28:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	07d9      	lsls	r1, r3, #31
 8009a2e:	f100 80cc 	bmi.w	8009bca <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a32:	0799      	lsls	r1, r3, #30
 8009a34:	d523      	bpl.n	8009a7e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009a36:	2d04      	cmp	r5, #4
 8009a38:	f000 815e 	beq.w	8009cf8 <HAL_RCC_OscConfig+0x34c>
 8009a3c:	2d0c      	cmp	r5, #12
 8009a3e:	f000 8158 	beq.w	8009cf2 <HAL_RCC_OscConfig+0x346>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a42:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8009a44:	4e75      	ldr	r6, [pc, #468]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8191 	beq.w	8009d6e <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_ENABLE();
 8009a4c:	6833      	ldr	r3, [r6, #0]
 8009a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a52:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009a54:	f7fd fddc 	bl	8007610 <HAL_GetTick>
 8009a58:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a5a:	e005      	b.n	8009a68 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a5c:	f7fd fdd8 	bl	8007610 <HAL_GetTick>
 8009a60:	1bc0      	subs	r0, r0, r7
 8009a62:	2802      	cmp	r0, #2
 8009a64:	f200 8168 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a68:	6833      	ldr	r3, [r6, #0]
 8009a6a:	055b      	lsls	r3, r3, #21
 8009a6c:	d5f6      	bpl.n	8009a5c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a6e:	6873      	ldr	r3, [r6, #4]
 8009a70:	6922      	ldr	r2, [r4, #16]
 8009a72:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009a76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009a7a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	0719      	lsls	r1, r3, #28
 8009a80:	d519      	bpl.n	8009ab6 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a82:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8009a84:	4e65      	ldr	r6, [pc, #404]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 811f 	beq.w	8009cca <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_LSI_ENABLE();
 8009a8c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8009a90:	f043 0301 	orr.w	r3, r3, #1
 8009a94:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8009a98:	f7fd fdba 	bl	8007610 <HAL_GetTick>
 8009a9c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a9e:	e005      	b.n	8009aac <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009aa0:	f7fd fdb6 	bl	8007610 <HAL_GetTick>
 8009aa4:	1bc0      	subs	r0, r0, r7
 8009aa6:	2802      	cmp	r0, #2
 8009aa8:	f200 8146 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009aac:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8009ab0:	079a      	lsls	r2, r3, #30
 8009ab2:	d5f5      	bpl.n	8009aa0 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	075f      	lsls	r7, r3, #29
 8009ab8:	d53f      	bpl.n	8009b3a <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009aba:	4b58      	ldr	r3, [pc, #352]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
 8009abc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009abe:	00d6      	lsls	r6, r2, #3
 8009ac0:	f100 8153 	bmi.w	8009d6a <HAL_RCC_OscConfig+0x3be>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ac4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009ac6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009aca:	659a      	str	r2, [r3, #88]	@ 0x58
 8009acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009ad6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ad8:	4f51      	ldr	r7, [pc, #324]	@ (8009c20 <HAL_RCC_OscConfig+0x274>)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	05d8      	lsls	r0, r3, #23
 8009ade:	f140 81a0 	bpl.w	8009e22 <HAL_RCC_OscConfig+0x476>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	f000 8154 	beq.w	8009d92 <HAL_RCC_OscConfig+0x3e6>
 8009aea:	2b05      	cmp	r3, #5
 8009aec:	f000 81c4 	beq.w	8009e78 <HAL_RCC_OscConfig+0x4cc>
 8009af0:	4f4a      	ldr	r7, [pc, #296]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
 8009af2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8009af6:	f022 0201 	bic.w	r2, r2, #1
 8009afa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8009afe:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8009b02:	f022 0204 	bic.w	r2, r2, #4
 8009b06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f040 8148 	bne.w	8009da0 <HAL_RCC_OscConfig+0x3f4>
      tickstart = HAL_GetTick();
 8009b10:	f7fd fd7e 	bl	8007610 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b14:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009b18:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b1a:	e006      	b.n	8009b2a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b1c:	f7fd fd78 	bl	8007610 <HAL_GetTick>
 8009b20:	eba0 0008 	sub.w	r0, r0, r8
 8009b24:	4548      	cmp	r0, r9
 8009b26:	f200 8107 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b2e:	079b      	lsls	r3, r3, #30
 8009b30:	d4f4      	bmi.n	8009b1c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8009b32:	2e00      	cmp	r6, #0
 8009b34:	f040 8187 	bne.w	8009e46 <HAL_RCC_OscConfig+0x49a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	069e      	lsls	r6, r3, #26
 8009b3c:	d518      	bpl.n	8009b70 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009b3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8009b40:	4e36      	ldr	r6, [pc, #216]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 8159 	beq.w	8009dfa <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_ENABLE();
 8009b48:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009b4c:	f043 0301 	orr.w	r3, r3, #1
 8009b50:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8009b54:	f7fd fd5c 	bl	8007610 <HAL_GetTick>
 8009b58:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009b5a:	e005      	b.n	8009b68 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b5c:	f7fd fd58 	bl	8007610 <HAL_GetTick>
 8009b60:	1bc0      	subs	r0, r0, r7
 8009b62:	2802      	cmp	r0, #2
 8009b64:	f200 80e8 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009b68:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009b6c:	0798      	lsls	r0, r3, #30
 8009b6e:	d5f5      	bpl.n	8009b5c <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009b70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009b72:	b333      	cbz	r3, 8009bc2 <HAL_RCC_OscConfig+0x216>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	f000 818d 	beq.w	8009e94 <HAL_RCC_OscConfig+0x4e8>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b7a:	2d0c      	cmp	r5, #12
 8009b7c:	f000 8097 	beq.w	8009cae <HAL_RCC_OscConfig+0x302>
        __HAL_RCC_PLL_DISABLE();
 8009b80:	4b26      	ldr	r3, [pc, #152]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8009b88:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	f012 5f20 	tst.w	r2, #671088640	@ 0x28000000
 8009b90:	d103      	bne.n	8009b9a <HAL_RCC_OscConfig+0x1ee>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	f022 0203 	bic.w	r2, r2, #3
 8009b98:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009b9a:	4c20      	ldr	r4, [pc, #128]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
 8009b9c:	68e3      	ldr	r3, [r4, #12]
 8009b9e:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8009ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ba6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8009ba8:	f7fd fd32 	bl	8007610 <HAL_GetTick>
 8009bac:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bae:	e005      	b.n	8009bbc <HAL_RCC_OscConfig+0x210>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bb0:	f7fd fd2e 	bl	8007610 <HAL_GetTick>
 8009bb4:	1b40      	subs	r0, r0, r5
 8009bb6:	2802      	cmp	r0, #2
 8009bb8:	f200 80be 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	019b      	lsls	r3, r3, #6
 8009bc0:	d4f6      	bmi.n	8009bb0 <HAL_RCC_OscConfig+0x204>
  return HAL_OK;
 8009bc2:	2000      	movs	r0, #0
}
 8009bc4:	b003      	add	sp, #12
 8009bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009bca:	2d08      	cmp	r5, #8
 8009bcc:	d073      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x30a>
 8009bce:	2d0c      	cmp	r5, #12
 8009bd0:	d06f      	beq.n	8009cb2 <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bd2:	6863      	ldr	r3, [r4, #4]
 8009bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bd8:	f000 80b2 	beq.w	8009d40 <HAL_RCC_OscConfig+0x394>
 8009bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009be0:	f000 813d 	beq.w	8009e5e <HAL_RCC_OscConfig+0x4b2>
 8009be4:	4f0d      	ldr	r7, [pc, #52]	@ (8009c1c <HAL_RCC_OscConfig+0x270>)
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009bec:	603a      	str	r2, [r7, #0]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009bf4:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f040 80a7 	bne.w	8009d4a <HAL_RCC_OscConfig+0x39e>
        tickstart = HAL_GetTick();
 8009bfc:	f7fd fd08 	bl	8007610 <HAL_GetTick>
 8009c00:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c02:	e006      	b.n	8009c12 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c04:	f7fd fd04 	bl	8007610 <HAL_GetTick>
 8009c08:	eba0 0008 	sub.w	r0, r0, r8
 8009c0c:	2864      	cmp	r0, #100	@ 0x64
 8009c0e:	f200 8093 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	0398      	lsls	r0, r3, #14
 8009c16:	d4f5      	bmi.n	8009c04 <HAL_RCC_OscConfig+0x258>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	e70a      	b.n	8009a32 <HAL_RCC_OscConfig+0x86>
 8009c1c:	40021000 	.word	0x40021000
 8009c20:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009c24:	2e01      	cmp	r6, #1
 8009c26:	f47f aed8 	bne.w	80099da <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c2a:	4ba8      	ldr	r3, [pc, #672]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	0799      	lsls	r1, r3, #30
 8009c30:	d43a      	bmi.n	8009ca8 <HAL_RCC_OscConfig+0x2fc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009c32:	4ba6      	ldr	r3, [pc, #664]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009c34:	6a20      	ldr	r0, [r4, #32]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	0712      	lsls	r2, r2, #28
 8009c3a:	bf56      	itet	pl
 8009c3c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8009c40:	681b      	ldrmi	r3, [r3, #0]
 8009c42:	091b      	lsrpl	r3, r3, #4
 8009c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c48:	4298      	cmp	r0, r3
 8009c4a:	f200 80be 	bhi.w	8009dca <HAL_RCC_OscConfig+0x41e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c4e:	4b9f      	ldr	r3, [pc, #636]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	f042 0208 	orr.w	r2, r2, #8
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009c5e:	4302      	orrs	r2, r0
 8009c60:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	69e1      	ldr	r1, [r4, #28]
 8009c66:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8009c6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009c6e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	f000 80ee 	beq.w	8009e52 <HAL_RCC_OscConfig+0x4a6>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009c76:	f7ff fe47 	bl	8009908 <HAL_RCC_GetSysClockFreq>
 8009c7a:	4b94      	ldr	r3, [pc, #592]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009c7c:	4a94      	ldr	r2, [pc, #592]	@ (8009ed0 <HAL_RCC_OscConfig+0x524>)
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009c84:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8009c86:	4a93      	ldr	r2, [pc, #588]	@ (8009ed4 <HAL_RCC_OscConfig+0x528>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009c88:	f003 031f 	and.w	r3, r3, #31
 8009c8c:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8009c90:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009c92:	4a91      	ldr	r2, [pc, #580]	@ (8009ed8 <HAL_RCC_OscConfig+0x52c>)
 8009c94:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8009c96:	f7fd fc7b 	bl	8007590 <HAL_InitTick>
        if(status != HAL_OK)
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d192      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x218>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	07d9      	lsls	r1, r3, #31
 8009ca2:	f57f aec6 	bpl.w	8009a32 <HAL_RCC_OscConfig+0x86>
 8009ca6:	e790      	b.n	8009bca <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009ca8:	69a3      	ldr	r3, [r4, #24]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1c1      	bne.n	8009c32 <HAL_RCC_OscConfig+0x286>
    return HAL_ERROR;
 8009cae:	2001      	movs	r0, #1
 8009cb0:	e788      	b.n	8009bc4 <HAL_RCC_OscConfig+0x218>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009cb2:	2e03      	cmp	r6, #3
 8009cb4:	d18d      	bne.n	8009bd2 <HAL_RCC_OscConfig+0x226>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cb6:	4a85      	ldr	r2, [pc, #532]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009cb8:	6812      	ldr	r2, [r2, #0]
 8009cba:	0392      	lsls	r2, r2, #14
 8009cbc:	f57f aeb9 	bpl.w	8009a32 <HAL_RCC_OscConfig+0x86>
 8009cc0:	6862      	ldr	r2, [r4, #4]
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	f47f aeb5 	bne.w	8009a32 <HAL_RCC_OscConfig+0x86>
 8009cc8:	e7f1      	b.n	8009cae <HAL_RCC_OscConfig+0x302>
      __HAL_RCC_LSI_DISABLE();
 8009cca:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8009cce:	f023 0301 	bic.w	r3, r3, #1
 8009cd2:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8009cd6:	f7fd fc9b 	bl	8007610 <HAL_GetTick>
 8009cda:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cdc:	e004      	b.n	8009ce8 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cde:	f7fd fc97 	bl	8007610 <HAL_GetTick>
 8009ce2:	1bc0      	subs	r0, r0, r7
 8009ce4:	2802      	cmp	r0, #2
 8009ce6:	d827      	bhi.n	8009d38 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009ce8:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8009cec:	079b      	lsls	r3, r3, #30
 8009cee:	d4f6      	bmi.n	8009cde <HAL_RCC_OscConfig+0x332>
 8009cf0:	e6e0      	b.n	8009ab4 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009cf2:	2e02      	cmp	r6, #2
 8009cf4:	f47f aea5 	bne.w	8009a42 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cf8:	4a74      	ldr	r2, [pc, #464]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009cfa:	6812      	ldr	r2, [r2, #0]
 8009cfc:	0552      	lsls	r2, r2, #21
 8009cfe:	d502      	bpl.n	8009d06 <HAL_RCC_OscConfig+0x35a>
 8009d00:	68e2      	ldr	r2, [r4, #12]
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	d0d3      	beq.n	8009cae <HAL_RCC_OscConfig+0x302>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d06:	4971      	ldr	r1, [pc, #452]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009d08:	6920      	ldr	r0, [r4, #16]
 8009d0a:	684a      	ldr	r2, [r1, #4]
 8009d0c:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 8009d10:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8009d14:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d16:	e6b2      	b.n	8009a7e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f023 0301 	bic.w	r3, r3, #1
 8009d1e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8009d20:	f7fd fc76 	bl	8007610 <HAL_GetTick>
 8009d24:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	0798      	lsls	r0, r3, #30
 8009d2a:	d5b8      	bpl.n	8009c9e <HAL_RCC_OscConfig+0x2f2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d2c:	f7fd fc70 	bl	8007610 <HAL_GetTick>
 8009d30:	eba0 0008 	sub.w	r0, r0, r8
 8009d34:	2802      	cmp	r0, #2
 8009d36:	d9f6      	bls.n	8009d26 <HAL_RCC_OscConfig+0x37a>
            return HAL_TIMEOUT;
 8009d38:	2003      	movs	r0, #3
}
 8009d3a:	b003      	add	sp, #12
 8009d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d40:	4a62      	ldr	r2, [pc, #392]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009d42:	6813      	ldr	r3, [r2, #0]
 8009d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009d4a:	f7fd fc61 	bl	8007610 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d4e:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009ecc <HAL_RCC_OscConfig+0x520>
        tickstart = HAL_GetTick();
 8009d52:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d54:	e004      	b.n	8009d60 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d56:	f7fd fc5b 	bl	8007610 <HAL_GetTick>
 8009d5a:	1bc0      	subs	r0, r0, r7
 8009d5c:	2864      	cmp	r0, #100	@ 0x64
 8009d5e:	d8eb      	bhi.n	8009d38 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d60:	f8d8 3000 	ldr.w	r3, [r8]
 8009d64:	039b      	lsls	r3, r3, #14
 8009d66:	d5f6      	bpl.n	8009d56 <HAL_RCC_OscConfig+0x3aa>
 8009d68:	e756      	b.n	8009c18 <HAL_RCC_OscConfig+0x26c>
    FlagStatus       pwrclkchanged = RESET;
 8009d6a:	2600      	movs	r6, #0
 8009d6c:	e6b4      	b.n	8009ad8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8009d6e:	6833      	ldr	r3, [r6, #0]
 8009d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009d76:	f7fd fc4b 	bl	8007610 <HAL_GetTick>
 8009d7a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d7c:	e004      	b.n	8009d88 <HAL_RCC_OscConfig+0x3dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d7e:	f7fd fc47 	bl	8007610 <HAL_GetTick>
 8009d82:	1bc0      	subs	r0, r0, r7
 8009d84:	2802      	cmp	r0, #2
 8009d86:	d8d7      	bhi.n	8009d38 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d88:	6833      	ldr	r3, [r6, #0]
 8009d8a:	0558      	lsls	r0, r3, #21
 8009d8c:	d4f7      	bmi.n	8009d7e <HAL_RCC_OscConfig+0x3d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	e675      	b.n	8009a7e <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d92:	4a4e      	ldr	r2, [pc, #312]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009d94:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8009d98:	f043 0301 	orr.w	r3, r3, #1
 8009d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8009da0:	f7fd fc36 	bl	8007610 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009da4:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8009ecc <HAL_RCC_OscConfig+0x520>
      tickstart = HAL_GetTick();
 8009da8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009daa:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dae:	e004      	b.n	8009dba <HAL_RCC_OscConfig+0x40e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009db0:	f7fd fc2e 	bl	8007610 <HAL_GetTick>
 8009db4:	1bc0      	subs	r0, r0, r7
 8009db6:	4548      	cmp	r0, r9
 8009db8:	d8be      	bhi.n	8009d38 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dba:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8009dbe:	079a      	lsls	r2, r3, #30
 8009dc0:	d5f6      	bpl.n	8009db0 <HAL_RCC_OscConfig+0x404>
    if(pwrclkchanged == SET)
 8009dc2:	2e00      	cmp	r6, #0
 8009dc4:	f43f aeb8 	beq.w	8009b38 <HAL_RCC_OscConfig+0x18c>
 8009dc8:	e03d      	b.n	8009e46 <HAL_RCC_OscConfig+0x49a>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009dca:	f7ff fd5b 	bl	8009884 <RCC_SetFlashLatencyFromMSIRange>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f47f af6d 	bne.w	8009cae <HAL_RCC_OscConfig+0x302>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	f042 0208 	orr.w	r2, r2, #8
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	6a21      	ldr	r1, [r4, #32]
 8009de2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009de6:	430a      	orrs	r2, r1
 8009de8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	69e1      	ldr	r1, [r4, #28]
 8009dee:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8009df2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009df6:	605a      	str	r2, [r3, #4]
 8009df8:	e73d      	b.n	8009c76 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSI48_DISABLE();
 8009dfa:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009dfe:	f023 0301 	bic.w	r3, r3, #1
 8009e02:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8009e06:	f7fd fc03 	bl	8007610 <HAL_GetTick>
 8009e0a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009e0c:	e004      	b.n	8009e18 <HAL_RCC_OscConfig+0x46c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e0e:	f7fd fbff 	bl	8007610 <HAL_GetTick>
 8009e12:	1bc0      	subs	r0, r0, r7
 8009e14:	2802      	cmp	r0, #2
 8009e16:	d88f      	bhi.n	8009d38 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009e18:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009e1c:	0799      	lsls	r1, r3, #30
 8009e1e:	d4f6      	bmi.n	8009e0e <HAL_RCC_OscConfig+0x462>
 8009e20:	e6a6      	b.n	8009b70 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e28:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8009e2a:	f7fd fbf1 	bl	8007610 <HAL_GetTick>
 8009e2e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	05d9      	lsls	r1, r3, #23
 8009e34:	f53f ae55 	bmi.w	8009ae2 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e38:	f7fd fbea 	bl	8007610 <HAL_GetTick>
 8009e3c:	eba0 0008 	sub.w	r0, r0, r8
 8009e40:	2802      	cmp	r0, #2
 8009e42:	d9f5      	bls.n	8009e30 <HAL_RCC_OscConfig+0x484>
 8009e44:	e778      	b.n	8009d38 <HAL_RCC_OscConfig+0x38c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e46:	4a21      	ldr	r2, [pc, #132]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009e48:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e50:	e672      	b.n	8009b38 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e52:	f7ff fd17 	bl	8009884 <RCC_SetFlashLatencyFromMSIRange>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f43f af0d 	beq.w	8009c76 <HAL_RCC_OscConfig+0x2ca>
 8009e5c:	e727      	b.n	8009cae <HAL_RCC_OscConfig+0x302>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e62:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009e74:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e76:	e768      	b.n	8009d4a <HAL_RCC_OscConfig+0x39e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e78:	4b14      	ldr	r3, [pc, #80]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009e7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009e7e:	f042 0204 	orr.w	r2, r2, #4
 8009e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8009e86:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009e8a:	f042 0201 	orr.w	r2, r2, #1
 8009e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e92:	e785      	b.n	8009da0 <HAL_RCC_OscConfig+0x3f4>
      pll_config = RCC->PLLCFGR;
 8009e94:	4e0d      	ldr	r6, [pc, #52]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8009e98:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e9a:	f003 0103 	and.w	r1, r3, #3
 8009e9e:	4291      	cmp	r1, r2
 8009ea0:	d056      	beq.n	8009f50 <HAL_RCC_OscConfig+0x5a4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009ea2:	2d0c      	cmp	r5, #12
 8009ea4:	f43f af03 	beq.w	8009cae <HAL_RCC_OscConfig+0x302>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009ea8:	4d08      	ldr	r5, [pc, #32]	@ (8009ecc <HAL_RCC_OscConfig+0x520>)
 8009eaa:	682b      	ldr	r3, [r5, #0]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	f53f aefe 	bmi.w	8009cae <HAL_RCC_OscConfig+0x302>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	f53f aefa 	bmi.w	8009cae <HAL_RCC_OscConfig+0x302>
            __HAL_RCC_PLL_DISABLE();
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ec0:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8009ec2:	f7fd fba5 	bl	8007610 <HAL_GetTick>
 8009ec6:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ec8:	e00e      	b.n	8009ee8 <HAL_RCC_OscConfig+0x53c>
 8009eca:	bf00      	nop
 8009ecc:	40021000 	.word	0x40021000
 8009ed0:	08017314 	.word	0x08017314
 8009ed4:	200001e8 	.word	0x200001e8
 8009ed8:	200001e0 	.word	0x200001e0
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009edc:	f7fd fb98 	bl	8007610 <HAL_GetTick>
 8009ee0:	1b80      	subs	r0, r0, r6
 8009ee2:	2802      	cmp	r0, #2
 8009ee4:	f63f af28 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	019f      	lsls	r7, r3, #6
 8009eec:	d4f6      	bmi.n	8009edc <HAL_RCC_OscConfig+0x530>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009eee:	68e9      	ldr	r1, [r5, #12]
 8009ef0:	4b37      	ldr	r3, [pc, #220]	@ (8009fd0 <HAL_RCC_OscConfig+0x624>)
 8009ef2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009ef4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ef6:	4e37      	ldr	r6, [pc, #220]	@ (8009fd4 <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ef8:	400b      	ands	r3, r1
 8009efa:	4313      	orrs	r3, r2
 8009efc:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8009f00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009f04:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8009f08:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8009f0c:	3801      	subs	r0, #1
 8009f0e:	0849      	lsrs	r1, r1, #1
 8009f10:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8009f14:	3901      	subs	r1, #1
 8009f16:	0852      	lsrs	r2, r2, #1
 8009f18:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8009f1c:	3a01      	subs	r2, #1
 8009f1e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009f22:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f2a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009f2c:	68eb      	ldr	r3, [r5, #12]
 8009f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f32:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8009f34:	f7fd fb6c 	bl	8007610 <HAL_GetTick>
 8009f38:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f3a:	e005      	b.n	8009f48 <HAL_RCC_OscConfig+0x59c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f3c:	f7fd fb68 	bl	8007610 <HAL_GetTick>
 8009f40:	1b00      	subs	r0, r0, r4
 8009f42:	2802      	cmp	r0, #2
 8009f44:	f63f aef8 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f48:	6833      	ldr	r3, [r6, #0]
 8009f4a:	0198      	lsls	r0, r3, #6
 8009f4c:	d5f6      	bpl.n	8009f3c <HAL_RCC_OscConfig+0x590>
 8009f4e:	e638      	b.n	8009bc2 <HAL_RCC_OscConfig+0x216>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009f50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009f52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009f56:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f58:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8009f5c:	d1a1      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009f64:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8009f68:	d19b      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009f6a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009f6c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f70:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8009f74:	d195      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f76:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009f78:	0852      	lsrs	r2, r2, #1
 8009f7a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8009f7e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009f80:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8009f84:	d18d      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009f86:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009f88:	0852      	lsrs	r2, r2, #1
 8009f8a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8009f8e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f90:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8009f94:	d185      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x4f6>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f96:	6833      	ldr	r3, [r6, #0]
 8009f98:	0199      	lsls	r1, r3, #6
 8009f9a:	f53f ae12 	bmi.w	8009bc2 <HAL_RCC_OscConfig+0x216>
          __HAL_RCC_PLL_ENABLE();
 8009f9e:	6833      	ldr	r3, [r6, #0]
 8009fa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fa4:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009fa6:	68f3      	ldr	r3, [r6, #12]
 8009fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fac:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8009fae:	f7fd fb2f 	bl	8007610 <HAL_GetTick>
 8009fb2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fb4:	e005      	b.n	8009fc2 <HAL_RCC_OscConfig+0x616>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb6:	f7fd fb2b 	bl	8007610 <HAL_GetTick>
 8009fba:	1b03      	subs	r3, r0, r4
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	f63f aebb 	bhi.w	8009d38 <HAL_RCC_OscConfig+0x38c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fc2:	6833      	ldr	r3, [r6, #0]
 8009fc4:	019a      	lsls	r2, r3, #6
 8009fc6:	d5f6      	bpl.n	8009fb6 <HAL_RCC_OscConfig+0x60a>
 8009fc8:	e5fb      	b.n	8009bc2 <HAL_RCC_OscConfig+0x216>
    return HAL_ERROR;
 8009fca:	2001      	movs	r0, #1
}
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	019d800c 	.word	0x019d800c
 8009fd4:	40021000 	.word	0x40021000

08009fd8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f000 809b 	beq.w	800a114 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fde:	4a7c      	ldr	r2, [pc, #496]	@ (800a1d0 <HAL_RCC_ClockConfig+0x1f8>)
{
 8009fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fe4:	6813      	ldr	r3, [r2, #0]
 8009fe6:	f003 030f 	and.w	r3, r3, #15
 8009fea:	428b      	cmp	r3, r1
 8009fec:	460d      	mov	r5, r1
 8009fee:	4604      	mov	r4, r0
 8009ff0:	d20c      	bcs.n	800a00c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ff2:	6813      	ldr	r3, [r2, #0]
 8009ff4:	f023 030f 	bic.w	r3, r3, #15
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ffc:	6813      	ldr	r3, [r2, #0]
 8009ffe:	f003 030f 	and.w	r3, r3, #15
 800a002:	428b      	cmp	r3, r1
 800a004:	d002      	beq.n	800a00c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800a006:	2001      	movs	r0, #1
}
 800a008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	07df      	lsls	r7, r3, #31
 800a010:	d573      	bpl.n	800a0fa <HAL_RCC_ClockConfig+0x122>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a012:	6867      	ldr	r7, [r4, #4]
 800a014:	2f03      	cmp	r7, #3
 800a016:	d07f      	beq.n	800a118 <HAL_RCC_ClockConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a018:	4b6e      	ldr	r3, [pc, #440]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a01a:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a01c:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a01e:	d076      	beq.n	800a10e <HAL_RCC_ClockConfig+0x136>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a020:	2f00      	cmp	r7, #0
 800a022:	f040 8091 	bne.w	800a148 <HAL_RCC_ClockConfig+0x170>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a026:	079e      	lsls	r6, r3, #30
 800a028:	d5ed      	bpl.n	800a006 <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a02a:	f7ff fc6d 	bl	8009908 <HAL_RCC_GetSysClockFreq>
 800a02e:	4b6a      	ldr	r3, [pc, #424]	@ (800a1d8 <HAL_RCC_ClockConfig+0x200>)
 800a030:	4298      	cmp	r0, r3
 800a032:	f240 8084 	bls.w	800a13e <HAL_RCC_ClockConfig+0x166>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a036:	4a67      	ldr	r2, [pc, #412]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
 800a038:	6893      	ldr	r3, [r2, #8]
 800a03a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a042:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a044:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a048:	4e62      	ldr	r6, [pc, #392]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
 800a04a:	68b3      	ldr	r3, [r6, #8]
 800a04c:	f023 0303 	bic.w	r3, r3, #3
 800a050:	433b      	orrs	r3, r7
 800a052:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800a054:	f7fd fadc 	bl	8007610 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a058:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800a05c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a05e:	e004      	b.n	800a06a <HAL_RCC_ClockConfig+0x92>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a060:	f7fd fad6 	bl	8007610 <HAL_GetTick>
 800a064:	1bc0      	subs	r0, r0, r7
 800a066:	4540      	cmp	r0, r8
 800a068:	d86c      	bhi.n	800a144 <HAL_RCC_ClockConfig+0x16c>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a06a:	68b3      	ldr	r3, [r6, #8]
 800a06c:	6862      	ldr	r2, [r4, #4]
 800a06e:	f003 030c 	and.w	r3, r3, #12
 800a072:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a076:	d1f3      	bne.n	800a060 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	0799      	lsls	r1, r3, #30
 800a07c:	d43f      	bmi.n	800a0fe <HAL_RCC_ClockConfig+0x126>
    if(hpre == RCC_SYSCLK_DIV2)
 800a07e:	f1b9 0f00 	cmp.w	r9, #0
 800a082:	d003      	beq.n	800a08c <HAL_RCC_ClockConfig+0xb4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a084:	68b2      	ldr	r2, [r6, #8]
 800a086:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800a08a:	60b2      	str	r2, [r6, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a08c:	4950      	ldr	r1, [pc, #320]	@ (800a1d0 <HAL_RCC_ClockConfig+0x1f8>)
 800a08e:	680a      	ldr	r2, [r1, #0]
 800a090:	f002 020f 	and.w	r2, r2, #15
 800a094:	42aa      	cmp	r2, r5
 800a096:	d909      	bls.n	800a0ac <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a098:	680a      	ldr	r2, [r1, #0]
 800a09a:	f022 020f 	bic.w	r2, r2, #15
 800a09e:	432a      	orrs	r2, r5
 800a0a0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0a2:	680a      	ldr	r2, [r1, #0]
 800a0a4:	f002 020f 	and.w	r2, r2, #15
 800a0a8:	42aa      	cmp	r2, r5
 800a0aa:	d1ac      	bne.n	800a006 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ac:	075a      	lsls	r2, r3, #29
 800a0ae:	d506      	bpl.n	800a0be <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0b0:	4948      	ldr	r1, [pc, #288]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
 800a0b2:	68e0      	ldr	r0, [r4, #12]
 800a0b4:	688a      	ldr	r2, [r1, #8]
 800a0b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a0ba:	4302      	orrs	r2, r0
 800a0bc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0be:	071b      	lsls	r3, r3, #28
 800a0c0:	d507      	bpl.n	800a0d2 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0c2:	4a44      	ldr	r2, [pc, #272]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
 800a0c4:	6921      	ldr	r1, [r4, #16]
 800a0c6:	6893      	ldr	r3, [r2, #8]
 800a0c8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800a0cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a0d0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a0d2:	f7ff fc19 	bl	8009908 <HAL_RCC_GetSysClockFreq>
 800a0d6:	4a3f      	ldr	r2, [pc, #252]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
 800a0d8:	4c40      	ldr	r4, [pc, #256]	@ (800a1dc <HAL_RCC_ClockConfig+0x204>)
 800a0da:	6892      	ldr	r2, [r2, #8]
 800a0dc:	4940      	ldr	r1, [pc, #256]	@ (800a1e0 <HAL_RCC_ClockConfig+0x208>)
 800a0de:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 800a0e6:	483f      	ldr	r0, [pc, #252]	@ (800a1e4 <HAL_RCC_ClockConfig+0x20c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a0e8:	f002 021f 	and.w	r2, r2, #31
 800a0ec:	40d3      	lsrs	r3, r2
 800a0ee:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800a0f0:	6800      	ldr	r0, [r0, #0]
}
 800a0f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 800a0f6:	f7fd ba4b 	b.w	8007590 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0fa:	079e      	lsls	r6, r3, #30
 800a0fc:	d5c6      	bpl.n	800a08c <HAL_RCC_ClockConfig+0xb4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0fe:	4935      	ldr	r1, [pc, #212]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
 800a100:	68a0      	ldr	r0, [r4, #8]
 800a102:	688a      	ldr	r2, [r1, #8]
 800a104:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800a108:	4302      	orrs	r2, r0
 800a10a:	608a      	str	r2, [r1, #8]
 800a10c:	e7be      	b.n	800a08c <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a10e:	039b      	lsls	r3, r3, #14
 800a110:	d48b      	bmi.n	800a02a <HAL_RCC_ClockConfig+0x52>
 800a112:	e778      	b.n	800a006 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800a114:	2001      	movs	r0, #1
}
 800a116:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a118:	4a2e      	ldr	r2, [pc, #184]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
 800a11a:	6811      	ldr	r1, [r2, #0]
 800a11c:	0188      	lsls	r0, r1, #6
 800a11e:	f57f af72 	bpl.w	800a006 <HAL_RCC_ClockConfig+0x2e>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800a122:	68d1      	ldr	r1, [r2, #12]
 800a124:	f001 0103 	and.w	r1, r1, #3
 800a128:	2901      	cmp	r1, #1
 800a12a:	d011      	beq.n	800a150 <HAL_RCC_ClockConfig+0x178>
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a12c:	68d1      	ldr	r1, [r2, #12]
 800a12e:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 800a132:	3902      	subs	r1, #2
 800a134:	2901      	cmp	r1, #1
 800a136:	d947      	bls.n	800a1c8 <HAL_RCC_ClockConfig+0x1f0>
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a138:	68d3      	ldr	r3, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a13a:	68d3      	ldr	r3, [r2, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a13c:	68d3      	ldr	r3, [r2, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a13e:	f04f 0900 	mov.w	r9, #0
 800a142:	e781      	b.n	800a048 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 800a144:	2003      	movs	r0, #3
 800a146:	e75f      	b.n	800a008 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a148:	0558      	lsls	r0, r3, #21
 800a14a:	f57f af5c 	bpl.w	800a006 <HAL_RCC_ClockConfig+0x2e>
 800a14e:	e76c      	b.n	800a02a <HAL_RCC_ClockConfig+0x52>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a150:	6811      	ldr	r1, [r2, #0]
 800a152:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a154:	bf54      	ite	pl
 800a156:	f8d2 1094 	ldrpl.w	r1, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a15a:	6811      	ldrmi	r1, [r2, #0]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a15c:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
 800a15e:	68d2      	ldr	r2, [r2, #12]
 800a160:	f002 0203 	and.w	r2, r2, #3
  switch (pllsource)
 800a164:	f1a2 0202 	sub.w	r2, r2, #2
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a168:	bf54      	ite	pl
 800a16a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a16e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
  switch (pllsource)
 800a172:	2a01      	cmp	r2, #1
 800a174:	d928      	bls.n	800a1c8 <HAL_RCC_ClockConfig+0x1f0>
    msirange = MSIRangeTable[msirange];
 800a176:	4a1c      	ldr	r2, [pc, #112]	@ (800a1e8 <HAL_RCC_ClockConfig+0x210>)
 800a178:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a17c:	4815      	ldr	r0, [pc, #84]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1fc>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a17e:	4e16      	ldr	r6, [pc, #88]	@ (800a1d8 <HAL_RCC_ClockConfig+0x200>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a180:	68c1      	ldr	r1, [r0, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a182:	68c2      	ldr	r2, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a184:	f3c1 1103 	ubfx	r1, r1, #4, #4
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a188:	f3c2 2206 	ubfx	r2, r2, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a18c:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a18e:	fb0c f202 	mul.w	r2, ip, r2
 800a192:	fbb2 f2f1 	udiv	r2, r2, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a196:	68c1      	ldr	r1, [r0, #12]
 800a198:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800a19c:	3101      	adds	r1, #1
 800a19e:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco / pllr;
 800a1a0:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a1a4:	42b2      	cmp	r2, r6
 800a1a6:	d9ca      	bls.n	800a13e <HAL_RCC_ClockConfig+0x166>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a1a8:	6882      	ldr	r2, [r0, #8]
 800a1aa:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 800a1ae:	d004      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x1e2>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800a1b0:	079a      	lsls	r2, r3, #30
 800a1b2:	d5c4      	bpl.n	800a13e <HAL_RCC_ClockConfig+0x166>
 800a1b4:	68a3      	ldr	r3, [r4, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1c1      	bne.n	800a13e <HAL_RCC_ClockConfig+0x166>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a1ba:	6883      	ldr	r3, [r0, #8]
 800a1bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1c4:	6083      	str	r3, [r0, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a1c6:	e73d      	b.n	800a044 <HAL_RCC_ClockConfig+0x6c>
    pllvco = HSI_VALUE;
 800a1c8:	f8df c020 	ldr.w	ip, [pc, #32]	@ 800a1ec <HAL_RCC_ClockConfig+0x214>
 800a1cc:	e7d6      	b.n	800a17c <HAL_RCC_ClockConfig+0x1a4>
 800a1ce:	bf00      	nop
 800a1d0:	40022000 	.word	0x40022000
 800a1d4:	40021000 	.word	0x40021000
 800a1d8:	04c4b400 	.word	0x04c4b400
 800a1dc:	08017314 	.word	0x08017314
 800a1e0:	200001e0 	.word	0x200001e0
 800a1e4:	200001e8 	.word	0x200001e8
 800a1e8:	080172e4 	.word	0x080172e4
 800a1ec:	00f42400 	.word	0x00f42400

0800a1f0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800a1f0:	4b01      	ldr	r3, [pc, #4]	@ (800a1f8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	200001e0 	.word	0x200001e0

0800a1fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a1fc:	4b05      	ldr	r3, [pc, #20]	@ (800a214 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a1fe:	4a06      	ldr	r2, [pc, #24]	@ (800a218 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a200:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a202:	4906      	ldr	r1, [pc, #24]	@ (800a21c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a204:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a208:	6808      	ldr	r0, [r1, #0]
 800a20a:	5cd3      	ldrb	r3, [r2, r3]
 800a20c:	f003 031f 	and.w	r3, r3, #31
}
 800a210:	40d8      	lsrs	r0, r3
 800a212:	4770      	bx	lr
 800a214:	40021000 	.word	0x40021000
 800a218:	08017324 	.word	0x08017324
 800a21c:	200001e0 	.word	0x200001e0

0800a220 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a220:	4b05      	ldr	r3, [pc, #20]	@ (800a238 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a222:	4a06      	ldr	r2, [pc, #24]	@ (800a23c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a224:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a226:	4906      	ldr	r1, [pc, #24]	@ (800a240 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a228:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a22c:	6808      	ldr	r0, [r1, #0]
 800a22e:	5cd3      	ldrb	r3, [r2, r3]
 800a230:	f003 031f 	and.w	r3, r3, #31
}
 800a234:	40d8      	lsrs	r0, r3
 800a236:	4770      	bx	lr
 800a238:	40021000 	.word	0x40021000
 800a23c:	08017324 	.word	0x08017324
 800a240:	200001e0 	.word	0x200001e0

0800a244 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a244:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
{
 800a248:	b410      	push	{r4}
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a24a:	d053      	beq.n	800a2f4 <RCCEx_GetSAIxPeriphCLKFreq+0xb0>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800a24c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800a250:	d022      	beq.n	800a298 <RCCEx_GetSAIxPeriphCLKFreq+0x54>
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800a252:	4b4c      	ldr	r3, [pc, #304]	@ (800a384 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a25a:	d01a      	beq.n	800a292 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 800a25c:	6918      	ldr	r0, [r3, #16]
 800a25e:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 800a262:	d016      	beq.n	800a292 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a264:	6918      	ldr	r0, [r3, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a266:	691c      	ldr	r4, [r3, #16]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800a268:	691a      	ldr	r2, [r3, #16]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a26a:	f3c0 1003 	ubfx	r0, r0, #4, #4
#endif
        if(pllp == 0U)
 800a26e:	0ed2      	lsrs	r2, r2, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a270:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a274:	f3c4 2406 	ubfx	r4, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a278:	fbb1 f1f0 	udiv	r1, r1, r0
        if(pllp == 0U)
 800a27c:	d105      	bne.n	800a28a <RCCEx_GetSAIxPeriphCLKFreq+0x46>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800a27e:	691b      	ldr	r3, [r3, #16]
          {
            pllp = 17U;
 800a280:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a284:	bf0c      	ite	eq
 800a286:	2207      	moveq	r2, #7
 800a288:	2211      	movne	r2, #17
          else
          {
            pllp = 7U;
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a28a:	fb04 f001 	mul.w	r0, r4, r1
 800a28e:	fbb0 f0f2 	udiv	r0, r0, r2
    }
  }


  return frequency;
}
 800a292:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a296:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a298:	4b3a      	ldr	r3, [pc, #232]	@ (800a384 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 800a29a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a29e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800a2a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2a6:	d036      	beq.n	800a316 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a2a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2ac:	d137      	bne.n	800a31e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a2ae:	4b35      	ldr	r3, [pc, #212]	@ (800a384 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a2b6:	d0ec      	beq.n	800a292 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 800a2b8:	68d8      	ldr	r0, [r3, #12]
 800a2ba:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 800a2be:	d0e8      	beq.n	800a292 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a2c0:	68d8      	ldr	r0, [r3, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a2c2:	68dc      	ldr	r4, [r3, #12]
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a2c4:	68da      	ldr	r2, [r3, #12]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a2c6:	f3c0 1003 	ubfx	r0, r0, #4, #4
        if(pllp == 0U)
 800a2ca:	0ed2      	lsrs	r2, r2, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a2cc:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a2d0:	f3c4 2c06 	ubfx	ip, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a2d4:	fbb1 f1f0 	udiv	r1, r1, r0
        if(pllp == 0U)
 800a2d8:	d105      	bne.n	800a2e6 <RCCEx_GetSAIxPeriphCLKFreq+0xa2>
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a2da:	68db      	ldr	r3, [r3, #12]
            pllp = 17U;
 800a2dc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a2e0:	bf0c      	ite	eq
 800a2e2:	2207      	moveq	r2, #7
 800a2e4:	2211      	movne	r2, #17
        frequency = (pllvco * plln) / pllp;
 800a2e6:	fb0c f001 	mul.w	r0, ip, r1
}
 800a2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
        frequency = (pllvco * plln) / pllp;
 800a2ee:	fbb0 f0f2 	udiv	r0, r0, r2
}
 800a2f2:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a2f4:	4b23      	ldr	r3, [pc, #140]	@ (800a384 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 800a2f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2fa:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800a2fe:	2b60      	cmp	r3, #96	@ 0x60
 800a300:	d009      	beq.n	800a316 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a302:	2b40      	cmp	r3, #64	@ 0x40
 800a304:	d0d3      	beq.n	800a2ae <RCCEx_GetSAIxPeriphCLKFreq+0x6a>
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0a3      	beq.n	800a252 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800a30a:	2b80      	cmp	r3, #128	@ 0x80
 800a30c:	d030      	beq.n	800a370 <RCCEx_GetSAIxPeriphCLKFreq+0x12c>
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800a30e:	2b20      	cmp	r3, #32
 800a310:	d00d      	beq.n	800a32e <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 800a312:	2000      	movs	r0, #0
 800a314:	e7bd      	b.n	800a292 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800a316:	481c      	ldr	r0, [pc, #112]	@ (800a388 <RCCEx_GetSAIxPeriphCLKFreq+0x144>)
}
 800a318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a31c:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d097      	beq.n	800a252 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800a322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a326:	d023      	beq.n	800a370 <RCCEx_GetSAIxPeriphCLKFreq+0x12c>
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800a328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a32c:	d1f1      	bne.n	800a312 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800a32e:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 800a330:	6810      	ldr	r0, [r2, #0]
 800a332:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a336:	d0ac      	beq.n	800a292 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 800a338:	6950      	ldr	r0, [r2, #20]
 800a33a:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 800a33e:	d0a8      	beq.n	800a292 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a340:	6953      	ldr	r3, [r2, #20]
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a342:	6954      	ldr	r4, [r2, #20]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800a344:	6950      	ldr	r0, [r2, #20]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a346:	f3c3 1303 	ubfx	r3, r3, #4, #4
        if(pllp == 0U)
 800a34a:	0ec0      	lsrs	r0, r0, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a34c:	f103 0301 	add.w	r3, r3, #1
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a350:	f3c4 2406 	ubfx	r4, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a354:	fbb1 f1f3 	udiv	r1, r1, r3
        if(pllp == 0U)
 800a358:	d105      	bne.n	800a366 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800a35a:	6953      	ldr	r3, [r2, #20]
            pllp = 17U;
 800a35c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a360:	bf0c      	ite	eq
 800a362:	2007      	moveq	r0, #7
 800a364:	2011      	movne	r0, #17
        frequency = (pllvco * plln) / pllp;
 800a366:	fb04 f101 	mul.w	r1, r4, r1
 800a36a:	fbb1 f0f0 	udiv	r0, r1, r0
 800a36e:	e790      	b.n	800a292 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a370:	4a04      	ldr	r2, [pc, #16]	@ (800a384 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
        frequency = HSI_VALUE;
 800a372:	4b06      	ldr	r3, [pc, #24]	@ (800a38c <RCCEx_GetSAIxPeriphCLKFreq+0x148>)
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a374:	6810      	ldr	r0, [r2, #0]
}
 800a376:	f85d 4b04 	ldr.w	r4, [sp], #4
        frequency = HSI_VALUE;
 800a37a:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800a37e:	bf18      	it	ne
 800a380:	4618      	movne	r0, r3
}
 800a382:	4770      	bx	lr
 800a384:	40021000 	.word	0x40021000
 800a388:	001fff68 	.word	0x001fff68
 800a38c:	00f42400 	.word	0x00f42400

0800a390 <RCCEx_PLLSAI1_Config>:
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a390:	4a3e      	ldr	r2, [pc, #248]	@ (800a48c <RCCEx_PLLSAI1_Config+0xfc>)
{
 800a392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a394:	68d6      	ldr	r6, [r2, #12]
{
 800a396:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a398:	07b1      	lsls	r1, r6, #30
{
 800a39a:	4604      	mov	r4, r0
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a39c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a39e:	d006      	beq.n	800a3ae <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a3a0:	68d2      	ldr	r2, [r2, #12]
 800a3a2:	f002 0203 	and.w	r2, r2, #3
 800a3a6:	4282      	cmp	r2, r0
 800a3a8:	d011      	beq.n	800a3ce <RCCEx_PLLSAI1_Config+0x3e>
 800a3aa:	2001      	movs	r0, #1
}
 800a3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800a3ae:	2802      	cmp	r0, #2
 800a3b0:	d04d      	beq.n	800a44e <RCCEx_PLLSAI1_Config+0xbe>
 800a3b2:	2803      	cmp	r0, #3
 800a3b4:	d044      	beq.n	800a440 <RCCEx_PLLSAI1_Config+0xb0>
 800a3b6:	2801      	cmp	r0, #1
 800a3b8:	d1f7      	bne.n	800a3aa <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a3ba:	6812      	ldr	r2, [r2, #0]
 800a3bc:	0793      	lsls	r3, r2, #30
 800a3be:	d5f5      	bpl.n	800a3ac <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800a3c0:	4932      	ldr	r1, [pc, #200]	@ (800a48c <RCCEx_PLLSAI1_Config+0xfc>)
 800a3c2:	68ca      	ldr	r2, [r1, #12]
 800a3c4:	f022 0203 	bic.w	r2, r2, #3
 800a3c8:	4302      	orrs	r2, r0
 800a3ca:	60ca      	str	r2, [r1, #12]
  if(status == HAL_OK)
 800a3cc:	e001      	b.n	800a3d2 <RCCEx_PLLSAI1_Config+0x42>
       ||
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	d0eb      	beq.n	800a3aa <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 800a3d2:	4e2e      	ldr	r6, [pc, #184]	@ (800a48c <RCCEx_PLLSAI1_Config+0xfc>)
 800a3d4:	6833      	ldr	r3, [r6, #0]
 800a3d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3da:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a3dc:	f7fd f918 	bl	8007610 <HAL_GetTick>
 800a3e0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a3e2:	e004      	b.n	800a3ee <RCCEx_PLLSAI1_Config+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a3e4:	f7fd f914 	bl	8007610 <HAL_GetTick>
 800a3e8:	1bc3      	subs	r3, r0, r7
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d833      	bhi.n	800a456 <RCCEx_PLLSAI1_Config+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a3ee:	6833      	ldr	r3, [r6, #0]
 800a3f0:	011a      	lsls	r2, r3, #4
 800a3f2:	d4f7      	bmi.n	800a3e4 <RCCEx_PLLSAI1_Config+0x54>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a3f4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800a3f8:	3a01      	subs	r2, #1
 800a3fa:	021b      	lsls	r3, r3, #8
 800a3fc:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 800a3fe:	bb65      	cbnz	r5, 800a45a <RCCEx_PLLSAI1_Config+0xca>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a400:	68e1      	ldr	r1, [r4, #12]
 800a402:	6930      	ldr	r0, [r6, #16]
 800a404:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 800a408:	4921      	ldr	r1, [pc, #132]	@ (800a490 <RCCEx_PLLSAI1_Config+0x100>)
 800a40a:	4001      	ands	r1, r0
 800a40c:	430b      	orrs	r3, r1
 800a40e:	4313      	orrs	r3, r2
 800a410:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800a412:	4d1e      	ldr	r5, [pc, #120]	@ (800a48c <RCCEx_PLLSAI1_Config+0xfc>)
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a41a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a41c:	f7fd f8f8 	bl	8007610 <HAL_GetTick>
 800a420:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a422:	e004      	b.n	800a42e <RCCEx_PLLSAI1_Config+0x9e>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a424:	f7fd f8f4 	bl	8007610 <HAL_GetTick>
 800a428:	1b83      	subs	r3, r0, r6
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d813      	bhi.n	800a456 <RCCEx_PLLSAI1_Config+0xc6>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a42e:	682b      	ldr	r3, [r5, #0]
 800a430:	011b      	lsls	r3, r3, #4
 800a432:	d5f7      	bpl.n	800a424 <RCCEx_PLLSAI1_Config+0x94>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a434:	692b      	ldr	r3, [r5, #16]
 800a436:	69a2      	ldr	r2, [r4, #24]
 800a438:	4313      	orrs	r3, r2
 800a43a:	2000      	movs	r0, #0
 800a43c:	612b      	str	r3, [r5, #16]
}
 800a43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a440:	6811      	ldr	r1, [r2, #0]
 800a442:	038e      	lsls	r6, r1, #14
 800a444:	d4bc      	bmi.n	800a3c0 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a446:	6812      	ldr	r2, [r2, #0]
 800a448:	0351      	lsls	r1, r2, #13
 800a44a:	d5ae      	bpl.n	800a3aa <RCCEx_PLLSAI1_Config+0x1a>
 800a44c:	e7b8      	b.n	800a3c0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a44e:	6812      	ldr	r2, [r2, #0]
 800a450:	0557      	lsls	r7, r2, #21
 800a452:	d5aa      	bpl.n	800a3aa <RCCEx_PLLSAI1_Config+0x1a>
 800a454:	e7b4      	b.n	800a3c0 <RCCEx_PLLSAI1_Config+0x30>
 800a456:	2003      	movs	r0, #3
}
 800a458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800a45a:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a45c:	6930      	ldr	r0, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800a45e:	d00a      	beq.n	800a476 <RCCEx_PLLSAI1_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a460:	490c      	ldr	r1, [pc, #48]	@ (800a494 <RCCEx_PLLSAI1_Config+0x104>)
 800a462:	4001      	ands	r1, r0
 800a464:	430b      	orrs	r3, r1
 800a466:	4313      	orrs	r3, r2
 800a468:	6962      	ldr	r2, [r4, #20]
 800a46a:	0852      	lsrs	r2, r2, #1
 800a46c:	3a01      	subs	r2, #1
 800a46e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a472:	6133      	str	r3, [r6, #16]
 800a474:	e7cd      	b.n	800a412 <RCCEx_PLLSAI1_Config+0x82>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a476:	4908      	ldr	r1, [pc, #32]	@ (800a498 <RCCEx_PLLSAI1_Config+0x108>)
 800a478:	4001      	ands	r1, r0
 800a47a:	430b      	orrs	r3, r1
 800a47c:	4313      	orrs	r3, r2
 800a47e:	6922      	ldr	r2, [r4, #16]
 800a480:	0852      	lsrs	r2, r2, #1
 800a482:	3a01      	subs	r2, #1
 800a484:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a488:	6133      	str	r3, [r6, #16]
 800a48a:	e7c2      	b.n	800a412 <RCCEx_PLLSAI1_Config+0x82>
 800a48c:	40021000 	.word	0x40021000
 800a490:	07ff800f 	.word	0x07ff800f
 800a494:	f9ff800f 	.word	0xf9ff800f
 800a498:	ff9f800f 	.word	0xff9f800f

0800a49c <RCCEx_PLLSAI2_Config>:
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a49c:	4a3e      	ldr	r2, [pc, #248]	@ (800a598 <RCCEx_PLLSAI2_Config+0xfc>)
{
 800a49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4a0:	68d6      	ldr	r6, [r2, #12]
{
 800a4a2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4a4:	07b1      	lsls	r1, r6, #30
{
 800a4a6:	4604      	mov	r4, r0
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a4a8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4aa:	d006      	beq.n	800a4ba <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a4ac:	68d2      	ldr	r2, [r2, #12]
 800a4ae:	f002 0203 	and.w	r2, r2, #3
 800a4b2:	4282      	cmp	r2, r0
 800a4b4:	d011      	beq.n	800a4da <RCCEx_PLLSAI2_Config+0x3e>
 800a4b6:	2001      	movs	r0, #1
}
 800a4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 800a4ba:	2802      	cmp	r0, #2
 800a4bc:	d04d      	beq.n	800a55a <RCCEx_PLLSAI2_Config+0xbe>
 800a4be:	2803      	cmp	r0, #3
 800a4c0:	d044      	beq.n	800a54c <RCCEx_PLLSAI2_Config+0xb0>
 800a4c2:	2801      	cmp	r0, #1
 800a4c4:	d1f7      	bne.n	800a4b6 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	0793      	lsls	r3, r2, #30
 800a4ca:	d5f5      	bpl.n	800a4b8 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a4cc:	4932      	ldr	r1, [pc, #200]	@ (800a598 <RCCEx_PLLSAI2_Config+0xfc>)
 800a4ce:	68ca      	ldr	r2, [r1, #12]
 800a4d0:	f022 0203 	bic.w	r2, r2, #3
 800a4d4:	4302      	orrs	r2, r0
 800a4d6:	60ca      	str	r2, [r1, #12]
  if(status == HAL_OK)
 800a4d8:	e001      	b.n	800a4de <RCCEx_PLLSAI2_Config+0x42>
       ||
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d0eb      	beq.n	800a4b6 <RCCEx_PLLSAI2_Config+0x1a>
    __HAL_RCC_PLLSAI2_DISABLE();
 800a4de:	4e2e      	ldr	r6, [pc, #184]	@ (800a598 <RCCEx_PLLSAI2_Config+0xfc>)
 800a4e0:	6833      	ldr	r3, [r6, #0]
 800a4e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4e6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a4e8:	f7fd f892 	bl	8007610 <HAL_GetTick>
 800a4ec:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a4ee:	e004      	b.n	800a4fa <RCCEx_PLLSAI2_Config+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a4f0:	f7fd f88e 	bl	8007610 <HAL_GetTick>
 800a4f4:	1bc3      	subs	r3, r0, r7
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d833      	bhi.n	800a562 <RCCEx_PLLSAI2_Config+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a4fa:	6833      	ldr	r3, [r6, #0]
 800a4fc:	009a      	lsls	r2, r3, #2
 800a4fe:	d4f7      	bmi.n	800a4f0 <RCCEx_PLLSAI2_Config+0x54>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a500:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800a504:	3a01      	subs	r2, #1
 800a506:	021b      	lsls	r3, r3, #8
 800a508:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 800a50a:	bb65      	cbnz	r5, 800a566 <RCCEx_PLLSAI2_Config+0xca>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a50c:	68e1      	ldr	r1, [r4, #12]
 800a50e:	6970      	ldr	r0, [r6, #20]
 800a510:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 800a514:	4921      	ldr	r1, [pc, #132]	@ (800a59c <RCCEx_PLLSAI2_Config+0x100>)
 800a516:	4001      	ands	r1, r0
 800a518:	430b      	orrs	r3, r1
 800a51a:	4313      	orrs	r3, r2
 800a51c:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800a51e:	4d1e      	ldr	r5, [pc, #120]	@ (800a598 <RCCEx_PLLSAI2_Config+0xfc>)
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a526:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a528:	f7fd f872 	bl	8007610 <HAL_GetTick>
 800a52c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a52e:	e004      	b.n	800a53a <RCCEx_PLLSAI2_Config+0x9e>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a530:	f7fd f86e 	bl	8007610 <HAL_GetTick>
 800a534:	1b83      	subs	r3, r0, r6
 800a536:	2b02      	cmp	r3, #2
 800a538:	d813      	bhi.n	800a562 <RCCEx_PLLSAI2_Config+0xc6>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	d5f7      	bpl.n	800a530 <RCCEx_PLLSAI2_Config+0x94>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a540:	696b      	ldr	r3, [r5, #20]
 800a542:	69a2      	ldr	r2, [r4, #24]
 800a544:	4313      	orrs	r3, r2
 800a546:	2000      	movs	r0, #0
 800a548:	616b      	str	r3, [r5, #20]
}
 800a54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a54c:	6811      	ldr	r1, [r2, #0]
 800a54e:	038e      	lsls	r6, r1, #14
 800a550:	d4bc      	bmi.n	800a4cc <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a552:	6812      	ldr	r2, [r2, #0]
 800a554:	0351      	lsls	r1, r2, #13
 800a556:	d5ae      	bpl.n	800a4b6 <RCCEx_PLLSAI2_Config+0x1a>
 800a558:	e7b8      	b.n	800a4cc <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a55a:	6812      	ldr	r2, [r2, #0]
 800a55c:	0557      	lsls	r7, r2, #21
 800a55e:	d5aa      	bpl.n	800a4b6 <RCCEx_PLLSAI2_Config+0x1a>
 800a560:	e7b4      	b.n	800a4cc <RCCEx_PLLSAI2_Config+0x30>
 800a562:	2003      	movs	r0, #3
}
 800a564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800a566:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a568:	6970      	ldr	r0, [r6, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 800a56a:	d00a      	beq.n	800a582 <RCCEx_PLLSAI2_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a56c:	490c      	ldr	r1, [pc, #48]	@ (800a5a0 <RCCEx_PLLSAI2_Config+0x104>)
 800a56e:	4001      	ands	r1, r0
 800a570:	430b      	orrs	r3, r1
 800a572:	4313      	orrs	r3, r2
 800a574:	6962      	ldr	r2, [r4, #20]
 800a576:	0852      	lsrs	r2, r2, #1
 800a578:	3a01      	subs	r2, #1
 800a57a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a57e:	6173      	str	r3, [r6, #20]
 800a580:	e7cd      	b.n	800a51e <RCCEx_PLLSAI2_Config+0x82>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a582:	4908      	ldr	r1, [pc, #32]	@ (800a5a4 <RCCEx_PLLSAI2_Config+0x108>)
 800a584:	4001      	ands	r1, r0
 800a586:	430b      	orrs	r3, r1
 800a588:	4313      	orrs	r3, r2
 800a58a:	6922      	ldr	r2, [r4, #16]
 800a58c:	0852      	lsrs	r2, r2, #1
 800a58e:	3a01      	subs	r2, #1
 800a590:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a594:	6173      	str	r3, [r6, #20]
 800a596:	e7c2      	b.n	800a51e <RCCEx_PLLSAI2_Config+0x82>
 800a598:	40021000 	.word	0x40021000
 800a59c:	07ff800f 	.word	0x07ff800f
 800a5a0:	f9ff800f 	.word	0xf9ff800f
 800a5a4:	ff9f800f 	.word	0xff9f800f

0800a5a8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a5ac:	6803      	ldr	r3, [r0, #0]
 800a5ae:	f413 6500 	ands.w	r5, r3, #2048	@ 0x800
{
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a5b6:	d014      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a5b8:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 800a5ba:	2940      	cmp	r1, #64	@ 0x40
 800a5bc:	f000 825a 	beq.w	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800a5c0:	f200 814c 	bhi.w	800a85c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a5c4:	2900      	cmp	r1, #0
 800a5c6:	f000 8213 	beq.w	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
 800a5ca:	2920      	cmp	r1, #32
 800a5cc:	f040 828e 	bne.w	800aaec <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	3020      	adds	r0, #32
 800a5d4:	f7ff ff62 	bl	800a49c <RCCEx_PLLSAI2_Config>
 800a5d8:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a5da:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a5dc:	2d00      	cmp	r5, #0
 800a5de:	f000 8247 	beq.w	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a5e2:	04d8      	lsls	r0, r3, #19
 800a5e4:	f140 814c 	bpl.w	800a880 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a5e8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800a5ea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a5ee:	f000 8247 	beq.w	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800a5f2:	f200 81ad 	bhi.w	800a950 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800a5f6:	2900      	cmp	r1, #0
 800a5f8:	f000 8203 	beq.w	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800a5fc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a600:	f040 8272 	bne.w	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x540>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a604:	2100      	movs	r1, #0
 800a606:	f104 0020 	add.w	r0, r4, #32
 800a60a:	f7ff ff47 	bl	800a49c <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a60e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a610:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a612:	2e00      	cmp	r6, #0
 800a614:	f040 81a7 	bne.w	800a966 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a618:	49a3      	ldr	r1, [pc, #652]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a61a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800a61c:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a620:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a624:	4302      	orrs	r2, r0
 800a626:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a62a:	0399      	lsls	r1, r3, #14
 800a62c:	f100 812c 	bmi.w	800a888 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a630:	07da      	lsls	r2, r3, #31
 800a632:	d508      	bpl.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a634:	499c      	ldr	r1, [pc, #624]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a636:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a638:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a63c:	f022 0203 	bic.w	r2, r2, #3
 800a640:	4302      	orrs	r2, r0
 800a642:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a646:	079f      	lsls	r7, r3, #30
 800a648:	d508      	bpl.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a64a:	4997      	ldr	r1, [pc, #604]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a64c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800a64e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a652:	f022 020c 	bic.w	r2, r2, #12
 800a656:	4302      	orrs	r2, r0
 800a658:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a65c:	0758      	lsls	r0, r3, #29
 800a65e:	d508      	bpl.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a660:	4991      	ldr	r1, [pc, #580]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a662:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a664:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a668:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800a66c:	4302      	orrs	r2, r0
 800a66e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a672:	0719      	lsls	r1, r3, #28
 800a674:	d508      	bpl.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a676:	498c      	ldr	r1, [pc, #560]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a678:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800a67a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a67e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800a682:	4302      	orrs	r2, r0
 800a684:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a688:	06da      	lsls	r2, r3, #27
 800a68a:	d508      	bpl.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a68c:	4986      	ldr	r1, [pc, #536]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a68e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a690:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a694:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a698:	4302      	orrs	r2, r0
 800a69a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a69e:	069f      	lsls	r7, r3, #26
 800a6a0:	d508      	bpl.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6a2:	4981      	ldr	r1, [pc, #516]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6a4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800a6a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a6aa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a6ae:	4302      	orrs	r2, r0
 800a6b0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a6b4:	0598      	lsls	r0, r3, #22
 800a6b6:	d508      	bpl.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6b8:	497b      	ldr	r1, [pc, #492]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6ba:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800a6bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a6c0:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800a6c4:	4302      	orrs	r2, r0
 800a6c6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a6ca:	0559      	lsls	r1, r3, #21
 800a6cc:	d508      	bpl.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a6ce:	4976      	ldr	r1, [pc, #472]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6d0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800a6d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a6d6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800a6da:	4302      	orrs	r2, r0
 800a6dc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a6e0:	065a      	lsls	r2, r3, #25
 800a6e2:	d508      	bpl.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a6e4:	4970      	ldr	r1, [pc, #448]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6e6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800a6e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a6ec:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800a6f0:	4302      	orrs	r2, r0
 800a6f2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a6f6:	061f      	lsls	r7, r3, #24
 800a6f8:	d508      	bpl.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x164>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a6fa:	496b      	ldr	r1, [pc, #428]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a702:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a706:	4302      	orrs	r2, r0
 800a708:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a70c:	05d8      	lsls	r0, r3, #23
 800a70e:	d508      	bpl.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a710:	4965      	ldr	r1, [pc, #404]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a712:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800a714:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a718:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800a71c:	4302      	orrs	r2, r0
 800a71e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a722:	02d9      	lsls	r1, r3, #11
 800a724:	d508      	bpl.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a726:	4960      	ldr	r1, [pc, #384]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a728:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800a72a:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a72e:	f022 0203 	bic.w	r2, r2, #3
 800a732:	4302      	orrs	r2, r0
 800a734:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a738:	049a      	lsls	r2, r3, #18
 800a73a:	d510      	bpl.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a73c:	495a      	ldr	r1, [pc, #360]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a73e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a740:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a744:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800a748:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a74a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a74e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a752:	f000 815c 	beq.w	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x466>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a756:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a75a:	f000 8198 	beq.w	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a75e:	031f      	lsls	r7, r3, #12
 800a760:	d51a      	bpl.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a762:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800a764:	4a50      	ldr	r2, [pc, #320]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a766:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800a76a:	f8d2 109c 	ldr.w	r1, [r2, #156]	@ 0x9c
 800a76e:	f000 8153 	beq.w	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800a772:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800a776:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
 800a77a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800a77e:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800a782:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a784:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a788:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a78c:	f000 8195 	beq.w	800aaba <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a790:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a794:	f000 819b 	beq.w	800aace <HAL_RCCEx_PeriphCLKConfig+0x526>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a798:	0358      	lsls	r0, r3, #13
 800a79a:	d510      	bpl.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a79c:	4942      	ldr	r1, [pc, #264]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a79e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800a7a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a7a4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800a7a8:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a7aa:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7ae:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a7b2:	f000 813a 	beq.w	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x482>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a7b6:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a7ba:	f000 8173 	beq.w	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7be:	0459      	lsls	r1, r3, #17
 800a7c0:	d50d      	bpl.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7c2:	4839      	ldr	r0, [pc, #228]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7c4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800a7c8:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800a7cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a7d0:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a7d2:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7d6:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a7da:	f000 813e 	beq.w	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7de:	03da      	lsls	r2, r3, #15
 800a7e0:	d509      	bpl.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a7e2:	4931      	ldr	r1, [pc, #196]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7e4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800a7e8:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a7ec:	f022 0204 	bic.w	r2, r2, #4
 800a7f0:	4302      	orrs	r2, r0
 800a7f2:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a7f6:	029f      	lsls	r7, r3, #10
 800a7f8:	d509      	bpl.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a7fa:	492b      	ldr	r1, [pc, #172]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800a800:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a804:	f022 0218 	bic.w	r2, r2, #24
 800a808:	4302      	orrs	r2, r0
 800a80a:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a80e:	0258      	lsls	r0, r3, #9
 800a810:	f100 80b7 	bmi.w	800a982 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a814:	021a      	lsls	r2, r3, #8
 800a816:	d50d      	bpl.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a818:	4823      	ldr	r0, [pc, #140]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a81a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800a81e:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800a822:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a826:	430a      	orrs	r2, r1
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800a828:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a82c:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800a830:	f000 8108 	beq.w	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a834:	01db      	lsls	r3, r3, #7
 800a836:	d50d      	bpl.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a838:	4a1b      	ldr	r2, [pc, #108]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a83a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800a83e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800a842:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a846:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a848:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a84c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a850:	f000 80f0 	beq.w	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
}
 800a854:	4628      	mov	r0, r5
 800a856:	b002      	add	sp, #8
 800a858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 800a85c:	2960      	cmp	r1, #96	@ 0x60
 800a85e:	d002      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800a860:	2980      	cmp	r1, #128	@ 0x80
 800a862:	f040 8143 	bne.w	800aaec <HAL_RCCEx_PeriphCLKConfig+0x544>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a866:	4810      	ldr	r0, [pc, #64]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a868:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800a86c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a870:	430a      	orrs	r2, r1
 800a872:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a876:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a878:	f04f 0500 	mov.w	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a87c:	f53f aeb4 	bmi.w	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a880:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a882:	0399      	lsls	r1, r3, #14
 800a884:	f57f aed4 	bpl.w	800a630 <HAL_RCCEx_PeriphCLKConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a888:	4b07      	ldr	r3, [pc, #28]	@ (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a88a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a88c:	00d2      	lsls	r2, r2, #3
 800a88e:	d56c      	bpl.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    FlagStatus       pwrclkchanged = RESET;
 800a890:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a894:	4f05      	ldr	r7, [pc, #20]	@ (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a89c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a89e:	f7fc feb7 	bl	8007610 <HAL_GetTick>
 800a8a2:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a8a4:	e00b      	b.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x316>
 800a8a6:	bf00      	nop
 800a8a8:	40021000 	.word	0x40021000
 800a8ac:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8b0:	f7fc feae 	bl	8007610 <HAL_GetTick>
 800a8b4:	eba0 0309 	sub.w	r3, r0, r9
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	f200 808c 	bhi.w	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	05db      	lsls	r3, r3, #23
 800a8c2:	d5f5      	bpl.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    if(ret == HAL_OK)
 800a8c4:	2e00      	cmp	r6, #0
 800a8c6:	f040 810d 	bne.w	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a8ca:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x548>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a8ce:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a8d2:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a8d6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800a8da:	d026      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d024      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x382>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a8e0:	f8da 1090 	ldr.w	r1, [sl, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800a8e4:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a8e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8ec:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a8f0:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a8f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8f8:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a8fc:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a8fe:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 800a902:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a906:	d510      	bpl.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x382>
        tickstart = HAL_GetTick();
 800a908:	f7fc fe82 	bl	8007610 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a90c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800a910:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a912:	e004      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x376>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a914:	f7fc fe7c 	bl	8007610 <HAL_GetTick>
 800a918:	1bc0      	subs	r0, r0, r7
 800a91a:	4548      	cmp	r0, r9
 800a91c:	d85b      	bhi.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a91e:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a922:	0799      	lsls	r1, r3, #30
 800a924:	d5f6      	bpl.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a926:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800a92a:	4971      	ldr	r1, [pc, #452]	@ (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a92c:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800a930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a934:	4313      	orrs	r3, r2
 800a936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a93a:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800a93c:	f1b8 0f00 	cmp.w	r8, #0
 800a940:	f43f ae76 	beq.w	800a630 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a944:	496a      	ldr	r1, [pc, #424]	@ (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a946:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800a948:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a94c:	658a      	str	r2, [r1, #88]	@ 0x58
 800a94e:	e66f      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a950:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 800a954:	d003      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a956:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a95a:	f040 80c5 	bne.w	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a95e:	462e      	mov	r6, r5
    if(ret == HAL_OK)
 800a960:	2e00      	cmp	r6, #0
 800a962:	f43f ae59 	beq.w	800a618 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800a966:	4635      	mov	r5, r6
 800a968:	e78b      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a96a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a96c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a970:	659a      	str	r2, [r3, #88]	@ 0x58
 800a972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a978:	9301      	str	r3, [sp, #4]
 800a97a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a97c:	f04f 0801 	mov.w	r8, #1
 800a980:	e788      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_PLLSAI2_DISABLE();
 800a982:	4f5b      	ldr	r7, [pc, #364]	@ (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a98a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a98c:	f7fc fe40 	bl	8007610 <HAL_GetTick>
 800a990:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a992:	e006      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a994:	f7fc fe3c 	bl	8007610 <HAL_GetTick>
 800a998:	eba0 0308 	sub.w	r3, r0, r8
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	f200 8091 	bhi.w	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	0099      	lsls	r1, r3, #2
 800a9a6:	d4f5      	bmi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    if(ret == HAL_OK)
 800a9a8:	2e00      	cmp	r6, #0
 800a9aa:	f040 808e 	bne.w	800aaca <HAL_RCCEx_PeriphCLKConfig+0x522>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800a9ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800a9b6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a9c0:	2102      	movs	r1, #2
 800a9c2:	f104 0020 	add.w	r0, r4, #32
 800a9c6:	f7ff fd69 	bl	800a49c <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a9ca:	6823      	ldr	r3, [r4, #0]
    if(ret != HAL_OK)
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	f43f af21 	beq.w	800a814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	e71e      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        ret = HAL_TIMEOUT;
 800a9d6:	2503      	movs	r5, #3
 800a9d8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a9da:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800a9dc:	f1b8 0f00 	cmp.w	r8, #0
 800a9e0:	f43f ae26 	beq.w	800a630 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9e4:	4942      	ldr	r1, [pc, #264]	@ (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a9e6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800a9e8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a9ec:	658a      	str	r2, [r1, #88]	@ 0x58
 800a9ee:	e61f      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x88>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a9f0:	3004      	adds	r0, #4
 800a9f2:	f7ff fccd 	bl	800a390 <RCCEx_PLLSAI1_Config>
 800a9f6:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a9f8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a9fa:	2d00      	cmp	r5, #0
 800a9fc:	f47f adf1 	bne.w	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800aa00:	e036      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800aa02:	1d20      	adds	r0, r4, #4
 800aa04:	f7ff fcc4 	bl	800a390 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aa08:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800aa0a:	4606      	mov	r6, r0
      break;
 800aa0c:	e601      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa0e:	68ca      	ldr	r2, [r1, #12]
 800aa10:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800aa14:	60ca      	str	r2, [r1, #12]
 800aa16:	e6a2      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800aa18:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800aa1c:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aa20:	68d1      	ldr	r1, [r2, #12]
 800aa22:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800aa26:	60d1      	str	r1, [r2, #12]
 800aa28:	e6b6      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa2a:	68ca      	ldr	r2, [r1, #12]
 800aa2c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800aa30:	60ca      	str	r2, [r1, #12]
 800aa32:	e6c4      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa34:	68d3      	ldr	r3, [r2, #12]
}
 800aa36:	4628      	mov	r0, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa3c:	60d3      	str	r3, [r2, #12]
}
 800aa3e:	b002      	add	sp, #8
 800aa40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800aa44:	2101      	movs	r1, #1
 800aa46:	f104 0020 	add.w	r0, r4, #32
 800aa4a:	f7ff fd27 	bl	800a49c <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aa4e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f43f aeef 	beq.w	800a834 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aa56:	4605      	mov	r5, r0
 800aa58:	e6ec      	b.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800aa5a:	2102      	movs	r1, #2
 800aa5c:	1d20      	adds	r0, r4, #4
 800aa5e:	f7ff fc97 	bl	800a390 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa62:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800aa64:	4606      	mov	r6, r0
 800aa66:	2800      	cmp	r0, #0
 800aa68:	f43f aeb9 	beq.w	800a7de <HAL_RCCEx_PeriphCLKConfig+0x236>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	e6b6      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x236>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa70:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800aa72:	e6f8      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aa74:	481e      	ldr	r0, [pc, #120]	@ (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa76:	68c2      	ldr	r2, [r0, #12]
 800aa78:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800aa7c:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 800aa7e:	e6f2      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aa80:	491b      	ldr	r1, [pc, #108]	@ (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa82:	68ca      	ldr	r2, [r1, #12]
 800aa84:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800aa88:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 800aa8a:	462e      	mov	r6, r5
 800aa8c:	e768      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aa8e:	2101      	movs	r1, #1
 800aa90:	1d20      	adds	r0, r4, #4
 800aa92:	f7ff fc7d 	bl	800a390 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800aa96:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800aa98:	4606      	mov	r6, r0
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	f43f ae5f 	beq.w	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	e65c      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	1d20      	adds	r0, r4, #4
 800aaa8:	f7ff fc72 	bl	800a390 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aaac:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800aaae:	4606      	mov	r6, r0
 800aab0:	2800      	cmp	r0, #0
 800aab2:	f43f ae84 	beq.w	800a7be <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aab6:	4605      	mov	r5, r0
 800aab8:	e681      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aaba:	68d1      	ldr	r1, [r2, #12]
 800aabc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800aac0:	60d1      	str	r1, [r2, #12]
 800aac2:	e669      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        ret = HAL_TIMEOUT;
 800aac4:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	e6a4      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800aaca:	4635      	mov	r5, r6
 800aacc:	e7fb      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aace:	2101      	movs	r1, #1
 800aad0:	1d20      	adds	r0, r4, #4
 800aad2:	f7ff fc5d 	bl	800a390 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aad6:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800aad8:	4606      	mov	r6, r0
 800aada:	2800      	cmp	r0, #0
 800aadc:	f43f ae5c 	beq.w	800a798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aae0:	4605      	mov	r5, r0
 800aae2:	e659      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800aae4:	4635      	mov	r5, r6
 800aae6:	e778      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch(PeriphClkInit->Sai2ClockSelection)
 800aae8:	2501      	movs	r5, #1
 800aaea:	e6c9      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800aaec:	2501      	movs	r5, #1
 800aaee:	e578      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800aaf0:	40021000 	.word	0x40021000

0800aaf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800aaf4:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aaf8:	4aa1      	ldr	r2, [pc, #644]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800aafa:	d03b      	beq.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aafc:	68d3      	ldr	r3, [r2, #12]
 800aafe:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	f000 80e9 	beq.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	f000 80cb 	beq.w	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	f000 80cf 	beq.w	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ab14:	2100      	movs	r1, #0
    switch(PeriphClk)
 800ab16:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800ab1a:	f000 8102 	beq.w	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ab1e:	d85b      	bhi.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800ab20:	2820      	cmp	r0, #32
 800ab22:	d839      	bhi.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f000 80bc 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800ab2a:	3801      	subs	r0, #1
 800ab2c:	281f      	cmp	r0, #31
 800ab2e:	d831      	bhi.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800ab30:	e8df f010 	tbh	[pc, r0, lsl #1]
 800ab34:	01520178 	.word	0x01520178
 800ab38:	01880030 	.word	0x01880030
 800ab3c:	00300030 	.word	0x00300030
 800ab40:	01160030 	.word	0x01160030
 800ab44:	00300030 	.word	0x00300030
 800ab48:	00300030 	.word	0x00300030
 800ab4c:	00300030 	.word	0x00300030
 800ab50:	012e0030 	.word	0x012e0030
 800ab54:	00300030 	.word	0x00300030
 800ab58:	00300030 	.word	0x00300030
 800ab5c:	00300030 	.word	0x00300030
 800ab60:	00300030 	.word	0x00300030
 800ab64:	00300030 	.word	0x00300030
 800ab68:	00300030 	.word	0x00300030
 800ab6c:	00300030 	.word	0x00300030
 800ab70:	01400030 	.word	0x01400030
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ab74:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800ab78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    switch(srcclk)
 800ab7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab80:	f000 80df 	beq.w	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 800ab84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab88:	f000 80e3 	beq.w	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800ab8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab90:	f000 80ae 	beq.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
  uint32_t frequency = 0U;
 800ab94:	2000      	movs	r0, #0
  return(frequency);
 800ab96:	4770      	bx	lr
    switch(PeriphClk)
 800ab98:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800ab9c:	f000 80ae 	beq.w	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800aba0:	d933      	bls.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800aba2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800aba6:	d1f5      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800aba8:	4a75      	ldr	r2, [pc, #468]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800abaa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800abae:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
        switch(srcclk)
 800abb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800abb6:	f000 80ad 	beq.w	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800abba:	f200 8218 	bhi.w	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800abbe:	b3b3      	cbz	r3, 800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800abc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800abc4:	d1e6      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800abc6:	4b6e      	ldr	r3, [pc, #440]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800abc8:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
          frequency = LSI_VALUE;
 800abcc:	f010 0002 	ands.w	r0, r0, #2
 800abd0:	bf18      	it	ne
 800abd2:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800abd6:	4770      	bx	lr
    switch(PeriphClk)
 800abd8:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 800abdc:	f000 817e 	beq.w	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800abe0:	d82f      	bhi.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 800abe2:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800abe6:	f000 8179 	beq.w	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800abea:	d922      	bls.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800abec:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800abf0:	f000 81e6 	beq.w	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800abf4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800abf8:	d1cc      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800abfa:	4b61      	ldr	r3, [pc, #388]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800abfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800ac00:	075a      	lsls	r2, r3, #29
 800ac02:	f140 811d 	bpl.w	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac06:	f7fe be7f 	b.w	8009908 <HAL_RCC_GetSysClockFreq>
    switch(PeriphClk)
 800ac0a:	2840      	cmp	r0, #64	@ 0x40
 800ac0c:	f000 8148 	beq.w	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800ac10:	2880      	cmp	r0, #128	@ 0x80
 800ac12:	d1bf      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ac14:	4a5a      	ldr	r2, [pc, #360]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ac16:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ac1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
        switch(srcclk)
 800ac1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac22:	d0f0      	beq.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800ac24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac28:	d074      	beq.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1b2      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac2e:	f7ff bae5 	b.w	800a1fc <HAL_RCC_GetPCLK1Freq>
    switch(PeriphClk)
 800ac32:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800ac36:	d002      	beq.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ac38:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800ac3c:	d1aa      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800ac3e:	f7ff bb01 	b.w	800a244 <RCCEx_GetSAIxPeriphCLKFreq>
    switch(PeriphClk)
 800ac42:	f5b0 1f00 	cmp.w	r0, #2097152	@ 0x200000
 800ac46:	f000 8139 	beq.w	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800ac4a:	d912      	bls.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800ac4c:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800ac50:	d1a0      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ac52:	4a4b      	ldr	r2, [pc, #300]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ac54:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800ac58:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
        switch(srcclk)
 800ac5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac60:	f000 8101 	beq.w	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ac64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac68:	f000 8206 	beq.w	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d191      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800ac70:	e7c9      	b.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    switch(PeriphClk)
 800ac72:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 800ac76:	f000 8175 	beq.w	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 800ac7a:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 800ac7e:	d189      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ac80:	4b3f      	ldr	r3, [pc, #252]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ac82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac86:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d0bb      	beq.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d1cb      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac92:	4a3b      	ldr	r2, [pc, #236]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
            frequency = HSI_VALUE;
 800ac94:	4b3b      	ldr	r3, [pc, #236]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac96:	6810      	ldr	r0, [r2, #0]
            frequency = HSI_VALUE;
 800ac98:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800ac9c:	bf18      	it	ne
 800ac9e:	4618      	movne	r0, r3
 800aca0:	4770      	bx	lr
}
 800aca2:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aca4:	6811      	ldr	r1, [r2, #0]
        pllvco = HSI_VALUE;
 800aca6:	4a37      	ldr	r2, [pc, #220]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aca8:	f411 3100 	ands.w	r1, r1, #131072	@ 0x20000
 800acac:	bf18      	it	ne
 800acae:	4611      	movne	r1, r2
 800acb0:	e731      	b.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800acb2:	6811      	ldr	r1, [r2, #0]
 800acb4:	f011 0102 	ands.w	r1, r1, #2
 800acb8:	f43f af2d 	beq.w	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800acbc:	6813      	ldr	r3, [r2, #0]
 800acbe:	071b      	lsls	r3, r3, #28
 800acc0:	bf4c      	ite	mi
 800acc2:	6813      	ldrmi	r3, [r2, #0]
 800acc4:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	@ 0x94
 800acc8:	4a2f      	ldr	r2, [pc, #188]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acca:	bf4c      	ite	mi
 800accc:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 800acd0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800acd4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800acd8:	e71d      	b.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acda:	6811      	ldr	r1, [r2, #0]
        pllvco = HSI_VALUE;
 800acdc:	4a29      	ldr	r2, [pc, #164]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800acde:	f411 6180 	ands.w	r1, r1, #1024	@ 0x400
 800ace2:	bf18      	it	ne
 800ace4:	4611      	movne	r1, r2
 800ace6:	e716      	b.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 800ace8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acec:	f47f af52 	bne.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800acf0:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
 800acf4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800acf8:	03c0      	lsls	r0, r0, #15
 800acfa:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800acfc:	4a20      	ldr	r2, [pc, #128]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800acfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ad02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
        switch(srcclk)
 800ad06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad0a:	f43f af7c 	beq.w	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800ad0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad12:	d18a      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad14:	6810      	ldr	r0, [r2, #0]
            frequency = HSI_VALUE;
 800ad16:	4b1b      	ldr	r3, [pc, #108]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ad18:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800ad1c:	bf18      	it	ne
 800ad1e:	4618      	movne	r0, r3
 800ad20:	4770      	bx	lr
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ad22:	4a17      	ldr	r2, [pc, #92]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ad24:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ad28:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
        switch(srcclk)
 800ad2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad30:	d0f0      	beq.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ad32:	d8d9      	bhi.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f43f af7a 	beq.w	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800ad3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad3e:	f47f af29 	bne.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ad42:	f8d2 0094 	ldr.w	r0, [r2, #148]	@ 0x94
          frequency = LSI_VALUE;
 800ad46:	f010 0002 	ands.w	r0, r0, #2
 800ad4a:	bf18      	it	ne
 800ad4c:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800ad50:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad52:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 32U;
 800ad54:	4b0d      	ldr	r3, [pc, #52]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad56:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800ad5a:	bf18      	it	ne
 800ad5c:	4618      	movne	r0, r3
 800ad5e:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ad60:	4a07      	ldr	r2, [pc, #28]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ad62:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ad66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        switch(srcclk)
 800ad6a:	2b80      	cmp	r3, #128	@ 0x80
 800ad6c:	d0d2      	beq.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ad6e:	f200 8093 	bhi.w	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f43f af5b 	beq.w	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800ad78:	2b40      	cmp	r3, #64	@ 0x40
 800ad7a:	f43f af44 	beq.w	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800ad7e:	e709      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800ad80:	40021000 	.word	0x40021000
 800ad84:	00f42400 	.word	0x00f42400
 800ad88:	080172e4 	.word	0x080172e4
 800ad8c:	0007a120 	.word	0x0007a120
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ad90:	4ab7      	ldr	r2, [pc, #732]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ad92:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ad96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
        switch(srcclk)
 800ad9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad9e:	d0b9      	beq.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ada0:	f200 811b 	bhi.w	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f43f af42 	beq.w	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800adaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adae:	f43f af2a 	beq.w	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800adb2:	e6ef      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800adb4:	4aae      	ldr	r2, [pc, #696]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800adb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800adba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
        switch(srcclk)
 800adbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adc2:	d0a7      	beq.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800adc4:	f200 810e 	bhi.w	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f43f af30 	beq.w	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800adce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800add2:	f43f af18 	beq.w	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800add6:	e6dd      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800add8:	4ba5      	ldr	r3, [pc, #660]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800adda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adde:	f003 030c 	and.w	r3, r3, #12
 800ade2:	2b0c      	cmp	r3, #12
 800ade4:	f63f aed6 	bhi.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800ade8:	a201      	add	r2, pc, #4	@ (adr r2, 800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800adea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adee:	bf00      	nop
 800adf0:	0800ac2f 	.word	0x0800ac2f
 800adf4:	0800ab95 	.word	0x0800ab95
 800adf8:	0800ab95 	.word	0x0800ab95
 800adfc:	0800ab95 	.word	0x0800ab95
 800ae00:	0800ac07 	.word	0x0800ac07
 800ae04:	0800ab95 	.word	0x0800ab95
 800ae08:	0800ab95 	.word	0x0800ab95
 800ae0c:	0800ab95 	.word	0x0800ab95
 800ae10:	0800ac93 	.word	0x0800ac93
 800ae14:	0800ab95 	.word	0x0800ab95
 800ae18:	0800ab95 	.word	0x0800ab95
 800ae1c:	0800ab95 	.word	0x0800ab95
 800ae20:	0800ae8b 	.word	0x0800ae8b
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ae24:	4a92      	ldr	r2, [pc, #584]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ae26:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ae2a:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	f43f af70 	beq.w	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	f43f af5b 	beq.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	f43f aee3 	beq.w	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HAL_RCC_GetPCLK2Freq();
 800ae40:	f7ff b9ee 	b.w	800a220 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ae44:	4a8a      	ldr	r2, [pc, #552]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ae46:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ae4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        switch(srcclk)
 800ae4e:	2b20      	cmp	r3, #32
 800ae50:	f43f af60 	beq.w	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ae54:	f200 80d0 	bhi.w	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f43f aee8 	beq.w	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800ae5e:	2b10      	cmp	r3, #16
 800ae60:	f43f aed1 	beq.w	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800ae64:	e696      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ae66:	6810      	ldr	r0, [r2, #0]
 800ae68:	f010 0002 	ands.w	r0, r0, #2
 800ae6c:	f43f af19 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ae70:	6813      	ldr	r3, [r2, #0]
 800ae72:	f013 0f08 	tst.w	r3, #8
 800ae76:	4b7e      	ldr	r3, [pc, #504]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ae78:	f000 80f5 	beq.w	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ae82:	4a7c      	ldr	r2, [pc, #496]	@ (800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800ae84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ae88:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae8a:	4b79      	ldr	r3, [pc, #484]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ae8c:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800ae90:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800ae94:	03c0      	lsls	r0, r0, #15
 800ae96:	4770      	bx	lr
 800ae98:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae9a:	f43f af29 	beq.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ae9e:	e679      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800aea0:	4a73      	ldr	r2, [pc, #460]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aea2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aea6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
        switch(srcclk)
 800aeaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeae:	f43f aeaa 	beq.w	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800aeb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeb6:	f47f aeb8 	bne.w	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 800aeba:	e72b      	b.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800aebc:	4a6c      	ldr	r2, [pc, #432]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aebe:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800aec2:	f003 0318 	and.w	r3, r3, #24
        switch(srcclk)
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	f43f af24 	beq.w	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800aecc:	2b10      	cmp	r3, #16
 800aece:	d039      	beq.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f47f ae5f 	bne.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800aed6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800aeda:	e6b0      	b.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800aedc:	4a64      	ldr	r2, [pc, #400]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aede:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aee2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
        switch(srcclk)
 800aee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeea:	f000 80ef 	beq.w	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 800aeee:	d825      	bhi.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 80e3 	beq.w	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 800aef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aefa:	f47f ae4b 	bne.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800aefe:	6810      	ldr	r0, [r2, #0]
 800af00:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800af04:	f43f aecd 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800af08:	6910      	ldr	r0, [r2, #16]
 800af0a:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800af0e:	f43f aec8 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800af12:	6910      	ldr	r0, [r2, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800af14:	f8d2 c010 	ldr.w	ip, [r2, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800af18:	6913      	ldr	r3, [r2, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800af1a:	f3cc 1c03 	ubfx	ip, ip, #4, #4
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800af1e:	f3c0 2206 	ubfx	r2, r0, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800af22:	f3c3 5341 	ubfx	r3, r3, #21, #2
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800af26:	3301      	adds	r3, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800af28:	fb01 f002 	mul.w	r0, r1, r2
 800af2c:	f10c 0c01 	add.w	ip, ip, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800af30:	005b      	lsls	r3, r3, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800af32:	fbb0 f0fc 	udiv	r0, r0, ip
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800af36:	fbb0 f0f3 	udiv	r0, r0, r3
 800af3a:	4770      	bx	lr
 800af3c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800af40:	f47f ae28 	bne.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800af44:	6810      	ldr	r0, [r2, #0]
 800af46:	f010 0002 	ands.w	r0, r0, #2
 800af4a:	f43f aeaa 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	071b      	lsls	r3, r3, #28
 800af52:	bf4b      	itete	mi
 800af54:	6813      	ldrmi	r3, [r2, #0]
 800af56:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	@ 0x94
 800af5a:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 800af5e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800af62:	e78e      	b.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800af64:	4a42      	ldr	r2, [pc, #264]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800af66:	f8d2 009c 	ldr.w	r0, [r2, #156]	@ 0x9c
 800af6a:	f410 4080 	ands.w	r0, r0, #16384	@ 0x4000
 800af6e:	d047      	beq.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800af70:	6810      	ldr	r0, [r2, #0]
 800af72:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800af76:	f43f ae94 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800af7a:	68d0      	ldr	r0, [r2, #12]
 800af7c:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 800af80:	f43f ae8f 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
{
 800af84:	b430      	push	{r4, r5}
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800af86:	4614      	mov	r4, r2
 800af88:	68d3      	ldr	r3, [r2, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800af8a:	68d2      	ldr	r2, [r2, #12]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800af8c:	68e5      	ldr	r5, [r4, #12]
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800af8e:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800af92:	f3c2 1203 	ubfx	r2, r2, #4, #4
            if(pllp == 0U)
 800af96:	ea5f 6cd5 	movs.w	ip, r5, lsr #27
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800af9a:	fb01 f003 	mul.w	r0, r1, r3
 800af9e:	f102 0201 	add.w	r2, r2, #1
 800afa2:	fbb0 f0f2 	udiv	r0, r0, r2
            if(pllp == 0U)
 800afa6:	d107      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800afa8:	68e3      	ldr	r3, [r4, #12]
                pllp = 17U;
 800afaa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800afae:	bf0c      	ite	eq
 800afb0:	f04f 0c07 	moveq.w	ip, #7
 800afb4:	f04f 0c11 	movne.w	ip, #17
            frequency = (pllvco / pllp);
 800afb8:	fbb0 f0fc 	udiv	r0, r0, ip
}
 800afbc:	bc30      	pop	{r4, r5}
 800afbe:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800afc0:	4a2b      	ldr	r2, [pc, #172]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800afc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800afc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch(srcclk)
 800afca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afce:	d062      	beq.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
 800afd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afd4:	f43f ae17 	beq.w	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800afd8:	e5dc      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800afda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afde:	f43f ae87 	beq.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800afe2:	e5d7      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800afe4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800afe8:	f43f ae82 	beq.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800afec:	e5d2      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800afee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aff2:	f43f ae7d 	beq.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800aff6:	e5cd      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800aff8:	2b30      	cmp	r3, #48	@ 0x30
 800affa:	f43f ae79 	beq.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800affe:	e5c9      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800b000:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800b004:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
        switch(srcclk)
 800b008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b00c:	d034      	beq.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800b00e:	d819      	bhi.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d070      	beq.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 800b014:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b018:	d176      	bne.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800b01a:	4b15      	ldr	r3, [pc, #84]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800b022:	f43f ae3e 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800b026:	6918      	ldr	r0, [r3, #16]
 800b028:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800b02c:	f43f ae39 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b030:	691a      	ldr	r2, [r3, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b032:	6918      	ldr	r0, [r3, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800b034:	691b      	ldr	r3, [r3, #16]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b036:	f3c2 2206 	ubfx	r2, r2, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b03a:	f3c3 5341 	ubfx	r3, r3, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b03e:	f3c0 1c03 	ubfx	ip, r0, #4, #4
 800b042:	e770      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b044:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b048:	f47f ae2b 	bne.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b04c:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
 800b050:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	f010 0002 	ands.w	r0, r0, #2
 800b05a:	f43f ae22 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	0711      	lsls	r1, r2, #28
 800b062:	f53f af0b 	bmi.w	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b06a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b06e:	e708      	b.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800b070:	40021000 	.word	0x40021000
 800b074:	080172e4 	.word	0x080172e4
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b078:	6810      	ldr	r0, [r2, #0]
 800b07a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800b07e:	f43f ae10 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b082:	4b22      	ldr	r3, [pc, #136]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 800b084:	68d8      	ldr	r0, [r3, #12]
 800b086:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800b08a:	f43f ae0a 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b08e:	68da      	ldr	r2, [r3, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b090:	68d8      	ldr	r0, [r3, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	e7cf      	b.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800b096:	6810      	ldr	r0, [r2, #0]
 800b098:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800b09c:	f43f ae01 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800b0a0:	6910      	ldr	r0, [r2, #16]
 800b0a2:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 800b0a6:	f43f adfc 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b0aa:	4b18      	ldr	r3, [pc, #96]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 800b0ac:	691a      	ldr	r2, [r3, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b0ae:	6918      	ldr	r0, [r3, #16]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800b0b0:	691b      	ldr	r3, [r3, #16]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b0b2:	f3c2 2206 	ubfx	r2, r2, #8, #7
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800b0b6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800b0ba:	e7c0      	b.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800b0bc:	f8d2 0098 	ldr.w	r0, [r2, #152]	@ 0x98
            frequency = HSI48_VALUE;
 800b0c0:	4b13      	ldr	r3, [pc, #76]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
 800b0c2:	f010 0002 	ands.w	r0, r0, #2
 800b0c6:	bf18      	it	ne
 800b0c8:	4618      	movne	r0, r3
 800b0ca:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b0cc:	6810      	ldr	r0, [r2, #0]
 800b0ce:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800b0d2:	f43f ade6 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b0d6:	68d0      	ldr	r0, [r2, #12]
 800b0d8:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800b0dc:	f43f ade1 	beq.w	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b0e0:	68d0      	ldr	r0, [r2, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b0e2:	f8d2 c00c 	ldr.w	ip, [r2, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b0e6:	68d3      	ldr	r3, [r2, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b0e8:	f3cc 1c03 	ubfx	ip, ip, #4, #4
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b0ec:	f3c0 2206 	ubfx	r2, r0, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b0f0:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800b0f4:	e717      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800b0f6:	4a05      	ldr	r2, [pc, #20]	@ (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
            frequency = HSI48_VALUE;
 800b0f8:	4b05      	ldr	r3, [pc, #20]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800b0fa:	f8d2 0098 	ldr.w	r0, [r2, #152]	@ 0x98
            frequency = HSI48_VALUE;
 800b0fe:	f010 0002 	ands.w	r0, r0, #2
 800b102:	bf18      	it	ne
 800b104:	4618      	movne	r0, r3
 800b106:	4770      	bx	lr
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	40021000 	.word	0x40021000
 800b110:	02dc6c00 	.word	0x02dc6c00

0800b114 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 800b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b118:	b086      	sub	sp, #24
 800b11a:	4605      	mov	r5, r0
 800b11c:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b11e:	f7fc fa77 	bl	8007610 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b122:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800b124:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b126:	6828      	ldr	r0, [r5, #0]
 800b128:	f002 faf0 	bl	800d70c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b12c:	4604      	mov	r4, r0
 800b12e:	b118      	cbz	r0, 800b138 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800b130:	4620      	mov	r0, r4
 800b132:	b006      	add	sp, #24
 800b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b138:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800b13a:	6828      	ldr	r0, [r5, #0]
 800b13c:	0409      	lsls	r1, r1, #16
 800b13e:	f002 ffeb 	bl	800e118 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b142:	4604      	mov	r4, r0
 800b144:	2800      	cmp	r0, #0
 800b146:	d1f3      	bne.n	800b130 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 800b148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b14c:	2308      	movs	r3, #8
 800b14e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b152:	2230      	movs	r2, #48	@ 0x30
 800b154:	2302      	movs	r3, #2
 800b156:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b15a:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b15c:	2200      	movs	r2, #0
 800b15e:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b160:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b162:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b166:	f002 fabb 	bl	800d6e0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b16a:	6828      	ldr	r0, [r5, #0]
 800b16c:	f003 f95a 	bl	800e424 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b170:	4604      	mov	r4, r0
 800b172:	2800      	cmp	r0, #0
 800b174:	d1dc      	bne.n	800b130 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b176:	4682      	mov	sl, r0
 800b178:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b17a:	f240 582a 	movw	r8, #1322	@ 0x52a
 800b17e:	e004      	b.n	800b18a <SD_FindSCR.constprop.0+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b180:	f7fc fa46 	bl	8007610 <HAL_GetTick>
 800b184:	1b83      	subs	r3, r0, r6
 800b186:	3301      	adds	r3, #1
 800b188:	d024      	beq.n	800b1d4 <SD_FindSCR.constprop.0+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b18a:	6828      	ldr	r0, [r5, #0]
 800b18c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b18e:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b192:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b194:	d10c      	bne.n	800b1b0 <SD_FindSCR.constprop.0+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b196:	0319      	lsls	r1, r3, #12
 800b198:	d4f2      	bmi.n	800b180 <SD_FindSCR.constprop.0+0x6c>
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d1f0      	bne.n	800b180 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b19e:	f002 fa81 	bl	800d6a4 <SDMMC_ReadFIFO>
 800b1a2:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b1a4:	6828      	ldr	r0, [r5, #0]
 800b1a6:	f002 fa7d 	bl	800d6a4 <SDMMC_ReadFIFO>
      index++;
 800b1aa:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b1ac:	4682      	mov	sl, r0
      index++;
 800b1ae:	e7e7      	b.n	800b180 <SD_FindSCR.constprop.0+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b1b0:	071a      	lsls	r2, r3, #28
 800b1b2:	d415      	bmi.n	800b1e0 <SD_FindSCR.constprop.0+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b1b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b1b6:	079b      	lsls	r3, r3, #30
 800b1b8:	d40f      	bmi.n	800b1da <SD_FindSCR.constprop.0+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b1ba:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800b1bc:	f014 0420 	ands.w	r4, r4, #32
 800b1c0:	d111      	bne.n	800b1e6 <SD_FindSCR.constprop.0+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b1c2:	490a      	ldr	r1, [pc, #40]	@ (800b1ec <SD_FindSCR.constprop.0+0xd8>)
 800b1c4:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1c6:	fa9a f28a 	rev.w	r2, sl
 800b1ca:	fa99 f389 	rev.w	r3, r9
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1ce:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800b1d2:	e7ad      	b.n	800b130 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800b1d4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800b1d8:	e7aa      	b.n	800b130 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b1da:	2402      	movs	r4, #2
 800b1dc:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1de:	e7a7      	b.n	800b130 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b1e0:	2408      	movs	r4, #8
 800b1e2:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b1e4:	e7a4      	b.n	800b130 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b1e6:	2420      	movs	r4, #32
 800b1e8:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800b1ea:	e7a1      	b.n	800b130 <SD_FindSCR.constprop.0+0x1c>
 800b1ec:	18000f3a 	.word	0x18000f3a

0800b1f0 <HAL_SD_MspInit>:
}
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop

0800b1f4 <HAL_SD_ReadBlocks_DMA>:
{
 800b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	b087      	sub	sp, #28
  if(NULL == pData)
 800b1fa:	2900      	cmp	r1, #0
 800b1fc:	d052      	beq.n	800b2a4 <HAL_SD_ReadBlocks_DMA+0xb0>
  if(hsd->State == HAL_SD_STATE_READY)
 800b1fe:	461f      	mov	r7, r3
 800b200:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800b204:	2b01      	cmp	r3, #1
 800b206:	d13d      	bne.n	800b284 <HAL_SD_ReadBlocks_DMA+0x90>
 800b208:	4616      	mov	r6, r2
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b20a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800b20c:	460d      	mov	r5, r1
 800b20e:	19f1      	adds	r1, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b210:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b212:	4291      	cmp	r1, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b214:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b216:	d838      	bhi.n	800b28a <HAL_SD_ReadBlocks_DMA+0x96>
    hsd->Instance->DCTRL = 0U;
 800b218:	6800      	ldr	r0, [r0, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b21a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800b21c:	2103      	movs	r1, #3
 800b21e:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800b222:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800b224:	027b      	lsls	r3, r7, #9
 800b226:	62e3      	str	r3, [r4, #44]	@ 0x2c
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b228:	9301      	str	r3, [sp, #4]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b22a:	2300      	movs	r3, #0
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800b22c:	e9cd 3304 	strd	r3, r3, [sp, #16]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b234:	9300      	str	r3, [sp, #0]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b236:	2190      	movs	r1, #144	@ 0x90
 800b238:	2302      	movs	r3, #2
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b23a:	2a01      	cmp	r2, #1
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b23c:	e9cd 1302 	strd	r1, r3, [sp, #8]
      hsd->pRxBuffPtr = pData;
 800b240:	62a5      	str	r5, [r4, #40]	@ 0x28
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b242:	4669      	mov	r1, sp
        add *= 512U;
 800b244:	bf18      	it	ne
 800b246:	0276      	lslne	r6, r6, #9
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b248:	f002 fa4a 	bl	800d6e0 <SDMMC_ConfigData>
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b24c:	6820      	ldr	r0, [r4, #0]
 800b24e:	68c3      	ldr	r3, [r0, #12]
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800b250:	2201      	movs	r2, #1
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
      if(NumberOfBlocks > 1U)
 800b256:	4297      	cmp	r7, r2
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b258:	60c3      	str	r3, [r0, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800b25a:	6585      	str	r5, [r0, #88]	@ 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800b25c:	6502      	str	r2, [r0, #80]	@ 0x50
      if(NumberOfBlocks > 1U)
 800b25e:	d926      	bls.n	800b2ae <HAL_SD_ReadBlocks_DMA+0xba>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b260:	2382      	movs	r3, #130	@ 0x82
 800b262:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b264:	4631      	mov	r1, r6
 800b266:	f002 fb9d 	bl	800d9a4 <SDMMC_CmdReadMultiBlock>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b26a:	6823      	ldr	r3, [r4, #0]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b26c:	b1a0      	cbz	r0, 800b298 <HAL_SD_ReadBlocks_DMA+0xa4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b26e:	4a13      	ldr	r2, [pc, #76]	@ (800b2bc <HAL_SD_ReadBlocks_DMA+0xc8>)
 800b270:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b272:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b274:	2101      	movs	r1, #1
        hsd->ErrorCode |= errorstate;
 800b276:	4303      	orrs	r3, r0
        hsd->Context = SD_CONTEXT_NONE;
 800b278:	2200      	movs	r2, #0
        hsd->ErrorCode |= errorstate;
 800b27a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b27c:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b280:	6322      	str	r2, [r4, #48]	@ 0x30
        return HAL_ERROR;
 800b282:	e006      	b.n	800b292 <HAL_SD_ReadBlocks_DMA+0x9e>
    return HAL_BUSY;
 800b284:	2002      	movs	r0, #2
}
 800b286:	b007      	add	sp, #28
 800b288:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b28a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b28c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b290:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800b292:	2001      	movs	r0, #1
}
 800b294:	b007      	add	sp, #28
 800b296:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b29a:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800b29e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b2a0:	b007      	add	sp, #28
 800b2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b2a4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b2a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b2aa:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800b2ac:	e7f1      	b.n	800b292 <HAL_SD_ReadBlocks_DMA+0x9e>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b2ae:	2381      	movs	r3, #129	@ 0x81
 800b2b0:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	f002 fad0 	bl	800d858 <SDMMC_CmdReadSingleBlock>
 800b2b8:	e7d7      	b.n	800b26a <HAL_SD_ReadBlocks_DMA+0x76>
 800b2ba:	bf00      	nop
 800b2bc:	1fe00fff 	.word	0x1fe00fff

0800b2c0 <HAL_SD_WriteBlocks_DMA>:
{
 800b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	b086      	sub	sp, #24
  if(NULL == pData)
 800b2c8:	2900      	cmp	r1, #0
 800b2ca:	d056      	beq.n	800b37a <HAL_SD_WriteBlocks_DMA+0xba>
  if(hsd->State == HAL_SD_STATE_READY)
 800b2cc:	461f      	mov	r7, r3
 800b2ce:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d13e      	bne.n	800b354 <HAL_SD_WriteBlocks_DMA+0x94>
 800b2d6:	4616      	mov	r6, r2
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b2d8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800b2da:	460d      	mov	r5, r1
 800b2dc:	19f1      	adds	r1, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b2de:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b2e0:	4291      	cmp	r1, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b2e2:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b2e4:	d83a      	bhi.n	800b35c <HAL_SD_WriteBlocks_DMA+0x9c>
    hsd->Instance->DCTRL = 0U;
 800b2e6:	6800      	ldr	r0, [r0, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b2e8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800b2ea:	2103      	movs	r1, #3
 800b2ec:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800b2f0:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800b2f2:	027b      	lsls	r3, r7, #9
 800b2f4:	6263      	str	r3, [r4, #36]	@ 0x24
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b2f6:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b2f8:	2300      	movs	r3, #0
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b2fa:	2a01      	cmp	r2, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b2fc:	e9cd 3303 	strd	r3, r3, [sp, #12]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b300:	9305      	str	r3, [sp, #20]
    hsd->pTxBuffPtr = pData;
 800b302:	6225      	str	r5, [r4, #32]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b308:	f04f 0890 	mov.w	r8, #144	@ 0x90
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b30c:	4669      	mov	r1, sp
      add *= 512U;
 800b30e:	bf18      	it	ne
 800b310:	0276      	lslne	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b312:	9300      	str	r3, [sp, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b314:	f8cd 8008 	str.w	r8, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b318:	f002 f9e2 	bl	800d6e0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b31c:	6820      	ldr	r0, [r4, #0]
 800b31e:	68c3      	ldr	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800b320:	2201      	movs	r2, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
    if(NumberOfBlocks > 1U)
 800b326:	4297      	cmp	r7, r2
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b328:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800b32a:	6585      	str	r5, [r0, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800b32c:	6502      	str	r2, [r0, #80]	@ 0x50
    if(NumberOfBlocks > 1U)
 800b32e:	d929      	bls.n	800b384 <HAL_SD_WriteBlocks_DMA+0xc4>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b330:	23a0      	movs	r3, #160	@ 0xa0
 800b332:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b334:	4631      	mov	r1, r6
 800b336:	f002 fc81 	bl	800dc3c <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b33a:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b33c:	b1b0      	cbz	r0, 800b36c <HAL_SD_WriteBlocks_DMA+0xac>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b33e:	4a14      	ldr	r2, [pc, #80]	@ (800b390 <HAL_SD_WriteBlocks_DMA+0xd0>)
 800b340:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b342:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b344:	2101      	movs	r1, #1
      hsd->ErrorCode |= errorstate;
 800b346:	4303      	orrs	r3, r0
      hsd->Context = SD_CONTEXT_NONE;
 800b348:	2200      	movs	r2, #0
      hsd->ErrorCode |= errorstate;
 800b34a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b34c:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b350:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 800b352:	e007      	b.n	800b364 <HAL_SD_WriteBlocks_DMA+0xa4>
    return HAL_BUSY;
 800b354:	2002      	movs	r0, #2
}
 800b356:	b006      	add	sp, #24
 800b358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b35c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b35e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b362:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800b364:	2001      	movs	r0, #1
}
 800b366:	b006      	add	sp, #24
 800b368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800b36c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b36e:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800b372:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b374:	b006      	add	sp, #24
 800b376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b37a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b37c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b380:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800b382:	e7ef      	b.n	800b364 <HAL_SD_WriteBlocks_DMA+0xa4>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b384:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b388:	4631      	mov	r1, r6
 800b38a:	f002 fbb1 	bl	800daf0 <SDMMC_CmdWriteSingleBlock>
 800b38e:	e7d4      	b.n	800b33a <HAL_SD_WriteBlocks_DMA+0x7a>
 800b390:	1fe00fff 	.word	0x1fe00fff

0800b394 <HAL_SD_ErrorCallback>:
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop

0800b398 <HAL_SD_IRQHandler>:
{
 800b398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39c:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b39e:	6800      	ldr	r0, [r0, #0]
  uint32_t context = hsd->Context;
 800b3a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b3a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b3a4:	041b      	lsls	r3, r3, #16
{
 800b3a6:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b3a8:	d52e      	bpl.n	800b408 <HAL_SD_IRQHandler+0x70>
 800b3aa:	072f      	lsls	r7, r5, #28
 800b3ac:	f100 80ec 	bmi.w	800b588 <HAL_SD_IRQHandler+0x1f0>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b3b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b3b2:	05db      	lsls	r3, r3, #23
 800b3b4:	d57f      	bpl.n	800b4b6 <HAL_SD_IRQHandler+0x11e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b3b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3ba:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800b3bc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b3be:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800b3c2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800b3c6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b3c8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b3ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3ce:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b3d0:	68c3      	ldr	r3, [r0, #12]
 800b3d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3d6:	60c3      	str	r3, [r0, #12]
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b3d8:	062b      	lsls	r3, r5, #24
 800b3da:	d512      	bpl.n	800b402 <HAL_SD_IRQHandler+0x6a>
      hsd->Instance->DLEN = 0;
 800b3dc:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b3de:	f015 0f22 	tst.w	r5, #34	@ 0x22
      hsd->Instance->DLEN = 0;
 800b3e2:	6283      	str	r3, [r0, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800b3e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b3e6:	6503      	str	r3, [r0, #80]	@ 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b3e8:	f040 8107 	bne.w	800b5fa <HAL_SD_IRQHandler+0x262>
      hsd->State = HAL_SD_STATE_READY;
 800b3ec:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b3ee:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b3f0:	f015 0f30 	tst.w	r5, #48	@ 0x30
      hsd->State = HAL_SD_STATE_READY;
 800b3f4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b3f8:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b3fa:	f040 80fa 	bne.w	800b5f2 <HAL_SD_IRQHandler+0x25a>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b3fe:	07af      	lsls	r7, r5, #30
 800b400:	d126      	bne.n	800b450 <HAL_SD_IRQHandler+0xb8>
}
 800b402:	b002      	add	sp, #8
 800b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b408:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b40a:	05de      	lsls	r6, r3, #23
 800b40c:	d526      	bpl.n	800b45c <HAL_SD_IRQHandler+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b40e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b412:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800b414:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b416:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800b41a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800b41e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b420:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b426:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b428:	68c3      	ldr	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800b42a:	0729      	lsls	r1, r5, #28
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b42c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b430:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800b432:	d5d1      	bpl.n	800b3d8 <HAL_SD_IRQHandler+0x40>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b434:	f015 0f22 	tst.w	r5, #34	@ 0x22
 800b438:	f040 80bf 	bne.w	800b5ba <HAL_SD_IRQHandler+0x222>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b43c:	4b7a      	ldr	r3, [pc, #488]	@ (800b628 <HAL_SD_IRQHandler+0x290>)
 800b43e:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b440:	2201      	movs	r2, #1
 800b442:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b446:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b448:	07aa      	lsls	r2, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 800b44a:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b44c:	f000 80af 	beq.w	800b5ae <HAL_SD_IRQHandler+0x216>
        HAL_SD_RxCpltCallback(hsd);
 800b450:	4620      	mov	r0, r4
 800b452:	f7fc f86f 	bl	8007534 <HAL_SD_RxCpltCallback>
}
 800b456:	b002      	add	sp, #8
 800b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b45c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b45e:	045e      	lsls	r6, r3, #17
 800b460:	d52a      	bpl.n	800b4b8 <HAL_SD_IRQHandler+0x120>
 800b462:	0729      	lsls	r1, r5, #28
 800b464:	d528      	bpl.n	800b4b8 <HAL_SD_IRQHandler+0x120>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 800b466:	6a66      	ldr	r6, [r4, #36]	@ 0x24

  if (dataremaining > 0U)
 800b468:	2e00      	cmp	r6, #0
 800b46a:	d0ca      	beq.n	800b402 <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pTxBuffPtr;
 800b46c:	6a27      	ldr	r7, [r4, #32]
 800b46e:	f107 0804 	add.w	r8, r7, #4
 800b472:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 800b476:	e000      	b.n	800b47a <HAL_SD_IRQHandler+0xe2>
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b478:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800b47a:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 800b47e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800b480:	f818 2c03 	ldrb.w	r2, [r8, #-3]
 800b484:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b488:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800b48a:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 800b48e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b492:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800b494:	f818 2c01 	ldrb.w	r2, [r8, #-1]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b498:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 800b49a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    for(count = 0U; count < 8U; count++)
 800b49e:	f108 0804 	add.w	r8, r8, #4
      data |= ((uint32_t)(*tmp) << 24U);
 800b4a2:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b4a4:	f002 f902 	bl	800d6ac <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b4a8:	45a8      	cmp	r8, r5
 800b4aa:	d1e5      	bne.n	800b478 <HAL_SD_IRQHandler+0xe0>
      tmp++;
 800b4ac:	3720      	adds	r7, #32
      dataremaining--;
 800b4ae:	3e20      	subs	r6, #32
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
 800b4b0:	e9c4 7608 	strd	r7, r6, [r4, #32]
  }
}
 800b4b4:	e7a5      	b.n	800b402 <HAL_SD_IRQHandler+0x6a>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b4b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b4b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b4ba:	f013 0f3a 	tst.w	r3, #58	@ 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b4be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b4c0:	d04f      	beq.n	800b562 <HAL_SD_IRQHandler+0x1ca>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b4c2:	079a      	lsls	r2, r3, #30
 800b4c4:	d503      	bpl.n	800b4ce <HAL_SD_IRQHandler+0x136>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b4c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b4c8:	f043 0302 	orr.w	r3, r3, #2
 800b4cc:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b4ce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b4d0:	071b      	lsls	r3, r3, #28
 800b4d2:	d503      	bpl.n	800b4dc <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b4d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b4d6:	f043 0308 	orr.w	r3, r3, #8
 800b4da:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b4dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b4de:	069f      	lsls	r7, r3, #26
 800b4e0:	d503      	bpl.n	800b4ea <HAL_SD_IRQHandler+0x152>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b4e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b4e4:	f043 0320 	orr.w	r3, r3, #32
 800b4e8:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b4ea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b4ec:	06de      	lsls	r6, r3, #27
 800b4ee:	d503      	bpl.n	800b4f8 <HAL_SD_IRQHandler+0x160>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b4f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b4f2:	f043 0310 	orr.w	r3, r3, #16
 800b4f6:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b4f8:	4b4b      	ldr	r3, [pc, #300]	@ (800b628 <HAL_SD_IRQHandler+0x290>)
 800b4fa:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b4fc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b4fe:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 800b502:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b504:	68c3      	ldr	r3, [r0, #12]
 800b506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b50a:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800b50c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800b50e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b512:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800b514:	68c3      	ldr	r3, [r0, #12]
 800b516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b51a:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b51c:	f002 fc34 	bl	800dd88 <SDMMC_CmdStopTransfer>
 800b520:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b522:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b524:	4302      	orrs	r2, r0
 800b526:	63a2      	str	r2, [r4, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b52e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b530:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    if((context & SD_CONTEXT_IT) != 0U)
 800b534:	f015 0208 	ands.w	r2, r5, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b538:	6399      	str	r1, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b53a:	d144      	bne.n	800b5c6 <HAL_SD_IRQHandler+0x22e>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b53c:	0628      	lsls	r0, r5, #24
 800b53e:	f57f af60 	bpl.w	800b402 <HAL_SD_IRQHandler+0x6a>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b542:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b544:	2900      	cmp	r1, #0
 800b546:	f43f af5c 	beq.w	800b402 <HAL_SD_IRQHandler+0x6a>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b54a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
        hsd->State = HAL_SD_STATE_READY;
 800b54c:	2501      	movs	r5, #1
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b54e:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 800b552:	63d9      	str	r1, [r3, #60]	@ 0x3c
        HAL_SD_ErrorCallback(hsd);
 800b554:	4620      	mov	r0, r4
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b556:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b558:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
        HAL_SD_ErrorCallback(hsd);
 800b55c:	f7ff ff1a 	bl	800b394 <HAL_SD_ErrorCallback>
 800b560:	e74f      	b.n	800b402 <HAL_SD_IRQHandler+0x6a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b562:	00d9      	lsls	r1, r3, #3
 800b564:	f57f af4d 	bpl.w	800b402 <HAL_SD_IRQHandler+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b568:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b56c:	6383      	str	r3, [r0, #56]	@ 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b56e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800b570:	075a      	lsls	r2, r3, #29
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b572:	f005 0520 	and.w	r5, r5, #32
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800b576:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b578:	d42e      	bmi.n	800b5d8 <HAL_SD_IRQHandler+0x240>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b57a:	2d00      	cmp	r5, #0
 800b57c:	d04f      	beq.n	800b61e <HAL_SD_IRQHandler+0x286>
}
 800b57e:	b002      	add	sp, #8
 800b580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800b584:	f000 bcbe 	b.w	800bf04 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
  tmp = hsd->pRxBuffPtr;
 800b588:	e9d4 570a 	ldrd	r5, r7, [r4, #40]	@ 0x28
  if (dataremaining > 0U)
 800b58c:	2f00      	cmp	r7, #0
 800b58e:	f43f af38 	beq.w	800b402 <HAL_SD_IRQHandler+0x6a>
 800b592:	f105 0620 	add.w	r6, r5, #32
 800b596:	e000      	b.n	800b59a <HAL_SD_IRQHandler+0x202>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b598:	6820      	ldr	r0, [r4, #0]
 800b59a:	f002 f883 	bl	800d6a4 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800b59e:	f845 0b04 	str.w	r0, [r5], #4
    for(count = 0U; count < 8U; count++)
 800b5a2:	42ae      	cmp	r6, r5
 800b5a4:	d1f8      	bne.n	800b598 <HAL_SD_IRQHandler+0x200>
      dataremaining--;
 800b5a6:	3f20      	subs	r7, #32
    hsd->RxXferSize = dataremaining;
 800b5a8:	e9c4 670a 	strd	r6, r7, [r4, #40]	@ 0x28
 800b5ac:	e729      	b.n	800b402 <HAL_SD_IRQHandler+0x6a>
        HAL_SD_TxCpltCallback(hsd);
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7fb ffbc 	bl	800752c <HAL_SD_TxCpltCallback>
}
 800b5b4:	b002      	add	sp, #8
 800b5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b5ba:	f002 fbe5 	bl	800dd88 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b5be:	4603      	mov	r3, r0
 800b5c0:	b980      	cbnz	r0, 800b5e4 <HAL_SD_IRQHandler+0x24c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b5c2:	6820      	ldr	r0, [r4, #0]
 800b5c4:	e73a      	b.n	800b43c <HAL_SD_IRQHandler+0xa4>
      hsd->State = HAL_SD_STATE_READY;
 800b5c6:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b5c8:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800b5ca:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      HAL_SD_ErrorCallback(hsd);
 800b5ce:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 800b5d0:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800b5d2:	f7ff fedf 	bl	800b394 <HAL_SD_ErrorCallback>
 800b5d6:	e714      	b.n	800b402 <HAL_SD_IRQHandler+0x6a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b5d8:	b1e5      	cbz	r5, 800b614 <HAL_SD_IRQHandler+0x27c>
}
 800b5da:	b002      	add	sp, #8
 800b5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800b5e0:	f000 bc8e 	b.w	800bf00 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
          hsd->ErrorCode |= errorstate;
 800b5e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b5e6:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 800b5e8:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800b5ea:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800b5ec:	f7ff fed2 	bl	800b394 <HAL_SD_ErrorCallback>
 800b5f0:	e7e7      	b.n	800b5c2 <HAL_SD_IRQHandler+0x22a>
        HAL_SD_TxCpltCallback(hsd);
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7fb ff9a 	bl	800752c <HAL_SD_TxCpltCallback>
 800b5f8:	e701      	b.n	800b3fe <HAL_SD_IRQHandler+0x66>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b5fa:	f002 fbc5 	bl	800dd88 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b5fe:	4603      	mov	r3, r0
 800b600:	2800      	cmp	r0, #0
 800b602:	f43f aef3 	beq.w	800b3ec <HAL_SD_IRQHandler+0x54>
          hsd->ErrorCode |= errorstate;
 800b606:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b608:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 800b60a:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800b60c:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800b60e:	f7ff fec1 	bl	800b394 <HAL_SD_ErrorCallback>
 800b612:	e6eb      	b.n	800b3ec <HAL_SD_IRQHandler+0x54>
}
 800b614:	b002      	add	sp, #8
 800b616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800b61a:	f000 bc6d 	b.w	800bef8 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800b61e:	b002      	add	sp, #8
 800b620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800b624:	f000 bc6a 	b.w	800befc <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 800b628:	18000f3a 	.word	0x18000f3a

0800b62c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b62c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
{
 800b62e:	b410      	push	{r4}
 800b630:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b632:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b634:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b638:	700c      	strb	r4, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b63a:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b63c:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b640:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b644:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b646:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b648:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b64c:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b64e:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b650:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b652:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b654:	0d14      	lsrs	r4, r2, #20
 800b656:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b658:	f3c2 4403 	ubfx	r4, r2, #16, #4
 800b65c:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b65e:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 800b662:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b664:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800b668:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b66a:	f3c2 3440 	ubfx	r4, r2, #13, #1
 800b66e:	72cc      	strb	r4, [r1, #11]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b670:	2000      	movs	r0, #0
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b672:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800b676:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b678:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800b67a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d16f      	bne.n	800b760 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b680:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b682:	f640 74fc 	movw	r4, #4092	@ 0xffc
 800b686:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 800b68a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b68e:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b692:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b694:	750c      	strb	r4, [r1, #20]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b696:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b69a:	f3c0 6402 	ubfx	r4, r0, #24, #3
 800b69e:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b6a0:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b6a2:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b6a6:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b6aa:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b6ac:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b6ae:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b6b0:	7e0a      	ldrb	r2, [r1, #24]
 800b6b2:	f002 0207 	and.w	r2, r2, #7
 800b6b6:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b6b8:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b6ba:	4094      	lsls	r4, r2
 800b6bc:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b6be:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f00c 0c0f 	and.w	ip, ip, #15
 800b6c8:	fa02 f20c 	lsl.w	r2, r2, ip
 800b6cc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b6ce:	0a52      	lsrs	r2, r2, #9
 800b6d0:	fb04 f202 	mul.w	r2, r4, r2
 800b6d4:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b6d6:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800b6da:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b6de:	659c      	str	r4, [r3, #88]	@ 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b6e0:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b6e2:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b6e6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b6ea:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b6ec:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b6ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6f0:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b6f2:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b6f6:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b6f8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b6fa:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b6fe:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b702:	778c      	strb	r4, [r1, #30]
  pCSD->Reserved3 = 0;
 800b704:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b706:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b708:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b70c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b710:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->Reserved3 = 0;
 800b714:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b718:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b71c:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b720:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b724:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b728:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b72c:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b730:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b734:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b738:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b73c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b740:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b744:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b748:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b74c:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 800b750:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b752:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800b756:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 800b75a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b75e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b760:	2801      	cmp	r0, #1
 800b762:	d10f      	bne.n	800b784 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b764:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b766:	0412      	lsls	r2, r2, #16
 800b768:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800b76c:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800b770:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b772:	690a      	ldr	r2, [r1, #16]
 800b774:	3201      	adds	r2, #1
 800b776:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 800b778:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b77c:	e9c3 4214 	strd	r4, r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b780:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b782:	e7a8      	b.n	800b6d6 <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4906      	ldr	r1, [pc, #24]	@ (800b7a0 <HAL_SD_GetCardCSD+0x174>)
 800b788:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b78a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b78c:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b78e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b792:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b794:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b798:	4608      	mov	r0, r1
}
 800b79a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	1fe00fff 	.word	0x1fe00fff

0800b7a4 <HAL_SD_InitCard>:
{
 800b7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b7a8:	2200      	movs	r2, #0
{
 800b7aa:	b098      	sub	sp, #96	@ 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b7ac:	2300      	movs	r3, #0
{
 800b7ae:	4604      	mov	r4, r0
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b7b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b7b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b7bc:	f7ff f99a 	bl	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d070      	beq.n	800b8a6 <HAL_SD_InitCard+0x102>
  Init.Transceiver = hsd->Init.Transceiver;
 800b7c4:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b7c6:	4aa6      	ldr	r2, [pc, #664]	@ (800ba60 <HAL_SD_InitCard+0x2bc>)
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b7c8:	6827      	ldr	r7, [r4, #0]
  Init.Transceiver = hsd->Init.Transceiver;
 800b7ca:	930b      	str	r3, [sp, #44]	@ 0x2c
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b7cc:	0a06      	lsrs	r6, r0, #8
 800b7ce:	fba2 2606 	umull	r2, r6, r2, r6
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b7d6:	ea4f 1616 	mov.w	r6, r6, lsr #4
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b7da:	d05f      	beq.n	800b89c <HAL_SD_InitCard+0xf8>
  status = SDMMC_Init(hsd->Instance, Init);
 800b7dc:	960a      	str	r6, [sp, #40]	@ 0x28
 800b7de:	aa09      	add	r2, sp, #36	@ 0x24
 800b7e0:	ca07      	ldmia	r2, {r0, r1, r2}
 800b7e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b7e6:	ab06      	add	r3, sp, #24
 800b7e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	f001 ff3e 	bl	800d66c <SDMMC_Init>
  if(status != HAL_OK)
 800b7f0:	b120      	cbz	r0, 800b7fc <HAL_SD_InitCard+0x58>
      return HAL_ERROR;
 800b7f2:	2501      	movs	r5, #1
}
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	b018      	add	sp, #96	@ 0x60
 800b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = SDMMC_PowerState_ON(hsd->Instance);
 800b7fc:	6820      	ldr	r0, [r4, #0]
 800b7fe:	f001 ff5b 	bl	800d6b8 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800b802:	4607      	mov	r7, r0
 800b804:	2800      	cmp	r0, #0
 800b806:	d1f4      	bne.n	800b7f2 <HAL_SD_InitCard+0x4e>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b808:	0076      	lsls	r6, r6, #1
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b80a:	4896      	ldr	r0, [pc, #600]	@ (800ba64 <HAL_SD_InitCard+0x2c0>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b80c:	fbb5 f5f6 	udiv	r5, r5, r6
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b810:	fbb0 f0f5 	udiv	r0, r0, r5
 800b814:	3001      	adds	r0, #1
 800b816:	f7fb ff01 	bl	800761c <HAL_Delay>
  __IO uint32_t count = 0U;
 800b81a:	9705      	str	r7, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 800b81c:	f7fb fef8 	bl	8007610 <HAL_GetTick>
 800b820:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b822:	6820      	ldr	r0, [r4, #0]
 800b824:	f002 fc0a 	bl	800e03c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b828:	4605      	mov	r5, r0
 800b82a:	bb80      	cbnz	r0, 800b88e <HAL_SD_InitCard+0xea>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b82c:	6820      	ldr	r0, [r4, #0]
 800b82e:	f002 fc31 	bl	800e094 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b832:	2800      	cmp	r0, #0
 800b834:	f040 80d2 	bne.w	800b9dc <HAL_SD_InitCard+0x238>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b838:	2301      	movs	r3, #1
 800b83a:	6423      	str	r3, [r4, #64]	@ 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b83c:	6820      	ldr	r0, [r4, #0]
 800b83e:	2100      	movs	r1, #0
 800b840:	f002 fc6a 	bl	800e118 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b844:	2800      	cmp	r0, #0
 800b846:	d135      	bne.n	800b8b4 <HAL_SD_InitCard+0x110>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b848:	9b05      	ldr	r3, [sp, #20]
 800b84a:	f64f 77fe 	movw	r7, #65534	@ 0xfffe
 800b84e:	42bb      	cmp	r3, r7
 800b850:	f200 80d1 	bhi.w	800b9f6 <HAL_SD_InitCard+0x252>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b854:	f8df 8214 	ldr.w	r8, [pc, #532]	@ 800ba6c <HAL_SD_InitCard+0x2c8>
 800b858:	e011      	b.n	800b87e <HAL_SD_InitCard+0xda>
 800b85a:	6820      	ldr	r0, [r4, #0]
 800b85c:	f002 fd02 	bl	800e264 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b860:	4601      	mov	r1, r0
 800b862:	bb38      	cbnz	r0, 800b8b4 <HAL_SD_InitCard+0x110>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b864:	6820      	ldr	r0, [r4, #0]
 800b866:	f001 ff37 	bl	800d6d8 <SDMMC_GetResponse>
    count++;
 800b86a:	9a05      	ldr	r2, [sp, #20]
 800b86c:	3201      	adds	r2, #1
 800b86e:	9205      	str	r2, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b870:	9a05      	ldr	r2, [sp, #20]
 800b872:	42ba      	cmp	r2, r7
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b874:	4603      	mov	r3, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b876:	ea4f 71d0 	mov.w	r1, r0, lsr #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b87a:	d81e      	bhi.n	800b8ba <HAL_SD_InitCard+0x116>
 800b87c:	b9e9      	cbnz	r1, 800b8ba <HAL_SD_InitCard+0x116>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b87e:	2100      	movs	r1, #0
 800b880:	6820      	ldr	r0, [r4, #0]
 800b882:	f002 fc49 	bl	800e118 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b886:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 800b888:	4605      	mov	r5, r0
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d0e5      	beq.n	800b85a <HAL_SD_InitCard+0xb6>
    hsd->State = HAL_SD_STATE_READY;
 800b88e:	2301      	movs	r3, #1
 800b890:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b894:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b896:	432b      	orrs	r3, r5
 800b898:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800b89a:	e7aa      	b.n	800b7f2 <HAL_SD_InitCard+0x4e>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	f043 0310 	orr.w	r3, r3, #16
 800b8a2:	603b      	str	r3, [r7, #0]
 800b8a4:	e79a      	b.n	800b7dc <HAL_SD_InitCard+0x38>
      hsd->State = HAL_SD_STATE_READY;
 800b8a6:	2201      	movs	r2, #1
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b8a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
      hsd->State = HAL_SD_STATE_READY;
 800b8ac:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b8b0:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 800b8b2:	e79e      	b.n	800b7f2 <HAL_SD_InitCard+0x4e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800b8b8:	e7e9      	b.n	800b88e <HAL_SD_InitCard+0xea>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b8ba:	9905      	ldr	r1, [sp, #20]
 800b8bc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b8c0:	4291      	cmp	r1, r2
 800b8c2:	f200 80a2 	bhi.w	800ba0a <HAL_SD_InitCard+0x266>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b8c6:	005f      	lsls	r7, r3, #1
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b8c8:	6820      	ldr	r0, [r4, #0]
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b8ca:	f140 8098 	bpl.w	800b9fe <HAL_SD_InitCard+0x25a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	63e2      	str	r2, [r4, #60]	@ 0x3c
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b8d2:	69a2      	ldr	r2, [r4, #24]
 800b8d4:	2a01      	cmp	r2, #1
 800b8d6:	f000 809b 	beq.w	800ba10 <HAL_SD_InitCard+0x26c>
  uint16_t sd_rca = 1U;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b8e0:	f001 fef6 	bl	800d6d0 <SDMMC_GetPowerState>
 800b8e4:	b340      	cbz	r0, 800b938 <HAL_SD_InitCard+0x194>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b8e8:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d12d      	bne.n	800b94a <HAL_SD_InitCard+0x1a6>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b8ee:	2104      	movs	r1, #4
 800b8f0:	f001 fef2 	bl	800d6d8 <SDMMC_GetResponse>
 800b8f4:	0d00      	lsrs	r0, r0, #20
 800b8f6:	6460      	str	r0, [r4, #68]	@ 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b8f8:	a90d      	add	r1, sp, #52	@ 0x34
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff fe96 	bl	800b62c <HAL_SD_GetCardCSD>
 800b900:	4605      	mov	r5, r0
 800b902:	2800      	cmp	r0, #0
 800b904:	d17e      	bne.n	800ba04 <HAL_SD_InitCard+0x260>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b906:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b908:	6820      	ldr	r0, [r4, #0]
 800b90a:	0412      	lsls	r2, r2, #16
 800b90c:	462b      	mov	r3, r5
 800b90e:	f002 faef 	bl	800def0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b912:	b998      	cbnz	r0, 800b93c <HAL_SD_InitCard+0x198>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b914:	6820      	ldr	r0, [r4, #0]
 800b916:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b91a:	f001 fef7 	bl	800d70c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b91e:	2800      	cmp	r0, #0
 800b920:	f43f af68 	beq.w	800b7f4 <HAL_SD_InitCard+0x50>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	4a50      	ldr	r2, [pc, #320]	@ (800ba68 <HAL_SD_InitCard+0x2c4>)
 800b928:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b92a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b92c:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 800b92e:	4303      	orrs	r3, r0
 800b930:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b932:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b936:	e75c      	b.n	800b7f2 <HAL_SD_InitCard+0x4e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b938:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800b93c:	2301      	movs	r3, #1
 800b93e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b942:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b944:	4303      	orrs	r3, r0
 800b946:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800b948:	e753      	b.n	800b7f2 <HAL_SD_InitCard+0x4e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b94a:	f002 fe13 	bl	800e574 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b94e:	2800      	cmp	r0, #0
 800b950:	d1f4      	bne.n	800b93c <HAL_SD_InitCard+0x198>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b952:	4601      	mov	r1, r0
 800b954:	6820      	ldr	r0, [r4, #0]
 800b956:	f001 febf 	bl	800d6d8 <SDMMC_GetResponse>
 800b95a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b95c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b95e:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	f001 feb9 	bl	800d6d8 <SDMMC_GetResponse>
 800b966:	4603      	mov	r3, r0
 800b968:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b96a:	2108      	movs	r1, #8
 800b96c:	6820      	ldr	r0, [r4, #0]
 800b96e:	f001 feb3 	bl	800d6d8 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b972:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b974:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b976:	6820      	ldr	r0, [r4, #0]
 800b978:	f001 feae 	bl	800d6d8 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b97c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b97e:	67e0      	str	r0, [r4, #124]	@ 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b980:	2b03      	cmp	r3, #3
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b982:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b984:	d0b3      	beq.n	800b8ee <HAL_SD_InitCard+0x14a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b986:	f10d 0112 	add.w	r1, sp, #18
 800b98a:	f002 fe73 	bl	800e674 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b98e:	2800      	cmp	r0, #0
 800b990:	d1d4      	bne.n	800b93c <HAL_SD_InitCard+0x198>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b992:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b994:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b996:	2b03      	cmp	r3, #3
 800b998:	d0a9      	beq.n	800b8ee <HAL_SD_InitCard+0x14a>
    hsd->SdCard.RelCardAdd = sd_rca;
 800b99a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800b99e:	64a1      	str	r1, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9a0:	0409      	lsls	r1, r1, #16
 800b9a2:	f002 fe27 	bl	800e5f4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d1c8      	bne.n	800b93c <HAL_SD_InitCard+0x198>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	6820      	ldr	r0, [r4, #0]
 800b9ae:	f001 fe93 	bl	800d6d8 <SDMMC_GetResponse>
 800b9b2:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b9b4:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b9b6:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b9b8:	6820      	ldr	r0, [r4, #0]
 800b9ba:	f001 fe8d 	bl	800d6d8 <SDMMC_GetResponse>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b9c2:	2108      	movs	r1, #8
 800b9c4:	6820      	ldr	r0, [r4, #0]
 800b9c6:	f001 fe87 	bl	800d6d8 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b9ca:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b9cc:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b9ce:	6820      	ldr	r0, [r4, #0]
 800b9d0:	f001 fe82 	bl	800d6d8 <SDMMC_GetResponse>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800b9d8:	6820      	ldr	r0, [r4, #0]
 800b9da:	e788      	b.n	800b8ee <HAL_SD_InitCard+0x14a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b9dc:	6425      	str	r5, [r4, #64]	@ 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b9de:	6820      	ldr	r0, [r4, #0]
 800b9e0:	f002 fb2c 	bl	800e03c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f47f af51 	bne.w	800b88e <HAL_SD_InitCard+0xea>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b9ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	f47f af2a 	bne.w	800b848 <HAL_SD_InitCard+0xa4>
 800b9f4:	e722      	b.n	800b83c <HAL_SD_InitCard+0x98>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b9f6:	9b05      	ldr	r3, [sp, #20]
 800b9f8:	42bb      	cmp	r3, r7
 800b9fa:	d806      	bhi.n	800ba0a <HAL_SD_InitCard+0x266>
 800b9fc:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardType = CARD_SDSC;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba02:	e76a      	b.n	800b8da <HAL_SD_InitCard+0x136>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba04:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800ba08:	e798      	b.n	800b93c <HAL_SD_InitCard+0x198>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ba0a:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800ba0e:	e73e      	b.n	800b88e <HAL_SD_InitCard+0xea>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800ba10:	01dd      	lsls	r5, r3, #7
 800ba12:	f57f af62 	bpl.w	800b8da <HAL_SD_InitCard+0x136>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800ba16:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ba18:	f44f 7200 	mov.w	r2, #512	@ 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800ba1c:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ba20:	65e2      	str	r2, [r4, #92]	@ 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800ba22:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800ba24:	f002 ffcc 	bl	800e9c0 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba28:	4605      	mov	r5, r0
 800ba2a:	b128      	cbz	r0, 800ba38 <HAL_SD_InitCard+0x294>
 800ba2c:	e72f      	b.n	800b88e <HAL_SD_InitCard+0xea>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba2e:	f7fb fdef 	bl	8007610 <HAL_GetTick>
 800ba32:	1b83      	subs	r3, r0, r6
 800ba34:	3301      	adds	r3, #1
 800ba36:	d030      	beq.n	800ba9a <HAL_SD_InitCard+0x2f6>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba3c:	0150      	lsls	r0, r2, #5
 800ba3e:	d5f6      	bpl.n	800ba2e <HAL_SD_InitCard+0x28a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800ba40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800ba44:	639a      	str	r2, [r3, #56]	@ 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800ba46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba48:	02d9      	lsls	r1, r3, #11
 800ba4a:	f57f af33 	bpl.w	800b8b4 <HAL_SD_InitCard+0x110>
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800ba4e:	2001      	movs	r0, #1
 800ba50:	f000 fa50 	bl	800bef4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	6803      	ldr	r3, [r0, #0]
 800ba58:	f043 0304 	orr.w	r3, r3, #4
 800ba5c:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ba5e:	e00d      	b.n	800ba7c <HAL_SD_InitCard+0x2d8>
 800ba60:	014f8b59 	.word	0x014f8b59
 800ba64:	00012110 	.word	0x00012110
 800ba68:	1fe00fff 	.word	0x1fe00fff
 800ba6c:	c1100000 	.word	0xc1100000
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba70:	f7fb fdce 	bl	8007610 <HAL_GetTick>
 800ba74:	1b83      	subs	r3, r0, r6
 800ba76:	3301      	adds	r3, #1
 800ba78:	d00f      	beq.n	800ba9a <HAL_SD_InitCard+0x2f6>
 800ba7a:	6820      	ldr	r0, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ba7c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ba7e:	019a      	lsls	r2, r3, #6
 800ba80:	d5f6      	bpl.n	800ba70 <HAL_SD_InitCard+0x2cc>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800ba82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ba86:	6383      	str	r3, [r0, #56]	@ 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800ba88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ba8a:	02db      	lsls	r3, r3, #11
 800ba8c:	d4bd      	bmi.n	800ba0a <HAL_SD_InitCard+0x266>
          hsd->Instance->POWER = 0x13U;
 800ba8e:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ba90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
          hsd->Instance->POWER = 0x13U;
 800ba94:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ba96:	6383      	str	r3, [r0, #56]	@ 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba98:	e71f      	b.n	800b8da <HAL_SD_InitCard+0x136>
            return HAL_SD_ERROR_TIMEOUT;
 800ba9a:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 800ba9e:	e6f6      	b.n	800b88e <HAL_SD_InitCard+0xea>

0800baa0 <HAL_SD_GetCardStatus>:
{
 800baa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800baa4:	b097      	sub	sp, #92	@ 0x5c
 800baa6:	4604      	mov	r4, r0
 800baa8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800baaa:	f7fb fdb1 	bl	8007610 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800baae:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800bab0:	4607      	mov	r7, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bab2:	6820      	ldr	r0, [r4, #0]
 800bab4:	f001 fe10 	bl	800d6d8 <SDMMC_GetResponse>
 800bab8:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800babc:	6820      	ldr	r0, [r4, #0]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800babe:	d15a      	bne.n	800bb76 <HAL_SD_GetCardStatus+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bac0:	2140      	movs	r1, #64	@ 0x40
 800bac2:	f001 fe23 	bl	800d70c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bac6:	4603      	mov	r3, r0
 800bac8:	b1e0      	cbz	r0, 800bb04 <HAL_SD_GetCardStatus+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800baca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bacc:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bace:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bad0:	4a59      	ldr	r2, [pc, #356]	@ (800bc38 <HAL_SD_GetCardStatus+0x198>)
 800bad2:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bad4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bad6:	2101      	movs	r1, #1
    hsd->ErrorCode |= errorstate;
 800bad8:	4313      	orrs	r3, r2
 800bada:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800badc:	460e      	mov	r6, r1
    hsd->State = HAL_SD_STATE_READY;
 800bade:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bae2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bae6:	f001 fe11 	bl	800d70c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800baea:	b138      	cbz	r0, 800bafc <HAL_SD_GetCardStatus+0x5c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baec:	6822      	ldr	r2, [r4, #0]
 800baee:	4952      	ldr	r1, [pc, #328]	@ (800bc38 <HAL_SD_GetCardStatus+0x198>)
 800baf0:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800baf2:	2301      	movs	r3, #1
    hsd->ErrorCode = errorstate;
 800baf4:	63a0      	str	r0, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800baf6:	461e      	mov	r6, r3
    hsd->State = HAL_SD_STATE_READY;
 800baf8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800bafc:	4630      	mov	r0, r6
 800bafe:	b017      	add	sp, #92	@ 0x5c
 800bb00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb04:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bb06:	6820      	ldr	r0, [r4, #0]
 800bb08:	0409      	lsls	r1, r1, #16
 800bb0a:	f002 fb05 	bl	800e118 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d1da      	bne.n	800baca <HAL_SD_GetCardStatus+0x2a>
  config.DataLength    = 64U;
 800bb14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb18:	2340      	movs	r3, #64	@ 0x40
 800bb1a:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bb1e:	2260      	movs	r2, #96	@ 0x60
 800bb20:	2302      	movs	r3, #2
 800bb22:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb26:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	2200      	movs	r2, #0
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb2c:	6820      	ldr	r0, [r4, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb32:	f001 fdd5 	bl	800d6e0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bb36:	6820      	ldr	r0, [r4, #0]
 800bb38:	f002 fe9a 	bl	800e870 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d1c3      	bne.n	800baca <HAL_SD_GetCardStatus+0x2a>
  uint32_t *pData = pSDstatus;
 800bb42:	ae06      	add	r6, sp, #24
 800bb44:	e004      	b.n	800bb50 <HAL_SD_GetCardStatus+0xb0>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb46:	f7fb fd63 	bl	8007610 <HAL_GetTick>
 800bb4a:	1bc0      	subs	r0, r0, r7
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	d015      	beq.n	800bb7c <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bb50:	6820      	ldr	r0, [r4, #0]
 800bb52:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bb54:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bb58:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bb5a:	d113      	bne.n	800bb84 <HAL_SD_GetCardStatus+0xe4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bb5c:	041b      	lsls	r3, r3, #16
 800bb5e:	d5f2      	bpl.n	800bb46 <HAL_SD_GetCardStatus+0xa6>
 800bb60:	f106 0820 	add.w	r8, r6, #32
 800bb64:	e000      	b.n	800bb68 <HAL_SD_GetCardStatus+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bb66:	6820      	ldr	r0, [r4, #0]
 800bb68:	f001 fd9c 	bl	800d6a4 <SDMMC_ReadFIFO>
 800bb6c:	f846 0b04 	str.w	r0, [r6], #4
      for(count = 0U; count < 8U; count++)
 800bb70:	4546      	cmp	r6, r8
 800bb72:	d1f8      	bne.n	800bb66 <HAL_SD_GetCardStatus+0xc6>
 800bb74:	e7e7      	b.n	800bb46 <HAL_SD_GetCardStatus+0xa6>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb7a:	e7a9      	b.n	800bad0 <HAL_SD_GetCardStatus+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb7c:	6820      	ldr	r0, [r4, #0]
 800bb7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb82:	e7a5      	b.n	800bad0 <HAL_SD_GetCardStatus+0x30>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb84:	0719      	lsls	r1, r3, #28
 800bb86:	d450      	bmi.n	800bc2a <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bb8a:	079a      	lsls	r2, r3, #30
 800bb8c:	d44f      	bmi.n	800bc2e <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bb8e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bb90:	069b      	lsls	r3, r3, #26
 800bb92:	d50a      	bpl.n	800bbaa <HAL_SD_GetCardStatus+0x10a>
 800bb94:	e04d      	b.n	800bc32 <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bb96:	f001 fd85 	bl	800d6a4 <SDMMC_ReadFIFO>
 800bb9a:	f846 0b04 	str.w	r0, [r6], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb9e:	f7fb fd37 	bl	8007610 <HAL_GetTick>
 800bba2:	1bc0      	subs	r0, r0, r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	d0e9      	beq.n	800bb7c <HAL_SD_GetCardStatus+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bba8:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bbaa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bbac:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800bbb0:	d1f1      	bne.n	800bb96 <HAL_SD_GetCardStatus+0xf6>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bbb2:	9906      	ldr	r1, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bbb4:	4a21      	ldr	r2, [pc, #132]	@ (800bc3c <HAL_SD_GetCardStatus+0x19c>)
 800bbb6:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bbb8:	0a0a      	lsrs	r2, r1, #8
  HAL_StatusTypeDef status = HAL_OK;
 800bbba:	461e      	mov	r6, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bbbc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bbc0:	e9dd c308 	ldrd	ip, r3, [sp, #32]
 800bbc4:	9f07      	ldr	r7, [sp, #28]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bbc6:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 800bbca:	b292      	uxth	r2, r2
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bbcc:	f3c1 1981 	ubfx	r9, r1, #6, #2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bbd0:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bbd4:	f885 9000 	strb.w	r9, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bbd8:	fa97 f887 	rev.w	r8, r7
 800bbdc:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bbde:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bbe0:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bbe4:	f8c5 8004 	str.w	r8, [r5, #4]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bbe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bbec:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800bbee:	f3cc 2207 	ubfx	r2, ip, #8, #8
 800bbf2:	726a      	strb	r2, [r5, #9]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bbf4:	fa5f fe83 	uxtb.w	lr, r3
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800bbf8:	f3cc 5203 	ubfx	r2, ip, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bbfc:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800bc00:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bc02:	ea47 070e 	orr.w	r7, r7, lr
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800bc06:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bc0a:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800bc0c:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800bc0e:	f3c3 2201 	ubfx	r2, r3, #8, #2
 800bc12:	73ea      	strb	r2, [r5, #15]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800bc14:	f89d e02b 	ldrb.w	lr, [sp, #43]	@ 0x2b
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800bc18:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800bc1c:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800bc20:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800bc22:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800bc24:	f885 e012 	strb.w	lr, [r5, #18]
 800bc28:	e75b      	b.n	800bae2 <HAL_SD_GetCardStatus+0x42>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bc2a:	2308      	movs	r3, #8
 800bc2c:	e750      	b.n	800bad0 <HAL_SD_GetCardStatus+0x30>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc2e:	2302      	movs	r3, #2
 800bc30:	e74e      	b.n	800bad0 <HAL_SD_GetCardStatus+0x30>
    return HAL_SD_ERROR_RX_OVERRUN;
 800bc32:	2320      	movs	r3, #32
 800bc34:	e74c      	b.n	800bad0 <HAL_SD_GetCardStatus+0x30>
 800bc36:	bf00      	nop
 800bc38:	1fe00fff 	.word	0x1fe00fff
 800bc3c:	18000f3a 	.word	0x18000f3a

0800bc40 <HAL_SD_GetCardInfo>:
{
 800bc40:	b4f0      	push	{r4, r5, r6, r7}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bc42:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	@ 0x3c
 800bc46:	e9d0 6511 	ldrd	r6, r5, [r0, #68]	@ 0x44
 800bc4a:	e9d0 4213 	ldrd	r4, r2, [r0, #76]	@ 0x4c
 800bc4e:	e9d0 3015 	ldrd	r3, r0, [r0, #84]	@ 0x54
 800bc52:	e9c1 c700 	strd	ip, r7, [r1]
 800bc56:	e9c1 6502 	strd	r6, r5, [r1, #8]
 800bc5a:	e9c1 4204 	strd	r4, r2, [r1, #16]
 800bc5e:	61c8      	str	r0, [r1, #28]
}
 800bc60:	bcf0      	pop	{r4, r5, r6, r7}
 800bc62:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bc64:	618b      	str	r3, [r1, #24]
}
 800bc66:	4770      	bx	lr

0800bc68 <HAL_SD_ConfigWideBusOperation>:
{
 800bc68:	b530      	push	{r4, r5, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc6a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 800bc6c:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc6e:	4293      	cmp	r3, r2
{
 800bc70:	b08b      	sub	sp, #44	@ 0x2c
 800bc72:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 800bc74:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
{
 800bc78:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc7a:	d044      	beq.n	800bd06 <HAL_SD_ConfigWideBusOperation+0x9e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800bc7c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800bc80:	d041      	beq.n	800bd06 <HAL_SD_ConfigWideBusOperation+0x9e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bc82:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800bc86:	f000 8081 	beq.w	800bd8c <HAL_SD_ConfigWideBusOperation+0x124>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bc8a:	2900      	cmp	r1, #0
 800bc8c:	d05f      	beq.n	800bd4e <HAL_SD_ConfigWideBusOperation+0xe6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bc8e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bc90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc94:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bc96:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d13b      	bne.n	800bd14 <HAL_SD_ConfigWideBusOperation+0xac>
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800bc9c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bca0:	f7fe ff28 	bl	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d04b      	beq.n	800bd40 <HAL_SD_ConfigWideBusOperation+0xd8>
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bca8:	4b52      	ldr	r3, [pc, #328]	@ (800bdf4 <HAL_SD_ConfigWideBusOperation+0x18c>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800bcaa:	6861      	ldr	r1, [r4, #4]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bcac:	6962      	ldr	r2, [r4, #20]
      Init.BusWide             = WideMode;
 800bcae:	9506      	str	r5, [sp, #24]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800bcb0:	9104      	str	r1, [sp, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bcb2:	fba3 5300 	umull	r5, r3, r3, r0
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bcb6:	6921      	ldr	r1, [r4, #16]
 800bcb8:	9107      	str	r1, [sp, #28]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bcba:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bcbe:	68a1      	ldr	r1, [r4, #8]
 800bcc0:	9105      	str	r1, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bcc2:	ea4f 6513 	mov.w	r5, r3, lsr #24
 800bcc6:	d20e      	bcs.n	800bce6 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800bcc8:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800bcca:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bcce:	d00a      	beq.n	800bce6 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800bcd0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800bcd4:	d07c      	beq.n	800bdd0 <HAL_SD_ConfigWideBusOperation+0x168>
        if (hsd->Init.ClockDiv == 0U)
 800bcd6:	b112      	cbz	r2, 800bcde <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800bcd8:	0053      	lsls	r3, r2, #1
 800bcda:	fbb0 f0f3 	udiv	r0, r0, r3
 800bcde:	4b46      	ldr	r3, [pc, #280]	@ (800bdf8 <HAL_SD_ConfigWideBusOperation+0x190>)
 800bce0:	4298      	cmp	r0, r3
 800bce2:	bf88      	it	hi
 800bce4:	462a      	movhi	r2, r5
      Init.Transceiver = hsd->Init.Transceiver;
 800bce6:	69a3      	ldr	r3, [r4, #24]
 800bce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
      (void)SDMMC_Init(hsd->Instance, Init);
 800bcec:	ab0a      	add	r3, sp, #40	@ 0x28
 800bcee:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800bcf2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bcf6:	ab04      	add	r3, sp, #16
 800bcf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bcfa:	6820      	ldr	r0, [r4, #0]
 800bcfc:	f001 fcb6 	bl	800d66c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800bd00:	2500      	movs	r5, #0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bd02:	6820      	ldr	r0, [r4, #0]
 800bd04:	e00a      	b.n	800bd1c <HAL_SD_ConfigWideBusOperation+0xb4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd06:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bd08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd0c:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bd0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d0c3      	beq.n	800bc9c <HAL_SD_ConfigWideBusOperation+0x34>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	4b39      	ldr	r3, [pc, #228]	@ (800bdfc <HAL_SD_ConfigWideBusOperation+0x194>)
 800bd18:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800bd1a:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bd1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd20:	f001 fcf4 	bl	800d70c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd24:	b130      	cbz	r0, 800bd34 <HAL_SD_ConfigWideBusOperation+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	4a34      	ldr	r2, [pc, #208]	@ (800bdfc <HAL_SD_ConfigWideBusOperation+0x194>)
 800bd2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bd2c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bd2e:	4303      	orrs	r3, r0
    status = HAL_ERROR;
 800bd30:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 800bd32:	63a3      	str	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 800bd34:	2301      	movs	r3, #1
}
 800bd36:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800bd38:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800bd3c:	b00b      	add	sp, #44	@ 0x2c
 800bd3e:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800bd40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      (void)SDMMC_Init(hsd->Instance, Init);
 800bd42:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800bd44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd48:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800bd4a:	2501      	movs	r5, #1
 800bd4c:	e7e6      	b.n	800bd1c <HAL_SD_ConfigWideBusOperation+0xb4>
  uint32_t scr[2U] = {0UL, 0UL};
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd52:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800bd54:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd58:	f001 fcbe 	bl	800d6d8 <SDMMC_GetResponse>
 800bd5c:	0182      	lsls	r2, r0, #6
 800bd5e:	d434      	bmi.n	800bdca <HAL_SD_ConfigWideBusOperation+0x162>
  errorstate = SD_FindSCR(hsd, scr);
 800bd60:	a904      	add	r1, sp, #16
 800bd62:	4620      	mov	r0, r4
 800bd64:	f7ff f9d6 	bl	800b114 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd68:	b960      	cbnz	r0, 800bd84 <HAL_SD_ConfigWideBusOperation+0x11c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bd6a:	9b05      	ldr	r3, [sp, #20]
 800bd6c:	03db      	lsls	r3, r3, #15
 800bd6e:	d535      	bpl.n	800bddc <HAL_SD_ConfigWideBusOperation+0x174>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd70:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bd72:	6820      	ldr	r0, [r4, #0]
 800bd74:	0409      	lsls	r1, r1, #16
 800bd76:	f002 f9cf 	bl	800e118 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd7a:	b918      	cbnz	r0, 800bd84 <HAL_SD_ConfigWideBusOperation+0x11c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bd7c:	4601      	mov	r1, r0
 800bd7e:	6820      	ldr	r0, [r4, #0]
 800bd80:	f002 faaa 	bl	800e2d8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800bd84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bd86:	4303      	orrs	r3, r0
 800bd88:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bd8a:	e7c0      	b.n	800bd0e <HAL_SD_ConfigWideBusOperation+0xa6>
  uint32_t scr[2U] = {0UL, 0UL};
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd90:	6800      	ldr	r0, [r0, #0]
 800bd92:	2100      	movs	r1, #0
  uint32_t scr[2U] = {0UL, 0UL};
 800bd94:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd98:	f001 fc9e 	bl	800d6d8 <SDMMC_GetResponse>
 800bd9c:	0180      	lsls	r0, r0, #6
 800bd9e:	d414      	bmi.n	800bdca <HAL_SD_ConfigWideBusOperation+0x162>
  errorstate = SD_FindSCR(hsd, scr);
 800bda0:	a904      	add	r1, sp, #16
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7ff f9b6 	bl	800b114 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d1eb      	bne.n	800bd84 <HAL_SD_ConfigWideBusOperation+0x11c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bdac:	9b05      	ldr	r3, [sp, #20]
 800bdae:	0359      	lsls	r1, r3, #13
 800bdb0:	d514      	bpl.n	800bddc <HAL_SD_ConfigWideBusOperation+0x174>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bdb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bdb4:	6820      	ldr	r0, [r4, #0]
 800bdb6:	0409      	lsls	r1, r1, #16
 800bdb8:	f002 f9ae 	bl	800e118 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d1e1      	bne.n	800bd84 <HAL_SD_ConfigWideBusOperation+0x11c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bdc0:	6820      	ldr	r0, [r4, #0]
 800bdc2:	2102      	movs	r1, #2
 800bdc4:	f002 fa88 	bl	800e2d8 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdc8:	e7dc      	b.n	800bd84 <HAL_SD_ConfigWideBusOperation+0x11c>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bdca:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bdce:	e7d9      	b.n	800bd84 <HAL_SD_ConfigWideBusOperation+0x11c>
        if (hsd->Init.ClockDiv == 0U)
 800bdd0:	b93a      	cbnz	r2, 800bde2 <HAL_SD_ConfigWideBusOperation+0x17a>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800bdd2:	490b      	ldr	r1, [pc, #44]	@ (800be00 <HAL_SD_ConfigWideBusOperation+0x198>)
 800bdd4:	4288      	cmp	r0, r1
 800bdd6:	d986      	bls.n	800bce6 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800bdd8:	0e5a      	lsrs	r2, r3, #25
 800bdda:	e784      	b.n	800bce6 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bddc:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800bde0:	e7d0      	b.n	800bd84 <HAL_SD_ConfigWideBusOperation+0x11c>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800bde2:	0051      	lsls	r1, r2, #1
 800bde4:	fbb0 f1f1 	udiv	r1, r0, r1
 800bde8:	4805      	ldr	r0, [pc, #20]	@ (800be00 <HAL_SD_ConfigWideBusOperation+0x198>)
 800bdea:	4281      	cmp	r1, r0
 800bdec:	f67f af7b 	bls.w	800bce6 <HAL_SD_ConfigWideBusOperation+0x7e>
 800bdf0:	e7f2      	b.n	800bdd8 <HAL_SD_ConfigWideBusOperation+0x170>
 800bdf2:	bf00      	nop
 800bdf4:	55e63b89 	.word	0x55e63b89
 800bdf8:	017d7840 	.word	0x017d7840
 800bdfc:	1fe00fff 	.word	0x1fe00fff
 800be00:	02faf080 	.word	0x02faf080

0800be04 <HAL_SD_Init>:
{
 800be04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be06:	b087      	sub	sp, #28
  if(hsd == NULL)
 800be08:	b168      	cbz	r0, 800be26 <HAL_SD_Init+0x22>
  if(hsd->State == HAL_SD_STATE_RESET)
 800be0a:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800be0e:	4604      	mov	r4, r0
 800be10:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800be14:	2b00      	cmp	r3, #0
 800be16:	d043      	beq.n	800bea0 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_BUSY;
 800be18:	2303      	movs	r3, #3
 800be1a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be1e:	4620      	mov	r0, r4
 800be20:	f7ff fcc0 	bl	800b7a4 <HAL_SD_InitCard>
 800be24:	b118      	cbz	r0, 800be2e <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 800be26:	2601      	movs	r6, #1
}
 800be28:	4630      	mov	r0, r6
 800be2a:	b007      	add	sp, #28
 800be2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800be2e:	a901      	add	r1, sp, #4
 800be30:	4620      	mov	r0, r4
 800be32:	f7ff fe35 	bl	800baa0 <HAL_SD_GetCardStatus>
 800be36:	2800      	cmp	r0, #0
 800be38:	d1f5      	bne.n	800be26 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be3a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800be3c:	f89d 3014 	ldrb.w	r3, [sp, #20]
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be40:	f89d 2015 	ldrb.w	r2, [sp, #21]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be44:	2901      	cmp	r1, #1
  speedgrade = CardStatus.UhsSpeedGrade;
 800be46:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be48:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be4a:	d037      	beq.n	800bebc <HAL_SD_Init+0xb8>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800be4c:	65e0      	str	r0, [r4, #92]	@ 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800be4e:	68e1      	ldr	r1, [r4, #12]
 800be50:	4620      	mov	r0, r4
 800be52:	f7ff ff09 	bl	800bc68 <HAL_SD_ConfigWideBusOperation>
 800be56:	4606      	mov	r6, r0
 800be58:	2800      	cmp	r0, #0
 800be5a:	d1e4      	bne.n	800be26 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 800be5c:	f7fb fbd8 	bl	8007610 <HAL_GetTick>
 800be60:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800be62:	e007      	b.n	800be74 <HAL_SD_Init+0x70>
    hsd->ErrorCode |= errorstate;
 800be64:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800be66:	4303      	orrs	r3, r0
 800be68:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800be6a:	f7fb fbd1 	bl	8007610 <HAL_GetTick>
 800be6e:	1bc3      	subs	r3, r0, r7
 800be70:	3301      	adds	r3, #1
 800be72:	d019      	beq.n	800bea8 <HAL_SD_Init+0xa4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be74:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800be76:	6820      	ldr	r0, [r4, #0]
 800be78:	0409      	lsls	r1, r1, #16
 800be7a:	f002 fc53 	bl	800e724 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800be7e:	4605      	mov	r5, r0
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800be80:	4601      	mov	r1, r0
  if(errorstate != HAL_SD_ERROR_NONE)
 800be82:	2800      	cmp	r0, #0
 800be84:	d1ee      	bne.n	800be64 <HAL_SD_Init+0x60>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800be86:	6820      	ldr	r0, [r4, #0]
 800be88:	f001 fc26 	bl	800d6d8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800be8c:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800be90:	2804      	cmp	r0, #4
 800be92:	d1ea      	bne.n	800be6a <HAL_SD_Init+0x66>
  hsd->State = HAL_SD_STATE_READY;
 800be94:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be96:	63a5      	str	r5, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800be98:	6325      	str	r5, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800be9a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  return HAL_OK;
 800be9e:	e7c3      	b.n	800be28 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 800bea0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800bea2:	f7ff f9a5 	bl	800b1f0 <HAL_SD_MspInit>
 800bea6:	e7b7      	b.n	800be18 <HAL_SD_Init+0x14>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bea8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 800beac:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800beae:	2300      	movs	r3, #0
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800beb0:	63a1      	str	r1, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800beb2:	2603      	movs	r6, #3
      hsd->State= HAL_SD_STATE_READY;
 800beb4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800beb8:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 800beba:	e7b5      	b.n	800be28 <HAL_SD_Init+0x24>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bebc:	4313      	orrs	r3, r2
 800bebe:	bf14      	ite	ne
 800bec0:	f44f 7000 	movne.w	r0, #512	@ 0x200
 800bec4:	f44f 7080 	moveq.w	r0, #256	@ 0x100
 800bec8:	e7c0      	b.n	800be4c <HAL_SD_Init+0x48>
 800beca:	bf00      	nop

0800becc <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800becc:	6c81      	ldr	r1, [r0, #72]	@ 0x48
{
 800bece:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bed0:	0409      	lsls	r1, r1, #16
{
 800bed2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bed4:	6800      	ldr	r0, [r0, #0]
 800bed6:	f002 fc25 	bl	800e724 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800beda:	4601      	mov	r1, r0
 800bedc:	b120      	cbz	r0, 800bee8 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800bede:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bee0:	430b      	orrs	r3, r1
 800bee2:	2000      	movs	r0, #0
 800bee4:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800bee6:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bee8:	6820      	ldr	r0, [r4, #0]
 800beea:	f001 fbf5 	bl	800d6d8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800beee:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800bef2:	bd10      	pop	{r4, pc}

0800bef4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop

0800bef8 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop

0800befc <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
/**
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop

0800bf00 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
/**
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop

0800bf04 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
/**
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop

0800bf08 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800bf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	460d      	mov	r5, r1
 800bf0e:	4616      	mov	r6, r2
 800bf10:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bf12:	f7fb fb7d 	bl	8007610 <HAL_GetTick>
 800bf16:	442e      	add	r6, r5
 800bf18:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 800bf1a:	f7fb fb79 	bl	8007610 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bf1e:	4b2f      	ldr	r3, [pc, #188]	@ (800bfdc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)

  while ((hspi->Instance->SR & Fifo) != State)
 800bf20:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bf28:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bf2c:	0d1b      	lsrs	r3, r3, #20
 800bf2e:	fb06 f303 	mul.w	r3, r6, r3
 800bf32:	3501      	adds	r5, #1
 800bf34:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800bf36:	bf18      	it	ne
 800bf38:	4607      	movne	r7, r0
 800bf3a:	d120      	bne.n	800bf7e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x76>
 800bf3c:	6893      	ldr	r3, [r2, #8]
 800bf3e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bf42:	d007      	beq.n	800bf54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bf44:	7b13      	ldrb	r3, [r2, #12]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800bf4a:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bf4c:	6893      	ldr	r3, [r2, #8]
 800bf4e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bf52:	d1f7      	bne.n	800bf44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3c>
      }      
      count--;
    }
  }

  return HAL_OK;
 800bf54:	2000      	movs	r0, #0
}
 800bf56:	b003      	add	sp, #12
 800bf58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bf5a:	7b13      	ldrb	r3, [r2, #12]
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 800bf60:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bf62:	f7fb fb55 	bl	8007610 <HAL_GetTick>
 800bf66:	1bc0      	subs	r0, r0, r7
 800bf68:	42b0      	cmp	r0, r6
 800bf6a:	d20d      	bcs.n	800bf88 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x80>
      if(count == 0U)
 800bf6c:	9a01      	ldr	r2, [sp, #4]
      count--;
 800bf6e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800bf70:	2a00      	cmp	r2, #0
      count--;
 800bf72:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  while ((hspi->Instance->SR & Fifo) != State)
 800bf76:	6822      	ldr	r2, [r4, #0]
      count--;
 800bf78:	9301      	str	r3, [sp, #4]
        tmp_timeout = 0U;
 800bf7a:	bf08      	it	eq
 800bf7c:	2600      	moveq	r6, #0
  while ((hspi->Instance->SR & Fifo) != State)
 800bf7e:	6893      	ldr	r3, [r2, #8]
 800bf80:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bf84:	d1e9      	bne.n	800bf5a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x52>
 800bf86:	e7e5      	b.n	800bf54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf88:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf8c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf8e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bf96:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf98:	d013      	beq.n	800bfc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf9a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bf9c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800bfa0:	d107      	bne.n	800bfb2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bfb0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800bfb2:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800bfb4:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800bfb6:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800bfba:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800bfbe:	2003      	movs	r0, #3
 800bfc0:	e7c9      	b.n	800bf56 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfc2:	68a2      	ldr	r2, [r4, #8]
 800bfc4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800bfc8:	d002      	beq.n	800bfd0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bfca:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800bfce:	d1e4      	bne.n	800bf9a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	e7df      	b.n	800bf9a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 800bfda:	bf00      	nop
 800bfdc:	200001e0 	.word	0x200001e0

0800bfe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	b083      	sub	sp, #12
 800bfe6:	460e      	mov	r6, r1
 800bfe8:	eb01 0902 	add.w	r9, r1, r2
 800bfec:	4617      	mov	r7, r2
 800bfee:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bff0:	f7fb fb0e 	bl	8007610 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bff4:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 800c11c <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bff8:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 800bffc:	f7fb fb08 	bl	8007610 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c000:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 800c004:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c006:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c00a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c00e:	0d1b      	lsrs	r3, r3, #20
 800c010:	fb0a f303 	mul.w	r3, sl, r3
 800c014:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800c016:	1c73      	adds	r3, r6, #1
 800c018:	bf18      	it	ne
 800c01a:	4683      	movne	fp, r0
 800c01c:	d130      	bne.n	800c080 <SPI_EndRxTxTransaction+0xa0>
 800c01e:	68a3      	ldr	r3, [r4, #8]
 800c020:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800c024:	d1fb      	bne.n	800c01e <SPI_EndRxTxTransaction+0x3e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c026:	f7fb faf3 	bl	8007610 <HAL_GetTick>
 800c02a:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 800c02e:	f7fb faef 	bl	8007610 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c032:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c036:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c038:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800c03c:	fb09 f303 	mul.w	r3, r9, r3
 800c040:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 800c042:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c044:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c046:	d130      	bne.n	800c0aa <SPI_EndRxTxTransaction+0xca>
 800c048:	68a3      	ldr	r3, [r4, #8]
 800c04a:	061a      	lsls	r2, r3, #24
 800c04c:	d4fc      	bmi.n	800c048 <SPI_EndRxTxTransaction+0x68>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c04e:	463a      	mov	r2, r7
 800c050:	4631      	mov	r1, r6
 800c052:	4628      	mov	r0, r5
 800c054:	f7ff ff58 	bl	800bf08 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c058:	bb58      	cbnz	r0, 800c0b2 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800c05a:	b003      	add	sp, #12
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c060:	f7fb fad6 	bl	8007610 <HAL_GetTick>
 800c064:	eba0 000b 	sub.w	r0, r0, fp
 800c068:	4550      	cmp	r0, sl
 800c06a:	d22a      	bcs.n	800c0c2 <SPI_EndRxTxTransaction+0xe2>
      if(count == 0U)
 800c06c:	9a00      	ldr	r2, [sp, #0]
      count--;
 800c06e:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800c070:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800c072:	2a00      	cmp	r2, #0
      count--;
 800c074:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
        tmp_timeout = 0U;
 800c078:	bf08      	it	eq
 800c07a:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800c07e:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800c080:	68a3      	ldr	r3, [r4, #8]
 800c082:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800c086:	d1eb      	bne.n	800c060 <SPI_EndRxTxTransaction+0x80>
 800c088:	e7cd      	b.n	800c026 <SPI_EndRxTxTransaction+0x46>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c08a:	f7fb fac1 	bl	8007610 <HAL_GetTick>
 800c08e:	eba0 0008 	sub.w	r0, r0, r8
 800c092:	4581      	cmp	r9, r0
 800c094:	d915      	bls.n	800c0c2 <SPI_EndRxTxTransaction+0xe2>
      if(count == 0U)
 800c096:	9a01      	ldr	r2, [sp, #4]
      count--;
 800c098:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c09a:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800c09c:	2a00      	cmp	r2, #0
      count--;
 800c09e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
        tmp_timeout = 0U;
 800c0a2:	bf08      	it	eq
 800c0a4:	f04f 0900 	moveq.w	r9, #0
      count--;
 800c0a8:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c0aa:	68a3      	ldr	r3, [r4, #8]
 800c0ac:	061b      	lsls	r3, r3, #24
 800c0ae:	d4ec      	bmi.n	800c08a <SPI_EndRxTxTransaction+0xaa>
 800c0b0:	e7cd      	b.n	800c04e <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0b2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800c0b4:	f043 0320 	orr.w	r3, r3, #32
 800c0b8:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c0ba:	2003      	movs	r0, #3
}
 800c0bc:	b003      	add	sp, #12
 800c0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0c2:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c0c6:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0c8:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c0cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c0d0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0d2:	d016      	beq.n	800c102 <SPI_EndRxTxTransaction+0x122>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c0d4:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800c0d6:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800c0da:	d107      	bne.n	800c0ec <SPI_EndRxTxTransaction+0x10c>
          SPI_RESET_CRC(hspi);
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c0e2:	601a      	str	r2, [r3, #0]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c0ea:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0f2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800c0f4:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0f6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800c0fa:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0fe:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c100:	e7db      	b.n	800c0ba <SPI_EndRxTxTransaction+0xda>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c102:	68aa      	ldr	r2, [r5, #8]
 800c104:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800c108:	d002      	beq.n	800c110 <SPI_EndRxTxTransaction+0x130>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c10a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c10e:	d1e1      	bne.n	800c0d4 <SPI_EndRxTxTransaction+0xf4>
          __HAL_SPI_DISABLE(hspi);
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	e7dc      	b.n	800c0d4 <SPI_EndRxTxTransaction+0xf4>
 800c11a:	bf00      	nop
 800c11c:	200001e0 	.word	0x200001e0

0800c120 <HAL_SPI_MspInit>:
}
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop

0800c124 <HAL_SPI_Init>:
  if (hspi == NULL)
 800c124:	2800      	cmp	r0, #0
 800c126:	d074      	beq.n	800c212 <HAL_SPI_Init+0xee>
{
 800c128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c12c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c12e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800c130:	2800      	cmp	r0, #0
 800c132:	d053      	beq.n	800c1dc <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c134:	2300      	movs	r3, #0
 800c136:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c13a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c13e:	2200      	movs	r2, #0
 800c140:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c142:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c146:	2b00      	cmp	r3, #0
 800c148:	d057      	beq.n	800c1fa <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 800c14a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c14c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800c14e:	2302      	movs	r3, #2
 800c150:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800c154:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c156:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800c15a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c15e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c160:	d842      	bhi.n	800c1e8 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c162:	d151      	bne.n	800c208 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c164:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c166:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c16a:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800c16e:	6862      	ldr	r2, [r4, #4]
 800c170:	68a3      	ldr	r3, [r4, #8]
 800c172:	69a6      	ldr	r6, [r4, #24]
 800c174:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c178:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 800c17c:	431a      	orrs	r2, r3
 800c17e:	6923      	ldr	r3, [r4, #16]
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	4313      	orrs	r3, r2
 800c186:	6962      	ldr	r2, [r4, #20]
 800c188:	f002 0201 	and.w	r2, r2, #1
 800c18c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c18e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c190:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 800c194:	f003 0308 	and.w	r3, r3, #8
 800c198:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c19c:	69e3      	ldr	r3, [r4, #28]
 800c19e:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 800c1a2:	6a23      	ldr	r3, [r4, #32]
 800c1a4:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 800c1a8:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	ea43 0308 	orr.w	r3, r3, r8
 800c1b2:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c1b4:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c1b6:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c1b8:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c1bc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c1be:	f000 0010 	and.w	r0, r0, #16
 800c1c2:	ea4e 0306 	orr.w	r3, lr, r6
 800c1c6:	4303      	orrs	r3, r0
 800c1c8:	ea43 030c 	orr.w	r3, r3, ip
 800c1cc:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1ce:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800c1d0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1d2:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c1d4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800c1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1dc:	6863      	ldr	r3, [r4, #4]
 800c1de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c1e2:	d0aa      	beq.n	800c13a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c1e4:	61e0      	str	r0, [r4, #28]
 800c1e6:	e7a8      	b.n	800c13a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c1e8:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 800c1ec:	d113      	bne.n	800c216 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c1ee:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c1f0:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c1f4:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800c1f8:	e7b9      	b.n	800c16e <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 800c1fa:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800c1fc:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800c200:	f7ff ff8e 	bl	800c120 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c204:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c206:	e7a0      	b.n	800c14a <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c208:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c20c:	2500      	movs	r5, #0
 800c20e:	62a5      	str	r5, [r4, #40]	@ 0x28
 800c210:	e7ad      	b.n	800c16e <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 800c212:	2001      	movs	r0, #1
}
 800c214:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c216:	f04f 0c00 	mov.w	ip, #0
 800c21a:	e7f7      	b.n	800c20c <HAL_SPI_Init+0xe8>

0800c21c <HAL_SPI_MspDeInit>:
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop

0800c220 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800c220:	b190      	cbz	r0, 800c248 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800c222:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800c224:	2302      	movs	r3, #2
{
 800c226:	b510      	push	{r4, lr}
  hspi->State = HAL_SPI_STATE_BUSY;
 800c228:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800c22c:	6813      	ldr	r3, [r2, #0]
 800c22e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c232:	4604      	mov	r4, r0
 800c234:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800c236:	f7ff fff1 	bl	800c21c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c23a:	2000      	movs	r0, #0
 800c23c:	6620      	str	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 800c23e:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800c242:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
}
 800c246:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c248:	2001      	movs	r0, #1
}
 800c24a:	4770      	bx	lr

0800c24c <HAL_SPI_Transmit>:
{
 800c24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c250:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800c252:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 800c256:	2801      	cmp	r0, #1
{
 800c258:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800c25a:	d075      	beq.n	800c348 <HAL_SPI_Transmit+0xfc>
 800c25c:	461d      	mov	r5, r3
 800c25e:	2301      	movs	r3, #1
 800c260:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800c264:	4688      	mov	r8, r1
 800c266:	4617      	mov	r7, r2
 800c268:	f7fb f9d2 	bl	8007610 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800c26c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800c270:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800c272:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800c274:	b2d8      	uxtb	r0, r3
 800c276:	d009      	beq.n	800c28c <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800c278:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c27a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c27c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c27e:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800c282:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800c286:	b002      	add	sp, #8
 800c288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800c28c:	f1b8 0f00 	cmp.w	r8, #0
 800c290:	d0f3      	beq.n	800c27a <HAL_SPI_Transmit+0x2e>
 800c292:	2f00      	cmp	r7, #0
 800c294:	d0f1      	beq.n	800c27a <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c296:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800c298:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c29a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c29e:	2200      	movs	r2, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2a0:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2a2:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2a6:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 800c2aa:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2ae:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 800c2b0:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c2b2:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c2b4:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c2b6:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c2ba:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 800c2be:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2c0:	d06a      	beq.n	800c398 <HAL_SPI_Transmit+0x14c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	0652      	lsls	r2, r2, #25
 800c2c6:	d403      	bmi.n	800c2d0 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2ce:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c2d0:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2d2:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c2d4:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800c2d8:	d93a      	bls.n	800c350 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2da:	2900      	cmp	r1, #0
 800c2dc:	f000 8099 	beq.w	800c412 <HAL_SPI_Transmit+0x1c6>
 800c2e0:	2f01      	cmp	r7, #1
 800c2e2:	f000 8096 	beq.w	800c412 <HAL_SPI_Transmit+0x1c6>
    while (hspi->TxXferCount > 0U)
 800c2e6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800c2e8:	b292      	uxth	r2, r2
 800c2ea:	b1ba      	cbz	r2, 800c31c <HAL_SPI_Transmit+0xd0>
 800c2ec:	1c6a      	adds	r2, r5, #1
 800c2ee:	f040 8087 	bne.w	800c400 <HAL_SPI_Transmit+0x1b4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	0797      	lsls	r7, r2, #30
 800c2f6:	f140 80a4 	bpl.w	800c442 <HAL_SPI_Transmit+0x1f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c2fc:	f832 1b02 	ldrh.w	r1, [r2], #2
 800c300:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800c302:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c306:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c308:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c30c:	fa1f fc8c 	uxth.w	ip, ip
 800c310:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800c314:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800c316:	b292      	uxth	r2, r2
 800c318:	2a00      	cmp	r2, #0
 800c31a:	d1ea      	bne.n	800c2f2 <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c31c:	4632      	mov	r2, r6
 800c31e:	4629      	mov	r1, r5
 800c320:	4620      	mov	r0, r4
 800c322:	f7ff fe5d 	bl	800bfe0 <SPI_EndRxTxTransaction>
 800c326:	b108      	cbz	r0, 800c32c <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c328:	2320      	movs	r3, #32
 800c32a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c32c:	68a3      	ldr	r3, [r4, #8]
 800c32e:	b933      	cbnz	r3, 800c33e <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c330:	6822      	ldr	r2, [r4, #0]
 800c332:	9301      	str	r3, [sp, #4]
 800c334:	68d3      	ldr	r3, [r2, #12]
 800c336:	9301      	str	r3, [sp, #4]
 800c338:	6893      	ldr	r3, [r2, #8]
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c33e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800c340:	3800      	subs	r0, #0
 800c342:	bf18      	it	ne
 800c344:	2001      	movne	r0, #1
error:
 800c346:	e798      	b.n	800c27a <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800c348:	2002      	movs	r0, #2
}
 800c34a:	b002      	add	sp, #8
 800c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c350:	2900      	cmp	r1, #0
 800c352:	d068      	beq.n	800c426 <HAL_SPI_Transmit+0x1da>
 800c354:	2f01      	cmp	r7, #1
 800c356:	d066      	beq.n	800c426 <HAL_SPI_Transmit+0x1da>
    while (hspi->TxXferCount > 0U)
 800c358:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0dd      	beq.n	800c31c <HAL_SPI_Transmit+0xd0>
 800c360:	1c68      	adds	r0, r5, #1
 800c362:	d012      	beq.n	800c38a <HAL_SPI_Transmit+0x13e>
 800c364:	e033      	b.n	800c3ce <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 800c366:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c368:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c36e:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 800c370:	d970      	bls.n	800c454 <HAL_SPI_Transmit+0x208>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c372:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c376:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800c378:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c37a:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c37c:	3b02      	subs	r3, #2
 800c37e:	b29b      	uxth	r3, r3
 800c380:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800c382:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800c384:	b289      	uxth	r1, r1
 800c386:	2900      	cmp	r1, #0
 800c388:	d0c8      	beq.n	800c31c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	6893      	ldr	r3, [r2, #8]
 800c38e:	0799      	lsls	r1, r3, #30
 800c390:	d4e9      	bmi.n	800c366 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c392:	f7fb f93d 	bl	8007610 <HAL_GetTick>
 800c396:	e7f4      	b.n	800c382 <HAL_SPI_Transmit+0x136>
    __HAL_SPI_DISABLE(hspi);
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c39e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	e78b      	b.n	800c2c2 <HAL_SPI_Transmit+0x76>
        if (hspi->TxXferCount > 1U)
 800c3aa:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800c3ae:	b292      	uxth	r2, r2
 800c3b0:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3b2:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 800c3b4:	d963      	bls.n	800c47e <HAL_SPI_Transmit+0x232>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3b6:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c3ba:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800c3bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3be:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c3c0:	3b02      	subs	r3, #2
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800c3c6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0a6      	beq.n	800c31c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	0792      	lsls	r2, r2, #30
 800c3d4:	d4e9      	bmi.n	800c3aa <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3d6:	f7fb f91b 	bl	8007610 <HAL_GetTick>
 800c3da:	1b83      	subs	r3, r0, r6
 800c3dc:	42ab      	cmp	r3, r5
 800c3de:	d3f2      	bcc.n	800c3c6 <HAL_SPI_Transmit+0x17a>
          errorcode = HAL_TIMEOUT;
 800c3e0:	2003      	movs	r0, #3
 800c3e2:	e74a      	b.n	800c27a <HAL_SPI_Transmit+0x2e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c3e6:	f832 3b02 	ldrh.w	r3, [r2], #2
 800c3ea:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800c3ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3ee:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800c3f6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d08e      	beq.n	800c31c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3fe:	6820      	ldr	r0, [r4, #0]
 800c400:	6883      	ldr	r3, [r0, #8]
 800c402:	0799      	lsls	r1, r3, #30
 800c404:	d4ee      	bmi.n	800c3e4 <HAL_SPI_Transmit+0x198>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c406:	f7fb f903 	bl	8007610 <HAL_GetTick>
 800c40a:	1b83      	subs	r3, r0, r6
 800c40c:	42ab      	cmp	r3, r5
 800c40e:	d3f2      	bcc.n	800c3f6 <HAL_SPI_Transmit+0x1aa>
 800c410:	e7e6      	b.n	800c3e0 <HAL_SPI_Transmit+0x194>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c412:	4641      	mov	r1, r8
 800c414:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c418:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800c41a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c41c:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800c41e:	3a01      	subs	r2, #1
 800c420:	b292      	uxth	r2, r2
 800c422:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 800c424:	e75f      	b.n	800c2e6 <HAL_SPI_Transmit+0x9a>
      if (hspi->TxXferCount > 1U)
 800c426:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800c428:	b292      	uxth	r2, r2
 800c42a:	2a01      	cmp	r2, #1
 800c42c:	d91c      	bls.n	800c468 <HAL_SPI_Transmit+0x21c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c42e:	4641      	mov	r1, r8
 800c430:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c434:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800c436:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c438:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c43a:	3b02      	subs	r3, #2
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c440:	e78a      	b.n	800c358 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c442:	f7fb f8e5 	bl	8007610 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800c446:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c448:	b29b      	uxth	r3, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f43f af66 	beq.w	800c31c <HAL_SPI_Transmit+0xd0>
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	e74e      	b.n	800c2f2 <HAL_SPI_Transmit+0xa6>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c454:	7803      	ldrb	r3, [r0, #0]
 800c456:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800c458:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c45a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c45c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c45e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c460:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c462:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c464:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c466:	e78c      	b.n	800c382 <HAL_SPI_Transmit+0x136>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c468:	f898 2000 	ldrb.w	r2, [r8]
 800c46c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800c46e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr ++;
 800c470:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c472:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800c474:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800c476:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800c478:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c47a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c47c:	e76c      	b.n	800c358 <HAL_SPI_Transmit+0x10c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c47e:	7802      	ldrb	r2, [r0, #0]
 800c480:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800c482:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c484:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c486:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c488:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c48a:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c48c:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c48e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c490:	e799      	b.n	800c3c6 <HAL_SPI_Transmit+0x17a>
 800c492:	bf00      	nop

0800c494 <HAL_SPI_TransmitReceive>:
{
 800c494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c498:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800c49a:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
{
 800c49e:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 800c4a0:	2801      	cmp	r0, #1
 800c4a2:	f000 809e 	beq.w	800c5e2 <HAL_SPI_TransmitReceive+0x14e>
 800c4a6:	461f      	mov	r7, r3
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800c4ae:	4689      	mov	r9, r1
 800c4b0:	4690      	mov	r8, r2
 800c4b2:	f7fb f8ad 	bl	8007610 <HAL_GetTick>
 800c4b6:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800c4b8:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 800c4bc:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c4be:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800c4c0:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c4c2:	d010      	beq.n	800c4e6 <HAL_SPI_TransmitReceive+0x52>
 800c4c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c4c8:	d008      	beq.n	800c4dc <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800c4ca:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c4cc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c4ce:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c4d0:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800c4d4:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800c4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c4dc:	68a2      	ldr	r2, [r4, #8]
 800c4de:	2a00      	cmp	r2, #0
 800c4e0:	d1f3      	bne.n	800c4ca <HAL_SPI_TransmitReceive+0x36>
 800c4e2:	2904      	cmp	r1, #4
 800c4e4:	d1f1      	bne.n	800c4ca <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c4e6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ea:	f000 80d4 	beq.w	800c696 <HAL_SPI_TransmitReceive+0x202>
 800c4ee:	f1b8 0f00 	cmp.w	r8, #0
 800c4f2:	f000 80d0 	beq.w	800c696 <HAL_SPI_TransmitReceive+0x202>
 800c4f6:	2f00      	cmp	r7, #0
 800c4f8:	f000 80cd 	beq.w	800c696 <HAL_SPI_TransmitReceive+0x202>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4fc:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c500:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c502:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c506:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c508:	bf1c      	itt	ne
 800c50a:	2205      	movne	r2, #5
 800c50c:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c510:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c512:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c516:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800c518:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 800c51c:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c520:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 800c522:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c526:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c52a:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c52c:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c52e:	d85b      	bhi.n	800c5e8 <HAL_SPI_TransmitReceive+0x154>
 800c530:	2f01      	cmp	r7, #1
 800c532:	f000 8124 	beq.w	800c77e <HAL_SPI_TransmitReceive+0x2ea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c536:	6851      	ldr	r1, [r2, #4]
 800c538:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800c53c:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c53e:	6811      	ldr	r1, [r2, #0]
 800c540:	0649      	lsls	r1, r1, #25
 800c542:	d403      	bmi.n	800c54c <HAL_SPI_TransmitReceive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 800c544:	6811      	ldr	r1, [r2, #0]
 800c546:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c54a:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c54c:	b96b      	cbnz	r3, 800c56a <HAL_SPI_TransmitReceive+0xd6>
      if (hspi->TxXferCount > 1U)
 800c54e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c550:	b29b      	uxth	r3, r3
 800c552:	2b01      	cmp	r3, #1
 800c554:	f240 80fd 	bls.w	800c752 <HAL_SPI_TransmitReceive+0x2be>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c558:	4649      	mov	r1, r9
 800c55a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c55e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 800c560:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c562:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c564:	3b02      	subs	r3, #2
 800c566:	b29b      	uxth	r3, r3
 800c568:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800c56a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c56c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c56e:	b29b      	uxth	r3, r3
 800c570:	b92b      	cbnz	r3, 800c57e <HAL_SPI_TransmitReceive+0xea>
 800c572:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c576:	b29b      	uxth	r3, r3
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 8082 	beq.w	800c682 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c57e:	6821      	ldr	r1, [r4, #0]
 800c580:	688b      	ldr	r3, [r1, #8]
 800c582:	079a      	lsls	r2, r3, #30
 800c584:	d506      	bpl.n	800c594 <HAL_SPI_TransmitReceive+0x100>
 800c586:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c588:	b29b      	uxth	r3, r3
 800c58a:	b11b      	cbz	r3, 800c594 <HAL_SPI_TransmitReceive+0x100>
 800c58c:	2f00      	cmp	r7, #0
 800c58e:	f040 8095 	bne.w	800c6bc <HAL_SPI_TransmitReceive+0x228>
        txallowed = 0U;
 800c592:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c594:	688b      	ldr	r3, [r1, #8]
 800c596:	f013 0301 	ands.w	r3, r3, #1
 800c59a:	d019      	beq.n	800c5d0 <HAL_SPI_TransmitReceive+0x13c>
 800c59c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c5a0:	b292      	uxth	r2, r2
 800c5a2:	b1aa      	cbz	r2, 800c5d0 <HAL_SPI_TransmitReceive+0x13c>
        if (hspi->RxXferCount > 1U)
 800c5a4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c5a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 800c5aa:	b280      	uxth	r0, r0
 800c5ac:	2801      	cmp	r0, #1
 800c5ae:	d979      	bls.n	800c6a4 <HAL_SPI_TransmitReceive+0x210>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c5b0:	68c8      	ldr	r0, [r1, #12]
 800c5b2:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5b6:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800c5b8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c5bc:	3a02      	subs	r2, #2
 800c5be:	b292      	uxth	r2, r2
 800c5c0:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800c5c4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c5c8:	b292      	uxth	r2, r2
 800c5ca:	2a01      	cmp	r2, #1
 800c5cc:	d965      	bls.n	800c69a <HAL_SPI_TransmitReceive+0x206>
        txallowed = 1U;
 800c5ce:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c5d0:	f7fb f81e 	bl	8007610 <HAL_GetTick>
 800c5d4:	1b40      	subs	r0, r0, r5
 800c5d6:	42b0      	cmp	r0, r6
 800c5d8:	d3c8      	bcc.n	800c56c <HAL_SPI_TransmitReceive+0xd8>
 800c5da:	1c73      	adds	r3, r6, #1
 800c5dc:	d0c6      	beq.n	800c56c <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 800c5de:	2003      	movs	r0, #3
 800c5e0:	e774      	b.n	800c4cc <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800c5e2:	2002      	movs	r0, #2
}
 800c5e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c5e8:	6851      	ldr	r1, [r2, #4]
 800c5ea:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800c5ee:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c5f0:	6811      	ldr	r1, [r2, #0]
 800c5f2:	0648      	lsls	r0, r1, #25
 800c5f4:	d403      	bmi.n	800c5fe <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 800c5f6:	6811      	ldr	r1, [r2, #0]
 800c5f8:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c5fc:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f040 8082 	bne.w	800c708 <HAL_SPI_TransmitReceive+0x274>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c604:	4649      	mov	r1, r9
 800c606:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c60a:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800c60c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c60e:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800c610:	3b01      	subs	r3, #1
 800c612:	b29b      	uxth	r3, r3
 800c614:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c616:	1c73      	adds	r3, r6, #1
{
 800c618:	f04f 0701 	mov.w	r7, #1
 800c61c:	d028      	beq.n	800c670 <HAL_SPI_TransmitReceive+0x1dc>
 800c61e:	e06e      	b.n	800c6fe <HAL_SPI_TransmitReceive+0x26a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c620:	6822      	ldr	r2, [r4, #0]
 800c622:	6893      	ldr	r3, [r2, #8]
 800c624:	0798      	lsls	r0, r3, #30
 800c626:	d50d      	bpl.n	800c644 <HAL_SPI_TransmitReceive+0x1b0>
 800c628:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	b153      	cbz	r3, 800c644 <HAL_SPI_TransmitReceive+0x1b0>
 800c62e:	b147      	cbz	r7, 800c642 <HAL_SPI_TransmitReceive+0x1ae>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c630:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c632:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c636:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c638:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c63a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c63c:	3b01      	subs	r3, #1
 800c63e:	b29b      	uxth	r3, r3
 800c640:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 800c642:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c644:	6893      	ldr	r3, [r2, #8]
 800c646:	f013 0301 	ands.w	r3, r3, #1
 800c64a:	d00f      	beq.n	800c66c <HAL_SPI_TransmitReceive+0x1d8>
 800c64c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800c650:	b289      	uxth	r1, r1
 800c652:	b159      	cbz	r1, 800c66c <HAL_SPI_TransmitReceive+0x1d8>
        txallowed = 1U;
 800c654:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c656:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c658:	68d2      	ldr	r2, [r2, #12]
 800c65a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c65e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c660:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c664:	3b01      	subs	r3, #1
 800c666:	b29b      	uxth	r3, r3
 800c668:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c66c:	f7fa ffd0 	bl	8007610 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c670:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c672:	b29b      	uxth	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1d3      	bne.n	800c620 <HAL_SPI_TransmitReceive+0x18c>
 800c678:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1ce      	bne.n	800c620 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c682:	462a      	mov	r2, r5
 800c684:	4631      	mov	r1, r6
 800c686:	4620      	mov	r0, r4
 800c688:	f7ff fcaa 	bl	800bfe0 <SPI_EndRxTxTransaction>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f43f af1d 	beq.w	800c4cc <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c692:	2320      	movs	r3, #32
 800c694:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800c696:	2001      	movs	r0, #1
 800c698:	e718      	b.n	800c4cc <HAL_SPI_TransmitReceive+0x38>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c69a:	684a      	ldr	r2, [r1, #4]
 800c69c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c6a0:	604a      	str	r2, [r1, #4]
 800c6a2:	e794      	b.n	800c5ce <HAL_SPI_TransmitReceive+0x13a>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c6a4:	7b09      	ldrb	r1, [r1, #12]
 800c6a6:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 800c6a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c6aa:	3201      	adds	r2, #1
 800c6ac:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 800c6ae:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c6b2:	3a01      	subs	r2, #1
 800c6b4:	b292      	uxth	r2, r2
 800c6b6:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 800c6ba:	e788      	b.n	800c5ce <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 800c6bc:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800c6c0:	b292      	uxth	r2, r2
 800c6c2:	2a01      	cmp	r2, #1
 800c6c4:	d950      	bls.n	800c768 <HAL_SPI_TransmitReceive+0x2d4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6c6:	f833 2b02 	ldrh.w	r2, [r3], #2
 800c6ca:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6cc:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c6ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c6d0:	3b02      	subs	r3, #2
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c6d6:	e75c      	b.n	800c592 <HAL_SPI_TransmitReceive+0xfe>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d0cf      	beq.n	800c682 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c6e2:	6822      	ldr	r2, [r4, #0]
 800c6e4:	6893      	ldr	r3, [r2, #8]
 800c6e6:	0799      	lsls	r1, r3, #30
 800c6e8:	d423      	bmi.n	800c732 <HAL_SPI_TransmitReceive+0x29e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c6ea:	6893      	ldr	r3, [r2, #8]
 800c6ec:	f013 0301 	ands.w	r3, r3, #1
 800c6f0:	d10d      	bne.n	800c70e <HAL_SPI_TransmitReceive+0x27a>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c6f2:	f7fa ff8d 	bl	8007610 <HAL_GetTick>
 800c6f6:	1b40      	subs	r0, r0, r5
 800c6f8:	42b0      	cmp	r0, r6
 800c6fa:	f4bf af70 	bcs.w	800c5de <HAL_SPI_TransmitReceive+0x14a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c700:	b29b      	uxth	r3, r3
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1ed      	bne.n	800c6e2 <HAL_SPI_TransmitReceive+0x24e>
 800c706:	e7e7      	b.n	800c6d8 <HAL_SPI_TransmitReceive+0x244>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c708:	2f01      	cmp	r7, #1
 800c70a:	d184      	bne.n	800c616 <HAL_SPI_TransmitReceive+0x182>
 800c70c:	e77a      	b.n	800c604 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c70e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800c712:	b289      	uxth	r1, r1
 800c714:	2900      	cmp	r1, #0
 800c716:	d0ec      	beq.n	800c6f2 <HAL_SPI_TransmitReceive+0x25e>
        txallowed = 1U;
 800c718:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c71a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c71c:	68d2      	ldr	r2, [r2, #12]
 800c71e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c722:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c724:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c728:	3b01      	subs	r3, #1
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800c730:	e7df      	b.n	800c6f2 <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c732:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c734:	b29b      	uxth	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d0d7      	beq.n	800c6ea <HAL_SPI_TransmitReceive+0x256>
 800c73a:	b147      	cbz	r7, 800c74e <HAL_SPI_TransmitReceive+0x2ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c73c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c73e:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c742:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c744:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c746:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c748:	3b01      	subs	r3, #1
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800c74e:	2700      	movs	r7, #0
 800c750:	e7cb      	b.n	800c6ea <HAL_SPI_TransmitReceive+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c752:	f899 3000 	ldrb.w	r3, [r9]
 800c756:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800c758:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800c75a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c75c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800c75e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800c760:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800c762:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c764:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c766:	e700      	b.n	800c56a <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800c76c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c76e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c770:	6821      	ldr	r1, [r4, #0]
          hspi->TxXferCount--;
 800c772:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c774:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c776:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c778:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c77a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c77c:	e709      	b.n	800c592 <HAL_SPI_TransmitReceive+0xfe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c77e:	6853      	ldr	r3, [r2, #4]
 800c780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c784:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c786:	6813      	ldr	r3, [r2, #0]
 800c788:	0659      	lsls	r1, r3, #25
 800c78a:	f53f aee0 	bmi.w	800c54e <HAL_SPI_TransmitReceive+0xba>
    __HAL_SPI_ENABLE(hspi);
 800c78e:	6813      	ldr	r3, [r2, #0]
 800c790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c794:	6013      	str	r3, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c796:	e6da      	b.n	800c54e <HAL_SPI_TransmitReceive+0xba>

0800c798 <HAL_SPI_Receive>:
{
 800c798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c79e:	6843      	ldr	r3, [r0, #4]
 800c7a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 800c7a4:	b084      	sub	sp, #16
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	4617      	mov	r7, r2
 800c7aa:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c7ac:	f000 8090 	beq.w	800c8d0 <HAL_SPI_Receive+0x138>
  __HAL_LOCK(hspi);
 800c7b0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	f000 8098 	beq.w	800c8ea <HAL_SPI_Receive+0x152>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800c7c0:	f7fa ff26 	bl	8007610 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800c7c4:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800c7c8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800c7ca:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800c7cc:	b2d8      	uxtb	r0, r3
 800c7ce:	d009      	beq.n	800c7e4 <HAL_SPI_Receive+0x4c>
    errorcode = HAL_BUSY;
 800c7d0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c7d2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c7d4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c7d6:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800c7da:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800c7de:	b004      	add	sp, #16
 800c7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800c7e4:	f1b8 0f00 	cmp.w	r8, #0
 800c7e8:	d0f3      	beq.n	800c7d2 <HAL_SPI_Receive+0x3a>
 800c7ea:	2f00      	cmp	r7, #0
 800c7ec:	d0f1      	beq.n	800c7d2 <HAL_SPI_Receive+0x3a>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7ee:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c7f0:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c7f2:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7f6:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c7f8:	2004      	movs	r0, #4
 800c7fa:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7fe:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c802:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxXferCount = Size;
 800c804:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800c808:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800c80a:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c80e:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800c810:	87a3      	strh	r3, [r4, #60]	@ 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c812:	6848      	ldr	r0, [r1, #4]
  hspi->RxXferSize  = Size;
 800c814:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c818:	460b      	mov	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c81a:	f240 80dc 	bls.w	800c9d6 <HAL_SPI_Receive+0x23e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c81e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800c822:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c824:	68a0      	ldr	r0, [r4, #8]
 800c826:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c82a:	f000 80e0 	beq.w	800c9ee <HAL_SPI_Receive+0x256>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c82e:	6808      	ldr	r0, [r1, #0]
 800c830:	0640      	lsls	r0, r0, #25
 800c832:	d45e      	bmi.n	800c8f2 <HAL_SPI_Receive+0x15a>
    __HAL_SPI_ENABLE(hspi);
 800c834:	6808      	ldr	r0, [r1, #0]
 800c836:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800c83a:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c83c:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800c840:	d857      	bhi.n	800c8f2 <HAL_SPI_Receive+0x15a>
    while (hspi->RxXferCount > 0U)
 800c842:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c846:	b292      	uxth	r2, r2
 800c848:	b1fa      	cbz	r2, 800c88a <HAL_SPI_Receive+0xf2>
 800c84a:	1c68      	adds	r0, r5, #1
 800c84c:	d013      	beq.n	800c876 <HAL_SPI_Receive+0xde>
 800c84e:	e0b8      	b.n	800c9c2 <HAL_SPI_Receive+0x22a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c850:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c852:	7b1b      	ldrb	r3, [r3, #12]
 800c854:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c856:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c85a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c85c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c860:	fa1f fc8c 	uxth.w	ip, ip
 800c864:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c868:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c86c:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 800c86e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c870:	6422      	str	r2, [r4, #64]	@ 0x40
    while (hspi->RxXferCount > 0U)
 800c872:	b153      	cbz	r3, 800c88a <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c874:	6823      	ldr	r3, [r4, #0]
 800c876:	689a      	ldr	r2, [r3, #8]
 800c878:	07d1      	lsls	r1, r2, #31
 800c87a:	d4e9      	bmi.n	800c850 <HAL_SPI_Receive+0xb8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c87c:	f7fa fec8 	bl	8007610 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800c880:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c884:	b29b      	uxth	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f4      	bne.n	800c874 <HAL_SPI_Receive+0xdc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c88a:	6863      	ldr	r3, [r4, #4]
 800c88c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c890:	f000 80ba 	beq.w	800ca08 <HAL_SPI_Receive+0x270>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c894:	f7fa febc 	bl	8007610 <HAL_GetTick>
 800c898:	19af      	adds	r7, r5, r6
 800c89a:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800c89c:	f7fa feb8 	bl	8007610 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c8a0:	4b80      	ldr	r3, [pc, #512]	@ (800caa4 <HAL_SPI_Receive+0x30c>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8a2:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800c8aa:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c8ac:	fb07 f303 	mul.w	r3, r7, r3
 800c8b0:	1c68      	adds	r0, r5, #1
 800c8b2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8b4:	d16e      	bne.n	800c994 <HAL_SPI_Receive+0x1fc>
 800c8b6:	6893      	ldr	r3, [r2, #8]
 800c8b8:	0619      	lsls	r1, r3, #24
 800c8ba:	d4fc      	bmi.n	800c8b6 <HAL_SPI_Receive+0x11e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8bc:	6863      	ldr	r3, [r4, #4]
 800c8be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c8c2:	f000 80af 	beq.w	800ca24 <HAL_SPI_Receive+0x28c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8c6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800c8c8:	3800      	subs	r0, #0
 800c8ca:	bf18      	it	ne
 800c8cc:	2001      	movne	r0, #1
error :
 800c8ce:	e780      	b.n	800c7d2 <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c8d0:	6883      	ldr	r3, [r0, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f47f af6c 	bne.w	800c7b0 <HAL_SPI_Receive+0x18>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c8d8:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c8da:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c8dc:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c8de:	f880 505d 	strb.w	r5, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c8e2:	460a      	mov	r2, r1
 800c8e4:	f7ff fdd6 	bl	800c494 <HAL_SPI_TransmitReceive>
 800c8e8:	e779      	b.n	800c7de <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 800c8ea:	2002      	movs	r0, #2
}
 800c8ec:	b004      	add	sp, #16
 800c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (hspi->RxXferCount > 0U)
 800c8f2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c8f6:	b292      	uxth	r2, r2
 800c8f8:	2a00      	cmp	r2, #0
 800c8fa:	d0c6      	beq.n	800c88a <HAL_SPI_Receive+0xf2>
 800c8fc:	1c6a      	adds	r2, r5, #1
 800c8fe:	d131      	bne.n	800c964 <HAL_SPI_Receive+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c900:	688b      	ldr	r3, [r1, #8]
 800c902:	07df      	lsls	r7, r3, #31
 800c904:	d514      	bpl.n	800c930 <HAL_SPI_Receive+0x198>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c906:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c908:	68ca      	ldr	r2, [r1, #12]
 800c90a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 800c90e:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c912:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c914:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c918:	fa1f fc8c 	uxth.w	ip, ip
 800c91c:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c920:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c924:	b29b      	uxth	r3, r3
 800c926:	2b00      	cmp	r3, #0
 800c928:	d0af      	beq.n	800c88a <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c92a:	688b      	ldr	r3, [r1, #8]
 800c92c:	07df      	lsls	r7, r3, #31
 800c92e:	d4ea      	bmi.n	800c906 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c930:	f7fa fe6e 	bl	8007610 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800c934:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c938:	b29b      	uxth	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d0a5      	beq.n	800c88a <HAL_SPI_Receive+0xf2>
 800c93e:	6821      	ldr	r1, [r4, #0]
 800c940:	e7de      	b.n	800c900 <HAL_SPI_Receive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c942:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800c94a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c94e:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c950:	3b01      	subs	r3, #1
 800c952:	b29b      	uxth	r3, r3
 800c954:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c958:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d093      	beq.n	800c88a <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	689a      	ldr	r2, [r3, #8]
 800c966:	07d7      	lsls	r7, r2, #31
 800c968:	d4eb      	bmi.n	800c942 <HAL_SPI_Receive+0x1aa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c96a:	f7fa fe51 	bl	8007610 <HAL_GetTick>
 800c96e:	1b83      	subs	r3, r0, r6
 800c970:	42ab      	cmp	r3, r5
 800c972:	d22e      	bcs.n	800c9d2 <HAL_SPI_Receive+0x23a>
 800c974:	e7f0      	b.n	800c958 <HAL_SPI_Receive+0x1c0>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c976:	f7fa fe4b 	bl	8007610 <HAL_GetTick>
 800c97a:	eba0 0008 	sub.w	r0, r0, r8
 800c97e:	42b8      	cmp	r0, r7
 800c980:	d267      	bcs.n	800ca52 <HAL_SPI_Receive+0x2ba>
      if(count == 0U)
 800c982:	9a03      	ldr	r2, [sp, #12]
      count--;
 800c984:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800c986:	2a00      	cmp	r2, #0
      count--;
 800c988:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c98c:	6822      	ldr	r2, [r4, #0]
      count--;
 800c98e:	9303      	str	r3, [sp, #12]
        tmp_timeout = 0U;
 800c990:	bf08      	it	eq
 800c992:	2700      	moveq	r7, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c994:	6893      	ldr	r3, [r2, #8]
 800c996:	061b      	lsls	r3, r3, #24
 800c998:	d4ed      	bmi.n	800c976 <HAL_SPI_Receive+0x1de>
 800c99a:	e78f      	b.n	800c8bc <HAL_SPI_Receive+0x124>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c99c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c99e:	7b1b      	ldrb	r3, [r3, #12]
 800c9a0:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c9a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c9a6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c9a8:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c9aa:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800c9ac:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c9ae:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c9b0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c9b4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f43f af65 	beq.w	800c88a <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	689a      	ldr	r2, [r3, #8]
 800c9c4:	07d2      	lsls	r2, r2, #31
 800c9c6:	d4e9      	bmi.n	800c99c <HAL_SPI_Receive+0x204>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9c8:	f7fa fe22 	bl	8007610 <HAL_GetTick>
 800c9cc:	1b83      	subs	r3, r0, r6
 800c9ce:	42ab      	cmp	r3, r5
 800c9d0:	d3f0      	bcc.n	800c9b4 <HAL_SPI_Receive+0x21c>
          errorcode = HAL_TIMEOUT;
 800c9d2:	2003      	movs	r0, #3
 800c9d4:	e6fd      	b.n	800c7d2 <HAL_SPI_Receive+0x3a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c9d6:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800c9da:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9dc:	68a0      	ldr	r0, [r4, #8]
 800c9de:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c9e2:	d004      	beq.n	800c9ee <HAL_SPI_Receive+0x256>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c9e4:	6808      	ldr	r0, [r1, #0]
 800c9e6:	0647      	lsls	r7, r0, #25
 800c9e8:	f57f af24 	bpl.w	800c834 <HAL_SPI_Receive+0x9c>
 800c9ec:	e729      	b.n	800c842 <HAL_SPI_Receive+0xaa>
    __HAL_SPI_DISABLE(hspi);
 800c9ee:	6808      	ldr	r0, [r1, #0]
 800c9f0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800c9f4:	6008      	str	r0, [r1, #0]
    SPI_1LINE_RX(hspi);
 800c9f6:	6808      	ldr	r0, [r1, #0]
 800c9f8:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 800c9fc:	6008      	str	r0, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c9fe:	6808      	ldr	r0, [r1, #0]
 800ca00:	0640      	lsls	r0, r0, #25
 800ca02:	f53f af1b 	bmi.w	800c83c <HAL_SPI_Receive+0xa4>
 800ca06:	e715      	b.n	800c834 <HAL_SPI_Receive+0x9c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca08:	68a3      	ldr	r3, [r4, #8]
 800ca0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca0e:	d003      	beq.n	800ca18 <HAL_SPI_Receive+0x280>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca14:	f47f af3e 	bne.w	800c894 <HAL_SPI_Receive+0xfc>
    __HAL_SPI_DISABLE(hspi);
 800ca18:	6822      	ldr	r2, [r4, #0]
 800ca1a:	6813      	ldr	r3, [r2, #0]
 800ca1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca20:	6013      	str	r3, [r2, #0]
 800ca22:	e737      	b.n	800c894 <HAL_SPI_Receive+0xfc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca24:	68a3      	ldr	r3, [r4, #8]
 800ca26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca2a:	d003      	beq.n	800ca34 <HAL_SPI_Receive+0x29c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca30:	f47f af49 	bne.w	800c8c6 <HAL_SPI_Receive+0x12e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ca34:	4632      	mov	r2, r6
 800ca36:	4629      	mov	r1, r5
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f7ff fa65 	bl	800bf08 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f43f af41 	beq.w	800c8c6 <HAL_SPI_Receive+0x12e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca44:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800ca46:	f043 0320 	orr.w	r3, r3, #32
 800ca4a:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca4c:	2320      	movs	r3, #32
 800ca4e:	6623      	str	r3, [r4, #96]	@ 0x60
 800ca50:	e739      	b.n	800c8c6 <HAL_SPI_Receive+0x12e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca52:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca56:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca58:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ca60:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca62:	d013      	beq.n	800ca8c <HAL_SPI_Receive+0x2f4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ca64:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ca66:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800ca6a:	d107      	bne.n	800ca7c <HAL_SPI_Receive+0x2e4>
          SPI_RESET_CRC(hspi);
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ca7a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca82:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800ca84:	f043 0320 	orr.w	r3, r3, #32
 800ca88:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ca8a:	e7df      	b.n	800ca4c <HAL_SPI_Receive+0x2b4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca8c:	68a2      	ldr	r2, [r4, #8]
 800ca8e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800ca92:	d002      	beq.n	800ca9a <HAL_SPI_Receive+0x302>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca94:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ca98:	d1e4      	bne.n	800ca64 <HAL_SPI_Receive+0x2cc>
          __HAL_SPI_DISABLE(hspi);
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	e7df      	b.n	800ca64 <HAL_SPI_Receive+0x2cc>
 800caa4:	200001e0 	.word	0x200001e0

0800caa8 <HAL_SPI_GetState>:
  return hspi->State;
 800caa8:	f890 005d 	ldrb.w	r0, [r0, #93]	@ 0x5d
}
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop

0800cab0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop

0800cab4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800cab4:	2800      	cmp	r0, #0
 800cab6:	f000 8084 	beq.w	800cbc2 <HAL_TIM_Base_Init+0x10e>
{
 800caba:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800cabc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800cac0:	4604      	mov	r4, r0
 800cac2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d070      	beq.n	800cbac <HAL_TIM_Base_Init+0xf8>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800caca:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cacc:	493e      	ldr	r1, [pc, #248]	@ (800cbc8 <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cace:	2302      	movs	r3, #2
 800cad0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cad4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800cad6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cad8:	d054      	beq.n	800cb84 <HAL_TIM_Base_Init+0xd0>
 800cada:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800cade:	d024      	beq.n	800cb2a <HAL_TIM_Base_Init+0x76>
 800cae0:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 800cae4:	428a      	cmp	r2, r1
 800cae6:	d020      	beq.n	800cb2a <HAL_TIM_Base_Init+0x76>
 800cae8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800caec:	428a      	cmp	r2, r1
 800caee:	d01c      	beq.n	800cb2a <HAL_TIM_Base_Init+0x76>
 800caf0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800caf4:	428a      	cmp	r2, r1
 800caf6:	d018      	beq.n	800cb2a <HAL_TIM_Base_Init+0x76>
 800caf8:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 800cafc:	428a      	cmp	r2, r1
 800cafe:	d041      	beq.n	800cb84 <HAL_TIM_Base_Init+0xd0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb00:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 800cb04:	428a      	cmp	r2, r1
 800cb06:	d056      	beq.n	800cbb6 <HAL_TIM_Base_Init+0x102>
 800cb08:	4930      	ldr	r1, [pc, #192]	@ (800cbcc <HAL_TIM_Base_Init+0x118>)
 800cb0a:	428a      	cmp	r2, r1
 800cb0c:	d053      	beq.n	800cbb6 <HAL_TIM_Base_Init+0x102>
 800cb0e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800cb12:	428a      	cmp	r2, r1
 800cb14:	d04f      	beq.n	800cbb6 <HAL_TIM_Base_Init+0x102>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb16:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb18:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb1a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb20:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800cb22:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb24:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cb26:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb28:	e010      	b.n	800cb4c <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 800cb2a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb2c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800cb32:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb38:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb3a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb40:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb42:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800cb44:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800cb46:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb48:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cb4a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb50:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb54:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800cb58:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800cb5c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800cb60:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800cb64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb6c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cb70:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cb74:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800cb78:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cb7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800cb80:	2000      	movs	r0, #0
}
 800cb82:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800cb84:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb86:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800cb8c:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb92:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb94:	69a1      	ldr	r1, [r4, #24]
 800cb96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb9a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800cb9c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb9e:	68e3      	ldr	r3, [r4, #12]
 800cba0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cba2:	6863      	ldr	r3, [r4, #4]
 800cba4:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800cba6:	6963      	ldr	r3, [r4, #20]
 800cba8:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbaa:	e7cf      	b.n	800cb4c <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 800cbac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cbb0:	f7ff ff7e 	bl	800cab0 <HAL_TIM_Base_MspInit>
 800cbb4:	e789      	b.n	800caca <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbb6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbb8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbbe:	4303      	orrs	r3, r0
 800cbc0:	e7e9      	b.n	800cb96 <HAL_TIM_Base_Init+0xe2>
    return HAL_ERROR;
 800cbc2:	2001      	movs	r0, #1
}
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	40012c00 	.word	0x40012c00
 800cbcc:	40014400 	.word	0x40014400

0800cbd0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800cbd0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d126      	bne.n	800cc26 <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cbd8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbda:	4919      	ldr	r1, [pc, #100]	@ (800cc40 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cbdc:	2202      	movs	r2, #2
 800cbde:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cbe2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbe4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cbe6:	f042 0201 	orr.w	r2, r2, #1
 800cbea:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbec:	d01d      	beq.n	800cc2a <HAL_TIM_Base_Start_IT+0x5a>
 800cbee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbf2:	d01a      	beq.n	800cc2a <HAL_TIM_Base_Start_IT+0x5a>
 800cbf4:	4a13      	ldr	r2, [pc, #76]	@ (800cc44 <HAL_TIM_Base_Start_IT+0x74>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d017      	beq.n	800cc2a <HAL_TIM_Base_Start_IT+0x5a>
 800cbfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d013      	beq.n	800cc2a <HAL_TIM_Base_Start_IT+0x5a>
 800cc02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d00f      	beq.n	800cc2a <HAL_TIM_Base_Start_IT+0x5a>
 800cc0a:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00b      	beq.n	800cc2a <HAL_TIM_Base_Start_IT+0x5a>
 800cc12:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d007      	beq.n	800cc2a <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	f042 0201 	orr.w	r2, r2, #1
 800cc20:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800cc22:	2000      	movs	r0, #0
 800cc24:	4770      	bx	lr
    return HAL_ERROR;
 800cc26:	2001      	movs	r0, #1
}
 800cc28:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc2a:	6899      	ldr	r1, [r3, #8]
 800cc2c:	4a06      	ldr	r2, [pc, #24]	@ (800cc48 <HAL_TIM_Base_Start_IT+0x78>)
 800cc2e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc30:	2a06      	cmp	r2, #6
 800cc32:	d0f6      	beq.n	800cc22 <HAL_TIM_Base_Start_IT+0x52>
 800cc34:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800cc38:	d1ef      	bne.n	800cc1a <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	40012c00 	.word	0x40012c00
 800cc44:	40000400 	.word	0x40000400
 800cc48:	00010007 	.word	0x00010007

0800cc4c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cc4c:	6803      	ldr	r3, [r0, #0]
 800cc4e:	68da      	ldr	r2, [r3, #12]
 800cc50:	f022 0201 	bic.w	r2, r2, #1
 800cc54:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800cc56:	6a1a      	ldr	r2, [r3, #32]
 800cc58:	f241 1111 	movw	r1, #4369	@ 0x1111
 800cc5c:	420a      	tst	r2, r1
 800cc5e:	d108      	bne.n	800cc72 <HAL_TIM_Base_Stop_IT+0x26>
 800cc60:	6a19      	ldr	r1, [r3, #32]
 800cc62:	f240 4244 	movw	r2, #1092	@ 0x444
 800cc66:	4211      	tst	r1, r2
 800cc68:	d103      	bne.n	800cc72 <HAL_TIM_Base_Stop_IT+0x26>
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	f022 0201 	bic.w	r2, r2, #1
 800cc70:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800cc72:	2301      	movs	r3, #1
 800cc74:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800cc78:	2000      	movs	r0, #0
 800cc7a:	4770      	bx	lr

0800cc7c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop

0800cc80 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop

0800cc84 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop

0800cc88 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop

0800cc8c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc8c:	6803      	ldr	r3, [r0, #0]
 800cc8e:	691a      	ldr	r2, [r3, #16]
 800cc90:	0791      	lsls	r1, r2, #30
{
 800cc92:	b510      	push	{r4, lr}
 800cc94:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc96:	d502      	bpl.n	800cc9e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc98:	68da      	ldr	r2, [r3, #12]
 800cc9a:	0792      	lsls	r2, r2, #30
 800cc9c:	d468      	bmi.n	800cd70 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc9e:	691a      	ldr	r2, [r3, #16]
 800cca0:	0752      	lsls	r2, r2, #29
 800cca2:	d502      	bpl.n	800ccaa <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cca4:	68da      	ldr	r2, [r3, #12]
 800cca6:	0750      	lsls	r0, r2, #29
 800cca8:	d44f      	bmi.n	800cd4a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ccaa:	691a      	ldr	r2, [r3, #16]
 800ccac:	0711      	lsls	r1, r2, #28
 800ccae:	d502      	bpl.n	800ccb6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ccb0:	68da      	ldr	r2, [r3, #12]
 800ccb2:	0712      	lsls	r2, r2, #28
 800ccb4:	d437      	bmi.n	800cd26 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ccb6:	691a      	ldr	r2, [r3, #16]
 800ccb8:	06d0      	lsls	r0, r2, #27
 800ccba:	d502      	bpl.n	800ccc2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ccbc:	68da      	ldr	r2, [r3, #12]
 800ccbe:	06d1      	lsls	r1, r2, #27
 800ccc0:	d41e      	bmi.n	800cd00 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ccc2:	691a      	ldr	r2, [r3, #16]
 800ccc4:	07d2      	lsls	r2, r2, #31
 800ccc6:	d502      	bpl.n	800ccce <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ccc8:	68da      	ldr	r2, [r3, #12]
 800ccca:	07d0      	lsls	r0, r2, #31
 800cccc:	d469      	bmi.n	800cda2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ccce:	691a      	ldr	r2, [r3, #16]
 800ccd0:	0611      	lsls	r1, r2, #24
 800ccd2:	d502      	bpl.n	800ccda <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccd4:	68da      	ldr	r2, [r3, #12]
 800ccd6:	0612      	lsls	r2, r2, #24
 800ccd8:	d46b      	bmi.n	800cdb2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ccda:	691a      	ldr	r2, [r3, #16]
 800ccdc:	05d0      	lsls	r0, r2, #23
 800ccde:	d502      	bpl.n	800cce6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cce0:	68da      	ldr	r2, [r3, #12]
 800cce2:	0611      	lsls	r1, r2, #24
 800cce4:	d46d      	bmi.n	800cdc2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cce6:	691a      	ldr	r2, [r3, #16]
 800cce8:	0652      	lsls	r2, r2, #25
 800ccea:	d502      	bpl.n	800ccf2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccec:	68da      	ldr	r2, [r3, #12]
 800ccee:	0650      	lsls	r0, r2, #25
 800ccf0:	d46f      	bmi.n	800cdd2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ccf2:	691a      	ldr	r2, [r3, #16]
 800ccf4:	0691      	lsls	r1, r2, #26
 800ccf6:	d502      	bpl.n	800ccfe <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ccf8:	68da      	ldr	r2, [r3, #12]
 800ccfa:	0692      	lsls	r2, r2, #26
 800ccfc:	d449      	bmi.n	800cd92 <HAL_TIM_IRQHandler+0x106>
}
 800ccfe:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd00:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd04:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd06:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd08:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800cd10:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd12:	d16f      	bne.n	800cdf4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd14:	f7ff ffb2 	bl	800cc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f7ff ffb3 	bl	800cc84 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd1e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd20:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd22:	7722      	strb	r2, [r4, #28]
 800cd24:	e7cd      	b.n	800ccc2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd26:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd2a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd2c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd2e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd30:	69db      	ldr	r3, [r3, #28]
 800cd32:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800cd34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd36:	d15a      	bne.n	800cdee <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd38:	f7ff ffa0 	bl	800cc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f7ff ffa1 	bl	800cc84 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd42:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd44:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd46:	7722      	strb	r2, [r4, #28]
 800cd48:	e7b5      	b.n	800ccb6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd4a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd4e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd50:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd52:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd54:	699b      	ldr	r3, [r3, #24]
 800cd56:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800cd5a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd5c:	d144      	bne.n	800cde8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd5e:	f7ff ff8d 	bl	800cc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd62:	4620      	mov	r0, r4
 800cd64:	f7ff ff8e 	bl	800cc84 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd68:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd6a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd6c:	7722      	strb	r2, [r4, #28]
 800cd6e:	e79c      	b.n	800ccaa <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cd70:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd74:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cd76:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd78:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	0799      	lsls	r1, r3, #30
 800cd7e:	d130      	bne.n	800cde2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd80:	f7ff ff7c 	bl	800cc7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd84:	4620      	mov	r0, r4
 800cd86:	f7ff ff7d 	bl	800cc84 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd8a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cd8c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd8e:	7722      	strb	r2, [r4, #28]
 800cd90:	e785      	b.n	800cc9e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd92:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800cd96:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd98:	611a      	str	r2, [r3, #16]
}
 800cd9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800cd9e:	f000 b87d 	b.w	800ce9c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cda2:	f06f 0201 	mvn.w	r2, #1
 800cda6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f7f4 fb5f 	bl	800146c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	e78d      	b.n	800ccce <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cdb2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800cdb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 f871 	bl	800cea0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	e78b      	b.n	800ccda <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cdc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cdc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 f86b 	bl	800cea4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	e789      	b.n	800cce6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cdd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f7ff ff55 	bl	800cc88 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	e787      	b.n	800ccf2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800cde2:	f7ff ff4d 	bl	800cc80 <HAL_TIM_IC_CaptureCallback>
 800cde6:	e7d0      	b.n	800cd8a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800cde8:	f7ff ff4a 	bl	800cc80 <HAL_TIM_IC_CaptureCallback>
 800cdec:	e7bc      	b.n	800cd68 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800cdee:	f7ff ff47 	bl	800cc80 <HAL_TIM_IC_CaptureCallback>
 800cdf2:	e7a6      	b.n	800cd42 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800cdf4:	f7ff ff44 	bl	800cc80 <HAL_TIM_IC_CaptureCallback>
 800cdf8:	e791      	b.n	800cd1e <HAL_TIM_IRQHandler+0x92>
 800cdfa:	bf00      	nop

0800cdfc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdfc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800ce00:	2a01      	cmp	r2, #1
 800ce02:	d044      	beq.n	800ce8e <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce04:	6802      	ldr	r2, [r0, #0]
{
 800ce06:	b470      	push	{r4, r5, r6}
 800ce08:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce0a:	4e22      	ldr	r6, [pc, #136]	@ (800ce94 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ce0c:	2002      	movs	r0, #2
 800ce0e:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce12:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 800ce14:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce16:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800ce18:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce1a:	d026      	beq.n	800ce6a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800ce1c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 800ce20:	42b2      	cmp	r2, r6
 800ce22:	d02b      	beq.n	800ce7c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce24:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce28:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce2a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800ce2e:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce30:	d00e      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ce32:	4819      	ldr	r0, [pc, #100]	@ (800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800ce34:	4282      	cmp	r2, r0
 800ce36:	d00b      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ce38:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800ce3c:	4282      	cmp	r2, r0
 800ce3e:	d007      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ce40:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800ce44:	4282      	cmp	r2, r0
 800ce46:	d003      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ce48:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 800ce4c:	4282      	cmp	r2, r0
 800ce4e:	d104      	bne.n	800ce5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce50:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce52:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce56:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce58:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800ce5a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800ce62:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800ce66:	bc70      	pop	{r4, r5, r6}
 800ce68:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce6a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce6c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce70:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce72:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce76:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800ce78:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce7a:	e7e9      	b.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce7c:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce7e:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce82:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce84:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce88:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 800ce8a:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce8c:	e7e0      	b.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 800ce8e:	2002      	movs	r0, #2
}
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	40012c00 	.word	0x40012c00
 800ce98:	40000400 	.word	0x40000400

0800ce9c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop

0800cea0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop

0800cea4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop

0800cea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ceac:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ceae:	6882      	ldr	r2, [r0, #8]
 800ceb0:	6900      	ldr	r0, [r0, #16]
 800ceb2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ceb4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ceb6:	4302      	orrs	r2, r0
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cebc:	49a1      	ldr	r1, [pc, #644]	@ (800d144 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cebe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cec0:	4029      	ands	r1, r5
 800cec2:	430a      	orrs	r2, r1
 800cec4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	68e1      	ldr	r1, [r4, #12]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ceca:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cecc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800ced0:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ced2:	499d      	ldr	r1, [pc, #628]	@ (800d148 <UART_SetConfig+0x2a0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ced4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ced6:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ced8:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ceda:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cedc:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800cee0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cee4:	f000 80d3 	beq.w	800d08e <UART_SetConfig+0x1e6>
    tmpreg |= huart->Init.OneBitSampling;
 800cee8:	6a26      	ldr	r6, [r4, #32]
 800ceea:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ceec:	430a      	orrs	r2, r1
 800ceee:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cef2:	f022 020f 	bic.w	r2, r2, #15
 800cef6:	432a      	orrs	r2, r5
 800cef8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cefa:	4a94      	ldr	r2, [pc, #592]	@ (800d14c <UART_SetConfig+0x2a4>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d039      	beq.n	800cf74 <UART_SetConfig+0xcc>
 800cf00:	4a93      	ldr	r2, [pc, #588]	@ (800d150 <UART_SetConfig+0x2a8>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d012      	beq.n	800cf2c <UART_SetConfig+0x84>
 800cf06:	4a93      	ldr	r2, [pc, #588]	@ (800d154 <UART_SetConfig+0x2ac>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	f000 80a8 	beq.w	800d05e <UART_SetConfig+0x1b6>
 800cf0e:	4a92      	ldr	r2, [pc, #584]	@ (800d158 <UART_SetConfig+0x2b0>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d043      	beq.n	800cf9c <UART_SetConfig+0xf4>
 800cf14:	4a91      	ldr	r2, [pc, #580]	@ (800d15c <UART_SetConfig+0x2b4>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	f000 8091 	beq.w	800d03e <UART_SetConfig+0x196>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 800cf1c:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf1e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800cf20:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 800cf24:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 800cf28:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf2c:	4b8c      	ldr	r3, [pc, #560]	@ (800d160 <UART_SetConfig+0x2b8>)
 800cf2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf32:	f003 030c 	and.w	r3, r3, #12
 800cf36:	2b0c      	cmp	r3, #12
 800cf38:	d8f0      	bhi.n	800cf1c <UART_SetConfig+0x74>
 800cf3a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf40 <UART_SetConfig+0x98>)
 800cf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf40:	0800d053 	.word	0x0800d053
 800cf44:	0800cf1d 	.word	0x0800cf1d
 800cf48:	0800cf1d 	.word	0x0800cf1d
 800cf4c:	0800cf1d 	.word	0x0800cf1d
 800cf50:	0800cfb5 	.word	0x0800cfb5
 800cf54:	0800cf1d 	.word	0x0800cf1d
 800cf58:	0800cf1d 	.word	0x0800cf1d
 800cf5c:	0800cf1d 	.word	0x0800cf1d
 800cf60:	0800cfff 	.word	0x0800cfff
 800cf64:	0800cf1d 	.word	0x0800cf1d
 800cf68:	0800cf1d 	.word	0x0800cf1d
 800cf6c:	0800cf1d 	.word	0x0800cf1d
 800cf70:	0800cfcd 	.word	0x0800cfcd
 800cf74:	4b7a      	ldr	r3, [pc, #488]	@ (800d160 <UART_SetConfig+0x2b8>)
 800cf76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf7a:	f003 0303 	and.w	r3, r3, #3
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d03d      	beq.n	800cffe <UART_SetConfig+0x156>
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d022      	beq.n	800cfcc <UART_SetConfig+0x124>
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d014      	beq.n	800cfb4 <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf8a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cf8e:	f000 80d0 	beq.w	800d132 <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf92:	f7fd f945 	bl	800a220 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800cf96:	b9a8      	cbnz	r0, 800cfc4 <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e7c0      	b.n	800cf1e <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf9c:	4b70      	ldr	r3, [pc, #448]	@ (800d160 <UART_SetConfig+0x2b8>)
 800cf9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cfa6:	2b80      	cmp	r3, #128	@ 0x80
 800cfa8:	d029      	beq.n	800cffe <UART_SetConfig+0x156>
 800cfaa:	d865      	bhi.n	800d078 <UART_SetConfig+0x1d0>
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d050      	beq.n	800d052 <UART_SetConfig+0x1aa>
 800cfb0:	2b40      	cmp	r3, #64	@ 0x40
 800cfb2:	d1b3      	bne.n	800cf1c <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfb4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cfb8:	f000 80c0 	beq.w	800d13c <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetSysClockFreq();
 800cfbc:	f7fc fca4 	bl	8009908 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d0e9      	beq.n	800cf98 <UART_SetConfig+0xf0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfc4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cfc6:	e006      	b.n	800cfd6 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfc8:	2b30      	cmp	r3, #48	@ 0x30
 800cfca:	d1a7      	bne.n	800cf1c <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfcc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cfd0:	d019      	beq.n	800d006 <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 800cfd2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfd6:	6863      	ldr	r3, [r4, #4]
 800cfd8:	4a62      	ldr	r2, [pc, #392]	@ (800d164 <UART_SetConfig+0x2bc>)
 800cfda:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 800cfde:	fbb0 f0f2 	udiv	r0, r0, r2
 800cfe2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800cfe6:	fbb0 f0f3 	udiv	r0, r0, r3
 800cfea:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfec:	f1a0 0210 	sub.w	r2, r0, #16
 800cff0:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d891      	bhi.n	800cf1c <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	60d8      	str	r0, [r3, #12]
 800cffc:	e7cc      	b.n	800cf98 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cffe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800d002:	4859      	ldr	r0, [pc, #356]	@ (800d168 <UART_SetConfig+0x2c0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d004:	d1e7      	bne.n	800cfd6 <UART_SetConfig+0x12e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d006:	6862      	ldr	r2, [r4, #4]
 800d008:	4b56      	ldr	r3, [pc, #344]	@ (800d164 <UART_SetConfig+0x2bc>)
 800d00a:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800d00e:	fbb0 f0f1 	udiv	r0, r0, r1
 800d012:	0853      	lsrs	r3, r2, #1
 800d014:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d018:	fbb3 f3f2 	udiv	r3, r3, r2
 800d01c:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d01e:	f1a2 0010 	sub.w	r0, r2, #16
 800d022:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 800d026:	4288      	cmp	r0, r1
 800d028:	f63f af78 	bhi.w	800cf1c <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d02c:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 800d030:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d032:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d034:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800d038:	4313      	orrs	r3, r2
 800d03a:	60cb      	str	r3, [r1, #12]
 800d03c:	e7ac      	b.n	800cf98 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d03e:	4b48      	ldr	r3, [pc, #288]	@ (800d160 <UART_SetConfig+0x2b8>)
 800d040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d04c:	d0d7      	beq.n	800cffe <UART_SetConfig+0x156>
 800d04e:	d81a      	bhi.n	800d086 <UART_SetConfig+0x1de>
 800d050:	b9ab      	cbnz	r3, 800d07e <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d052:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d056:	d065      	beq.n	800d124 <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d058:	f7fd f8d0 	bl	800a1fc <HAL_RCC_GetPCLK1Freq>
        break;
 800d05c:	e79b      	b.n	800cf96 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d05e:	4b40      	ldr	r3, [pc, #256]	@ (800d160 <UART_SetConfig+0x2b8>)
 800d060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d064:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d068:	2b20      	cmp	r3, #32
 800d06a:	d0c8      	beq.n	800cffe <UART_SetConfig+0x156>
 800d06c:	d8ac      	bhi.n	800cfc8 <UART_SetConfig+0x120>
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d0ef      	beq.n	800d052 <UART_SetConfig+0x1aa>
 800d072:	2b10      	cmp	r3, #16
 800d074:	d09e      	beq.n	800cfb4 <UART_SetConfig+0x10c>
 800d076:	e751      	b.n	800cf1c <UART_SetConfig+0x74>
 800d078:	2bc0      	cmp	r3, #192	@ 0xc0
 800d07a:	d0a7      	beq.n	800cfcc <UART_SetConfig+0x124>
 800d07c:	e74e      	b.n	800cf1c <UART_SetConfig+0x74>
 800d07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d082:	d097      	beq.n	800cfb4 <UART_SetConfig+0x10c>
 800d084:	e74a      	b.n	800cf1c <UART_SetConfig+0x74>
 800d086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d08a:	d09f      	beq.n	800cfcc <UART_SetConfig+0x124>
 800d08c:	e746      	b.n	800cf1c <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d08e:	4311      	orrs	r1, r2
 800d090:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d094:	4932      	ldr	r1, [pc, #200]	@ (800d160 <UART_SetConfig+0x2b8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d096:	f022 020f 	bic.w	r2, r2, #15
 800d09a:	432a      	orrs	r2, r5
 800d09c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d09e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800d0a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d0a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d0aa:	d045      	beq.n	800d138 <UART_SetConfig+0x290>
 800d0ac:	d833      	bhi.n	800d116 <UART_SetConfig+0x26e>
 800d0ae:	b37b      	cbz	r3, 800d110 <UART_SetConfig+0x268>
 800d0b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0b4:	f47f af32 	bne.w	800cf1c <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 800d0b8:	f7fc fc26 	bl	8009908 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	f43f af6b 	beq.w	800cf98 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d0c2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0c4:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d0c6:	4b27      	ldr	r3, [pc, #156]	@ (800d164 <UART_SetConfig+0x2bc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0c8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d0cc:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 800d0d0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0d4:	4299      	cmp	r1, r3
 800d0d6:	f63f af21 	bhi.w	800cf1c <UART_SetConfig+0x74>
 800d0da:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 800d0de:	f63f af1d 	bhi.w	800cf1c <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	f7f3 fd77 	bl	8000bd8 <__aeabi_uldivmod>
 800d0ea:	0872      	lsrs	r2, r6, #1
 800d0ec:	0203      	lsls	r3, r0, #8
 800d0ee:	0209      	lsls	r1, r1, #8
 800d0f0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800d0f4:	1898      	adds	r0, r3, r2
 800d0f6:	f141 0100 	adc.w	r1, r1, #0
 800d0fa:	4632      	mov	r2, r6
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f7f3 fd6b 	bl	8000bd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d102:	4b1a      	ldr	r3, [pc, #104]	@ (800d16c <UART_SetConfig+0x2c4>)
 800d104:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800d108:	429a      	cmp	r2, r3
 800d10a:	f63f af07 	bhi.w	800cf1c <UART_SetConfig+0x74>
 800d10e:	e773      	b.n	800cff8 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d110:	f7fd f874 	bl	800a1fc <HAL_RCC_GetPCLK1Freq>
        break;
 800d114:	e7d2      	b.n	800d0bc <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d116:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d11a:	f47f aeff 	bne.w	800cf1c <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 800d11e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d122:	e7cf      	b.n	800d0c4 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d124:	f7fd f86a 	bl	800a1fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800d128:	2800      	cmp	r0, #0
 800d12a:	f43f af35 	beq.w	800cf98 <UART_SetConfig+0xf0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d12e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d130:	e769      	b.n	800d006 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d132:	f7fd f875 	bl	800a220 <HAL_RCC_GetPCLK2Freq>
        break;
 800d136:	e7f7      	b.n	800d128 <UART_SetConfig+0x280>
        pclk = (uint32_t) HSI_VALUE;
 800d138:	480b      	ldr	r0, [pc, #44]	@ (800d168 <UART_SetConfig+0x2c0>)
 800d13a:	e7c3      	b.n	800d0c4 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 800d13c:	f7fc fbe4 	bl	8009908 <HAL_RCC_GetSysClockFreq>
        break;
 800d140:	e7f2      	b.n	800d128 <UART_SetConfig+0x280>
 800d142:	bf00      	nop
 800d144:	cfff69f3 	.word	0xcfff69f3
 800d148:	40008000 	.word	0x40008000
 800d14c:	40013800 	.word	0x40013800
 800d150:	40004400 	.word	0x40004400
 800d154:	40004800 	.word	0x40004800
 800d158:	40004c00 	.word	0x40004c00
 800d15c:	40005000 	.word	0x40005000
 800d160:	40021000 	.word	0x40021000
 800d164:	0801732c 	.word	0x0801732c
 800d168:	00f42400 	.word	0x00f42400
 800d16c:	000ffcff 	.word	0x000ffcff

0800d170 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d170:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d172:	07da      	lsls	r2, r3, #31
{
 800d174:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d176:	d506      	bpl.n	800d186 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d178:	6801      	ldr	r1, [r0, #0]
 800d17a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800d17c:	684a      	ldr	r2, [r1, #4]
 800d17e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d182:	4322      	orrs	r2, r4
 800d184:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d186:	079c      	lsls	r4, r3, #30
 800d188:	d506      	bpl.n	800d198 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d18a:	6801      	ldr	r1, [r0, #0]
 800d18c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800d18e:	684a      	ldr	r2, [r1, #4]
 800d190:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d194:	4322      	orrs	r2, r4
 800d196:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d198:	0759      	lsls	r1, r3, #29
 800d19a:	d506      	bpl.n	800d1aa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d19c:	6801      	ldr	r1, [r0, #0]
 800d19e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800d1a0:	684a      	ldr	r2, [r1, #4]
 800d1a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d1a6:	4322      	orrs	r2, r4
 800d1a8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d1aa:	071a      	lsls	r2, r3, #28
 800d1ac:	d506      	bpl.n	800d1bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d1ae:	6801      	ldr	r1, [r0, #0]
 800d1b0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800d1b2:	684a      	ldr	r2, [r1, #4]
 800d1b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d1b8:	4322      	orrs	r2, r4
 800d1ba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d1bc:	06dc      	lsls	r4, r3, #27
 800d1be:	d506      	bpl.n	800d1ce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1c0:	6801      	ldr	r1, [r0, #0]
 800d1c2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800d1c4:	688a      	ldr	r2, [r1, #8]
 800d1c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d1ca:	4322      	orrs	r2, r4
 800d1cc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1ce:	0699      	lsls	r1, r3, #26
 800d1d0:	d506      	bpl.n	800d1e0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d1d2:	6801      	ldr	r1, [r0, #0]
 800d1d4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800d1d6:	688a      	ldr	r2, [r1, #8]
 800d1d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d1dc:	4322      	orrs	r2, r4
 800d1de:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1e0:	065a      	lsls	r2, r3, #25
 800d1e2:	d509      	bpl.n	800d1f8 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1e4:	6801      	ldr	r1, [r0, #0]
 800d1e6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800d1e8:	684a      	ldr	r2, [r1, #4]
 800d1ea:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800d1ee:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1f0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1f4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1f6:	d00b      	beq.n	800d210 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d1f8:	061b      	lsls	r3, r3, #24
 800d1fa:	d506      	bpl.n	800d20a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d1fc:	6802      	ldr	r2, [r0, #0]
 800d1fe:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d200:	6853      	ldr	r3, [r2, #4]
 800d202:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800d206:	430b      	orrs	r3, r1
 800d208:	6053      	str	r3, [r2, #4]
  }
}
 800d20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d20e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d210:	684a      	ldr	r2, [r1, #4]
 800d212:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800d214:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800d218:	4322      	orrs	r2, r4
 800d21a:	604a      	str	r2, [r1, #4]
 800d21c:	e7ec      	b.n	800d1f8 <UART_AdvFeatureConfig+0x88>
 800d21e:	bf00      	nop

0800d220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d220:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d222:	2300      	movs	r3, #0
{
 800d224:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d226:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d22a:	f7fa f9f1 	bl	8007610 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800d234:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d236:	d40e      	bmi.n	800d256 <UART_CheckIdleState+0x36>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	0752      	lsls	r2, r2, #29
 800d23c:	d42f      	bmi.n	800d29e <UART_CheckIdleState+0x7e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d23e:	2220      	movs	r2, #32
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d240:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800d242:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800d246:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800d248:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d24c:	66e3      	str	r3, [r4, #108]	@ 0x6c
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d24e:	2300      	movs	r3, #0
 800d250:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800d254:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d256:	69da      	ldr	r2, [r3, #28]
 800d258:	0292      	lsls	r2, r2, #10
 800d25a:	d4ed      	bmi.n	800d238 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d25c:	f7fa f9d8 	bl	8007610 <HAL_GetTick>
 800d260:	1b43      	subs	r3, r0, r5
 800d262:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d266:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d268:	d22a      	bcs.n	800d2c0 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	0750      	lsls	r0, r2, #29
 800d26e:	d5f2      	bpl.n	800d256 <UART_CheckIdleState+0x36>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d270:	69da      	ldr	r2, [r3, #28]
 800d272:	0511      	lsls	r1, r2, #20
 800d274:	d5ef      	bpl.n	800d256 <UART_CheckIdleState+0x36>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d27a:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d27c:	6819      	ldr	r1, [r3, #0]
 800d27e:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 800d282:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d284:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d286:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d288:	f021 0101 	bic.w	r1, r1, #1
 800d28c:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d28e:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d292:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d296:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800d29a:	2003      	movs	r0, #3
 800d29c:	e7d7      	b.n	800d24e <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d29e:	69db      	ldr	r3, [r3, #28]
 800d2a0:	0258      	lsls	r0, r3, #9
 800d2a2:	d4cc      	bmi.n	800d23e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2a4:	f7fa f9b4 	bl	8007610 <HAL_GetTick>
 800d2a8:	1b43      	subs	r3, r0, r5
 800d2aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d2ae:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2b0:	d206      	bcs.n	800d2c0 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	0751      	lsls	r1, r2, #29
 800d2b6:	d5f2      	bpl.n	800d29e <UART_CheckIdleState+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d2b8:	69da      	ldr	r2, [r3, #28]
 800d2ba:	0512      	lsls	r2, r2, #20
 800d2bc:	d5ef      	bpl.n	800d29e <UART_CheckIdleState+0x7e>
 800d2be:	e7da      	b.n	800d276 <UART_CheckIdleState+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800d2c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2c8:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d2ca:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2cc:	f022 0201 	bic.w	r2, r2, #1
 800d2d0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d2d2:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d2d6:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800d2da:	e7de      	b.n	800d29a <UART_CheckIdleState+0x7a>

0800d2dc <HAL_UART_Init>:
  if (huart == NULL)
 800d2dc:	b380      	cbz	r0, 800d340 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800d2de:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800d2e2:	b510      	push	{r4, lr}
 800d2e4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800d2e6:	b333      	cbz	r3, 800d336 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800d2e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d2ea:	2324      	movs	r3, #36	@ 0x24
 800d2ec:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800d2f0:	6813      	ldr	r3, [r2, #0]
 800d2f2:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d2f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800d2f8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d2fa:	f7ff fdd5 	bl	800cea8 <UART_SetConfig>
 800d2fe:	2801      	cmp	r0, #1
 800d300:	d017      	beq.n	800d332 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d302:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d304:	b98b      	cbnz	r3, 800d32a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d30e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d310:	689a      	ldr	r2, [r3, #8]
 800d312:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d316:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800d31e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800d320:	601a      	str	r2, [r3, #0]
}
 800d322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800d326:	f7ff bf7b 	b.w	800d220 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800d32a:	4620      	mov	r0, r4
 800d32c:	f7ff ff20 	bl	800d170 <UART_AdvFeatureConfig>
 800d330:	e7e9      	b.n	800d306 <HAL_UART_Init+0x2a>
}
 800d332:	2001      	movs	r0, #1
 800d334:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800d336:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800d33a:	f7f4 fa0d 	bl	8001758 <HAL_UART_MspInit>
 800d33e:	e7d3      	b.n	800d2e8 <HAL_UART_Init+0xc>
}
 800d340:	2001      	movs	r0, #1
 800d342:	4770      	bx	lr

0800d344 <UART_WaitOnFlagUntilTimeout>:
{
 800d344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d348:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d34c:	6804      	ldr	r4, [r0, #0]
 800d34e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
{
 800d352:	460d      	mov	r5, r1
 800d354:	4616      	mov	r6, r2
 800d356:	d10a      	bne.n	800d36e <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d358:	69e3      	ldr	r3, [r4, #28]
 800d35a:	ea35 0303 	bics.w	r3, r5, r3
 800d35e:	bf0c      	ite	eq
 800d360:	2301      	moveq	r3, #1
 800d362:	2300      	movne	r3, #0
 800d364:	42b3      	cmp	r3, r6
 800d366:	d0f7      	beq.n	800d358 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800d368:	2000      	movs	r0, #0
}
 800d36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d36e:	4607      	mov	r7, r0
 800d370:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d372:	69e2      	ldr	r2, [r4, #28]
 800d374:	ea35 0202 	bics.w	r2, r5, r2
 800d378:	bf0c      	ite	eq
 800d37a:	2301      	moveq	r3, #1
 800d37c:	2300      	movne	r3, #0
 800d37e:	42b3      	cmp	r3, r6
 800d380:	d1f2      	bne.n	800d368 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d382:	f7fa f945 	bl	8007610 <HAL_GetTick>
 800d386:	eba0 0009 	sub.w	r0, r0, r9
 800d38a:	4540      	cmp	r0, r8
 800d38c:	d821      	bhi.n	800d3d2 <UART_WaitOnFlagUntilTimeout+0x8e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d38e:	683c      	ldr	r4, [r7, #0]
 800d390:	4623      	mov	r3, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d392:	f1b8 0f00 	cmp.w	r8, #0
 800d396:	d01d      	beq.n	800d3d4 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	0759      	lsls	r1, r3, #29
 800d39c:	d5e9      	bpl.n	800d372 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d39e:	69e3      	ldr	r3, [r4, #28]
 800d3a0:	051a      	lsls	r2, r3, #20
 800d3a2:	d5e6      	bpl.n	800d372 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d3a8:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d3aa:	6822      	ldr	r2, [r4, #0]
 800d3ac:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800d3b0:	6022      	str	r2, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b2:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d3b4:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b6:	f022 0201 	bic.w	r2, r2, #1
 800d3ba:	60a2      	str	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d3bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d3c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d3c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 800d3ce:	2003      	movs	r0, #3
 800d3d0:	e7cb      	b.n	800d36a <UART_WaitOnFlagUntilTimeout+0x26>
 800d3d2:	683b      	ldr	r3, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800d3da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3dc:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d3de:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3e0:	f022 0201 	bic.w	r2, r2, #1
 800d3e4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d3e6:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d3ea:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
        return HAL_TIMEOUT;
 800d3ee:	e7eb      	b.n	800d3c8 <UART_WaitOnFlagUntilTimeout+0x84>

0800d3f0 <HAL_UART_Transmit>:
{
 800d3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800d3f6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800d3fa:	2820      	cmp	r0, #32
{
 800d3fc:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800d3fe:	d17d      	bne.n	800d4fc <HAL_UART_Transmit+0x10c>
    if ((pData == NULL) || (Size == 0U))
 800d400:	4689      	mov	r9, r1
 800d402:	2900      	cmp	r1, #0
 800d404:	d047      	beq.n	800d496 <HAL_UART_Transmit+0xa6>
 800d406:	4617      	mov	r7, r2
 800d408:	2a00      	cmp	r2, #0
 800d40a:	d044      	beq.n	800d496 <HAL_UART_Transmit+0xa6>
 800d40c:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800d40e:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800d412:	2b01      	cmp	r3, #1
 800d414:	d072      	beq.n	800d4fc <HAL_UART_Transmit+0x10c>
 800d416:	2301      	movs	r3, #1
 800d418:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d41c:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d420:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d422:	f8c4 808c 	str.w	r8, [r4, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d426:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    tickstart = HAL_GetTick();
 800d42a:	f7fa f8f1 	bl	8007610 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d42e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800d430:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800d438:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 800d43c:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d43e:	d061      	beq.n	800d504 <HAL_UART_Transmit+0x114>
      pdata16bits = NULL;
 800d440:	4647      	mov	r7, r8
    while (huart->TxXferCount > 0U)
 800d442:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
    __HAL_UNLOCK(huart);
 800d446:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800d448:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800d44a:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    while (huart->TxXferCount > 0U)
 800d44e:	b1b3      	cbz	r3, 800d47e <HAL_UART_Transmit+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	1c6a      	adds	r2, r5, #1
 800d454:	d123      	bne.n	800d49e <HAL_UART_Transmit+0xae>
 800d456:	69da      	ldr	r2, [r3, #28]
 800d458:	0611      	lsls	r1, r2, #24
 800d45a:	d5fc      	bpl.n	800d456 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 800d45c:	f1b9 0f00 	cmp.w	r9, #0
 800d460:	d047      	beq.n	800d4f2 <HAL_UART_Transmit+0x102>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d462:	f819 2b01 	ldrb.w	r2, [r9], #1
 800d466:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800d468:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800d46c:	3a01      	subs	r2, #1
 800d46e:	b292      	uxth	r2, r2
 800d470:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d474:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800d478:	b292      	uxth	r2, r2
 800d47a:	2a00      	cmp	r2, #0
 800d47c:	d1e9      	bne.n	800d452 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d47e:	9500      	str	r5, [sp, #0]
 800d480:	4633      	mov	r3, r6
 800d482:	2200      	movs	r2, #0
 800d484:	2140      	movs	r1, #64	@ 0x40
 800d486:	4620      	mov	r0, r4
 800d488:	f7ff ff5c 	bl	800d344 <UART_WaitOnFlagUntilTimeout>
 800d48c:	bb68      	cbnz	r0, 800d4ea <HAL_UART_Transmit+0xfa>
    huart->gState = HAL_UART_STATE_READY;
 800d48e:	2320      	movs	r3, #32
 800d490:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_OK;
 800d494:	e000      	b.n	800d498 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 800d496:	2001      	movs	r0, #1
}
 800d498:	b003      	add	sp, #12
 800d49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d49e:	69da      	ldr	r2, [r3, #28]
 800d4a0:	f012 0880 	ands.w	r8, r2, #128	@ 0x80
 800d4a4:	d1da      	bne.n	800d45c <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4a6:	f7fa f8b3 	bl	8007610 <HAL_GetTick>
 800d4aa:	1b80      	subs	r0, r0, r6
 800d4ac:	4285      	cmp	r5, r0
 800d4ae:	d32f      	bcc.n	800d510 <HAL_UART_Transmit+0x120>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d4b0:	6823      	ldr	r3, [r4, #0]
 800d4b2:	461a      	mov	r2, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4b4:	b36d      	cbz	r5, 800d512 <HAL_UART_Transmit+0x122>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	0752      	lsls	r2, r2, #29
 800d4ba:	d5f0      	bpl.n	800d49e <HAL_UART_Transmit+0xae>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4bc:	69da      	ldr	r2, [r3, #28]
 800d4be:	0510      	lsls	r0, r2, #20
 800d4c0:	d5ed      	bpl.n	800d49e <HAL_UART_Transmit+0xae>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d4c6:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d4c8:	6819      	ldr	r1, [r3, #0]
 800d4ca:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 800d4ce:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4d0:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d4d2:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4d4:	f021 0101 	bic.w	r1, r1, #1
 800d4d8:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d4da:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800d4de:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d4e2:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4e6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        return HAL_TIMEOUT;
 800d4ea:	2003      	movs	r0, #3
}
 800d4ec:	b003      	add	sp, #12
 800d4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4f2:	f837 2b02 	ldrh.w	r2, [r7], #2
 800d4f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4fa:	e7b4      	b.n	800d466 <HAL_UART_Transmit+0x76>
    __HAL_LOCK(huart);
 800d4fc:	2002      	movs	r0, #2
}
 800d4fe:	b003      	add	sp, #12
 800d500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d504:	6923      	ldr	r3, [r4, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d19a      	bne.n	800d440 <HAL_UART_Transmit+0x50>
 800d50a:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800d50c:	4699      	mov	r9, r3
 800d50e:	e798      	b.n	800d442 <HAL_UART_Transmit+0x52>
 800d510:	6822      	ldr	r2, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d512:	6813      	ldr	r3, [r2, #0]
 800d514:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d518:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d51a:	6893      	ldr	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d51c:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800d51e:	2000      	movs	r0, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d520:	f023 0301 	bic.w	r3, r3, #1
 800d524:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d526:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        __HAL_UNLOCK(huart);
 800d52a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d52e:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800d532:	2003      	movs	r0, #3
 800d534:	e7da      	b.n	800d4ec <HAL_UART_Transmit+0xfc>
 800d536:	bf00      	nop

0800d538 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d538:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d017      	beq.n	800d570 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d540:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d542:	2324      	movs	r3, #36	@ 0x24
{
 800d544:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800d546:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d54a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d54c:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d54e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800d550:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d554:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800d558:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d55a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d55c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d55e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 800d562:	2220      	movs	r2, #32
 800d564:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 800d568:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800d56c:	4618      	mov	r0, r3
}
 800d56e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800d570:	2002      	movs	r0, #2
}
 800d572:	4770      	bx	lr

0800d574 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d574:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800d578:	2a01      	cmp	r2, #1
 800d57a:	d035      	beq.n	800d5e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>

  huart->gState = HAL_UART_STATE_BUSY;
 800d57c:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d57e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d580:	2024      	movs	r0, #36	@ 0x24
{
 800d582:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800d584:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d588:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d58a:	6810      	ldr	r0, [r2, #0]
 800d58c:	f020 0001 	bic.w	r0, r0, #1
 800d590:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d592:	6890      	ldr	r0, [r2, #8]
 800d594:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800d598:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d59a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d59c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d59e:	b300      	cbz	r0, 800d5e2 <HAL_UARTEx_SetTxFifoThreshold+0x6e>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d5a0:	6890      	ldr	r0, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d5a2:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5a4:	4d11      	ldr	r5, [pc, #68]	@ (800d5ec <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d5a6:	0f49      	lsrs	r1, r1, #29
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5a8:	f3c0 6c42 	ubfx	ip, r0, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5ac:	5c68      	ldrb	r0, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d5ae:	4429      	add	r1, r5
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5b0:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d5b2:	7a09      	ldrb	r1, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5b4:	fbb0 f0f1 	udiv	r0, r0, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5b8:	f815 100c 	ldrb.w	r1, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800d5bc:	4465      	add	r5, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5be:	00c9      	lsls	r1, r1, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d5c0:	7a2d      	ldrb	r5, [r5, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5c2:	fbb1 f1f5 	udiv	r1, r1, r5
 800d5c6:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800d5ca:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800d5cc:	2520      	movs	r5, #32
 800d5ce:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5d2:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800d5d4:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800d5d8:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d5da:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 800d5de:	bc30      	pop	{r4, r5}
 800d5e0:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800d5e2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	e7ee      	b.n	800d5c6 <HAL_UARTEx_SetTxFifoThreshold+0x52>
  __HAL_LOCK(huart);
 800d5e8:	2002      	movs	r0, #2
}
 800d5ea:	4770      	bx	lr
 800d5ec:	08017344 	.word	0x08017344

0800d5f0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800d5f0:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800d5f4:	2a01      	cmp	r2, #1
 800d5f6:	d035      	beq.n	800d664 <HAL_UARTEx_SetRxFifoThreshold+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 800d5f8:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5fa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d5fc:	2024      	movs	r0, #36	@ 0x24
{
 800d5fe:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800d600:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d604:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d606:	6810      	ldr	r0, [r2, #0]
 800d608:	f020 0001 	bic.w	r0, r0, #1
 800d60c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d60e:	6890      	ldr	r0, [r2, #8]
 800d610:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800d614:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d616:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d618:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d61a:	b300      	cbz	r0, 800d65e <HAL_UARTEx_SetRxFifoThreshold+0x6e>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d61c:	6890      	ldr	r0, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d61e:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d620:	4d11      	ldr	r5, [pc, #68]	@ (800d668 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d622:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d624:	f3c0 6c42 	ubfx	ip, r0, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d628:	5c68      	ldrb	r0, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d62a:	4429      	add	r1, r5
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d62c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d62e:	7a09      	ldrb	r1, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d630:	fbb0 f0f1 	udiv	r0, r0, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d634:	f815 100c 	ldrb.w	r1, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800d638:	4465      	add	r5, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d63a:	00c9      	lsls	r1, r1, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d63c:	7a2d      	ldrb	r5, [r5, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d63e:	fbb1 f1f5 	udiv	r1, r1, r5
 800d642:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800d646:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800d648:	2520      	movs	r5, #32
 800d64a:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d64e:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800d650:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800d654:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d656:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 800d65a:	bc30      	pop	{r4, r5}
 800d65c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800d65e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d660:	4608      	mov	r0, r1
 800d662:	e7ee      	b.n	800d642 <HAL_UARTEx_SetRxFifoThreshold+0x52>
  __HAL_LOCK(huart);
 800d664:	2002      	movs	r0, #2
}
 800d666:	4770      	bx	lr
 800d668:	08017344 	.word	0x08017344

0800d66c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d66c:	b084      	sub	sp, #16
 800d66e:	b410      	push	{r4}
 800d670:	f10d 0c08 	add.w	ip, sp, #8
 800d674:	e88c 000e 	stmia.w	ip, {r1, r2, r3}

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800d678:	460b      	mov	r3, r1
             Init.ClockPowerSave      |\
 800d67a:	e9dd 4103 	ldrd	r4, r1, [sp, #12]
{
 800d67e:	4602      	mov	r2, r0
  tmpreg |= (Init.ClockEdge           |\
 800d680:	4323      	orrs	r3, r4
             Init.BusWide             |\
 800d682:	9805      	ldr	r0, [sp, #20]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d684:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      |\
 800d686:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800d688:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             |\
 800d68a:	4303      	orrs	r3, r0
             Init.HardwareFlowControl |\
 800d68c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d68e:	4904      	ldr	r1, [pc, #16]	@ (800d6a0 <SDMMC_Init+0x34>)
 800d690:	4021      	ands	r1, r4

  return HAL_OK;
}
 800d692:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d696:	430b      	orrs	r3, r1
}
 800d698:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d69a:	6053      	str	r3, [r2, #4]
}
 800d69c:	b004      	add	sp, #16
 800d69e:	4770      	bx	lr
 800d6a0:	ffc02c00 	.word	0xffc02c00

0800d6a4 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d6a4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop

0800d6ac <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d6ac:	680b      	ldr	r3, [r1, #0]
 800d6ae:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop

0800d6b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d6b8:	b508      	push	{r3, lr}
 800d6ba:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d6bc:	2002      	movs	r0, #2
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	f042 0203 	orr.w	r2, r2, #3
 800d6c4:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 800d6c6:	f7f9 ffa9 	bl	800761c <HAL_Delay>

  return HAL_OK;
}
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	bd08      	pop	{r3, pc}
 800d6ce:	bf00      	nop

0800d6d0 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d6d0:	6800      	ldr	r0, [r0, #0]
}
 800d6d2:	f000 0003 	and.w	r0, r0, #3
 800d6d6:	4770      	bx	lr

0800d6d8 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d6d8:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800d6da:	5840      	ldr	r0, [r0, r1]
}
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop

0800d6e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d6e0:	b410      	push	{r4}

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d6e2:	e9d1 4200 	ldrd	r4, r2, [r1]

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d6e6:	688b      	ldr	r3, [r1, #8]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d6e8:	6244      	str	r4, [r0, #36]	@ 0x24
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d6ea:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 800d6ec:	6282      	str	r2, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d6ee:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
                       Data->TransferMode  |\
 800d6f0:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d6f4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
                       Data->TransferDir   |\
 800d6f6:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d6f8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
                       Data->TransferMode  |\
 800d6fc:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d6fe:	4313      	orrs	r3, r2
 800d700:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 800d702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d706:	2000      	movs	r0, #0
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop

0800d70c <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d70c:	4a4c      	ldr	r2, [pc, #304]	@ (800d840 <SDMMC_CmdBlockLength+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d70e:	4b4d      	ldr	r3, [pc, #308]	@ (800d844 <SDMMC_CmdBlockLength+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d710:	6812      	ldr	r2, [r2, #0]
{
 800d712:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d714:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d716:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d718:	494b      	ldr	r1, [pc, #300]	@ (800d848 <SDMMC_CmdBlockLength+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d71a:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d71c:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d720:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d724:	0a52      	lsrs	r2, r2, #9
 800d726:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d72a:	f043 0310 	orr.w	r3, r3, #16
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d72e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d732:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800d734:	b152      	cbz	r2, 800d74c <SDMMC_CmdBlockLength+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d736:	4945      	ldr	r1, [pc, #276]	@ (800d84c <SDMMC_CmdBlockLength+0x140>)
 800d738:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d73a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d73c:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d73e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d742:	d001      	beq.n	800d748 <SDMMC_CmdBlockLength+0x3c>
 800d744:	0492      	lsls	r2, r2, #18
 800d746:	d506      	bpl.n	800d756 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800d748:	1c5c      	adds	r4, r3, #1
 800d74a:	d1f6      	bne.n	800d73a <SDMMC_CmdBlockLength+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d74c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d750:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d754:	4770      	bx	lr
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d756:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d758:	075c      	lsls	r4, r3, #29
 800d75a:	d43c      	bmi.n	800d7d6 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d75c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d75e:	07d9      	lsls	r1, r3, #31
 800d760:	d407      	bmi.n	800d772 <SDMMC_CmdBlockLength+0x66>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d762:	4b3b      	ldr	r3, [pc, #236]	@ (800d850 <SDMMC_CmdBlockLength+0x144>)
 800d764:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d766:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	2b10      	cmp	r3, #16
 800d76c:	d004      	beq.n	800d778 <SDMMC_CmdBlockLength+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d76e:	2001      	movs	r0, #1
 800d770:	e7ee      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d772:	2301      	movs	r3, #1
 800d774:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d776:	e7fa      	b.n	800d76e <SDMMC_CmdBlockLength+0x62>
  return (*(__IO uint32_t *) tmp);
 800d778:	6943      	ldr	r3, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d77a:	4836      	ldr	r0, [pc, #216]	@ (800d854 <SDMMC_CmdBlockLength+0x148>)
 800d77c:	4018      	ands	r0, r3
 800d77e:	2800      	cmp	r0, #0
 800d780:	d0e6      	beq.n	800d750 <SDMMC_CmdBlockLength+0x44>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d782:	2b00      	cmp	r3, #0
 800d784:	db2b      	blt.n	800d7de <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d786:	005a      	lsls	r2, r3, #1
 800d788:	d42c      	bmi.n	800d7e4 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d78a:	009c      	lsls	r4, r3, #2
 800d78c:	d42c      	bmi.n	800d7e8 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d78e:	00d9      	lsls	r1, r3, #3
 800d790:	d42c      	bmi.n	800d7ec <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d792:	011a      	lsls	r2, r3, #4
 800d794:	d42d      	bmi.n	800d7f2 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d796:	015c      	lsls	r4, r3, #5
 800d798:	d42e      	bmi.n	800d7f8 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d79a:	01d9      	lsls	r1, r3, #7
 800d79c:	d42f      	bmi.n	800d7fe <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d79e:	021a      	lsls	r2, r3, #8
 800d7a0:	d430      	bmi.n	800d804 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7a2:	025c      	lsls	r4, r3, #9
 800d7a4:	d431      	bmi.n	800d80a <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d7a6:	0299      	lsls	r1, r3, #10
 800d7a8:	d43b      	bmi.n	800d822 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7aa:	02da      	lsls	r2, r3, #11
 800d7ac:	d436      	bmi.n	800d81c <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d7ae:	035c      	lsls	r4, r3, #13
 800d7b0:	d431      	bmi.n	800d816 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d7b2:	0399      	lsls	r1, r3, #14
 800d7b4:	d42c      	bmi.n	800d810 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d7b6:	03da      	lsls	r2, r3, #15
 800d7b8:	d43f      	bmi.n	800d83a <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d7ba:	041c      	lsls	r4, r3, #16
 800d7bc:	d43a      	bmi.n	800d834 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d7be:	0459      	lsls	r1, r3, #17
 800d7c0:	d435      	bmi.n	800d82e <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d7c2:	049a      	lsls	r2, r3, #18
 800d7c4:	d430      	bmi.n	800d828 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d7c6:	f013 0f08 	tst.w	r3, #8
 800d7ca:	bf0c      	ite	eq
 800d7cc:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d7d0:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d7d4:	e7bc      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7d6:	2304      	movs	r3, #4
 800d7d8:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7da:	4618      	mov	r0, r3
 800d7dc:	e7b8      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d7de:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d7e2:	e7b5      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d7e4:	2040      	movs	r0, #64	@ 0x40
 800d7e6:	e7b3      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d7e8:	2080      	movs	r0, #128	@ 0x80
 800d7ea:	e7b1      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d7ec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d7f0:	e7ae      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d7f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d7f6:	e7ab      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d7f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d7fc:	e7a8      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d7fe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d802:	e7a5      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d804:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d808:	e7a2      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d80a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d80e:	e79f      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d810:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d814:	e79c      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d816:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d81a:	e799      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d81c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d820:	e796      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d822:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d826:	e793      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d828:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d82c:	e790      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d82e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d832:	e78d      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d834:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d838:	e78a      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d83a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d83e:	e787      	b.n	800d750 <SDMMC_CmdBlockLength+0x44>
 800d840:	200001e0 	.word	0x200001e0
 800d844:	fffee0c0 	.word	0xfffee0c0
 800d848:	10624dd3 	.word	0x10624dd3
 800d84c:	00200045 	.word	0x00200045
 800d850:	002000c5 	.word	0x002000c5
 800d854:	fdffe008 	.word	0xfdffe008

0800d858 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d858:	4a4c      	ldr	r2, [pc, #304]	@ (800d98c <SDMMC_CmdReadSingleBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d85a:	4b4d      	ldr	r3, [pc, #308]	@ (800d990 <SDMMC_CmdReadSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d85c:	6812      	ldr	r2, [r2, #0]
{
 800d85e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d860:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d862:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d864:	494b      	ldr	r1, [pc, #300]	@ (800d994 <SDMMC_CmdReadSingleBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d866:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d868:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d86c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d870:	0a52      	lsrs	r2, r2, #9
 800d872:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d876:	f043 0311 	orr.w	r3, r3, #17
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d87a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d87e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d880:	b152      	cbz	r2, 800d898 <SDMMC_CmdReadSingleBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d882:	4945      	ldr	r1, [pc, #276]	@ (800d998 <SDMMC_CmdReadSingleBlock+0x140>)
 800d884:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d886:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d888:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d88a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d88e:	d001      	beq.n	800d894 <SDMMC_CmdReadSingleBlock+0x3c>
 800d890:	0492      	lsls	r2, r2, #18
 800d892:	d506      	bpl.n	800d8a2 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800d894:	1c5c      	adds	r4, r3, #1
 800d896:	d1f6      	bne.n	800d886 <SDMMC_CmdReadSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d898:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8a0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d8a4:	075c      	lsls	r4, r3, #29
 800d8a6:	d43c      	bmi.n	800d922 <SDMMC_CmdReadSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d8aa:	07d9      	lsls	r1, r3, #31
 800d8ac:	d407      	bmi.n	800d8be <SDMMC_CmdReadSingleBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8ae:	4b3b      	ldr	r3, [pc, #236]	@ (800d99c <SDMMC_CmdReadSingleBlock+0x144>)
 800d8b0:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d8b2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b11      	cmp	r3, #17
 800d8b8:	d004      	beq.n	800d8c4 <SDMMC_CmdReadSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8ba:	2001      	movs	r0, #1
 800d8bc:	e7ee      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8be:	2301      	movs	r3, #1
 800d8c0:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8c2:	e7fa      	b.n	800d8ba <SDMMC_CmdReadSingleBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d8c4:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d8c6:	4836      	ldr	r0, [pc, #216]	@ (800d9a0 <SDMMC_CmdReadSingleBlock+0x148>)
 800d8c8:	4018      	ands	r0, r3
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d0e6      	beq.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	db2b      	blt.n	800d92a <SDMMC_CmdReadSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d8d2:	005a      	lsls	r2, r3, #1
 800d8d4:	d42c      	bmi.n	800d930 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d8d6:	009c      	lsls	r4, r3, #2
 800d8d8:	d42c      	bmi.n	800d934 <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d8da:	00d9      	lsls	r1, r3, #3
 800d8dc:	d42c      	bmi.n	800d938 <SDMMC_CmdReadSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d8de:	011a      	lsls	r2, r3, #4
 800d8e0:	d42d      	bmi.n	800d93e <SDMMC_CmdReadSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d8e2:	015c      	lsls	r4, r3, #5
 800d8e4:	d42e      	bmi.n	800d944 <SDMMC_CmdReadSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d8e6:	01d9      	lsls	r1, r3, #7
 800d8e8:	d42f      	bmi.n	800d94a <SDMMC_CmdReadSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8ea:	021a      	lsls	r2, r3, #8
 800d8ec:	d430      	bmi.n	800d950 <SDMMC_CmdReadSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d8ee:	025c      	lsls	r4, r3, #9
 800d8f0:	d431      	bmi.n	800d956 <SDMMC_CmdReadSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d8f2:	0299      	lsls	r1, r3, #10
 800d8f4:	d43b      	bmi.n	800d96e <SDMMC_CmdReadSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d8f6:	02da      	lsls	r2, r3, #11
 800d8f8:	d436      	bmi.n	800d968 <SDMMC_CmdReadSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d8fa:	035c      	lsls	r4, r3, #13
 800d8fc:	d431      	bmi.n	800d962 <SDMMC_CmdReadSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d8fe:	0399      	lsls	r1, r3, #14
 800d900:	d42c      	bmi.n	800d95c <SDMMC_CmdReadSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d902:	03da      	lsls	r2, r3, #15
 800d904:	d43f      	bmi.n	800d986 <SDMMC_CmdReadSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d906:	041c      	lsls	r4, r3, #16
 800d908:	d43a      	bmi.n	800d980 <SDMMC_CmdReadSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d90a:	0459      	lsls	r1, r3, #17
 800d90c:	d435      	bmi.n	800d97a <SDMMC_CmdReadSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d90e:	049a      	lsls	r2, r3, #18
 800d910:	d430      	bmi.n	800d974 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d912:	f013 0f08 	tst.w	r3, #8
 800d916:	bf0c      	ite	eq
 800d918:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d91c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d920:	e7bc      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d922:	2304      	movs	r3, #4
 800d924:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d926:	4618      	mov	r0, r3
 800d928:	e7b8      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d92a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d92e:	e7b5      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d930:	2040      	movs	r0, #64	@ 0x40
 800d932:	e7b3      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d934:	2080      	movs	r0, #128	@ 0x80
 800d936:	e7b1      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d938:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d93c:	e7ae      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d93e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d942:	e7ab      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d944:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d948:	e7a8      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d94a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d94e:	e7a5      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d950:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d954:	e7a2      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d956:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d95a:	e79f      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d95c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d960:	e79c      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d962:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d966:	e799      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d968:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d96c:	e796      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d96e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d972:	e793      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d974:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d978:	e790      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d97a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d97e:	e78d      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d980:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d984:	e78a      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d986:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d98a:	e787      	b.n	800d89c <SDMMC_CmdReadSingleBlock+0x44>
 800d98c:	200001e0 	.word	0x200001e0
 800d990:	fffee0c0 	.word	0xfffee0c0
 800d994:	10624dd3 	.word	0x10624dd3
 800d998:	00200045 	.word	0x00200045
 800d99c:	002000c5 	.word	0x002000c5
 800d9a0:	fdffe008 	.word	0xfdffe008

0800d9a4 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9a4:	4a4c      	ldr	r2, [pc, #304]	@ (800dad8 <SDMMC_CmdReadMultiBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9a6:	4b4d      	ldr	r3, [pc, #308]	@ (800dadc <SDMMC_CmdReadMultiBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9a8:	6812      	ldr	r2, [r2, #0]
{
 800d9aa:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d9ac:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9ae:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9b0:	494b      	ldr	r1, [pc, #300]	@ (800dae0 <SDMMC_CmdReadMultiBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9b2:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9b4:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9b8:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9bc:	0a52      	lsrs	r2, r2, #9
 800d9be:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9c2:	f043 0312 	orr.w	r3, r3, #18
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9c6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9ca:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d9cc:	b152      	cbz	r2, 800d9e4 <SDMMC_CmdReadMultiBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d9ce:	4945      	ldr	r1, [pc, #276]	@ (800dae4 <SDMMC_CmdReadMultiBlock+0x140>)
 800d9d0:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d9d2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d9d4:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d9d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d9da:	d001      	beq.n	800d9e0 <SDMMC_CmdReadMultiBlock+0x3c>
 800d9dc:	0492      	lsls	r2, r2, #18
 800d9de:	d506      	bpl.n	800d9ee <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800d9e0:	1c5c      	adds	r4, r3, #1
 800d9e2:	d1f6      	bne.n	800d9d2 <SDMMC_CmdReadMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d9e4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ec:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9ee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d9f0:	075c      	lsls	r4, r3, #29
 800d9f2:	d43c      	bmi.n	800da6e <SDMMC_CmdReadMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9f4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d9f6:	07d9      	lsls	r1, r3, #31
 800d9f8:	d407      	bmi.n	800da0a <SDMMC_CmdReadMultiBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9fa:	4b3b      	ldr	r3, [pc, #236]	@ (800dae8 <SDMMC_CmdReadMultiBlock+0x144>)
 800d9fc:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d9fe:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800da00:	b2db      	uxtb	r3, r3
 800da02:	2b12      	cmp	r3, #18
 800da04:	d004      	beq.n	800da10 <SDMMC_CmdReadMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da06:	2001      	movs	r0, #1
 800da08:	e7ee      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da0a:	2301      	movs	r3, #1
 800da0c:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da0e:	e7fa      	b.n	800da06 <SDMMC_CmdReadMultiBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800da10:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800da12:	4836      	ldr	r0, [pc, #216]	@ (800daec <SDMMC_CmdReadMultiBlock+0x148>)
 800da14:	4018      	ands	r0, r3
 800da16:	2800      	cmp	r0, #0
 800da18:	d0e6      	beq.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	db2b      	blt.n	800da76 <SDMMC_CmdReadMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da1e:	005a      	lsls	r2, r3, #1
 800da20:	d42c      	bmi.n	800da7c <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da22:	009c      	lsls	r4, r3, #2
 800da24:	d42c      	bmi.n	800da80 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da26:	00d9      	lsls	r1, r3, #3
 800da28:	d42c      	bmi.n	800da84 <SDMMC_CmdReadMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da2a:	011a      	lsls	r2, r3, #4
 800da2c:	d42d      	bmi.n	800da8a <SDMMC_CmdReadMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da2e:	015c      	lsls	r4, r3, #5
 800da30:	d42e      	bmi.n	800da90 <SDMMC_CmdReadMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da32:	01d9      	lsls	r1, r3, #7
 800da34:	d42f      	bmi.n	800da96 <SDMMC_CmdReadMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da36:	021a      	lsls	r2, r3, #8
 800da38:	d430      	bmi.n	800da9c <SDMMC_CmdReadMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da3a:	025c      	lsls	r4, r3, #9
 800da3c:	d431      	bmi.n	800daa2 <SDMMC_CmdReadMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da3e:	0299      	lsls	r1, r3, #10
 800da40:	d43b      	bmi.n	800daba <SDMMC_CmdReadMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da42:	02da      	lsls	r2, r3, #11
 800da44:	d436      	bmi.n	800dab4 <SDMMC_CmdReadMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da46:	035c      	lsls	r4, r3, #13
 800da48:	d431      	bmi.n	800daae <SDMMC_CmdReadMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da4a:	0399      	lsls	r1, r3, #14
 800da4c:	d42c      	bmi.n	800daa8 <SDMMC_CmdReadMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da4e:	03da      	lsls	r2, r3, #15
 800da50:	d43f      	bmi.n	800dad2 <SDMMC_CmdReadMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da52:	041c      	lsls	r4, r3, #16
 800da54:	d43a      	bmi.n	800dacc <SDMMC_CmdReadMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da56:	0459      	lsls	r1, r3, #17
 800da58:	d435      	bmi.n	800dac6 <SDMMC_CmdReadMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da5a:	049a      	lsls	r2, r3, #18
 800da5c:	d430      	bmi.n	800dac0 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da5e:	f013 0f08 	tst.w	r3, #8
 800da62:	bf0c      	ite	eq
 800da64:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800da68:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800da6c:	e7bc      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da6e:	2304      	movs	r3, #4
 800da70:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da72:	4618      	mov	r0, r3
 800da74:	e7b8      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da76:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800da7a:	e7b5      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da7c:	2040      	movs	r0, #64	@ 0x40
 800da7e:	e7b3      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da80:	2080      	movs	r0, #128	@ 0x80
 800da82:	e7b1      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da84:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800da88:	e7ae      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800da8e:	e7ab      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800da94:	e7a8      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da96:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800da9a:	e7a5      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da9c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800daa0:	e7a2      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800daa2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800daa6:	e79f      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800daa8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800daac:	e79c      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800daae:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dab2:	e799      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800dab4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800dab8:	e796      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800daba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dabe:	e793      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800dac0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800dac4:	e790      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dac6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800daca:	e78d      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dacc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dad0:	e78a      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dad2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800dad6:	e787      	b.n	800d9e8 <SDMMC_CmdReadMultiBlock+0x44>
 800dad8:	200001e0 	.word	0x200001e0
 800dadc:	fffee0c0 	.word	0xfffee0c0
 800dae0:	10624dd3 	.word	0x10624dd3
 800dae4:	00200045 	.word	0x00200045
 800dae8:	002000c5 	.word	0x002000c5
 800daec:	fdffe008 	.word	0xfdffe008

0800daf0 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800daf0:	4a4c      	ldr	r2, [pc, #304]	@ (800dc24 <SDMMC_CmdWriteSingleBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800daf2:	4b4d      	ldr	r3, [pc, #308]	@ (800dc28 <SDMMC_CmdWriteSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800daf4:	6812      	ldr	r2, [r2, #0]
{
 800daf6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800daf8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dafa:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dafc:	494b      	ldr	r1, [pc, #300]	@ (800dc2c <SDMMC_CmdWriteSingleBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dafe:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db00:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db04:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db08:	0a52      	lsrs	r2, r2, #9
 800db0a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db0e:	f043 0318 	orr.w	r3, r3, #24
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db12:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db16:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800db18:	b152      	cbz	r2, 800db30 <SDMMC_CmdWriteSingleBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800db1a:	4945      	ldr	r1, [pc, #276]	@ (800dc30 <SDMMC_CmdWriteSingleBlock+0x140>)
 800db1c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800db1e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800db20:	420a      	tst	r2, r1
    if (count-- == 0U)
 800db22:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800db26:	d001      	beq.n	800db2c <SDMMC_CmdWriteSingleBlock+0x3c>
 800db28:	0492      	lsls	r2, r2, #18
 800db2a:	d506      	bpl.n	800db3a <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800db2c:	1c5c      	adds	r4, r3, #1
 800db2e:	d1f6      	bne.n	800db1e <SDMMC_CmdWriteSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800db30:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800db34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db38:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db3a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800db3c:	075c      	lsls	r4, r3, #29
 800db3e:	d43c      	bmi.n	800dbba <SDMMC_CmdWriteSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800db42:	07d9      	lsls	r1, r3, #31
 800db44:	d407      	bmi.n	800db56 <SDMMC_CmdWriteSingleBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db46:	4b3b      	ldr	r3, [pc, #236]	@ (800dc34 <SDMMC_CmdWriteSingleBlock+0x144>)
 800db48:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800db4a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b18      	cmp	r3, #24
 800db50:	d004      	beq.n	800db5c <SDMMC_CmdWriteSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db52:	2001      	movs	r0, #1
 800db54:	e7ee      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db56:	2301      	movs	r3, #1
 800db58:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db5a:	e7fa      	b.n	800db52 <SDMMC_CmdWriteSingleBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800db5c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800db5e:	4836      	ldr	r0, [pc, #216]	@ (800dc38 <SDMMC_CmdWriteSingleBlock+0x148>)
 800db60:	4018      	ands	r0, r3
 800db62:	2800      	cmp	r0, #0
 800db64:	d0e6      	beq.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800db66:	2b00      	cmp	r3, #0
 800db68:	db2b      	blt.n	800dbc2 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800db6a:	005a      	lsls	r2, r3, #1
 800db6c:	d42c      	bmi.n	800dbc8 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800db6e:	009c      	lsls	r4, r3, #2
 800db70:	d42c      	bmi.n	800dbcc <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800db72:	00d9      	lsls	r1, r3, #3
 800db74:	d42c      	bmi.n	800dbd0 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800db76:	011a      	lsls	r2, r3, #4
 800db78:	d42d      	bmi.n	800dbd6 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800db7a:	015c      	lsls	r4, r3, #5
 800db7c:	d42e      	bmi.n	800dbdc <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800db7e:	01d9      	lsls	r1, r3, #7
 800db80:	d42f      	bmi.n	800dbe2 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800db82:	021a      	lsls	r2, r3, #8
 800db84:	d430      	bmi.n	800dbe8 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800db86:	025c      	lsls	r4, r3, #9
 800db88:	d431      	bmi.n	800dbee <SDMMC_CmdWriteSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800db8a:	0299      	lsls	r1, r3, #10
 800db8c:	d43b      	bmi.n	800dc06 <SDMMC_CmdWriteSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800db8e:	02da      	lsls	r2, r3, #11
 800db90:	d436      	bmi.n	800dc00 <SDMMC_CmdWriteSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800db92:	035c      	lsls	r4, r3, #13
 800db94:	d431      	bmi.n	800dbfa <SDMMC_CmdWriteSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800db96:	0399      	lsls	r1, r3, #14
 800db98:	d42c      	bmi.n	800dbf4 <SDMMC_CmdWriteSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db9a:	03da      	lsls	r2, r3, #15
 800db9c:	d43f      	bmi.n	800dc1e <SDMMC_CmdWriteSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db9e:	041c      	lsls	r4, r3, #16
 800dba0:	d43a      	bmi.n	800dc18 <SDMMC_CmdWriteSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dba2:	0459      	lsls	r1, r3, #17
 800dba4:	d435      	bmi.n	800dc12 <SDMMC_CmdWriteSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dba6:	049a      	lsls	r2, r3, #18
 800dba8:	d430      	bmi.n	800dc0c <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dbaa:	f013 0f08 	tst.w	r3, #8
 800dbae:	bf0c      	ite	eq
 800dbb0:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800dbb4:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800dbb8:	e7bc      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbba:	2304      	movs	r3, #4
 800dbbc:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	e7b8      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dbc2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800dbc6:	e7b5      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dbc8:	2040      	movs	r0, #64	@ 0x40
 800dbca:	e7b3      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dbcc:	2080      	movs	r0, #128	@ 0x80
 800dbce:	e7b1      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dbd0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dbd4:	e7ae      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dbd6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dbda:	e7ab      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dbdc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dbe0:	e7a8      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dbe2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dbe6:	e7a5      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dbe8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dbec:	e7a2      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dbee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dbf2:	e79f      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dbf4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dbf8:	e79c      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dbfa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dbfe:	e799      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800dc00:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800dc04:	e796      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc06:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dc0a:	e793      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800dc0c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800dc10:	e790      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dc12:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dc16:	e78d      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dc18:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dc1c:	e78a      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc1e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800dc22:	e787      	b.n	800db34 <SDMMC_CmdWriteSingleBlock+0x44>
 800dc24:	200001e0 	.word	0x200001e0
 800dc28:	fffee0c0 	.word	0xfffee0c0
 800dc2c:	10624dd3 	.word	0x10624dd3
 800dc30:	00200045 	.word	0x00200045
 800dc34:	002000c5 	.word	0x002000c5
 800dc38:	fdffe008 	.word	0xfdffe008

0800dc3c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc3c:	4a4c      	ldr	r2, [pc, #304]	@ (800dd70 <SDMMC_CmdWriteMultiBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc3e:	4b4d      	ldr	r3, [pc, #308]	@ (800dd74 <SDMMC_CmdWriteMultiBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc40:	6812      	ldr	r2, [r2, #0]
{
 800dc42:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dc44:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc46:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc48:	494b      	ldr	r1, [pc, #300]	@ (800dd78 <SDMMC_CmdWriteMultiBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc4a:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc4c:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc50:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc54:	0a52      	lsrs	r2, r2, #9
 800dc56:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc5a:	f043 0319 	orr.w	r3, r3, #25
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc5e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc62:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dc64:	b152      	cbz	r2, 800dc7c <SDMMC_CmdWriteMultiBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dc66:	4945      	ldr	r1, [pc, #276]	@ (800dd7c <SDMMC_CmdWriteMultiBlock+0x140>)
 800dc68:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800dc6a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dc6c:	420a      	tst	r2, r1
    if (count-- == 0U)
 800dc6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dc72:	d001      	beq.n	800dc78 <SDMMC_CmdWriteMultiBlock+0x3c>
 800dc74:	0492      	lsls	r2, r2, #18
 800dc76:	d506      	bpl.n	800dc86 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800dc78:	1c5c      	adds	r4, r3, #1
 800dc7a:	d1f6      	bne.n	800dc6a <SDMMC_CmdWriteMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800dc7c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dc80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc84:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc86:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dc88:	075c      	lsls	r4, r3, #29
 800dc8a:	d43c      	bmi.n	800dd06 <SDMMC_CmdWriteMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dc8e:	07d9      	lsls	r1, r3, #31
 800dc90:	d407      	bmi.n	800dca2 <SDMMC_CmdWriteMultiBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc92:	4b3b      	ldr	r3, [pc, #236]	@ (800dd80 <SDMMC_CmdWriteMultiBlock+0x144>)
 800dc94:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dc96:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	2b19      	cmp	r3, #25
 800dc9c:	d004      	beq.n	800dca8 <SDMMC_CmdWriteMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc9e:	2001      	movs	r0, #1
 800dca0:	e7ee      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dca2:	2301      	movs	r3, #1
 800dca4:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dca6:	e7fa      	b.n	800dc9e <SDMMC_CmdWriteMultiBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800dca8:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dcaa:	4836      	ldr	r0, [pc, #216]	@ (800dd84 <SDMMC_CmdWriteMultiBlock+0x148>)
 800dcac:	4018      	ands	r0, r3
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d0e6      	beq.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	db2b      	blt.n	800dd0e <SDMMC_CmdWriteMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dcb6:	005a      	lsls	r2, r3, #1
 800dcb8:	d42c      	bmi.n	800dd14 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dcba:	009c      	lsls	r4, r3, #2
 800dcbc:	d42c      	bmi.n	800dd18 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dcbe:	00d9      	lsls	r1, r3, #3
 800dcc0:	d42c      	bmi.n	800dd1c <SDMMC_CmdWriteMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dcc2:	011a      	lsls	r2, r3, #4
 800dcc4:	d42d      	bmi.n	800dd22 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dcc6:	015c      	lsls	r4, r3, #5
 800dcc8:	d42e      	bmi.n	800dd28 <SDMMC_CmdWriteMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dcca:	01d9      	lsls	r1, r3, #7
 800dccc:	d42f      	bmi.n	800dd2e <SDMMC_CmdWriteMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dcce:	021a      	lsls	r2, r3, #8
 800dcd0:	d430      	bmi.n	800dd34 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dcd2:	025c      	lsls	r4, r3, #9
 800dcd4:	d431      	bmi.n	800dd3a <SDMMC_CmdWriteMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dcd6:	0299      	lsls	r1, r3, #10
 800dcd8:	d43b      	bmi.n	800dd52 <SDMMC_CmdWriteMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dcda:	02da      	lsls	r2, r3, #11
 800dcdc:	d436      	bmi.n	800dd4c <SDMMC_CmdWriteMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dcde:	035c      	lsls	r4, r3, #13
 800dce0:	d431      	bmi.n	800dd46 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dce2:	0399      	lsls	r1, r3, #14
 800dce4:	d42c      	bmi.n	800dd40 <SDMMC_CmdWriteMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dce6:	03da      	lsls	r2, r3, #15
 800dce8:	d43f      	bmi.n	800dd6a <SDMMC_CmdWriteMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dcea:	041c      	lsls	r4, r3, #16
 800dcec:	d43a      	bmi.n	800dd64 <SDMMC_CmdWriteMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dcee:	0459      	lsls	r1, r3, #17
 800dcf0:	d435      	bmi.n	800dd5e <SDMMC_CmdWriteMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dcf2:	049a      	lsls	r2, r3, #18
 800dcf4:	d430      	bmi.n	800dd58 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dcf6:	f013 0f08 	tst.w	r3, #8
 800dcfa:	bf0c      	ite	eq
 800dcfc:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800dd00:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800dd04:	e7bc      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd06:	2304      	movs	r3, #4
 800dd08:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	e7b8      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dd0e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800dd12:	e7b5      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dd14:	2040      	movs	r0, #64	@ 0x40
 800dd16:	e7b3      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dd18:	2080      	movs	r0, #128	@ 0x80
 800dd1a:	e7b1      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dd1c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dd20:	e7ae      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dd22:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dd26:	e7ab      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dd28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dd2c:	e7a8      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dd2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dd32:	e7a5      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd34:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dd38:	e7a2      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dd3a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dd3e:	e79f      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dd40:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dd44:	e79c      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dd46:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dd4a:	e799      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800dd4c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800dd50:	e796      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dd52:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dd56:	e793      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800dd58:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800dd5c:	e790      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dd5e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dd62:	e78d      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dd64:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dd68:	e78a      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dd6a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800dd6e:	e787      	b.n	800dc80 <SDMMC_CmdWriteMultiBlock+0x44>
 800dd70:	200001e0 	.word	0x200001e0
 800dd74:	fffee0c0 	.word	0xfffee0c0
 800dd78:	10624dd3 	.word	0x10624dd3
 800dd7c:	00200045 	.word	0x00200045
 800dd80:	002000c5 	.word	0x002000c5
 800dd84:	fdffe008 	.word	0xfdffe008

0800dd88 <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dd88:	68c3      	ldr	r3, [r0, #12]
{
 800dd8a:	4601      	mov	r1, r0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dd8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
{
 800dd90:	b410      	push	{r4}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dd92:	60cb      	str	r3, [r1, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800dd94:	68ca      	ldr	r2, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd96:	4c4f      	ldr	r4, [pc, #316]	@ (800ded4 <SDMMC_CmdStopTransfer+0x14c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd98:	4b4f      	ldr	r3, [pc, #316]	@ (800ded8 <SDMMC_CmdStopTransfer+0x150>)
  SDMMCx->ARG = Command->Argument;
 800dd9a:	2000      	movs	r0, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800dd9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dda0:	60ca      	str	r2, [r1, #12]
  SDMMCx->ARG = Command->Argument;
 800dda2:	6088      	str	r0, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dda4:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dda6:	6822      	ldr	r2, [r4, #0]
 800dda8:	4c4c      	ldr	r4, [pc, #304]	@ (800dedc <SDMMC_CmdStopTransfer+0x154>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddaa:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ddac:	484c      	ldr	r0, [pc, #304]	@ (800dee0 <SDMMC_CmdStopTransfer+0x158>)
 800ddae:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddb2:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ddb6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddb8:	f043 030c 	orr.w	r3, r3, #12
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ddbc:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddc0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800ddc2:	b152      	cbz	r2, 800ddda <SDMMC_CmdStopTransfer+0x52>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ddc4:	4847      	ldr	r0, [pc, #284]	@ (800dee4 <SDMMC_CmdStopTransfer+0x15c>)
 800ddc6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800ddc8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ddca:	4202      	tst	r2, r0
    if (count-- == 0U)
 800ddcc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ddd0:	d001      	beq.n	800ddd6 <SDMMC_CmdStopTransfer+0x4e>
 800ddd2:	0494      	lsls	r4, r2, #18
 800ddd4:	d50a      	bpl.n	800ddec <SDMMC_CmdStopTransfer+0x64>
    if (count-- == 0U)
 800ddd6:	1c5a      	adds	r2, r3, #1
 800ddd8:	d1f6      	bne.n	800ddc8 <SDMMC_CmdStopTransfer+0x40>
      return SDMMC_ERROR_TIMEOUT;
 800ddda:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ddde:	68cb      	ldr	r3, [r1, #12]
}
 800dde0:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dde4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dde8:	60cb      	str	r3, [r1, #12]
}
 800ddea:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ddec:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800ddee:	075a      	lsls	r2, r3, #29
 800ddf0:	d43c      	bmi.n	800de6c <SDMMC_CmdStopTransfer+0xe4>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ddf2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800ddf4:	07db      	lsls	r3, r3, #31
 800ddf6:	d407      	bmi.n	800de08 <SDMMC_CmdStopTransfer+0x80>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ddf8:	4b3b      	ldr	r3, [pc, #236]	@ (800dee8 <SDMMC_CmdStopTransfer+0x160>)
 800ddfa:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ddfc:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	2b0c      	cmp	r3, #12
 800de02:	d004      	beq.n	800de0e <SDMMC_CmdStopTransfer+0x86>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de04:	2001      	movs	r0, #1
 800de06:	e7ea      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de08:	2301      	movs	r3, #1
 800de0a:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de0c:	e7fa      	b.n	800de04 <SDMMC_CmdStopTransfer+0x7c>
  return (*(__IO uint32_t *) tmp);
 800de0e:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de10:	4836      	ldr	r0, [pc, #216]	@ (800deec <SDMMC_CmdStopTransfer+0x164>)
 800de12:	4018      	ands	r0, r3
 800de14:	2800      	cmp	r0, #0
 800de16:	d0e2      	beq.n	800ddde <SDMMC_CmdStopTransfer+0x56>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de18:	2b00      	cmp	r3, #0
 800de1a:	db2a      	blt.n	800de72 <SDMMC_CmdStopTransfer+0xea>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800de1c:	005c      	lsls	r4, r3, #1
 800de1e:	d42b      	bmi.n	800de78 <SDMMC_CmdStopTransfer+0xf0>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800de20:	009a      	lsls	r2, r3, #2
 800de22:	d42b      	bmi.n	800de7c <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800de24:	00dc      	lsls	r4, r3, #3
 800de26:	d42b      	bmi.n	800de80 <SDMMC_CmdStopTransfer+0xf8>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800de28:	011a      	lsls	r2, r3, #4
 800de2a:	d42c      	bmi.n	800de86 <SDMMC_CmdStopTransfer+0xfe>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800de2c:	015c      	lsls	r4, r3, #5
 800de2e:	d42d      	bmi.n	800de8c <SDMMC_CmdStopTransfer+0x104>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800de30:	01da      	lsls	r2, r3, #7
 800de32:	d42e      	bmi.n	800de92 <SDMMC_CmdStopTransfer+0x10a>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de34:	021c      	lsls	r4, r3, #8
 800de36:	d42f      	bmi.n	800de98 <SDMMC_CmdStopTransfer+0x110>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de38:	025a      	lsls	r2, r3, #9
 800de3a:	d430      	bmi.n	800de9e <SDMMC_CmdStopTransfer+0x116>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de3c:	029c      	lsls	r4, r3, #10
 800de3e:	d43a      	bmi.n	800deb6 <SDMMC_CmdStopTransfer+0x12e>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de40:	02da      	lsls	r2, r3, #11
 800de42:	d435      	bmi.n	800deb0 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de44:	035c      	lsls	r4, r3, #13
 800de46:	d430      	bmi.n	800deaa <SDMMC_CmdStopTransfer+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de48:	039a      	lsls	r2, r3, #14
 800de4a:	d42b      	bmi.n	800dea4 <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800de4c:	03dc      	lsls	r4, r3, #15
 800de4e:	d43e      	bmi.n	800dece <SDMMC_CmdStopTransfer+0x146>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800de50:	041a      	lsls	r2, r3, #16
 800de52:	d439      	bmi.n	800dec8 <SDMMC_CmdStopTransfer+0x140>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de54:	045c      	lsls	r4, r3, #17
 800de56:	d434      	bmi.n	800dec2 <SDMMC_CmdStopTransfer+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de58:	049a      	lsls	r2, r3, #18
 800de5a:	d42f      	bmi.n	800debc <SDMMC_CmdStopTransfer+0x134>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800de5c:	f013 0f08 	tst.w	r3, #8
 800de60:	bf0c      	ite	eq
 800de62:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800de66:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800de6a:	e7b8      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de6c:	2004      	movs	r0, #4
 800de6e:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de70:	e7b5      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800de72:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800de76:	e7b2      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800de78:	2040      	movs	r0, #64	@ 0x40
 800de7a:	e7b0      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800de7c:	2080      	movs	r0, #128	@ 0x80
 800de7e:	e7ae      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800de80:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800de84:	e7ab      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800de86:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800de8a:	e7a8      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800de8c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800de90:	e7a5      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800de92:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800de96:	e7a2      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de98:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800de9c:	e79f      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de9e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dea2:	e79c      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dea4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dea8:	e799      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800deaa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800deae:	e796      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CC_ERR;
 800deb0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800deb4:	e793      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800deb6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800deba:	e790      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ERASE_RESET;
 800debc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800dec0:	e78d      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dec2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dec6:	e78a      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dec8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800decc:	e787      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dece:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ded2:	e784      	b.n	800ddde <SDMMC_CmdStopTransfer+0x56>
 800ded4:	200001e0 	.word	0x200001e0
 800ded8:	fffee0c0 	.word	0xfffee0c0
 800dedc:	05f5e100 	.word	0x05f5e100
 800dee0:	10624dd3 	.word	0x10624dd3
 800dee4:	00200045 	.word	0x00200045
 800dee8:	002000c5 	.word	0x002000c5
 800deec:	fdffe008 	.word	0xfdffe008

0800def0 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800def0:	494c      	ldr	r1, [pc, #304]	@ (800e024 <SDMMC_CmdSelDesel+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800def2:	4b4d      	ldr	r3, [pc, #308]	@ (800e028 <SDMMC_CmdSelDesel+0x138>)
{
 800def4:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800def6:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800def8:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800defa:	680a      	ldr	r2, [r1, #0]
 800defc:	494b      	ldr	r1, [pc, #300]	@ (800e02c <SDMMC_CmdSelDesel+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800defe:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df00:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df04:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df08:	0a52      	lsrs	r2, r2, #9
 800df0a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df0e:	f043 0307 	orr.w	r3, r3, #7
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df12:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df16:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800df18:	b152      	cbz	r2, 800df30 <SDMMC_CmdSelDesel+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800df1a:	4945      	ldr	r1, [pc, #276]	@ (800e030 <SDMMC_CmdSelDesel+0x140>)
 800df1c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800df1e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800df20:	420a      	tst	r2, r1
    if (count-- == 0U)
 800df22:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800df26:	d001      	beq.n	800df2c <SDMMC_CmdSelDesel+0x3c>
 800df28:	0492      	lsls	r2, r2, #18
 800df2a:	d506      	bpl.n	800df3a <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800df2c:	1c5c      	adds	r4, r3, #1
 800df2e:	d1f6      	bne.n	800df1e <SDMMC_CmdSelDesel+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800df30:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800df34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df38:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df3a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800df3c:	075c      	lsls	r4, r3, #29
 800df3e:	d43c      	bmi.n	800dfba <SDMMC_CmdSelDesel+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800df42:	07d9      	lsls	r1, r3, #31
 800df44:	d407      	bmi.n	800df56 <SDMMC_CmdSelDesel+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df46:	4b3b      	ldr	r3, [pc, #236]	@ (800e034 <SDMMC_CmdSelDesel+0x144>)
 800df48:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800df4a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b07      	cmp	r3, #7
 800df50:	d004      	beq.n	800df5c <SDMMC_CmdSelDesel+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df52:	2001      	movs	r0, #1
 800df54:	e7ee      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df56:	2301      	movs	r3, #1
 800df58:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df5a:	e7fa      	b.n	800df52 <SDMMC_CmdSelDesel+0x62>
  return (*(__IO uint32_t *) tmp);
 800df5c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df5e:	4836      	ldr	r0, [pc, #216]	@ (800e038 <SDMMC_CmdSelDesel+0x148>)
 800df60:	4018      	ands	r0, r3
 800df62:	2800      	cmp	r0, #0
 800df64:	d0e6      	beq.n	800df34 <SDMMC_CmdSelDesel+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df66:	2b00      	cmp	r3, #0
 800df68:	db2b      	blt.n	800dfc2 <SDMMC_CmdSelDesel+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df6a:	005a      	lsls	r2, r3, #1
 800df6c:	d42c      	bmi.n	800dfc8 <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df6e:	009c      	lsls	r4, r3, #2
 800df70:	d42c      	bmi.n	800dfcc <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df72:	00d9      	lsls	r1, r3, #3
 800df74:	d42c      	bmi.n	800dfd0 <SDMMC_CmdSelDesel+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df76:	011a      	lsls	r2, r3, #4
 800df78:	d42d      	bmi.n	800dfd6 <SDMMC_CmdSelDesel+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800df7a:	015c      	lsls	r4, r3, #5
 800df7c:	d42e      	bmi.n	800dfdc <SDMMC_CmdSelDesel+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800df7e:	01d9      	lsls	r1, r3, #7
 800df80:	d42f      	bmi.n	800dfe2 <SDMMC_CmdSelDesel+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800df82:	021a      	lsls	r2, r3, #8
 800df84:	d430      	bmi.n	800dfe8 <SDMMC_CmdSelDesel+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800df86:	025c      	lsls	r4, r3, #9
 800df88:	d431      	bmi.n	800dfee <SDMMC_CmdSelDesel+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800df8a:	0299      	lsls	r1, r3, #10
 800df8c:	d43b      	bmi.n	800e006 <SDMMC_CmdSelDesel+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800df8e:	02da      	lsls	r2, r3, #11
 800df90:	d436      	bmi.n	800e000 <SDMMC_CmdSelDesel+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800df92:	035c      	lsls	r4, r3, #13
 800df94:	d431      	bmi.n	800dffa <SDMMC_CmdSelDesel+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800df96:	0399      	lsls	r1, r3, #14
 800df98:	d42c      	bmi.n	800dff4 <SDMMC_CmdSelDesel+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800df9a:	03da      	lsls	r2, r3, #15
 800df9c:	d43f      	bmi.n	800e01e <SDMMC_CmdSelDesel+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800df9e:	041c      	lsls	r4, r3, #16
 800dfa0:	d43a      	bmi.n	800e018 <SDMMC_CmdSelDesel+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dfa2:	0459      	lsls	r1, r3, #17
 800dfa4:	d435      	bmi.n	800e012 <SDMMC_CmdSelDesel+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dfa6:	049a      	lsls	r2, r3, #18
 800dfa8:	d430      	bmi.n	800e00c <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dfaa:	f013 0f08 	tst.w	r3, #8
 800dfae:	bf0c      	ite	eq
 800dfb0:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800dfb4:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800dfb8:	e7bc      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfba:	2304      	movs	r3, #4
 800dfbc:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	e7b8      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dfc2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800dfc6:	e7b5      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dfc8:	2040      	movs	r0, #64	@ 0x40
 800dfca:	e7b3      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dfcc:	2080      	movs	r0, #128	@ 0x80
 800dfce:	e7b1      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dfd0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dfd4:	e7ae      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dfd6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dfda:	e7ab      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dfdc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dfe0:	e7a8      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dfe2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dfe6:	e7a5      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dfe8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dfec:	e7a2      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dfee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dff2:	e79f      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dff4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dff8:	e79c      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dffa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dffe:	e799      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CC_ERR;
 800e000:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e004:	e796      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e006:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e00a:	e793      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800e00c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e010:	e790      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e012:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e016:	e78d      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e018:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e01c:	e78a      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e01e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e022:	e787      	b.n	800df34 <SDMMC_CmdSelDesel+0x44>
 800e024:	200001e0 	.word	0x200001e0
 800e028:	fffee0c0 	.word	0xfffee0c0
 800e02c:	10624dd3 	.word	0x10624dd3
 800e030:	00200045 	.word	0x00200045
 800e034:	002000c5 	.word	0x002000c5
 800e038:	fdffe008 	.word	0xfdffe008

0800e03c <SDMMC_CmdGoIdleState>:
  SDMMCx->ARG = Command->Argument;
 800e03c:	2200      	movs	r2, #0
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e03e:	4b11      	ldr	r3, [pc, #68]	@ (800e084 <SDMMC_CmdGoIdleState+0x48>)
 800e040:	4911      	ldr	r1, [pc, #68]	@ (800e088 <SDMMC_CmdGoIdleState+0x4c>)
 800e042:	681b      	ldr	r3, [r3, #0]
{
 800e044:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e046:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e048:	68c4      	ldr	r4, [r0, #12]
 800e04a:	4a10      	ldr	r2, [pc, #64]	@ (800e08c <SDMMC_CmdGoIdleState+0x50>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e04c:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e050:	4022      	ands	r2, r4
 800e052:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e056:	0a5b      	lsrs	r3, r3, #9
 800e058:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e05c:	60c2      	str	r2, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e05e:	fb01 f303 	mul.w	r3, r1, r3
 800e062:	e002      	b.n	800e06a <SDMMC_CmdGoIdleState+0x2e>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e064:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e066:	0612      	lsls	r2, r2, #24
 800e068:	d406      	bmi.n	800e078 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800e06a:	3b01      	subs	r3, #1
 800e06c:	d2fa      	bcs.n	800e064 <SDMMC_CmdGoIdleState+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800e06e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e072:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e076:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e078:	4b05      	ldr	r3, [pc, #20]	@ (800e090 <SDMMC_CmdGoIdleState+0x54>)
 800e07a:	6383      	str	r3, [r0, #56]	@ 0x38
}
 800e07c:	f85d 4b04 	ldr.w	r4, [sp], #4

  return SDMMC_ERROR_NONE;
 800e080:	2000      	movs	r0, #0
}
 800e082:	4770      	bx	lr
 800e084:	200001e0 	.word	0x200001e0
 800e088:	10624dd3 	.word	0x10624dd3
 800e08c:	fffee0c0 	.word	0xfffee0c0
 800e090:	002000c5 	.word	0x002000c5

0800e094 <SDMMC_CmdOperCond>:
  SDMMCx->ARG = Command->Argument;
 800e094:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e098:	4a1c      	ldr	r2, [pc, #112]	@ (800e10c <SDMMC_CmdOperCond+0x78>)
{
 800e09a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e09c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e09e:	68c4      	ldr	r4, [r0, #12]
 800e0a0:	4b1b      	ldr	r3, [pc, #108]	@ (800e110 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0a2:	6812      	ldr	r2, [r2, #0]
{
 800e0a4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0a6:	481b      	ldr	r0, [pc, #108]	@ (800e114 <SDMMC_CmdOperCond+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0a8:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0aa:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0ae:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0b2:	0a52      	lsrs	r2, r2, #9
 800e0b4:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0b8:	f043 0308 	orr.w	r3, r3, #8
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0bc:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0c0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800e0c2:	1e53      	subs	r3, r2, #1
 800e0c4:	b14a      	cbz	r2, 800e0da <SDMMC_CmdOperCond+0x46>
    sta_reg = SDMMCx->STA;
 800e0c6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0c8:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e0cc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0d0:	d001      	beq.n	800e0d6 <SDMMC_CmdOperCond+0x42>
 800e0d2:	0490      	lsls	r0, r2, #18
 800e0d4:	d506      	bpl.n	800e0e4 <SDMMC_CmdOperCond+0x50>
    if (count-- == 0U)
 800e0d6:	1c5c      	adds	r4, r3, #1
 800e0d8:	d1f5      	bne.n	800e0c6 <SDMMC_CmdOperCond+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800e0da:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0e4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800e0e6:	075a      	lsls	r2, r3, #29
 800e0e8:	d40c      	bmi.n	800e104 <SDMMC_CmdOperCond+0x70>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0ea:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800e0ec:	f010 0001 	ands.w	r0, r0, #1
 800e0f0:	d105      	bne.n	800e0fe <SDMMC_CmdOperCond+0x6a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e0f2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800e0f4:	065b      	lsls	r3, r3, #25
 800e0f6:	d5f2      	bpl.n	800e0de <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e0f8:	2340      	movs	r3, #64	@ 0x40
 800e0fa:	638b      	str	r3, [r1, #56]	@ 0x38
 800e0fc:	e7ef      	b.n	800e0de <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0fe:	2301      	movs	r3, #1
 800e100:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e102:	e7ec      	b.n	800e0de <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e104:	2004      	movs	r0, #4
 800e106:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e108:	e7e9      	b.n	800e0de <SDMMC_CmdOperCond+0x4a>
 800e10a:	bf00      	nop
 800e10c:	200001e0 	.word	0x200001e0
 800e110:	fffee0c0 	.word	0xfffee0c0
 800e114:	10624dd3 	.word	0x10624dd3

0800e118 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e118:	4a4c      	ldr	r2, [pc, #304]	@ (800e24c <SDMMC_CmdAppCommand+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e11a:	4b4d      	ldr	r3, [pc, #308]	@ (800e250 <SDMMC_CmdAppCommand+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e11c:	6812      	ldr	r2, [r2, #0]
{
 800e11e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e120:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e122:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e124:	494b      	ldr	r1, [pc, #300]	@ (800e254 <SDMMC_CmdAppCommand+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e126:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e128:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e12c:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e130:	0a52      	lsrs	r2, r2, #9
 800e132:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e136:	f043 0317 	orr.w	r3, r3, #23
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e13a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e13e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e140:	b152      	cbz	r2, 800e158 <SDMMC_CmdAppCommand+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e142:	4945      	ldr	r1, [pc, #276]	@ (800e258 <SDMMC_CmdAppCommand+0x140>)
 800e144:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e146:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e148:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e14a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e14e:	d001      	beq.n	800e154 <SDMMC_CmdAppCommand+0x3c>
 800e150:	0492      	lsls	r2, r2, #18
 800e152:	d506      	bpl.n	800e162 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800e154:	1c5c      	adds	r4, r3, #1
 800e156:	d1f6      	bne.n	800e146 <SDMMC_CmdAppCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e158:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e160:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e162:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e164:	075c      	lsls	r4, r3, #29
 800e166:	d43c      	bmi.n	800e1e2 <SDMMC_CmdAppCommand+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e168:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e16a:	07d9      	lsls	r1, r3, #31
 800e16c:	d407      	bmi.n	800e17e <SDMMC_CmdAppCommand+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e16e:	4b3b      	ldr	r3, [pc, #236]	@ (800e25c <SDMMC_CmdAppCommand+0x144>)
 800e170:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e172:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b37      	cmp	r3, #55	@ 0x37
 800e178:	d004      	beq.n	800e184 <SDMMC_CmdAppCommand+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e17a:	2001      	movs	r0, #1
 800e17c:	e7ee      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e17e:	2301      	movs	r3, #1
 800e180:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e182:	e7fa      	b.n	800e17a <SDMMC_CmdAppCommand+0x62>
  return (*(__IO uint32_t *) tmp);
 800e184:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e186:	4836      	ldr	r0, [pc, #216]	@ (800e260 <SDMMC_CmdAppCommand+0x148>)
 800e188:	4018      	ands	r0, r3
 800e18a:	2800      	cmp	r0, #0
 800e18c:	d0e6      	beq.n	800e15c <SDMMC_CmdAppCommand+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e18e:	2b00      	cmp	r3, #0
 800e190:	db2b      	blt.n	800e1ea <SDMMC_CmdAppCommand+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e192:	005a      	lsls	r2, r3, #1
 800e194:	d42c      	bmi.n	800e1f0 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e196:	009c      	lsls	r4, r3, #2
 800e198:	d42c      	bmi.n	800e1f4 <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e19a:	00d9      	lsls	r1, r3, #3
 800e19c:	d42c      	bmi.n	800e1f8 <SDMMC_CmdAppCommand+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e19e:	011a      	lsls	r2, r3, #4
 800e1a0:	d42d      	bmi.n	800e1fe <SDMMC_CmdAppCommand+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e1a2:	015c      	lsls	r4, r3, #5
 800e1a4:	d42e      	bmi.n	800e204 <SDMMC_CmdAppCommand+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e1a6:	01d9      	lsls	r1, r3, #7
 800e1a8:	d42f      	bmi.n	800e20a <SDMMC_CmdAppCommand+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e1aa:	021a      	lsls	r2, r3, #8
 800e1ac:	d430      	bmi.n	800e210 <SDMMC_CmdAppCommand+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e1ae:	025c      	lsls	r4, r3, #9
 800e1b0:	d431      	bmi.n	800e216 <SDMMC_CmdAppCommand+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e1b2:	0299      	lsls	r1, r3, #10
 800e1b4:	d43b      	bmi.n	800e22e <SDMMC_CmdAppCommand+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e1b6:	02da      	lsls	r2, r3, #11
 800e1b8:	d436      	bmi.n	800e228 <SDMMC_CmdAppCommand+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e1ba:	035c      	lsls	r4, r3, #13
 800e1bc:	d431      	bmi.n	800e222 <SDMMC_CmdAppCommand+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e1be:	0399      	lsls	r1, r3, #14
 800e1c0:	d42c      	bmi.n	800e21c <SDMMC_CmdAppCommand+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e1c2:	03da      	lsls	r2, r3, #15
 800e1c4:	d43f      	bmi.n	800e246 <SDMMC_CmdAppCommand+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e1c6:	041c      	lsls	r4, r3, #16
 800e1c8:	d43a      	bmi.n	800e240 <SDMMC_CmdAppCommand+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e1ca:	0459      	lsls	r1, r3, #17
 800e1cc:	d435      	bmi.n	800e23a <SDMMC_CmdAppCommand+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e1ce:	049a      	lsls	r2, r3, #18
 800e1d0:	d430      	bmi.n	800e234 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e1d2:	f013 0f08 	tst.w	r3, #8
 800e1d6:	bf0c      	ite	eq
 800e1d8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e1dc:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e1e0:	e7bc      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1e2:	2304      	movs	r3, #4
 800e1e4:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	e7b8      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e1ea:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e1ee:	e7b5      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e1f0:	2040      	movs	r0, #64	@ 0x40
 800e1f2:	e7b3      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e1f4:	2080      	movs	r0, #128	@ 0x80
 800e1f6:	e7b1      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e1f8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e1fc:	e7ae      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e1fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e202:	e7ab      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e204:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e208:	e7a8      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e20a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e20e:	e7a5      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e210:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e214:	e7a2      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e216:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e21a:	e79f      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e21c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e220:	e79c      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e222:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e226:	e799      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CC_ERR;
 800e228:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e22c:	e796      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e22e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e232:	e793      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800e234:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e238:	e790      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e23a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e23e:	e78d      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e240:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e244:	e78a      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e246:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e24a:	e787      	b.n	800e15c <SDMMC_CmdAppCommand+0x44>
 800e24c:	200001e0 	.word	0x200001e0
 800e250:	fffee0c0 	.word	0xfffee0c0
 800e254:	10624dd3 	.word	0x10624dd3
 800e258:	00200045 	.word	0x00200045
 800e25c:	002000c5 	.word	0x002000c5
 800e260:	fdffe008 	.word	0xfdffe008

0800e264 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e264:	4a18      	ldr	r2, [pc, #96]	@ (800e2c8 <SDMMC_CmdAppOperCommand+0x64>)
  SDMMCx->ARG = Command->Argument;
 800e266:	6081      	str	r1, [r0, #8]
{
 800e268:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e26a:	4918      	ldr	r1, [pc, #96]	@ (800e2cc <SDMMC_CmdAppOperCommand+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e26c:	68c0      	ldr	r0, [r0, #12]
 800e26e:	4b18      	ldr	r3, [pc, #96]	@ (800e2d0 <SDMMC_CmdAppOperCommand+0x6c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e270:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e272:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e274:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e278:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e27c:	0a52      	lsrs	r2, r2, #9
 800e27e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e282:	f043 0309 	orr.w	r3, r3, #9
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e286:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e28a:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800e28e:	1e53      	subs	r3, r2, #1
 800e290:	b152      	cbz	r2, 800e2a8 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800e292:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e296:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e29a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e29e:	d001      	beq.n	800e2a4 <SDMMC_CmdAppOperCommand+0x40>
 800e2a0:	0492      	lsls	r2, r2, #18
 800e2a2:	d504      	bpl.n	800e2ae <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800e2a4:	1c59      	adds	r1, r3, #1
 800e2a6:	d1f4      	bne.n	800e292 <SDMMC_CmdAppOperCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e2a8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e2ac:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2ae:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800e2b2:	f010 0004 	ands.w	r0, r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2b6:	bf15      	itete	ne
 800e2b8:	2004      	movne	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2ba:	4b06      	ldreq	r3, [pc, #24]	@ (800e2d4 <SDMMC_CmdAppOperCommand+0x70>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2bc:	f8cc 0038 	strne.w	r0, [ip, #56]	@ 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2c0:	f8cc 3038 	streq.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	200001e0 	.word	0x200001e0
 800e2cc:	10624dd3 	.word	0x10624dd3
 800e2d0:	fffee0c0 	.word	0xfffee0c0
 800e2d4:	002000c5 	.word	0x002000c5

0800e2d8 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e2d8:	4a4c      	ldr	r2, [pc, #304]	@ (800e40c <SDMMC_CmdBusWidth+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2da:	4b4d      	ldr	r3, [pc, #308]	@ (800e410 <SDMMC_CmdBusWidth+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e2dc:	6812      	ldr	r2, [r2, #0]
{
 800e2de:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e2e0:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2e2:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e2e4:	494b      	ldr	r1, [pc, #300]	@ (800e414 <SDMMC_CmdBusWidth+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2e6:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e2e8:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2ec:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e2f0:	0a52      	lsrs	r2, r2, #9
 800e2f2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2f6:	f043 0306 	orr.w	r3, r3, #6
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e2fa:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2fe:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e300:	b152      	cbz	r2, 800e318 <SDMMC_CmdBusWidth+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e302:	4945      	ldr	r1, [pc, #276]	@ (800e418 <SDMMC_CmdBusWidth+0x140>)
 800e304:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e306:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e308:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e30a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e30e:	d001      	beq.n	800e314 <SDMMC_CmdBusWidth+0x3c>
 800e310:	0492      	lsls	r2, r2, #18
 800e312:	d506      	bpl.n	800e322 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800e314:	1c5c      	adds	r4, r3, #1
 800e316:	d1f6      	bne.n	800e306 <SDMMC_CmdBusWidth+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e318:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e320:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e322:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e324:	075c      	lsls	r4, r3, #29
 800e326:	d43c      	bmi.n	800e3a2 <SDMMC_CmdBusWidth+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e328:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e32a:	07d9      	lsls	r1, r3, #31
 800e32c:	d407      	bmi.n	800e33e <SDMMC_CmdBusWidth+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e32e:	4b3b      	ldr	r3, [pc, #236]	@ (800e41c <SDMMC_CmdBusWidth+0x144>)
 800e330:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e332:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b06      	cmp	r3, #6
 800e338:	d004      	beq.n	800e344 <SDMMC_CmdBusWidth+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e33a:	2001      	movs	r0, #1
 800e33c:	e7ee      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e33e:	2301      	movs	r3, #1
 800e340:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e342:	e7fa      	b.n	800e33a <SDMMC_CmdBusWidth+0x62>
  return (*(__IO uint32_t *) tmp);
 800e344:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e346:	4836      	ldr	r0, [pc, #216]	@ (800e420 <SDMMC_CmdBusWidth+0x148>)
 800e348:	4018      	ands	r0, r3
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d0e6      	beq.n	800e31c <SDMMC_CmdBusWidth+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e34e:	2b00      	cmp	r3, #0
 800e350:	db2b      	blt.n	800e3aa <SDMMC_CmdBusWidth+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e352:	005a      	lsls	r2, r3, #1
 800e354:	d42c      	bmi.n	800e3b0 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e356:	009c      	lsls	r4, r3, #2
 800e358:	d42c      	bmi.n	800e3b4 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e35a:	00d9      	lsls	r1, r3, #3
 800e35c:	d42c      	bmi.n	800e3b8 <SDMMC_CmdBusWidth+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e35e:	011a      	lsls	r2, r3, #4
 800e360:	d42d      	bmi.n	800e3be <SDMMC_CmdBusWidth+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e362:	015c      	lsls	r4, r3, #5
 800e364:	d42e      	bmi.n	800e3c4 <SDMMC_CmdBusWidth+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e366:	01d9      	lsls	r1, r3, #7
 800e368:	d42f      	bmi.n	800e3ca <SDMMC_CmdBusWidth+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e36a:	021a      	lsls	r2, r3, #8
 800e36c:	d430      	bmi.n	800e3d0 <SDMMC_CmdBusWidth+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e36e:	025c      	lsls	r4, r3, #9
 800e370:	d431      	bmi.n	800e3d6 <SDMMC_CmdBusWidth+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e372:	0299      	lsls	r1, r3, #10
 800e374:	d43b      	bmi.n	800e3ee <SDMMC_CmdBusWidth+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e376:	02da      	lsls	r2, r3, #11
 800e378:	d436      	bmi.n	800e3e8 <SDMMC_CmdBusWidth+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e37a:	035c      	lsls	r4, r3, #13
 800e37c:	d431      	bmi.n	800e3e2 <SDMMC_CmdBusWidth+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e37e:	0399      	lsls	r1, r3, #14
 800e380:	d42c      	bmi.n	800e3dc <SDMMC_CmdBusWidth+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e382:	03da      	lsls	r2, r3, #15
 800e384:	d43f      	bmi.n	800e406 <SDMMC_CmdBusWidth+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e386:	041c      	lsls	r4, r3, #16
 800e388:	d43a      	bmi.n	800e400 <SDMMC_CmdBusWidth+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e38a:	0459      	lsls	r1, r3, #17
 800e38c:	d435      	bmi.n	800e3fa <SDMMC_CmdBusWidth+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e38e:	049a      	lsls	r2, r3, #18
 800e390:	d430      	bmi.n	800e3f4 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e392:	f013 0f08 	tst.w	r3, #8
 800e396:	bf0c      	ite	eq
 800e398:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e39c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e3a0:	e7bc      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3a2:	2304      	movs	r3, #4
 800e3a4:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	e7b8      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e3aa:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e3ae:	e7b5      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e3b0:	2040      	movs	r0, #64	@ 0x40
 800e3b2:	e7b3      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e3b4:	2080      	movs	r0, #128	@ 0x80
 800e3b6:	e7b1      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e3b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e3bc:	e7ae      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e3be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e3c2:	e7ab      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e3c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e3c8:	e7a8      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e3ca:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e3ce:	e7a5      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e3d0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e3d4:	e7a2      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e3d6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e3da:	e79f      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e3dc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e3e0:	e79c      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e3e2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e3e6:	e799      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CC_ERR;
 800e3e8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e3ec:	e796      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e3ee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e3f2:	e793      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800e3f4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e3f8:	e790      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e3fa:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e3fe:	e78d      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e400:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e404:	e78a      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e406:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e40a:	e787      	b.n	800e31c <SDMMC_CmdBusWidth+0x44>
 800e40c:	200001e0 	.word	0x200001e0
 800e410:	fffee0c0 	.word	0xfffee0c0
 800e414:	10624dd3 	.word	0x10624dd3
 800e418:	00200045 	.word	0x00200045
 800e41c:	002000c5 	.word	0x002000c5
 800e420:	fdffe008 	.word	0xfdffe008

0800e424 <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 800e424:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e426:	4a4d      	ldr	r2, [pc, #308]	@ (800e55c <SDMMC_CmdSendSCR+0x138>)
 800e428:	494d      	ldr	r1, [pc, #308]	@ (800e560 <SDMMC_CmdSendSCR+0x13c>)
 800e42a:	6812      	ldr	r2, [r2, #0]
{
 800e42c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e42e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e430:	68c4      	ldr	r4, [r0, #12]
 800e432:	4b4c      	ldr	r3, [pc, #304]	@ (800e564 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e434:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e438:	4023      	ands	r3, r4
 800e43a:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e43e:	0a52      	lsrs	r2, r2, #9
 800e440:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e444:	f043 0313 	orr.w	r3, r3, #19
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e448:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e44c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e44e:	b152      	cbz	r2, 800e466 <SDMMC_CmdSendSCR+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e450:	4945      	ldr	r1, [pc, #276]	@ (800e568 <SDMMC_CmdSendSCR+0x144>)
 800e452:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e454:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e456:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e458:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e45c:	d001      	beq.n	800e462 <SDMMC_CmdSendSCR+0x3e>
 800e45e:	0492      	lsls	r2, r2, #18
 800e460:	d506      	bpl.n	800e470 <SDMMC_CmdSendSCR+0x4c>
    if (count-- == 0U)
 800e462:	1c5c      	adds	r4, r3, #1
 800e464:	d1f6      	bne.n	800e454 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e466:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e46e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e470:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e472:	075c      	lsls	r4, r3, #29
 800e474:	d43c      	bmi.n	800e4f0 <SDMMC_CmdSendSCR+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e476:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e478:	07d9      	lsls	r1, r3, #31
 800e47a:	d407      	bmi.n	800e48c <SDMMC_CmdSendSCR+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e47c:	4b3b      	ldr	r3, [pc, #236]	@ (800e56c <SDMMC_CmdSendSCR+0x148>)
 800e47e:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e480:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b33      	cmp	r3, #51	@ 0x33
 800e486:	d004      	beq.n	800e492 <SDMMC_CmdSendSCR+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e488:	2001      	movs	r0, #1
 800e48a:	e7ee      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e48c:	2301      	movs	r3, #1
 800e48e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e490:	e7fa      	b.n	800e488 <SDMMC_CmdSendSCR+0x64>
  return (*(__IO uint32_t *) tmp);
 800e492:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e494:	4836      	ldr	r0, [pc, #216]	@ (800e570 <SDMMC_CmdSendSCR+0x14c>)
 800e496:	4018      	ands	r0, r3
 800e498:	2800      	cmp	r0, #0
 800e49a:	d0e6      	beq.n	800e46a <SDMMC_CmdSendSCR+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	db2b      	blt.n	800e4f8 <SDMMC_CmdSendSCR+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e4a0:	005a      	lsls	r2, r3, #1
 800e4a2:	d42c      	bmi.n	800e4fe <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e4a4:	009c      	lsls	r4, r3, #2
 800e4a6:	d42c      	bmi.n	800e502 <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e4a8:	00d9      	lsls	r1, r3, #3
 800e4aa:	d42c      	bmi.n	800e506 <SDMMC_CmdSendSCR+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e4ac:	011a      	lsls	r2, r3, #4
 800e4ae:	d42d      	bmi.n	800e50c <SDMMC_CmdSendSCR+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e4b0:	015c      	lsls	r4, r3, #5
 800e4b2:	d42e      	bmi.n	800e512 <SDMMC_CmdSendSCR+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e4b4:	01d9      	lsls	r1, r3, #7
 800e4b6:	d42f      	bmi.n	800e518 <SDMMC_CmdSendSCR+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e4b8:	021a      	lsls	r2, r3, #8
 800e4ba:	d430      	bmi.n	800e51e <SDMMC_CmdSendSCR+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e4bc:	025c      	lsls	r4, r3, #9
 800e4be:	d431      	bmi.n	800e524 <SDMMC_CmdSendSCR+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e4c0:	0299      	lsls	r1, r3, #10
 800e4c2:	d43b      	bmi.n	800e53c <SDMMC_CmdSendSCR+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e4c4:	02da      	lsls	r2, r3, #11
 800e4c6:	d436      	bmi.n	800e536 <SDMMC_CmdSendSCR+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e4c8:	035c      	lsls	r4, r3, #13
 800e4ca:	d431      	bmi.n	800e530 <SDMMC_CmdSendSCR+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e4cc:	0399      	lsls	r1, r3, #14
 800e4ce:	d42c      	bmi.n	800e52a <SDMMC_CmdSendSCR+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e4d0:	03da      	lsls	r2, r3, #15
 800e4d2:	d43f      	bmi.n	800e554 <SDMMC_CmdSendSCR+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e4d4:	041c      	lsls	r4, r3, #16
 800e4d6:	d43a      	bmi.n	800e54e <SDMMC_CmdSendSCR+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e4d8:	0459      	lsls	r1, r3, #17
 800e4da:	d435      	bmi.n	800e548 <SDMMC_CmdSendSCR+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e4dc:	049a      	lsls	r2, r3, #18
 800e4de:	d430      	bmi.n	800e542 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e4e0:	f013 0f08 	tst.w	r3, #8
 800e4e4:	bf0c      	ite	eq
 800e4e6:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e4ea:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e4ee:	e7bc      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4f0:	2304      	movs	r3, #4
 800e4f2:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	e7b8      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e4f8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e4fc:	e7b5      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e4fe:	2040      	movs	r0, #64	@ 0x40
 800e500:	e7b3      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e502:	2080      	movs	r0, #128	@ 0x80
 800e504:	e7b1      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e506:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e50a:	e7ae      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e50c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e510:	e7ab      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e512:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e516:	e7a8      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e518:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e51c:	e7a5      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e51e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e522:	e7a2      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e524:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e528:	e79f      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e52a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e52e:	e79c      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e530:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e534:	e799      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CC_ERR;
 800e536:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e53a:	e796      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e53c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e540:	e793      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800e542:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e546:	e790      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e548:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e54c:	e78d      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e54e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e552:	e78a      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e554:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e558:	e787      	b.n	800e46a <SDMMC_CmdSendSCR+0x46>
 800e55a:	bf00      	nop
 800e55c:	200001e0 	.word	0x200001e0
 800e560:	10624dd3 	.word	0x10624dd3
 800e564:	fffee0c0 	.word	0xfffee0c0
 800e568:	00200045 	.word	0x00200045
 800e56c:	002000c5 	.word	0x002000c5
 800e570:	fdffe008 	.word	0xfdffe008

0800e574 <SDMMC_CmdSendCID>:
  SDMMCx->ARG = Command->Argument;
 800e574:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e576:	4a1b      	ldr	r2, [pc, #108]	@ (800e5e4 <SDMMC_CmdSendCID+0x70>)
{
 800e578:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e57a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e57c:	68c4      	ldr	r4, [r0, #12]
 800e57e:	4b1a      	ldr	r3, [pc, #104]	@ (800e5e8 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e580:	6812      	ldr	r2, [r2, #0]
{
 800e582:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e584:	4819      	ldr	r0, [pc, #100]	@ (800e5ec <SDMMC_CmdSendCID+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e586:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e588:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e58c:	f443 5398 	orr.w	r3, r3, #4864	@ 0x1300
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e590:	0a52      	lsrs	r2, r2, #9
 800e592:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e596:	f043 0302 	orr.w	r3, r3, #2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e59a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e59e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800e5a0:	1e53      	subs	r3, r2, #1
 800e5a2:	b14a      	cbz	r2, 800e5b8 <SDMMC_CmdSendCID+0x44>
    sta_reg = SDMMCx->STA;
 800e5a4:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5a6:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e5aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5ae:	d001      	beq.n	800e5b4 <SDMMC_CmdSendCID+0x40>
 800e5b0:	0492      	lsls	r2, r2, #18
 800e5b2:	d506      	bpl.n	800e5c2 <SDMMC_CmdSendCID+0x4e>
    if (count-- == 0U)
 800e5b4:	1c58      	adds	r0, r3, #1
 800e5b6:	d1f5      	bne.n	800e5a4 <SDMMC_CmdSendCID+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e5b8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5c0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5c2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800e5c4:	075b      	lsls	r3, r3, #29
 800e5c6:	d409      	bmi.n	800e5dc <SDMMC_CmdSendCID+0x68>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5c8:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800e5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5ce:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e5d2:	bf0c      	ite	eq
 800e5d4:	4b06      	ldreq	r3, [pc, #24]	@ (800e5f0 <SDMMC_CmdSendCID+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5d6:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e5d8:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800e5da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5dc:	2004      	movs	r0, #4
 800e5de:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5e0:	e7ec      	b.n	800e5bc <SDMMC_CmdSendCID+0x48>
 800e5e2:	bf00      	nop
 800e5e4:	200001e0 	.word	0x200001e0
 800e5e8:	fffee0c0 	.word	0xfffee0c0
 800e5ec:	10624dd3 	.word	0x10624dd3
 800e5f0:	002000c5 	.word	0x002000c5

0800e5f4 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e5f4:	4a1b      	ldr	r2, [pc, #108]	@ (800e664 <SDMMC_CmdSendCSD+0x70>)
  SDMMCx->ARG = Command->Argument;
 800e5f6:	6081      	str	r1, [r0, #8]
{
 800e5f8:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e5fa:	491b      	ldr	r1, [pc, #108]	@ (800e668 <SDMMC_CmdSendCSD+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5fc:	68c0      	ldr	r0, [r0, #12]
 800e5fe:	4b1b      	ldr	r3, [pc, #108]	@ (800e66c <SDMMC_CmdSendCSD+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e600:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e602:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e604:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e608:	f443 5398 	orr.w	r3, r3, #4864	@ 0x1300
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e60c:	0a52      	lsrs	r2, r2, #9
 800e60e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e612:	f043 0309 	orr.w	r3, r3, #9
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e616:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e61a:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800e61e:	1e53      	subs	r3, r2, #1
 800e620:	b152      	cbz	r2, 800e638 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800e622:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e626:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e62a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e62e:	d001      	beq.n	800e634 <SDMMC_CmdSendCSD+0x40>
 800e630:	0492      	lsls	r2, r2, #18
 800e632:	d504      	bpl.n	800e63e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800e634:	1c59      	adds	r1, r3, #1
 800e636:	d1f4      	bne.n	800e622 <SDMMC_CmdSendCSD+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e638:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e63c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e63e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800e642:	075b      	lsls	r3, r3, #29
 800e644:	d409      	bmi.n	800e65a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e646:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800e64a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e64e:	bf0c      	ite	eq
 800e650:	4b07      	ldreq	r3, [pc, #28]	@ (800e670 <SDMMC_CmdSendCSD+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e652:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e654:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800e658:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e65a:	2004      	movs	r0, #4
 800e65c:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop
 800e664:	200001e0 	.word	0x200001e0
 800e668:	10624dd3 	.word	0x10624dd3
 800e66c:	fffee0c0 	.word	0xfffee0c0
 800e670:	002000c5 	.word	0x002000c5

0800e674 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800e674:	2300      	movs	r3, #0
{
 800e676:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e678:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e67a:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e67c:	4a25      	ldr	r2, [pc, #148]	@ (800e714 <SDMMC_CmdSetRelAdd+0xa0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e67e:	4b26      	ldr	r3, [pc, #152]	@ (800e718 <SDMMC_CmdSetRelAdd+0xa4>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e680:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e682:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e684:	4c25      	ldr	r4, [pc, #148]	@ (800e71c <SDMMC_CmdSetRelAdd+0xa8>)
 800e686:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e68a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e68e:	0a52      	lsrs	r2, r2, #9
 800e690:	f241 3488 	movw	r4, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e694:	f043 0303 	orr.w	r3, r3, #3
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e698:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e69c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e69e:	1e53      	subs	r3, r2, #1
 800e6a0:	b14a      	cbz	r2, 800e6b6 <SDMMC_CmdSetRelAdd+0x42>
    sta_reg = SDMMCx->STA;
 800e6a2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6a4:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e6a8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6ac:	d001      	beq.n	800e6b2 <SDMMC_CmdSetRelAdd+0x3e>
 800e6ae:	0492      	lsls	r2, r2, #18
 800e6b0:	d506      	bpl.n	800e6c0 <SDMMC_CmdSetRelAdd+0x4c>
    if (count-- == 0U)
 800e6b2:	1c5c      	adds	r4, r3, #1
 800e6b4:	d1f5      	bne.n	800e6a2 <SDMMC_CmdSetRelAdd+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e6b6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6be:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e6c2:	075b      	lsls	r3, r3, #29
 800e6c4:	d41b      	bmi.n	800e6fe <SDMMC_CmdSetRelAdd+0x8a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e6c6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e6c8:	07dc      	lsls	r4, r3, #31
 800e6ca:	d405      	bmi.n	800e6d8 <SDMMC_CmdSetRelAdd+0x64>
  return (uint8_t)(SDMMCx->RESPCMD);
 800e6cc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	2b03      	cmp	r3, #3
 800e6d2:	d004      	beq.n	800e6de <SDMMC_CmdSetRelAdd+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6d4:	2001      	movs	r0, #1
 800e6d6:	e7f0      	b.n	800e6ba <SDMMC_CmdSetRelAdd+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6d8:	2301      	movs	r3, #1
 800e6da:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6dc:	e7fa      	b.n	800e6d4 <SDMMC_CmdSetRelAdd+0x60>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e6de:	4b10      	ldr	r3, [pc, #64]	@ (800e720 <SDMMC_CmdSetRelAdd+0xac>)
 800e6e0:	6383      	str	r3, [r0, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800e6e2:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e6e4:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800e6e8:	d010      	beq.n	800e70c <SDMMC_CmdSetRelAdd+0x98>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e6ea:	045a      	lsls	r2, r3, #17
 800e6ec:	d40b      	bmi.n	800e706 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e6ee:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800e6f2:	bf0c      	ite	eq
 800e6f4:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e6f8:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800e6fc:	e7dd      	b.n	800e6ba <SDMMC_CmdSetRelAdd+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6fe:	2304      	movs	r3, #4
 800e700:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e702:	4618      	mov	r0, r3
 800e704:	e7d9      	b.n	800e6ba <SDMMC_CmdSetRelAdd+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e706:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e70a:	e7d6      	b.n	800e6ba <SDMMC_CmdSetRelAdd+0x46>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e70c:	0c1b      	lsrs	r3, r3, #16
 800e70e:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800e710:	e7d3      	b.n	800e6ba <SDMMC_CmdSetRelAdd+0x46>
 800e712:	bf00      	nop
 800e714:	200001e0 	.word	0x200001e0
 800e718:	fffee0c0 	.word	0xfffee0c0
 800e71c:	10624dd3 	.word	0x10624dd3
 800e720:	002000c5 	.word	0x002000c5

0800e724 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e724:	4a4c      	ldr	r2, [pc, #304]	@ (800e858 <SDMMC_CmdSendStatus+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e726:	4b4d      	ldr	r3, [pc, #308]	@ (800e85c <SDMMC_CmdSendStatus+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e728:	6812      	ldr	r2, [r2, #0]
{
 800e72a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e72c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e72e:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e730:	494b      	ldr	r1, [pc, #300]	@ (800e860 <SDMMC_CmdSendStatus+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e732:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e734:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e738:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e73c:	0a52      	lsrs	r2, r2, #9
 800e73e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e742:	f043 030d 	orr.w	r3, r3, #13
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e746:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e74a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e74c:	b152      	cbz	r2, 800e764 <SDMMC_CmdSendStatus+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e74e:	4945      	ldr	r1, [pc, #276]	@ (800e864 <SDMMC_CmdSendStatus+0x140>)
 800e750:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e752:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e754:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e756:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e75a:	d001      	beq.n	800e760 <SDMMC_CmdSendStatus+0x3c>
 800e75c:	0492      	lsls	r2, r2, #18
 800e75e:	d506      	bpl.n	800e76e <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800e760:	1c5c      	adds	r4, r3, #1
 800e762:	d1f6      	bne.n	800e752 <SDMMC_CmdSendStatus+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e764:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e76c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e76e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e770:	075c      	lsls	r4, r3, #29
 800e772:	d43c      	bmi.n	800e7ee <SDMMC_CmdSendStatus+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e774:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e776:	07d9      	lsls	r1, r3, #31
 800e778:	d407      	bmi.n	800e78a <SDMMC_CmdSendStatus+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e77a:	4b3b      	ldr	r3, [pc, #236]	@ (800e868 <SDMMC_CmdSendStatus+0x144>)
 800e77c:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e77e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e780:	b2db      	uxtb	r3, r3
 800e782:	2b0d      	cmp	r3, #13
 800e784:	d004      	beq.n	800e790 <SDMMC_CmdSendStatus+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e786:	2001      	movs	r0, #1
 800e788:	e7ee      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e78a:	2301      	movs	r3, #1
 800e78c:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e78e:	e7fa      	b.n	800e786 <SDMMC_CmdSendStatus+0x62>
  return (*(__IO uint32_t *) tmp);
 800e790:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e792:	4836      	ldr	r0, [pc, #216]	@ (800e86c <SDMMC_CmdSendStatus+0x148>)
 800e794:	4018      	ands	r0, r3
 800e796:	2800      	cmp	r0, #0
 800e798:	d0e6      	beq.n	800e768 <SDMMC_CmdSendStatus+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	db2b      	blt.n	800e7f6 <SDMMC_CmdSendStatus+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e79e:	005a      	lsls	r2, r3, #1
 800e7a0:	d42c      	bmi.n	800e7fc <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e7a2:	009c      	lsls	r4, r3, #2
 800e7a4:	d42c      	bmi.n	800e800 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e7a6:	00d9      	lsls	r1, r3, #3
 800e7a8:	d42c      	bmi.n	800e804 <SDMMC_CmdSendStatus+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e7aa:	011a      	lsls	r2, r3, #4
 800e7ac:	d42d      	bmi.n	800e80a <SDMMC_CmdSendStatus+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e7ae:	015c      	lsls	r4, r3, #5
 800e7b0:	d42e      	bmi.n	800e810 <SDMMC_CmdSendStatus+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e7b2:	01d9      	lsls	r1, r3, #7
 800e7b4:	d42f      	bmi.n	800e816 <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e7b6:	021a      	lsls	r2, r3, #8
 800e7b8:	d430      	bmi.n	800e81c <SDMMC_CmdSendStatus+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e7ba:	025c      	lsls	r4, r3, #9
 800e7bc:	d431      	bmi.n	800e822 <SDMMC_CmdSendStatus+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e7be:	0299      	lsls	r1, r3, #10
 800e7c0:	d43b      	bmi.n	800e83a <SDMMC_CmdSendStatus+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e7c2:	02da      	lsls	r2, r3, #11
 800e7c4:	d436      	bmi.n	800e834 <SDMMC_CmdSendStatus+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e7c6:	035c      	lsls	r4, r3, #13
 800e7c8:	d431      	bmi.n	800e82e <SDMMC_CmdSendStatus+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e7ca:	0399      	lsls	r1, r3, #14
 800e7cc:	d42c      	bmi.n	800e828 <SDMMC_CmdSendStatus+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e7ce:	03da      	lsls	r2, r3, #15
 800e7d0:	d43f      	bmi.n	800e852 <SDMMC_CmdSendStatus+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e7d2:	041c      	lsls	r4, r3, #16
 800e7d4:	d43a      	bmi.n	800e84c <SDMMC_CmdSendStatus+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e7d6:	0459      	lsls	r1, r3, #17
 800e7d8:	d435      	bmi.n	800e846 <SDMMC_CmdSendStatus+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e7da:	049a      	lsls	r2, r3, #18
 800e7dc:	d430      	bmi.n	800e840 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e7de:	f013 0f08 	tst.w	r3, #8
 800e7e2:	bf0c      	ite	eq
 800e7e4:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e7e8:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e7ec:	e7bc      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7ee:	2304      	movs	r3, #4
 800e7f0:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	e7b8      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e7f6:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e7fa:	e7b5      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e7fc:	2040      	movs	r0, #64	@ 0x40
 800e7fe:	e7b3      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e800:	2080      	movs	r0, #128	@ 0x80
 800e802:	e7b1      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e804:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e808:	e7ae      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e80a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e80e:	e7ab      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e810:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e814:	e7a8      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e816:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e81a:	e7a5      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e81c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e820:	e7a2      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e822:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e826:	e79f      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e828:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e82c:	e79c      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e82e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e832:	e799      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CC_ERR;
 800e834:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e838:	e796      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e83a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e83e:	e793      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800e840:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e844:	e790      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e846:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e84a:	e78d      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e84c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e850:	e78a      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e852:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e856:	e787      	b.n	800e768 <SDMMC_CmdSendStatus+0x44>
 800e858:	200001e0 	.word	0x200001e0
 800e85c:	fffee0c0 	.word	0xfffee0c0
 800e860:	10624dd3 	.word	0x10624dd3
 800e864:	00200045 	.word	0x00200045
 800e868:	002000c5 	.word	0x002000c5
 800e86c:	fdffe008 	.word	0xfdffe008

0800e870 <SDMMC_CmdStatusRegister>:
  SDMMCx->ARG = Command->Argument;
 800e870:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e872:	4a4d      	ldr	r2, [pc, #308]	@ (800e9a8 <SDMMC_CmdStatusRegister+0x138>)
 800e874:	494d      	ldr	r1, [pc, #308]	@ (800e9ac <SDMMC_CmdStatusRegister+0x13c>)
 800e876:	6812      	ldr	r2, [r2, #0]
{
 800e878:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e87a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e87c:	68c4      	ldr	r4, [r0, #12]
 800e87e:	4b4c      	ldr	r3, [pc, #304]	@ (800e9b0 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e880:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e884:	4023      	ands	r3, r4
 800e886:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e88a:	0a52      	lsrs	r2, r2, #9
 800e88c:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e890:	f043 030d 	orr.w	r3, r3, #13
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e894:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e898:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e89a:	b152      	cbz	r2, 800e8b2 <SDMMC_CmdStatusRegister+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e89c:	4945      	ldr	r1, [pc, #276]	@ (800e9b4 <SDMMC_CmdStatusRegister+0x144>)
 800e89e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e8a0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e8a2:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e8a4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e8a8:	d001      	beq.n	800e8ae <SDMMC_CmdStatusRegister+0x3e>
 800e8aa:	0492      	lsls	r2, r2, #18
 800e8ac:	d506      	bpl.n	800e8bc <SDMMC_CmdStatusRegister+0x4c>
    if (count-- == 0U)
 800e8ae:	1c5c      	adds	r4, r3, #1
 800e8b0:	d1f6      	bne.n	800e8a0 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e8b2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ba:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8bc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e8be:	075c      	lsls	r4, r3, #29
 800e8c0:	d43c      	bmi.n	800e93c <SDMMC_CmdStatusRegister+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e8c2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e8c4:	07d9      	lsls	r1, r3, #31
 800e8c6:	d407      	bmi.n	800e8d8 <SDMMC_CmdStatusRegister+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e8c8:	4b3b      	ldr	r3, [pc, #236]	@ (800e9b8 <SDMMC_CmdStatusRegister+0x148>)
 800e8ca:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e8cc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	2b0d      	cmp	r3, #13
 800e8d2:	d004      	beq.n	800e8de <SDMMC_CmdStatusRegister+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8d4:	2001      	movs	r0, #1
 800e8d6:	e7ee      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e8d8:	2301      	movs	r3, #1
 800e8da:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8dc:	e7fa      	b.n	800e8d4 <SDMMC_CmdStatusRegister+0x64>
  return (*(__IO uint32_t *) tmp);
 800e8de:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e8e0:	4836      	ldr	r0, [pc, #216]	@ (800e9bc <SDMMC_CmdStatusRegister+0x14c>)
 800e8e2:	4018      	ands	r0, r3
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d0e6      	beq.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	db2b      	blt.n	800e944 <SDMMC_CmdStatusRegister+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e8ec:	005a      	lsls	r2, r3, #1
 800e8ee:	d42c      	bmi.n	800e94a <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e8f0:	009c      	lsls	r4, r3, #2
 800e8f2:	d42c      	bmi.n	800e94e <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e8f4:	00d9      	lsls	r1, r3, #3
 800e8f6:	d42c      	bmi.n	800e952 <SDMMC_CmdStatusRegister+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e8f8:	011a      	lsls	r2, r3, #4
 800e8fa:	d42d      	bmi.n	800e958 <SDMMC_CmdStatusRegister+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e8fc:	015c      	lsls	r4, r3, #5
 800e8fe:	d42e      	bmi.n	800e95e <SDMMC_CmdStatusRegister+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e900:	01d9      	lsls	r1, r3, #7
 800e902:	d42f      	bmi.n	800e964 <SDMMC_CmdStatusRegister+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e904:	021a      	lsls	r2, r3, #8
 800e906:	d430      	bmi.n	800e96a <SDMMC_CmdStatusRegister+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e908:	025c      	lsls	r4, r3, #9
 800e90a:	d431      	bmi.n	800e970 <SDMMC_CmdStatusRegister+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e90c:	0299      	lsls	r1, r3, #10
 800e90e:	d43b      	bmi.n	800e988 <SDMMC_CmdStatusRegister+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e910:	02da      	lsls	r2, r3, #11
 800e912:	d436      	bmi.n	800e982 <SDMMC_CmdStatusRegister+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e914:	035c      	lsls	r4, r3, #13
 800e916:	d431      	bmi.n	800e97c <SDMMC_CmdStatusRegister+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e918:	0399      	lsls	r1, r3, #14
 800e91a:	d42c      	bmi.n	800e976 <SDMMC_CmdStatusRegister+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e91c:	03da      	lsls	r2, r3, #15
 800e91e:	d43f      	bmi.n	800e9a0 <SDMMC_CmdStatusRegister+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e920:	041c      	lsls	r4, r3, #16
 800e922:	d43a      	bmi.n	800e99a <SDMMC_CmdStatusRegister+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e924:	0459      	lsls	r1, r3, #17
 800e926:	d435      	bmi.n	800e994 <SDMMC_CmdStatusRegister+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e928:	049a      	lsls	r2, r3, #18
 800e92a:	d430      	bmi.n	800e98e <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e92c:	f013 0f08 	tst.w	r3, #8
 800e930:	bf0c      	ite	eq
 800e932:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e936:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e93a:	e7bc      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e93c:	2304      	movs	r3, #4
 800e93e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e940:	4618      	mov	r0, r3
 800e942:	e7b8      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e944:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e948:	e7b5      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e94a:	2040      	movs	r0, #64	@ 0x40
 800e94c:	e7b3      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e94e:	2080      	movs	r0, #128	@ 0x80
 800e950:	e7b1      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e952:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e956:	e7ae      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e958:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e95c:	e7ab      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e95e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e962:	e7a8      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e964:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e968:	e7a5      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e96a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e96e:	e7a2      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e970:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e974:	e79f      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e976:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e97a:	e79c      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e97c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e980:	e799      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CC_ERR;
 800e982:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e986:	e796      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e988:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e98c:	e793      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800e98e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e992:	e790      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e994:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e998:	e78d      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e99a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e99e:	e78a      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e9a0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e9a4:	e787      	b.n	800e8b6 <SDMMC_CmdStatusRegister+0x46>
 800e9a6:	bf00      	nop
 800e9a8:	200001e0 	.word	0x200001e0
 800e9ac:	10624dd3 	.word	0x10624dd3
 800e9b0:	fffee0c0 	.word	0xfffee0c0
 800e9b4:	00200045 	.word	0x00200045
 800e9b8:	002000c5 	.word	0x002000c5
 800e9bc:	fdffe008 	.word	0xfdffe008

0800e9c0 <SDMMC_CmdVoltageSwitch>:
  SDMMCx->ARG = Command->Argument;
 800e9c0:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9c2:	4a4d      	ldr	r2, [pc, #308]	@ (800eaf8 <SDMMC_CmdVoltageSwitch+0x138>)
 800e9c4:	494d      	ldr	r1, [pc, #308]	@ (800eafc <SDMMC_CmdVoltageSwitch+0x13c>)
 800e9c6:	6812      	ldr	r2, [r2, #0]
{
 800e9c8:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e9ca:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9cc:	68c4      	ldr	r4, [r0, #12]
 800e9ce:	4b4c      	ldr	r3, [pc, #304]	@ (800eb00 <SDMMC_CmdVoltageSwitch+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9d0:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9d4:	4023      	ands	r3, r4
 800e9d6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9da:	0a52      	lsrs	r2, r2, #9
 800e9dc:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9e0:	f043 030b 	orr.w	r3, r3, #11
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9e8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e9ea:	b152      	cbz	r2, 800ea02 <SDMMC_CmdVoltageSwitch+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e9ec:	4945      	ldr	r1, [pc, #276]	@ (800eb04 <SDMMC_CmdVoltageSwitch+0x144>)
 800e9ee:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e9f0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e9f2:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e9f4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e9f8:	d001      	beq.n	800e9fe <SDMMC_CmdVoltageSwitch+0x3e>
 800e9fa:	0492      	lsls	r2, r2, #18
 800e9fc:	d506      	bpl.n	800ea0c <SDMMC_CmdVoltageSwitch+0x4c>
    if (count-- == 0U)
 800e9fe:	1c5c      	adds	r4, r3, #1
 800ea00:	d1f6      	bne.n	800e9f0 <SDMMC_CmdVoltageSwitch+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800ea02:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800ea06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea0a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea0c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ea0e:	075c      	lsls	r4, r3, #29
 800ea10:	d43c      	bmi.n	800ea8c <SDMMC_CmdVoltageSwitch+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea12:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ea14:	07d9      	lsls	r1, r3, #31
 800ea16:	d407      	bmi.n	800ea28 <SDMMC_CmdVoltageSwitch+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea18:	4b3b      	ldr	r3, [pc, #236]	@ (800eb08 <SDMMC_CmdVoltageSwitch+0x148>)
 800ea1a:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ea1c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b0b      	cmp	r3, #11
 800ea22:	d004      	beq.n	800ea2e <SDMMC_CmdVoltageSwitch+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea24:	2001      	movs	r0, #1
 800ea26:	e7ee      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea28:	2301      	movs	r3, #1
 800ea2a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea2c:	e7fa      	b.n	800ea24 <SDMMC_CmdVoltageSwitch+0x64>
  return (*(__IO uint32_t *) tmp);
 800ea2e:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ea30:	4836      	ldr	r0, [pc, #216]	@ (800eb0c <SDMMC_CmdVoltageSwitch+0x14c>)
 800ea32:	4018      	ands	r0, r3
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d0e6      	beq.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	db2b      	blt.n	800ea94 <SDMMC_CmdVoltageSwitch+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ea3c:	005a      	lsls	r2, r3, #1
 800ea3e:	d42c      	bmi.n	800ea9a <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ea40:	009c      	lsls	r4, r3, #2
 800ea42:	d42c      	bmi.n	800ea9e <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ea44:	00d9      	lsls	r1, r3, #3
 800ea46:	d42c      	bmi.n	800eaa2 <SDMMC_CmdVoltageSwitch+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ea48:	011a      	lsls	r2, r3, #4
 800ea4a:	d42d      	bmi.n	800eaa8 <SDMMC_CmdVoltageSwitch+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ea4c:	015c      	lsls	r4, r3, #5
 800ea4e:	d42e      	bmi.n	800eaae <SDMMC_CmdVoltageSwitch+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ea50:	01d9      	lsls	r1, r3, #7
 800ea52:	d42f      	bmi.n	800eab4 <SDMMC_CmdVoltageSwitch+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ea54:	021a      	lsls	r2, r3, #8
 800ea56:	d430      	bmi.n	800eaba <SDMMC_CmdVoltageSwitch+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ea58:	025c      	lsls	r4, r3, #9
 800ea5a:	d431      	bmi.n	800eac0 <SDMMC_CmdVoltageSwitch+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ea5c:	0299      	lsls	r1, r3, #10
 800ea5e:	d43b      	bmi.n	800ead8 <SDMMC_CmdVoltageSwitch+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ea60:	02da      	lsls	r2, r3, #11
 800ea62:	d436      	bmi.n	800ead2 <SDMMC_CmdVoltageSwitch+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ea64:	035c      	lsls	r4, r3, #13
 800ea66:	d431      	bmi.n	800eacc <SDMMC_CmdVoltageSwitch+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ea68:	0399      	lsls	r1, r3, #14
 800ea6a:	d42c      	bmi.n	800eac6 <SDMMC_CmdVoltageSwitch+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ea6c:	03da      	lsls	r2, r3, #15
 800ea6e:	d43f      	bmi.n	800eaf0 <SDMMC_CmdVoltageSwitch+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ea70:	041c      	lsls	r4, r3, #16
 800ea72:	d43a      	bmi.n	800eaea <SDMMC_CmdVoltageSwitch+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ea74:	0459      	lsls	r1, r3, #17
 800ea76:	d435      	bmi.n	800eae4 <SDMMC_CmdVoltageSwitch+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ea78:	049a      	lsls	r2, r3, #18
 800ea7a:	d430      	bmi.n	800eade <SDMMC_CmdVoltageSwitch+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ea7c:	f013 0f08 	tst.w	r3, #8
 800ea80:	bf0c      	ite	eq
 800ea82:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800ea86:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800ea8a:	e7bc      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea90:	4618      	mov	r0, r3
 800ea92:	e7b8      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ea94:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800ea98:	e7b5      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ea9a:	2040      	movs	r0, #64	@ 0x40
 800ea9c:	e7b3      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ea9e:	2080      	movs	r0, #128	@ 0x80
 800eaa0:	e7b1      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800eaa2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800eaa6:	e7ae      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800eaa8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800eaac:	e7ab      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800eaae:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800eab2:	e7a8      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800eab4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800eab8:	e7a5      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eaba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800eabe:	e7a2      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eac0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800eac4:	e79f      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eac6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800eaca:	e79c      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800eacc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800ead0:	e799      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CC_ERR;
 800ead2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ead6:	e796      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ead8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800eadc:	e793      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800eade:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800eae2:	e790      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eae4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800eae8:	e78d      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eaea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800eaee:	e78a      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eaf0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800eaf4:	e787      	b.n	800ea06 <SDMMC_CmdVoltageSwitch+0x46>
 800eaf6:	bf00      	nop
 800eaf8:	200001e0 	.word	0x200001e0
 800eafc:	10624dd3 	.word	0x10624dd3
 800eb00:	fffee0c0 	.word	0xfffee0c0
 800eb04:	00200045 	.word	0x00200045
 800eb08:	002000c5 	.word	0x002000c5
 800eb0c:	fdffe008 	.word	0xfdffe008

0800eb10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb10:	4684      	mov	ip, r0
 800eb12:	b084      	sub	sp, #16
 800eb14:	a801      	add	r0, sp, #4
 800eb16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eb1a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800eb1e:	4b17      	ldr	r3, [pc, #92]	@ (800eb7c <USB_CoreInit+0x6c>)
 800eb20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb24:	f8cc 200c 	str.w	r2, [ip, #12]
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	d024      	beq.n	800eb76 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb2c:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800eb30:	2a00      	cmp	r2, #0
 800eb32:	daf9      	bge.n	800eb28 <USB_CoreInit+0x18>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eb34:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800eb38:	4a10      	ldr	r2, [pc, #64]	@ (800eb7c <USB_CoreInit+0x6c>)
 800eb3a:	f043 0301 	orr.w	r3, r3, #1
 800eb3e:	f8cc 3010 	str.w	r3, [ip, #16]

  do
  {
    if (++count > 200000U)
 800eb42:	3a01      	subs	r2, #1
 800eb44:	d017      	beq.n	800eb76 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eb46:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800eb4a:	f013 0301 	ands.w	r3, r3, #1
 800eb4e:	d1f8      	bne.n	800eb42 <USB_CoreInit+0x32>

  return HAL_OK;
 800eb50:	4618      	mov	r0, r3
  if (cfg.battery_charging_enable == 0U)
 800eb52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb54:	b93b      	cbnz	r3, 800eb66 <USB_CoreInit+0x56>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eb56:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800eb5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb5e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
}
 800eb62:	b004      	add	sp, #16
 800eb64:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb66:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800eb6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb6e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
}
 800eb72:	b004      	add	sp, #16
 800eb74:	4770      	bx	lr
      return HAL_TIMEOUT;
 800eb76:	2003      	movs	r0, #3
 800eb78:	e7eb      	b.n	800eb52 <USB_CoreInit+0x42>
 800eb7a:	bf00      	nop
 800eb7c:	00030d41 	.word	0x00030d41

0800eb80 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800eb80:	2a02      	cmp	r2, #2
{
 800eb82:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800eb84:	d00a      	beq.n	800eb9c <USB_SetTurnaroundTime+0x1c>
 800eb86:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800eb8a:	68da      	ldr	r2, [r3, #12]
 800eb8c:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 800eb90:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eb92:	68da      	ldr	r2, [r3, #12]
 800eb94:	430a      	orrs	r2, r1
}
 800eb96:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eb98:	60da      	str	r2, [r3, #12]
}
 800eb9a:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800eb9c:	4a26      	ldr	r2, [pc, #152]	@ (800ec38 <USB_SetTurnaroundTime+0xb8>)
 800eb9e:	4827      	ldr	r0, [pc, #156]	@ (800ec3c <USB_SetTurnaroundTime+0xbc>)
 800eba0:	440a      	add	r2, r1
 800eba2:	4282      	cmp	r2, r0
 800eba4:	d932      	bls.n	800ec0c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800eba6:	4a26      	ldr	r2, [pc, #152]	@ (800ec40 <USB_SetTurnaroundTime+0xc0>)
 800eba8:	4826      	ldr	r0, [pc, #152]	@ (800ec44 <USB_SetTurnaroundTime+0xc4>)
 800ebaa:	440a      	add	r2, r1
 800ebac:	4282      	cmp	r2, r0
 800ebae:	d930      	bls.n	800ec12 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ebb0:	4825      	ldr	r0, [pc, #148]	@ (800ec48 <USB_SetTurnaroundTime+0xc8>)
 800ebb2:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 800ebb6:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 800ebba:	4282      	cmp	r2, r0
 800ebbc:	d92c      	bls.n	800ec18 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ebbe:	4823      	ldr	r0, [pc, #140]	@ (800ec4c <USB_SetTurnaroundTime+0xcc>)
 800ebc0:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 800ebc4:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 800ebc8:	4282      	cmp	r2, r0
 800ebca:	d328      	bcc.n	800ec1e <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ebcc:	4a20      	ldr	r2, [pc, #128]	@ (800ec50 <USB_SetTurnaroundTime+0xd0>)
 800ebce:	4821      	ldr	r0, [pc, #132]	@ (800ec54 <USB_SetTurnaroundTime+0xd4>)
 800ebd0:	440a      	add	r2, r1
 800ebd2:	4282      	cmp	r2, r0
 800ebd4:	d926      	bls.n	800ec24 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ebd6:	4a20      	ldr	r2, [pc, #128]	@ (800ec58 <USB_SetTurnaroundTime+0xd8>)
 800ebd8:	4820      	ldr	r0, [pc, #128]	@ (800ec5c <USB_SetTurnaroundTime+0xdc>)
 800ebda:	440a      	add	r2, r1
 800ebdc:	4282      	cmp	r2, r0
 800ebde:	d324      	bcc.n	800ec2a <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ebe0:	4a1f      	ldr	r2, [pc, #124]	@ (800ec60 <USB_SetTurnaroundTime+0xe0>)
 800ebe2:	4820      	ldr	r0, [pc, #128]	@ (800ec64 <USB_SetTurnaroundTime+0xe4>)
 800ebe4:	440a      	add	r2, r1
 800ebe6:	4282      	cmp	r2, r0
 800ebe8:	d3cd      	bcc.n	800eb86 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ebea:	481f      	ldr	r0, [pc, #124]	@ (800ec68 <USB_SetTurnaroundTime+0xe8>)
 800ebec:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 800ebf0:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 800ebf4:	4282      	cmp	r2, r0
 800ebf6:	d31b      	bcc.n	800ec30 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ebf8:	4a1c      	ldr	r2, [pc, #112]	@ (800ec6c <USB_SetTurnaroundTime+0xec>)
 800ebfa:	481d      	ldr	r0, [pc, #116]	@ (800ec70 <USB_SetTurnaroundTime+0xf0>)
 800ebfc:	440a      	add	r2, r1
 800ebfe:	4282      	cmp	r2, r0
 800ec00:	bf2c      	ite	cs
 800ec02:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 800ec06:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 800ec0a:	e7be      	b.n	800eb8a <USB_SetTurnaroundTime+0xa>
 800ec0c:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 800ec10:	e7bb      	b.n	800eb8a <USB_SetTurnaroundTime+0xa>
 800ec12:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800ec16:	e7b8      	b.n	800eb8a <USB_SetTurnaroundTime+0xa>
 800ec18:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 800ec1c:	e7b5      	b.n	800eb8a <USB_SetTurnaroundTime+0xa>
 800ec1e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800ec22:	e7b2      	b.n	800eb8a <USB_SetTurnaroundTime+0xa>
 800ec24:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 800ec28:	e7af      	b.n	800eb8a <USB_SetTurnaroundTime+0xa>
 800ec2a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800ec2e:	e7ac      	b.n	800eb8a <USB_SetTurnaroundTime+0xa>
 800ec30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ec34:	e7a9      	b.n	800eb8a <USB_SetTurnaroundTime+0xa>
 800ec36:	bf00      	nop
 800ec38:	ff275340 	.word	0xff275340
 800ec3c:	000c34ff 	.word	0x000c34ff
 800ec40:	ff1b1e40 	.word	0xff1b1e40
 800ec44:	000f423f 	.word	0x000f423f
 800ec48:	00124f7f 	.word	0x00124f7f
 800ec4c:	0013d620 	.word	0x0013d620
 800ec50:	fee5b660 	.word	0xfee5b660
 800ec54:	0016e35f 	.word	0x0016e35f
 800ec58:	feced300 	.word	0xfeced300
 800ec5c:	001b7740 	.word	0x001b7740
 800ec60:	feb35bc0 	.word	0xfeb35bc0
 800ec64:	002191c0 	.word	0x002191c0
 800ec68:	00387520 	.word	0x00387520
 800ec6c:	fe5954e0 	.word	0xfe5954e0
 800ec70:	00419ce0 	.word	0x00419ce0

0800ec74 <USB_EnableGlobalInt>:
{
 800ec74:	4603      	mov	r3, r0
}
 800ec76:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ec78:	689a      	ldr	r2, [r3, #8]
 800ec7a:	f042 0201 	orr.w	r2, r2, #1
 800ec7e:	609a      	str	r2, [r3, #8]
}
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop

0800ec84 <USB_DisableGlobalInt>:
{
 800ec84:	4603      	mov	r3, r0
}
 800ec86:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ec88:	689a      	ldr	r2, [r3, #8]
 800ec8a:	f022 0201 	bic.w	r2, r2, #1
 800ec8e:	609a      	str	r2, [r3, #8]
}
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop

0800ec94 <USB_SetCurrentMode>:
{
 800ec94:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ec96:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ec98:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ec9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ec9e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800eca0:	d00b      	beq.n	800ecba <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800eca2:	b941      	cbnz	r1, 800ecb6 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eca4:	68c3      	ldr	r3, [r0, #12]
 800eca6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecaa:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800ecac:	2032      	movs	r0, #50	@ 0x32
 800ecae:	f7f8 fcb5 	bl	800761c <HAL_Delay>
  return HAL_OK;
 800ecb2:	2000      	movs	r0, #0
}
 800ecb4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800ecb6:	2001      	movs	r0, #1
}
 800ecb8:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ecba:	68c3      	ldr	r3, [r0, #12]
 800ecbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ecc0:	60c3      	str	r3, [r0, #12]
 800ecc2:	e7f3      	b.n	800ecac <USB_SetCurrentMode+0x18>

0800ecc4 <USB_DevInit>:
{
 800ecc4:	b084      	sub	sp, #16
 800ecc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecc8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ecca:	ac06      	add	r4, sp, #24
 800eccc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 800ecd6:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 800ecd8:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 800ecdc:	460c      	mov	r4, r1
 800ecde:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ece2:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 800ece6:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 800ecea:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 800ecee:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 800ecf2:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 800ecf6:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 800ecfa:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 800ecfe:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 800ed02:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 800ed06:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 800ed0a:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 800ed0e:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 800ed12:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800ed16:	2d00      	cmp	r5, #0
 800ed18:	f040 80a1 	bne.w	800ee5e <USB_DevInit+0x19a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ed1c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800ed20:	f042 0202 	orr.w	r2, r2, #2
 800ed24:	f8cc 2004 	str.w	r2, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ed28:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800ed2a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800ed2e:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ed30:	6802      	ldr	r2, [r0, #0]
 800ed32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ed36:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ed38:	6802      	ldr	r2, [r0, #0]
 800ed3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ed3e:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0U;
 800ed40:	2200      	movs	r2, #0
 800ed42:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ed46:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800ed4a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= speed;
 800ed4e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800ed52:	f042 0203 	orr.w	r2, r2, #3
 800ed56:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed5a:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800ed5e:	611a      	str	r2, [r3, #16]
 800ed60:	4a43      	ldr	r2, [pc, #268]	@ (800ee70 <USB_DevInit+0x1ac>)
    if (++count > 200000U)
 800ed62:	3a01      	subs	r2, #1
 800ed64:	f000 8082 	beq.w	800ee6c <USB_DevInit+0x1a8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed68:	6918      	ldr	r0, [r3, #16]
 800ed6a:	f010 0020 	ands.w	r0, r0, #32
 800ed6e:	d1f8      	bne.n	800ed62 <USB_DevInit+0x9e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed70:	2210      	movs	r2, #16
 800ed72:	611a      	str	r2, [r3, #16]
 800ed74:	4a3e      	ldr	r2, [pc, #248]	@ (800ee70 <USB_DevInit+0x1ac>)
    if (++count > 200000U)
 800ed76:	3a01      	subs	r2, #1
 800ed78:	d076      	beq.n	800ee68 <USB_DevInit+0x1a4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed7a:	6919      	ldr	r1, [r3, #16]
 800ed7c:	06c9      	lsls	r1, r1, #27
 800ed7e:	d4fa      	bmi.n	800ed76 <USB_DevInit+0xb2>
  USBx_DEVICE->DIEPMSK = 0U;
 800ed80:	2100      	movs	r1, #0
 800ed82:	f8cc 1010 	str.w	r1, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ed86:	f8cc 1014 	str.w	r1, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ed8a:	f8cc 101c 	str.w	r1, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed8e:	b1fc      	cbz	r4, 800edd0 <USB_DevInit+0x10c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ed90:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 800ed94:	2e00      	cmp	r6, #0
 800ed96:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 800ed9a:	db14      	blt.n	800edc6 <USB_DevInit+0x102>
      USBx_INEP(i)->DIEPCTL = 0U;
 800ed9c:	2600      	movs	r6, #0
 800ed9e:	6016      	str	r6, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eda0:	f04f 0e00 	mov.w	lr, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eda4:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eda8:	3101      	adds	r1, #1
 800edaa:	42a1      	cmp	r1, r4
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800edac:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800edb0:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800edb2:	f102 0220 	add.w	r2, r2, #32
 800edb6:	d030      	beq.n	800ee1a <USB_DevInit+0x156>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800edb8:	6816      	ldr	r6, [r2, #0]
 800edba:	2e00      	cmp	r6, #0
 800edbc:	daee      	bge.n	800ed9c <USB_DevInit+0xd8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800edbe:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 800edc2:	6016      	str	r6, [r2, #0]
 800edc4:	e7f0      	b.n	800eda8 <USB_DevInit+0xe4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800edc6:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 800edca:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
 800edce:	e7e7      	b.n	800eda0 <USB_DevInit+0xdc>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800edd0:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800edd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800edd8:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx->GINTMSK = 0U;
 800eddc:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800edde:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
  USBx->GINTMSK = 0U;
 800ede2:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ede4:	615a      	str	r2, [r3, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ede6:	6999      	ldr	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ede8:	4a22      	ldr	r2, [pc, #136]	@ (800ee74 <USB_DevInit+0x1b0>)
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800edea:	f041 0110 	orr.w	r1, r1, #16
 800edee:	6199      	str	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800edf0:	6999      	ldr	r1, [r3, #24]
 800edf2:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 800edf4:	990c      	ldr	r1, [sp, #48]	@ 0x30
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800edf6:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 800edf8:	b119      	cbz	r1, 800ee02 <USB_DevInit+0x13e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800edfa:	699a      	ldr	r2, [r3, #24]
 800edfc:	f042 0208 	orr.w	r2, r2, #8
 800ee00:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ee02:	2d01      	cmp	r5, #1
 800ee04:	d105      	bne.n	800ee12 <USB_DevInit+0x14e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ee06:	699a      	ldr	r2, [r3, #24]
 800ee08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800ee0c:	f042 0204 	orr.w	r2, r2, #4
 800ee10:	619a      	str	r2, [r3, #24]
}
 800ee12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ee16:	b004      	add	sp, #16
 800ee18:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee1a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ee1e:	2900      	cmp	r1, #0
 800ee20:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 800ee24:	db15      	blt.n	800ee52 <USB_DevInit+0x18e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ee26:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ee28:	2600      	movs	r6, #0
 800ee2a:	6016      	str	r6, [r2, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ee2c:	f04f 0e00 	mov.w	lr, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ee30:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ee34:	3101      	adds	r1, #1
 800ee36:	42a1      	cmp	r1, r4
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ee38:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ee3c:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ee3e:	f102 0220 	add.w	r2, r2, #32
 800ee42:	d0c5      	beq.n	800edd0 <USB_DevInit+0x10c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee44:	6816      	ldr	r6, [r2, #0]
 800ee46:	2e00      	cmp	r6, #0
 800ee48:	daee      	bge.n	800ee28 <USB_DevInit+0x164>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ee4a:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 800ee4e:	6016      	str	r6, [r2, #0]
 800ee50:	e7f0      	b.n	800ee34 <USB_DevInit+0x170>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ee52:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800ee56:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	e7e6      	b.n	800ee2c <USB_DevInit+0x168>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ee5e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800ee60:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800ee64:	6382      	str	r2, [r0, #56]	@ 0x38
 800ee66:	e76b      	b.n	800ed40 <USB_DevInit+0x7c>
    ret = HAL_ERROR;
 800ee68:	2001      	movs	r0, #1
 800ee6a:	e789      	b.n	800ed80 <USB_DevInit+0xbc>
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	e77f      	b.n	800ed70 <USB_DevInit+0xac>
 800ee70:	00030d41 	.word	0x00030d41
 800ee74:	803c3800 	.word	0x803c3800

0800ee78 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ee78:	0189      	lsls	r1, r1, #6
 800ee7a:	f041 0120 	orr.w	r1, r1, #32
 800ee7e:	4a06      	ldr	r2, [pc, #24]	@ (800ee98 <USB_FlushTxFifo+0x20>)
 800ee80:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800ee82:	3a01      	subs	r2, #1
 800ee84:	d005      	beq.n	800ee92 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ee86:	6903      	ldr	r3, [r0, #16]
 800ee88:	f013 0320 	ands.w	r3, r3, #32
 800ee8c:	d1f9      	bne.n	800ee82 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800ee8e:	4618      	mov	r0, r3
 800ee90:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ee92:	2003      	movs	r0, #3
}
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	00030d41 	.word	0x00030d41

0800ee9c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ee9c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
    speed = 0xFU;
 800eea0:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eea4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
}
 800eea8:	bf14      	ite	ne
 800eeaa:	2002      	movne	r0, #2
 800eeac:	200f      	moveq	r0, #15
 800eeae:	4770      	bx	lr

0800eeb0 <USB_ActivateEndpoint>:
{
 800eeb0:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800eeb2:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	f002 0e0f 	and.w	lr, r2, #15
 800eeba:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 800eebe:	f891 e001 	ldrb.w	lr, [r1, #1]
 800eec2:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eec6:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eeca:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800eece:	d01a      	beq.n	800ef06 <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eed0:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800eed4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800eed8:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eedc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800eee0:	041b      	lsls	r3, r3, #16
 800eee2:	d40e      	bmi.n	800ef02 <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eee4:	688b      	ldr	r3, [r1, #8]
 800eee6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 800eeea:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eeec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eef0:	4323      	orrs	r3, r4
 800eef2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800eef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eefa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eefe:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800ef02:	2000      	movs	r0, #0
 800ef04:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ef06:	f8dc 401c 	ldr.w	r4, [ip, #28]
 800ef0a:	4323      	orrs	r3, r4
 800ef0c:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ef10:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800ef14:	041c      	lsls	r4, r3, #16
 800ef16:	d4f4      	bmi.n	800ef02 <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef18:	688b      	ldr	r3, [r1, #8]
 800ef1a:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef1e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef24:	4323      	orrs	r3, r4
 800ef26:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800ef2a:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800ef2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef36:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	bf00      	nop

0800ef40 <USB_DeactivateEndpoint>:
{
 800ef40:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800ef42:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800ef44:	7849      	ldrb	r1, [r1, #1]
 800ef46:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef48:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800ef4c:	d02c      	beq.n	800efa8 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef4e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ef52:	2900      	cmp	r1, #0
 800ef54:	db1b      	blt.n	800ef8e <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef56:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800ef5a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800ef5e:	f002 020f 	and.w	r2, r2, #15
 800ef62:	fa01 f202 	lsl.w	r2, r1, r2
 800ef66:	ea24 0402 	bic.w	r4, r4, r2
 800ef6a:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef6e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ef72:	4922      	ldr	r1, [pc, #136]	@ (800effc <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef74:	ea24 0202 	bic.w	r2, r4, r2
 800ef78:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ef7c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 800ef80:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ef84:	4011      	ands	r1, r2
}
 800ef86:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ef88:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 800ef8c:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ef8e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ef92:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800ef96:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ef9a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ef9e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800efa2:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 800efa6:	e7d6      	b.n	800ef56 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800efa8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800efac:	2900      	cmp	r1, #0
 800efae:	da0b      	bge.n	800efc8 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800efb0:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800efb4:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800efb8:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800efbc:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800efc0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800efc4:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800efc8:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 800efcc:	f002 040f 	and.w	r4, r2, #15
 800efd0:	2201      	movs	r2, #1
 800efd2:	40a2      	lsls	r2, r4
 800efd4:	ea21 0102 	bic.w	r1, r1, r2
 800efd8:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800efdc:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800efe0:	4907      	ldr	r1, [pc, #28]	@ (800f000 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800efe2:	ea24 0202 	bic.w	r2, r4, r2
 800efe6:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800efea:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 800efee:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eff2:	4011      	ands	r1, r2
}
 800eff4:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eff6:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 800effa:	4770      	bx	lr
 800effc:	eff37800 	.word	0xeff37800
 800f000:	ec337800 	.word	0xec337800

0800f004 <USB_EPStartXfer>:
{
 800f004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 800f008:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800f00a:	780d      	ldrb	r5, [r1, #0]
    if (ep->xfer_len == 0U)
 800f00c:	694b      	ldr	r3, [r1, #20]
    if (ep->type != EP_TYPE_ISOC)
 800f00e:	f891 c003 	ldrb.w	ip, [r1, #3]
  if (ep->is_in == 1U)
 800f012:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f014:	eb00 1245 	add.w	r2, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800f018:	d046      	beq.n	800f0a8 <USB_EPStartXfer+0xa4>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f01a:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f01c:	f8d2 1b10 	ldr.w	r1, [r2, #2832]	@ 0xb10
 800f020:	0cc9      	lsrs	r1, r1, #19
 800f022:	04c9      	lsls	r1, r1, #19
 800f024:	f8c2 1b10 	str.w	r1, [r2, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f028:	f8d2 1b10 	ldr.w	r1, [r2, #2832]	@ 0xb10
 800f02c:	f021 51ff 	bic.w	r1, r1, #534773760	@ 0x1fe00000
 800f030:	f421 11c0 	bic.w	r1, r1, #1572864	@ 0x180000
 800f034:	f8c2 1b10 	str.w	r1, [r2, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f038:	f502 6130 	add.w	r1, r2, #2816	@ 0xb00
    if (ep->xfer_len == 0U)
 800f03c:	b353      	cbz	r3, 800f094 <USB_EPStartXfer+0x90>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f03e:	4d61      	ldr	r5, [pc, #388]	@ (800f1c4 <USB_EPStartXfer+0x1c0>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f040:	4423      	add	r3, r4
 800f042:	3b01      	subs	r3, #1
 800f044:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f048:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 800f04c:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f04e:	fb04 f303 	mul.w	r3, r4, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f052:	690c      	ldr	r4, [r1, #16]
 800f054:	432c      	orrs	r4, r5
 800f056:	610c      	str	r4, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f058:	690c      	ldr	r4, [r1, #16]
 800f05a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f05e:	4323      	orrs	r3, r4
 800f060:	610b      	str	r3, [r1, #16]
    if (ep->type == EP_TYPE_ISOC)
 800f062:	f1bc 0f01 	cmp.w	ip, #1
 800f066:	d10c      	bne.n	800f082 <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f068:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800f06c:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f070:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	@ 0xb00
 800f074:	bf0c      	ite	eq
 800f076:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f07a:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 800f07e:	f8c2 3b00 	str.w	r3, [r2, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f082:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	@ 0xb00
 800f086:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f08a:	f8c2 3b00 	str.w	r3, [r2, #2816]	@ 0xb00
}
 800f08e:	2000      	movs	r0, #0
 800f090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f094:	690b      	ldr	r3, [r1, #16]
 800f096:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800f09a:	431c      	orrs	r4, r3
 800f09c:	610c      	str	r4, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f09e:	690b      	ldr	r3, [r1, #16]
 800f0a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f0a4:	610b      	str	r3, [r1, #16]
 800f0a6:	e7dc      	b.n	800f062 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f0a8:	f502 6e10 	add.w	lr, r2, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d13c      	bne.n	800f12a <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f0b0:	f8de 4010 	ldr.w	r4, [lr, #16]
 800f0b4:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800f0b8:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 800f0bc:	f8ce 4010 	str.w	r4, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f0c0:	f8de 4010 	ldr.w	r4, [lr, #16]
 800f0c4:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800f0c8:	f8ce 4010 	str.w	r4, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f0cc:	f8de 4010 	ldr.w	r4, [lr, #16]
 800f0d0:	0ce4      	lsrs	r4, r4, #19
 800f0d2:	04e4      	lsls	r4, r4, #19
 800f0d4:	f8ce 4010 	str.w	r4, [lr, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0d8:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800f0dc:	f1bc 0f01 	cmp.w	ip, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0e0:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800f0e4:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800f0e8:	d1d1      	bne.n	800f08e <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f0ea:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 800f0ee:	f414 7f80 	tst.w	r4, #256	@ 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f0f2:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
  count32b = ((uint32_t)len + 3U) / 4U;
 800f0f6:	b29b      	uxth	r3, r3
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f0f8:	bf0c      	ite	eq
 800f0fa:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f0fe:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
  count32b = ((uint32_t)len + 3U) / 4U;
 800f102:	3303      	adds	r3, #3
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f104:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800f108:	68ca      	ldr	r2, [r1, #12]
  for (i = 0U; i < count32b; i++)
 800f10a:	0899      	lsrs	r1, r3, #2
 800f10c:	d0bf      	beq.n	800f08e <USB_EPStartXfer+0x8a>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f10e:	eb00 3305 	add.w	r3, r0, r5, lsl #12
 800f112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f116:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800f11a:	f852 1b04 	ldr.w	r1, [r2], #4
 800f11e:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < count32b; i++)
 800f120:	4290      	cmp	r0, r2
 800f122:	d1fa      	bne.n	800f11a <USB_EPStartXfer+0x116>
}
 800f124:	2000      	movs	r0, #0
 800f126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f12a:	f8de 6010 	ldr.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f12e:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f132:	0cf6      	lsrs	r6, r6, #19
 800f134:	04f6      	lsls	r6, r6, #19
 800f136:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f13a:	f8de 6010 	ldr.w	r6, [lr, #16]
 800f13e:	f026 56ff 	bic.w	r6, r6, #534773760	@ 0x1fe00000
 800f142:	f426 16c0 	bic.w	r6, r6, #1572864	@ 0x180000
 800f146:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f14a:	4e1e      	ldr	r6, [pc, #120]	@ (800f1c4 <USB_EPStartXfer+0x1c0>)
 800f14c:	f8de 8010 	ldr.w	r8, [lr, #16]
 800f150:	eb09 0703 	add.w	r7, r9, r3
 800f154:	3f01      	subs	r7, #1
 800f156:	fbb7 f7f9 	udiv	r7, r7, r9
 800f15a:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 800f15e:	ea46 0608 	orr.w	r6, r6, r8
 800f162:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f166:	f8de 7010 	ldr.w	r7, [lr, #16]
 800f16a:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800f16e:	433e      	orrs	r6, r7
      if (ep->type == EP_TYPE_ISOC)
 800f170:	f1bc 0f01 	cmp.w	ip, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f174:	f8ce 6010 	str.w	r6, [lr, #16]
      if (ep->type == EP_TYPE_ISOC)
 800f178:	d010      	beq.n	800f19c <USB_EPStartXfer+0x198>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f17a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800f17e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f182:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f186:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 800f18a:	f005 030f 	and.w	r3, r5, #15
 800f18e:	409c      	lsls	r4, r3
 800f190:	4314      	orrs	r4, r2
 800f192:	f8c0 4834 	str.w	r4, [r0, #2100]	@ 0x834
}
 800f196:	2000      	movs	r0, #0
 800f198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f19c:	f8de 4010 	ldr.w	r4, [lr, #16]
 800f1a0:	f024 44c0 	bic.w	r4, r4, #1610612736	@ 0x60000000
 800f1a4:	f8ce 4010 	str.w	r4, [lr, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f1a8:	f8de 4010 	ldr.w	r4, [lr, #16]
 800f1ac:	f044 5400 	orr.w	r4, r4, #536870912	@ 0x20000000
 800f1b0:	f8ce 4010 	str.w	r4, [lr, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f1b4:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
 800f1b8:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800f1bc:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800f1c0:	e793      	b.n	800f0ea <USB_EPStartXfer+0xe6>
 800f1c2:	bf00      	nop
 800f1c4:	1ff80000 	.word	0x1ff80000

0800f1c8 <USB_EP0StartXfer>:
{
 800f1c8:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800f1ca:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800f1cc:	780a      	ldrb	r2, [r1, #0]
    if (ep->xfer_len == 0U)
 800f1ce:	694c      	ldr	r4, [r1, #20]
  if (ep->is_in == 1U)
 800f1d0:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1d2:	eb00 1c42 	add.w	ip, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800f1d6:	d022      	beq.n	800f21e <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f1d8:	f8dc 2b10 	ldr.w	r2, [ip, #2832]	@ 0xb10
 800f1dc:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 800f1e0:	0cd2      	lsrs	r2, r2, #19
 800f1e2:	04d2      	lsls	r2, r2, #19
 800f1e4:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f1e6:	691a      	ldr	r2, [r3, #16]
 800f1e8:	f022 52ff 	bic.w	r2, r2, #534773760	@ 0x1fe00000
 800f1ec:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
 800f1f0:	611a      	str	r2, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800f1f2:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 800f1f4:	b98c      	cbnz	r4, 800f21a <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f1f6:	6919      	ldr	r1, [r3, #16]
 800f1f8:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800f1fc:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f1fe:	6919      	ldr	r1, [r3, #16]
 800f200:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800f204:	430a      	orrs	r2, r1
 800f206:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f208:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800f20c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f210:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800f214:	2000      	movs	r0, #0
 800f216:	bc30      	pop	{r4, r5}
 800f218:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 800f21a:	614a      	str	r2, [r1, #20]
 800f21c:	e7eb      	b.n	800f1f6 <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f21e:	f50c 6310 	add.w	r3, ip, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 800f222:	b364      	cbz	r4, 800f27e <USB_EP0StartXfer+0xb6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f224:	691d      	ldr	r5, [r3, #16]
 800f226:	0ced      	lsrs	r5, r5, #19
 800f228:	04ed      	lsls	r5, r5, #19
 800f22a:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f22c:	691d      	ldr	r5, [r3, #16]
 800f22e:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 800f232:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 800f236:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800f238:	688d      	ldr	r5, [r1, #8]
 800f23a:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 800f23c:	bf38      	it	cc
 800f23e:	614d      	strcc	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f240:	6919      	ldr	r1, [r3, #16]
 800f242:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800f246:	6119      	str	r1, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 800f248:	bf38      	it	cc
 800f24a:	462c      	movcc	r4, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f24c:	691d      	ldr	r5, [r3, #16]
 800f24e:	f3c4 0112 	ubfx	r1, r4, #0, #19
 800f252:	4329      	orrs	r1, r5
 800f254:	6119      	str	r1, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f256:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 800f25a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f25e:	f8cc 3900 	str.w	r3, [ip, #2304]	@ 0x900
    if (ep->xfer_len > 0U)
 800f262:	2c00      	cmp	r4, #0
 800f264:	d0d6      	beq.n	800f214 <USB_EP0StartXfer+0x4c>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f266:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
 800f26a:	f002 020f 	and.w	r2, r2, #15
 800f26e:	2301      	movs	r3, #1
 800f270:	4093      	lsls	r3, r2
 800f272:	430b      	orrs	r3, r1
 800f274:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
}
 800f278:	bc30      	pop	{r4, r5}
 800f27a:	2000      	movs	r0, #0
 800f27c:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f27e:	691a      	ldr	r2, [r3, #16]
 800f280:	f022 52ff 	bic.w	r2, r2, #534773760	@ 0x1fe00000
 800f284:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
 800f288:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f28a:	691a      	ldr	r2, [r3, #16]
 800f28c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800f290:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f292:	691a      	ldr	r2, [r3, #16]
 800f294:	0cd2      	lsrs	r2, r2, #19
 800f296:	04d2      	lsls	r2, r2, #19
 800f298:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f29a:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 800f29e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
}
 800f2a2:	2000      	movs	r0, #0
 800f2a4:	bc30      	pop	{r4, r5}
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f2a6:	f8cc 3900 	str.w	r3, [ip, #2304]	@ 0x900
}
 800f2aa:	4770      	bx	lr

0800f2ac <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 800f2ac:	3303      	adds	r3, #3
  for (i = 0U; i < count32b; i++)
 800f2ae:	089b      	lsrs	r3, r3, #2
 800f2b0:	d009      	beq.n	800f2c6 <USB_WritePacket+0x1a>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f2b2:	3201      	adds	r2, #1
 800f2b4:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800f2b8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800f2bc:	f851 3b04 	ldr.w	r3, [r1], #4
 800f2c0:	6003      	str	r3, [r0, #0]
  for (i = 0U; i < count32b; i++)
 800f2c2:	428a      	cmp	r2, r1
 800f2c4:	d1fa      	bne.n	800f2bc <USB_WritePacket+0x10>
}
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop

0800f2cc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f2cc:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800f2ce:	0892      	lsrs	r2, r2, #2
 800f2d0:	d00a      	beq.n	800f2e8 <USB_ReadPacket+0x1c>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f2d2:	f500 5c80 	add.w	ip, r0, #4096	@ 0x1000
 800f2d6:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800f2da:	f8dc 3000 	ldr.w	r3, [ip]
 800f2de:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800f2e2:	4288      	cmp	r0, r1
 800f2e4:	d1f9      	bne.n	800f2da <USB_ReadPacket+0xe>
 800f2e6:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800f2e8:	4608      	mov	r0, r1
}
 800f2ea:	4770      	bx	lr

0800f2ec <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800f2ec:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800f2ee:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f2f0:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f2f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800f2f6:	d00c      	beq.n	800f312 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f2f8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800f2fc:	2a00      	cmp	r2, #0
 800f2fe:	db00      	blt.n	800f302 <USB_EPSetStall+0x16>
 800f300:	b9d3      	cbnz	r3, 800f338 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f302:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f306:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f30a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800f30e:	2000      	movs	r0, #0
 800f310:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f312:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800f316:	2a00      	cmp	r2, #0
 800f318:	db06      	blt.n	800f328 <USB_EPSetStall+0x3c>
 800f31a:	b12b      	cbz	r3, 800f328 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f31c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f320:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f324:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f328:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f32c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f330:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800f334:	2000      	movs	r0, #0
 800f336:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f338:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f33c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f340:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800f344:	e7dd      	b.n	800f302 <USB_EPSetStall+0x16>
 800f346:	bf00      	nop

0800f348 <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f348:	78cb      	ldrb	r3, [r1, #3]
  if (ep->is_in == 1U)
 800f34a:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f34c:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f350:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 800f352:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f354:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f358:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800f35a:	d011      	beq.n	800f380 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f35c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f360:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f362:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800f366:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f36a:	d901      	bls.n	800f370 <USB_EPClearStall+0x28>
}
 800f36c:	2000      	movs	r0, #0
 800f36e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f370:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f378:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800f37c:	2000      	movs	r0, #0
 800f37e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f380:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f384:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f386:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800f38a:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f38e:	d8ed      	bhi.n	800f36c <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f390:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f398:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800f39c:	2000      	movs	r0, #0
 800f39e:	4770      	bx	lr

0800f3a0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f3a0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800f3a4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f3a8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f3ac:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800f3b0:	0109      	lsls	r1, r1, #4
 800f3b2:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800f3b6:	4319      	orrs	r1, r3
 800f3b8:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800f3bc:	2000      	movs	r0, #0
 800f3be:	4770      	bx	lr

0800f3c0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f3c0:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800f3c4:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f3c6:	f022 0203 	bic.w	r2, r2, #3
 800f3ca:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f3ce:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f3d2:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f3d6:	f023 0302 	bic.w	r3, r3, #2
}
 800f3da:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f3dc:	604b      	str	r3, [r1, #4]
}
 800f3de:	4770      	bx	lr

0800f3e0 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f3e0:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800f3e4:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f3e6:	f022 0203 	bic.w	r2, r2, #3
 800f3ea:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f3ee:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f3f2:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f3f6:	f043 0302 	orr.w	r3, r3, #2
}
 800f3fa:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f3fc:	604b      	str	r3, [r1, #4]
}
 800f3fe:	4770      	bx	lr

0800f400 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800f400:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800f402:	6980      	ldr	r0, [r0, #24]
}
 800f404:	4010      	ands	r0, r2
 800f406:	4770      	bx	lr

0800f408 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f408:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800f40c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f410:	69c0      	ldr	r0, [r0, #28]
 800f412:	4018      	ands	r0, r3
}
 800f414:	0c00      	lsrs	r0, r0, #16
 800f416:	4770      	bx	lr

0800f418 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f418:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800f41c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f420:	69c0      	ldr	r0, [r0, #28]
 800f422:	4018      	ands	r0, r3
}
 800f424:	b280      	uxth	r0, r0
 800f426:	4770      	bx	lr

0800f428 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f428:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f42c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f430:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f434:	6940      	ldr	r0, [r0, #20]
}
 800f436:	4010      	ands	r0, r2
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop

0800f43c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800f43c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f440:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f444:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f448:	f001 010f 	and.w	r1, r1, #15
 800f44c:	40cb      	lsrs	r3, r1
 800f44e:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f450:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f454:	b2db      	uxtb	r3, r3
 800f456:	4313      	orrs	r3, r2
}
 800f458:	4018      	ands	r0, r3
 800f45a:	4770      	bx	lr

0800f45c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800f45c:	6940      	ldr	r0, [r0, #20]
}
 800f45e:	f000 0001 	and.w	r0, r0, #1
 800f462:	4770      	bx	lr

0800f464 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f464:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 800f468:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f46a:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 800f46e:	f022 0207 	bic.w	r2, r2, #7
 800f472:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f476:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f47a:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f47e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 800f482:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f484:	604b      	str	r3, [r1, #4]
}
 800f486:	4770      	bx	lr

0800f488 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f488:	4a0c      	ldr	r2, [pc, #48]	@ (800f4bc <USB_EP0_OutStart+0x34>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f48a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f48c:	4291      	cmp	r1, r2
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f48e:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f492:	d903      	bls.n	800f49c <USB_EP0_OutStart+0x14>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f494:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800f498:	2a00      	cmp	r2, #0
 800f49a:	db0d      	blt.n	800f4b8 <USB_EP0_OutStart+0x30>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f49c:	2200      	movs	r2, #0
 800f49e:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f4a0:	691a      	ldr	r2, [r3, #16]
 800f4a2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800f4a6:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f4a8:	691a      	ldr	r2, [r3, #16]
 800f4aa:	f042 0218 	orr.w	r2, r2, #24
 800f4ae:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f4b0:	691a      	ldr	r2, [r3, #16]
 800f4b2:	f042 42c0 	orr.w	r2, r2, #1610612736	@ 0x60000000
 800f4b6:	611a      	str	r2, [r3, #16]
}
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	4770      	bx	lr
 800f4bc:	4f54300a 	.word	0x4f54300a

0800f4c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f4c0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f4c2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f4c6:	b184      	cbz	r4, 800f4ea <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f4c8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 800f4cc:	b15b      	cbz	r3, 800f4e6 <USBD_CDC_EP0_RxReady+0x26>
 800f4ce:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800f4d2:	28ff      	cmp	r0, #255	@ 0xff
 800f4d4:	d007      	beq.n	800f4e6 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800f4dc:	4621      	mov	r1, r4
 800f4de:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800f4e0:	23ff      	movs	r3, #255	@ 0xff
 800f4e2:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f4e6:	2000      	movs	r0, #0
}
 800f4e8:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f4ea:	2003      	movs	r0, #3
}
 800f4ec:	bd10      	pop	{r4, pc}
 800f4ee:	bf00      	nop

0800f4f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f4f0:	2343      	movs	r3, #67	@ 0x43
 800f4f2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800f4f4:	4800      	ldr	r0, [pc, #0]	@ (800f4f8 <USBD_CDC_GetFSCfgDesc+0x8>)
 800f4f6:	4770      	bx	lr
 800f4f8:	200001ec 	.word	0x200001ec

0800f4fc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f4fc:	2343      	movs	r3, #67	@ 0x43
 800f4fe:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800f500:	4800      	ldr	r0, [pc, #0]	@ (800f504 <USBD_CDC_GetHSCfgDesc+0x8>)
 800f502:	4770      	bx	lr
 800f504:	20000230 	.word	0x20000230

0800f508 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f508:	2343      	movs	r3, #67	@ 0x43
 800f50a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800f50c:	4800      	ldr	r0, [pc, #0]	@ (800f510 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800f50e:	4770      	bx	lr
 800f510:	20000274 	.word	0x20000274

0800f514 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f514:	230a      	movs	r3, #10
 800f516:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800f518:	4800      	ldr	r0, [pc, #0]	@ (800f51c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800f51a:	4770      	bx	lr
 800f51c:	200002b8 	.word	0x200002b8

0800f520 <USBD_CDC_DataOut>:
{
 800f520:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f522:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
  if (pdev->pClassData == NULL)
 800f526:	b17d      	cbz	r5, 800f548 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f528:	4604      	mov	r4, r0
 800f52a:	f7f2 fb77 	bl	8001c1c <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f52e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f532:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f53a:	f8c5 220c 	str.w	r2, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f53e:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800f542:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f544:	2000      	movs	r0, #0
}
 800f546:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800f548:	2003      	movs	r0, #3
}
 800f54a:	bd38      	pop	{r3, r4, r5, pc}

0800f54c <USBD_CDC_DataIn>:
{
 800f54c:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800f54e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f552:	f8d0 42c4 	ldr.w	r4, [r0, #708]	@ 0x2c4
  if (pdev->pClassData == NULL)
 800f556:	b33d      	cbz	r5, 800f5a8 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f558:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800f55c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800f560:	4684      	mov	ip, r0
 800f562:	f8de 3018 	ldr.w	r3, [lr, #24]
 800f566:	460a      	mov	r2, r1
 800f568:	b96b      	cbnz	r3, 800f586 <USBD_CDC_DataIn+0x3a>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f56a:	f8dc 32c0 	ldr.w	r3, [ip, #704]	@ 0x2c0
 800f56e:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800f570:	2100      	movs	r1, #0
 800f572:	f8c5 1214 	str.w	r1, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f576:	b123      	cbz	r3, 800f582 <USBD_CDC_DataIn+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f578:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 800f57c:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800f580:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f582:	2000      	movs	r0, #0
}
 800f584:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f586:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800f58a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800f58e:	6c64      	ldr	r4, [r4, #68]	@ 0x44
 800f590:	fbb3 f6f4 	udiv	r6, r3, r4
 800f594:	fb04 3316 	mls	r3, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d1e6      	bne.n	800f56a <USBD_CDC_DataIn+0x1e>
    pdev->ep_in[epnum].total_length = 0U;
 800f59c:	f8ce 3018 	str.w	r3, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	f7f2 fb23 	bl	8001bec <USBD_LL_Transmit>
 800f5a6:	e7ec      	b.n	800f582 <USBD_CDC_DataIn+0x36>
    return (uint8_t)USBD_FAIL;
 800f5a8:	2003      	movs	r0, #3
}
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}

0800f5ac <USBD_CDC_Setup>:
{
 800f5ac:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f5ae:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
{
 800f5b2:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800f5ba:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800f5be:	b15d      	cbz	r5, 800f5d8 <USBD_CDC_Setup+0x2c>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5c0:	780b      	ldrb	r3, [r1, #0]
 800f5c2:	f013 0260 	ands.w	r2, r3, #96	@ 0x60
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	460c      	mov	r4, r1
 800f5ca:	d01d      	beq.n	800f608 <USBD_CDC_Setup+0x5c>
 800f5cc:	2a20      	cmp	r2, #32
 800f5ce:	d006      	beq.n	800f5de <USBD_CDC_Setup+0x32>
          USBD_CtlError(pdev, req);
 800f5d0:	4621      	mov	r1, r4
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f000 fd34 	bl	8010040 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800f5d8:	2003      	movs	r0, #3
}
 800f5da:	b002      	add	sp, #8
 800f5dc:	bd70      	pop	{r4, r5, r6, pc}
      if (req->wLength != 0U)
 800f5de:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f5e0:	f891 c001 	ldrb.w	ip, [r1, #1]
      if (req->wLength != 0U)
 800f5e4:	b372      	cbz	r2, 800f644 <USBD_CDC_Setup+0x98>
        if ((req->bmRequest & 0x80U) != 0U)
 800f5e6:	061b      	lsls	r3, r3, #24
 800f5e8:	d54c      	bpl.n	800f684 <USBD_CDC_Setup+0xd8>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f5ea:	f8d6 32c0 	ldr.w	r3, [r6, #704]	@ 0x2c0
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	4660      	mov	r0, ip
 800f5f4:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f5f6:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f5f8:	2a07      	cmp	r2, #7
 800f5fa:	4629      	mov	r1, r5
 800f5fc:	bf28      	it	cs
 800f5fe:	2207      	movcs	r2, #7
 800f600:	4630      	mov	r0, r6
 800f602:	f000 fd51 	bl	80100a8 <USBD_CtlSendData>
 800f606:	e022      	b.n	800f64e <USBD_CDC_Setup+0xa2>
      switch (req->bRequest)
 800f608:	784b      	ldrb	r3, [r1, #1]
 800f60a:	2b0b      	cmp	r3, #11
 800f60c:	d8e0      	bhi.n	800f5d0 <USBD_CDC_Setup+0x24>
 800f60e:	a201      	add	r2, pc, #4	@ (adr r2, 800f614 <USBD_CDC_Setup+0x68>)
 800f610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f614:	0800f65d 	.word	0x0800f65d
 800f618:	0800f64f 	.word	0x0800f64f
 800f61c:	0800f5d1 	.word	0x0800f5d1
 800f620:	0800f5d1 	.word	0x0800f5d1
 800f624:	0800f5d1 	.word	0x0800f5d1
 800f628:	0800f5d1 	.word	0x0800f5d1
 800f62c:	0800f5d1 	.word	0x0800f5d1
 800f630:	0800f5d1 	.word	0x0800f5d1
 800f634:	0800f5d1 	.word	0x0800f5d1
 800f638:	0800f5d1 	.word	0x0800f5d1
 800f63c:	0800f671 	.word	0x0800f671
 800f640:	0800f653 	.word	0x0800f653
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f644:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 800f648:	4660      	mov	r0, ip
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 800f64e:	2000      	movs	r0, #0
 800f650:	e7c3      	b.n	800f5da <USBD_CDC_Setup+0x2e>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f652:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f656:	2b03      	cmp	r3, #3
 800f658:	d0f9      	beq.n	800f64e <USBD_CDC_Setup+0xa2>
 800f65a:	e7b9      	b.n	800f5d0 <USBD_CDC_Setup+0x24>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f65c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f660:	2b03      	cmp	r3, #3
 800f662:	d1b5      	bne.n	800f5d0 <USBD_CDC_Setup+0x24>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f664:	2202      	movs	r2, #2
 800f666:	f10d 0106 	add.w	r1, sp, #6
 800f66a:	f000 fd1d 	bl	80100a8 <USBD_CtlSendData>
 800f66e:	e7ee      	b.n	800f64e <USBD_CDC_Setup+0xa2>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f670:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f674:	2b03      	cmp	r3, #3
 800f676:	d1ab      	bne.n	800f5d0 <USBD_CDC_Setup+0x24>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f678:	2201      	movs	r2, #1
 800f67a:	f10d 0105 	add.w	r1, sp, #5
 800f67e:	f000 fd13 	bl	80100a8 <USBD_CtlSendData>
 800f682:	e7e4      	b.n	800f64e <USBD_CDC_Setup+0xa2>
          hcdc->CmdOpCode = req->bRequest;
 800f684:	f885 c200 	strb.w	ip, [r5, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f688:	f885 2201 	strb.w	r2, [r5, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f68c:	4629      	mov	r1, r5
 800f68e:	f000 fd21 	bl	80100d4 <USBD_CtlPrepareRx>
 800f692:	e7dc      	b.n	800f64e <USBD_CDC_Setup+0xa2>

0800f694 <USBD_CDC_DeInit>:
{
 800f694:	b538      	push	{r3, r4, r5, lr}
 800f696:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f698:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f69a:	2181      	movs	r1, #129	@ 0x81
 800f69c:	f7f2 fa62 	bl	8001b64 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f6a0:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f6a2:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f7f2 fa5d 	bl	8001b64 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f6aa:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f6ae:	2182      	movs	r1, #130	@ 0x82
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f7f2 fa57 	bl	8001b64 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800f6b6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f6ba:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassData != NULL)
 800f6bc:	b14b      	cbz	r3, 800f6d2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f6be:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f6c6:	f8d4 02bc 	ldr.w	r0, [r4, #700]	@ 0x2bc
 800f6ca:	f7f2 fae1 	bl	8001c90 <USBD_static_free>
    pdev->pClassData = NULL;
 800f6ce:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	bd38      	pop	{r3, r4, r5, pc}
 800f6d6:	bf00      	nop

0800f6d8 <USBD_CDC_Init>:
{
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f6dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f6e0:	f7f2 fad2 	bl	8001c88 <USBD_static_malloc>
  if (hcdc == NULL)
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d049      	beq.n	800f77e <USBD_CDC_Init+0xa6>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6ea:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800f6ec:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6f0:	b37b      	cbz	r3, 800f752 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f6f2:	2340      	movs	r3, #64	@ 0x40
 800f6f4:	2202      	movs	r2, #2
 800f6f6:	2181      	movs	r1, #129	@ 0x81
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	f7f2 fa25 	bl	8001b48 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f6fe:	2101      	movs	r1, #1
 800f700:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f702:	2340      	movs	r3, #64	@ 0x40
 800f704:	2202      	movs	r2, #2
 800f706:	4620      	mov	r0, r4
 800f708:	f7f2 fa1e 	bl	8001b48 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f70c:	2601      	movs	r6, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f70e:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f710:	2308      	movs	r3, #8
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f712:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f716:	2182      	movs	r1, #130	@ 0x82
 800f718:	2203      	movs	r2, #3
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f71a:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f71e:	4620      	mov	r0, r4
 800f720:	f7f2 fa12 	bl	8001b48 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f724:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f728:	f8a4 604c 	strh.w	r6, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4798      	blx	r3
  hcdc->TxState = 0U;
 800f730:	2300      	movs	r3, #0
 800f732:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f736:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f73a:	7c23      	ldrb	r3, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f73c:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f740:	b9bb      	cbnz	r3, 800f772 <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f742:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f746:	4631      	mov	r1, r6
 800f748:	4620      	mov	r0, r4
 800f74a:	f7f2 fa5b 	bl	8001c04 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800f74e:	2000      	movs	r0, #0
}
 800f750:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f756:	2202      	movs	r2, #2
 800f758:	2181      	movs	r1, #129	@ 0x81
 800f75a:	4620      	mov	r0, r4
 800f75c:	f7f2 f9f4 	bl	8001b48 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f760:	2101      	movs	r1, #1
 800f762:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f768:	2202      	movs	r2, #2
 800f76a:	4620      	mov	r0, r4
 800f76c:	f7f2 f9ec 	bl	8001b48 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f770:	e7cc      	b.n	800f70c <USBD_CDC_Init+0x34>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f772:	2340      	movs	r3, #64	@ 0x40
 800f774:	4631      	mov	r1, r6
 800f776:	4620      	mov	r0, r4
 800f778:	f7f2 fa44 	bl	8001c04 <USBD_LL_PrepareReceive>
 800f77c:	e7e7      	b.n	800f74e <USBD_CDC_Init+0x76>
    pdev->pClassData = NULL;
 800f77e:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800f782:	2002      	movs	r0, #2
}
 800f784:	bd70      	pop	{r4, r5, r6, pc}
 800f786:	bf00      	nop

0800f788 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800f788:	b119      	cbz	r1, 800f792 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800f78a:	f8c0 12c0 	str.w	r1, [r0, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f78e:	2000      	movs	r0, #0
 800f790:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f792:	2003      	movs	r0, #3
}
 800f794:	4770      	bx	lr
 800f796:	bf00      	nop

0800f798 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f798:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f79c:	b12b      	cbz	r3, 800f7aa <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800f79e:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f7a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f7aa:	2003      	movs	r0, #3
}
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop

0800f7b0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7b0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f7b4:	b11b      	cbz	r3, 800f7be <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800f7b6:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f7be:	2003      	movs	r0, #3
}
 800f7c0:	4770      	bx	lr
 800f7c2:	bf00      	nop

0800f7c4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7c4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800f7c8:	b192      	cbz	r2, 800f7f0 <USBD_CDC_TransmitPacket+0x2c>
{
 800f7ca:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800f7cc:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 800f7d0:	b10c      	cbz	r4, 800f7d6 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f7d2:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800f7d4:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f7dc:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f7e0:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f7e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f7e6:	2181      	movs	r1, #129	@ 0x81
 800f7e8:	f7f2 fa00 	bl	8001bec <USBD_LL_Transmit>
    ret = USBD_OK;
 800f7ec:	4620      	mov	r0, r4
}
 800f7ee:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f7f0:	2003      	movs	r0, #3
}
 800f7f2:	4770      	bx	lr

0800f7f4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7f4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc

  if (pdev->pClassData == NULL)
 800f7f8:	b18a      	cbz	r2, 800f81e <USBD_CDC_ReceivePacket+0x2a>
{
 800f7fa:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7fc:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f7fe:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f802:	b12b      	cbz	r3, 800f810 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f804:	2340      	movs	r3, #64	@ 0x40
 800f806:	2101      	movs	r1, #1
 800f808:	f7f2 f9fc 	bl	8001c04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f80c:	2000      	movs	r0, #0
}
 800f80e:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f814:	2101      	movs	r1, #1
 800f816:	f7f2 f9f5 	bl	8001c04 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800f81a:	2000      	movs	r0, #0
}
 800f81c:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 800f81e:	2003      	movs	r0, #3
}
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop

0800f824 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f824:	b178      	cbz	r0, 800f846 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f826:	2300      	movs	r3, #0
 800f828:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f82c:	f8c0 32c0 	str.w	r3, [r0, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f830:	f8c0 32cc 	str.w	r3, [r0, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f834:	b109      	cbz	r1, 800f83a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800f836:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f83a:	2301      	movs	r3, #1
 800f83c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 800f840:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f842:	f7f2 b943 	b.w	8001acc <USBD_LL_Init>

  return ret;
}
 800f846:	2003      	movs	r0, #3
 800f848:	4770      	bx	lr
 800f84a:	bf00      	nop

0800f84c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f84c:	b510      	push	{r4, lr}
 800f84e:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800f850:	2300      	movs	r3, #0
 800f852:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800f856:	b161      	cbz	r1, 800f872 <USBD_RegisterClass+0x26>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f858:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass = pclass;
 800f85a:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f85e:	4604      	mov	r4, r0
 800f860:	b123      	cbz	r3, 800f86c <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f862:	f10d 0006 	add.w	r0, sp, #6
 800f866:	4798      	blx	r3
 800f868:	f8c4 02cc 	str.w	r0, [r4, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f86c:	2000      	movs	r0, #0
}
 800f86e:	b002      	add	sp, #8
 800f870:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800f872:	2003      	movs	r0, #3
}
 800f874:	b002      	add	sp, #8
 800f876:	bd10      	pop	{r4, pc}

0800f878 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f878:	f7f2 b95a 	b.w	8001b30 <USBD_LL_Start>

0800f87c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800f87c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f880:	b10b      	cbz	r3, 800f886 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4718      	bx	r3
  }

  return ret;
}
 800f886:	2003      	movs	r0, #3
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop

0800f88c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f88c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f88e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f892:	b10b      	cbz	r3, 800f898 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	4798      	blx	r3
  }

  return USBD_OK;
}
 800f898:	2000      	movs	r0, #0
 800f89a:	bd08      	pop	{r3, pc}

0800f89c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f89c:	b538      	push	{r3, r4, r5, lr}
 800f89e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f8a0:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	f000 fbbf 	bl	8010028 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800f8aa:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 800f8ae:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 800f8b2:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800f8bc:	f001 031f 	and.w	r3, r1, #31
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d009      	beq.n	800f8d8 <USBD_LL_SetupStage+0x3c>
 800f8c4:	2b02      	cmp	r3, #2
 800f8c6:	d013      	beq.n	800f8f0 <USBD_LL_SetupStage+0x54>
 800f8c8:	b163      	cbz	r3, 800f8e4 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 800f8d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8d4:	f7f2 b952 	b.w	8001b7c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f8d8:	4629      	mov	r1, r5
 800f8da:	4620      	mov	r0, r4
}
 800f8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f8e0:	f000 bad4 	b.w	800fe8c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	4620      	mov	r0, r4
}
 800f8e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f8ec:	f000 b91e 	b.w	800fb2c <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f8f0:	4629      	mov	r1, r5
 800f8f2:	4620      	mov	r0, r4
}
 800f8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f8f8:	f000 bafc 	b.w	800fef4 <USBD_StdEPReq>

0800f8fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f8fc:	b510      	push	{r4, lr}
 800f8fe:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f900:	b931      	cbnz	r1, 800f910 <USBD_LL_DataOutStage+0x14>
 800f902:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f904:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800f908:	2a03      	cmp	r2, #3
 800f90a:	d00d      	beq.n	800f928 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 800f90c:	2000      	movs	r0, #0
 800f90e:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f910:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f914:	2b03      	cmp	r3, #3
 800f916:	d1f9      	bne.n	800f90c <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 800f918:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f91c:	699b      	ldr	r3, [r3, #24]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d0f4      	beq.n	800f90c <USBD_LL_DataOutStage+0x10>
}
 800f922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f926:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800f928:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 800f92c:	4291      	cmp	r1, r2
 800f92e:	d808      	bhi.n	800f942 <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f930:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f934:	2b03      	cmp	r3, #3
 800f936:	d00e      	beq.n	800f956 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 fbe1 	bl	8010100 <USBD_CtlSendStatus>
}
 800f93e:	2000      	movs	r0, #0
 800f940:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800f942:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f944:	428a      	cmp	r2, r1
 800f946:	bf28      	it	cs
 800f948:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800f94a:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f94e:	4619      	mov	r1, r3
 800f950:	f000 fbce 	bl	80100f0 <USBD_CtlContinueRx>
 800f954:	e7da      	b.n	800f90c <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 800f956:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f95a:	691b      	ldr	r3, [r3, #16]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d0eb      	beq.n	800f938 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 800f960:	4798      	blx	r3
 800f962:	e7e9      	b.n	800f938 <USBD_LL_DataOutStage+0x3c>

0800f964 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f964:	b570      	push	{r4, r5, r6, lr}
 800f966:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f968:	b951      	cbnz	r1, 800f980 <USBD_LL_DataInStage+0x1c>
 800f96a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f96c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800f970:	2a02      	cmp	r2, #2
 800f972:	d011      	beq.n	800f998 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f974:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d022      	beq.n	800f9c2 <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 800f97c:	2000      	movs	r0, #0
 800f97e:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f980:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f984:	2b03      	cmp	r3, #3
 800f986:	d1f9      	bne.n	800f97c <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 800f988:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f98c:	695b      	ldr	r3, [r3, #20]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d0f4      	beq.n	800f97c <USBD_LL_DataInStage+0x18>
}
 800f992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f996:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800f998:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800f99c:	42b2      	cmp	r2, r6
 800f99e:	460d      	mov	r5, r1
 800f9a0:	d814      	bhi.n	800f9cc <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800f9a2:	d01f      	beq.n	800f9e4 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9a4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800f9a8:	2b03      	cmp	r3, #3
 800f9aa:	d028      	beq.n	800f9fe <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9ac:	2180      	movs	r1, #128	@ 0x80
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f7f2 f8e4 	bl	8001b7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f000 fbaf 	bl	8010118 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800f9ba:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d1dc      	bne.n	800f97c <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
}
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800f9cc:	1b92      	subs	r2, r2, r6
 800f9ce:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	f000 fb77 	bl	80100c4 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9d6:	462b      	mov	r3, r5
 800f9d8:	462a      	mov	r2, r5
 800f9da:	4629      	mov	r1, r5
 800f9dc:	4620      	mov	r0, r4
 800f9de:	f7f2 f911 	bl	8001c04 <USBD_LL_PrepareReceive>
 800f9e2:	e7c7      	b.n	800f974 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800f9e4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d8dc      	bhi.n	800f9a4 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 800f9ea:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d2d8      	bcs.n	800f9a4 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f9f2:	460a      	mov	r2, r1
 800f9f4:	f000 fb66 	bl	80100c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f9f8:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 800f9fc:	e7eb      	b.n	800f9d6 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800f9fe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d0d1      	beq.n	800f9ac <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 800fa08:	4620      	mov	r0, r4
 800fa0a:	4798      	blx	r3
 800fa0c:	e7ce      	b.n	800f9ac <USBD_LL_DataInStage+0x48>
 800fa0e:	bf00      	nop

0800fa10 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800fa10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800fa14:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa16:	2201      	movs	r2, #1
 800fa18:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
  pdev->dev_config = 0U;
 800fa1c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800fa1e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 800fa22:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  if (pdev->pClass == NULL)
 800fa26:	b1eb      	cbz	r3, 800fa64 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800fa28:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
{
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800fa30:	b112      	cbz	r2, 800fa38 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	b103      	cbz	r3, 800fa38 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa36:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa38:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	4611      	mov	r1, r2
 800fa3e:	462b      	mov	r3, r5
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa40:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa42:	4620      	mov	r0, r4
 800fa44:	f7f2 f880 	bl	8001b48 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa48:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa4c:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa50:	462b      	mov	r3, r5
 800fa52:	2200      	movs	r2, #0
 800fa54:	2180      	movs	r1, #128	@ 0x80
 800fa56:	4620      	mov	r0, r4
 800fa58:	f7f2 f876 	bl	8001b48 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fa5c:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa5e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800fa60:	2000      	movs	r0, #0
}
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800fa64:	2003      	movs	r0, #3
}
 800fa66:	4770      	bx	lr

0800fa68 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800fa68:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop

0800fa70 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800fa70:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
{
 800fa74:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fa76:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 800fa78:	b2d2      	uxtb	r2, r2
 800fa7a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d

  return USBD_OK;
}
 800fa7e:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fa80:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
}
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop

0800fa88 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fa88:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fa8c:	2b04      	cmp	r3, #4
 800fa8e:	d104      	bne.n	800fa9a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fa90:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop

0800faa0 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800faa0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800faa4:	b162      	cbz	r2, 800fac0 <USBD_LL_SOF+0x20>
{
 800faa6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faa8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800faac:	2b03      	cmp	r3, #3
 800faae:	d001      	beq.n	800fab4 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800fab0:	2000      	movs	r0, #0
}
 800fab2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800fab4:	69d3      	ldr	r3, [r2, #28]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d0fa      	beq.n	800fab0 <USBD_LL_SOF+0x10>
      (void)pdev->pClass->SOF(pdev);
 800faba:	4798      	blx	r3
  return USBD_OK;
 800fabc:	2000      	movs	r0, #0
}
 800fabe:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800fac0:	2003      	movs	r0, #3
}
 800fac2:	4770      	bx	lr

0800fac4 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800fac4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800fac8:	b162      	cbz	r2, 800fae4 <USBD_LL_IsoINIncomplete+0x20>
{
 800faca:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800facc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fad0:	2b03      	cmp	r3, #3
 800fad2:	d001      	beq.n	800fad8 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800fad4:	2000      	movs	r0, #0
}
 800fad6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fad8:	6a13      	ldr	r3, [r2, #32]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d0fa      	beq.n	800fad4 <USBD_LL_IsoINIncomplete+0x10>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fade:	4798      	blx	r3
  return USBD_OK;
 800fae0:	2000      	movs	r0, #0
}
 800fae2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800fae4:	2003      	movs	r0, #3
}
 800fae6:	4770      	bx	lr

0800fae8 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800fae8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800faec:	b162      	cbz	r2, 800fb08 <USBD_LL_IsoOUTIncomplete+0x20>
{
 800faee:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faf0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800faf4:	2b03      	cmp	r3, #3
 800faf6:	d001      	beq.n	800fafc <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800faf8:	2000      	movs	r0, #0
}
 800fafa:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fafc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d0fa      	beq.n	800faf8 <USBD_LL_IsoOUTIncomplete+0x10>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fb02:	4798      	blx	r3
  return USBD_OK;
 800fb04:	2000      	movs	r0, #0
}
 800fb06:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800fb08:	2003      	movs	r0, #3
}
 800fb0a:	4770      	bx	lr

0800fb0c <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	4770      	bx	lr

0800fb10 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 800fb10:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb14:	2101      	movs	r1, #1
 800fb16:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass != NULL)
 800fb1a:	b12a      	cbz	r2, 800fb28 <USBD_LL_DevDisconnected+0x18>
{
 800fb1c:	b508      	push	{r3, lr}
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fb1e:	6852      	ldr	r2, [r2, #4]
 800fb20:	7901      	ldrb	r1, [r0, #4]
 800fb22:	4790      	blx	r2
  }

  return USBD_OK;
}
 800fb24:	2000      	movs	r0, #0
 800fb26:	bd08      	pop	{r3, pc}
 800fb28:	2000      	movs	r0, #0
 800fb2a:	4770      	bx	lr

0800fb2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb2c:	b530      	push	{r4, r5, lr}
 800fb2e:	780b      	ldrb	r3, [r1, #0]
 800fb30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb34:	2b20      	cmp	r3, #32
{
 800fb36:	b083      	sub	sp, #12
 800fb38:	460d      	mov	r5, r1
 800fb3a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb3c:	d00e      	beq.n	800fb5c <USBD_StdDevReq+0x30>
 800fb3e:	2b40      	cmp	r3, #64	@ 0x40
 800fb40:	d00c      	beq.n	800fb5c <USBD_StdDevReq+0x30>
 800fb42:	b1a3      	cbz	r3, 800fb6e <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb44:	2180      	movs	r1, #128	@ 0x80
 800fb46:	4620      	mov	r0, r4
 800fb48:	f7f2 f818 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f7f2 f814 	bl	8001b7c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800fb54:	2500      	movs	r5, #0
}
 800fb56:	4628      	mov	r0, r5
 800fb58:	b003      	add	sp, #12
 800fb5a:	bd30      	pop	{r4, r5, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb5c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	4629      	mov	r1, r5
 800fb64:	4620      	mov	r0, r4
}
 800fb66:	b003      	add	sp, #12
 800fb68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb6c:	4718      	bx	r3
      switch (req->bRequest)
 800fb6e:	784b      	ldrb	r3, [r1, #1]
 800fb70:	2b09      	cmp	r3, #9
 800fb72:	d8e7      	bhi.n	800fb44 <USBD_StdDevReq+0x18>
 800fb74:	a201      	add	r2, pc, #4	@ (adr r2, 800fb7c <USBD_StdDevReq+0x50>)
 800fb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb7a:	bf00      	nop
 800fb7c:	0800fbdd 	.word	0x0800fbdd
 800fb80:	0800fc05 	.word	0x0800fc05
 800fb84:	0800fb45 	.word	0x0800fb45
 800fb88:	0800fc23 	.word	0x0800fc23
 800fb8c:	0800fb45 	.word	0x0800fb45
 800fb90:	0800fc2b 	.word	0x0800fc2b
 800fb94:	0800fc65 	.word	0x0800fc65
 800fb98:	0800fb45 	.word	0x0800fb45
 800fb9c:	0800fcb9 	.word	0x0800fcb9
 800fba0:	0800fba5 	.word	0x0800fba5
  cfgidx = (uint8_t)(req->wValue);
 800fba4:	7889      	ldrb	r1, [r1, #2]
 800fba6:	4db6      	ldr	r5, [pc, #728]	@ (800fe80 <USBD_StdDevReq+0x354>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fba8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800fbaa:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fbac:	f200 8148 	bhi.w	800fe40 <USBD_StdDevReq+0x314>
  switch (pdev->dev_state)
 800fbb0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fbb4:	2b02      	cmp	r3, #2
 800fbb6:	b2da      	uxtb	r2, r3
 800fbb8:	f000 8130 	beq.w	800fe1c <USBD_StdDevReq+0x2f0>
 800fbbc:	2a03      	cmp	r2, #3
 800fbbe:	f000 810b 	beq.w	800fdd8 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbc2:	2180      	movs	r1, #128	@ 0x80
 800fbc4:	f7f1 ffda 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbc8:	2100      	movs	r1, #0
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f7f1 ffd6 	bl	8001b7c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fbd0:	7829      	ldrb	r1, [r5, #0]
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f7ff fe5a 	bl	800f88c <USBD_ClrClassConfig>
    return USBD_FAIL;
 800fbd8:	2503      	movs	r5, #3
 800fbda:	e7bc      	b.n	800fb56 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800fbdc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fbe0:	3b01      	subs	r3, #1
 800fbe2:	2b02      	cmp	r3, #2
 800fbe4:	d8ae      	bhi.n	800fb44 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800fbe6:	88ca      	ldrh	r2, [r1, #6]
 800fbe8:	2a02      	cmp	r2, #2
 800fbea:	d1ab      	bne.n	800fb44 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 800fbec:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800fbf0:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	bf0c      	ite	eq
 800fbf6:	2301      	moveq	r3, #1
 800fbf8:	2303      	movne	r3, #3
 800fbfa:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fbfe:	f000 fa53 	bl	80100a8 <USBD_CtlSendData>
      break;
 800fc02:	e7a7      	b.n	800fb54 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800fc04:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	d89a      	bhi.n	800fb44 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc0e:	884b      	ldrh	r3, [r1, #2]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d19f      	bne.n	800fb54 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800fc14:	2300      	movs	r3, #0
 800fc16:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f000 fa70 	bl	8010100 <USBD_CtlSendStatus>
 800fc20:	e798      	b.n	800fb54 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc22:	884b      	ldrh	r3, [r1, #2]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d195      	bne.n	800fb54 <USBD_StdDevReq+0x28>
 800fc28:	e7f5      	b.n	800fc16 <USBD_StdDevReq+0xea>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fc2a:	888b      	ldrh	r3, [r1, #4]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d189      	bne.n	800fb44 <USBD_StdDevReq+0x18>
 800fc30:	88cb      	ldrh	r3, [r1, #6]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d186      	bne.n	800fb44 <USBD_StdDevReq+0x18>
 800fc36:	884d      	ldrh	r5, [r1, #2]
 800fc38:	2d7f      	cmp	r5, #127	@ 0x7f
 800fc3a:	d883      	bhi.n	800fb44 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc3c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fc40:	2b03      	cmp	r3, #3
 800fc42:	f43f af7f 	beq.w	800fb44 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fc46:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800fc48:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fc4c:	f7f1 ffc2 	bl	8001bd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fc50:	4620      	mov	r0, r4
 800fc52:	f000 fa55 	bl	8010100 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800fc56:	2d00      	cmp	r5, #0
 800fc58:	f000 8114 	beq.w	800fe84 <USBD_StdDevReq+0x358>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc5c:	2302      	movs	r3, #2
 800fc5e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fc62:	e777      	b.n	800fb54 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800fc64:	884a      	ldrh	r2, [r1, #2]
 800fc66:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800fc68:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800fc6a:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 800fc6c:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800fc70:	2b0e      	cmp	r3, #14
 800fc72:	f63f af67 	bhi.w	800fb44 <USBD_StdDevReq+0x18>
 800fc76:	a101      	add	r1, pc, #4	@ (adr r1, 800fc7c <USBD_StdDevReq+0x150>)
 800fc78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc7c:	0800fd59 	.word	0x0800fd59
 800fc80:	0800fd3f 	.word	0x0800fd3f
 800fc84:	0800fd2d 	.word	0x0800fd2d
 800fc88:	0800fb45 	.word	0x0800fb45
 800fc8c:	0800fb45 	.word	0x0800fb45
 800fc90:	0800fd17 	.word	0x0800fd17
 800fc94:	0800fd69 	.word	0x0800fd69
 800fc98:	0800fb45 	.word	0x0800fb45
 800fc9c:	0800fb45 	.word	0x0800fb45
 800fca0:	0800fb45 	.word	0x0800fb45
 800fca4:	0800fb45 	.word	0x0800fb45
 800fca8:	0800fb45 	.word	0x0800fb45
 800fcac:	0800fb45 	.word	0x0800fb45
 800fcb0:	0800fb45 	.word	0x0800fb45
 800fcb4:	0800fcdf 	.word	0x0800fcdf
  if (req->wLength != 1U)
 800fcb8:	88ca      	ldrh	r2, [r1, #6]
 800fcba:	2a01      	cmp	r2, #1
 800fcbc:	f47f af42 	bne.w	800fb44 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800fcc0:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 800fcc4:	2902      	cmp	r1, #2
 800fcc6:	b2cb      	uxtb	r3, r1
 800fcc8:	d87f      	bhi.n	800fdca <USBD_StdDevReq+0x29e>
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f43f af3a 	beq.w	800fb44 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800fcd0:	4601      	mov	r1, r0
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fcd8:	f000 f9e6 	bl	80100a8 <USBD_CtlSendData>
        break;
 800fcdc:	e73a      	b.n	800fb54 <USBD_StdDevReq+0x28>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fcde:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fce2:	69db      	ldr	r3, [r3, #28]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f43f af2d 	beq.w	800fb44 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fcea:	7c20      	ldrb	r0, [r4, #16]
 800fcec:	f10d 0106 	add.w	r1, sp, #6
 800fcf0:	4798      	blx	r3
  if (req->wLength != 0U)
 800fcf2:	88eb      	ldrh	r3, [r5, #6]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d090      	beq.n	800fc1a <USBD_StdDevReq+0xee>
    if (len != 0U)
 800fcf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fcfc:	2a00      	cmp	r2, #0
 800fcfe:	f43f af21 	beq.w	800fb44 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 800fd02:	429a      	cmp	r2, r3
 800fd04:	bf28      	it	cs
 800fd06:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd08:	4601      	mov	r1, r0
 800fd0a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800fd0c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd10:	f000 f9ca 	bl	80100a8 <USBD_CtlSendData>
 800fd14:	e71e      	b.n	800fb54 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd16:	7c03      	ldrb	r3, [r0, #16]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	f47f af13 	bne.w	800fb44 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fd1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800fd22:	f10d 0006 	add.w	r0, sp, #6
 800fd26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd28:	4798      	blx	r3
  if (err != 0U)
 800fd2a:	e7e2      	b.n	800fcf2 <USBD_StdDevReq+0x1c6>
      switch ((uint8_t)(req->wValue))
 800fd2c:	b2d2      	uxtb	r2, r2
 800fd2e:	2a05      	cmp	r2, #5
 800fd30:	f63f af08 	bhi.w	800fb44 <USBD_StdDevReq+0x18>
 800fd34:	e8df f002 	tbb	[pc, r2]
 800fd38:	31373d43 	.word	0x31373d43
 800fd3c:	252b      	.short	0x252b
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd3e:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd40:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd44:	2a00      	cmp	r2, #0
 800fd46:	f040 808d 	bne.w	800fe64 <USBD_StdDevReq+0x338>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fd4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd4c:	f10d 0006 	add.w	r0, sp, #6
 800fd50:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fd52:	2302      	movs	r3, #2
 800fd54:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800fd56:	e7cc      	b.n	800fcf2 <USBD_StdDevReq+0x1c6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fd58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fd5c:	7c00      	ldrb	r0, [r0, #16]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f10d 0106 	add.w	r1, sp, #6
 800fd64:	4798      	blx	r3
  if (err != 0U)
 800fd66:	e7c4      	b.n	800fcf2 <USBD_StdDevReq+0x1c6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd68:	7c03      	ldrb	r3, [r0, #16]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	f47f aeea 	bne.w	800fb44 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fd70:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800fd74:	f10d 0006 	add.w	r0, sp, #6
 800fd78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd7a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd7c:	2307      	movs	r3, #7
 800fd7e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800fd80:	e7b7      	b.n	800fcf2 <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd82:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fd86:	699b      	ldr	r3, [r3, #24]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d1ae      	bne.n	800fcea <USBD_StdDevReq+0x1be>
 800fd8c:	e6da      	b.n	800fb44 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fd92:	695b      	ldr	r3, [r3, #20]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1a8      	bne.n	800fcea <USBD_StdDevReq+0x1be>
 800fd98:	e6d4      	b.n	800fb44 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fd9a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1a2      	bne.n	800fcea <USBD_StdDevReq+0x1be>
 800fda4:	e6ce      	b.n	800fb44 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fda6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d19c      	bne.n	800fcea <USBD_StdDevReq+0x1be>
 800fdb0:	e6c8      	b.n	800fb44 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fdb2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d196      	bne.n	800fcea <USBD_StdDevReq+0x1be>
 800fdbc:	e6c2      	b.n	800fb44 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fdbe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d190      	bne.n	800fcea <USBD_StdDevReq+0x1be>
 800fdc8:	e6bc      	b.n	800fb44 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800fdca:	2b03      	cmp	r3, #3
 800fdcc:	f47f aeba 	bne.w	800fb44 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fdd0:	1d01      	adds	r1, r0, #4
 800fdd2:	f000 f969 	bl	80100a8 <USBD_CtlSendData>
        break;
 800fdd6:	e6bd      	b.n	800fb54 <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 800fdd8:	2900      	cmp	r1, #0
 800fdda:	d039      	beq.n	800fe50 <USBD_StdDevReq+0x324>
      else if (cfgidx != pdev->dev_config)
 800fddc:	6841      	ldr	r1, [r0, #4]
 800fdde:	2901      	cmp	r1, #1
 800fde0:	f43f af1b 	beq.w	800fc1a <USBD_StdDevReq+0xee>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fde4:	b2c9      	uxtb	r1, r1
 800fde6:	f7ff fd51 	bl	800f88c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fdea:	7829      	ldrb	r1, [r5, #0]
 800fdec:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f7ff fd44 	bl	800f87c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800fdf4:	4605      	mov	r5, r0
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	f43f af0f 	beq.w	800fc1a <USBD_StdDevReq+0xee>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdfc:	2180      	movs	r1, #128	@ 0x80
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f7f1 febc 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fe04:	2100      	movs	r1, #0
 800fe06:	4620      	mov	r0, r4
 800fe08:	f7f1 feb8 	bl	8001b7c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe0c:	7921      	ldrb	r1, [r4, #4]
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f7ff fd3c 	bl	800f88c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe14:	2302      	movs	r3, #2
 800fe16:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fe1a:	e69c      	b.n	800fb56 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800fe1c:	2900      	cmp	r1, #0
 800fe1e:	f43f aefc 	beq.w	800fc1a <USBD_StdDevReq+0xee>
        pdev->dev_config = cfgidx;
 800fe22:	2101      	movs	r1, #1
 800fe24:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe26:	f7ff fd29 	bl	800f87c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800fe2a:	4605      	mov	r5, r0
 800fe2c:	b308      	cbz	r0, 800fe72 <USBD_StdDevReq+0x346>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe2e:	2180      	movs	r1, #128	@ 0x80
 800fe30:	4620      	mov	r0, r4
 800fe32:	f7f1 fea3 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fe36:	2100      	movs	r1, #0
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f7f1 fe9f 	bl	8001b7c <USBD_LL_StallEP>
}
 800fe3e:	e68a      	b.n	800fb56 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe40:	2180      	movs	r1, #128	@ 0x80
 800fe42:	f7f1 fe9b 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fe46:	2100      	movs	r1, #0
 800fe48:	4620      	mov	r0, r4
 800fe4a:	f7f1 fe97 	bl	8001b7c <USBD_LL_StallEP>
    return USBD_FAIL;
 800fe4e:	e6c3      	b.n	800fbd8 <USBD_StdDevReq+0xac>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe50:	2302      	movs	r3, #2
 800fe52:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fe56:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe58:	f7ff fd18 	bl	800f88c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f000 f94f 	bl	8010100 <USBD_CtlSendStatus>
 800fe62:	e677      	b.n	800fb54 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fe64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe66:	f10d 0006 	add.w	r0, sp, #6
 800fe6a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe6c:	2302      	movs	r3, #2
 800fe6e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800fe70:	e73f      	b.n	800fcf2 <USBD_StdDevReq+0x1c6>
          (void)USBD_CtlSendStatus(pdev);
 800fe72:	4620      	mov	r0, r4
 800fe74:	f000 f944 	bl	8010100 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fe78:	2303      	movs	r3, #3
 800fe7a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fe7e:	e669      	b.n	800fb54 <USBD_StdDevReq+0x28>
 800fe80:	20003004 	.word	0x20003004
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fe84:	2301      	movs	r3, #1
 800fe86:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fe8a:	e663      	b.n	800fb54 <USBD_StdDevReq+0x28>

0800fe8c <USBD_StdItfReq>:
{
 800fe8c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe8e:	780b      	ldrb	r3, [r1, #0]
 800fe90:	065a      	lsls	r2, r3, #25
{
 800fe92:	460d      	mov	r5, r1
 800fe94:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe96:	d50c      	bpl.n	800feb2 <USBD_StdItfReq+0x26>
 800fe98:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800fe9c:	2a40      	cmp	r2, #64	@ 0x40
 800fe9e:	d008      	beq.n	800feb2 <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fea0:	2180      	movs	r1, #128	@ 0x80
 800fea2:	f7f1 fe6b 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fea6:	2100      	movs	r1, #0
 800fea8:	4620      	mov	r0, r4
 800feaa:	f7f1 fe67 	bl	8001b7c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800feae:	2000      	movs	r0, #0
}
 800feb0:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800feb2:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800feb6:	3b01      	subs	r3, #1
 800feb8:	2b02      	cmp	r3, #2
 800feba:	d811      	bhi.n	800fee0 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800febc:	792b      	ldrb	r3, [r5, #4]
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d80e      	bhi.n	800fee0 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fec2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800fec6:	4629      	mov	r1, r5
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	4620      	mov	r0, r4
 800fecc:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fece:	88ea      	ldrh	r2, [r5, #6]
 800fed0:	2a00      	cmp	r2, #0
 800fed2:	d1ed      	bne.n	800feb0 <USBD_StdItfReq+0x24>
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d1eb      	bne.n	800feb0 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800fed8:	4620      	mov	r0, r4
 800feda:	f000 f911 	bl	8010100 <USBD_CtlSendStatus>
 800fede:	e7e6      	b.n	800feae <USBD_StdItfReq+0x22>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fee0:	2180      	movs	r1, #128	@ 0x80
 800fee2:	4620      	mov	r0, r4
 800fee4:	f7f1 fe4a 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fee8:	2100      	movs	r1, #0
 800feea:	4620      	mov	r0, r4
 800feec:	f7f1 fe46 	bl	8001b7c <USBD_LL_StallEP>
}
 800fef0:	e7dd      	b.n	800feae <USBD_StdItfReq+0x22>
 800fef2:	bf00      	nop

0800fef4 <USBD_StdEPReq>:
{
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 800fef8:	888a      	ldrh	r2, [r1, #4]
 800fefa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fefe:	2b20      	cmp	r3, #32
{
 800ff00:	460c      	mov	r4, r1
 800ff02:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff04:	d01b      	beq.n	800ff3e <USBD_StdEPReq+0x4a>
 800ff06:	2b40      	cmp	r3, #64	@ 0x40
 800ff08:	d019      	beq.n	800ff3e <USBD_StdEPReq+0x4a>
 800ff0a:	b303      	cbz	r3, 800ff4e <USBD_StdEPReq+0x5a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff0c:	2180      	movs	r1, #128	@ 0x80
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f7f1 fe34 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff14:	2100      	movs	r1, #0
 800ff16:	4628      	mov	r0, r5
 800ff18:	f7f1 fe30 	bl	8001b7c <USBD_LL_StallEP>
}
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800ff20:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	b2da      	uxtb	r2, r3
 800ff28:	d053      	beq.n	800ffd2 <USBD_StdEPReq+0xde>
 800ff2a:	2a03      	cmp	r2, #3
 800ff2c:	d1ee      	bne.n	800ff0c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff2e:	8863      	ldrh	r3, [r4, #2]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d1f3      	bne.n	800ff1c <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 800ff34:	064e      	lsls	r6, r1, #25
 800ff36:	d171      	bne.n	801001c <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f000 f8e1 	bl	8010100 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff3e:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
 800ff42:	4621      	mov	r1, r4
 800ff44:	4628      	mov	r0, r5
 800ff46:	689b      	ldr	r3, [r3, #8]
}
 800ff48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff4c:	4718      	bx	r3
      switch (req->bRequest)
 800ff4e:	7863      	ldrb	r3, [r4, #1]
 800ff50:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 800ff52:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800ff54:	d0e4      	beq.n	800ff20 <USBD_StdEPReq+0x2c>
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d02a      	beq.n	800ffb0 <USBD_StdEPReq+0xbc>
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d1d6      	bne.n	800ff0c <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 800ff5e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	b2d8      	uxtb	r0, r3
 800ff66:	d03d      	beq.n	800ffe4 <USBD_StdEPReq+0xf0>
 800ff68:	2803      	cmp	r0, #3
 800ff6a:	d1cf      	bne.n	800ff0c <USBD_StdEPReq+0x18>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ff6c:	f001 030f 	and.w	r3, r1, #15
 800ff70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800ff74:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ff76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800ff7a:	d442      	bmi.n	8010002 <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ff7c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d0c3      	beq.n	800ff0c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff84:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800ff88:	2414      	movs	r4, #20
 800ff8a:	fb04 5403 	mla	r4, r4, r3, r5
 800ff8e:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d040      	beq.n	8010018 <USBD_StdEPReq+0x124>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ff96:	4628      	mov	r0, r5
 800ff98:	f7f1 fe08 	bl	8001bac <USBD_LL_IsStallEP>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	d03b      	beq.n	8010018 <USBD_StdEPReq+0x124>
 800ffa0:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 800ffa2:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ffa4:	2202      	movs	r2, #2
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	f000 f87d 	bl	80100a8 <USBD_CtlSendData>
              break;
 800ffae:	e7b5      	b.n	800ff1c <USBD_StdEPReq+0x28>
          switch (pdev->dev_state)
 800ffb0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ffb4:	2b02      	cmp	r3, #2
 800ffb6:	b2da      	uxtb	r2, r3
 800ffb8:	d00b      	beq.n	800ffd2 <USBD_StdEPReq+0xde>
 800ffba:	2a03      	cmp	r2, #3
 800ffbc:	d1a6      	bne.n	800ff0c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ffbe:	8863      	ldrh	r3, [r4, #2]
 800ffc0:	b91b      	cbnz	r3, 800ffca <USBD_StdEPReq+0xd6>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ffc2:	064a      	lsls	r2, r1, #25
 800ffc4:	d001      	beq.n	800ffca <USBD_StdEPReq+0xd6>
 800ffc6:	88e3      	ldrh	r3, [r4, #6]
 800ffc8:	b35b      	cbz	r3, 8010022 <USBD_StdEPReq+0x12e>
              (void)USBD_CtlSendStatus(pdev);
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f000 f898 	bl	8010100 <USBD_CtlSendStatus>
              break;
 800ffd0:	e7a4      	b.n	800ff1c <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ffd2:	064b      	lsls	r3, r1, #25
 800ffd4:	d09a      	beq.n	800ff0c <USBD_StdEPReq+0x18>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ffd6:	f7f1 fdd1 	bl	8001b7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffda:	2180      	movs	r1, #128	@ 0x80
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f7f1 fdcd 	bl	8001b7c <USBD_LL_StallEP>
 800ffe2:	e79b      	b.n	800ff1c <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ffe4:	0648      	lsls	r0, r1, #25
 800ffe6:	d191      	bne.n	800ff0c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffe8:	0611      	lsls	r1, r2, #24
 800ffea:	bf4c      	ite	mi
 800ffec:	f105 0114 	addmi.w	r1, r5, #20
 800fff0:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 800fff4:	2300      	movs	r3, #0
 800fff6:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fff8:	2202      	movs	r2, #2
 800fffa:	4628      	mov	r0, r5
 800fffc:	f000 f854 	bl	80100a8 <USBD_CtlSendData>
              break;
 8010000:	e78c      	b.n	800ff1c <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010002:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010004:	2b00      	cmp	r3, #0
 8010006:	d081      	beq.n	800ff0c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010008:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 801000c:	1c5c      	adds	r4, r3, #1
 801000e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010012:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8010016:	e7bc      	b.n	800ff92 <USBD_StdEPReq+0x9e>
{
 8010018:	2300      	movs	r3, #0
 801001a:	e7c2      	b.n	800ffa2 <USBD_StdEPReq+0xae>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801001c:	f7f1 fdba 	bl	8001b94 <USBD_LL_ClearStallEP>
 8010020:	e78a      	b.n	800ff38 <USBD_StdEPReq+0x44>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010022:	f7f1 fdab 	bl	8001b7c <USBD_LL_StallEP>
 8010026:	e7d0      	b.n	800ffca <USBD_StdEPReq+0xd6>

08010028 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8010028:	780b      	ldrb	r3, [r1, #0]
 801002a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 801002c:	784b      	ldrb	r3, [r1, #1]
 801002e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8010030:	884b      	ldrh	r3, [r1, #2]
 8010032:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8010034:	888b      	ldrh	r3, [r1, #4]
 8010036:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8010038:	88cb      	ldrh	r3, [r1, #6]
 801003a:	80c3      	strh	r3, [r0, #6]
}
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop

08010040 <USBD_CtlError>:
{
 8010040:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010042:	2180      	movs	r1, #128	@ 0x80
{
 8010044:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010046:	f7f1 fd99 	bl	8001b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801004a:	4620      	mov	r0, r4
 801004c:	2100      	movs	r1, #0
}
 801004e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8010052:	f7f1 bd93 	b.w	8001b7c <USBD_LL_StallEP>
 8010056:	bf00      	nop

08010058 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8010058:	b308      	cbz	r0, 801009e <USBD_GetString+0x46>
{
 801005a:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801005c:	7803      	ldrb	r3, [r0, #0]
 801005e:	460e      	mov	r6, r1
 8010060:	4614      	mov	r4, r2
 8010062:	4605      	mov	r5, r0
 8010064:	b1e3      	cbz	r3, 80100a0 <USBD_GetString+0x48>
 8010066:	3001      	adds	r0, #1
 8010068:	f7f0 f91a 	bl	80002a0 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801006c:	1c43      	adds	r3, r0, #1
 801006e:	b2db      	uxtb	r3, r3
 8010070:	3301      	adds	r3, #1
 8010072:	005b      	lsls	r3, r3, #1
 8010074:	b2da      	uxtb	r2, r3
 8010076:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010078:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 801007a:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801007c:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 801007e:	782c      	ldrb	r4, [r5, #0]
 8010080:	b164      	cbz	r4, 801009c <USBD_GetString+0x44>
 8010082:	4628      	mov	r0, r5
  idx++;
 8010084:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8010086:	2100      	movs	r1, #0
    idx++;
 8010088:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 801008a:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 801008c:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 801008e:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 8010090:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8010094:	3302      	adds	r3, #2
 8010096:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8010098:	2c00      	cmp	r4, #0
 801009a:	d1f5      	bne.n	8010088 <USBD_GetString+0x30>
}
 801009c:	bd70      	pop	{r4, r5, r6, pc}
 801009e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80100a0:	2202      	movs	r2, #2
 80100a2:	4613      	mov	r3, r2
 80100a4:	e7e7      	b.n	8010076 <USBD_GetString+0x1e>
 80100a6:	bf00      	nop

080100a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80100a8:	b508      	push	{r3, lr}
 80100aa:	4613      	mov	r3, r2
 80100ac:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80100ae:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 80100b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80100b4:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100b8:	2100      	movs	r1, #0
 80100ba:	f7f1 fd97 	bl	8001bec <USBD_LL_Transmit>

  return USBD_OK;
}
 80100be:	2000      	movs	r0, #0
 80100c0:	bd08      	pop	{r3, pc}
 80100c2:	bf00      	nop

080100c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80100c4:	b508      	push	{r3, lr}
 80100c6:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100c8:	460a      	mov	r2, r1
 80100ca:	2100      	movs	r1, #0
 80100cc:	f7f1 fd8e 	bl	8001bec <USBD_LL_Transmit>

  return USBD_OK;
}
 80100d0:	2000      	movs	r0, #0
 80100d2:	bd08      	pop	{r3, pc}

080100d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80100d4:	b508      	push	{r3, lr}
 80100d6:	4613      	mov	r3, r2
 80100d8:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80100da:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 80100dc:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80100e0:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80100e4:	2100      	movs	r1, #0
 80100e6:	f7f1 fd8d 	bl	8001c04 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80100ea:	2000      	movs	r0, #0
 80100ec:	bd08      	pop	{r3, pc}
 80100ee:	bf00      	nop

080100f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80100f0:	b508      	push	{r3, lr}
 80100f2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80100f4:	460a      	mov	r2, r1
 80100f6:	2100      	movs	r1, #0
 80100f8:	f7f1 fd84 	bl	8001c04 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80100fc:	2000      	movs	r0, #0
 80100fe:	bd08      	pop	{r3, pc}

08010100 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010100:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010102:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010104:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010106:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801010a:	461a      	mov	r2, r3
 801010c:	4619      	mov	r1, r3
 801010e:	f7f1 fd6d 	bl	8001bec <USBD_LL_Transmit>

  return USBD_OK;
}
 8010112:	2000      	movs	r0, #0
 8010114:	bd08      	pop	{r3, pc}
 8010116:	bf00      	nop

08010118 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010118:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801011a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801011c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801011e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010122:	461a      	mov	r2, r3
 8010124:	4619      	mov	r1, r3
 8010126:	f7f1 fd6d 	bl	8001c04 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801012a:	2000      	movs	r0, #0
 801012c:	bd08      	pop	{r3, pc}
 801012e:	bf00      	nop

08010130 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010130:	4b03      	ldr	r3, [pc, #12]	@ (8010140 <disk_status+0x10>)
 8010132:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8010136:	4403      	add	r3, r0
 8010138:	6852      	ldr	r2, [r2, #4]
 801013a:	7a18      	ldrb	r0, [r3, #8]
 801013c:	6853      	ldr	r3, [r2, #4]
 801013e:	4718      	bx	r3
 8010140:	20003030 	.word	0x20003030

08010144 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8010144:	4b06      	ldr	r3, [pc, #24]	@ (8010160 <disk_initialize+0x1c>)
 8010146:	5c1a      	ldrb	r2, [r3, r0]
 8010148:	b942      	cbnz	r2, 801015c <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801014a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 801014e:	2101      	movs	r1, #1
 8010150:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010152:	6852      	ldr	r2, [r2, #4]
 8010154:	4403      	add	r3, r0
 8010156:	6812      	ldr	r2, [r2, #0]
 8010158:	7a18      	ldrb	r0, [r3, #8]
 801015a:	4710      	bx	r2
  }
  return stat;
}
 801015c:	2000      	movs	r0, #0
 801015e:	4770      	bx	lr
 8010160:	20003030 	.word	0x20003030

08010164 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010164:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010166:	4c05      	ldr	r4, [pc, #20]	@ (801017c <disk_read+0x18>)
 8010168:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 801016c:	4404      	add	r4, r0
 801016e:	686d      	ldr	r5, [r5, #4]
 8010170:	7a20      	ldrb	r0, [r4, #8]
 8010172:	68ac      	ldr	r4, [r5, #8]
 8010174:	46a4      	mov	ip, r4
  return res;
}
 8010176:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010178:	4760      	bx	ip
 801017a:	bf00      	nop
 801017c:	20003030 	.word	0x20003030

08010180 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010180:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010182:	4c05      	ldr	r4, [pc, #20]	@ (8010198 <disk_write+0x18>)
 8010184:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8010188:	4404      	add	r4, r0
 801018a:	686d      	ldr	r5, [r5, #4]
 801018c:	7a20      	ldrb	r0, [r4, #8]
 801018e:	68ec      	ldr	r4, [r5, #12]
 8010190:	46a4      	mov	ip, r4
  return res;
}
 8010192:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010194:	4760      	bx	ip
 8010196:	bf00      	nop
 8010198:	20003030 	.word	0x20003030

0801019c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801019c:	4b04      	ldr	r3, [pc, #16]	@ (80101b0 <disk_ioctl+0x14>)
 801019e:	eb03 0c00 	add.w	ip, r3, r0
 80101a2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80101a6:	f89c 0008 	ldrb.w	r0, [ip, #8]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	691b      	ldr	r3, [r3, #16]
 80101ae:	4718      	bx	r3
 80101b0:	20003030 	.word	0x20003030

080101b4 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 80101b4:	2000      	movs	r0, #0
 80101b6:	4770      	bx	lr

080101b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80101b8:	4602      	mov	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 80101ba:	4b29      	ldr	r3, [pc, #164]	@ (8010260 <inc_lock+0xa8>)
{
 80101bc:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 80101be:	6818      	ldr	r0, [r3, #0]
 80101c0:	6815      	ldr	r5, [r2, #0]
 80101c2:	4285      	cmp	r5, r0
 80101c4:	d024      	beq.n	8010210 <inc_lock+0x58>
 80101c6:	691c      	ldr	r4, [r3, #16]
 80101c8:	42ac      	cmp	r4, r5
 80101ca:	d006      	beq.n	80101da <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d02f      	beq.n	8010230 <inc_lock+0x78>
 80101d0:	2c00      	cmp	r4, #0
 80101d2:	d041      	beq.n	8010258 <inc_lock+0xa0>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80101d4:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 80101d6:	bcf0      	pop	{r4, r5, r6, r7}
 80101d8:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 80101da:	695e      	ldr	r6, [r3, #20]
 80101dc:	6897      	ldr	r7, [r2, #8]
 80101de:	42be      	cmp	r6, r7
 80101e0:	d1f4      	bne.n	80101cc <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 80101e2:	699e      	ldr	r6, [r3, #24]
 80101e4:	6957      	ldr	r7, [r2, #20]
 80101e6:	42be      	cmp	r6, r7
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80101e8:	bf08      	it	eq
 80101ea:	f04f 0c01 	moveq.w	ip, #1
			Files[i].clu == dp->obj.sclust &&
 80101ee:	d1ed      	bne.n	80101cc <inc_lock+0x14>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80101f0:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 80101f4:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80101f8:	8992      	ldrh	r2, [r2, #12]
 80101fa:	b1a1      	cbz	r1, 8010226 <inc_lock+0x6e>
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	d1e9      	bne.n	80101d4 <inc_lock+0x1c>
	return i + 1;
 8010200:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010208:	4423      	add	r3, r4
}
 801020a:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801020c:	819a      	strh	r2, [r3, #12]
}
 801020e:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8010210:	6894      	ldr	r4, [r2, #8]
 8010212:	685e      	ldr	r6, [r3, #4]
 8010214:	42a6      	cmp	r6, r4
 8010216:	d1d6      	bne.n	80101c6 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 8010218:	6954      	ldr	r4, [r2, #20]
 801021a:	689e      	ldr	r6, [r3, #8]
 801021c:	42a6      	cmp	r6, r4
 801021e:	d1d2      	bne.n	80101c6 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010220:	f04f 0c00 	mov.w	ip, #0
 8010224:	e7e4      	b.n	80101f0 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010226:	3201      	adds	r2, #1
 8010228:	b292      	uxth	r2, r2
	return i + 1;
 801022a:	f10c 0001 	add.w	r0, ip, #1
 801022e:	e7eb      	b.n	8010208 <inc_lock+0x50>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010230:	4684      	mov	ip, r0
 8010232:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 8010234:	ea4f 140c 	mov.w	r4, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010238:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 801023a:	511d      	str	r5, [r3, r4]
		Files[i].clu = dp->obj.sclust;
 801023c:	6895      	ldr	r5, [r2, #8]
 801023e:	6952      	ldr	r2, [r2, #20]
		Files[i].fs = dp->obj.fs;
 8010240:	eb03 110c 	add.w	r1, r3, ip, lsl #4
		Files[i].clu = dp->obj.sclust;
 8010244:	e9c1 5201 	strd	r5, r2, [r1, #4]
		Files[i].ctr = 0;
 8010248:	f04f 0200 	mov.w	r2, #0
 801024c:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801024e:	bf14      	ite	ne
 8010250:	f44f 7280 	movne.w	r2, #256	@ 0x100
 8010254:	2201      	moveq	r2, #1
 8010256:	e7d7      	b.n	8010208 <inc_lock+0x50>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010258:	2002      	movs	r0, #2
 801025a:	f04f 0c01 	mov.w	ip, #1
 801025e:	e7e9      	b.n	8010234 <inc_lock+0x7c>
 8010260:	20003008 	.word	0x20003008

08010264 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010264:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010266:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801026a:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801026c:	42b1      	cmp	r1, r6
{
 801026e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010270:	70c3      	strb	r3, [r0, #3]
 8010272:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010274:	d122      	bne.n	80102bc <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010276:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 801027a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801027e:	429a      	cmp	r2, r3
 8010280:	d11a      	bne.n	80102b8 <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010282:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8010286:	2be9      	cmp	r3, #233	@ 0xe9
 8010288:	d007      	beq.n	801029a <check_fs+0x36>
 801028a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801028c:	4a13      	ldr	r2, [pc, #76]	@ (80102dc <check_fs+0x78>)
 801028e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8010292:	4293      	cmp	r3, r2
 8010294:	d001      	beq.n	801029a <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010296:	2002      	movs	r0, #2
}
 8010298:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 801029a:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801029e:	4a10      	ldr	r2, [pc, #64]	@ (80102e0 <check_fs+0x7c>)
 80102a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d017      	beq.n	80102d8 <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 80102a8:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80102ac:	4b0d      	ldr	r3, [pc, #52]	@ (80102e4 <check_fs+0x80>)
 80102ae:	1ac0      	subs	r0, r0, r3
 80102b0:	bf18      	it	ne
 80102b2:	2001      	movne	r0, #1
 80102b4:	0040      	lsls	r0, r0, #1
}
 80102b6:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80102b8:	2003      	movs	r0, #3
}
 80102ba:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80102bc:	460d      	mov	r5, r1
 80102be:	460a      	mov	r2, r1
 80102c0:	7840      	ldrb	r0, [r0, #1]
 80102c2:	2301      	movs	r3, #1
 80102c4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80102c8:	f7ff ff4c 	bl	8010164 <disk_read>
 80102cc:	b110      	cbz	r0, 80102d4 <check_fs+0x70>
			fs->winsect = sector;
 80102ce:	62e6      	str	r6, [r4, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80102d0:	2004      	movs	r0, #4
}
 80102d2:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 80102d4:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 80102d6:	e7ce      	b.n	8010276 <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80102d8:	2000      	movs	r0, #0
}
 80102da:	bd70      	pop	{r4, r5, r6, pc}
 80102dc:	009000eb 	.word	0x009000eb
 80102e0:	00544146 	.word	0x00544146
 80102e4:	33544146 	.word	0x33544146

080102e8 <sync_fs>:
{
 80102e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80102ea:	78c3      	ldrb	r3, [r0, #3]
{
 80102ec:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80102ee:	b95b      	cbnz	r3, 8010308 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80102f0:	7823      	ldrb	r3, [r4, #0]
 80102f2:	2b03      	cmp	r3, #3
 80102f4:	d02a      	beq.n	801034c <sync_fs+0x64>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80102f6:	2200      	movs	r2, #0
 80102f8:	7860      	ldrb	r0, [r4, #1]
 80102fa:	4611      	mov	r1, r2
 80102fc:	f7ff ff4e 	bl	801019c <disk_ioctl>
 8010300:	3800      	subs	r0, #0
 8010302:	bf18      	it	ne
 8010304:	2001      	movne	r0, #1
}
 8010306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8010308:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801030a:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 801030e:	2301      	movs	r3, #1
 8010310:	7840      	ldrb	r0, [r0, #1]
 8010312:	462a      	mov	r2, r5
 8010314:	4639      	mov	r1, r7
 8010316:	f7ff ff33 	bl	8010180 <disk_write>
 801031a:	b9a8      	cbnz	r0, 8010348 <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801031c:	6a22      	ldr	r2, [r4, #32]
 801031e:	69a3      	ldr	r3, [r4, #24]
			fs->wflag = 0;
 8010320:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010322:	1aaa      	subs	r2, r5, r2
 8010324:	429a      	cmp	r2, r3
 8010326:	d2e3      	bcs.n	80102f0 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010328:	78a6      	ldrb	r6, [r4, #2]
 801032a:	2e01      	cmp	r6, #1
 801032c:	d801      	bhi.n	8010332 <sync_fs+0x4a>
 801032e:	e7df      	b.n	80102f0 <sync_fs+0x8>
					wsect += fs->fsize;
 8010330:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010332:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8010334:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8010336:	462a      	mov	r2, r5
 8010338:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801033a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801033c:	4639      	mov	r1, r7
 801033e:	f7ff ff1f 	bl	8010180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010342:	2e01      	cmp	r6, #1
 8010344:	d1f4      	bne.n	8010330 <sync_fs+0x48>
 8010346:	e7d3      	b.n	80102f0 <sync_fs+0x8>
			res = FR_DISK_ERR;
 8010348:	2001      	movs	r0, #1
}
 801034a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801034c:	7925      	ldrb	r5, [r4, #4]
 801034e:	2d01      	cmp	r5, #1
 8010350:	d1d1      	bne.n	80102f6 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8010352:	f104 0630 	add.w	r6, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 8010356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801035a:	2100      	movs	r1, #0
 801035c:	4630      	mov	r0, r6
 801035e:	f004 fea8 	bl	80150b2 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8010362:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8010366:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
			fs->winsect = fs->volbase + 1;
 801036a:	69e2      	ldr	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 801036c:	490a      	ldr	r1, [pc, #40]	@ (8010398 <sync_fs+0xb0>)
 801036e:	480b      	ldr	r0, [pc, #44]	@ (801039c <sync_fs+0xb4>)
 8010370:	6321      	str	r1, [r4, #48]	@ 0x30
			fs->winsect = fs->volbase + 1;
 8010372:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8010374:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010378:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
	*ptr++ = (BYTE)val; val >>= 8;
 801037c:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
 8010380:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010384:	462b      	mov	r3, r5
 8010386:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8010388:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801038a:	4631      	mov	r1, r6
 801038c:	f7ff fef8 	bl	8010180 <disk_write>
			fs->fsi_flag = 0;
 8010390:	2300      	movs	r3, #0
 8010392:	7123      	strb	r3, [r4, #4]
 8010394:	e7af      	b.n	80102f6 <sync_fs+0xe>
 8010396:	bf00      	nop
 8010398:	41615252 	.word	0x41615252
 801039c:	61417272 	.word	0x61417272

080103a0 <move_window>:
{
 80103a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80103a4:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 80103a6:	428e      	cmp	r6, r1
 80103a8:	d102      	bne.n	80103b0 <move_window+0x10>
	FRESULT res = FR_OK;
 80103aa:	2000      	movs	r0, #0
}
 80103ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80103b0:	4604      	mov	r4, r0
 80103b2:	460d      	mov	r5, r1
 80103b4:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80103b6:	7840      	ldrb	r0, [r0, #1]
 80103b8:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80103bc:	b963      	cbnz	r3, 80103d8 <move_window+0x38>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80103be:	462a      	mov	r2, r5
 80103c0:	2301      	movs	r3, #1
 80103c2:	4639      	mov	r1, r7
 80103c4:	f7ff fece 	bl	8010164 <disk_read>
				res = FR_DISK_ERR;
 80103c8:	2800      	cmp	r0, #0
 80103ca:	bf1c      	itt	ne
 80103cc:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 80103d0:	2001      	movne	r0, #1
			fs->winsect = sector;
 80103d2:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 80103d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80103d8:	2301      	movs	r3, #1
 80103da:	4632      	mov	r2, r6
 80103dc:	4639      	mov	r1, r7
 80103de:	f7ff fecf 	bl	8010180 <disk_write>
 80103e2:	b9d0      	cbnz	r0, 801041a <move_window+0x7a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80103e4:	6a22      	ldr	r2, [r4, #32]
 80103e6:	69a3      	ldr	r3, [r4, #24]
			fs->wflag = 0;
 80103e8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80103ea:	1ab2      	subs	r2, r6, r2
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d212      	bcs.n	8010416 <move_window+0x76>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80103f0:	f894 8002 	ldrb.w	r8, [r4, #2]
 80103f4:	f1b8 0f01 	cmp.w	r8, #1
 80103f8:	d801      	bhi.n	80103fe <move_window+0x5e>
 80103fa:	e00c      	b.n	8010416 <move_window+0x76>
					wsect += fs->fsize;
 80103fc:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80103fe:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8010400:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8010402:	4632      	mov	r2, r6
 8010404:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010406:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801040a:	4639      	mov	r1, r7
 801040c:	f7ff feb8 	bl	8010180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010410:	f1b8 0f01 	cmp.w	r8, #1
 8010414:	d1f2      	bne.n	80103fc <move_window+0x5c>
 8010416:	7860      	ldrb	r0, [r4, #1]
 8010418:	e7d1      	b.n	80103be <move_window+0x1e>
			res = FR_DISK_ERR;
 801041a:	2001      	movs	r0, #1
 801041c:	e7c6      	b.n	80103ac <move_window+0xc>
 801041e:	bf00      	nop

08010420 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path) {	/* If the pointer is not a null */
 8010424:	6804      	ldr	r4, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010426:	2300      	movs	r3, #0
 8010428:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 801042a:	b184      	cbz	r4, 801044e <find_volume+0x2e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801042c:	7825      	ldrb	r5, [r4, #0]
 801042e:	2d20      	cmp	r5, #32
 8010430:	d913      	bls.n	801045a <find_volume+0x3a>
 8010432:	462b      	mov	r3, r5
 8010434:	46a4      	mov	ip, r4
 8010436:	e003      	b.n	8010440 <find_volume+0x20>
 8010438:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 801043c:	2b20      	cmp	r3, #32
 801043e:	d90c      	bls.n	801045a <find_volume+0x3a>
 8010440:	2b3a      	cmp	r3, #58	@ 0x3a
 8010442:	d1f9      	bne.n	8010438 <find_volume+0x18>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010444:	2d30      	cmp	r5, #48	@ 0x30
 8010446:	d102      	bne.n	801044e <find_volume+0x2e>
			i = *tp++ - '0';
 8010448:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801044a:	45a4      	cmp	ip, r4
 801044c:	d002      	beq.n	8010454 <find_volume+0x34>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 801044e:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8010450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					*path = ++tt;
 8010454:	f10c 0301 	add.w	r3, ip, #1
 8010458:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801045a:	4ea2      	ldr	r6, [pc, #648]	@ (80106e4 <find_volume+0x2c4>)
 801045c:	6a34      	ldr	r4, [r6, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801045e:	2c00      	cmp	r4, #0
 8010460:	f000 80cc 	beq.w	80105fc <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 8010464:	600c      	str	r4, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010466:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010468:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 801046c:	b153      	cbz	r3, 8010484 <find_volume+0x64>
		stat = disk_status(fs->drv);
 801046e:	7860      	ldrb	r0, [r4, #1]
 8010470:	f7ff fe5e 	bl	8010130 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010474:	07c7      	lsls	r7, r0, #31
 8010476:	d405      	bmi.n	8010484 <find_volume+0x64>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010478:	b115      	cbz	r5, 8010480 <find_volume+0x60>
 801047a:	0741      	lsls	r1, r0, #29
 801047c:	f100 80bb 	bmi.w	80105f6 <find_volume+0x1d6>
			return FR_OK;				/* The file system object is valid */
 8010480:	2000      	movs	r0, #0
 8010482:	e091      	b.n	80105a8 <find_volume+0x188>
	fs->fs_type = 0;					/* Clear the file system object */
 8010484:	2000      	movs	r0, #0
 8010486:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010488:	f7ff fe5c 	bl	8010144 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801048c:	07c2      	lsls	r2, r0, #31
 801048e:	f100 808d 	bmi.w	80105ac <find_volume+0x18c>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010492:	b115      	cbz	r5, 801049a <find_volume+0x7a>
 8010494:	0743      	lsls	r3, r0, #29
 8010496:	f100 80ae 	bmi.w	80105f6 <find_volume+0x1d6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801049a:	2100      	movs	r1, #0
 801049c:	4620      	mov	r0, r4
 801049e:	f7ff fee1 	bl	8010264 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80104a2:	2802      	cmp	r0, #2
 80104a4:	f000 8085 	beq.w	80105b2 <find_volume+0x192>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80104a8:	2804      	cmp	r0, #4
 80104aa:	f000 80b2 	beq.w	8010612 <find_volume+0x1f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80104ae:	2801      	cmp	r0, #1
 80104b0:	bf98      	it	ls
 80104b2:	2500      	movls	r5, #0
 80104b4:	d877      	bhi.n	80105a6 <find_volume+0x186>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80104b6:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 80104ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104be:	d172      	bne.n	80105a6 <find_volume+0x186>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80104c0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80104c4:	b902      	cbnz	r2, 80104c8 <find_volume+0xa8>
	rv = rv << 8 | ptr[0];
 80104c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80104c8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 80104cc:	61a2      	str	r2, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80104ce:	1e59      	subs	r1, r3, #1
 80104d0:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80104d2:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80104d4:	d867      	bhi.n	80105a6 <find_volume+0x186>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80104d6:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 80104da:	8161      	strh	r1, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80104dc:	2900      	cmp	r1, #0
 80104de:	d062      	beq.n	80105a6 <find_volume+0x186>
 80104e0:	1e48      	subs	r0, r1, #1
 80104e2:	4208      	tst	r0, r1
 80104e4:	d15f      	bne.n	80105a6 <find_volume+0x186>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80104e6:	f8b4 c041 	ldrh.w	ip, [r4, #65]	@ 0x41
 80104ea:	f8a4 c008 	strh.w	ip, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80104ee:	f01c 0f0f 	tst.w	ip, #15
 80104f2:	d158      	bne.n	80105a6 <find_volume+0x186>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80104f4:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80104f8:	b900      	cbnz	r0, 80104fc <find_volume+0xdc>
	rv = rv << 8 | ptr[0];
 80104fa:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80104fc:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010500:	f1be 0f00 	cmp.w	lr, #0
 8010504:	d04f      	beq.n	80105a6 <find_volume+0x186>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010506:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801050a:	eb0e 171c 	add.w	r7, lr, ip, lsr #4
 801050e:	441f      	add	r7, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010510:	42b8      	cmp	r0, r7
 8010512:	d348      	bcc.n	80105a6 <find_volume+0x186>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010514:	1bc0      	subs	r0, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010516:	4288      	cmp	r0, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010518:	fbb0 f8f1 	udiv	r8, r0, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801051c:	d343      	bcc.n	80105a6 <find_volume+0x186>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801051e:	eb0e 0105 	add.w	r1, lr, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010522:	f64f 7ef5 	movw	lr, #65525	@ 0xfff5
 8010526:	45f0      	cmp	r8, lr
		fs->database = bsect + sysect;					/* Data start sector */
 8010528:	442f      	add	r7, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801052a:	f108 0002 	add.w	r0, r8, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801052e:	f240 8090 	bls.w	8010652 <find_volume+0x232>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010532:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010536:	6221      	str	r1, [r4, #32]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010538:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->database = bsect + sysect;					/* Data start sector */
 801053c:	62a7      	str	r7, [r4, #40]	@ 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801053e:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010540:	61e5      	str	r5, [r4, #28]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010542:	d130      	bne.n	80105a6 <find_volume+0x186>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010544:	0083      	lsls	r3, r0, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010546:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
	rv = rv << 8 | ptr[0];
 801054a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801054c:	6261      	str	r1, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801054e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 8010552:	d328      	bcc.n	80105a6 <find_volume+0x186>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010554:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010558:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801055c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
		fs->fsi_flag = 0x80;
 8010560:	2280      	movs	r2, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010562:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 8010564:	7122      	strb	r2, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010566:	f000 809b 	beq.w	80106a0 <find_volume+0x280>
		fmt = FS_FAT32;
 801056a:	2103      	movs	r1, #3
	fs->fs_type = fmt;		/* FAT sub-type */
 801056c:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801056e:	8cb3      	ldrh	r3, [r6, #36]	@ 0x24
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010570:	6832      	ldr	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010572:	3301      	adds	r3, #1
 8010574:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010576:	42a2      	cmp	r2, r4
	fs->id = ++Fsid;		/* File system mount ID */
 8010578:	84b3      	strh	r3, [r6, #36]	@ 0x24
 801057a:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 801057c:	bf04      	itt	eq
 801057e:	2300      	moveq	r3, #0
 8010580:	6033      	streq	r3, [r6, #0]
 8010582:	6933      	ldr	r3, [r6, #16]
 8010584:	429c      	cmp	r4, r3
 8010586:	f47f af7b 	bne.w	8010480 <find_volume+0x60>
 801058a:	2300      	movs	r3, #0
 801058c:	6133      	str	r3, [r6, #16]
 801058e:	e777      	b.n	8010480 <find_volume+0x60>
	rv = rv << 8 | ptr[0];
 8010590:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010594:	2f00      	cmp	r7, #0
 8010596:	d14b      	bne.n	8010630 <find_volume+0x210>
 8010598:	f1b8 0f00 	cmp.w	r8, #0
 801059c:	d151      	bne.n	8010642 <find_volume+0x222>
 801059e:	f1b9 0f00 	cmp.w	r9, #0
 80105a2:	d13c      	bne.n	801061e <find_volume+0x1fe>
 80105a4:	bb65      	cbnz	r5, 8010600 <find_volume+0x1e0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80105a6:	200d      	movs	r0, #13
}
 80105a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80105ac:	2003      	movs	r0, #3
}
 80105ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80105b2:	f894 71f2 	ldrb.w	r7, [r4, #498]	@ 0x1f2
 80105b6:	b10f      	cbz	r7, 80105bc <find_volume+0x19c>
	rv = rv << 8 | ptr[0];
 80105b8:	f8d4 71f6 	ldr.w	r7, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80105bc:	f894 3202 	ldrb.w	r3, [r4, #514]	@ 0x202
 80105c0:	b35b      	cbz	r3, 801061a <find_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 80105c2:	f8d4 8206 	ldr.w	r8, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80105c6:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 80105ca:	b323      	cbz	r3, 8010616 <find_volume+0x1f6>
	rv = rv << 8 | ptr[0];
 80105cc:	f8d4 9216 	ldr.w	r9, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80105d0:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 80105d4:	2d00      	cmp	r5, #0
 80105d6:	d1db      	bne.n	8010590 <find_volume+0x170>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80105d8:	bb57      	cbnz	r7, 8010630 <find_volume+0x210>
 80105da:	f1b8 0f00 	cmp.w	r8, #0
 80105de:	d12f      	bne.n	8010640 <find_volume+0x220>
 80105e0:	f1b9 0f00 	cmp.w	r9, #0
 80105e4:	d0df      	beq.n	80105a6 <find_volume+0x186>
 80105e6:	4649      	mov	r1, r9
 80105e8:	4620      	mov	r0, r4
 80105ea:	f7ff fe3b 	bl	8010264 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80105ee:	2801      	cmp	r0, #1
 80105f0:	d8d9      	bhi.n	80105a6 <find_volume+0x186>
			bsect = br[i];
 80105f2:	464d      	mov	r5, r9
 80105f4:	e75f      	b.n	80104b6 <find_volume+0x96>
				return FR_WRITE_PROTECTED;
 80105f6:	200a      	movs	r0, #10
}
 80105f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80105fc:	200c      	movs	r0, #12
 80105fe:	e7d3      	b.n	80105a8 <find_volume+0x188>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010600:	4629      	mov	r1, r5
 8010602:	4620      	mov	r0, r4
 8010604:	f7ff fe2e 	bl	8010264 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010608:	2801      	cmp	r0, #1
 801060a:	f67f af54 	bls.w	80104b6 <find_volume+0x96>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801060e:	2804      	cmp	r0, #4
 8010610:	d1c9      	bne.n	80105a6 <find_volume+0x186>
 8010612:	2001      	movs	r0, #1
 8010614:	e7c8      	b.n	80105a8 <find_volume+0x188>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010616:	4699      	mov	r9, r3
 8010618:	e7da      	b.n	80105d0 <find_volume+0x1b0>
 801061a:	4698      	mov	r8, r3
 801061c:	e7d3      	b.n	80105c6 <find_volume+0x1a6>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801061e:	4649      	mov	r1, r9
 8010620:	4620      	mov	r0, r4
 8010622:	f7ff fe1f 	bl	8010264 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010626:	2801      	cmp	r0, #1
 8010628:	d9e3      	bls.n	80105f2 <find_volume+0x1d2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801062a:	2d00      	cmp	r5, #0
 801062c:	d0bb      	beq.n	80105a6 <find_volume+0x186>
 801062e:	e7e7      	b.n	8010600 <find_volume+0x1e0>
 8010630:	4639      	mov	r1, r7
 8010632:	4620      	mov	r0, r4
 8010634:	f7ff fe16 	bl	8010264 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010638:	2801      	cmp	r0, #1
 801063a:	d8ad      	bhi.n	8010598 <find_volume+0x178>
			bsect = br[i];
 801063c:	463d      	mov	r5, r7
 801063e:	e73a      	b.n	80104b6 <find_volume+0x96>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010640:	463d      	mov	r5, r7
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010642:	4641      	mov	r1, r8
 8010644:	4620      	mov	r0, r4
 8010646:	f7ff fe0d 	bl	8010264 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801064a:	2801      	cmp	r0, #1
 801064c:	d8a7      	bhi.n	801059e <find_volume+0x17e>
			bsect = br[i];
 801064e:	4645      	mov	r5, r8
 8010650:	e731      	b.n	80104b6 <find_volume+0x96>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010652:	f640 7ef5 	movw	lr, #4085	@ 0xff5
 8010656:	45f0      	cmp	r8, lr
		fs->volbase = bsect;							/* Volume start sector */
 8010658:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 801065a:	62a7      	str	r7, [r4, #40]	@ 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801065c:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801065e:	6221      	str	r1, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010660:	d817      	bhi.n	8010692 <find_volume+0x272>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010662:	f1bc 0f00 	cmp.w	ip, #0
 8010666:	d09e      	beq.n	80105a6 <find_volume+0x186>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010668:	440b      	add	r3, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801066a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801066e:	f000 0001 	and.w	r0, r0, #1
 8010672:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8010676:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010678:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
 801067c:	ebb2 2f50 	cmp.w	r2, r0, lsr #9
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010680:	6263      	str	r3, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010682:	d390      	bcc.n	80105a6 <find_volume+0x186>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010684:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
		fs->fsi_flag = 0x80;
 8010688:	2280      	movs	r2, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801068a:	e9c4 3303 	strd	r3, r3, [r4, #12]
		fs->fsi_flag = 0x80;
 801068e:	7122      	strb	r2, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010690:	e76c      	b.n	801056c <find_volume+0x14c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010692:	f1bc 0f00 	cmp.w	ip, #0
 8010696:	d086      	beq.n	80105a6 <find_volume+0x186>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010698:	440b      	add	r3, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801069a:	0040      	lsls	r0, r0, #1
 801069c:	2102      	movs	r1, #2
 801069e:	e7eb      	b.n	8010678 <find_volume+0x258>
			&& move_window(fs, bsect + 1) == FR_OK)
 80106a0:	1c69      	adds	r1, r5, #1
 80106a2:	4620      	mov	r0, r4
 80106a4:	f7ff fe7c 	bl	80103a0 <move_window>
 80106a8:	2800      	cmp	r0, #0
 80106aa:	f47f af5e 	bne.w	801056a <find_volume+0x14a>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80106ae:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 80106b2:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80106b4:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80106b8:	4291      	cmp	r1, r2
 80106ba:	f47f af56 	bne.w	801056a <find_volume+0x14a>
	rv = rv << 8 | ptr[0];
 80106be:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80106c0:	4b09      	ldr	r3, [pc, #36]	@ (80106e8 <find_volume+0x2c8>)
 80106c2:	429a      	cmp	r2, r3
 80106c4:	f47f af51 	bne.w	801056a <find_volume+0x14a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80106c8:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 80106cc:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80106d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80106d4:	3320      	adds	r3, #32
 80106d6:	429a      	cmp	r2, r3
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80106d8:	bf04      	itt	eq
 80106da:	e9d4 3286 	ldrdeq	r3, r2, [r4, #536]	@ 0x218
 80106de:	e9c4 2303 	strdeq	r2, r3, [r4, #12]
 80106e2:	e742      	b.n	801056a <find_volume+0x14a>
 80106e4:	20003008 	.word	0x20003008
 80106e8:	41615252 	.word	0x41615252

080106ec <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80106ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 80106f0:	f890 9000 	ldrb.w	r9, [r0]
 80106f4:	f1b9 0f02 	cmp.w	r9, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80106f8:	4605      	mov	r5, r0
 80106fa:	460e      	mov	r6, r1
 80106fc:	4614      	mov	r4, r2
		switch (fs->fs_type) {
 80106fe:	d008      	beq.n	8010712 <put_fat.part.0+0x26>
 8010700:	f1b9 0f03 	cmp.w	r9, #3
 8010704:	d042      	beq.n	801078c <put_fat.part.0+0xa0>
 8010706:	f1b9 0f01 	cmp.w	r9, #1
 801070a:	d014      	beq.n	8010736 <put_fat.part.0+0x4a>
 801070c:	2002      	movs	r0, #2
}
 801070e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010712:	6a01      	ldr	r1, [r0, #32]
 8010714:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8010718:	f7ff fe42 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 801071c:	2800      	cmp	r0, #0
 801071e:	d1f6      	bne.n	801070e <put_fat.part.0+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010720:	0076      	lsls	r6, r6, #1
 8010722:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 8010726:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
 801072a:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 801072c:	559c      	strb	r4, [r3, r6]
 801072e:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 8010732:	7054      	strb	r4, [r2, #1]
			break;
 8010734:	e03d      	b.n	80107b2 <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010736:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 8010738:	eb06 0856 	add.w	r8, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801073c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8010740:	f7ff fe2e 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 8010744:	2800      	cmp	r0, #0
 8010746:	d1e2      	bne.n	801070e <put_fat.part.0+0x22>
			p = fs->win + bc++ % SS(fs);
 8010748:	f108 0701 	add.w	r7, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801074c:	07f2      	lsls	r2, r6, #31
			p = fs->win + bc++ % SS(fs);
 801074e:	f3c8 0308 	ubfx	r3, r8, #0, #9
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010752:	ea4f 2157 	mov.w	r1, r7, lsr #9
			p = fs->win + bc++ % SS(fs);
 8010756:	f105 0830 	add.w	r8, r5, #48	@ 0x30
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801075a:	d52f      	bpl.n	80107bc <put_fat.part.0+0xd0>
 801075c:	f818 2003 	ldrb.w	r2, [r8, r3]
 8010760:	f002 020f 	and.w	r2, r2, #15
 8010764:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8010768:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801076c:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 801076e:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010772:	4419      	add	r1, r3
 8010774:	4628      	mov	r0, r5
 8010776:	f7ff fe13 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 801077a:	2800      	cmp	r0, #0
 801077c:	d1c7      	bne.n	801070e <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 801077e:	f3c7 0208 	ubfx	r2, r7, #0, #9
 8010782:	4442      	add	r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010784:	f3c4 1307 	ubfx	r3, r4, #4, #8
 8010788:	7013      	strb	r3, [r2, #0]
			break;
 801078a:	e012      	b.n	80107b2 <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801078c:	6a01      	ldr	r1, [r0, #32]
 801078e:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 8010792:	f7ff fe05 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 8010796:	2800      	cmp	r0, #0
 8010798:	d1b9      	bne.n	801070e <put_fat.part.0+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801079a:	00b6      	lsls	r6, r6, #2
 801079c:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 80107a0:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
 80107a4:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
	rv = rv << 8 | ptr[0];
 80107a8:	5993      	ldr	r3, [r2, r6]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80107aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80107ae:	4323      	orrs	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80107b0:	5193      	str	r3, [r2, r6]
			fs->wflag = 1;
 80107b2:	2301      	movs	r3, #1
 80107b4:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80107b6:	2000      	movs	r0, #0
}
 80107b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80107bc:	f808 4003 	strb.w	r4, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80107c0:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 80107c2:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80107c6:	4419      	add	r1, r3
 80107c8:	4628      	mov	r0, r5
 80107ca:	f7ff fde9 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d19d      	bne.n	801070e <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 80107d2:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80107d6:	f3c4 2403 	ubfx	r4, r4, #8, #4
 80107da:	f818 3007 	ldrb.w	r3, [r8, r7]
			p = fs->win + bc % SS(fs);
 80107de:	eb08 0207 	add.w	r2, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80107e2:	f023 030f 	bic.w	r3, r3, #15
 80107e6:	4323      	orrs	r3, r4
 80107e8:	7013      	strb	r3, [r2, #0]
			break;
 80107ea:	e7e2      	b.n	80107b2 <put_fat.part.0+0xc6>

080107ec <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80107ec:	2901      	cmp	r1, #1
 80107ee:	d90e      	bls.n	801080e <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80107f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80107f2:	6943      	ldr	r3, [r0, #20]
 80107f4:	4299      	cmp	r1, r3
 80107f6:	460c      	mov	r4, r1
 80107f8:	4605      	mov	r5, r0
 80107fa:	d206      	bcs.n	801080a <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 80107fc:	7803      	ldrb	r3, [r0, #0]
 80107fe:	2b02      	cmp	r3, #2
 8010800:	d021      	beq.n	8010846 <get_fat.isra.0+0x5a>
 8010802:	2b03      	cmp	r3, #3
 8010804:	d010      	beq.n	8010828 <get_fat.isra.0+0x3c>
 8010806:	2b01      	cmp	r3, #1
 8010808:	d003      	beq.n	8010812 <get_fat.isra.0+0x26>
		val = 1;	/* Internal error */
 801080a:	2001      	movs	r0, #1
}
 801080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 801080e:	2001      	movs	r0, #1
}
 8010810:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010812:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 8010814:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010818:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 801081c:	f7ff fdc0 	bl	80103a0 <move_window>
 8010820:	b1f0      	cbz	r0, 8010860 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010822:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8010826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010828:	6a01      	ldr	r1, [r0, #32]
 801082a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 801082e:	f7ff fdb7 	bl	80103a0 <move_window>
 8010832:	2800      	cmp	r0, #0
 8010834:	d1f5      	bne.n	8010822 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010836:	00a4      	lsls	r4, r4, #2
 8010838:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 801083c:	4425      	add	r5, r4
 801083e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010840:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 8010844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010846:	6a01      	ldr	r1, [r0, #32]
 8010848:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 801084c:	f7ff fda8 	bl	80103a0 <move_window>
 8010850:	2800      	cmp	r0, #0
 8010852:	d1e6      	bne.n	8010822 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010854:	0063      	lsls	r3, r4, #1
 8010856:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801085a:	442b      	add	r3, r5
 801085c:	8e18      	ldrh	r0, [r3, #48]	@ 0x30
}
 801085e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8010860:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010864:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8010866:	442b      	add	r3, r5
 8010868:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801086a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 801086e:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8010870:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010874:	f7ff fd94 	bl	80103a0 <move_window>
 8010878:	2800      	cmp	r0, #0
 801087a:	d1d2      	bne.n	8010822 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 801087c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8010880:	442f      	add	r7, r5
 8010882:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010886:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801088a:	07e3      	lsls	r3, r4, #31
 801088c:	bf4c      	ite	mi
 801088e:	0900      	lsrmi	r0, r0, #4
 8010890:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8010894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010896:	bf00      	nop

08010898 <create_chain>:
{
 8010898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 801089c:	f8d0 8000 	ldr.w	r8, [r0]
{
 80108a0:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 80108a2:	4689      	mov	r9, r1
 80108a4:	2900      	cmp	r1, #0
 80108a6:	f040 8085 	bne.w	80109b4 <create_chain+0x11c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80108aa:	f8d8 600c 	ldr.w	r6, [r8, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80108ae:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80108b2:	b186      	cbz	r6, 80108d6 <create_chain+0x3e>
 80108b4:	429e      	cmp	r6, r3
 80108b6:	d20e      	bcs.n	80108d6 <create_chain+0x3e>
			ncl++;							/* Next cluster */
 80108b8:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80108ba:	429c      	cmp	r4, r3
 80108bc:	f0c0 8090 	bcc.w	80109e0 <create_chain+0x148>
				if (ncl > scl) return 0;	/* No free cluster */
 80108c0:	2e01      	cmp	r6, #1
 80108c2:	d00a      	beq.n	80108da <create_chain+0x42>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80108c4:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 80108c6:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80108c8:	696b      	ldr	r3, [r5, #20]
 80108ca:	42a3      	cmp	r3, r4
 80108cc:	d809      	bhi.n	80108e2 <create_chain+0x4a>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80108ce:	2401      	movs	r4, #1
}
 80108d0:	4620      	mov	r0, r4
 80108d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80108d6:	2b02      	cmp	r3, #2
 80108d8:	d87e      	bhi.n	80109d8 <create_chain+0x140>
				if (ncl > scl) return 0;	/* No free cluster */
 80108da:	2400      	movs	r4, #0
}
 80108dc:	4620      	mov	r0, r4
 80108de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (fs->fs_type) {
 80108e2:	782b      	ldrb	r3, [r5, #0]
 80108e4:	2b02      	cmp	r3, #2
 80108e6:	d02a      	beq.n	801093e <create_chain+0xa6>
 80108e8:	2b03      	cmp	r3, #3
 80108ea:	d048      	beq.n	801097e <create_chain+0xe6>
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d1ee      	bne.n	80108ce <create_chain+0x36>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80108f0:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 80108f2:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80108f6:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80108fa:	4628      	mov	r0, r5
 80108fc:	f7ff fd50 	bl	80103a0 <move_window>
 8010900:	bbc0      	cbnz	r0, 8010974 <create_chain+0xdc>
			wc = fs->win[bc++ % SS(fs)];
 8010902:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010906:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8010908:	442b      	add	r3, r5
 801090a:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801090e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8010912:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8010914:	f893 b030 	ldrb.w	fp, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010918:	f7ff fd42 	bl	80103a0 <move_window>
 801091c:	bb50      	cbnz	r0, 8010974 <create_chain+0xdc>
			wc |= fs->win[bc % SS(fs)] << 8;
 801091e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8010922:	44aa      	add	sl, r5
 8010924:	f89a 3030 	ldrb.w	r3, [sl, #48]	@ 0x30
 8010928:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801092c:	07e3      	lsls	r3, r4, #31
 801092e:	d55f      	bpl.n	80109f0 <create_chain+0x158>
			if (cs == 0) break;				/* Found a free cluster */
 8010930:	ea5f 1b1b 	movs.w	fp, fp, lsr #4
 8010934:	d010      	beq.n	8010958 <create_chain+0xc0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010936:	f1bb 0f01 	cmp.w	fp, #1
 801093a:	d132      	bne.n	80109a2 <create_chain+0x10a>
 801093c:	e7c7      	b.n	80108ce <create_chain+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801093e:	6a29      	ldr	r1, [r5, #32]
 8010940:	4628      	mov	r0, r5
 8010942:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8010946:	f7ff fd2b 	bl	80103a0 <move_window>
 801094a:	b998      	cbnz	r0, 8010974 <create_chain+0xdc>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801094c:	0063      	lsls	r3, r4, #1
 801094e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010952:	442b      	add	r3, r5
 8010954:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
			if (cs == 0) break;				/* Found a free cluster */
 8010956:	bb13      	cbnz	r3, 801099e <create_chain+0x106>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010958:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801095c:	42a3      	cmp	r3, r4
 801095e:	d9b6      	bls.n	80108ce <create_chain+0x36>
 8010960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010964:	4621      	mov	r1, r4
 8010966:	4640      	mov	r0, r8
 8010968:	f7ff fec0 	bl	80106ec <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 801096c:	2800      	cmp	r0, #0
 801096e:	d044      	beq.n	80109fa <create_chain+0x162>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010970:	2801      	cmp	r0, #1
 8010972:	d1ac      	bne.n	80108ce <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010974:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
}
 8010978:	4620      	mov	r0, r4
 801097a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801097e:	6a29      	ldr	r1, [r5, #32]
 8010980:	4628      	mov	r0, r5
 8010982:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8010986:	f7ff fd0b 	bl	80103a0 <move_window>
 801098a:	2800      	cmp	r0, #0
 801098c:	d1f2      	bne.n	8010974 <create_chain+0xdc>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801098e:	00a3      	lsls	r3, r4, #2
 8010990:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8010994:	442b      	add	r3, r5
 8010996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (cs == 0) break;				/* Found a free cluster */
 8010998:	f033 4370 	bics.w	r3, r3, #4026531840	@ 0xf0000000
 801099c:	d0dc      	beq.n	8010958 <create_chain+0xc0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d095      	beq.n	80108ce <create_chain+0x36>
			if (ncl == scl) return 0;		/* No free cluster */
 80109a2:	42a6      	cmp	r6, r4
 80109a4:	d099      	beq.n	80108da <create_chain+0x42>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80109a6:	f8d8 3014 	ldr.w	r3, [r8, #20]
			ncl++;							/* Next cluster */
 80109aa:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80109ac:	429c      	cmp	r4, r3
 80109ae:	d287      	bcs.n	80108c0 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80109b0:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80109b2:	e789      	b.n	80108c8 <create_chain+0x30>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80109b4:	4640      	mov	r0, r8
 80109b6:	f7ff ff19 	bl	80107ec <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80109ba:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80109bc:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80109be:	d986      	bls.n	80108ce <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80109c0:	1c42      	adds	r2, r0, #1
 80109c2:	d0d7      	beq.n	8010974 <create_chain+0xdc>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80109c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80109c8:	4283      	cmp	r3, r0
 80109ca:	d881      	bhi.n	80108d0 <create_chain+0x38>
			ncl++;							/* Next cluster */
 80109cc:	f109 0401 	add.w	r4, r9, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80109d0:	42a3      	cmp	r3, r4
 80109d2:	d807      	bhi.n	80109e4 <create_chain+0x14c>
 80109d4:	464e      	mov	r6, r9
 80109d6:	e773      	b.n	80108c0 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80109d8:	683d      	ldr	r5, [r7, #0]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80109da:	2601      	movs	r6, #1
			ncl++;							/* Next cluster */
 80109dc:	2402      	movs	r4, #2
 80109de:	e773      	b.n	80108c8 <create_chain+0x30>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80109e0:	4645      	mov	r5, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80109e2:	e771      	b.n	80108c8 <create_chain+0x30>
 80109e4:	2c01      	cmp	r4, #1
 80109e6:	683d      	ldr	r5, [r7, #0]
 80109e8:	f67f af71 	bls.w	80108ce <create_chain+0x36>
 80109ec:	464e      	mov	r6, r9
 80109ee:	e76b      	b.n	80108c8 <create_chain+0x30>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80109f0:	f3cb 030b 	ubfx	r3, fp, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1d2      	bne.n	801099e <create_chain+0x106>
 80109f8:	e7ae      	b.n	8010958 <create_chain+0xc0>
		if (res == FR_OK && clst != 0) {
 80109fa:	f1b9 0f00 	cmp.w	r9, #0
 80109fe:	d00f      	beq.n	8010a20 <create_chain+0x188>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010a00:	f1b9 0f01 	cmp.w	r9, #1
 8010a04:	f43f af63 	beq.w	80108ce <create_chain+0x36>
 8010a08:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8010a0c:	4599      	cmp	r9, r3
 8010a0e:	f4bf af5e 	bcs.w	80108ce <create_chain+0x36>
 8010a12:	4622      	mov	r2, r4
 8010a14:	4649      	mov	r1, r9
 8010a16:	4640      	mov	r0, r8
 8010a18:	f7ff fe68 	bl	80106ec <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d1a7      	bne.n	8010970 <create_chain+0xd8>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010a20:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 8010a24:	3b02      	subs	r3, #2
 8010a26:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 8010a28:	f8c8 400c 	str.w	r4, [r8, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010a2c:	d802      	bhi.n	8010a34 <create_chain+0x19c>
 8010a2e:	3a01      	subs	r2, #1
 8010a30:	f8c8 2010 	str.w	r2, [r8, #16]
		fs->fsi_flag |= 1;
 8010a34:	f898 3004 	ldrb.w	r3, [r8, #4]
 8010a38:	f043 0301 	orr.w	r3, r3, #1
 8010a3c:	f888 3004 	strb.w	r3, [r8, #4]
 8010a40:	e746      	b.n	80108d0 <create_chain+0x38>
 8010a42:	bf00      	nop

08010a44 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8010a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010a48:	6884      	ldr	r4, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8010a4a:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8010a4c:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8010a4e:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 8010a50:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010a52:	b98c      	cbnz	r4, 8010a78 <dir_sdi.constprop.0+0x34>
 8010a54:	783b      	ldrb	r3, [r7, #0]
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d80a      	bhi.n	8010a70 <dir_sdi.constprop.0+0x2c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010a5a:	893b      	ldrh	r3, [r7, #8]
 8010a5c:	b18b      	cbz	r3, 8010a82 <dir_sdi.constprop.0+0x3e>
		dp->sect = fs->dirbase;
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	dp->clust = clst;					/* Current cluster# */
 8010a60:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010a64:	b16b      	cbz	r3, 8010a82 <dir_sdi.constprop.0+0x3e>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010a66:	3730      	adds	r7, #48	@ 0x30
 8010a68:	6237      	str	r7, [r6, #32]
	return FR_OK;
 8010a6a:	2000      	movs	r0, #0
}
 8010a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 8010a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d0f1      	beq.n	8010a5a <dir_sdi.constprop.0+0x16>
 8010a76:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010a78:	897b      	ldrh	r3, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d15c      	bne.n	8010b38 <dir_sdi.constprop.0+0xf4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010a7e:	2c01      	cmp	r4, #1
 8010a80:	d102      	bne.n	8010a88 <dir_sdi.constprop.0+0x44>
		return FR_INT_ERR;
 8010a82:	2002      	movs	r0, #2
}
 8010a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a88:	463d      	mov	r5, r7
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010a8a:	696b      	ldr	r3, [r5, #20]
 8010a8c:	42a3      	cmp	r3, r4
 8010a8e:	d9f8      	bls.n	8010a82 <dir_sdi.constprop.0+0x3e>
		switch (fs->fs_type) {
 8010a90:	782b      	ldrb	r3, [r5, #0]
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d025      	beq.n	8010ae2 <dir_sdi.constprop.0+0x9e>
 8010a96:	2b03      	cmp	r3, #3
 8010a98:	d00d      	beq.n	8010ab6 <dir_sdi.constprop.0+0x72>
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d1f1      	bne.n	8010a82 <dir_sdi.constprop.0+0x3e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a9e:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 8010aa0:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010aa4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	f7ff fc79 	bl	80103a0 <move_window>
 8010aae:	b330      	cbz	r0, 8010afe <dir_sdi.constprop.0+0xba>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010ab0:	2001      	movs	r0, #1
}
 8010ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ab6:	6a29      	ldr	r1, [r5, #32]
 8010ab8:	4628      	mov	r0, r5
 8010aba:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8010abe:	f7ff fc6f 	bl	80103a0 <move_window>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d1f4      	bne.n	8010ab0 <dir_sdi.constprop.0+0x6c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010ac6:	00a3      	lsls	r3, r4, #2
 8010ac8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8010acc:	442b      	add	r3, r5
 8010ace:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010ad0:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010ad4:	2c01      	cmp	r4, #1
 8010ad6:	d9d4      	bls.n	8010a82 <dir_sdi.constprop.0+0x3e>
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	429c      	cmp	r4, r3
 8010adc:	d2d1      	bcs.n	8010a82 <dir_sdi.constprop.0+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010ade:	6835      	ldr	r5, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010ae0:	e7d3      	b.n	8010a8a <dir_sdi.constprop.0+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010ae2:	6a29      	ldr	r1, [r5, #32]
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8010aea:	f7ff fc59 	bl	80103a0 <move_window>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d1de      	bne.n	8010ab0 <dir_sdi.constprop.0+0x6c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010af2:	0063      	lsls	r3, r4, #1
 8010af4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010af8:	442b      	add	r3, r5
 8010afa:	8e1c      	ldrh	r4, [r3, #48]	@ 0x30
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010afc:	e7ea      	b.n	8010ad4 <dir_sdi.constprop.0+0x90>
			wc = fs->win[bc++ % SS(fs)];
 8010afe:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b02:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8010b04:	442b      	add	r3, r5
 8010b06:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b0a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8010b0e:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8010b10:	f893 9030 	ldrb.w	r9, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b14:	f7ff fc44 	bl	80103a0 <move_window>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	d1c9      	bne.n	8010ab0 <dir_sdi.constprop.0+0x6c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010b1c:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8010b20:	44a8      	add	r8, r5
 8010b22:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 8010b26:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010b2a:	07e3      	lsls	r3, r4, #31
 8010b2c:	bf4c      	ite	mi
 8010b2e:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 8010b32:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010b36:	e7cd      	b.n	8010ad4 <dir_sdi.constprop.0+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010b38:	697a      	ldr	r2, [r7, #20]
	clst -= 2;
 8010b3a:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010b3c:	3a02      	subs	r2, #2
 8010b3e:	4291      	cmp	r1, r2
 8010b40:	d203      	bcs.n	8010b4a <dir_sdi.constprop.0+0x106>
	return clst * fs->csize + fs->database;
 8010b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b44:	fb01 2303 	mla	r3, r1, r3, r2
 8010b48:	e78a      	b.n	8010a60 <dir_sdi.constprop.0+0x1c>
		dp->sect = fs->dirbase;
 8010b4a:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 8010b4c:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010b50:	e797      	b.n	8010a82 <dir_sdi.constprop.0+0x3e>
 8010b52:	bf00      	nop

08010b54 <follow_path>:
{
 8010b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8010b58:	6805      	ldr	r5, [r0, #0]
{
 8010b5a:	b085      	sub	sp, #20
 8010b5c:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010b5e:	780b      	ldrb	r3, [r1, #0]
 8010b60:	2b2f      	cmp	r3, #47	@ 0x2f
 8010b62:	468b      	mov	fp, r1
 8010b64:	f101 0101 	add.w	r1, r1, #1
 8010b68:	d0f9      	beq.n	8010b5e <follow_path+0xa>
 8010b6a:	2b5c      	cmp	r3, #92	@ 0x5c
 8010b6c:	d0f7      	beq.n	8010b5e <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8010b6e:	2200      	movs	r2, #0
 8010b70:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010b72:	f89b 2000 	ldrb.w	r2, [fp]
 8010b76:	2a1f      	cmp	r2, #31
 8010b78:	f240 8162 	bls.w	8010e40 <follow_path+0x2ec>
 8010b7c:	465b      	mov	r3, fp
	p = *path; sfn = dp->fn;
 8010b7e:	f104 0724 	add.w	r7, r4, #36	@ 0x24
 8010b82:	46ab      	mov	fp, r5
		*d++ = (BYTE)val;
 8010b84:	f04f 3a20 	mov.w	sl, #538976288	@ 0x20202020
 8010b88:	463e      	mov	r6, r7
 8010b8a:	461d      	mov	r5, r3
 8010b8c:	2320      	movs	r3, #32
 8010b8e:	f242 0220 	movw	r2, #8224	@ 0x2020
 8010b92:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 8010b96:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
 8010b9a:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 8010b9c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
		c = (BYTE)p[si++];
 8010ba0:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010ba2:	2b20      	cmp	r3, #32
 8010ba4:	d90c      	bls.n	8010bc0 <follow_path+0x6c>
 8010ba6:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 8010ba8:	2700      	movs	r7, #0
 8010baa:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 8010bae:	2001      	movs	r0, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010bb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010bb2:	d064      	beq.n	8010c7e <follow_path+0x12a>
 8010bb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8010bb6:	d062      	beq.n	8010c7e <follow_path+0x12a>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010bb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bba:	d006      	beq.n	8010bca <follow_path+0x76>
 8010bbc:	4567      	cmp	r7, ip
 8010bbe:	d348      	bcc.n	8010c52 <follow_path+0xfe>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010bc0:	2206      	movs	r2, #6
}
 8010bc2:	4610      	mov	r0, r2
 8010bc4:	b005      	add	sp, #20
 8010bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010bca:	f1bc 0f0b 	cmp.w	ip, #11
 8010bce:	d0f7      	beq.n	8010bc0 <follow_path+0x6c>
			i = 8; ni = 11;				/* Goto extension */
 8010bd0:	2708      	movs	r7, #8
 8010bd2:	f04f 0c0b 	mov.w	ip, #11
		c = (BYTE)p[si++];
 8010bd6:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bda:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8010bdc:	f100 0001 	add.w	r0, r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010be0:	d8e6      	bhi.n	8010bb0 <follow_path+0x5c>
	*path = p + si;						/* Return pointer to the next segment */
 8010be2:	4405      	add	r5, r0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010be4:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
	FATFS *fs = dp->obj.fs;
 8010be8:	f8d4 8000 	ldr.w	r8, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010bec:	2ae5      	cmp	r2, #229	@ 0xe5
 8010bee:	bf04      	itt	eq
 8010bf0:	2205      	moveq	r2, #5
 8010bf2:	f884 2024 	strbeq.w	r2, [r4, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010bf6:	2b20      	cmp	r3, #32
 8010bf8:	bf8c      	ite	hi
 8010bfa:	2300      	movhi	r3, #0
 8010bfc:	2301      	movls	r3, #1
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010c04:	4620      	mov	r0, r4
 8010c06:	f7ff ff1d 	bl	8010a44 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	d143      	bne.n	8010c98 <follow_path+0x144>
		res = move_window(fs, dp->sect);
 8010c10:	69e7      	ldr	r7, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010c12:	e9cd b500 	strd	fp, r5, [sp]
 8010c16:	f108 0930 	add.w	r9, r8, #48	@ 0x30
 8010c1a:	46b3      	mov	fp, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010c1c:	f8d8 602c 	ldr.w	r6, [r8, #44]	@ 0x2c
 8010c20:	42be      	cmp	r6, r7
 8010c22:	d044      	beq.n	8010cae <follow_path+0x15a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010c24:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010c28:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	f040 80b7 	bne.w	8010da0 <follow_path+0x24c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010c32:	2301      	movs	r3, #1
 8010c34:	463a      	mov	r2, r7
 8010c36:	4649      	mov	r1, r9
 8010c38:	f7ff fa94 	bl	8010164 <disk_read>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	d034      	beq.n	8010caa <follow_path+0x156>
				res = FR_DISK_ERR;
 8010c40:	2201      	movs	r2, #1
			fs->winsect = sector;
 8010c42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010c46:	4610      	mov	r0, r2
			fs->winsect = sector;
 8010c48:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
}
 8010c4c:	b005      	add	sp, #20
 8010c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
 8010c52:	061a      	lsls	r2, r3, #24
 8010c54:	d502      	bpl.n	8010c5c <follow_path+0x108>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010c56:	4a80      	ldr	r2, [pc, #512]	@ (8010e58 <follow_path+0x304>)
 8010c58:	3b80      	subs	r3, #128	@ 0x80
 8010c5a:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 8010c5c:	497f      	ldr	r1, [pc, #508]	@ (8010e5c <follow_path+0x308>)
 8010c5e:	2222      	movs	r2, #34	@ 0x22
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d0ad      	beq.n	8010bc0 <follow_path+0x6c>
 8010c64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010c68:	2a00      	cmp	r2, #0
 8010c6a:	d1f9      	bne.n	8010c60 <follow_path+0x10c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010c6c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010c70:	2a19      	cmp	r2, #25
 8010c72:	bf9c      	itt	ls
 8010c74:	3b20      	subls	r3, #32
 8010c76:	b2db      	uxtbls	r3, r3
			sfn[i++] = c;
 8010c78:	55f3      	strb	r3, [r6, r7]
 8010c7a:	3701      	adds	r7, #1
 8010c7c:	e7ab      	b.n	8010bd6 <follow_path+0x82>
 8010c7e:	182a      	adds	r2, r5, r0
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010c80:	7811      	ldrb	r1, [r2, #0]
 8010c82:	292f      	cmp	r1, #47	@ 0x2f
 8010c84:	4615      	mov	r5, r2
 8010c86:	f102 0201 	add.w	r2, r2, #1
 8010c8a:	d0f9      	beq.n	8010c80 <follow_path+0x12c>
 8010c8c:	295c      	cmp	r1, #92	@ 0x5c
 8010c8e:	d0f7      	beq.n	8010c80 <follow_path+0x12c>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010c90:	2f00      	cmp	r7, #0
 8010c92:	d1a7      	bne.n	8010be4 <follow_path+0x90>
 8010c94:	e794      	b.n	8010bc0 <follow_path+0x6c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010c96:	2204      	movs	r2, #4
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010c98:	2a04      	cmp	r2, #4
			ns = dp->fn[NSFLAG];
 8010c9a:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010c9e:	d190      	bne.n	8010bc2 <follow_path+0x6e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010ca0:	075a      	lsls	r2, r3, #29
 8010ca2:	f100 80d6 	bmi.w	8010e52 <follow_path+0x2fe>
 8010ca6:	2205      	movs	r2, #5
 8010ca8:	e78b      	b.n	8010bc2 <follow_path+0x6e>
			fs->winsect = sector;
 8010caa:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
		c = dp->dir[DIR_Name];
 8010cae:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010cb0:	781a      	ldrb	r2, [r3, #0]
 8010cb2:	2a00      	cmp	r2, #0
 8010cb4:	d0ef      	beq.n	8010c96 <follow_path+0x142>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010cb6:	7ad9      	ldrb	r1, [r3, #11]
 8010cb8:	f001 023f 	and.w	r2, r1, #63	@ 0x3f
 8010cbc:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010cbe:	7ada      	ldrb	r2, [r3, #11]
 8010cc0:	f012 0208 	ands.w	r2, r2, #8
 8010cc4:	d01a      	beq.n	8010cfc <follow_path+0x1a8>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010cc6:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010cc8:	69e7      	ldr	r7, [r4, #28]
	FATFS *fs = dp->obj.fs;
 8010cca:	6826      	ldr	r6, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010ccc:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010cce:	2f00      	cmp	r7, #0
 8010cd0:	d0e1      	beq.n	8010c96 <follow_path+0x142>
 8010cd2:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 8010cd6:	d2de      	bcs.n	8010c96 <follow_path+0x142>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010cd8:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8010cdc:	b94b      	cbnz	r3, 8010cf2 <follow_path+0x19e>
		if (!dp->clust) {		/* Static table */
 8010cde:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8010ce0:	3701      	adds	r7, #1
 8010ce2:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8010ce4:	2900      	cmp	r1, #0
 8010ce6:	d17f      	bne.n	8010de8 <follow_path+0x294>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010ce8:	8932      	ldrh	r2, [r6, #8]
 8010cea:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8010cee:	f240 8095 	bls.w	8010e1c <follow_path+0x2c8>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010cf2:	3630      	adds	r6, #48	@ 0x30
 8010cf4:	441e      	add	r6, r3
	dp->dptr = ofs;						/* Current entry */
 8010cf6:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010cf8:	6226      	str	r6, [r4, #32]
	} while (res == FR_OK);
 8010cfa:	e78f      	b.n	8010c1c <follow_path+0xc8>
	} while (--cnt && r == 0);
 8010cfc:	781d      	ldrb	r5, [r3, #0]
 8010cfe:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8010d02:	4285      	cmp	r5, r0
 8010d04:	d1df      	bne.n	8010cc6 <follow_path+0x172>
 8010d06:	f894 5025 	ldrb.w	r5, [r4, #37]	@ 0x25
 8010d0a:	7858      	ldrb	r0, [r3, #1]
 8010d0c:	4285      	cmp	r5, r0
 8010d0e:	d1da      	bne.n	8010cc6 <follow_path+0x172>
 8010d10:	789d      	ldrb	r5, [r3, #2]
 8010d12:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8010d16:	4285      	cmp	r5, r0
 8010d18:	d1d5      	bne.n	8010cc6 <follow_path+0x172>
 8010d1a:	f894 5027 	ldrb.w	r5, [r4, #39]	@ 0x27
 8010d1e:	78d8      	ldrb	r0, [r3, #3]
 8010d20:	4285      	cmp	r5, r0
 8010d22:	d1d0      	bne.n	8010cc6 <follow_path+0x172>
 8010d24:	791d      	ldrb	r5, [r3, #4]
 8010d26:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8010d2a:	4285      	cmp	r5, r0
 8010d2c:	d1cb      	bne.n	8010cc6 <follow_path+0x172>
 8010d2e:	795d      	ldrb	r5, [r3, #5]
 8010d30:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8010d34:	4285      	cmp	r5, r0
 8010d36:	d1c6      	bne.n	8010cc6 <follow_path+0x172>
 8010d38:	799d      	ldrb	r5, [r3, #6]
 8010d3a:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 8010d3e:	4285      	cmp	r5, r0
 8010d40:	d1c1      	bne.n	8010cc6 <follow_path+0x172>
 8010d42:	79dd      	ldrb	r5, [r3, #7]
 8010d44:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
 8010d48:	4285      	cmp	r5, r0
 8010d4a:	d1bc      	bne.n	8010cc6 <follow_path+0x172>
 8010d4c:	7a1d      	ldrb	r5, [r3, #8]
 8010d4e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010d52:	4285      	cmp	r5, r0
 8010d54:	d1b7      	bne.n	8010cc6 <follow_path+0x172>
 8010d56:	7a5d      	ldrb	r5, [r3, #9]
 8010d58:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8010d5c:	4285      	cmp	r5, r0
 8010d5e:	d1b2      	bne.n	8010cc6 <follow_path+0x172>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010d60:	7a98      	ldrb	r0, [r3, #10]
 8010d62:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010d66:	4298      	cmp	r0, r3
 8010d68:	d1ad      	bne.n	8010cc6 <follow_path+0x172>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d6a:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8010d6e:	9d01      	ldr	r5, [sp, #4]
 8010d70:	0758      	lsls	r0, r3, #29
 8010d72:	465e      	mov	r6, fp
 8010d74:	f8dd b000 	ldr.w	fp, [sp]
 8010d78:	f53f af23 	bmi.w	8010bc2 <follow_path+0x6e>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010d7c:	06cb      	lsls	r3, r1, #27
 8010d7e:	d592      	bpl.n	8010ca6 <follow_path+0x152>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010d80:	6962      	ldr	r2, [r4, #20]
	if (fs->fs_type == FS_FAT32) {
 8010d82:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010d86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d8a:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
 8010d8e:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 8010d90:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8010d92:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010d94:	bf04      	itt	eq
 8010d96:	8a9b      	ldrheq	r3, [r3, #20]
 8010d98:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010d9c:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d9e:	e6f5      	b.n	8010b8c <follow_path+0x38>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010da0:	2301      	movs	r3, #1
 8010da2:	4632      	mov	r2, r6
 8010da4:	4649      	mov	r1, r9
 8010da6:	f7ff f9eb 	bl	8010180 <disk_write>
 8010daa:	bba8      	cbnz	r0, 8010e18 <follow_path+0x2c4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010dac:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8010db0:	f8d8 3018 	ldr.w	r3, [r8, #24]
			fs->wflag = 0;
 8010db4:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010db8:	1ab2      	subs	r2, r6, r2
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d211      	bcs.n	8010de2 <follow_path+0x28e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dbe:	f898 5002 	ldrb.w	r5, [r8, #2]
 8010dc2:	2d01      	cmp	r5, #1
 8010dc4:	d802      	bhi.n	8010dcc <follow_path+0x278>
 8010dc6:	e00c      	b.n	8010de2 <follow_path+0x28e>
					wsect += fs->fsize;
 8010dc8:	f8d8 3018 	ldr.w	r3, [r8, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010dcc:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8010dd0:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8010dd2:	4632      	mov	r2, r6
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	4649      	mov	r1, r9
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dd8:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8010dda:	f7ff f9d1 	bl	8010180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dde:	2d01      	cmp	r5, #1
 8010de0:	d1f2      	bne.n	8010dc8 <follow_path+0x274>
 8010de2:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010de6:	e724      	b.n	8010c32 <follow_path+0xde>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010de8:	8972      	ldrh	r2, [r6, #10]
 8010dea:	3a01      	subs	r2, #1
 8010dec:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8010df0:	f47f af7f 	bne.w	8010cf2 <follow_path+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010df4:	4630      	mov	r0, r6
 8010df6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010dfa:	f7ff fcf7 	bl	80107ec <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010dfe:	2801      	cmp	r0, #1
 8010e00:	d91c      	bls.n	8010e3c <follow_path+0x2e8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010e02:	1c47      	adds	r7, r0, #1
 8010e04:	d008      	beq.n	8010e18 <follow_path+0x2c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010e06:	6971      	ldr	r1, [r6, #20]
 8010e08:	9b02      	ldr	r3, [sp, #8]
 8010e0a:	4288      	cmp	r0, r1
 8010e0c:	d30a      	bcc.n	8010e24 <follow_path+0x2d0>
			ns = dp->fn[NSFLAG];
 8010e0e:	9a03      	ldr	r2, [sp, #12]
 8010e10:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
						dp->sect = 0; return FR_NO_FILE;
 8010e14:	61e2      	str	r2, [r4, #28]
			if (res != FR_OK) {				/* Failed to find the object */
 8010e16:	e743      	b.n	8010ca0 <follow_path+0x14c>
				res = FR_DISK_ERR;
 8010e18:	2201      	movs	r2, #1
 8010e1a:	e73d      	b.n	8010c98 <follow_path+0x144>
			ns = dp->fn[NSFLAG];
 8010e1c:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				dp->sect = 0; return FR_NO_FILE;
 8010e20:	61e1      	str	r1, [r4, #28]
			if (res != FR_OK) {				/* Failed to find the object */
 8010e22:	e73d      	b.n	8010ca0 <follow_path+0x14c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010e24:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8010e26:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8010e28:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010e2a:	4288      	cmp	r0, r1
	return clst * fs->csize + fs->database;
 8010e2c:	bf3b      	ittet	cc
 8010e2e:	8972      	ldrhcc	r2, [r6, #10]
 8010e30:	6ab7      	ldrcc	r7, [r6, #40]	@ 0x28
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010e32:	461f      	movcs	r7, r3
	return clst * fs->csize + fs->database;
 8010e34:	fb00 7702 	mlacc	r7, r0, r2, r7
				dp->sect = clust2sect(fs, clst);
 8010e38:	61e7      	str	r7, [r4, #28]
 8010e3a:	e75a      	b.n	8010cf2 <follow_path+0x19e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010e3c:	2202      	movs	r2, #2
 8010e3e:	e72b      	b.n	8010c98 <follow_path+0x144>
		dp->fn[NSFLAG] = NS_NONAME;
 8010e40:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 8010e42:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 8010e44:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
}
 8010e48:	b005      	add	sp, #20
 8010e4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8010e4e:	f7ff bdf9 	b.w	8010a44 <dir_sdi.constprop.0>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010e52:	2204      	movs	r2, #4
	return res;
 8010e54:	e6b5      	b.n	8010bc2 <follow_path+0x6e>
 8010e56:	bf00      	nop
 8010e58:	08017354 	.word	0x08017354
 8010e5c:	080175ec 	.word	0x080175ec

08010e60 <remove_chain>:
{
 8010e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010e64:	2901      	cmp	r1, #1
	FATFS *fs = obj->fs;
 8010e66:	6805      	ldr	r5, [r0, #0]
{
 8010e68:	b083      	sub	sp, #12
 8010e6a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010e6c:	d90a      	bls.n	8010e84 <remove_chain+0x24>
 8010e6e:	696b      	ldr	r3, [r5, #20]
 8010e70:	428b      	cmp	r3, r1
 8010e72:	d907      	bls.n	8010e84 <remove_chain+0x24>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010e74:	4606      	mov	r6, r0
 8010e76:	4611      	mov	r1, r2
 8010e78:	b942      	cbnz	r2, 8010e8c <remove_chain+0x2c>
 8010e7a:	462f      	mov	r7, r5
			fs->wflag = 1;
 8010e7c:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010e80:	429c      	cmp	r4, r3
 8010e82:	d311      	bcc.n	8010ea8 <remove_chain+0x48>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010e84:	2002      	movs	r0, #2
}
 8010e86:	b003      	add	sp, #12
 8010e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010e8c:	2a01      	cmp	r2, #1
 8010e8e:	d0f9      	beq.n	8010e84 <remove_chain+0x24>
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d9f7      	bls.n	8010e84 <remove_chain+0x24>
 8010e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f7ff fc27 	bl	80106ec <put_fat.part.0>
		if (res != FR_OK) return res;
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d1f1      	bne.n	8010e86 <remove_chain+0x26>
 8010ea2:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	e7e9      	b.n	8010e7c <remove_chain+0x1c>
		switch (fs->fs_type) {
 8010ea8:	783b      	ldrb	r3, [r7, #0]
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	f000 8094 	beq.w	8010fd8 <remove_chain+0x178>
 8010eb0:	2b03      	cmp	r3, #3
 8010eb2:	d010      	beq.n	8010ed6 <remove_chain+0x76>
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d1e5      	bne.n	8010e84 <remove_chain+0x24>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010eb8:	6a39      	ldr	r1, [r7, #32]
			bc = (UINT)clst; bc += bc / 2;
 8010eba:	eb04 0954 	add.w	r9, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ebe:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	f7ff fa6c 	bl	80103a0 <move_window>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	f000 80ae 	beq.w	801102a <remove_chain+0x1ca>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010ece:	2001      	movs	r0, #1
}
 8010ed0:	b003      	add	sp, #12
 8010ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ed6:	6a39      	ldr	r1, [r7, #32]
 8010ed8:	4638      	mov	r0, r7
 8010eda:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8010ede:	f7ff fa5f 	bl	80103a0 <move_window>
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	d1f3      	bne.n	8010ece <remove_chain+0x6e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010ee6:	00a3      	lsls	r3, r4, #2
 8010ee8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8010eec:	443b      	add	r3, r7
 8010eee:	f8d3 9030 	ldr.w	r9, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 8010ef2:	f039 4970 	bics.w	r9, r9, #4026531840	@ 0xf0000000
 8010ef6:	f000 80b5 	beq.w	8011064 <remove_chain+0x204>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010efa:	f1b9 0f01 	cmp.w	r9, #1
 8010efe:	d0c1      	beq.n	8010e84 <remove_chain+0x24>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010f00:	696b      	ldr	r3, [r5, #20]
 8010f02:	429c      	cmp	r4, r3
 8010f04:	d2be      	bcs.n	8010e84 <remove_chain+0x24>
		switch (fs->fs_type) {
 8010f06:	782f      	ldrb	r7, [r5, #0]
 8010f08:	2f02      	cmp	r7, #2
 8010f0a:	d02d      	beq.n	8010f68 <remove_chain+0x108>
 8010f0c:	2f03      	cmp	r7, #3
 8010f0e:	d04b      	beq.n	8010fa8 <remove_chain+0x148>
 8010f10:	2f01      	cmp	r7, #1
 8010f12:	d1b7      	bne.n	8010e84 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f14:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 8010f16:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f1a:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f7ff fa3e 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d1ae      	bne.n	8010e86 <remove_chain+0x26>
			p = fs->win + bc++ % SS(fs);
 8010f28:	f10a 0b01 	add.w	fp, sl, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010f2c:	07e1      	lsls	r1, r4, #31
			p = fs->win + bc++ % SS(fs);
 8010f2e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8010f32:	f105 0330 	add.w	r3, r5, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f36:	ea4f 225b 	mov.w	r2, fp, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010f3a:	d461      	bmi.n	8011000 <remove_chain+0x1a0>
 8010f3c:	f803 000a 	strb.w	r0, [r3, sl]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f40:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 8010f42:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f44:	4411      	add	r1, r2
 8010f46:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010f48:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f4a:	f7ff fa29 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d199      	bne.n	8010e86 <remove_chain+0x26>
			p = fs->win + bc % SS(fs);
 8010f52:	9b01      	ldr	r3, [sp, #4]
 8010f54:	f3cb 0208 	ubfx	r2, fp, #0, #9
 8010f58:	eb03 0b02 	add.w	fp, r3, r2
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010f5c:	5c98      	ldrb	r0, [r3, r2]
 8010f5e:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8010f62:	f88b 0000 	strb.w	r0, [fp]
			if (res != FR_OK) return res;
 8010f66:	e00c      	b.n	8010f82 <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010f68:	6a29      	ldr	r1, [r5, #32]
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8010f70:	f7ff fa16 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d186      	bne.n	8010e86 <remove_chain+0x26>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010f78:	0064      	lsls	r4, r4, #1
 8010f7a:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8010f7e:	442c      	add	r4, r5
 8010f80:	8620      	strh	r0, [r4, #48]	@ 0x30
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010f82:	696a      	ldr	r2, [r5, #20]
 8010f84:	692b      	ldr	r3, [r5, #16]
			fs->wflag = 1;
 8010f86:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010f8a:	1e91      	subs	r1, r2, #2
 8010f8c:	428b      	cmp	r3, r1
 8010f8e:	d205      	bcs.n	8010f9c <remove_chain+0x13c>
			fs->free_clst++;
 8010f90:	3301      	adds	r3, #1
 8010f92:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8010f94:	792b      	ldrb	r3, [r5, #4]
 8010f96:	f043 0301 	orr.w	r3, r3, #1
 8010f9a:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010f9c:	454a      	cmp	r2, r9
 8010f9e:	d961      	bls.n	8011064 <remove_chain+0x204>
 8010fa0:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010fa2:	464c      	mov	r4, r9
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	e76b      	b.n	8010e80 <remove_chain+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010fa8:	6a29      	ldr	r1, [r5, #32]
 8010faa:	4628      	mov	r0, r5
 8010fac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8010fb0:	f7ff f9f6 	bl	80103a0 <move_window>
 8010fb4:	4603      	mov	r3, r0
			if (res != FR_OK) break;
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	f47f af65 	bne.w	8010e86 <remove_chain+0x26>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010fbc:	00a4      	lsls	r4, r4, #2
 8010fbe:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8010fc2:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 8010fc6:	1908      	adds	r0, r1, r4
	rv = rv << 8 | ptr[0];
 8010fc8:	590a      	ldr	r2, [r1, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fca:	530b      	strh	r3, [r1, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fcc:	7083      	strb	r3, [r0, #2]
 8010fce:	0e13      	lsrs	r3, r2, #24
 8010fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
	*ptr++ = (BYTE)val;
 8010fd4:	70c3      	strb	r3, [r0, #3]
			if (res != FR_OK) return res;
 8010fd6:	e7d4      	b.n	8010f82 <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010fd8:	6a39      	ldr	r1, [r7, #32]
 8010fda:	4638      	mov	r0, r7
 8010fdc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8010fe0:	f7ff f9de 	bl	80103a0 <move_window>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	f47f af72 	bne.w	8010ece <remove_chain+0x6e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010fea:	0063      	lsls	r3, r4, #1
 8010fec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010ff0:	443b      	add	r3, r7
 8010ff2:	f8b3 9030 	ldrh.w	r9, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 8010ff6:	f1b9 0f00 	cmp.w	r9, #0
 8010ffa:	f47f af7e 	bne.w	8010efa <remove_chain+0x9a>
 8010ffe:	e031      	b.n	8011064 <remove_chain+0x204>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011000:	f813 100a 	ldrb.w	r1, [r3, sl]
 8011004:	9301      	str	r3, [sp, #4]
 8011006:	f001 010f 	and.w	r1, r1, #15
 801100a:	f803 100a 	strb.w	r1, [r3, sl]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801100e:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 8011010:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011012:	4411      	add	r1, r2
 8011014:	4628      	mov	r0, r5
 8011016:	f7ff f9c3 	bl	80103a0 <move_window>
			if (res != FR_OK) break;
 801101a:	9b01      	ldr	r3, [sp, #4]
 801101c:	2800      	cmp	r0, #0
 801101e:	f47f af32 	bne.w	8010e86 <remove_chain+0x26>
			p = fs->win + bc % SS(fs);
 8011022:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 8011026:	449b      	add	fp, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011028:	e79b      	b.n	8010f62 <remove_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
 801102a:	f3c9 0308 	ubfx	r3, r9, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801102e:	6a39      	ldr	r1, [r7, #32]
			wc = fs->win[bc++ % SS(fs)];
 8011030:	443b      	add	r3, r7
 8011032:	f109 0901 	add.w	r9, r9, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011036:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 801103a:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 801103c:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011040:	f7ff f9ae 	bl	80103a0 <move_window>
 8011044:	2800      	cmp	r0, #0
 8011046:	f47f af42 	bne.w	8010ece <remove_chain+0x6e>
			wc |= fs->win[bc % SS(fs)] << 8;
 801104a:	f3c9 0908 	ubfx	r9, r9, #0, #9
 801104e:	44b9      	add	r9, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011050:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8011052:	f899 3030 	ldrb.w	r3, [r9, #48]	@ 0x30
 8011056:	ea4a 2903 	orr.w	r9, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801105a:	d505      	bpl.n	8011068 <remove_chain+0x208>
		if (nxt == 0) break;				/* Empty cluster? */
 801105c:	ea5f 1919 	movs.w	r9, r9, lsr #4
 8011060:	f47f af4b 	bne.w	8010efa <remove_chain+0x9a>
	return FR_OK;
 8011064:	2000      	movs	r0, #0
 8011066:	e70e      	b.n	8010e86 <remove_chain+0x26>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011068:	f3c9 090b 	ubfx	r9, r9, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 801106c:	f1b9 0f00 	cmp.w	r9, #0
 8011070:	f47f af43 	bne.w	8010efa <remove_chain+0x9a>
 8011074:	e7f6      	b.n	8011064 <remove_chain+0x204>
 8011076:	bf00      	nop

08011078 <dir_register>:
{
 8011078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107c:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 801107e:	6806      	ldr	r6, [r0, #0]
{
 8011080:	9000      	str	r0, [sp, #0]
 8011082:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
 8011084:	f7ff fcde 	bl	8010a44 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8011088:	2800      	cmp	r0, #0
 801108a:	f040 80a3 	bne.w	80111d4 <dir_register+0x15c>
			res = move_window(fs, dp->sect);
 801108e:	f8d4 a01c 	ldr.w	sl, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011092:	f106 0b30 	add.w	fp, r6, #48	@ 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011096:	6af5      	ldr	r5, [r6, #44]	@ 0x2c
 8011098:	4555      	cmp	r5, sl
 801109a:	d013      	beq.n	80110c4 <dir_register+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801109c:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801109e:	7870      	ldrb	r0, [r6, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d15f      	bne.n	8011164 <dir_register+0xec>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80110a4:	2301      	movs	r3, #1
 80110a6:	4652      	mov	r2, sl
 80110a8:	4659      	mov	r1, fp
 80110aa:	f7ff f85b 	bl	8010164 <disk_read>
 80110ae:	b138      	cbz	r0, 80110c0 <dir_register+0x48>
			fs->winsect = sector;
 80110b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110b4:	62f3      	str	r3, [r6, #44]	@ 0x2c
				res = FR_DISK_ERR;
 80110b6:	2501      	movs	r5, #1
}
 80110b8:	4628      	mov	r0, r5
 80110ba:	b005      	add	sp, #20
 80110bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80110c0:	f8c6 a02c 	str.w	sl, [r6, #44]	@ 0x2c
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80110c4:	9a00      	ldr	r2, [sp, #0]
 80110c6:	6a13      	ldr	r3, [r2, #32]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	2be5      	cmp	r3, #229	@ 0xe5
 80110cc:	d000      	beq.n	80110d0 <dir_register+0x58>
 80110ce:	bb3b      	cbnz	r3, 8011120 <dir_register+0xa8>
		res = move_window(fs, dp->sect);
 80110d0:	9c00      	ldr	r4, [sp, #0]
 80110d2:	4630      	mov	r0, r6
 80110d4:	69e1      	ldr	r1, [r4, #28]
 80110d6:	f7ff f963 	bl	80103a0 <move_window>
		if (res == FR_OK) {
 80110da:	4605      	mov	r5, r0
 80110dc:	2800      	cmp	r0, #0
 80110de:	d1eb      	bne.n	80110b8 <dir_register+0x40>
		*d++ = (BYTE)val;
 80110e0:	4601      	mov	r1, r0
 80110e2:	2220      	movs	r2, #32
 80110e4:	6a20      	ldr	r0, [r4, #32]
 80110e6:	f003 ffe4 	bl	80150b2 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80110ea:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80110ec:	f104 0225 	add.w	r2, r4, #37	@ 0x25
 80110f0:	1a9a      	subs	r2, r3, r2
 80110f2:	2a02      	cmp	r2, #2
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80110f4:	4621      	mov	r1, r4
 80110f6:	f240 80de 	bls.w	80112b6 <dir_register+0x23e>
			*d++ = *s++;
 80110fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80110fc:	601a      	str	r2, [r3, #0]
 80110fe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011100:	605a      	str	r2, [r3, #4]
 8011102:	f891 202c 	ldrb.w	r2, [r1, #44]	@ 0x2c
 8011106:	721a      	strb	r2, [r3, #8]
 8011108:	f891 202d 	ldrb.w	r2, [r1, #45]	@ 0x2d
 801110c:	725a      	strb	r2, [r3, #9]
 801110e:	f891 102e 	ldrb.w	r1, [r1, #46]	@ 0x2e
 8011112:	7299      	strb	r1, [r3, #10]
			fs->wflag = 1;
 8011114:	2201      	movs	r2, #1
}
 8011116:	4628      	mov	r0, r5
			fs->wflag = 1;
 8011118:	70f2      	strb	r2, [r6, #3]
}
 801111a:	b005      	add	sp, #20
 801111c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011120:	6955      	ldr	r5, [r2, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011122:	f8d2 a01c 	ldr.w	sl, [r2, #28]
	FATFS *fs = dp->obj.fs;
 8011126:	6817      	ldr	r7, [r2, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011128:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801112a:	f1ba 0f00 	cmp.w	sl, #0
 801112e:	d067      	beq.n	8011200 <dir_register+0x188>
 8011130:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 8011134:	d264      	bcs.n	8011200 <dir_register+0x188>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011136:	f3c5 0908 	ubfx	r9, r5, #0, #9
 801113a:	f1b9 0f00 	cmp.w	r9, #0
 801113e:	d109      	bne.n	8011154 <dir_register+0xdc>
		if (!dp->clust) {		/* Static table */
 8011140:	6991      	ldr	r1, [r2, #24]
		dp->sect++;				/* Next sector */
 8011142:	f10a 0a01 	add.w	sl, sl, #1
 8011146:	f8c2 a01c 	str.w	sl, [r2, #28]
		if (!dp->clust) {		/* Static table */
 801114a:	b9e9      	cbnz	r1, 8011188 <dir_register+0x110>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801114c:	893b      	ldrh	r3, [r7, #8]
 801114e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8011152:	d953      	bls.n	80111fc <dir_register+0x184>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011154:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	dp->dptr = ofs;						/* Current entry */
 8011158:	9a00      	ldr	r2, [sp, #0]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801115a:	eb08 0309 	add.w	r3, r8, r9
	dp->dptr = ofs;						/* Current entry */
 801115e:	6155      	str	r5, [r2, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011160:	6213      	str	r3, [r2, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011162:	e798      	b.n	8011096 <dir_register+0x1e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011164:	2301      	movs	r3, #1
 8011166:	462a      	mov	r2, r5
 8011168:	4659      	mov	r1, fp
 801116a:	f7ff f809 	bl	8010180 <disk_write>
 801116e:	2800      	cmp	r0, #0
 8011170:	d1a1      	bne.n	80110b6 <dir_register+0x3e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011172:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 8011174:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011176:	1aea      	subs	r2, r5, r3
 8011178:	69b3      	ldr	r3, [r6, #24]
 801117a:	429a      	cmp	r2, r3
 801117c:	d202      	bcs.n	8011184 <dir_register+0x10c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801117e:	78b7      	ldrb	r7, [r6, #2]
 8011180:	2f01      	cmp	r7, #1
 8011182:	d82f      	bhi.n	80111e4 <dir_register+0x16c>
 8011184:	7870      	ldrb	r0, [r6, #1]
 8011186:	e78d      	b.n	80110a4 <dir_register+0x2c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011188:	897b      	ldrh	r3, [r7, #10]
 801118a:	3b01      	subs	r3, #1
 801118c:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8011190:	d1e0      	bne.n	8011154 <dir_register+0xdc>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011192:	4638      	mov	r0, r7
 8011194:	f7ff fb2a 	bl	80107ec <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011198:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801119a:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801119c:	f240 8089 	bls.w	80112b2 <dir_register+0x23a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80111a0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80111a4:	d087      	beq.n	80110b6 <dir_register+0x3e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	4298      	cmp	r0, r3
 80111aa:	d22b      	bcs.n	8011204 <dir_register+0x18c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80111ac:	3b02      	subs	r3, #2
	clst -= 2;
 80111ae:	1e84      	subs	r4, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80111b0:	f107 0830 	add.w	r8, r7, #48	@ 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 80111b4:	9a00      	ldr	r2, [sp, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80111b6:	42a3      	cmp	r3, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 80111b8:	f8c2 a018 	str.w	sl, [r2, #24]
	return clst * fs->csize + fs->database;
 80111bc:	bf82      	ittt	hi
 80111be:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 80111c0:	897a      	ldrhhi	r2, [r7, #10]
 80111c2:	fb04 3a02 	mlahi	sl, r4, r2, r3
				dp->sect = clust2sect(fs, clst);
 80111c6:	9b00      	ldr	r3, [sp, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80111c8:	bf98      	it	ls
 80111ca:	f04f 0a00 	movls.w	sl, #0
				dp->sect = clust2sect(fs, clst);
 80111ce:	f8c3 a01c 	str.w	sl, [r3, #28]
 80111d2:	e7c1      	b.n	8011158 <dir_register+0xe0>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80111d4:	2804      	cmp	r0, #4
 80111d6:	4605      	mov	r5, r0
 80111d8:	d012      	beq.n	8011200 <dir_register+0x188>
}
 80111da:	4628      	mov	r0, r5
 80111dc:	b005      	add	sp, #20
 80111de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					wsect += fs->fsize;
 80111e2:	69b3      	ldr	r3, [r6, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80111e4:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80111e6:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80111e8:	462a      	mov	r2, r5
 80111ea:	2301      	movs	r3, #1
 80111ec:	4659      	mov	r1, fp
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111ee:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80111f0:	f7fe ffc6 	bl	8010180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111f4:	2f01      	cmp	r7, #1
 80111f6:	d1f4      	bne.n	80111e2 <dir_register+0x16a>
 80111f8:	7870      	ldrb	r0, [r6, #1]
 80111fa:	e753      	b.n	80110a4 <dir_register+0x2c>
				dp->sect = 0; return FR_NO_FILE;
 80111fc:	9b00      	ldr	r3, [sp, #0]
 80111fe:	61d9      	str	r1, [r3, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011200:	2507      	movs	r5, #7
	return res;
 8011202:	e759      	b.n	80110b8 <dir_register+0x40>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011204:	9b00      	ldr	r3, [sp, #0]
 8011206:	6999      	ldr	r1, [r3, #24]
 8011208:	4618      	mov	r0, r3
 801120a:	f7ff fb45 	bl	8010898 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801120e:	4682      	mov	sl, r0
 8011210:	2800      	cmp	r0, #0
 8011212:	d0f5      	beq.n	8011200 <dir_register+0x188>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011214:	2801      	cmp	r0, #1
 8011216:	d04c      	beq.n	80112b2 <dir_register+0x23a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011218:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801121c:	f43f af4b 	beq.w	80110b6 <dir_register+0x3e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011220:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011222:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011226:	2b00      	cmp	r3, #0
 8011228:	d168      	bne.n	80112fc <dir_register+0x284>
		*d++ = (BYTE)val;
 801122a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801122e:	2100      	movs	r1, #0
 8011230:	4640      	mov	r0, r8
 8011232:	f003 ff3e 	bl	80150b2 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011236:	697b      	ldr	r3, [r7, #20]
	return clst * fs->csize + fs->database;
 8011238:	8979      	ldrh	r1, [r7, #10]
	clst -= 2;
 801123a:	f1aa 0402 	sub.w	r4, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801123e:	3b02      	subs	r3, #2
 8011240:	429c      	cmp	r4, r3
	return clst * fs->csize + fs->database;
 8011242:	bf36      	itet	cc
 8011244:	6aba      	ldrcc	r2, [r7, #40]	@ 0x28
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011246:	2200      	movcs	r2, #0
	return clst * fs->csize + fs->database;
 8011248:	fb04 2201 	mlacc	r2, r4, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801124c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801124e:	2900      	cmp	r1, #0
 8011250:	d052      	beq.n	80112f8 <dir_register+0x280>
 8011252:	2100      	movs	r1, #0
 8011254:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8011258:	9403      	str	r4, [sp, #12]
 801125a:	460e      	mov	r6, r1
 801125c:	4614      	mov	r4, r2
						fs->wflag = 1;
 801125e:	f04f 0301 	mov.w	r3, #1
 8011262:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011264:	7878      	ldrb	r0, [r7, #1]
 8011266:	2301      	movs	r3, #1
 8011268:	4622      	mov	r2, r4
 801126a:	4641      	mov	r1, r8
 801126c:	f7fe ff88 	bl	8010180 <disk_write>
 8011270:	2800      	cmp	r0, #0
 8011272:	f47f af20 	bne.w	80110b6 <dir_register+0x3e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011276:	6a3b      	ldr	r3, [r7, #32]
			fs->wflag = 0;
 8011278:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801127a:	1ae1      	subs	r1, r4, r3
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	4299      	cmp	r1, r3
 8011280:	d20e      	bcs.n	80112a0 <dir_register+0x228>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011282:	78bd      	ldrb	r5, [r7, #2]
 8011284:	2d01      	cmp	r5, #1
 8011286:	d801      	bhi.n	801128c <dir_register+0x214>
 8011288:	e00a      	b.n	80112a0 <dir_register+0x228>
					wsect += fs->fsize;
 801128a:	69bb      	ldr	r3, [r7, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 801128c:	7878      	ldrb	r0, [r7, #1]
					wsect += fs->fsize;
 801128e:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8011290:	4622      	mov	r2, r4
 8011292:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011294:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8011296:	4641      	mov	r1, r8
 8011298:	f7fe ff72 	bl	8010180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801129c:	2d01      	cmp	r5, #1
 801129e:	d1f4      	bne.n	801128a <dir_register+0x212>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80112a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80112a2:	8979      	ldrh	r1, [r7, #10]
 80112a4:	1c73      	adds	r3, r6, #1
 80112a6:	1c44      	adds	r4, r0, #1
 80112a8:	428b      	cmp	r3, r1
 80112aa:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80112ac:	d21d      	bcs.n	80112ea <dir_register+0x272>
 80112ae:	461e      	mov	r6, r3
 80112b0:	e7d5      	b.n	801125e <dir_register+0x1e6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80112b2:	2502      	movs	r5, #2
 80112b4:	e700      	b.n	80110b8 <dir_register+0x40>
			*d++ = *s++;
 80112b6:	9900      	ldr	r1, [sp, #0]
 80112b8:	f891 2024 	ldrb.w	r2, [r1, #36]	@ 0x24
 80112bc:	701a      	strb	r2, [r3, #0]
 80112be:	f891 2025 	ldrb.w	r2, [r1, #37]	@ 0x25
 80112c2:	705a      	strb	r2, [r3, #1]
 80112c4:	f891 2026 	ldrb.w	r2, [r1, #38]	@ 0x26
 80112c8:	709a      	strb	r2, [r3, #2]
 80112ca:	f891 2027 	ldrb.w	r2, [r1, #39]	@ 0x27
 80112ce:	70da      	strb	r2, [r3, #3]
 80112d0:	f891 2028 	ldrb.w	r2, [r1, #40]	@ 0x28
 80112d4:	711a      	strb	r2, [r3, #4]
 80112d6:	f891 2029 	ldrb.w	r2, [r1, #41]	@ 0x29
 80112da:	715a      	strb	r2, [r3, #5]
 80112dc:	f891 202a 	ldrb.w	r2, [r1, #42]	@ 0x2a
 80112e0:	719a      	strb	r2, [r3, #6]
 80112e2:	f891 202b 	ldrb.w	r2, [r1, #43]	@ 0x2b
 80112e6:	71da      	strb	r2, [r3, #7]
 80112e8:	e70b      	b.n	8011102 <dir_register+0x8a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80112ea:	697b      	ldr	r3, [r7, #20]
					fs->winsect -= n;							/* Restore window offset */
 80112ec:	9d02      	ldr	r5, [sp, #8]
 80112ee:	9c03      	ldr	r4, [sp, #12]
 80112f0:	4631      	mov	r1, r6
 80112f2:	9e01      	ldr	r6, [sp, #4]
 80112f4:	1a42      	subs	r2, r0, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80112f6:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 80112f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80112fa:	e75b      	b.n	80111b4 <dir_register+0x13c>
		wsect = fs->winsect;	/* Current sector number */
 80112fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112fe:	7878      	ldrb	r0, [r7, #1]
 8011300:	9201      	str	r2, [sp, #4]
 8011302:	2301      	movs	r3, #1
 8011304:	4641      	mov	r1, r8
 8011306:	f7fe ff3b 	bl	8010180 <disk_write>
 801130a:	2800      	cmp	r0, #0
 801130c:	f47f aed3 	bne.w	80110b6 <dir_register+0x3e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011310:	6a3b      	ldr	r3, [r7, #32]
 8011312:	9a01      	ldr	r2, [sp, #4]
			fs->wflag = 0;
 8011314:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011316:	1ad1      	subs	r1, r2, r3
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	4299      	cmp	r1, r3
 801131c:	d285      	bcs.n	801122a <dir_register+0x1b2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801131e:	78bc      	ldrb	r4, [r7, #2]
 8011320:	2c01      	cmp	r4, #1
 8011322:	d982      	bls.n	801122a <dir_register+0x1b2>
 8011324:	9501      	str	r5, [sp, #4]
 8011326:	4615      	mov	r5, r2
 8011328:	e000      	b.n	801132c <dir_register+0x2b4>
					wsect += fs->fsize;
 801132a:	69bb      	ldr	r3, [r7, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 801132c:	7878      	ldrb	r0, [r7, #1]
					wsect += fs->fsize;
 801132e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8011330:	462a      	mov	r2, r5
 8011332:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011334:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8011336:	4641      	mov	r1, r8
 8011338:	f7fe ff22 	bl	8010180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801133c:	2c01      	cmp	r4, #1
 801133e:	d1f4      	bne.n	801132a <dir_register+0x2b2>
 8011340:	9d01      	ldr	r5, [sp, #4]
 8011342:	e772      	b.n	801122a <dir_register+0x1b2>

08011344 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011344:	b500      	push	{lr}
 8011346:	b083      	sub	sp, #12
 8011348:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 801134c:	b199      	cbz	r1, 8011376 <f_mount+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801134e:	f891 c000 	ldrb.w	ip, [r1]
 8011352:	f1bc 0f20 	cmp.w	ip, #32
 8011356:	d912      	bls.n	801137e <f_mount+0x3a>
 8011358:	4663      	mov	r3, ip
 801135a:	4608      	mov	r0, r1
 801135c:	e003      	b.n	8011366 <f_mount+0x22>
 801135e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011362:	2b20      	cmp	r3, #32
 8011364:	d90b      	bls.n	801137e <f_mount+0x3a>
 8011366:	2b3a      	cmp	r3, #58	@ 0x3a
 8011368:	d1f9      	bne.n	801135e <f_mount+0x1a>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801136a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801136e:	d102      	bne.n	8011376 <f_mount+0x32>
			i = *tp++ - '0';
 8011370:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011372:	4288      	cmp	r0, r1
 8011374:	d003      	beq.n	801137e <f_mount+0x3a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8011376:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8011378:	b003      	add	sp, #12
 801137a:	f85d fb04 	ldr.w	pc, [sp], #4
	cfs = FatFs[vol];					/* Pointer to fs object */
 801137e:	4b12      	ldr	r3, [pc, #72]	@ (80113c8 <f_mount+0x84>)
 8011380:	6a19      	ldr	r1, [r3, #32]
	if (cfs) {
 8011382:	b159      	cbz	r1, 801139c <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011384:	6818      	ldr	r0, [r3, #0]
 8011386:	4281      	cmp	r1, r0
 8011388:	bf04      	itt	eq
 801138a:	2000      	moveq	r0, #0
 801138c:	6018      	streq	r0, [r3, #0]
 801138e:	6918      	ldr	r0, [r3, #16]
 8011390:	4288      	cmp	r0, r1
 8011392:	bf04      	itt	eq
 8011394:	2000      	moveq	r0, #0
 8011396:	6118      	streq	r0, [r3, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 8011398:	2000      	movs	r0, #0
 801139a:	7008      	strb	r0, [r1, #0]
	if (fs) {
 801139c:	9901      	ldr	r1, [sp, #4]
 801139e:	b181      	cbz	r1, 80113c2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80113a0:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80113a2:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 80113a4:	7008      	strb	r0, [r1, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 80113a6:	6219      	str	r1, [r3, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80113a8:	d003      	beq.n	80113b2 <f_mount+0x6e>
 80113aa:	2000      	movs	r0, #0
}
 80113ac:	b003      	add	sp, #12
 80113ae:	f85d fb04 	ldr.w	pc, [sp], #4
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80113b2:	4602      	mov	r2, r0
 80113b4:	a901      	add	r1, sp, #4
 80113b6:	4668      	mov	r0, sp
 80113b8:	f7ff f832 	bl	8010420 <find_volume>
}
 80113bc:	b003      	add	sp, #12
 80113be:	f85d fb04 	ldr.w	pc, [sp], #4
	FatFs[vol] = fs;					/* Register new fs object */
 80113c2:	6219      	str	r1, [r3, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80113c4:	e7f1      	b.n	80113aa <f_mount+0x66>
 80113c6:	bf00      	nop
 80113c8:	20003008 	.word	0x20003008

080113cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80113cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d0:	b090      	sub	sp, #64	@ 0x40
 80113d2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80113d4:	2800      	cmp	r0, #0
 80113d6:	f000 8085 	beq.w	80114e4 <f_open+0x118>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80113da:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 80113de:	4616      	mov	r6, r2
 80113e0:	4604      	mov	r4, r0
 80113e2:	463a      	mov	r2, r7
 80113e4:	a903      	add	r1, sp, #12
 80113e6:	a801      	add	r0, sp, #4
 80113e8:	f7ff f81a 	bl	8010420 <find_volume>
	if (res == FR_OK) {
 80113ec:	4605      	mov	r5, r0
 80113ee:	b128      	cbz	r0, 80113fc <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80113f0:	2300      	movs	r3, #0
 80113f2:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80113f4:	4628      	mov	r0, r5
 80113f6:	b010      	add	sp, #64	@ 0x40
 80113f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 80113fc:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8011400:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8011402:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8011406:	a804      	add	r0, sp, #16
 8011408:	f7ff fba4 	bl	8010b54 <follow_path>
		if (res == FR_OK) {
 801140c:	b9a8      	cbnz	r0, 801143a <f_open+0x6e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801140e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 8011412:	2b00      	cmp	r3, #0
 8011414:	db6b      	blt.n	80114ee <f_open+0x122>
		if (Files[i].fs) {	/* Existing entry */
 8011416:	4ba4      	ldr	r3, [pc, #656]	@ (80116a8 <f_open+0x2dc>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011418:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 801141a:	6818      	ldr	r0, [r3, #0]
 801141c:	f006 0c3e 	and.w	ip, r6, #62	@ 0x3e
 8011420:	2800      	cmp	r0, #0
 8011422:	f000 80e9 	beq.w	80115f8 <f_open+0x22c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011426:	4290      	cmp	r0, r2
 8011428:	d063      	beq.n	80114f2 <f_open+0x126>
		if (Files[i].fs) {	/* Existing entry */
 801142a:	6919      	ldr	r1, [r3, #16]
 801142c:	2900      	cmp	r1, #0
 801142e:	d070      	beq.n	8011512 <f_open+0x146>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011430:	428a      	cmp	r2, r1
 8011432:	f000 80ea 	beq.w	801160a <f_open+0x23e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011436:	2512      	movs	r5, #18
 8011438:	e7da      	b.n	80113f0 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801143a:	f016 0f1c 	tst.w	r6, #28
 801143e:	d04f      	beq.n	80114e0 <f_open+0x114>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011440:	2804      	cmp	r0, #4
 8011442:	d14d      	bne.n	80114e0 <f_open+0x114>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011444:	4b98      	ldr	r3, [pc, #608]	@ (80116a8 <f_open+0x2dc>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	2a00      	cmp	r2, #0
 801144a:	d044      	beq.n	80114d6 <f_open+0x10a>
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1f1      	bne.n	8011436 <f_open+0x6a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011452:	a804      	add	r0, sp, #16
 8011454:	f7ff fe10 	bl	8011078 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011458:	4603      	mov	r3, r0
 801145a:	2800      	cmp	r0, #0
 801145c:	f040 80fa 	bne.w	8011654 <f_open+0x288>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011460:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 8011464:	f7fe fea6 	bl	80101b4 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011468:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801146c:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 801146e:	f8c9 000e 	str.w	r0, [r9, #14]
 8011472:	f8c9 0016 	str.w	r0, [r9, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011476:	f889 300b 	strb.w	r3, [r9, #11]
	if (fs->fs_type == FS_FAT32) {
 801147a:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 801147e:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 8011482:	2b03      	cmp	r3, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011484:	bf04      	itt	eq
 8011486:	f8b9 3014 	ldrheq.w	r3, [r9, #20]
 801148a:	ea46 4603 	orreq.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 801148e:	2300      	movs	r3, #0
 8011490:	f8a9 301a 	strh.w	r3, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 8011494:	f898 2000 	ldrb.w	r2, [r8]
 8011498:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 801149a:	bf08      	it	eq
 801149c:	f8a9 3014 	strheq.w	r3, [r9, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80114a0:	2200      	movs	r2, #0
					fs->wflag = 1;
 80114a2:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80114a4:	f8c9 201c 	str.w	r2, [r9, #28]
					fs->wflag = 1;
 80114a8:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80114ac:	2e00      	cmp	r6, #0
 80114ae:	f040 80bd 	bne.w	801162c <f_open+0x260>
				mode |= FA_MODIFIED;
 80114b2:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80114b6:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80114ba:	2f01      	cmp	r7, #1
			fp->dir_ptr = dj.dir;
 80114bc:	e9c4 3909 	strd	r3, r9, [r4, #36]	@ 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80114c0:	a804      	add	r0, sp, #16
 80114c2:	bf94      	ite	ls
 80114c4:	2100      	movls	r1, #0
 80114c6:	2101      	movhi	r1, #1
 80114c8:	f7fe fe76 	bl	80101b8 <inc_lock>
 80114cc:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d151      	bne.n	8011576 <f_open+0x1aa>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80114d2:	2502      	movs	r5, #2
 80114d4:	e78c      	b.n	80113f0 <f_open+0x24>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80114d6:	a804      	add	r0, sp, #16
 80114d8:	f7ff fdce 	bl	8011078 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80114dc:	2800      	cmp	r0, #0
 80114de:	d0bf      	beq.n	8011460 <f_open+0x94>
 80114e0:	4605      	mov	r5, r0
 80114e2:	e785      	b.n	80113f0 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80114e4:	2509      	movs	r5, #9
}
 80114e6:	4628      	mov	r0, r5
 80114e8:	b010      	add	sp, #64	@ 0x40
 80114ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 80114ee:	2506      	movs	r5, #6
 80114f0:	e77e      	b.n	80113f0 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80114f2:	685a      	ldr	r2, [r3, #4]
 80114f4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80114f8:	4572      	cmp	r2, lr
 80114fa:	f000 808a 	beq.w	8011612 <f_open+0x246>
		if (Files[i].fs) {	/* Existing entry */
 80114fe:	691a      	ldr	r2, [r3, #16]
 8011500:	b13a      	cbz	r2, 8011512 <f_open+0x146>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011502:	4282      	cmp	r2, r0
 8011504:	d197      	bne.n	8011436 <f_open+0x6a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011506:	4628      	mov	r0, r5
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011508:	695a      	ldr	r2, [r3, #20]
 801150a:	4572      	cmp	r2, lr
 801150c:	d00d      	beq.n	801152a <f_open+0x15e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801150e:	2800      	cmp	r0, #0
 8011510:	d091      	beq.n	8011436 <f_open+0x6a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011512:	f016 0f1c 	tst.w	r6, #28
 8011516:	d018      	beq.n	801154a <f_open+0x17e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011518:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801151c:	f013 0f11 	tst.w	r3, #17
 8011520:	d120      	bne.n	8011564 <f_open+0x198>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011522:	0773      	lsls	r3, r6, #29
 8011524:	d520      	bpl.n	8011568 <f_open+0x19c>
 8011526:	2508      	movs	r5, #8
 8011528:	e762      	b.n	80113f0 <f_open+0x24>
				Files[i].clu == dp->obj.sclust &&
 801152a:	6999      	ldr	r1, [r3, #24]
 801152c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801152e:	4291      	cmp	r1, r2
 8011530:	d1ed      	bne.n	801150e <f_open+0x142>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011532:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011534:	f1bc 0f00 	cmp.w	ip, #0
 8011538:	d105      	bne.n	8011546 <f_open+0x17a>
 801153a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801153e:	899b      	ldrh	r3, [r3, #12]
 8011540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011544:	d1e5      	bne.n	8011512 <f_open+0x146>
 8011546:	2510      	movs	r5, #16
 8011548:	e752      	b.n	80113f0 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801154a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801154e:	06d8      	lsls	r0, r3, #27
 8011550:	d40f      	bmi.n	8011572 <f_open+0x1a6>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011552:	07b2      	lsls	r2, r6, #30
 8011554:	d501      	bpl.n	801155a <f_open+0x18e>
 8011556:	07db      	lsls	r3, r3, #31
 8011558:	d404      	bmi.n	8011564 <f_open+0x198>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801155a:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 801155c:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011560:	d5a9      	bpl.n	80114b6 <f_open+0xea>
 8011562:	e7a6      	b.n	80114b2 <f_open+0xe6>
					res = FR_DENIED;
 8011564:	2507      	movs	r5, #7
 8011566:	e743      	b.n	80113f0 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011568:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 801156a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801156e:	d5a2      	bpl.n	80114b6 <f_open+0xea>
 8011570:	e778      	b.n	8011464 <f_open+0x98>
					res = FR_NO_FILE;
 8011572:	2504      	movs	r5, #4
 8011574:	e73c      	b.n	80113f0 <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
 8011576:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 801157a:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 801157e:	2b03      	cmp	r3, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011580:	bf04      	itt	eq
 8011582:	f8b9 3014 	ldrheq.w	r3, [r9, #20]
 8011586:	ea46 4603 	orreq.w	r6, r6, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801158a:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 801158c:	f8d9 901c 	ldr.w	r9, [r9, #28]
			fp->obj.id = fs->id;
 8011590:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011594:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011598:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801159a:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 801159e:	f44f 7200 	mov.w	r2, #512	@ 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 80115a2:	f8c4 8000 	str.w	r8, [r4]
			fp->obj.id = fs->id;
 80115a6:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 80115a8:	7527      	strb	r7, [r4, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80115aa:	62e1      	str	r1, [r4, #44]	@ 0x2c
			fp->err = 0;			/* Clear error flag */
 80115ac:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80115ae:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80115b0:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 80115b2:	4650      	mov	r0, sl
 80115b4:	f003 fd7d 	bl	80150b2 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80115b8:	06ba      	lsls	r2, r7, #26
 80115ba:	f57f af1b 	bpl.w	80113f4 <f_open+0x28>
 80115be:	f1b9 0f00 	cmp.w	r9, #0
 80115c2:	f43f af17 	beq.w	80113f4 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80115c6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80115ca:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115ce:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80115d2:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115d6:	d804      	bhi.n	80115e2 <f_open+0x216>
 80115d8:	e03e      	b.n	8011658 <f_open+0x28c>
 80115da:	1c43      	adds	r3, r0, #1
 80115dc:	d062      	beq.n	80116a4 <f_open+0x2d8>
 80115de:	454f      	cmp	r7, r9
 80115e0:	d23a      	bcs.n	8011658 <f_open+0x28c>
					clst = get_fat(&fp->obj, clst);
 80115e2:	4631      	mov	r1, r6
 80115e4:	6820      	ldr	r0, [r4, #0]
 80115e6:	f7ff f901 	bl	80107ec <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80115ea:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80115ec:	4606      	mov	r6, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115ee:	eba9 0907 	sub.w	r9, r9, r7
					if (clst <= 1) res = FR_INT_ERR;
 80115f2:	d8f2      	bhi.n	80115da <f_open+0x20e>
				fp->clust = clst;
 80115f4:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80115f6:	e76c      	b.n	80114d2 <f_open+0x106>
		if (Files[i].fs) {	/* Existing entry */
 80115f8:	6919      	ldr	r1, [r3, #16]
 80115fa:	2900      	cmp	r1, #0
 80115fc:	d089      	beq.n	8011512 <f_open+0x146>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80115fe:	428a      	cmp	r2, r1
 8011600:	d187      	bne.n	8011512 <f_open+0x146>
 8011602:	f8dd e018 	ldr.w	lr, [sp, #24]
			be = 1;
 8011606:	2001      	movs	r0, #1
 8011608:	e77e      	b.n	8011508 <f_open+0x13c>
 801160a:	f8dd e018 	ldr.w	lr, [sp, #24]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801160e:	4628      	mov	r0, r5
 8011610:	e77a      	b.n	8011508 <f_open+0x13c>
				Files[i].clu == dp->obj.sclust &&
 8011612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011614:	6899      	ldr	r1, [r3, #8]
 8011616:	4291      	cmp	r1, r2
 8011618:	d042      	beq.n	80116a0 <f_open+0x2d4>
		if (Files[i].fs) {	/* Existing entry */
 801161a:	691a      	ldr	r2, [r3, #16]
 801161c:	2a00      	cmp	r2, #0
 801161e:	f43f af78 	beq.w	8011512 <f_open+0x146>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011622:	4282      	cmp	r2, r0
 8011624:	f47f af07 	bne.w	8011436 <f_open+0x6a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011628:	2000      	movs	r0, #0
 801162a:	e76d      	b.n	8011508 <f_open+0x13c>
						res = remove_chain(&dj.obj, cl, 0);
 801162c:	4631      	mov	r1, r6
 801162e:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8011630:	f8d8 a02c 	ldr.w	sl, [r8, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8011634:	f7ff fc14 	bl	8010e60 <remove_chain>
						if (res == FR_OK) {
 8011638:	2800      	cmp	r0, #0
 801163a:	f47f af51 	bne.w	80114e0 <f_open+0x114>
							res = move_window(fs, dw);
 801163e:	4651      	mov	r1, sl
 8011640:	4640      	mov	r0, r8
 8011642:	f7fe fead 	bl	80103a0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011646:	3e01      	subs	r6, #1
 8011648:	f8c8 600c 	str.w	r6, [r8, #12]
		if (res == FR_OK) {
 801164c:	4603      	mov	r3, r0
 801164e:	2800      	cmp	r0, #0
 8011650:	f43f af2f 	beq.w	80114b2 <f_open+0xe6>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011654:	461d      	mov	r5, r3
 8011656:	e6cb      	b.n	80113f0 <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011658:	f3c9 0308 	ubfx	r3, r9, #0, #9
				fp->clust = clst;
 801165c:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801165e:	2b00      	cmp	r3, #0
 8011660:	f43f aec8 	beq.w	80113f4 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011664:	f8d8 3014 	ldr.w	r3, [r8, #20]
	clst -= 2;
 8011668:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801166a:	3b02      	subs	r3, #2
 801166c:	429e      	cmp	r6, r3
 801166e:	f4bf af30 	bcs.w	80114d2 <f_open+0x106>
	return clst * fs->csize + fs->database;
 8011672:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8011676:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 801167a:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 801167e:	2a00      	cmp	r2, #0
 8011680:	f43f af27 	beq.w	80114d2 <f_open+0x106>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011684:	eb02 2259 	add.w	r2, r2, r9, lsr #9
 8011688:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801168a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801168e:	4651      	mov	r1, sl
 8011690:	2301      	movs	r3, #1
 8011692:	f7fe fd67 	bl	8010164 <disk_read>
 8011696:	2800      	cmp	r0, #0
 8011698:	f43f aeac 	beq.w	80113f4 <f_open+0x28>
 801169c:	2501      	movs	r5, #1
 801169e:	e6a7      	b.n	80113f0 <f_open+0x24>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80116a0:	462a      	mov	r2, r5
 80116a2:	e747      	b.n	8011534 <f_open+0x168>
				fp->clust = clst;
 80116a4:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80116a6:	e7f9      	b.n	801169c <f_open+0x2d0>
 80116a8:	20003008 	.word	0x20003008

080116ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80116ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b0:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80116b2:	2300      	movs	r3, #0
{
 80116b4:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 80116b6:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80116b8:	b150      	cbz	r0, 80116d0 <f_write+0x24>
 80116ba:	6803      	ldr	r3, [r0, #0]
 80116bc:	4604      	mov	r4, r0
 80116be:	b13b      	cbz	r3, 80116d0 <f_write+0x24>
 80116c0:	4616      	mov	r6, r2
 80116c2:	781a      	ldrb	r2, [r3, #0]
 80116c4:	b122      	cbz	r2, 80116d0 <f_write+0x24>
 80116c6:	88da      	ldrh	r2, [r3, #6]
 80116c8:	460d      	mov	r5, r1
 80116ca:	8881      	ldrh	r1, [r0, #4]
 80116cc:	4291      	cmp	r1, r2
 80116ce:	d005      	beq.n	80116dc <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80116d0:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80116d4:	4640      	mov	r0, r8
 80116d6:	b003      	add	sp, #12
 80116d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80116dc:	7858      	ldrb	r0, [r3, #1]
 80116de:	f7fe fd27 	bl	8010130 <disk_status>
 80116e2:	07c0      	lsls	r0, r0, #31
 80116e4:	d4f4      	bmi.n	80116d0 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80116e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80116ea:	f1b8 0f00 	cmp.w	r8, #0
 80116ee:	d1f1      	bne.n	80116d4 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80116f0:	7d22      	ldrb	r2, [r4, #20]
 80116f2:	0791      	lsls	r1, r2, #30
 80116f4:	f140 80fd 	bpl.w	80118f2 <f_write+0x246>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80116f8:	69a3      	ldr	r3, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80116fa:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80116fe:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011700:	bf28      	it	cs
 8011702:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 8011704:	2e00      	cmp	r6, #0
 8011706:	d063      	beq.n	80117d0 <f_write+0x124>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011708:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801170c:	2a00      	cmp	r2, #0
 801170e:	d163      	bne.n	80117d8 <f_write+0x12c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011710:	f8b9 a00a 	ldrh.w	sl, [r9, #10]
 8011714:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8011718:	ea1a 2a53 	ands.w	sl, sl, r3, lsr #9
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801171c:	ea4f 2253 	mov.w	r2, r3, lsr #9
			if (csect == 0) {				/* On the cluster boundary? */
 8011720:	d110      	bne.n	8011744 <f_write+0x98>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011722:	2b00      	cmp	r3, #0
 8011724:	f040 80b8 	bne.w	8011898 <f_write+0x1ec>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011728:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 801172a:	2800      	cmp	r0, #0
 801172c:	f000 80ec 	beq.w	8011908 <f_write+0x25c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011730:	2801      	cmp	r0, #1
 8011732:	f000 809c 	beq.w	801186e <f_write+0x1c2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011736:	1c43      	adds	r3, r0, #1
 8011738:	f000 80d3 	beq.w	80118e2 <f_write+0x236>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801173c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801173e:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011740:	b903      	cbnz	r3, 8011744 <f_write+0x98>
 8011742:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011744:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8011748:	2b00      	cmp	r3, #0
 801174a:	f2c0 80bc 	blt.w	80118c6 <f_write+0x21a>
	clst -= 2;
 801174e:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011750:	f8d9 2014 	ldr.w	r2, [r9, #20]
	clst -= 2;
 8011754:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011756:	3a02      	subs	r2, #2
 8011758:	4293      	cmp	r3, r2
 801175a:	f080 8088 	bcs.w	801186e <f_write+0x1c2>
	return clst * fs->csize + fs->database;
 801175e:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8011762:	f8d9 2028 	ldr.w	r2, [r9, #40]	@ 0x28
 8011766:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 801176a:	2a00      	cmp	r2, #0
 801176c:	d07f      	beq.n	801186e <f_write+0x1c2>
			if (cc) {						/* Write maximum contiguous sectors directly */
 801176e:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 8011772:	4452      	add	r2, sl
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011774:	f0c0 8083 	bcc.w	801187e <f_write+0x1d2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011778:	eb0a 2356 	add.w	r3, sl, r6, lsr #9
 801177c:	428b      	cmp	r3, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801177e:	ea4f 2b56 	mov.w	fp, r6, lsr #9
					cc = fs->csize - csect;
 8011782:	bf88      	it	hi
 8011784:	eba1 0b0a 	subhi.w	fp, r1, sl
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011788:	f899 0001 	ldrb.w	r0, [r9, #1]
 801178c:	9201      	str	r2, [sp, #4]
 801178e:	465b      	mov	r3, fp
 8011790:	4629      	mov	r1, r5
 8011792:	f7fe fcf5 	bl	8010180 <disk_write>
 8011796:	2800      	cmp	r0, #0
 8011798:	f040 80a3 	bne.w	80118e2 <f_write+0x236>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801179c:	6a23      	ldr	r3, [r4, #32]
 801179e:	9a01      	ldr	r2, [sp, #4]
 80117a0:	1a9b      	subs	r3, r3, r2
 80117a2:	455b      	cmp	r3, fp
 80117a4:	f0c0 80c4 	bcc.w	8011930 <f_write+0x284>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80117a8:	eb05 204b 	add.w	r0, r5, fp, lsl #9
 80117ac:	ea4f 2c4b 	mov.w	ip, fp, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80117b0:	69a3      	ldr	r3, [r4, #24]
 80117b2:	68e2      	ldr	r2, [r4, #12]
 80117b4:	4463      	add	r3, ip
 80117b6:	429a      	cmp	r2, r3
 80117b8:	bf38      	it	cc
 80117ba:	461a      	movcc	r2, r3
 80117bc:	60e2      	str	r2, [r4, #12]
 80117be:	683a      	ldr	r2, [r7, #0]
 80117c0:	61a3      	str	r3, [r4, #24]
 80117c2:	4462      	add	r2, ip
	for ( ;  btw;							/* Repeat until all data written */
 80117c4:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80117c8:	4605      	mov	r5, r0
 80117ca:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 80117cc:	d19c      	bne.n	8011708 <f_write+0x5c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80117ce:	7d22      	ldrb	r2, [r4, #20]
 80117d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80117d4:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80117d6:	e77d      	b.n	80116d4 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117d8:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80117dc:	f5c2 7c00 	rsb	ip, r2, #512	@ 0x200
 80117e0:	45b4      	cmp	ip, r6
 80117e2:	bf28      	it	cs
 80117e4:	46b4      	movcs	ip, r6
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80117e6:	eb0a 0302 	add.w	r3, sl, r2
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80117ea:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 80117ee:	2a05      	cmp	r2, #5
 80117f0:	d903      	bls.n	80117fa <f_write+0x14e>
 80117f2:	1c6a      	adds	r2, r5, #1
 80117f4:	1a9a      	subs	r2, r3, r2
 80117f6:	2a02      	cmp	r2, #2
 80117f8:	d80e      	bhi.n	8011818 <f_write+0x16c>
 80117fa:	3b01      	subs	r3, #1
 80117fc:	eb05 000c 	add.w	r0, r5, ip
{
 8011800:	4629      	mov	r1, r5
			*d++ = *s++;
 8011802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011806:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 801180a:	4281      	cmp	r1, r0
 801180c:	d1f9      	bne.n	8011802 <f_write+0x156>
		fp->flag |= FA_DIRTY;
 801180e:	7d23      	ldrb	r3, [r4, #20]
 8011810:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011814:	7523      	strb	r3, [r4, #20]
 8011816:	e7cb      	b.n	80117b0 <f_write+0x104>
 8011818:	f02c 0e03 	bic.w	lr, ip, #3
 801181c:	449e      	add	lr, r3
 801181e:	461a      	mov	r2, r3
 8011820:	4629      	mov	r1, r5
			*d++ = *s++;
 8011822:	f851 0b04 	ldr.w	r0, [r1], #4
 8011826:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 801182a:	4596      	cmp	lr, r2
 801182c:	d1f9      	bne.n	8011822 <f_write+0x176>
 801182e:	f02c 0203 	bic.w	r2, ip, #3
 8011832:	f01c 0f03 	tst.w	ip, #3
 8011836:	f00c 0103 	and.w	r1, ip, #3
 801183a:	eb03 0a02 	add.w	sl, r3, r2
 801183e:	eb05 0002 	add.w	r0, r5, r2
 8011842:	d00d      	beq.n	8011860 <f_write+0x1b4>
			*d++ = *s++;
 8011844:	f815 e002 	ldrb.w	lr, [r5, r2]
 8011848:	f803 e002 	strb.w	lr, [r3, r2]
		} while (--cnt);
 801184c:	2901      	cmp	r1, #1
 801184e:	d007      	beq.n	8011860 <f_write+0x1b4>
			*d++ = *s++;
 8011850:	7843      	ldrb	r3, [r0, #1]
 8011852:	f88a 3001 	strb.w	r3, [sl, #1]
		} while (--cnt);
 8011856:	2902      	cmp	r1, #2
			*d++ = *s++;
 8011858:	bf1c      	itt	ne
 801185a:	7883      	ldrbne	r3, [r0, #2]
 801185c:	f88a 3002 	strbne.w	r3, [sl, #2]
		fp->flag |= FA_DIRTY;
 8011860:	7d23      	ldrb	r3, [r4, #20]
 8011862:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011866:	eb05 000c 	add.w	r0, r5, ip
 801186a:	7523      	strb	r3, [r4, #20]
 801186c:	e7a0      	b.n	80117b0 <f_write+0x104>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801186e:	f04f 0802 	mov.w	r8, #2
}
 8011872:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011874:	f884 8015 	strb.w	r8, [r4, #21]
}
 8011878:	b003      	add	sp, #12
 801187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801187e:	6a21      	ldr	r1, [r4, #32]
				fp->fptr < fp->obj.objsize &&
 8011880:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011882:	4291      	cmp	r1, r2
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011884:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011888:	d002      	beq.n	8011890 <f_write+0x1e4>
 801188a:	68e1      	ldr	r1, [r4, #12]
 801188c:	4299      	cmp	r1, r3
 801188e:	d843      	bhi.n	8011918 <f_write+0x26c>
			fp->sect = sect;
 8011890:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011896:	e7a1      	b.n	80117dc <f_write+0x130>
					if (fp->cltbl) {
 8011898:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801189a:	b369      	cbz	r1, 80118f8 <f_write+0x24c>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	895b      	ldrh	r3, [r3, #10]
 80118a0:	fbb2 f3f3 	udiv	r3, r2, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80118a4:	684a      	ldr	r2, [r1, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80118a6:	3104      	adds	r1, #4
		if (ncl == 0) return 0;	/* End of table? (error) */
 80118a8:	b92a      	cbnz	r2, 80118b6 <f_write+0x20a>
 80118aa:	e790      	b.n	80117ce <f_write+0x122>
		cl -= ncl; tbl++;		/* Next fragment */
 80118ac:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80118ae:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80118b2:	2a00      	cmp	r2, #0
 80118b4:	d08b      	beq.n	80117ce <f_write+0x122>
		if (cl < ncl) break;	/* In this fragment? */
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d2f8      	bcs.n	80118ac <f_write+0x200>
	return cl + *tbl;	/* Return the cluster number */
 80118ba:	6848      	ldr	r0, [r1, #4]
 80118bc:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80118be:	2800      	cmp	r0, #0
 80118c0:	f47f af36 	bne.w	8011730 <f_write+0x84>
 80118c4:	e783      	b.n	80117ce <f_write+0x122>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118c6:	6a22      	ldr	r2, [r4, #32]
 80118c8:	f899 0001 	ldrb.w	r0, [r9, #1]
 80118cc:	2301      	movs	r3, #1
 80118ce:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80118d2:	f7fe fc55 	bl	8010180 <disk_write>
 80118d6:	b920      	cbnz	r0, 80118e2 <f_write+0x236>
				fp->flag &= (BYTE)~FA_DIRTY;
 80118d8:	7d23      	ldrb	r3, [r4, #20]
 80118da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118de:	7523      	strb	r3, [r4, #20]
 80118e0:	e735      	b.n	801174e <f_write+0xa2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80118e2:	f04f 0801 	mov.w	r8, #1
}
 80118e6:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80118e8:	f884 8015 	strb.w	r8, [r4, #21]
}
 80118ec:	b003      	add	sp, #12
 80118ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80118f2:	f04f 0807 	mov.w	r8, #7
 80118f6:	e6ed      	b.n	80116d4 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80118f8:	69e1      	ldr	r1, [r4, #28]
 80118fa:	4620      	mov	r0, r4
 80118fc:	f7fe ffcc 	bl	8010898 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011900:	2800      	cmp	r0, #0
 8011902:	f47f af15 	bne.w	8011730 <f_write+0x84>
 8011906:	e762      	b.n	80117ce <f_write+0x122>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011908:	4651      	mov	r1, sl
 801190a:	4620      	mov	r0, r4
 801190c:	f7fe ffc4 	bl	8010898 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011910:	2800      	cmp	r0, #0
 8011912:	f47f af0d 	bne.w	8011730 <f_write+0x84>
 8011916:	e75a      	b.n	80117ce <f_write+0x122>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011918:	f899 0001 	ldrb.w	r0, [r9, #1]
 801191c:	9201      	str	r2, [sp, #4]
 801191e:	2301      	movs	r3, #1
 8011920:	4651      	mov	r1, sl
 8011922:	f7fe fc1f 	bl	8010164 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8011926:	2800      	cmp	r0, #0
 8011928:	d1db      	bne.n	80118e2 <f_write+0x236>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801192a:	69a3      	ldr	r3, [r4, #24]
 801192c:	9a01      	ldr	r2, [sp, #4]
 801192e:	e7af      	b.n	8011890 <f_write+0x1e4>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011930:	eb05 2143 	add.w	r1, r5, r3, lsl #9
 8011934:	3101      	adds	r1, #1
 8011936:	eb05 2243 	add.w	r2, r5, r3, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801193a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801193e:	1a59      	subs	r1, r3, r1
 8011940:	2902      	cmp	r1, #2
 8011942:	d90c      	bls.n	801195e <f_write+0x2b2>
 8011944:	f504 700c 	add.w	r0, r4, #560	@ 0x230
			*d++ = *s++;
 8011948:	f852 1b04 	ldr.w	r1, [r2], #4
 801194c:	f843 1b04 	str.w	r1, [r3], #4
		} while (--cnt);
 8011950:	4283      	cmp	r3, r0
 8011952:	d1f9      	bne.n	8011948 <f_write+0x29c>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011954:	7d23      	ldrb	r3, [r4, #20]
 8011956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801195a:	7523      	strb	r3, [r4, #20]
 801195c:	e724      	b.n	80117a8 <f_write+0xfc>
 801195e:	f104 032f 	add.w	r3, r4, #47	@ 0x2f
 8011962:	f502 7000 	add.w	r0, r2, #512	@ 0x200
			*d++ = *s++;
 8011966:	f812 1b01 	ldrb.w	r1, [r2], #1
 801196a:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 801196e:	4290      	cmp	r0, r2
 8011970:	d1f9      	bne.n	8011966 <f_write+0x2ba>
 8011972:	e7ef      	b.n	8011954 <f_write+0x2a8>

08011974 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011974:	b158      	cbz	r0, 801198e <f_close+0x1a>
 8011976:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011978:	b570      	push	{r4, r5, r6, lr}
 801197a:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801197c:	b12b      	cbz	r3, 801198a <f_close+0x16>
 801197e:	781a      	ldrb	r2, [r3, #0]
 8011980:	b11a      	cbz	r2, 801198a <f_close+0x16>
 8011982:	8881      	ldrh	r1, [r0, #4]
 8011984:	88da      	ldrh	r2, [r3, #6]
 8011986:	4291      	cmp	r1, r2
 8011988:	d003      	beq.n	8011992 <f_close+0x1e>
{
 801198a:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 801198c:	bd70      	pop	{r4, r5, r6, pc}
{
 801198e:	2009      	movs	r0, #9
}
 8011990:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011992:	7858      	ldrb	r0, [r3, #1]
 8011994:	f7fe fbcc 	bl	8010130 <disk_status>
 8011998:	07c1      	lsls	r1, r0, #31
 801199a:	d4f6      	bmi.n	801198a <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801199c:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801199e:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80119a0:	065a      	lsls	r2, r3, #25
 80119a2:	d52e      	bpl.n	8011a02 <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80119a4:	061b      	lsls	r3, r3, #24
 80119a6:	d451      	bmi.n	8011a4c <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 80119a8:	f7fe fc04 	bl	80101b4 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80119ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 80119ae:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 80119b0:	4628      	mov	r0, r5
 80119b2:	f7fe fcf5 	bl	80103a0 <move_window>
				if (res == FR_OK) {
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d1e8      	bne.n	801198c <f_close+0x18>
					dir = fp->dir_ptr;
 80119ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80119bc:	7ada      	ldrb	r2, [r3, #11]
 80119be:	f042 0220 	orr.w	r2, r2, #32
 80119c2:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80119c4:	68a2      	ldr	r2, [r4, #8]
 80119c6:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80119c8:	769a      	strb	r2, [r3, #26]
 80119ca:	f3c2 2007 	ubfx	r0, r2, #8, #8
	*ptr++ = (BYTE)val;
 80119ce:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 80119d0:	7809      	ldrb	r1, [r1, #0]
 80119d2:	2903      	cmp	r1, #3
 80119d4:	d103      	bne.n	80119de <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80119d6:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80119d8:	751a      	strb	r2, [r3, #20]
 80119da:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 80119dc:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 80119de:	68e2      	ldr	r2, [r4, #12]
 80119e0:	61da      	str	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80119e2:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80119e4:	f8c3 6016 	str.w	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80119e8:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 80119ea:	2301      	movs	r3, #1
 80119ec:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80119ee:	4628      	mov	r0, r5
 80119f0:	f7fe fc7a 	bl	80102e8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80119f4:	7d23      	ldrb	r3, [r4, #20]
 80119f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119fa:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d1c5      	bne.n	801198c <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011a00:	6825      	ldr	r5, [r4, #0]
 8011a02:	2d00      	cmp	r5, #0
 8011a04:	d0c1      	beq.n	801198a <f_close+0x16>
 8011a06:	782b      	ldrb	r3, [r5, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d0be      	beq.n	801198a <f_close+0x16>
 8011a0c:	88a2      	ldrh	r2, [r4, #4]
 8011a0e:	88eb      	ldrh	r3, [r5, #6]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d1ba      	bne.n	801198a <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011a14:	7868      	ldrb	r0, [r5, #1]
 8011a16:	f7fe fb8b 	bl	8010130 <disk_status>
 8011a1a:	f010 0001 	ands.w	r0, r0, #1
 8011a1e:	d1b4      	bne.n	801198a <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011a20:	6923      	ldr	r3, [r4, #16]
 8011a22:	3b01      	subs	r3, #1
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d81e      	bhi.n	8011a66 <f_close+0xf2>
		n = Files[i].ctr;
 8011a28:	4912      	ldr	r1, [pc, #72]	@ (8011a74 <f_close+0x100>)
 8011a2a:	011d      	lsls	r5, r3, #4
 8011a2c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8011a30:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011a32:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8011a36:	d01a      	beq.n	8011a6e <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 8011a38:	b11a      	cbz	r2, 8011a42 <f_close+0xce>
 8011a3a:	3a01      	subs	r2, #1
 8011a3c:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8011a3e:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a40:	b90a      	cbnz	r2, 8011a46 <f_close+0xd2>
 8011a42:	2300      	movs	r3, #0
 8011a44:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 8011a46:	2300      	movs	r3, #0
 8011a48:	6023      	str	r3, [r4, #0]
}
 8011a4a:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011a4c:	6a22      	ldr	r2, [r4, #32]
 8011a4e:	7868      	ldrb	r0, [r5, #1]
 8011a50:	2301      	movs	r3, #1
 8011a52:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011a56:	f7fe fb93 	bl	8010180 <disk_write>
 8011a5a:	b930      	cbnz	r0, 8011a6a <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a5c:	7d23      	ldrb	r3, [r4, #20]
 8011a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a62:	7523      	strb	r3, [r4, #20]
 8011a64:	e7a0      	b.n	80119a8 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a66:	2002      	movs	r0, #2
}
 8011a68:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011a6a:	2001      	movs	r0, #1
}
 8011a6c:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8011a6e:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a70:	e7e7      	b.n	8011a42 <f_close+0xce>
 8011a72:	bf00      	nop
 8011a74:	20003008 	.word	0x20003008

08011a78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a78:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8011a7a:	4b10      	ldr	r3, [pc, #64]	@ (8011abc <FATFS_LinkDriver+0x44>)
 8011a7c:	7a5c      	ldrb	r4, [r3, #9]
 8011a7e:	b9cc      	cbnz	r4, 8011ab4 <FATFS_LinkDriver+0x3c>
 8011a80:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8011a82:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 8011a86:	7a5c      	ldrb	r4, [r3, #9]
 8011a88:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8011a8a:	7a5c      	ldrb	r4, [r3, #9]
 8011a8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a90:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8011a92:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8011a94:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8011a96:	441c      	add	r4, r3
 8011a98:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8011a9a:	1c54      	adds	r4, r2, #1
 8011a9c:	b2e4      	uxtb	r4, r4
 8011a9e:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8011aa0:	3230      	adds	r2, #48	@ 0x30
    path[1] = ':';
 8011aa2:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 8011aa4:	232f      	movs	r3, #47	@ 0x2f
    path[1] = ':';
 8011aa6:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 8011aa8:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8011aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8011aae:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8011ab0:	70c8      	strb	r0, [r1, #3]
}
 8011ab2:	4770      	bx	lr
  uint8_t ret = 1;
 8011ab4:	2001      	movs	r0, #1
}
 8011ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011aba:	4770      	bx	lr
 8011abc:	20003030 	.word	0x20003030

08011ac0 <FATFS_UnLinkDriver>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8011ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8011af0 <FATFS_UnLinkDriver+0x30>)
 8011ac2:	7a53      	ldrb	r3, [r2, #9]
 8011ac4:	b18b      	cbz	r3, 8011aea <FATFS_UnLinkDriver+0x2a>
  {
    DiskNum = path[0] - '0';
 8011ac6:	7803      	ldrb	r3, [r0, #0]
 8011ac8:	3b30      	subs	r3, #48	@ 0x30
    if(disk.drv[DiskNum] != 0)
 8011aca:	b2db      	uxtb	r3, r3
 8011acc:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8011ad0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011ad4:	b149      	cbz	r1, 8011aea <FATFS_UnLinkDriver+0x2a>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
      disk.nbr--;
 8011ad6:	7a51      	ldrb	r1, [r2, #9]
      disk.lun[DiskNum] = 0;
 8011ad8:	4413      	add	r3, r2
      disk.nbr--;
 8011ada:	3901      	subs	r1, #1
      disk.drv[DiskNum] = 0;
 8011adc:	2000      	movs	r0, #0
      disk.nbr--;
 8011ade:	b2c9      	uxtb	r1, r1
      disk.drv[DiskNum] = 0;
 8011ae0:	f8cc 0004 	str.w	r0, [ip, #4]
      disk.lun[DiskNum] = 0;
 8011ae4:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8011ae6:	7251      	strb	r1, [r2, #9]
      ret = 0;
 8011ae8:	4770      	bx	lr
  uint8_t ret = 1;
 8011aea:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
}
 8011aec:	4770      	bx	lr
 8011aee:	bf00      	nop
 8011af0:	20003030 	.word	0x20003030

08011af4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011af4:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 8011af6:	4c0a      	ldr	r4, [pc, #40]	@ (8011b20 <SD_initialize+0x2c>)
 8011af8:	2501      	movs	r5, #1
 8011afa:	7025      	strb	r5, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011afc:	f7f5 fcd6 	bl	80074ac <BSP_SD_Init>
 8011b00:	b108      	cbz	r0, 8011b06 <SD_initialize+0x12>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8011b02:	7820      	ldrb	r0, [r4, #0]
}
 8011b04:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 8011b06:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8011b08:	f7f5 fd00 	bl	800750c <BSP_SD_GetCardState>
 8011b0c:	b918      	cbnz	r0, 8011b16 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 8011b0e:	7823      	ldrb	r3, [r4, #0]
 8011b10:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011b14:	7023      	strb	r3, [r4, #0]
  return Stat;
 8011b16:	7823      	ldrb	r3, [r4, #0]
 8011b18:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8011b1a:	7023      	strb	r3, [r4, #0]
  return Stat;
 8011b1c:	7820      	ldrb	r0, [r4, #0]
}
 8011b1e:	bd38      	pop	{r3, r4, r5, pc}
 8011b20:	200002fc 	.word	0x200002fc

08011b24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011b24:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8011b26:	4c06      	ldr	r4, [pc, #24]	@ (8011b40 <SD_status+0x1c>)
 8011b28:	2301      	movs	r3, #1
 8011b2a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8011b2c:	f7f5 fcee 	bl	800750c <BSP_SD_GetCardState>
 8011b30:	b918      	cbnz	r0, 8011b3a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8011b32:	7823      	ldrb	r3, [r4, #0]
 8011b34:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011b38:	7023      	strb	r3, [r4, #0]
  return Stat;
 8011b3a:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8011b3c:	bd10      	pop	{r4, pc}
 8011b3e:	bf00      	nop
 8011b40:	200002fc 	.word	0x200002fc

08011b44 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011b44:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 8011b46:	4c16      	ldr	r4, [pc, #88]	@ (8011ba0 <SD_read+0x5c>)
{
 8011b48:	4608      	mov	r0, r1
  ReadStatus = 0;
 8011b4a:	2500      	movs	r5, #0
{
 8011b4c:	4611      	mov	r1, r2
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011b4e:	461a      	mov	r2, r3
  ReadStatus = 0;
 8011b50:	6025      	str	r5, [r4, #0]
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011b52:	f7f5 fc4b 	bl	80073ec <BSP_SD_ReadBlocks_DMA>
 8011b56:	b108      	cbz	r0, 8011b5c <SD_read+0x18>
  DRESULT res = RES_ERROR;
 8011b58:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}
    timeout = HAL_GetTick();
 8011b5c:	f7f5 fd58 	bl	8007610 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011b60:	f247 562f 	movw	r6, #29999	@ 0x752f
    timeout = HAL_GetTick();
 8011b64:	4605      	mov	r5, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011b66:	e004      	b.n	8011b72 <SD_read+0x2e>
 8011b68:	f7f5 fd52 	bl	8007610 <HAL_GetTick>
 8011b6c:	1b40      	subs	r0, r0, r5
 8011b6e:	42b0      	cmp	r0, r6
 8011b70:	d802      	bhi.n	8011b78 <SD_read+0x34>
 8011b72:	6823      	ldr	r3, [r4, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d0f7      	beq.n	8011b68 <SD_read+0x24>
    if (ReadStatus == 0)
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d0ec      	beq.n	8011b58 <SD_read+0x14>
      ReadStatus = 0;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 8011b82:	f7f5 fd45 	bl	8007610 <HAL_GetTick>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011b86:	f247 552f 	movw	r5, #29999	@ 0x752f
      timeout = HAL_GetTick();
 8011b8a:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011b8c:	f7f5 fd40 	bl	8007610 <HAL_GetTick>
 8011b90:	1b00      	subs	r0, r0, r4
 8011b92:	42a8      	cmp	r0, r5
 8011b94:	d8e0      	bhi.n	8011b58 <SD_read+0x14>
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011b96:	f7f5 fcb9 	bl	800750c <BSP_SD_GetCardState>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	d1f6      	bne.n	8011b8c <SD_read+0x48>
}
 8011b9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ba0:	2000303c 	.word	0x2000303c

08011ba4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011ba4:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 8011ba6:	4c16      	ldr	r4, [pc, #88]	@ (8011c00 <SD_write+0x5c>)
{
 8011ba8:	4608      	mov	r0, r1
  WriteStatus = 0;
 8011baa:	2500      	movs	r5, #0
{
 8011bac:	4611      	mov	r1, r2
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011bae:	461a      	mov	r2, r3
  WriteStatus = 0;
 8011bb0:	6065      	str	r5, [r4, #4]
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011bb2:	f7f5 fc29 	bl	8007408 <BSP_SD_WriteBlocks_DMA>
 8011bb6:	b108      	cbz	r0, 8011bbc <SD_write+0x18>
  DRESULT res = RES_ERROR;
 8011bb8:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 8011bba:	bd70      	pop	{r4, r5, r6, pc}
    timeout = HAL_GetTick();
 8011bbc:	f7f5 fd28 	bl	8007610 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011bc0:	f247 562f 	movw	r6, #29999	@ 0x752f
    timeout = HAL_GetTick();
 8011bc4:	4605      	mov	r5, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011bc6:	e004      	b.n	8011bd2 <SD_write+0x2e>
 8011bc8:	f7f5 fd22 	bl	8007610 <HAL_GetTick>
 8011bcc:	1b40      	subs	r0, r0, r5
 8011bce:	42b0      	cmp	r0, r6
 8011bd0:	d802      	bhi.n	8011bd8 <SD_write+0x34>
 8011bd2:	6863      	ldr	r3, [r4, #4]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d0f7      	beq.n	8011bc8 <SD_write+0x24>
    if (WriteStatus == 0)
 8011bd8:	6863      	ldr	r3, [r4, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d0ec      	beq.n	8011bb8 <SD_write+0x14>
      WriteStatus = 0;
 8011bde:	2300      	movs	r3, #0
 8011be0:	6063      	str	r3, [r4, #4]
      timeout = HAL_GetTick();
 8011be2:	f7f5 fd15 	bl	8007610 <HAL_GetTick>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011be6:	f247 552f 	movw	r5, #29999	@ 0x752f
      timeout = HAL_GetTick();
 8011bea:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011bec:	f7f5 fd10 	bl	8007610 <HAL_GetTick>
 8011bf0:	1b00      	subs	r0, r0, r4
 8011bf2:	42a8      	cmp	r0, r5
 8011bf4:	d8e0      	bhi.n	8011bb8 <SD_write+0x14>
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011bf6:	f7f5 fc89 	bl	800750c <BSP_SD_GetCardState>
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	d1f6      	bne.n	8011bec <SD_write+0x48>
}
 8011bfe:	bd70      	pop	{r4, r5, r6, pc}
 8011c00:	2000303c 	.word	0x2000303c

08011c04 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011c04:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011c06:	4b16      	ldr	r3, [pc, #88]	@ (8011c60 <SD_ioctl+0x5c>)
 8011c08:	7818      	ldrb	r0, [r3, #0]
 8011c0a:	f010 0401 	ands.w	r4, r0, #1
{
 8011c0e:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011c10:	d106      	bne.n	8011c20 <SD_ioctl+0x1c>
 8011c12:	4615      	mov	r5, r2

  switch (cmd)
 8011c14:	2903      	cmp	r1, #3
 8011c16:	d820      	bhi.n	8011c5a <SD_ioctl+0x56>
 8011c18:	e8df f001 	tbb	[pc, r1]
 8011c1c:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011c20:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8011c22:	4620      	mov	r0, r4
 8011c24:	b00b      	add	sp, #44	@ 0x2c
 8011c26:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8011c28:	a801      	add	r0, sp, #4
 8011c2a:	f7f5 fc79 	bl	8007520 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011c2e:	9b08      	ldr	r3, [sp, #32]
}
 8011c30:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011c32:	0a5b      	lsrs	r3, r3, #9
 8011c34:	602b      	str	r3, [r5, #0]
}
 8011c36:	b00b      	add	sp, #44	@ 0x2c
 8011c38:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8011c3a:	a801      	add	r0, sp, #4
 8011c3c:	f7f5 fc70 	bl	8007520 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011c40:	9b07      	ldr	r3, [sp, #28]
 8011c42:	602b      	str	r3, [r5, #0]
}
 8011c44:	4620      	mov	r0, r4
 8011c46:	b00b      	add	sp, #44	@ 0x2c
 8011c48:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8011c4a:	a801      	add	r0, sp, #4
 8011c4c:	f7f5 fc68 	bl	8007520 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011c50:	9b08      	ldr	r3, [sp, #32]
 8011c52:	802b      	strh	r3, [r5, #0]
}
 8011c54:	4620      	mov	r0, r4
 8011c56:	b00b      	add	sp, #44	@ 0x2c
 8011c58:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8011c5a:	2404      	movs	r4, #4
 8011c5c:	e7e1      	b.n	8011c22 <SD_ioctl+0x1e>
 8011c5e:	bf00      	nop
 8011c60:	200002fc 	.word	0x200002fc

08011c64 <BSP_SD_WriteCpltCallback>:
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
  WriteStatus = 1;
 8011c64:	4b01      	ldr	r3, [pc, #4]	@ (8011c6c <BSP_SD_WriteCpltCallback+0x8>)
 8011c66:	2201      	movs	r2, #1
 8011c68:	605a      	str	r2, [r3, #4]
}
 8011c6a:	4770      	bx	lr
 8011c6c:	2000303c 	.word	0x2000303c

08011c70 <BSP_SD_ReadCpltCallback>:
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8011c70:	4b01      	ldr	r3, [pc, #4]	@ (8011c78 <BSP_SD_ReadCpltCallback+0x8>)
 8011c72:	2201      	movs	r2, #1
 8011c74:	601a      	str	r2, [r3, #0]
}
 8011c76:	4770      	bx	lr
 8011c78:	2000303c 	.word	0x2000303c

08011c7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011c7c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8011c7e:	f001 fbff 	bl	8013480 <vTaskStartScheduler>
  
  return osOK;
}
 8011c82:	2000      	movs	r0, #0
 8011c84:	bd08      	pop	{r3, pc}
 8011c86:	bf00      	nop

08011c88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011c88:	b510      	push	{r4, lr}
 8011c8a:	4684      	mov	ip, r0
 8011c8c:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011c8e:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 8011c92:	f8dc 1000 	ldr.w	r1, [ip]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011c96:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011c9a:	6840      	ldr	r0, [r0, #4]
{
 8011c9c:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 8011c9e:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8011ca2:	bf14      	ite	ne
 8011ca4:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011ca8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011caa:	9400      	str	r4, [sp, #0]
 8011cac:	ac03      	add	r4, sp, #12
 8011cae:	9401      	str	r4, [sp, #4]
 8011cb0:	f001 faaa 	bl	8013208 <xTaskCreate>
 8011cb4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011cb6:	bf0c      	ite	eq
 8011cb8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8011cba:	2000      	movne	r0, #0
}
 8011cbc:	b004      	add	sp, #16
 8011cbe:	bd10      	pop	{r4, pc}

08011cc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011cc0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011cc2:	2801      	cmp	r0, #1
 8011cc4:	bf38      	it	cc
 8011cc6:	2001      	movcc	r0, #1
 8011cc8:	f001 fba6 	bl	8013418 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011ccc:	2000      	movs	r0, #0
 8011cce:	bd08      	pop	{r3, pc}

08011cd0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8011cd0:	b500      	push	{lr}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 8011cd6:	6802      	ldr	r2, [r0, #0]
 8011cd8:	9200      	str	r2, [sp, #0]
 8011cda:	f1a1 0201 	sub.w	r2, r1, #1
 8011cde:	fab2 f282 	clz	r2, r2
 8011ce2:	0952      	lsrs	r2, r2, #5
 8011ce4:	2101      	movs	r1, #1
 8011ce6:	4803      	ldr	r0, [pc, #12]	@ (8011cf4 <osTimerCreate+0x24>)
 8011ce8:	f002 f912 	bl	8013f10 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 8011cec:	b003      	add	sp, #12
 8011cee:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cf2:	bf00      	nop
 8011cf4:	0801749c 	.word	0x0801749c

08011cf8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8011cf8:	b510      	push	{r4, lr}
 8011cfa:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8011cfc:	2400      	movs	r4, #0
 8011cfe:	2901      	cmp	r1, #1
 8011d00:	460a      	mov	r2, r1
 8011d02:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8011d04:	bf38      	it	cc
 8011d06:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d08:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8011d0c:	b14b      	cbz	r3, 8011d22 <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8011d0e:	9400      	str	r4, [sp, #0]
 8011d10:	ab03      	add	r3, sp, #12
 8011d12:	2109      	movs	r1, #9
 8011d14:	f002 f954 	bl	8013fc0 <xTimerGenericCommand>
 8011d18:	2801      	cmp	r0, #1
 8011d1a:	d00b      	beq.n	8011d34 <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 8011d1c:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 8011d1e:	b004      	add	sp, #16
 8011d20:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	2104      	movs	r1, #4
 8011d26:	f002 f94b 	bl	8013fc0 <xTimerGenericCommand>
 8011d2a:	2801      	cmp	r0, #1
 8011d2c:	d1f6      	bne.n	8011d1c <osTimerStart+0x24>
  osStatus result = osOK;
 8011d2e:	2000      	movs	r0, #0
}
 8011d30:	b004      	add	sp, #16
 8011d32:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8011d34:	9b03      	ldr	r3, [sp, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d0f9      	beq.n	8011d2e <osTimerStart+0x36>
 8011d3a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d42:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011d46:	f3bf 8f4f 	dsb	sy
 8011d4a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8011d4e:	2000      	movs	r0, #0
  return result;
 8011d50:	e7ee      	b.n	8011d30 <osTimerStart+0x38>
 8011d52:	bf00      	nop

08011d54 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8011d54:	b500      	push	{lr}
 8011d56:	b085      	sub	sp, #20
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8011d58:	2200      	movs	r2, #0
 8011d5a:	9203      	str	r2, [sp, #12]
 8011d5c:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 8011d60:	b1b3      	cbz	r3, 8011d90 <osTimerStop+0x3c>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8011d62:	9200      	str	r2, [sp, #0]
 8011d64:	ab03      	add	r3, sp, #12
 8011d66:	2108      	movs	r1, #8
 8011d68:	f002 f92a 	bl	8013fc0 <xTimerGenericCommand>
 8011d6c:	2801      	cmp	r0, #1
 8011d6e:	d116      	bne.n	8011d9e <osTimerStop+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011d70:	9b03      	ldr	r3, [sp, #12]
 8011d72:	b14b      	cbz	r3, 8011d88 <osTimerStop+0x34>
 8011d74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011d80:	f3bf 8f4f 	dsb	sy
 8011d84:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8011d88:	2000      	movs	r0, #0
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 8011d8a:	b005      	add	sp, #20
 8011d8c:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	461a      	mov	r2, r3
 8011d94:	2103      	movs	r1, #3
 8011d96:	f002 f913 	bl	8013fc0 <xTimerGenericCommand>
 8011d9a:	2801      	cmp	r0, #1
 8011d9c:	d0f4      	beq.n	8011d88 <osTimerStop+0x34>
      return osErrorOS;
 8011d9e:	20ff      	movs	r0, #255	@ 0xff
}
 8011da0:	b005      	add	sp, #20
 8011da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011da6:	bf00      	nop

08011da8 <osTimerDelete>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerDelete (osTimerId timer_id)
{
 8011da8:	b510      	push	{r4, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	f3ef 8405 	mrs	r4, IPSR
osStatus result = osOK;

#if (configUSE_TIMERS == 1)

   if (inHandlerMode()) {
 8011db0:	b96c      	cbnz	r4, 8011dce <osTimerDelete+0x26>
     return osErrorISR;
  }
  else { 
    if ((xTimerDelete(timer_id, osWaitForever )) != pdPASS) {
 8011db2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011db6:	4623      	mov	r3, r4
 8011db8:	4622      	mov	r2, r4
 8011dba:	9100      	str	r1, [sp, #0]
 8011dbc:	2105      	movs	r1, #5
 8011dbe:	f002 f8ff 	bl	8013fc0 <xTimerGenericCommand>
      result = osErrorOS;
 8011dc2:	2801      	cmp	r0, #1
 8011dc4:	bf18      	it	ne
 8011dc6:	24ff      	movne	r4, #255	@ 0xff
#else 
  result = osErrorOS;
#endif 
 
  return result;
}
 8011dc8:	4620      	mov	r0, r4
 8011dca:	b002      	add	sp, #8
 8011dcc:	bd10      	pop	{r4, pc}
     return osErrorISR;
 8011dce:	2482      	movs	r4, #130	@ 0x82
}
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	b002      	add	sp, #8
 8011dd4:	bd10      	pop	{r4, pc}
 8011dd6:	bf00      	nop

08011dd8 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8011dd8:	2901      	cmp	r1, #1
{ 
 8011dda:	4608      	mov	r0, r1
  if (count == 1) {
 8011ddc:	d001      	beq.n	8011de2 <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8011dde:	f000 ba21 	b.w	8012224 <xQueueCreateCountingSemaphore>
{ 
 8011de2:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 8011de4:	2203      	movs	r2, #3
 8011de6:	2100      	movs	r1, #0
 8011de8:	f000 f9dc 	bl	80121a4 <xQueueGenericCreate>
 8011dec:	4604      	mov	r4, r0
 8011dee:	b120      	cbz	r0, 8011dfa <osSemaphoreCreate+0x22>
 8011df0:	2300      	movs	r3, #0
 8011df2:	461a      	mov	r2, r3
 8011df4:	4619      	mov	r1, r3
 8011df6:	f000 fa59 	bl	80122ac <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	bd10      	pop	{r4, pc}
 8011dfe:	bf00      	nop

08011e00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011e00:	b500      	push	{lr}
 8011e02:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011e04:	2300      	movs	r3, #0
 8011e06:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8011e08:	b310      	cbz	r0, 8011e50 <osSemaphoreWait+0x50>
 8011e0a:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8011e0e:	b1aa      	cbz	r2, 8011e3c <osSemaphoreWait+0x3c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011e10:	aa01      	add	r2, sp, #4
 8011e12:	4619      	mov	r1, r3
 8011e14:	f000 ff94 	bl	8012d40 <xQueueReceiveFromISR>
 8011e18:	2801      	cmp	r0, #1
 8011e1a:	d115      	bne.n	8011e48 <osSemaphoreWait+0x48>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011e1c:	9b01      	ldr	r3, [sp, #4]
 8011e1e:	b18b      	cbz	r3, 8011e44 <osSemaphoreWait+0x44>
 8011e20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e28:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011e2c:	f3bf 8f4f 	dsb	sy
 8011e30:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8011e34:	2000      	movs	r0, #0
}
 8011e36:	b003      	add	sp, #12
 8011e38:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011e3c:	f000 fdf4 	bl	8012a28 <xQueueSemaphoreTake>
 8011e40:	2801      	cmp	r0, #1
 8011e42:	d101      	bne.n	8011e48 <osSemaphoreWait+0x48>
  return osOK;
 8011e44:	2000      	movs	r0, #0
 8011e46:	e7f6      	b.n	8011e36 <osSemaphoreWait+0x36>
      return osErrorOS;
 8011e48:	20ff      	movs	r0, #255	@ 0xff
}
 8011e4a:	b003      	add	sp, #12
 8011e4c:	f85d fb04 	ldr.w	pc, [sp], #4
    return osErrorParameter;
 8011e50:	2080      	movs	r0, #128	@ 0x80
}
 8011e52:	b003      	add	sp, #12
 8011e54:	f85d fb04 	ldr.w	pc, [sp], #4

08011e58 <osSemaphoreRelease>:
* @brief Release a Semaphore token
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
 8011e58:	b500      	push	{lr}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	9301      	str	r3, [sp, #4]
 8011e60:	f3ef 8305 	mrs	r3, IPSR
 8011e64:	b1a3      	cbz	r3, 8011e90 <osSemaphoreRelease+0x38>
 8011e66:	a901      	add	r1, sp, #4
 8011e68:	f000 fc02 	bl	8012670 <xQueueGiveFromISR>
 8011e6c:	2801      	cmp	r0, #1
 8011e6e:	d115      	bne.n	8011e9c <osSemaphoreRelease+0x44>
 8011e70:	9b01      	ldr	r3, [sp, #4]
 8011e72:	b14b      	cbz	r3, 8011e88 <osSemaphoreRelease+0x30>
 8011e74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011e80:	f3bf 8f4f 	dsb	sy
 8011e84:	f3bf 8f6f 	isb	sy
 8011e88:	2000      	movs	r0, #0
 8011e8a:	b003      	add	sp, #12
 8011e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e90:	461a      	mov	r2, r3
 8011e92:	4619      	mov	r1, r3
 8011e94:	f000 fa0a 	bl	80122ac <xQueueGenericSend>
 8011e98:	2801      	cmp	r0, #1
 8011e9a:	d0f5      	beq.n	8011e88 <osSemaphoreRelease+0x30>
 8011e9c:	20ff      	movs	r0, #255	@ 0xff
 8011e9e:	b003      	add	sp, #12
 8011ea0:	f85d fb04 	ldr.w	pc, [sp], #4

08011ea4 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ea6:	4606      	mov	r6, r0
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011ea8:	2014      	movs	r0, #20
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011eaa:	6877      	ldr	r7, [r6, #4]
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011eac:	f002 f8be 	bl	801402c <pvPortMalloc>

  
  if (thePool) {
 8011eb0:	b328      	cbz	r0, 8011efe <osPoolCreate+0x5a>
 8011eb2:	4605      	mov	r5, r0
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011eb4:	3703      	adds	r7, #3
    thePool->pool_sz = pool_def->pool_sz;
 8011eb6:	6830      	ldr	r0, [r6, #0]
 8011eb8:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8011ebc:	2400      	movs	r4, #0
    thePool->item_sz = itemSize;
 8011ebe:	e9c5 0702 	strd	r0, r7, [r5, #8]
    thePool->currentIndex = 0;
 8011ec2:	612c      	str	r4, [r5, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8011ec4:	f002 f8b2 	bl	801402c <pvPortMalloc>
 8011ec8:	6068      	str	r0, [r5, #4]
   
    if (thePool->markers) {
 8011eca:	b1a8      	cbz	r0, 8011ef8 <osPoolCreate+0x54>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011ecc:	6830      	ldr	r0, [r6, #0]
 8011ece:	fb07 f000 	mul.w	r0, r7, r0
 8011ed2:	f002 f8ab 	bl	801402c <pvPortMalloc>
 8011ed6:	6028      	str	r0, [r5, #0]
      
      if (thePool->pool) {
 8011ed8:	b158      	cbz	r0, 8011ef2 <osPoolCreate+0x4e>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011eda:	6833      	ldr	r3, [r6, #0]
 8011edc:	b13b      	cbz	r3, 8011eee <osPoolCreate+0x4a>
 8011ede:	4623      	mov	r3, r4
          thePool->markers[i] = 0;
 8011ee0:	4621      	mov	r1, r4
 8011ee2:	686a      	ldr	r2, [r5, #4]
 8011ee4:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011ee6:	6832      	ldr	r2, [r6, #0]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d8f9      	bhi.n	8011ee2 <osPoolCreate+0x3e>
  return thePool;
 
#else
  return NULL;
#endif
}
 8011eee:	4628      	mov	r0, r5
 8011ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        vPortFree(thePool->markers);
 8011ef2:	6868      	ldr	r0, [r5, #4]
 8011ef4:	f002 f946 	bl	8014184 <vPortFree>
        vPortFree(thePool);
 8011ef8:	4628      	mov	r0, r5
 8011efa:	f002 f943 	bl	8014184 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011efe:	2500      	movs	r5, #0
 8011f00:	e7f5      	b.n	8011eee <osPoolCreate+0x4a>
 8011f02:	bf00      	nop

08011f04 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f06:	4606      	mov	r6, r0
 8011f08:	f3ef 8705 	mrs	r7, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011f0c:	b38f      	cbz	r7, 8011f72 <osPoolAlloc+0x6e>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f0e:	f3ef 8711 	mrs	r7, BASEPRI
 8011f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f16:	f383 8811 	msr	BASEPRI, r3
 8011f1a:	f3bf 8f6f 	isb	sy
 8011f1e:	f3bf 8f4f 	dsb	sy
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011f22:	68b1      	ldr	r1, [r6, #8]
 8011f24:	b341      	cbz	r1, 8011f78 <osPoolAlloc+0x74>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8011f26:	6933      	ldr	r3, [r6, #16]
    
    if (pool_id->markers[index] == 0) {
 8011f28:	6875      	ldr	r5, [r6, #4]
 8011f2a:	eb03 0c01 	add.w	ip, r3, r1
 8011f2e:	e001      	b.n	8011f34 <osPoolAlloc+0x30>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011f30:	459c      	cmp	ip, r3
 8011f32:	d015      	beq.n	8011f60 <osPoolAlloc+0x5c>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8011f34:	fbb3 f2f1 	udiv	r2, r3, r1
 8011f38:	fb01 3212 	mls	r2, r1, r2, r3
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011f3c:	3301      	adds	r3, #1
    if (pool_id->markers[index] == 0) {
 8011f3e:	5cac      	ldrb	r4, [r5, r2]
 8011f40:	2c00      	cmp	r4, #0
 8011f42:	d1f5      	bne.n	8011f30 <osPoolAlloc+0x2c>
      pool_id->markers[index] = 1;
 8011f44:	2301      	movs	r3, #1
 8011f46:	54ab      	strb	r3, [r5, r2]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011f48:	68f3      	ldr	r3, [r6, #12]
 8011f4a:	6834      	ldr	r4, [r6, #0]
      pool_id->currentIndex = index;
 8011f4c:	6132      	str	r2, [r6, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011f4e:	fb03 4402 	mla	r4, r3, r2, r4
 8011f52:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 8011f56:	b143      	cbz	r3, 8011f6a <osPoolAlloc+0x66>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f58:	f387 8811 	msr	BASEPRI, r7
  else {
    vPortExitCritical();
  }
  
  return p;
}
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void *p = NULL;
 8011f60:	2400      	movs	r4, #0
 8011f62:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d1f6      	bne.n	8011f58 <osPoolAlloc+0x54>
    vPortExitCritical();
 8011f6a:	f002 f9ed 	bl	8014348 <vPortExitCritical>
}
 8011f6e:	4620      	mov	r0, r4
 8011f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    vPortEnterCritical();
 8011f72:	f002 f9c7 	bl	8014304 <vPortEnterCritical>
 8011f76:	e7d4      	b.n	8011f22 <osPoolAlloc+0x1e>
  void *p = NULL;
 8011f78:	460c      	mov	r4, r1
 8011f7a:	e7ea      	b.n	8011f52 <osPoolAlloc+0x4e>

08011f7c <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	b180      	cbz	r0, 8011fa2 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 8011f80:	b179      	cbz	r1, 8011fa2 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8011f82:	6802      	ldr	r2, [r0, #0]
 8011f84:	428a      	cmp	r2, r1
 8011f86:	d80c      	bhi.n	8011fa2 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8011f88:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8011f8a:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 8011f8c:	fbb1 f2f0 	udiv	r2, r1, r0
 8011f90:	fb00 1012 	mls	r0, r0, r2, r1
 8011f94:	b928      	cbnz	r0, 8011fa2 <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8011f96:	6899      	ldr	r1, [r3, #8]
 8011f98:	4291      	cmp	r1, r2
 8011f9a:	d902      	bls.n	8011fa2 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 8011fa0:	4770      	bx	lr
    return osErrorParameter;
 8011fa2:	2080      	movs	r0, #128	@ 0x80
}
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop

08011fa8 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011fa8:	e9d0 0100 	ldrd	r0, r1, [r0]
 8011fac:	2200      	movs	r2, #0
 8011fae:	f000 b8f9 	b.w	80121a4 <xQueueGenericCreate>
 8011fb2:	bf00      	nop

08011fb4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011fb4:	b510      	push	{r4, lr}
 8011fb6:	b084      	sub	sp, #16
  portBASE_TYPE taskWoken = pdFALSE;
 8011fb8:	2400      	movs	r4, #0
{
 8011fba:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011fbc:	9403      	str	r4, [sp, #12]
 8011fbe:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8011fc2:	b1ab      	cbz	r3, 8011ff0 <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011fc4:	4623      	mov	r3, r4
 8011fc6:	aa03      	add	r2, sp, #12
 8011fc8:	a901      	add	r1, sp, #4
 8011fca:	f000 faef 	bl	80125ac <xQueueGenericSendFromISR>
 8011fce:	2801      	cmp	r0, #1
 8011fd0:	d116      	bne.n	8012000 <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011fd2:	9b03      	ldr	r3, [sp, #12]
 8011fd4:	b14b      	cbz	r3, 8011fea <osMessagePut+0x36>
 8011fd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fde:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011fe2:	f3bf 8f4f 	dsb	sy
 8011fe6:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8011fea:	2000      	movs	r0, #0
}
 8011fec:	b004      	add	sp, #16
 8011fee:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011ff0:	2a01      	cmp	r2, #1
 8011ff2:	bf38      	it	cc
 8011ff4:	2201      	movcc	r2, #1
 8011ff6:	a901      	add	r1, sp, #4
 8011ff8:	f000 f958 	bl	80122ac <xQueueGenericSend>
 8011ffc:	2801      	cmp	r0, #1
 8011ffe:	d0f4      	beq.n	8011fea <osMessagePut+0x36>
      return osErrorOS;
 8012000:	20ff      	movs	r0, #255	@ 0xff
}
 8012002:	b004      	add	sp, #16
 8012004:	bd10      	pop	{r4, pc}
 8012006:	bf00      	nop

08012008 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012008:	b530      	push	{r4, r5, lr}
 801200a:	460b      	mov	r3, r1
 801200c:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 801200e:	2100      	movs	r1, #0
 8012010:	e9cd 1302 	strd	r1, r3, [sp, #8]
{
 8012014:	4604      	mov	r4, r0
  
  if (queue_id == NULL) {
 8012016:	b38b      	cbz	r3, 801207c <osMessageGet+0x74>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8012018:	9100      	str	r1, [sp, #0]
 801201a:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801201e:	b999      	cbnz	r1, 8012048 <osMessageGet+0x40>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012020:	a902      	add	r1, sp, #8
 8012022:	4618      	mov	r0, r3
 8012024:	4615      	mov	r5, r2
 8012026:	f000 fb79 	bl	801271c <xQueueReceive>
 801202a:	2801      	cmp	r0, #1
 801202c:	d029      	beq.n	8012082 <osMessageGet+0x7a>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801202e:	1e2a      	subs	r2, r5, #0
 8012030:	bf18      	it	ne
 8012032:	2201      	movne	r2, #1
 8012034:	0192      	lsls	r2, r2, #6
 8012036:	9201      	str	r2, [sp, #4]
    return event;
 8012038:	ab04      	add	r3, sp, #16
 801203a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801203e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
  }
  
  return event;
}
 8012042:	4620      	mov	r0, r4
 8012044:	b005      	add	sp, #20
 8012046:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012048:	4618      	mov	r0, r3
 801204a:	466a      	mov	r2, sp
 801204c:	a902      	add	r1, sp, #8
 801204e:	f000 fe77 	bl	8012d40 <xQueueReceiveFromISR>
 8012052:	f1a0 0001 	sub.w	r0, r0, #1
 8012056:	fab0 f080 	clz	r0, r0
 801205a:	0940      	lsrs	r0, r0, #5
    portEND_SWITCHING_ISR(taskWoken);
 801205c:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801205e:	0100      	lsls	r0, r0, #4
 8012060:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8012062:	2b00      	cmp	r3, #0
 8012064:	d0e8      	beq.n	8012038 <osMessageGet+0x30>
 8012066:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801206a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801206e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012072:	f3bf 8f4f 	dsb	sy
 8012076:	f3bf 8f6f 	isb	sy
 801207a:	e7dd      	b.n	8012038 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801207c:	2380      	movs	r3, #128	@ 0x80
 801207e:	9301      	str	r3, [sp, #4]
    return event;
 8012080:	e7da      	b.n	8012038 <osMessageGet+0x30>
      event.status = osEventMessage;
 8012082:	2310      	movs	r3, #16
 8012084:	9301      	str	r3, [sp, #4]
 8012086:	e7d7      	b.n	8012038 <osMessageGet+0x30>

08012088 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8012088:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 801208a:	f001 fc77 	bl	801397c <xTaskGetSchedulerState>
 801208e:	2801      	cmp	r0, #1
 8012090:	d100      	bne.n	8012094 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8012092:	bd08      	pop	{r3, pc}
 8012094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8012098:	f002 b99c 	b.w	80143d4 <xPortSysTickHandler>

0801209c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801209c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80120a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80120a4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80120a6:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80120ae:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop

080120b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80120b4:	2300      	movs	r3, #0
 80120b6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop

080120bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80120bc:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80120be:	6803      	ldr	r3, [r0, #0]
{
 80120c0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80120c2:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 80120c4:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80120c6:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80120ca:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80120cc:	6091      	str	r1, [r2, #8]
}
 80120ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80120d2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80120d4:	6003      	str	r3, [r0, #0]
}
 80120d6:	4770      	bx	lr

080120d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80120d8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80120da:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80120dc:	1c6b      	adds	r3, r5, #1
 80120de:	d010      	beq.n	8012102 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80120e0:	f100 0308 	add.w	r3, r0, #8
 80120e4:	461c      	mov	r4, r3
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	42aa      	cmp	r2, r5
 80120ec:	d9fa      	bls.n	80120e4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80120ee:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80120f0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80120f2:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80120f4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80120f6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80120f8:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80120fa:	6108      	str	r0, [r1, #16]
}
 80120fc:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80120fe:	6002      	str	r2, [r0, #0]
}
 8012100:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8012102:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8012104:	6863      	ldr	r3, [r4, #4]
 8012106:	e7f2      	b.n	80120ee <vListInsert+0x16>

08012108 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012108:	6903      	ldr	r3, [r0, #16]
{
 801210a:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801210c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012110:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012112:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8012114:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012116:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012118:	bf08      	it	eq
 801211a:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 801211c:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 801211e:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8012122:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8012124:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8012126:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8012128:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 801212a:	6818      	ldr	r0, [r3, #0]
}
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop

08012130 <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012130:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8012132:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012134:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8012136:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012138:	b92b      	cbnz	r3, 8012146 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801213a:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801213c:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801213e:	b35e      	cbz	r6, 8012198 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 8012140:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012142:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8012144:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8012146:	4616      	mov	r6, r2
 8012148:	b982      	cbnz	r2, 801216c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801214a:	461a      	mov	r2, r3
 801214c:	6840      	ldr	r0, [r0, #4]
 801214e:	f003 f830 	bl	80151b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012152:	6863      	ldr	r3, [r4, #4]
 8012154:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012156:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012158:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801215a:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801215c:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801215e:	bf24      	itt	cs
 8012160:	6823      	ldrcs	r3, [r4, #0]
 8012162:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012164:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8012166:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012168:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 801216a:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801216c:	461a      	mov	r2, r3
 801216e:	68c0      	ldr	r0, [r0, #12]
 8012170:	f003 f81f 	bl	80151b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012174:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012176:	68e3      	ldr	r3, [r4, #12]
 8012178:	4251      	negs	r1, r2
 801217a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801217c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801217e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012180:	4293      	cmp	r3, r2
 8012182:	d202      	bcs.n	801218a <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012184:	68a3      	ldr	r3, [r4, #8]
 8012186:	440b      	add	r3, r1
 8012188:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801218a:	2e02      	cmp	r6, #2
 801218c:	d1ea      	bne.n	8012164 <prvCopyDataToQueue+0x34>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801218e:	2d01      	cmp	r5, #1
 8012190:	bf38      	it	cc
 8012192:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 8012194:	2000      	movs	r0, #0
 8012196:	e7d4      	b.n	8012142 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012198:	6880      	ldr	r0, [r0, #8]
 801219a:	f001 fc4f 	bl	8013a3c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801219e:	60a6      	str	r6, [r4, #8]
 80121a0:	e7cf      	b.n	8012142 <prvCopyDataToQueue+0x12>
 80121a2:	bf00      	nop

080121a4 <xQueueGenericCreate>:
	{
 80121a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121a6:	b940      	cbnz	r0, 80121ba <xQueueGenericCreate+0x16>
	__asm volatile
 80121a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121ac:	f383 8811 	msr	BASEPRI, r3
 80121b0:	f3bf 8f6f 	isb	sy
 80121b4:	f3bf 8f4f 	dsb	sy
 80121b8:	e7fe      	b.n	80121b8 <xQueueGenericCreate+0x14>
 80121ba:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121bc:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80121c0:	3050      	adds	r0, #80	@ 0x50
 80121c2:	460e      	mov	r6, r1
 80121c4:	4617      	mov	r7, r2
 80121c6:	f001 ff31 	bl	801402c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80121ca:	4604      	mov	r4, r0
 80121cc:	b328      	cbz	r0, 801221a <xQueueGenericCreate+0x76>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80121ce:	b336      	cbz	r6, 801221e <xQueueGenericCreate+0x7a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121d0:	f100 0350 	add.w	r3, r0, #80	@ 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80121d4:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80121d6:	e9c4 560f 	strd	r5, r6, [r4, #60]	@ 0x3c
	taskENTER_CRITICAL();
 80121da:	f002 f893 	bl	8014304 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121de:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 80121e2:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80121e4:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121e6:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121ea:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121ec:	440a      	add	r2, r1
 80121ee:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80121f0:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121f2:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80121f4:	63a2      	str	r2, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80121f6:	22ff      	movs	r2, #255	@ 0xff
 80121f8:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121fc:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80121fe:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012202:	f104 0010 	add.w	r0, r4, #16
 8012206:	f7ff ff49 	bl	801209c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801220a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801220e:	f7ff ff45 	bl	801209c <vListInitialise>
	taskEXIT_CRITICAL();
 8012212:	f002 f899 	bl	8014348 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8012216:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 801221a:	4620      	mov	r0, r4
 801221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801221e:	4603      	mov	r3, r0
 8012220:	e7d8      	b.n	80121d4 <xQueueGenericCreate+0x30>
 8012222:	bf00      	nop

08012224 <xQueueCreateCountingSemaphore>:
	{
 8012224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
 8012226:	b940      	cbnz	r0, 801223a <xQueueCreateCountingSemaphore+0x16>
 8012228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801222c:	f383 8811 	msr	BASEPRI, r3
 8012230:	f3bf 8f6f 	isb	sy
 8012234:	f3bf 8f4f 	dsb	sy
 8012238:	e7fe      	b.n	8012238 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 801223a:	4288      	cmp	r0, r1
 801223c:	460e      	mov	r6, r1
 801223e:	4604      	mov	r4, r0
 8012240:	d208      	bcs.n	8012254 <xQueueCreateCountingSemaphore+0x30>
 8012242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012246:	f383 8811 	msr	BASEPRI, r3
 801224a:	f3bf 8f6f 	isb	sy
 801224e:	f3bf 8f4f 	dsb	sy
 8012252:	e7fe      	b.n	8012252 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012254:	2050      	movs	r0, #80	@ 0x50
 8012256:	f001 fee9 	bl	801402c <pvPortMalloc>
		if( pxNewQueue != NULL )
 801225a:	4605      	mov	r5, r0
 801225c:	b320      	cbz	r0, 80122a8 <xQueueCreateCountingSemaphore+0x84>
	pxNewQueue->uxItemSize = uxItemSize;
 801225e:	2700      	movs	r7, #0
 8012260:	e9c0 470f 	strd	r4, r7, [r0, #60]	@ 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012264:	6000      	str	r0, [r0, #0]
	taskENTER_CRITICAL();
 8012266:	f002 f84d 	bl	8014304 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801226a:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	@ 0x3c
 801226e:	682a      	ldr	r2, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012270:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012272:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012276:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012278:	4413      	add	r3, r2
 801227a:	60ab      	str	r3, [r5, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801227c:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 801227e:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012280:	63af      	str	r7, [r5, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012282:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012284:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012288:	f105 0010 	add.w	r0, r5, #16
		pxQueue->cTxLock = queueUNLOCKED;
 801228c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012290:	f7ff ff04 	bl	801209c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012294:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8012298:	f7ff ff00 	bl	801209c <vListInitialise>
	taskEXIT_CRITICAL();
 801229c:	f002 f854 	bl	8014348 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 80122a0:	2302      	movs	r3, #2
 80122a2:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80122a6:	63ae      	str	r6, [r5, #56]	@ 0x38
	}
 80122a8:	4628      	mov	r0, r5
 80122aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080122ac <xQueueGenericSend>:
{
 80122ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122b0:	b085      	sub	sp, #20
 80122b2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80122b4:	2800      	cmp	r0, #0
 80122b6:	d043      	beq.n	8012340 <xQueueGenericSend+0x94>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122b8:	4688      	mov	r8, r1
 80122ba:	461f      	mov	r7, r3
 80122bc:	4604      	mov	r4, r0
 80122be:	b399      	cbz	r1, 8012328 <xQueueGenericSend+0x7c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80122c0:	2f02      	cmp	r7, #2
 80122c2:	d10b      	bne.n	80122dc <xQueueGenericSend+0x30>
 80122c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d008      	beq.n	80122dc <xQueueGenericSend+0x30>
 80122ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ce:	f383 8811 	msr	BASEPRI, r3
 80122d2:	f3bf 8f6f 	isb	sy
 80122d6:	f3bf 8f4f 	dsb	sy
 80122da:	e7fe      	b.n	80122da <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122dc:	f001 fb4e 	bl	801397c <xTaskGetSchedulerState>
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d036      	beq.n	8012352 <xQueueGenericSend+0xa6>
		taskENTER_CRITICAL();
 80122e4:	f002 f80e 	bl	8014304 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80122e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80122ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d301      	bcc.n	80122f4 <xQueueGenericSend+0x48>
 80122f0:	2f02      	cmp	r7, #2
 80122f2:	d13a      	bne.n	801236a <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80122f4:	463a      	mov	r2, r7
 80122f6:	4641      	mov	r1, r8
 80122f8:	4620      	mov	r0, r4
 80122fa:	f7ff ff19 	bl	8012130 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80122fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012300:	2b00      	cmp	r3, #0
 8012302:	f040 814b 	bne.w	801259c <xQueueGenericSend+0x2f0>
					else if( xYieldRequired != pdFALSE )
 8012306:	b148      	cbz	r0, 801231c <xQueueGenericSend+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 8012308:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801230c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012310:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012314:	f3bf 8f4f 	dsb	sy
 8012318:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801231c:	f002 f814 	bl	8014348 <vPortExitCritical>
				return pdPASS;
 8012320:	2001      	movs	r0, #1
}
 8012322:	b005      	add	sp, #20
 8012324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012328:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801232a:	2b00      	cmp	r3, #0
 801232c:	d0c8      	beq.n	80122c0 <xQueueGenericSend+0x14>
 801232e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012332:	f383 8811 	msr	BASEPRI, r3
 8012336:	f3bf 8f6f 	isb	sy
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	e7fe      	b.n	801233e <xQueueGenericSend+0x92>
 8012340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012344:	f383 8811 	msr	BASEPRI, r3
 8012348:	f3bf 8f6f 	isb	sy
 801234c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8012350:	e7fe      	b.n	8012350 <xQueueGenericSend+0xa4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012352:	9b01      	ldr	r3, [sp, #4]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d0c5      	beq.n	80122e4 <xQueueGenericSend+0x38>
 8012358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801235c:	f383 8811 	msr	BASEPRI, r3
 8012360:	f3bf 8f6f 	isb	sy
 8012364:	f3bf 8f4f 	dsb	sy
 8012368:	e7fe      	b.n	8012368 <xQueueGenericSend+0xbc>
 801236a:	2200      	movs	r2, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801236c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
				if( xTicksToWait == ( TickType_t ) 0 )
 8012370:	9b01      	ldr	r3, [sp, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	f000 80d1 	beq.w	801251a <xQueueGenericSend+0x26e>
				else if( xEntryTimeSet == pdFALSE )
 8012378:	2a00      	cmp	r2, #0
 801237a:	f000 80ca 	beq.w	8012512 <xQueueGenericSend+0x266>
		taskEXIT_CRITICAL();
 801237e:	f001 ffe3 	bl	8014348 <vPortExitCritical>
		vTaskSuspendAll();
 8012382:	f001 f95d 	bl	8013640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012386:	f001 ffbd 	bl	8014304 <vPortEnterCritical>
 801238a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801238e:	2bff      	cmp	r3, #255	@ 0xff
 8012390:	bf04      	itt	eq
 8012392:	2300      	moveq	r3, #0
 8012394:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8012398:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801239c:	2bff      	cmp	r3, #255	@ 0xff
 801239e:	bf04      	itt	eq
 80123a0:	2300      	moveq	r3, #0
 80123a2:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80123a6:	f001 ffcf 	bl	8014348 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123aa:	a901      	add	r1, sp, #4
 80123ac:	a802      	add	r0, sp, #8
 80123ae:	f001 fa9d 	bl	80138ec <xTaskCheckForTimeOut>
 80123b2:	2800      	cmp	r0, #0
 80123b4:	f040 80b5 	bne.w	8012522 <xQueueGenericSend+0x276>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80123b8:	f001 ffa4 	bl	8014304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80123bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80123be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d04c      	beq.n	801245e <xQueueGenericSend+0x1b2>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80123c4:	f001 ffc0 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 80123c8:	f001 ff9c 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80123cc:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80123d0:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123d2:	2d00      	cmp	r5, #0
 80123d4:	dc04      	bgt.n	80123e0 <xQueueGenericSend+0x134>
 80123d6:	e011      	b.n	80123fc <xQueueGenericSend+0x150>
			--cTxLock;
 80123d8:	1e6a      	subs	r2, r5, #1
 80123da:	b2d3      	uxtb	r3, r2
 80123dc:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123de:	b16b      	cbz	r3, 80123fc <xQueueGenericSend+0x150>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123e2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123e4:	b153      	cbz	r3, 80123fc <xQueueGenericSend+0x150>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123e6:	f001 fa39 	bl	801385c <xTaskRemoveFromEventList>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d0f4      	beq.n	80123d8 <xQueueGenericSend+0x12c>
						vTaskMissedYield();
 80123ee:	f001 fabd 	bl	801396c <vTaskMissedYield>
			--cTxLock;
 80123f2:	1e6a      	subs	r2, r5, #1
 80123f4:	b2d3      	uxtb	r3, r2
 80123f6:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d1f1      	bne.n	80123e0 <xQueueGenericSend+0x134>
		pxQueue->cTxLock = queueUNLOCKED;
 80123fc:	23ff      	movs	r3, #255	@ 0xff
 80123fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8012402:	f001 ffa1 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012406:	f001 ff7d 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801240a:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 801240e:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012410:	2d00      	cmp	r5, #0
 8012412:	dd14      	ble.n	801243e <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012414:	f104 0910 	add.w	r9, r4, #16
 8012418:	e003      	b.n	8012422 <xQueueGenericSend+0x176>
				--cRxLock;
 801241a:	1e6a      	subs	r2, r5, #1
 801241c:	b2d3      	uxtb	r3, r2
 801241e:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012420:	b16b      	cbz	r3, 801243e <xQueueGenericSend+0x192>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012422:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012424:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012426:	b153      	cbz	r3, 801243e <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012428:	f001 fa18 	bl	801385c <xTaskRemoveFromEventList>
 801242c:	2800      	cmp	r0, #0
 801242e:	d0f4      	beq.n	801241a <xQueueGenericSend+0x16e>
					vTaskMissedYield();
 8012430:	f001 fa9c 	bl	801396c <vTaskMissedYield>
				--cRxLock;
 8012434:	1e6a      	subs	r2, r5, #1
 8012436:	b2d3      	uxtb	r3, r2
 8012438:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1f1      	bne.n	8012422 <xQueueGenericSend+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 801243e:	23ff      	movs	r3, #255	@ 0xff
 8012440:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8012444:	f001 ff80 	bl	8014348 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8012448:	f001 f904 	bl	8013654 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801244c:	f001 ff5a 	bl	8014304 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012450:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012452:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012454:	429a      	cmp	r2, r3
 8012456:	f4ff af4d 	bcc.w	80122f4 <xQueueGenericSend+0x48>
{
 801245a:	2201      	movs	r2, #1
 801245c:	e788      	b.n	8012370 <xQueueGenericSend+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801245e:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8012462:	f001 ff71 	bl	8014348 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012466:	9901      	ldr	r1, [sp, #4]
 8012468:	4648      	mov	r0, r9
 801246a:	f001 f94b 	bl	8013704 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 801246e:	f001 ff49 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012472:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012476:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012478:	2d00      	cmp	r5, #0
 801247a:	dc04      	bgt.n	8012486 <xQueueGenericSend+0x1da>
 801247c:	e011      	b.n	80124a2 <xQueueGenericSend+0x1f6>
			--cTxLock;
 801247e:	1e6b      	subs	r3, r5, #1
 8012480:	b2da      	uxtb	r2, r3
 8012482:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012484:	b16a      	cbz	r2, 80124a2 <xQueueGenericSend+0x1f6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012486:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012488:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801248a:	b153      	cbz	r3, 80124a2 <xQueueGenericSend+0x1f6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801248c:	f001 f9e6 	bl	801385c <xTaskRemoveFromEventList>
 8012490:	2800      	cmp	r0, #0
 8012492:	d0f4      	beq.n	801247e <xQueueGenericSend+0x1d2>
						vTaskMissedYield();
 8012494:	f001 fa6a 	bl	801396c <vTaskMissedYield>
			--cTxLock;
 8012498:	1e6b      	subs	r3, r5, #1
 801249a:	b2da      	uxtb	r2, r3
 801249c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801249e:	2a00      	cmp	r2, #0
 80124a0:	d1f1      	bne.n	8012486 <xQueueGenericSend+0x1da>
		pxQueue->cTxLock = queueUNLOCKED;
 80124a2:	23ff      	movs	r3, #255	@ 0xff
 80124a4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80124a8:	f001 ff4e 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 80124ac:	f001 ff2a 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80124b0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80124b4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124b6:	2d00      	cmp	r5, #0
 80124b8:	dc04      	bgt.n	80124c4 <xQueueGenericSend+0x218>
 80124ba:	e011      	b.n	80124e0 <xQueueGenericSend+0x234>
				--cRxLock;
 80124bc:	1e6b      	subs	r3, r5, #1
 80124be:	b2da      	uxtb	r2, r3
 80124c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124c2:	b16a      	cbz	r2, 80124e0 <xQueueGenericSend+0x234>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124c4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124c6:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124c8:	b153      	cbz	r3, 80124e0 <xQueueGenericSend+0x234>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124ca:	f001 f9c7 	bl	801385c <xTaskRemoveFromEventList>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	d0f4      	beq.n	80124bc <xQueueGenericSend+0x210>
					vTaskMissedYield();
 80124d2:	f001 fa4b 	bl	801396c <vTaskMissedYield>
				--cRxLock;
 80124d6:	1e6b      	subs	r3, r5, #1
 80124d8:	b2da      	uxtb	r2, r3
 80124da:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124dc:	2a00      	cmp	r2, #0
 80124de:	d1f1      	bne.n	80124c4 <xQueueGenericSend+0x218>
		pxQueue->cRxLock = queueUNLOCKED;
 80124e0:	23ff      	movs	r3, #255	@ 0xff
 80124e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80124e6:	f001 ff2f 	bl	8014348 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80124ea:	f001 f8b3 	bl	8013654 <xTaskResumeAll>
 80124ee:	b948      	cbnz	r0, 8012504 <xQueueGenericSend+0x258>
					portYIELD_WITHIN_API();
 80124f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80124f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80124fc:	f3bf 8f4f 	dsb	sy
 8012500:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8012504:	f001 fefe 	bl	8014304 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012508:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801250a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801250c:	429a      	cmp	r2, r3
 801250e:	d9a4      	bls.n	801245a <xQueueGenericSend+0x1ae>
 8012510:	e6f0      	b.n	80122f4 <xQueueGenericSend+0x48>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012512:	a802      	add	r0, sp, #8
 8012514:	f001 f9e0 	bl	80138d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012518:	e731      	b.n	801237e <xQueueGenericSend+0xd2>
					taskEXIT_CRITICAL();
 801251a:	f001 ff15 	bl	8014348 <vPortExitCritical>
					return errQUEUE_FULL;
 801251e:	2000      	movs	r0, #0
 8012520:	e6ff      	b.n	8012322 <xQueueGenericSend+0x76>
	taskENTER_CRITICAL();
 8012522:	f001 feef 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012526:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801252a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801252c:	2d00      	cmp	r5, #0
 801252e:	dd10      	ble.n	8012552 <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012530:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8012534:	e003      	b.n	801253e <xQueueGenericSend+0x292>
			--cTxLock;
 8012536:	1e6b      	subs	r3, r5, #1
 8012538:	b2da      	uxtb	r2, r3
 801253a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801253c:	b14a      	cbz	r2, 8012552 <xQueueGenericSend+0x2a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801253e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012540:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012542:	b133      	cbz	r3, 8012552 <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012544:	f001 f98a 	bl	801385c <xTaskRemoveFromEventList>
 8012548:	2800      	cmp	r0, #0
 801254a:	d0f4      	beq.n	8012536 <xQueueGenericSend+0x28a>
						vTaskMissedYield();
 801254c:	f001 fa0e 	bl	801396c <vTaskMissedYield>
 8012550:	e7f1      	b.n	8012536 <xQueueGenericSend+0x28a>
		pxQueue->cTxLock = queueUNLOCKED;
 8012552:	23ff      	movs	r3, #255	@ 0xff
 8012554:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8012558:	f001 fef6 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 801255c:	f001 fed2 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012560:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012564:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012566:	2d00      	cmp	r5, #0
 8012568:	dd10      	ble.n	801258c <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801256a:	f104 0610 	add.w	r6, r4, #16
 801256e:	e003      	b.n	8012578 <xQueueGenericSend+0x2cc>
				--cRxLock;
 8012570:	1e6b      	subs	r3, r5, #1
 8012572:	b2da      	uxtb	r2, r3
 8012574:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012576:	b14a      	cbz	r2, 801258c <xQueueGenericSend+0x2e0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012578:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801257a:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801257c:	b133      	cbz	r3, 801258c <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801257e:	f001 f96d 	bl	801385c <xTaskRemoveFromEventList>
 8012582:	2800      	cmp	r0, #0
 8012584:	d0f4      	beq.n	8012570 <xQueueGenericSend+0x2c4>
					vTaskMissedYield();
 8012586:	f001 f9f1 	bl	801396c <vTaskMissedYield>
 801258a:	e7f1      	b.n	8012570 <xQueueGenericSend+0x2c4>
		pxQueue->cRxLock = queueUNLOCKED;
 801258c:	23ff      	movs	r3, #255	@ 0xff
 801258e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8012592:	f001 fed9 	bl	8014348 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8012596:	f001 f85d 	bl	8013654 <xTaskResumeAll>
			return errQUEUE_FULL;
 801259a:	e7c0      	b.n	801251e <xQueueGenericSend+0x272>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801259c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80125a0:	f001 f95c 	bl	801385c <xTaskRemoveFromEventList>
 80125a4:	2800      	cmp	r0, #0
 80125a6:	f43f aeb9 	beq.w	801231c <xQueueGenericSend+0x70>
 80125aa:	e6ad      	b.n	8012308 <xQueueGenericSend+0x5c>

080125ac <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d048      	beq.n	8012642 <xQueueGenericSendFromISR+0x96>
{
 80125b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b4:	460e      	mov	r6, r1
 80125b6:	4617      	mov	r7, r2
 80125b8:	461d      	mov	r5, r3
 80125ba:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125bc:	b321      	cbz	r1, 8012608 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125be:	2d02      	cmp	r5, #2
 80125c0:	d10b      	bne.n	80125da <xQueueGenericSendFromISR+0x2e>
 80125c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d008      	beq.n	80125da <xQueueGenericSendFromISR+0x2e>
 80125c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125cc:	f383 8811 	msr	BASEPRI, r3
 80125d0:	f3bf 8f6f 	isb	sy
 80125d4:	f3bf 8f4f 	dsb	sy
 80125d8:	e7fe      	b.n	80125d8 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125da:	f001 ffc1 	bl	8014560 <vPortValidateInterruptPriority>
	__asm volatile
 80125de:	f3ef 8811 	mrs	r8, BASEPRI
 80125e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125e6:	f383 8811 	msr	BASEPRI, r3
 80125ea:	f3bf 8f6f 	isb	sy
 80125ee:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80125f2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80125f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d312      	bcc.n	8012620 <xQueueGenericSendFromISR+0x74>
 80125fa:	2d02      	cmp	r5, #2
 80125fc:	d010      	beq.n	8012620 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 80125fe:	2000      	movs	r0, #0
	__asm volatile
 8012600:	f388 8811 	msr	BASEPRI, r8
}
 8012604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012608:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801260a:	2b00      	cmp	r3, #0
 801260c:	d0d7      	beq.n	80125be <xQueueGenericSendFromISR+0x12>
	__asm volatile
 801260e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	e7fe      	b.n	801261e <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012620:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8012622:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012626:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012628:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 801262a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801262c:	4620      	mov	r0, r4
 801262e:	f7ff fd7f 	bl	8012130 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8012632:	1c6b      	adds	r3, r5, #1
 8012634:	d00e      	beq.n	8012654 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012636:	1c6b      	adds	r3, r5, #1
 8012638:	b25b      	sxtb	r3, r3
 801263a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 801263e:	2001      	movs	r0, #1
 8012640:	e7de      	b.n	8012600 <xQueueGenericSendFromISR+0x54>
 8012642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012646:	f383 8811 	msr	BASEPRI, r3
 801264a:	f3bf 8f6f 	isb	sy
 801264e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8012652:	e7fe      	b.n	8012652 <xQueueGenericSendFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012654:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012656:	2b00      	cmp	r3, #0
 8012658:	d0f1      	beq.n	801263e <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801265a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801265e:	f001 f8fd 	bl	801385c <xTaskRemoveFromEventList>
 8012662:	2800      	cmp	r0, #0
 8012664:	d0eb      	beq.n	801263e <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8012666:	2f00      	cmp	r7, #0
 8012668:	d0e9      	beq.n	801263e <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801266a:	2301      	movs	r3, #1
 801266c:	603b      	str	r3, [r7, #0]
 801266e:	e7e6      	b.n	801263e <xQueueGenericSendFromISR+0x92>

08012670 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8012670:	b360      	cbz	r0, 80126cc <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8012672:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8012674:	b570      	push	{r4, r5, r6, lr}
 8012676:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8012678:	b143      	cbz	r3, 801268c <xQueueGiveFromISR+0x1c>
 801267a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801267e:	f383 8811 	msr	BASEPRI, r3
 8012682:	f3bf 8f6f 	isb	sy
 8012686:	f3bf 8f4f 	dsb	sy
 801268a:	e7fe      	b.n	801268a <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801268c:	6803      	ldr	r3, [r0, #0]
 801268e:	460d      	mov	r5, r1
 8012690:	b32b      	cbz	r3, 80126de <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012692:	f001 ff65 	bl	8014560 <vPortValidateInterruptPriority>
	__asm volatile
 8012696:	f3ef 8611 	mrs	r6, BASEPRI
 801269a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126aa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80126ac:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d921      	bls.n	80126f6 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 80126b2:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80126b6:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 80126b8:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80126ba:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 80126bc:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 80126be:	d01e      	beq.n	80126fe <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80126c0:	3301      	adds	r3, #1
 80126c2:	b25b      	sxtb	r3, r3
 80126c4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 80126c8:	2001      	movs	r0, #1
 80126ca:	e015      	b.n	80126f8 <xQueueGiveFromISR+0x88>
	__asm volatile
 80126cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126d0:	f383 8811 	msr	BASEPRI, r3
 80126d4:	f3bf 8f6f 	isb	sy
 80126d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80126dc:	e7fe      	b.n	80126dc <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80126de:	6883      	ldr	r3, [r0, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d0d6      	beq.n	8012692 <xQueueGiveFromISR+0x22>
 80126e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126e8:	f383 8811 	msr	BASEPRI, r3
 80126ec:	f3bf 8f6f 	isb	sy
 80126f0:	f3bf 8f4f 	dsb	sy
 80126f4:	e7fe      	b.n	80126f4 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80126f6:	2000      	movs	r0, #0
	__asm volatile
 80126f8:	f386 8811 	msr	BASEPRI, r6
}
 80126fc:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012700:	2b00      	cmp	r3, #0
 8012702:	d0e1      	beq.n	80126c8 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012704:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8012708:	f001 f8a8 	bl	801385c <xTaskRemoveFromEventList>
 801270c:	2800      	cmp	r0, #0
 801270e:	d0db      	beq.n	80126c8 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8012710:	2d00      	cmp	r5, #0
 8012712:	d0d9      	beq.n	80126c8 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012714:	2301      	movs	r3, #1
 8012716:	602b      	str	r3, [r5, #0]
 8012718:	e7d6      	b.n	80126c8 <xQueueGiveFromISR+0x58>
 801271a:	bf00      	nop

0801271c <xQueueReceive>:
{
 801271c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012720:	b085      	sub	sp, #20
 8012722:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8012724:	2800      	cmp	r0, #0
 8012726:	f000 8164 	beq.w	80129f2 <xQueueReceive+0x2d6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801272a:	460f      	mov	r7, r1
 801272c:	4604      	mov	r4, r0
 801272e:	2900      	cmp	r1, #0
 8012730:	f000 8097 	beq.w	8012862 <xQueueReceive+0x146>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012734:	f001 f922 	bl	801397c <xTaskGetSchedulerState>
 8012738:	2800      	cmp	r0, #0
 801273a:	f000 809f 	beq.w	801287c <xQueueReceive+0x160>
		taskENTER_CRITICAL();
 801273e:	f001 fde1 	bl	8014304 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012742:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012744:	2d00      	cmp	r5, #0
 8012746:	d175      	bne.n	8012834 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012748:	9b01      	ldr	r3, [sp, #4]
 801274a:	2b00      	cmp	r3, #0
 801274c:	f000 80f4 	beq.w	8012938 <xQueueReceive+0x21c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012750:	a802      	add	r0, sp, #8
 8012752:	f001 f8c1 	bl	80138d8 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8012756:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012758:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskEXIT_CRITICAL();
 801275c:	f001 fdf4 	bl	8014348 <vPortExitCritical>
		vTaskSuspendAll();
 8012760:	f000 ff6e 	bl	8013640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012764:	f001 fdce 	bl	8014304 <vPortEnterCritical>
 8012768:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801276c:	2bff      	cmp	r3, #255	@ 0xff
 801276e:	bf08      	it	eq
 8012770:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8012774:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012778:	2bff      	cmp	r3, #255	@ 0xff
 801277a:	bf08      	it	eq
 801277c:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8012780:	f001 fde2 	bl	8014348 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012784:	a901      	add	r1, sp, #4
 8012786:	a802      	add	r0, sp, #8
 8012788:	f001 f8b0 	bl	80138ec <xTaskCheckForTimeOut>
 801278c:	2800      	cmp	r0, #0
 801278e:	f040 8082 	bne.w	8012896 <xQueueReceive+0x17a>
	taskENTER_CRITICAL();
 8012792:	f001 fdb7 	bl	8014304 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012796:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012798:	2b00      	cmp	r3, #0
 801279a:	f000 80d3 	beq.w	8012944 <xQueueReceive+0x228>
	taskEXIT_CRITICAL();
 801279e:	f001 fdd3 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 80127a2:	f001 fdaf 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80127a6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80127aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127ac:	2d00      	cmp	r5, #0
 80127ae:	dd14      	ble.n	80127da <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127b0:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 80127b4:	e003      	b.n	80127be <xQueueReceive+0xa2>
			--cTxLock;
 80127b6:	1e6b      	subs	r3, r5, #1
 80127b8:	b2da      	uxtb	r2, r3
 80127ba:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127bc:	b16a      	cbz	r2, 80127da <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127c0:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127c2:	b153      	cbz	r3, 80127da <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127c4:	f001 f84a 	bl	801385c <xTaskRemoveFromEventList>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d0f4      	beq.n	80127b6 <xQueueReceive+0x9a>
						vTaskMissedYield();
 80127cc:	f001 f8ce 	bl	801396c <vTaskMissedYield>
			--cTxLock;
 80127d0:	1e6b      	subs	r3, r5, #1
 80127d2:	b2da      	uxtb	r2, r3
 80127d4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127d6:	2a00      	cmp	r2, #0
 80127d8:	d1f1      	bne.n	80127be <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
 80127da:	23ff      	movs	r3, #255	@ 0xff
 80127dc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80127e0:	f001 fdb2 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 80127e4:	f001 fd8e 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80127e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80127ec:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127ee:	2d00      	cmp	r5, #0
 80127f0:	dd14      	ble.n	801281c <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127f2:	f104 0910 	add.w	r9, r4, #16
 80127f6:	e003      	b.n	8012800 <xQueueReceive+0xe4>
				--cRxLock;
 80127f8:	1e6b      	subs	r3, r5, #1
 80127fa:	b2da      	uxtb	r2, r3
 80127fc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127fe:	b16a      	cbz	r2, 801281c <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012800:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012802:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012804:	b153      	cbz	r3, 801281c <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012806:	f001 f829 	bl	801385c <xTaskRemoveFromEventList>
 801280a:	2800      	cmp	r0, #0
 801280c:	d0f4      	beq.n	80127f8 <xQueueReceive+0xdc>
					vTaskMissedYield();
 801280e:	f001 f8ad 	bl	801396c <vTaskMissedYield>
				--cRxLock;
 8012812:	1e6b      	subs	r3, r5, #1
 8012814:	b2da      	uxtb	r2, r3
 8012816:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012818:	2a00      	cmp	r2, #0
 801281a:	d1f1      	bne.n	8012800 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 801281c:	23ff      	movs	r3, #255	@ 0xff
 801281e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8012822:	f001 fd91 	bl	8014348 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8012826:	f000 ff15 	bl	8013654 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801282a:	f001 fd6b 	bl	8014304 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801282e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012830:	2d00      	cmp	r5, #0
 8012832:	d07d      	beq.n	8012930 <xQueueReceive+0x214>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012834:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012836:	b152      	cbz	r2, 801284e <xQueueReceive+0x132>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012838:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801283a:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801283c:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801283e:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012840:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012842:	bf24      	itt	cs
 8012844:	6821      	ldrcs	r1, [r4, #0]
 8012846:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012848:	4638      	mov	r0, r7
 801284a:	f002 fcb2 	bl	80151b2 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801284e:	3d01      	subs	r5, #1
 8012850:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012852:	6923      	ldr	r3, [r4, #16]
 8012854:	2b00      	cmp	r3, #0
 8012856:	f040 80d5 	bne.w	8012a04 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 801285a:	f001 fd75 	bl	8014348 <vPortExitCritical>
				return pdPASS;
 801285e:	2001      	movs	r0, #1
 8012860:	e06d      	b.n	801293e <xQueueReceive+0x222>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012862:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8012864:	2b00      	cmp	r3, #0
 8012866:	f43f af65 	beq.w	8012734 <xQueueReceive+0x18>
	__asm volatile
 801286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801286e:	f383 8811 	msr	BASEPRI, r3
 8012872:	f3bf 8f6f 	isb	sy
 8012876:	f3bf 8f4f 	dsb	sy
 801287a:	e7fe      	b.n	801287a <xQueueReceive+0x15e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801287c:	9b01      	ldr	r3, [sp, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	f43f af5d 	beq.w	801273e <xQueueReceive+0x22>
 8012884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012888:	f383 8811 	msr	BASEPRI, r3
 801288c:	f3bf 8f6f 	isb	sy
 8012890:	f3bf 8f4f 	dsb	sy
 8012894:	e7fe      	b.n	8012894 <xQueueReceive+0x178>
	taskENTER_CRITICAL();
 8012896:	f001 fd35 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801289a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801289e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80128a0:	2d00      	cmp	r5, #0
 80128a2:	dc04      	bgt.n	80128ae <xQueueReceive+0x192>
 80128a4:	e011      	b.n	80128ca <xQueueReceive+0x1ae>
			--cTxLock;
 80128a6:	1e6b      	subs	r3, r5, #1
 80128a8:	b2da      	uxtb	r2, r3
 80128aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80128ac:	b16a      	cbz	r2, 80128ca <xQueueReceive+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128b0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128b2:	b153      	cbz	r3, 80128ca <xQueueReceive+0x1ae>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128b4:	f000 ffd2 	bl	801385c <xTaskRemoveFromEventList>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d0f4      	beq.n	80128a6 <xQueueReceive+0x18a>
						vTaskMissedYield();
 80128bc:	f001 f856 	bl	801396c <vTaskMissedYield>
			--cTxLock;
 80128c0:	1e6b      	subs	r3, r5, #1
 80128c2:	b2da      	uxtb	r2, r3
 80128c4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80128c6:	2a00      	cmp	r2, #0
 80128c8:	d1f1      	bne.n	80128ae <xQueueReceive+0x192>
		pxQueue->cTxLock = queueUNLOCKED;
 80128ca:	23ff      	movs	r3, #255	@ 0xff
 80128cc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80128d0:	f001 fd3a 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 80128d4:	f001 fd16 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80128d8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80128dc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80128de:	2d00      	cmp	r5, #0
 80128e0:	dd14      	ble.n	801290c <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128e2:	f104 0910 	add.w	r9, r4, #16
 80128e6:	e003      	b.n	80128f0 <xQueueReceive+0x1d4>
				--cRxLock;
 80128e8:	1e6b      	subs	r3, r5, #1
 80128ea:	b2da      	uxtb	r2, r3
 80128ec:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80128ee:	b16a      	cbz	r2, 801290c <xQueueReceive+0x1f0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128f0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128f2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128f4:	b153      	cbz	r3, 801290c <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128f6:	f000 ffb1 	bl	801385c <xTaskRemoveFromEventList>
 80128fa:	2800      	cmp	r0, #0
 80128fc:	d0f4      	beq.n	80128e8 <xQueueReceive+0x1cc>
					vTaskMissedYield();
 80128fe:	f001 f835 	bl	801396c <vTaskMissedYield>
				--cRxLock;
 8012902:	1e6b      	subs	r3, r5, #1
 8012904:	b2da      	uxtb	r2, r3
 8012906:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012908:	2a00      	cmp	r2, #0
 801290a:	d1f1      	bne.n	80128f0 <xQueueReceive+0x1d4>
		pxQueue->cRxLock = queueUNLOCKED;
 801290c:	23ff      	movs	r3, #255	@ 0xff
 801290e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8012912:	f001 fd19 	bl	8014348 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8012916:	f000 fe9d 	bl	8013654 <xTaskResumeAll>
	taskENTER_CRITICAL();
 801291a:	f001 fcf3 	bl	8014304 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801291e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012920:	b153      	cbz	r3, 8012938 <xQueueReceive+0x21c>
	taskEXIT_CRITICAL();
 8012922:	f001 fd11 	bl	8014348 <vPortExitCritical>
		taskENTER_CRITICAL();
 8012926:	f001 fced 	bl	8014304 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801292a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801292c:	2d00      	cmp	r5, #0
 801292e:	d181      	bne.n	8012834 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012930:	9b01      	ldr	r3, [sp, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	f47f af12 	bne.w	801275c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8012938:	f001 fd06 	bl	8014348 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801293c:	2000      	movs	r0, #0
}
 801293e:	b005      	add	sp, #20
 8012940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012944:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
 8012948:	f001 fcfe 	bl	8014348 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801294c:	9901      	ldr	r1, [sp, #4]
 801294e:	4648      	mov	r0, r9
 8012950:	f000 fed8 	bl	8013704 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8012954:	f001 fcd6 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012958:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801295c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801295e:	2d00      	cmp	r5, #0
 8012960:	dc04      	bgt.n	801296c <xQueueReceive+0x250>
 8012962:	e011      	b.n	8012988 <xQueueReceive+0x26c>
			--cTxLock;
 8012964:	1e6b      	subs	r3, r5, #1
 8012966:	b2da      	uxtb	r2, r3
 8012968:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801296a:	b16a      	cbz	r2, 8012988 <xQueueReceive+0x26c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801296c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801296e:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012970:	b153      	cbz	r3, 8012988 <xQueueReceive+0x26c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012972:	f000 ff73 	bl	801385c <xTaskRemoveFromEventList>
 8012976:	2800      	cmp	r0, #0
 8012978:	d0f4      	beq.n	8012964 <xQueueReceive+0x248>
						vTaskMissedYield();
 801297a:	f000 fff7 	bl	801396c <vTaskMissedYield>
			--cTxLock;
 801297e:	1e6b      	subs	r3, r5, #1
 8012980:	b2da      	uxtb	r2, r3
 8012982:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012984:	2a00      	cmp	r2, #0
 8012986:	d1f1      	bne.n	801296c <xQueueReceive+0x250>
		pxQueue->cTxLock = queueUNLOCKED;
 8012988:	23ff      	movs	r3, #255	@ 0xff
 801298a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801298e:	f001 fcdb 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012992:	f001 fcb7 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012996:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801299a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801299c:	2d00      	cmp	r5, #0
 801299e:	dd14      	ble.n	80129ca <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129a0:	f104 0910 	add.w	r9, r4, #16
 80129a4:	e003      	b.n	80129ae <xQueueReceive+0x292>
				--cRxLock;
 80129a6:	1e6b      	subs	r3, r5, #1
 80129a8:	b2da      	uxtb	r2, r3
 80129aa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129ac:	b16a      	cbz	r2, 80129ca <xQueueReceive+0x2ae>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129ae:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129b0:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129b2:	b153      	cbz	r3, 80129ca <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129b4:	f000 ff52 	bl	801385c <xTaskRemoveFromEventList>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	d0f4      	beq.n	80129a6 <xQueueReceive+0x28a>
					vTaskMissedYield();
 80129bc:	f000 ffd6 	bl	801396c <vTaskMissedYield>
				--cRxLock;
 80129c0:	1e6b      	subs	r3, r5, #1
 80129c2:	b2da      	uxtb	r2, r3
 80129c4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129c6:	2a00      	cmp	r2, #0
 80129c8:	d1f1      	bne.n	80129ae <xQueueReceive+0x292>
		pxQueue->cRxLock = queueUNLOCKED;
 80129ca:	23ff      	movs	r3, #255	@ 0xff
 80129cc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80129d0:	f001 fcba 	bl	8014348 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80129d4:	f000 fe3e 	bl	8013654 <xTaskResumeAll>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d1a4      	bne.n	8012926 <xQueueReceive+0x20a>
					portYIELD_WITHIN_API();
 80129dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80129e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80129e8:	f3bf 8f4f 	dsb	sy
 80129ec:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80129f0:	e799      	b.n	8012926 <xQueueReceive+0x20a>
 80129f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129f6:	f383 8811 	msr	BASEPRI, r3
 80129fa:	f3bf 8f6f 	isb	sy
 80129fe:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8012a02:	e7fe      	b.n	8012a02 <xQueueReceive+0x2e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a04:	f104 0010 	add.w	r0, r4, #16
 8012a08:	f000 ff28 	bl	801385c <xTaskRemoveFromEventList>
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	f43f af24 	beq.w	801285a <xQueueReceive+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 8012a12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012a1e:	f3bf 8f4f 	dsb	sy
 8012a22:	f3bf 8f6f 	isb	sy
 8012a26:	e718      	b.n	801285a <xQueueReceive+0x13e>

08012a28 <xQueueSemaphoreTake>:
{
 8012a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2c:	b084      	sub	sp, #16
 8012a2e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8012a30:	2800      	cmp	r0, #0
 8012a32:	d05e      	beq.n	8012af2 <xQueueSemaphoreTake+0xca>
	configASSERT( pxQueue->uxItemSize == 0 );
 8012a34:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8012a36:	4604      	mov	r4, r0
 8012a38:	b147      	cbz	r7, 8012a4c <xQueueSemaphoreTake+0x24>
 8012a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a3e:	f383 8811 	msr	BASEPRI, r3
 8012a42:	f3bf 8f6f 	isb	sy
 8012a46:	f3bf 8f4f 	dsb	sy
 8012a4a:	e7fe      	b.n	8012a4a <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a4c:	f000 ff96 	bl	801397c <xTaskGetSchedulerState>
 8012a50:	4605      	mov	r5, r0
 8012a52:	2800      	cmp	r0, #0
 8012a54:	d056      	beq.n	8012b04 <xQueueSemaphoreTake+0xdc>
 8012a56:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a58:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskENTER_CRITICAL();
 8012a5c:	f001 fc52 	bl	8014304 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012a60:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f040 814d 	bne.w	8012d02 <xQueueSemaphoreTake+0x2da>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a68:	9b01      	ldr	r3, [sp, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 813e 	beq.w	8012cec <xQueueSemaphoreTake+0x2c4>
				else if( xEntryTimeSet == pdFALSE )
 8012a70:	2d00      	cmp	r5, #0
 8012a72:	f000 80a3 	beq.w	8012bbc <xQueueSemaphoreTake+0x194>
		taskEXIT_CRITICAL();
 8012a76:	f001 fc67 	bl	8014348 <vPortExitCritical>
		vTaskSuspendAll();
 8012a7a:	f000 fde1 	bl	8013640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a7e:	f001 fc41 	bl	8014304 <vPortEnterCritical>
 8012a82:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012a86:	2bff      	cmp	r3, #255	@ 0xff
 8012a88:	bf04      	itt	eq
 8012a8a:	2300      	moveq	r3, #0
 8012a8c:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8012a90:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012a94:	2bff      	cmp	r3, #255	@ 0xff
 8012a96:	bf04      	itt	eq
 8012a98:	2300      	moveq	r3, #0
 8012a9a:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8012a9e:	f001 fc53 	bl	8014348 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012aa2:	a901      	add	r1, sp, #4
 8012aa4:	a802      	add	r0, sp, #8
 8012aa6:	f000 ff21 	bl	80138ec <xTaskCheckForTimeOut>
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	d137      	bne.n	8012b1e <xQueueSemaphoreTake+0xf6>
	taskENTER_CRITICAL();
 8012aae:	f001 fc29 	bl	8014304 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012ab2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f000 80ae 	beq.w	8012c16 <xQueueSemaphoreTake+0x1ee>
	taskEXIT_CRITICAL();
 8012aba:	f001 fc45 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012abe:	f001 fc21 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012ac2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012ac6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ac8:	2d00      	cmp	r5, #0
 8012aca:	dd7f      	ble.n	8012bcc <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012acc:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 8012ad0:	e004      	b.n	8012adc <xQueueSemaphoreTake+0xb4>
			--cTxLock;
 8012ad2:	1e6b      	subs	r3, r5, #1
 8012ad4:	b2da      	uxtb	r2, r3
 8012ad6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ad8:	2a00      	cmp	r2, #0
 8012ada:	d077      	beq.n	8012bcc <xQueueSemaphoreTake+0x1a4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012adc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ade:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d073      	beq.n	8012bcc <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ae4:	f000 feba 	bl	801385c <xTaskRemoveFromEventList>
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	d0f2      	beq.n	8012ad2 <xQueueSemaphoreTake+0xaa>
						vTaskMissedYield();
 8012aec:	f000 ff3e 	bl	801396c <vTaskMissedYield>
 8012af0:	e7ef      	b.n	8012ad2 <xQueueSemaphoreTake+0xaa>
 8012af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012af6:	f383 8811 	msr	BASEPRI, r3
 8012afa:	f3bf 8f6f 	isb	sy
 8012afe:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8012b02:	e7fe      	b.n	8012b02 <xQueueSemaphoreTake+0xda>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b04:	9b01      	ldr	r3, [sp, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	f000 80d7 	beq.w	8012cba <xQueueSemaphoreTake+0x292>
 8012b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b10:	f383 8811 	msr	BASEPRI, r3
 8012b14:	f3bf 8f6f 	isb	sy
 8012b18:	f3bf 8f4f 	dsb	sy
 8012b1c:	e7fe      	b.n	8012b1c <xQueueSemaphoreTake+0xf4>
	taskENTER_CRITICAL();
 8012b1e:	f001 fbf1 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012b22:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012b26:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b28:	2d00      	cmp	r5, #0
 8012b2a:	dc04      	bgt.n	8012b36 <xQueueSemaphoreTake+0x10e>
 8012b2c:	e011      	b.n	8012b52 <xQueueSemaphoreTake+0x12a>
			--cTxLock;
 8012b2e:	1e6b      	subs	r3, r5, #1
 8012b30:	b2da      	uxtb	r2, r3
 8012b32:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b34:	b16a      	cbz	r2, 8012b52 <xQueueSemaphoreTake+0x12a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b38:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b3a:	b153      	cbz	r3, 8012b52 <xQueueSemaphoreTake+0x12a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b3c:	f000 fe8e 	bl	801385c <xTaskRemoveFromEventList>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	d0f4      	beq.n	8012b2e <xQueueSemaphoreTake+0x106>
						vTaskMissedYield();
 8012b44:	f000 ff12 	bl	801396c <vTaskMissedYield>
			--cTxLock;
 8012b48:	1e6b      	subs	r3, r5, #1
 8012b4a:	b2da      	uxtb	r2, r3
 8012b4c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b4e:	2a00      	cmp	r2, #0
 8012b50:	d1f1      	bne.n	8012b36 <xQueueSemaphoreTake+0x10e>
		pxQueue->cTxLock = queueUNLOCKED;
 8012b52:	23ff      	movs	r3, #255	@ 0xff
 8012b54:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8012b58:	f001 fbf6 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012b5c:	f001 fbd2 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012b60:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012b64:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012b66:	2d00      	cmp	r5, #0
 8012b68:	dd14      	ble.n	8012b94 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b6a:	f104 0810 	add.w	r8, r4, #16
 8012b6e:	e003      	b.n	8012b78 <xQueueSemaphoreTake+0x150>
				--cRxLock;
 8012b70:	1e6b      	subs	r3, r5, #1
 8012b72:	b2da      	uxtb	r2, r3
 8012b74:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012b76:	b16a      	cbz	r2, 8012b94 <xQueueSemaphoreTake+0x16c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b78:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b7a:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b7c:	b153      	cbz	r3, 8012b94 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b7e:	f000 fe6d 	bl	801385c <xTaskRemoveFromEventList>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	d0f4      	beq.n	8012b70 <xQueueSemaphoreTake+0x148>
					vTaskMissedYield();
 8012b86:	f000 fef1 	bl	801396c <vTaskMissedYield>
				--cRxLock;
 8012b8a:	1e6b      	subs	r3, r5, #1
 8012b8c:	b2da      	uxtb	r2, r3
 8012b8e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012b90:	2a00      	cmp	r2, #0
 8012b92:	d1f1      	bne.n	8012b78 <xQueueSemaphoreTake+0x150>
		pxQueue->cRxLock = queueUNLOCKED;
 8012b94:	23ff      	movs	r3, #255	@ 0xff
 8012b96:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8012b9a:	f001 fbd5 	bl	8014348 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8012b9e:	f000 fd59 	bl	8013654 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8012ba2:	f001 fbaf 	bl	8014304 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012ba6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012ba8:	b963      	cbnz	r3, 8012bc4 <xQueueSemaphoreTake+0x19c>
	taskEXIT_CRITICAL();
 8012baa:	f001 fbcd 	bl	8014348 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8012bae:	2f00      	cmp	r7, #0
 8012bb0:	f040 8085 	bne.w	8012cbe <xQueueSemaphoreTake+0x296>
					return errQUEUE_EMPTY;
 8012bb4:	2000      	movs	r0, #0
}
 8012bb6:	b004      	add	sp, #16
 8012bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012bbc:	a802      	add	r0, sp, #8
 8012bbe:	f000 fe8b 	bl	80138d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012bc2:	e758      	b.n	8012a76 <xQueueSemaphoreTake+0x4e>
	taskEXIT_CRITICAL();
 8012bc4:	f001 fbc0 	bl	8014348 <vPortExitCritical>
	return xReturn;
 8012bc8:	2501      	movs	r5, #1
 8012bca:	e747      	b.n	8012a5c <xQueueSemaphoreTake+0x34>
		pxQueue->cTxLock = queueUNLOCKED;
 8012bcc:	23ff      	movs	r3, #255	@ 0xff
 8012bce:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8012bd2:	f001 fbb9 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012bd6:	f001 fb95 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012bda:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012bde:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012be0:	2d00      	cmp	r5, #0
 8012be2:	dd10      	ble.n	8012c06 <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012be4:	f104 0810 	add.w	r8, r4, #16
 8012be8:	e003      	b.n	8012bf2 <xQueueSemaphoreTake+0x1ca>
				--cRxLock;
 8012bea:	1e6b      	subs	r3, r5, #1
 8012bec:	b2da      	uxtb	r2, r3
 8012bee:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012bf0:	b14a      	cbz	r2, 8012c06 <xQueueSemaphoreTake+0x1de>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bf2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bf4:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bf6:	b133      	cbz	r3, 8012c06 <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bf8:	f000 fe30 	bl	801385c <xTaskRemoveFromEventList>
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	d0f4      	beq.n	8012bea <xQueueSemaphoreTake+0x1c2>
					vTaskMissedYield();
 8012c00:	f000 feb4 	bl	801396c <vTaskMissedYield>
 8012c04:	e7f1      	b.n	8012bea <xQueueSemaphoreTake+0x1c2>
		pxQueue->cRxLock = queueUNLOCKED;
 8012c06:	23ff      	movs	r3, #255	@ 0xff
 8012c08:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8012c0c:	f001 fb9c 	bl	8014348 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8012c10:	f000 fd20 	bl	8013654 <xTaskResumeAll>
 8012c14:	e7d8      	b.n	8012bc8 <xQueueSemaphoreTake+0x1a0>
	taskEXIT_CRITICAL();
 8012c16:	f001 fb97 	bl	8014348 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012c1a:	6823      	ldr	r3, [r4, #0]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d05c      	beq.n	8012cda <xQueueSemaphoreTake+0x2b2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012c20:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 8012c24:	9901      	ldr	r1, [sp, #4]
 8012c26:	4640      	mov	r0, r8
 8012c28:	f000 fd6c 	bl	8013704 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8012c2c:	f001 fb6a 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012c30:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012c34:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012c36:	2d00      	cmp	r5, #0
 8012c38:	dc04      	bgt.n	8012c44 <xQueueSemaphoreTake+0x21c>
 8012c3a:	e00d      	b.n	8012c58 <xQueueSemaphoreTake+0x230>
			--cTxLock;
 8012c3c:	1e6b      	subs	r3, r5, #1
 8012c3e:	b2da      	uxtb	r2, r3
 8012c40:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012c42:	b14a      	cbz	r2, 8012c58 <xQueueSemaphoreTake+0x230>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c46:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c48:	b133      	cbz	r3, 8012c58 <xQueueSemaphoreTake+0x230>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c4a:	f000 fe07 	bl	801385c <xTaskRemoveFromEventList>
 8012c4e:	2800      	cmp	r0, #0
 8012c50:	d0f4      	beq.n	8012c3c <xQueueSemaphoreTake+0x214>
						vTaskMissedYield();
 8012c52:	f000 fe8b 	bl	801396c <vTaskMissedYield>
 8012c56:	e7f1      	b.n	8012c3c <xQueueSemaphoreTake+0x214>
		pxQueue->cTxLock = queueUNLOCKED;
 8012c58:	23ff      	movs	r3, #255	@ 0xff
 8012c5a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8012c5e:	f001 fb73 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012c62:	f001 fb4f 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012c66:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012c6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012c6c:	2d00      	cmp	r5, #0
 8012c6e:	dd10      	ble.n	8012c92 <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c70:	f104 0810 	add.w	r8, r4, #16
 8012c74:	e003      	b.n	8012c7e <xQueueSemaphoreTake+0x256>
				--cRxLock;
 8012c76:	1e6b      	subs	r3, r5, #1
 8012c78:	b2da      	uxtb	r2, r3
 8012c7a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012c7c:	b14a      	cbz	r2, 8012c92 <xQueueSemaphoreTake+0x26a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c80:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c82:	b133      	cbz	r3, 8012c92 <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c84:	f000 fdea 	bl	801385c <xTaskRemoveFromEventList>
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	d0f4      	beq.n	8012c76 <xQueueSemaphoreTake+0x24e>
					vTaskMissedYield();
 8012c8c:	f000 fe6e 	bl	801396c <vTaskMissedYield>
 8012c90:	e7f1      	b.n	8012c76 <xQueueSemaphoreTake+0x24e>
		pxQueue->cRxLock = queueUNLOCKED;
 8012c92:	23ff      	movs	r3, #255	@ 0xff
 8012c94:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8012c98:	f001 fb56 	bl	8014348 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8012c9c:	f000 fcda 	bl	8013654 <xTaskResumeAll>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	d191      	bne.n	8012bc8 <xQueueSemaphoreTake+0x1a0>
					portYIELD_WITHIN_API();
 8012ca4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012cb0:	f3bf 8f4f 	dsb	sy
 8012cb4:	f3bf 8f6f 	isb	sy
 8012cb8:	e786      	b.n	8012bc8 <xQueueSemaphoreTake+0x1a0>
 8012cba:	462f      	mov	r7, r5
 8012cbc:	e6cc      	b.n	8012a58 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8012cbe:	f001 fb21 	bl	8014304 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012cc2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012cc4:	b119      	cbz	r1, 8012cce <xQueueSemaphoreTake+0x2a6>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012cc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012cc8:	6819      	ldr	r1, [r3, #0]
 8012cca:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012cce:	68a0      	ldr	r0, [r4, #8]
 8012cd0:	f000 ff0a 	bl	8013ae8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8012cd4:	f001 fb38 	bl	8014348 <vPortExitCritical>
 8012cd8:	e76c      	b.n	8012bb4 <xQueueSemaphoreTake+0x18c>
						taskENTER_CRITICAL();
 8012cda:	f001 fb13 	bl	8014304 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012cde:	68a0      	ldr	r0, [r4, #8]
 8012ce0:	f000 fe5c 	bl	801399c <xTaskPriorityInherit>
 8012ce4:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 8012ce6:	f001 fb2f 	bl	8014348 <vPortExitCritical>
 8012cea:	e799      	b.n	8012c20 <xQueueSemaphoreTake+0x1f8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012cec:	2f00      	cmp	r7, #0
 8012cee:	d0f1      	beq.n	8012cd4 <xQueueSemaphoreTake+0x2ac>
 8012cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cf4:	f383 8811 	msr	BASEPRI, r3
 8012cf8:	f3bf 8f6f 	isb	sy
 8012cfc:	f3bf 8f4f 	dsb	sy
 8012d00:	e7fe      	b.n	8012d00 <xQueueSemaphoreTake+0x2d8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d02:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012d04:	3b01      	subs	r3, #1
 8012d06:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d08:	b12a      	cbz	r2, 8012d16 <xQueueSemaphoreTake+0x2ee>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d0a:	6923      	ldr	r3, [r4, #16]
 8012d0c:	b93b      	cbnz	r3, 8012d1e <xQueueSemaphoreTake+0x2f6>
				taskEXIT_CRITICAL();
 8012d0e:	f001 fb1b 	bl	8014348 <vPortExitCritical>
				return pdPASS;
 8012d12:	2001      	movs	r0, #1
 8012d14:	e74f      	b.n	8012bb6 <xQueueSemaphoreTake+0x18e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012d16:	f000 ff43 	bl	8013ba0 <pvTaskIncrementMutexHeldCount>
 8012d1a:	60a0      	str	r0, [r4, #8]
 8012d1c:	e7f5      	b.n	8012d0a <xQueueSemaphoreTake+0x2e2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d1e:	f104 0010 	add.w	r0, r4, #16
 8012d22:	f000 fd9b 	bl	801385c <xTaskRemoveFromEventList>
 8012d26:	2800      	cmp	r0, #0
 8012d28:	d0f1      	beq.n	8012d0e <xQueueSemaphoreTake+0x2e6>
						queueYIELD_IF_USING_PREEMPTION();
 8012d2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012d36:	f3bf 8f4f 	dsb	sy
 8012d3a:	f3bf 8f6f 	isb	sy
 8012d3e:	e7e6      	b.n	8012d0e <xQueueSemaphoreTake+0x2e6>

08012d40 <xQueueReceiveFromISR>:
{
 8012d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8012d44:	b310      	cbz	r0, 8012d8c <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d46:	460e      	mov	r6, r1
 8012d48:	4617      	mov	r7, r2
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	b191      	cbz	r1, 8012d74 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d4e:	f001 fc07 	bl	8014560 <vPortValidateInterruptPriority>
	__asm volatile
 8012d52:	f3ef 8911 	mrs	r9, BASEPRI
 8012d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d5a:	f383 8811 	msr	BASEPRI, r3
 8012d5e:	f3bf 8f6f 	isb	sy
 8012d62:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d66:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d68:	b9cd      	cbnz	r5, 8012d9e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8012d6a:	4628      	mov	r0, r5
	__asm volatile
 8012d6c:	f389 8811 	msr	BASEPRI, r9
}
 8012d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d74:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d0e9      	beq.n	8012d4e <xQueueReceiveFromISR+0xe>
	__asm volatile
 8012d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d7e:	f383 8811 	msr	BASEPRI, r3
 8012d82:	f3bf 8f6f 	isb	sy
 8012d86:	f3bf 8f4f 	dsb	sy
 8012d8a:	e7fe      	b.n	8012d8a <xQueueReceiveFromISR+0x4a>
 8012d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d90:	f383 8811 	msr	BASEPRI, r3
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8012d9c:	e7fe      	b.n	8012d9c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8012d9e:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012da2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8012da4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012da8:	b152      	cbz	r2, 8012dc0 <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012daa:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012dac:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012dae:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012db0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012db2:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012db4:	bf24      	itt	cs
 8012db6:	6821      	ldrcs	r1, [r4, #0]
 8012db8:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f002 f9f9 	bl	80151b2 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012dc0:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8012dc2:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012dc6:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8012dc8:	d006      	beq.n	8012dd8 <xQueueReceiveFromISR+0x98>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012dca:	f108 0301 	add.w	r3, r8, #1
 8012dce:	b25b      	sxtb	r3, r3
 8012dd0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8012dd4:	2001      	movs	r0, #1
 8012dd6:	e7c9      	b.n	8012d6c <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012dd8:	6923      	ldr	r3, [r4, #16]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d0fa      	beq.n	8012dd4 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012dde:	f104 0010 	add.w	r0, r4, #16
 8012de2:	f000 fd3b 	bl	801385c <xTaskRemoveFromEventList>
 8012de6:	2800      	cmp	r0, #0
 8012de8:	d0f4      	beq.n	8012dd4 <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 8012dea:	2f00      	cmp	r7, #0
 8012dec:	d0f2      	beq.n	8012dd4 <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012dee:	2301      	movs	r3, #1
 8012df0:	603b      	str	r3, [r7, #0]
 8012df2:	e7ef      	b.n	8012dd4 <xQueueReceiveFromISR+0x94>

08012df4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012df4:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012df6:	2300      	movs	r3, #0
 8012df8:	4c08      	ldr	r4, [pc, #32]	@ (8012e1c <vQueueAddToRegistry+0x28>)
 8012dfa:	e002      	b.n	8012e02 <vQueueAddToRegistry+0xe>
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	2b64      	cmp	r3, #100	@ 0x64
 8012e00:	d008      	beq.n	8012e14 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012e02:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8012e06:	2a00      	cmp	r2, #0
 8012e08:	d1f8      	bne.n	8012dfc <vQueueAddToRegistry+0x8>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012e0a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012e0e:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012e12:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e18:	4770      	bx	lr
 8012e1a:	bf00      	nop
 8012e1c:	20003048 	.word	0x20003048

08012e20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012e20:	b570      	push	{r4, r5, r6, lr}
 8012e22:	4605      	mov	r5, r0
 8012e24:	460e      	mov	r6, r1
 8012e26:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012e28:	f001 fa6c 	bl	8014304 <vPortEnterCritical>
 8012e2c:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8012e30:	2bff      	cmp	r3, #255	@ 0xff
 8012e32:	bf04      	itt	eq
 8012e34:	2300      	moveq	r3, #0
 8012e36:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 8012e3a:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8012e3e:	2bff      	cmp	r3, #255	@ 0xff
 8012e40:	bf04      	itt	eq
 8012e42:	2300      	moveq	r3, #0
 8012e44:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 8012e48:	f001 fa7e 	bl	8014348 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012e4c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d043      	beq.n	8012eda <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8012e52:	f001 fa57 	bl	8014304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012e56:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8012e5a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e5c:	2c00      	cmp	r4, #0
 8012e5e:	dd14      	ble.n	8012e8a <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e60:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8012e64:	e003      	b.n	8012e6e <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8012e66:	1e63      	subs	r3, r4, #1
 8012e68:	b2da      	uxtb	r2, r3
 8012e6a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e6c:	b16a      	cbz	r2, 8012e8a <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e6e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e70:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e72:	b153      	cbz	r3, 8012e8a <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e74:	f000 fcf2 	bl	801385c <xTaskRemoveFromEventList>
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	d0f4      	beq.n	8012e66 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8012e7c:	f000 fd76 	bl	801396c <vTaskMissedYield>
			--cTxLock;
 8012e80:	1e63      	subs	r3, r4, #1
 8012e82:	b2da      	uxtb	r2, r3
 8012e84:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e86:	2a00      	cmp	r2, #0
 8012e88:	d1f1      	bne.n	8012e6e <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8012e8a:	23ff      	movs	r3, #255	@ 0xff
 8012e8c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8012e90:	f001 fa5a 	bl	8014348 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012e94:	f001 fa36 	bl	8014304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012e98:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8012e9c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e9e:	2c00      	cmp	r4, #0
 8012ea0:	dd14      	ble.n	8012ecc <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ea2:	f105 0610 	add.w	r6, r5, #16
 8012ea6:	e003      	b.n	8012eb0 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8012ea8:	1e63      	subs	r3, r4, #1
 8012eaa:	b2da      	uxtb	r2, r3
 8012eac:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012eae:	b16a      	cbz	r2, 8012ecc <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012eb0:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012eb2:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012eb4:	b153      	cbz	r3, 8012ecc <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012eb6:	f000 fcd1 	bl	801385c <xTaskRemoveFromEventList>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d0f4      	beq.n	8012ea8 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8012ebe:	f000 fd55 	bl	801396c <vTaskMissedYield>
				--cRxLock;
 8012ec2:	1e63      	subs	r3, r4, #1
 8012ec4:	b2da      	uxtb	r2, r3
 8012ec6:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ec8:	2a00      	cmp	r2, #0
 8012eca:	d1f1      	bne.n	8012eb0 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8012ecc:	23ff      	movs	r3, #255	@ 0xff
 8012ece:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8012ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8012ed6:	f001 ba37 	b.w	8014348 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012eda:	4622      	mov	r2, r4
 8012edc:	4631      	mov	r1, r6
 8012ede:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8012ee2:	f000 fc5f 	bl	80137a4 <vTaskPlaceOnEventListRestricted>
 8012ee6:	e7b4      	b.n	8012e52 <vQueueWaitForMessageRestricted+0x32>

08012ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	4c14      	ldr	r4, [pc, #80]	@ (8012f3c <prvIdleTask+0x54>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8012eec:	f04f 27e0 	mov.w	r7, #3758153728	@ 0xe000e000
 8012ef0:	f04f 5680 	mov.w	r6, #268435456	@ 0x10000000
 8012ef4:	e014      	b.n	8012f20 <prvIdleTask+0x38>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 8012ef6:	f001 fa05 	bl	8014304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012efe:	1d28      	adds	r0, r5, #4
 8012f00:	f7ff f902 	bl	8012108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012f04:	69a3      	ldr	r3, [r4, #24]
 8012f06:	3b01      	subs	r3, #1
 8012f08:	61a3      	str	r3, [r4, #24]
				--uxDeletedTasksWaitingCleanUp;
 8012f0a:	6823      	ldr	r3, [r4, #0]
 8012f0c:	3b01      	subs	r3, #1
 8012f0e:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8012f10:	f001 fa1a 	bl	8014348 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8012f14:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8012f16:	f001 f935 	bl	8014184 <vPortFree>
			vPortFree( pxTCB );
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f001 f932 	bl	8014184 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f20:	6823      	ldr	r3, [r4, #0]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1e7      	bne.n	8012ef6 <prvIdleTask+0xe>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012f26:	69e3      	ldr	r3, [r4, #28]
 8012f28:	2b01      	cmp	r3, #1
 8012f2a:	d9f9      	bls.n	8012f20 <prvIdleTask+0x38>
				taskYIELD();
 8012f2c:	f8c7 6d04 	str.w	r6, [r7, #3332]	@ 0xd04
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	f3bf 8f6f 	isb	sy
 8012f38:	e7f2      	b.n	8012f20 <prvIdleTask+0x38>
 8012f3a:	bf00      	nop
 8012f3c:	20003368 	.word	0x20003368

08012f40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012f42:	4c1f      	ldr	r4, [pc, #124]	@ (8012fc0 <prvAddCurrentTaskToDelayedList+0x80>)
{
 8012f44:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8012f46:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f4a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8012f4e:	3004      	adds	r0, #4
{
 8012f50:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f52:	f7ff f8d9 	bl	8012108 <uxListRemove>
 8012f56:	b950      	cbnz	r0, 8012f6e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012f58:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8012f5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012f5e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8012f62:	2201      	movs	r2, #1
 8012f64:	408a      	lsls	r2, r1
 8012f66:	ea23 0302 	bic.w	r3, r3, r2
 8012f6a:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012f6e:	1c73      	adds	r3, r6, #1
 8012f70:	d01b      	beq.n	8012faa <prvAddCurrentTaskToDelayedList+0x6a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012f72:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8012f76:	19ad      	adds	r5, r5, r6
 8012f78:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8012f7a:	d308      	bcc.n	8012f8e <prvAddCurrentTaskToDelayedList+0x4e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012f7c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	@ 0xc8
 8012f80:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012f84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012f88:	3104      	adds	r1, #4
 8012f8a:	f7ff b8a5 	b.w	80120d8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012f8e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8012f92:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8012f96:	3104      	adds	r1, #4
 8012f98:	f7ff f89e 	bl	80120d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012f9c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 8012fa0:	42ab      	cmp	r3, r5
					xNextTaskUnblockTime = xTimeToWake;
 8012fa2:	bf88      	it	hi
 8012fa4:	f8c4 50d0 	strhi.w	r5, [r4, #208]	@ 0xd0
}
 8012fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012faa:	2f00      	cmp	r7, #0
 8012fac:	d0e1      	beq.n	8012f72 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fae:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8012fb2:	4804      	ldr	r0, [pc, #16]	@ (8012fc4 <prvAddCurrentTaskToDelayedList+0x84>)
}
 8012fb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fb8:	3104      	adds	r1, #4
 8012fba:	f7ff b87f 	b.w	80120bc <vListInsertEnd>
 8012fbe:	bf00      	nop
 8012fc0:	20003368 	.word	0x20003368
 8012fc4:	2000341c 	.word	0x2000341c

08012fc8 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8012fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012fcc:	4c46      	ldr	r4, [pc, #280]	@ (80130e8 <xTaskIncrementTick.part.0+0x120>)
 8012fce:	f8d4 70a8 	ldr.w	r7, [r4, #168]	@ 0xa8
 8012fd2:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8012fd4:	f8c4 70a8 	str.w	r7, [r4, #168]	@ 0xa8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012fd8:	bb2f      	cbnz	r7, 8013026 <xTaskIncrementTick.part.0+0x5e>
			taskSWITCH_DELAYED_LISTS();
 8012fda:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	b143      	cbz	r3, 8012ff4 <xTaskIncrementTick.part.0+0x2c>
 8012fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fe6:	f383 8811 	msr	BASEPRI, r3
 8012fea:	f3bf 8f6f 	isb	sy
 8012fee:	f3bf 8f4f 	dsb	sy
 8012ff2:	e7fe      	b.n	8012ff2 <xTaskIncrementTick.part.0+0x2a>
 8012ff4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8012ff8:	f8d4 20c8 	ldr.w	r2, [r4, #200]	@ 0xc8
 8012ffc:	f8c4 20cc 	str.w	r2, [r4, #204]	@ 0xcc
 8013000:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8013004:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8013008:	3301      	adds	r3, #1
 801300a:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801300e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d058      	beq.n	80130ca <xTaskIncrementTick.part.0+0x102>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013018:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801301c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801301e:	68db      	ldr	r3, [r3, #12]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013026:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 801302a:	429f      	cmp	r7, r3
 801302c:	d339      	bcc.n	80130a2 <xTaskIncrementTick.part.0+0xda>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801302e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8013032:	681e      	ldr	r6, [r3, #0]
 8013034:	2e00      	cmp	r6, #0
 8013036:	d051      	beq.n	80130dc <xTaskIncrementTick.part.0+0x114>
					prvAddTaskToReadyList( pxTCB );
 8013038:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80130ec <xTaskIncrementTick.part.0+0x124>
BaseType_t xSwitchRequired = pdFALSE;
 801303c:	2600      	movs	r6, #0
					prvAddTaskToReadyList( pxTCB );
 801303e:	f04f 0801 	mov.w	r8, #1
 8013042:	e021      	b.n	8013088 <xTaskIncrementTick.part.0+0xc0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013044:	f7ff f860 	bl	8012108 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013048:	6aab      	ldr	r3, [r5, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801304a:	f105 0018 	add.w	r0, r5, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801304e:	b10b      	cbz	r3, 8013054 <xTaskIncrementTick.part.0+0x8c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013050:	f7ff f85a 	bl	8012108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013054:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8013056:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 801305a:	fa08 f300 	lsl.w	r3, r8, r0
 801305e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013062:	4313      	orrs	r3, r2
 8013064:	4651      	mov	r1, sl
 8013066:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801306a:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 801306e:	f7ff f825 	bl	80120bc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013072:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013076:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801307a:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 801307c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801307e:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8013080:	4291      	cmp	r1, r2
 8013082:	bf28      	it	cs
 8013084:	2601      	movcs	r6, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013086:	b34b      	cbz	r3, 80130dc <xTaskIncrementTick.part.0+0x114>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013088:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013090:	686b      	ldr	r3, [r5, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013092:	f105 0a04 	add.w	sl, r5, #4
					if( xConstTickCount < xItemValue )
 8013096:	429f      	cmp	r7, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013098:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 801309a:	d2d3      	bcs.n	8013044 <xTaskIncrementTick.part.0+0x7c>
						xNextTaskUnblockTime = xItemValue;
 801309c:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80130a0:	e000      	b.n	80130a4 <xTaskIncrementTick.part.0+0xdc>
BaseType_t xSwitchRequired = pdFALSE;
 80130a2:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80130a4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80130a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80130ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80130b2:	69da      	ldr	r2, [r3, #28]
			if( xYieldPending != pdFALSE )
 80130b4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
				xSwitchRequired = pdTRUE;
 80130b8:	2a02      	cmp	r2, #2
 80130ba:	bf28      	it	cs
 80130bc:	2601      	movcs	r6, #1
				xSwitchRequired = pdTRUE;
 80130be:	2b00      	cmp	r3, #0
}
 80130c0:	bf0c      	ite	eq
 80130c2:	4630      	moveq	r0, r6
 80130c4:	2001      	movne	r0, #1
 80130c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 80130ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80130ce:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80130d2:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 80130d6:	429f      	cmp	r7, r3
 80130d8:	d3e3      	bcc.n	80130a2 <xTaskIncrementTick.part.0+0xda>
 80130da:	e7a8      	b.n	801302e <xTaskIncrementTick.part.0+0x66>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80130e0:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
					break;
 80130e4:	e7de      	b.n	80130a4 <xTaskIncrementTick.part.0+0xdc>
 80130e6:	bf00      	nop
 80130e8:	20003368 	.word	0x20003368
 80130ec:	20003384 	.word	0x20003384

080130f0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80130f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		--uxSchedulerSuspended;
 80130f4:	4c43      	ldr	r4, [pc, #268]	@ (8013204 <xTaskResumeAll.part.0+0x114>)
	taskENTER_CRITICAL();
 80130f6:	f001 f905 	bl	8014304 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80130fa:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 80130fe:	3b01      	subs	r3, #1
 8013100:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013104:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 8013108:	2b00      	cmp	r3, #0
 801310a:	d154      	bne.n	80131b6 <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801310c:	69a3      	ldr	r3, [r4, #24]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d051      	beq.n	80131b6 <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013112:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8013116:	b38b      	cbz	r3, 801317c <xTaskResumeAll.part.0+0x8c>
 8013118:	f104 081c 	add.w	r8, r4, #28
					prvAddTaskToReadyList( pxTCB );
 801311c:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801311e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
 8013122:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013124:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013126:	f105 0018 	add.w	r0, r5, #24
 801312a:	f7fe ffed 	bl	8012108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801312e:	4630      	mov	r0, r6
 8013130:	f7fe ffea 	bl	8012108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013134:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8013136:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 801313a:	fa07 f300 	lsl.w	r3, r7, r0
 801313e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013142:	4313      	orrs	r3, r2
 8013144:	4631      	mov	r1, r6
 8013146:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801314a:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 801314e:	f7fe ffb5 	bl	80120bc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013152:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8013156:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8013158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801315a:	429a      	cmp	r2, r3
 801315c:	d331      	bcc.n	80131c2 <xTaskResumeAll.part.0+0xd2>
						xYieldPending = pdTRUE;
 801315e:	f8c4 70d8 	str.w	r7, [r4, #216]	@ 0xd8
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013162:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8013166:	2b00      	cmp	r3, #0
 8013168:	d1d9      	bne.n	801311e <xTaskResumeAll.part.0+0x2e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801316a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d13f      	bne.n	80131f4 <xTaskResumeAll.part.0+0x104>
		xNextTaskUnblockTime = portMAX_DELAY;
 8013174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013178:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801317c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
					if( xPendedCounts > ( TickType_t ) 0U )
 8013180:	b1b5      	cbz	r5, 80131b0 <xTaskResumeAll.part.0+0xc0>
								xYieldPending = pdTRUE;
 8013182:	2601      	movs	r6, #1
 8013184:	e006      	b.n	8013194 <xTaskResumeAll.part.0+0xa4>
 8013186:	f7ff ff1f 	bl	8012fc8 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 801318a:	b108      	cbz	r0, 8013190 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 801318c:	f8c4 60d8 	str.w	r6, [r4, #216]	@ 0xd8
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013190:	3d01      	subs	r5, #1
 8013192:	d00b      	beq.n	80131ac <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013194:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 8013198:	2b00      	cmp	r3, #0
 801319a:	d0f4      	beq.n	8013186 <xTaskResumeAll.part.0+0x96>
		++xPendedTicks;
 801319c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
						} while( xPendedCounts > ( TickType_t ) 0U );
 80131a0:	3d01      	subs	r5, #1
		++xPendedTicks;
 80131a2:	f103 0301 	add.w	r3, r3, #1
 80131a6:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
						} while( xPendedCounts > ( TickType_t ) 0U );
 80131aa:	d1f3      	bne.n	8013194 <xTaskResumeAll.part.0+0xa4>
						xPendedTicks = 0;
 80131ac:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
				if( xYieldPending != pdFALSE )
 80131b0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80131b4:	b973      	cbnz	r3, 80131d4 <xTaskResumeAll.part.0+0xe4>
BaseType_t xAlreadyYielded = pdFALSE;
 80131b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80131b8:	f001 f8c6 	bl	8014348 <vPortExitCritical>
}
 80131bc:	4620      	mov	r0, r4
 80131be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80131c2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1a9      	bne.n	801311e <xTaskResumeAll.part.0+0x2e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131ca:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	b983      	cbnz	r3, 80131f4 <xTaskResumeAll.part.0+0x104>
 80131d2:	e7cf      	b.n	8013174 <xTaskResumeAll.part.0+0x84>
					taskYIELD_IF_USING_PREEMPTION();
 80131d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80131d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80131e0:	f3bf 8f4f 	dsb	sy
 80131e4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80131e8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80131ea:	f001 f8ad 	bl	8014348 <vPortExitCritical>
}
 80131ee:	4620      	mov	r0, r4
 80131f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131f4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 80131f8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	685b      	ldr	r3, [r3, #4]
 80131fe:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
}
 8013202:	e7bb      	b.n	801317c <xTaskResumeAll.part.0+0x8c>
 8013204:	20003368 	.word	0x20003368

08013208 <xTaskCreate>:
	{
 8013208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801320c:	0096      	lsls	r6, r2, #2
	{
 801320e:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013210:	4630      	mov	r0, r6
	{
 8013212:	460d      	mov	r5, r1
 8013214:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013216:	f000 ff09 	bl	801402c <pvPortMalloc>
			if( pxStack != NULL )
 801321a:	2800      	cmp	r0, #0
 801321c:	f000 80b7 	beq.w	801338e <xTaskCreate+0x186>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013220:	4607      	mov	r7, r0
 8013222:	205c      	movs	r0, #92	@ 0x5c
 8013224:	f000 ff02 	bl	801402c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8013228:	4604      	mov	r4, r0
 801322a:	2800      	cmp	r0, #0
 801322c:	f000 80ac 	beq.w	8013388 <xTaskCreate+0x180>
					pxNewTCB->pxStack = pxStack;
 8013230:	6307      	str	r7, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013232:	4632      	mov	r2, r6
 8013234:	4638      	mov	r0, r7
 8013236:	21a5      	movs	r1, #165	@ 0xa5
 8013238:	f001 ff3b 	bl	80150b2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801323c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 801323e:	3e04      	subs	r6, #4
 8013240:	4437      	add	r7, r6
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013242:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8013246:	2d00      	cmp	r5, #0
 8013248:	f000 80b6 	beq.w	80133b8 <xTaskCreate+0x1b0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801324c:	782b      	ldrb	r3, [r5, #0]
 801324e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8013252:	2b00      	cmp	r3, #0
 8013254:	d036      	beq.n	80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013256:	786b      	ldrb	r3, [r5, #1]
 8013258:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 801325c:	b393      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801325e:	78ab      	ldrb	r3, [r5, #2]
 8013260:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8013264:	b373      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013266:	78eb      	ldrb	r3, [r5, #3]
 8013268:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 801326c:	b353      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801326e:	792b      	ldrb	r3, [r5, #4]
 8013270:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8013274:	b333      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013276:	796b      	ldrb	r3, [r5, #5]
 8013278:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 801327c:	b313      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801327e:	79ab      	ldrb	r3, [r5, #6]
 8013280:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8013284:	b1f3      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013286:	79eb      	ldrb	r3, [r5, #7]
 8013288:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 801328c:	b1d3      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801328e:	7a2b      	ldrb	r3, [r5, #8]
 8013290:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8013294:	b1b3      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013296:	7a6b      	ldrb	r3, [r5, #9]
 8013298:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 801329c:	b193      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801329e:	7aab      	ldrb	r3, [r5, #10]
 80132a0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80132a4:	b173      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80132a6:	7aeb      	ldrb	r3, [r5, #11]
 80132a8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80132ac:	b153      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80132ae:	7b2b      	ldrb	r3, [r5, #12]
 80132b0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 80132b4:	b133      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80132b6:	7b6b      	ldrb	r3, [r5, #13]
 80132b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80132bc:	b113      	cbz	r3, 80132c4 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80132be:	7bab      	ldrb	r3, [r5, #14]
 80132c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80132c4:	2300      	movs	r3, #0
 80132c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80132ca:	9d08      	ldr	r5, [sp, #32]
 80132cc:	2d06      	cmp	r5, #6
 80132ce:	bf28      	it	cs
 80132d0:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80132d2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132d6:	1d26      	adds	r6, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80132d8:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80132da:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132dc:	4630      	mov	r0, r6
		pxNewTCB->uxMutexesHeld = 0;
 80132de:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132e2:	f7fe fee7 	bl	80120b4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132e6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80132ea:	f104 0018 	add.w	r0, r4, #24
 80132ee:	f7fe fee1 	bl	80120b4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80132f2:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132f6:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80132f8:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80132fc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80132fe:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013300:	464a      	mov	r2, r9
 8013302:	4641      	mov	r1, r8
 8013304:	4638      	mov	r0, r7
 8013306:	f000 ffd7 	bl	80142b8 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 801330a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801330c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801330e:	b103      	cbz	r3, 8013312 <xTaskCreate+0x10a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013310:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 8013312:	4d3f      	ldr	r5, [pc, #252]	@ (8013410 <xTaskCreate+0x208>)
	taskENTER_CRITICAL();
 8013314:	f000 fff6 	bl	8014304 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8013318:	69ab      	ldr	r3, [r5, #24]
 801331a:	3301      	adds	r3, #1
 801331c:	61ab      	str	r3, [r5, #24]
		if( pxCurrentTCB == NULL )
 801331e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8013322:	2b00      	cmp	r3, #0
 8013324:	d03f      	beq.n	80133a6 <xTaskCreate+0x19e>
			if( xSchedulerRunning == pdFALSE )
 8013326:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801332a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 801332c:	b39b      	cbz	r3, 8013396 <xTaskCreate+0x18e>
 801332e:	f105 071c 	add.w	r7, r5, #28
		uxTaskNumber++;
 8013332:	f8d5 3124 	ldr.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 8013336:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
		uxTaskNumber++;
 801333a:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801333c:	6463      	str	r3, [r4, #68]	@ 0x44
		uxTaskNumber++;
 801333e:	f8c5 3124 	str.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 8013342:	2301      	movs	r3, #1
 8013344:	4083      	lsls	r3, r0
 8013346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801334a:	4313      	orrs	r3, r2
 801334c:	4631      	mov	r1, r6
 801334e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8013352:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8013356:	f7fe feb1 	bl	80120bc <vListInsertEnd>
	taskEXIT_CRITICAL();
 801335a:	f000 fff5 	bl	8014348 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801335e:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
 8013362:	b17b      	cbz	r3, 8013384 <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013364:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8013368:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801336a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801336c:	429a      	cmp	r2, r3
 801336e:	d209      	bcs.n	8013384 <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 8013370:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013378:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8013384:	2001      	movs	r0, #1
		return xReturn;
 8013386:	e004      	b.n	8013392 <xTaskCreate+0x18a>
					vPortFree( pxStack );
 8013388:	4638      	mov	r0, r7
 801338a:	f000 fefb 	bl	8014184 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801338e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8013392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013396:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 801339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801339c:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 801339e:	bf98      	it	ls
 80133a0:	f8c5 40ac 	strls.w	r4, [r5, #172]	@ 0xac
 80133a4:	e7c3      	b.n	801332e <xTaskCreate+0x126>
			pxCurrentTCB = pxNewTCB;
 80133a6:	f8c5 40ac 	str.w	r4, [r5, #172]	@ 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80133aa:	69ab      	ldr	r3, [r5, #24]
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d006      	beq.n	80133be <xTaskCreate+0x1b6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80133b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80133b2:	f105 071c 	add.w	r7, r5, #28
 80133b6:	e7bc      	b.n	8013332 <xTaskCreate+0x12a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80133b8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80133bc:	e785      	b.n	80132ca <xTaskCreate+0xc2>
 80133be:	f105 071c 	add.w	r7, r5, #28
 80133c2:	46b8      	mov	r8, r7
 80133c4:	f105 09a8 	add.w	r9, r5, #168	@ 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80133c8:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80133ca:	f108 0814 	add.w	r8, r8, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80133ce:	f7fe fe65 	bl	801209c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80133d2:	45c8      	cmp	r8, r9
 80133d4:	d1f8      	bne.n	80133c8 <xTaskCreate+0x1c0>
	vListInitialise( &xDelayedTaskList1 );
 80133d6:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8013414 <xTaskCreate+0x20c>
 80133da:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 80133dc:	f108 0914 	add.w	r9, r8, #20
	vListInitialise( &xDelayedTaskList1 );
 80133e0:	f7fe fe5c 	bl	801209c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80133e4:	4648      	mov	r0, r9
 80133e6:	f7fe fe59 	bl	801209c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80133ea:	f1a8 0018 	sub.w	r0, r8, #24
 80133ee:	f7fe fe55 	bl	801209c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80133f2:	f1a8 00f4 	sub.w	r0, r8, #244	@ 0xf4
 80133f6:	f7fe fe51 	bl	801209c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80133fa:	f1a8 0044 	sub.w	r0, r8, #68	@ 0x44
 80133fe:	f7fe fe4d 	bl	801209c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8013402:	f8c5 80cc 	str.w	r8, [r5, #204]	@ 0xcc
		prvAddTaskToReadyList( pxNewTCB );
 8013406:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013408:	f8c5 90c8 	str.w	r9, [r5, #200]	@ 0xc8
}
 801340c:	e791      	b.n	8013332 <xTaskCreate+0x12a>
 801340e:	bf00      	nop
 8013410:	20003368 	.word	0x20003368
 8013414:	20003460 	.word	0x20003460

08013418 <vTaskDelay>:
	{
 8013418:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801341a:	b950      	cbnz	r0, 8013432 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 801341c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013424:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8013428:	f3bf 8f4f 	dsb	sy
 801342c:	f3bf 8f6f 	isb	sy
	}
 8013430:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8013432:	4c12      	ldr	r4, [pc, #72]	@ (801347c <vTaskDelay+0x64>)
 8013434:	f8d4 10dc 	ldr.w	r1, [r4, #220]	@ 0xdc
 8013438:	b141      	cbz	r1, 801344c <vTaskDelay+0x34>
 801343a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801343e:	f383 8811 	msr	BASEPRI, r3
 8013442:	f3bf 8f6f 	isb	sy
 8013446:	f3bf 8f4f 	dsb	sy
 801344a:	e7fe      	b.n	801344a <vTaskDelay+0x32>
	++uxSchedulerSuspended;
 801344c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 8013450:	3301      	adds	r3, #1
 8013452:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013456:	f7ff fd73 	bl	8012f40 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 801345a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 801345e:	b943      	cbnz	r3, 8013472 <vTaskDelay+0x5a>
 8013460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013464:	f383 8811 	msr	BASEPRI, r3
 8013468:	f3bf 8f6f 	isb	sy
 801346c:	f3bf 8f4f 	dsb	sy
 8013470:	e7fe      	b.n	8013470 <vTaskDelay+0x58>
 8013472:	f7ff fe3d 	bl	80130f0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8013476:	2800      	cmp	r0, #0
 8013478:	d0d0      	beq.n	801341c <vTaskDelay+0x4>
	}
 801347a:	bd10      	pop	{r4, pc}
 801347c:	20003368 	.word	0x20003368

08013480 <vTaskStartScheduler>:
{
 8013480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013484:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8013488:	f000 fdd0 	bl	801402c <pvPortMalloc>
			if( pxStack != NULL )
 801348c:	2800      	cmp	r0, #0
 801348e:	d078      	beq.n	8013582 <vTaskStartScheduler+0x102>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013490:	4605      	mov	r5, r0
 8013492:	205c      	movs	r0, #92	@ 0x5c
 8013494:	f000 fdca 	bl	801402c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8013498:	4604      	mov	r4, r0
 801349a:	2800      	cmp	r0, #0
 801349c:	d06e      	beq.n	801357c <vTaskStartScheduler+0xfc>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801349e:	21a5      	movs	r1, #165	@ 0xa5
					pxNewTCB->pxStack = pxStack;
 80134a0:	6305      	str	r5, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80134a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80134a6:	4628      	mov	r0, r5
 80134a8:	f001 fe03 	bl	80150b2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80134ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80134ae:	4a60      	ldr	r2, [pc, #384]	@ (8013630 <vTaskStartScheduler+0x1b0>)
 80134b0:	6362      	str	r2, [r4, #52]	@ 0x34
 80134b2:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80134b4:	1d27      	adds	r7, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80134b6:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
		pxNewTCB->uxMutexesHeld = 0;
 80134ba:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80134be:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80134c2:	f884 5043 	strb.w	r5, [r4, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 80134c6:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80134c8:	4638      	mov	r0, r7
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80134ca:	f023 0607 	bic.w	r6, r3, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80134ce:	f7fe fdf1 	bl	80120b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80134d2:	f104 0018 	add.w	r0, r4, #24
 80134d6:	f7fe fded 	bl	80120b4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134da:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 80134dc:	6565      	str	r5, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134de:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80134e0:	462a      	mov	r2, r5
 80134e2:	4954      	ldr	r1, [pc, #336]	@ (8013634 <vTaskStartScheduler+0x1b4>)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80134e4:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80134e8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80134ea:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80134ec:	4630      	mov	r0, r6
 80134ee:	f000 fee3 	bl	80142b8 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80134f2:	4d51      	ldr	r5, [pc, #324]	@ (8013638 <vTaskStartScheduler+0x1b8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80134f4:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80134f6:	f8c5 4128 	str.w	r4, [r5, #296]	@ 0x128
	taskENTER_CRITICAL();
 80134fa:	f000 ff03 	bl	8014304 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80134fe:	69ab      	ldr	r3, [r5, #24]
 8013500:	3301      	adds	r3, #1
 8013502:	61ab      	str	r3, [r5, #24]
		if( pxCurrentTCB == NULL )
 8013504:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8013508:	2b00      	cmp	r3, #0
 801350a:	d04b      	beq.n	80135a4 <vTaskStartScheduler+0x124>
			if( xSchedulerRunning == pdFALSE )
 801350c:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013510:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8013512:	2b00      	cmp	r3, #0
 8013514:	d03e      	beq.n	8013594 <vTaskStartScheduler+0x114>
 8013516:	f105 061c 	add.w	r6, r5, #28
		uxTaskNumber++;
 801351a:	f8d5 3124 	ldr.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 801351e:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
		uxTaskNumber++;
 8013522:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013524:	6463      	str	r3, [r4, #68]	@ 0x44
		uxTaskNumber++;
 8013526:	f8c5 3124 	str.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 801352a:	2301      	movs	r3, #1
 801352c:	4083      	lsls	r3, r0
 801352e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013532:	4313      	orrs	r3, r2
 8013534:	4639      	mov	r1, r7
 8013536:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801353a:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 801353e:	f7fe fdbd 	bl	80120bc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8013542:	f000 ff01 	bl	8014348 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8013546:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
 801354a:	b17b      	cbz	r3, 801356c <vTaskStartScheduler+0xec>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801354c:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8013550:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013552:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013554:	429a      	cmp	r2, r3
 8013556:	d209      	bcs.n	801356c <vTaskStartScheduler+0xec>
			taskYIELD_IF_USING_PREEMPTION();
 8013558:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801355c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013560:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8013564:	f3bf 8f4f 	dsb	sy
 8013568:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
 801356c:	f000 fc8c 	bl	8013e88 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8013570:	2801      	cmp	r0, #1
 8013572:	d020      	beq.n	80135b6 <vTaskStartScheduler+0x136>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013574:	3001      	adds	r0, #1
 8013576:	d004      	beq.n	8013582 <vTaskStartScheduler+0x102>
}
 8013578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 801357c:	4628      	mov	r0, r5
 801357e:	f000 fe01 	bl	8014184 <vPortFree>
 8013582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013586:	f383 8811 	msr	BASEPRI, r3
 801358a:	f3bf 8f6f 	isb	sy
 801358e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013592:	e7fe      	b.n	8013592 <vTaskStartScheduler+0x112>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013594:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8013598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801359a:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 801359c:	bf98      	it	ls
 801359e:	f8c5 40ac 	strls.w	r4, [r5, #172]	@ 0xac
 80135a2:	e7b8      	b.n	8013516 <vTaskStartScheduler+0x96>
			pxCurrentTCB = pxNewTCB;
 80135a4:	f8c5 40ac 	str.w	r4, [r5, #172]	@ 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80135a8:	69ab      	ldr	r3, [r5, #24]
 80135aa:	2b01      	cmp	r3, #1
 80135ac:	d018      	beq.n	80135e0 <vTaskStartScheduler+0x160>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80135ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80135b0:	f105 061c 	add.w	r6, r5, #28
 80135b4:	e7b1      	b.n	801351a <vTaskStartScheduler+0x9a>
 80135b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ba:	f383 8811 	msr	BASEPRI, r3
 80135be:	f3bf 8f6f 	isb	sy
 80135c2:	f3bf 8f4f 	dsb	sy
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80135c6:	2300      	movs	r3, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 80135c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80135cc:	f8c5 20d0 	str.w	r2, [r5, #208]	@ 0xd0
		xSchedulerRunning = pdTRUE;
 80135d0:	f8c5 0120 	str.w	r0, [r5, #288]	@ 0x120
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80135d4:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
}
 80135d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
 80135dc:	f000 bf24 	b.w	8014428 <xPortStartScheduler>
 80135e0:	f105 061c 	add.w	r6, r5, #28
 80135e4:	46b0      	mov	r8, r6
 80135e6:	f105 09a8 	add.w	r9, r5, #168	@ 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80135ea:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135ec:	f108 0814 	add.w	r8, r8, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80135f0:	f7fe fd54 	bl	801209c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135f4:	45c8      	cmp	r8, r9
 80135f6:	d1f8      	bne.n	80135ea <vTaskStartScheduler+0x16a>
	vListInitialise( &xDelayedTaskList1 );
 80135f8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 801363c <vTaskStartScheduler+0x1bc>
 80135fc:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 80135fe:	f108 0914 	add.w	r9, r8, #20
	vListInitialise( &xDelayedTaskList1 );
 8013602:	f7fe fd4b 	bl	801209c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013606:	4648      	mov	r0, r9
 8013608:	f7fe fd48 	bl	801209c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801360c:	f1a8 0018 	sub.w	r0, r8, #24
 8013610:	f7fe fd44 	bl	801209c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8013614:	f1a8 00f4 	sub.w	r0, r8, #244	@ 0xf4
 8013618:	f7fe fd40 	bl	801209c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801361c:	f1a8 0044 	sub.w	r0, r8, #68	@ 0x44
 8013620:	f7fe fd3c 	bl	801209c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8013624:	f8c5 80cc 	str.w	r8, [r5, #204]	@ 0xcc
		prvAddTaskToReadyList( pxNewTCB );
 8013628:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801362a:	f8c5 90c8 	str.w	r9, [r5, #200]	@ 0xc8
}
 801362e:	e774      	b.n	801351a <vTaskStartScheduler+0x9a>
 8013630:	454c4449 	.word	0x454c4449
 8013634:	08012ee9 	.word	0x08012ee9
 8013638:	20003368 	.word	0x20003368
 801363c:	20003460 	.word	0x20003460

08013640 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8013640:	4a03      	ldr	r2, [pc, #12]	@ (8013650 <vTaskSuspendAll+0x10>)
 8013642:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8013646:	3301      	adds	r3, #1
 8013648:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
}
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop
 8013650:	20003368 	.word	0x20003368

08013654 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8013654:	4b07      	ldr	r3, [pc, #28]	@ (8013674 <xTaskResumeAll+0x20>)
 8013656:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801365a:	b943      	cbnz	r3, 801366e <xTaskResumeAll+0x1a>
 801365c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013660:	f383 8811 	msr	BASEPRI, r3
 8013664:	f3bf 8f6f 	isb	sy
 8013668:	f3bf 8f4f 	dsb	sy
 801366c:	e7fe      	b.n	801366c <xTaskResumeAll+0x18>
 801366e:	f7ff bd3f 	b.w	80130f0 <xTaskResumeAll.part.0>
 8013672:	bf00      	nop
 8013674:	20003368 	.word	0x20003368

08013678 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8013678:	4b01      	ldr	r3, [pc, #4]	@ (8013680 <xTaskGetTickCount+0x8>)
 801367a:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
}
 801367e:	4770      	bx	lr
 8013680:	20003368 	.word	0x20003368

08013684 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013684:	4b06      	ldr	r3, [pc, #24]	@ (80136a0 <xTaskIncrementTick+0x1c>)
 8013686:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 801368a:	b90a      	cbnz	r2, 8013690 <xTaskIncrementTick+0xc>
 801368c:	f7ff bc9c 	b.w	8012fc8 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8013690:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8013694:	3201      	adds	r2, #1
}
 8013696:	2000      	movs	r0, #0
		++xPendedTicks;
 8013698:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	20003368 	.word	0x20003368

080136a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80136a4:	4a16      	ldr	r2, [pc, #88]	@ (8013700 <vTaskSwitchContext+0x5c>)
 80136a6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80136aa:	b11b      	cbz	r3, 80136b4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80136ac:	2301      	movs	r3, #1
 80136ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80136b2:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80136b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136b8:	f8d2 30b0 	ldr.w	r3, [r2, #176]	@ 0xb0
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80136bc:	fab3 f383 	clz	r3, r3
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	f1c3 031f 	rsb	r3, r3, #31
 80136c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80136ca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80136ce:	009b      	lsls	r3, r3, #2
 80136d0:	69c8      	ldr	r0, [r1, #28]
 80136d2:	b940      	cbnz	r0, 80136e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80136d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136d8:	f383 8811 	msr	BASEPRI, r3
 80136dc:	f3bf 8f6f 	isb	sy
 80136e0:	f3bf 8f4f 	dsb	sy
 80136e4:	e7fe      	b.n	80136e4 <vTaskSwitchContext+0x40>
 80136e6:	6a08      	ldr	r0, [r1, #32]
 80136e8:	4413      	add	r3, r2
 80136ea:	6840      	ldr	r0, [r0, #4]
 80136ec:	6208      	str	r0, [r1, #32]
 80136ee:	3324      	adds	r3, #36	@ 0x24
 80136f0:	4298      	cmp	r0, r3
 80136f2:	bf04      	itt	eq
 80136f4:	6840      	ldreq	r0, [r0, #4]
 80136f6:	6208      	streq	r0, [r1, #32]
 80136f8:	68c3      	ldr	r3, [r0, #12]
 80136fa:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
}
 80136fe:	4770      	bx	lr
 8013700:	20003368 	.word	0x20003368

08013704 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8013704:	b350      	cbz	r0, 801375c <vTaskPlaceOnEventList+0x58>
{
 8013706:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013708:	4d24      	ldr	r5, [pc, #144]	@ (801379c <vTaskPlaceOnEventList+0x98>)
 801370a:	460c      	mov	r4, r1
 801370c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8013710:	3118      	adds	r1, #24
 8013712:	f7fe fce1 	bl	80120d8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8013716:	f8d5 60a8 	ldr.w	r6, [r5, #168]	@ 0xa8
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801371a:	f8d5 00ac 	ldr.w	r0, [r5, #172]	@ 0xac
 801371e:	3004      	adds	r0, #4
 8013720:	f7fe fcf2 	bl	8012108 <uxListRemove>
 8013724:	b950      	cbnz	r0, 801373c <vTaskPlaceOnEventList+0x38>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013726:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 801372a:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 801372e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8013730:	2201      	movs	r2, #1
 8013732:	408a      	lsls	r2, r1
 8013734:	ea23 0302 	bic.w	r3, r3, r2
 8013738:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801373c:	1c63      	adds	r3, r4, #1
 801373e:	d016      	beq.n	801376e <vTaskPlaceOnEventList+0x6a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013740:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8013744:	19a4      	adds	r4, r4, r6
 8013746:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013748:	d319      	bcc.n	801377e <vTaskPlaceOnEventList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801374a:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 801374e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
}
 8013752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013756:	3104      	adds	r1, #4
 8013758:	f7fe bcbe 	b.w	80120d8 <vListInsert>
 801375c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013760:	f383 8811 	msr	BASEPRI, r3
 8013764:	f3bf 8f6f 	isb	sy
 8013768:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 801376c:	e7fe      	b.n	801376c <vTaskPlaceOnEventList+0x68>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801376e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8013772:	480b      	ldr	r0, [pc, #44]	@ (80137a0 <vTaskPlaceOnEventList+0x9c>)
}
 8013774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013778:	3104      	adds	r1, #4
 801377a:	f7fe bc9f 	b.w	80120bc <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801377e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	@ 0xcc
 8013782:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8013786:	3104      	adds	r1, #4
 8013788:	f7fe fca6 	bl	80120d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801378c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8013790:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
 8013792:	bf38      	it	cc
 8013794:	f8c5 40d0 	strcc.w	r4, [r5, #208]	@ 0xd0
}
 8013798:	bd70      	pop	{r4, r5, r6, pc}
 801379a:	bf00      	nop
 801379c:	20003368 	.word	0x20003368
 80137a0:	2000341c 	.word	0x2000341c

080137a4 <vTaskPlaceOnEventListRestricted>:
	{
 80137a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 80137a6:	b398      	cbz	r0, 8013810 <vTaskPlaceOnEventListRestricted+0x6c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80137a8:	4d2a      	ldr	r5, [pc, #168]	@ (8013854 <vTaskPlaceOnEventListRestricted+0xb0>)
 80137aa:	460c      	mov	r4, r1
 80137ac:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 80137b0:	3118      	adds	r1, #24
 80137b2:	4616      	mov	r6, r2
 80137b4:	f7fe fc82 	bl	80120bc <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80137b8:	f8d5 70a8 	ldr.w	r7, [r5, #168]	@ 0xa8
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137bc:	f8d5 00ac 	ldr.w	r0, [r5, #172]	@ 0xac
 80137c0:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 80137c2:	b306      	cbz	r6, 8013806 <vTaskPlaceOnEventListRestricted+0x62>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137c4:	f7fe fca0 	bl	8012108 <uxListRemove>
 80137c8:	2800      	cmp	r0, #0
 80137ca:	d13a      	bne.n	8013842 <vTaskPlaceOnEventListRestricted+0x9e>
			xTicksToWait = portMAX_DELAY;
 80137cc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80137d0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80137d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80137d6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 80137da:	2201      	movs	r2, #1
 80137dc:	408a      	lsls	r2, r1
 80137de:	ea23 0302 	bic.w	r3, r3, r2
 80137e2:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80137e6:	1c63      	adds	r3, r4, #1
 80137e8:	d029      	beq.n	801383e <vTaskPlaceOnEventListRestricted+0x9a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80137ea:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80137ee:	19e4      	adds	r4, r4, r7
 80137f0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80137f2:	d316      	bcc.n	8013822 <vTaskPlaceOnEventListRestricted+0x7e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137f4:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 80137f8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
	}
 80137fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013800:	3104      	adds	r1, #4
 8013802:	f7fe bc69 	b.w	80120d8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013806:	f7fe fc7f 	bl	8012108 <uxListRemove>
 801380a:	2800      	cmp	r0, #0
 801380c:	d1ed      	bne.n	80137ea <vTaskPlaceOnEventListRestricted+0x46>
 801380e:	e7df      	b.n	80137d0 <vTaskPlaceOnEventListRestricted+0x2c>
 8013810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013814:	f383 8811 	msr	BASEPRI, r3
 8013818:	f3bf 8f6f 	isb	sy
 801381c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8013820:	e7fe      	b.n	8013820 <vTaskPlaceOnEventListRestricted+0x7c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013822:	f8d5 00cc 	ldr.w	r0, [r5, #204]	@ 0xcc
 8013826:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 801382a:	3104      	adds	r1, #4
 801382c:	f7fe fc54 	bl	80120d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013830:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8013834:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
 8013836:	bf38      	it	cc
 8013838:	f8c5 40d0 	strcc.w	r4, [r5, #208]	@ 0xd0
	}
 801383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801383e:	2e00      	cmp	r6, #0
 8013840:	d0d3      	beq.n	80137ea <vTaskPlaceOnEventListRestricted+0x46>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013842:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8013846:	4804      	ldr	r0, [pc, #16]	@ (8013858 <vTaskPlaceOnEventListRestricted+0xb4>)
	}
 8013848:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801384c:	3104      	adds	r1, #4
 801384e:	f7fe bc35 	b.w	80120bc <vListInsertEnd>
 8013852:	bf00      	nop
 8013854:	20003368 	.word	0x20003368
 8013858:	2000341c 	.word	0x2000341c

0801385c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801385c:	68c3      	ldr	r3, [r0, #12]
{
 801385e:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013860:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8013862:	b374      	cbz	r4, 80138c2 <xTaskRemoveFromEventList+0x66>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013864:	4d1b      	ldr	r5, [pc, #108]	@ (80138d4 <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013866:	f104 0618 	add.w	r6, r4, #24
 801386a:	4630      	mov	r0, r6
 801386c:	f7fe fc4c 	bl	8012108 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013870:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8013874:	b17b      	cbz	r3, 8013896 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013876:	4631      	mov	r1, r6
 8013878:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801387c:	f7fe fc1e 	bl	80120bc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013880:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8013884:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013888:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 801388a:	bf86      	itte	hi
 801388c:	2001      	movhi	r0, #1
 801388e:	f8c5 00d8 	strhi.w	r0, [r5, #216]	@ 0xd8
		xReturn = pdFALSE;
 8013892:	2000      	movls	r0, #0
}
 8013894:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013896:	1d26      	adds	r6, r4, #4
 8013898:	4630      	mov	r0, r6
 801389a:	f7fe fc35 	bl	8012108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801389e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80138a0:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 80138a4:	2301      	movs	r3, #1
 80138a6:	4083      	lsls	r3, r0
 80138a8:	4313      	orrs	r3, r2
 80138aa:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 80138ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80138b2:	f105 031c 	add.w	r3, r5, #28
 80138b6:	4631      	mov	r1, r6
 80138b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80138bc:	f7fe fbfe 	bl	80120bc <vListInsertEnd>
 80138c0:	e7de      	b.n	8013880 <xTaskRemoveFromEventList+0x24>
 80138c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138c6:	f383 8811 	msr	BASEPRI, r3
 80138ca:	f3bf 8f6f 	isb	sy
 80138ce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80138d2:	e7fe      	b.n	80138d2 <xTaskRemoveFromEventList+0x76>
 80138d4:	20003368 	.word	0x20003368

080138d8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80138d8:	4b03      	ldr	r3, [pc, #12]	@ (80138e8 <vTaskInternalSetTimeOutState+0x10>)
 80138da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
	pxTimeOut->xTimeOnEntering = xTickCount;
 80138de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80138e2:	e9c0 2300 	strd	r2, r3, [r0]
}
 80138e6:	4770      	bx	lr
 80138e8:	20003368 	.word	0x20003368

080138ec <xTaskCheckForTimeOut>:
{
 80138ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80138ee:	b300      	cbz	r0, 8013932 <xTaskCheckForTimeOut+0x46>
	configASSERT( pxTicksToWait );
 80138f0:	460d      	mov	r5, r1
 80138f2:	b1a9      	cbz	r1, 8013920 <xTaskCheckForTimeOut+0x34>
 80138f4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80138f6:	f000 fd05 	bl	8014304 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 80138fa:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80138fc:	4a1a      	ldr	r2, [pc, #104]	@ (8013968 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 80138fe:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8013900:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
			if( *pxTicksToWait == portMAX_DELAY )
 8013904:	d02b      	beq.n	801395e <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013906:	e9d4 7000 	ldrd	r7, r0, [r4]
 801390a:	f8d2 60d4 	ldr.w	r6, [r2, #212]	@ 0xd4
 801390e:	42b7      	cmp	r7, r6
 8013910:	d018      	beq.n	8013944 <xTaskCheckForTimeOut+0x58>
 8013912:	4288      	cmp	r0, r1
 8013914:	d816      	bhi.n	8013944 <xTaskCheckForTimeOut+0x58>
			xReturn = pdTRUE;
 8013916:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8013918:	f000 fd16 	bl	8014348 <vPortExitCritical>
}
 801391c:	4620      	mov	r0, r4
 801391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013924:	f383 8811 	msr	BASEPRI, r3
 8013928:	f3bf 8f6f 	isb	sy
 801392c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8013930:	e7fe      	b.n	8013930 <xTaskCheckForTimeOut+0x44>
 8013932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013936:	f383 8811 	msr	BASEPRI, r3
 801393a:	f3bf 8f6f 	isb	sy
 801393e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8013942:	e7fe      	b.n	8013942 <xTaskCheckForTimeOut+0x56>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013944:	eba1 0c00 	sub.w	ip, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013948:	4563      	cmp	r3, ip
 801394a:	d90a      	bls.n	8013962 <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 801394c:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801394e:	f8d2 10d4 	ldr.w	r1, [r2, #212]	@ 0xd4
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013952:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
			*pxTicksToWait -= xElapsedTime;
 8013956:	4403      	add	r3, r0
 8013958:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801395a:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 801395e:	2400      	movs	r4, #0
 8013960:	e7da      	b.n	8013918 <xTaskCheckForTimeOut+0x2c>
			*pxTicksToWait = 0;
 8013962:	2300      	movs	r3, #0
 8013964:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8013966:	e7d6      	b.n	8013916 <xTaskCheckForTimeOut+0x2a>
 8013968:	20003368 	.word	0x20003368

0801396c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801396c:	4b02      	ldr	r3, [pc, #8]	@ (8013978 <vTaskMissedYield+0xc>)
 801396e:	2201      	movs	r2, #1
 8013970:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8013974:	4770      	bx	lr
 8013976:	bf00      	nop
 8013978:	20003368 	.word	0x20003368

0801397c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801397c:	4b06      	ldr	r3, [pc, #24]	@ (8013998 <xTaskGetSchedulerState+0x1c>)
 801397e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8013982:	b132      	cbz	r2, 8013992 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013984:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8013988:	fab0 f080 	clz	r0, r0
 801398c:	0940      	lsrs	r0, r0, #5
 801398e:	0040      	lsls	r0, r0, #1
 8013990:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013992:	2001      	movs	r0, #1
	}
 8013994:	4770      	bx	lr
 8013996:	bf00      	nop
 8013998:	20003368 	.word	0x20003368

0801399c <xTaskPriorityInherit>:
	{
 801399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 801399e:	4604      	mov	r4, r0
 80139a0:	b1e0      	cbz	r0, 80139dc <xTaskPriorityInherit+0x40>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80139a2:	4d24      	ldr	r5, [pc, #144]	@ (8013a34 <xTaskPriorityInherit+0x98>)
 80139a4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80139a6:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 80139aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80139ac:	4293      	cmp	r3, r2
 80139ae:	d216      	bcs.n	80139de <xTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80139b0:	6982      	ldr	r2, [r0, #24]
 80139b2:	2a00      	cmp	r2, #0
 80139b4:	db05      	blt.n	80139c2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139b6:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 80139ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80139bc:	f1c2 0207 	rsb	r2, r2, #7
 80139c0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80139c2:	4e1d      	ldr	r6, [pc, #116]	@ (8013a38 <xTaskPriorityInherit+0x9c>)
 80139c4:	6962      	ldr	r2, [r4, #20]
 80139c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80139ca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d00e      	beq.n	80139f0 <xTaskPriorityInherit+0x54>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80139d2:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80139d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 80139da:	2001      	movs	r0, #1
	}
 80139dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80139de:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80139e2:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80139e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139e6:	4298      	cmp	r0, r3
 80139e8:	bf2c      	ite	cs
 80139ea:	2000      	movcs	r0, #0
 80139ec:	2001      	movcc	r0, #1
	}
 80139ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139f0:	1d27      	adds	r7, r4, #4
 80139f2:	4638      	mov	r0, r7
 80139f4:	f7fe fb88 	bl	8012108 <uxListRemove>
 80139f8:	b940      	cbnz	r0, 8013a0c <xTaskPriorityInherit+0x70>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80139fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80139fc:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8013a00:	2201      	movs	r2, #1
 8013a02:	408a      	lsls	r2, r1
 8013a04:	ea23 0302 	bic.w	r3, r3, r2
 8013a08:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013a0c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013a10:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013a14:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013a16:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013a18:	2301      	movs	r3, #1
 8013a1a:	4083      	lsls	r3, r0
 8013a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013a20:	4313      	orrs	r3, r2
 8013a22:	4639      	mov	r1, r7
 8013a24:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8013a28:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8013a2c:	f7fe fb46 	bl	80120bc <vListInsertEnd>
 8013a30:	e7d3      	b.n	80139da <xTaskPriorityInherit+0x3e>
 8013a32:	bf00      	nop
 8013a34:	20003368 	.word	0x20003368
 8013a38:	20003384 	.word	0x20003384

08013a3c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8013a3c:	b318      	cbz	r0, 8013a86 <xTaskPriorityDisinherit+0x4a>
	{
 8013a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8013a40:	4d27      	ldr	r5, [pc, #156]	@ (8013ae0 <xTaskPriorityDisinherit+0xa4>)
 8013a42:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8013a46:	4283      	cmp	r3, r0
 8013a48:	4604      	mov	r4, r0
 8013a4a:	d008      	beq.n	8013a5e <xTaskPriorityDisinherit+0x22>
 8013a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a50:	f383 8811 	msr	BASEPRI, r3
 8013a54:	f3bf 8f6f 	isb	sy
 8013a58:	f3bf 8f4f 	dsb	sy
 8013a5c:	e7fe      	b.n	8013a5c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8013a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013a60:	b143      	cbz	r3, 8013a74 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013a62:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8013a64:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8013a66:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013a68:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8013a6a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013a6c:	d000      	beq.n	8013a70 <xTaskPriorityDisinherit+0x34>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013a6e:	b163      	cbz	r3, 8013a8a <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8013a70:	2000      	movs	r0, #0
	}
 8013a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a78:	f383 8811 	msr	BASEPRI, r3
 8013a7c:	f3bf 8f6f 	isb	sy
 8013a80:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8013a84:	e7fe      	b.n	8013a84 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8013a86:	2000      	movs	r0, #0
	}
 8013a88:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a8a:	1d07      	adds	r7, r0, #4
 8013a8c:	4638      	mov	r0, r7
 8013a8e:	f7fe fb3b 	bl	8012108 <uxListRemove>
 8013a92:	b970      	cbnz	r0, 8013ab2 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013a94:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013a96:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8013a9a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013a9e:	69db      	ldr	r3, [r3, #28]
 8013aa0:	b93b      	cbnz	r3, 8013ab2 <xTaskPriorityDisinherit+0x76>
 8013aa2:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	4082      	lsls	r2, r0
 8013aaa:	ea23 0302 	bic.w	r3, r3, r2
 8013aae:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013ab2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8013ab4:	f8d5 60b0 	ldr.w	r6, [r5, #176]	@ 0xb0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013ab8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013aba:	f1c3 0207 	rsb	r2, r3, #7
 8013abe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8013ac0:	4808      	ldr	r0, [pc, #32]	@ (8013ae4 <xTaskPriorityDisinherit+0xa8>)
 8013ac2:	2401      	movs	r4, #1
 8013ac4:	fa04 f203 	lsl.w	r2, r4, r3
 8013ac8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013acc:	4332      	orrs	r2, r6
 8013ace:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013ad2:	4639      	mov	r1, r7
 8013ad4:	f8c5 20b0 	str.w	r2, [r5, #176]	@ 0xb0
 8013ad8:	f7fe faf0 	bl	80120bc <vListInsertEnd>
					xReturn = pdTRUE;
 8013adc:	4620      	mov	r0, r4
	}
 8013ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ae0:	20003368 	.word	0x20003368
 8013ae4:	20003384 	.word	0x20003384

08013ae8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	d041      	beq.n	8013b70 <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 8013aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 8013aee:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8013af0:	4604      	mov	r4, r0
 8013af2:	b14b      	cbz	r3, 8013b08 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013af4:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013af6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013af8:	4281      	cmp	r1, r0
 8013afa:	bf38      	it	cc
 8013afc:	4601      	movcc	r1, r0
 8013afe:	428a      	cmp	r2, r1
 8013b00:	d001      	beq.n	8013b06 <vTaskPriorityDisinheritAfterTimeout+0x1e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	d009      	beq.n	8013b1a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8013b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b0c:	f383 8811 	msr	BASEPRI, r3
 8013b10:	f3bf 8f6f 	isb	sy
 8013b14:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8013b18:	e7fe      	b.n	8013b18 <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 8013b1a:	4d1f      	ldr	r5, [pc, #124]	@ (8013b98 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8013b1c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8013b20:	42a3      	cmp	r3, r4
 8013b22:	d026      	beq.n	8013b72 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013b24:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8013b26:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013b28:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b2a:	bfa8      	it	ge
 8013b2c:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013b30:	4e1a      	ldr	r6, [pc, #104]	@ (8013b9c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b32:	bfa8      	it	ge
 8013b34:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013b36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8013b3a:	6961      	ldr	r1, [r4, #20]
 8013b3c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8013b40:	4299      	cmp	r1, r3
 8013b42:	d1e0      	bne.n	8013b06 <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b44:	1d27      	adds	r7, r4, #4
 8013b46:	4638      	mov	r0, r7
 8013b48:	f7fe fade 	bl	8012108 <uxListRemove>
 8013b4c:	b1d0      	cbz	r0, 8013b84 <vTaskPriorityDisinheritAfterTimeout+0x9c>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013b4e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
						prvAddTaskToReadyList( pxTCB );
 8013b50:	2301      	movs	r3, #1
 8013b52:	4083      	lsls	r3, r0
 8013b54:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 8013b58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013b5c:	4313      	orrs	r3, r2
 8013b5e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8013b62:	4639      	mov	r1, r7
 8013b64:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
	}
 8013b68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8013b6c:	f7fe baa6 	b.w	80120bc <vListInsertEnd>
 8013b70:	4770      	bx	lr
 8013b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b76:	f383 8811 	msr	BASEPRI, r3
 8013b7a:	f3bf 8f6f 	isb	sy
 8013b7e:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8013b82:	e7fe      	b.n	8013b82 <vTaskPriorityDisinheritAfterTimeout+0x9a>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013b84:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013b86:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	4083      	lsls	r3, r0
 8013b8e:	ea22 0203 	bic.w	r2, r2, r3
 8013b92:	f8c5 20b0 	str.w	r2, [r5, #176]	@ 0xb0
 8013b96:	e7dd      	b.n	8013b54 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8013b98:	20003368 	.word	0x20003368
 8013b9c:	20003384 	.word	0x20003384

08013ba0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8013ba0:	4b05      	ldr	r3, [pc, #20]	@ (8013bb8 <pvTaskIncrementMutexHeldCount+0x18>)
 8013ba2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8013ba6:	b122      	cbz	r2, 8013bb2 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
 8013ba8:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
 8013bac:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8013bae:	3201      	adds	r2, #1
 8013bb0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8013bb2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
	}
 8013bb6:	4770      	bx	lr
 8013bb8:	20003368 	.word	0x20003368

08013bbc <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bbe:	4e1f      	ldr	r6, [pc, #124]	@ (8013c3c <prvSwitchTimerLists+0x80>)
 8013bc0:	b085      	sub	sp, #20

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013bc2:	e00d      	b.n	8013be0 <prvSwitchTimerLists+0x24>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013bc4:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bc6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013bc8:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013bca:	1d25      	adds	r5, r4, #4
 8013bcc:	4628      	mov	r0, r5
 8013bce:	f7fe fa9b 	bl	8012108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013bd2:	6a23      	ldr	r3, [r4, #32]
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013bd8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013bdc:	075b      	lsls	r3, r3, #29
 8013bde:	d408      	bmi.n	8013bf2 <prvSwitchTimerLists+0x36>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013be0:	6833      	ldr	r3, [r6, #0]
 8013be2:	681a      	ldr	r2, [r3, #0]
 8013be4:	2a00      	cmp	r2, #0
 8013be6:	d1ed      	bne.n	8013bc4 <prvSwitchTimerLists+0x8>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8013be8:	68b2      	ldr	r2, [r6, #8]
 8013bea:	6032      	str	r2, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8013bec:	60b3      	str	r3, [r6, #8]
}
 8013bee:	b005      	add	sp, #20
 8013bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013bf2:	69a3      	ldr	r3, [r4, #24]
 8013bf4:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8013bf6:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013bf8:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8013bfa:	d205      	bcs.n	8013c08 <prvSwitchTimerLists+0x4c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013bfc:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013bfe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013c00:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013c02:	f7fe fa69 	bl	80120d8 <vListInsert>
 8013c06:	e7eb      	b.n	8013be0 <prvSwitchTimerLists+0x24>
	if( xTimerQueue != NULL )
 8013c08:	6873      	ldr	r3, [r6, #4]
		xMessage.xMessageID = xCommandID;
 8013c0a:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
 8013c0c:	b163      	cbz	r3, 8013c28 <prvSwitchTimerLists+0x6c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013c0e:	e9cd 5701 	strd	r5, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013c12:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013c14:	f7ff feb2 	bl	801397c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013c18:	6870      	ldr	r0, [r6, #4]
 8013c1a:	462b      	mov	r3, r5
 8013c1c:	462a      	mov	r2, r5
 8013c1e:	a901      	add	r1, sp, #4
 8013c20:	f7fe fb44 	bl	80122ac <xQueueGenericSend>
				configASSERT( xResult );
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d1db      	bne.n	8013be0 <prvSwitchTimerLists+0x24>
 8013c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c2c:	f383 8811 	msr	BASEPRI, r3
 8013c30:	f3bf 8f6f 	isb	sy
 8013c34:	f3bf 8f4f 	dsb	sy
 8013c38:	e7fe      	b.n	8013c38 <prvSwitchTimerLists+0x7c>
 8013c3a:	bf00      	nop
 8013c3c:	20003494 	.word	0x20003494

08013c40 <prvTimerTask>:
{
 8013c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c44:	4c8f      	ldr	r4, [pc, #572]	@ (8013e84 <prvTimerTask+0x244>)
 8013c46:	b086      	sub	sp, #24
					portYIELD_WITHIN_API();
 8013c48:	f04f 27e0 	mov.w	r7, #3758153728	@ 0xe000e000
 8013c4c:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013c50:	6823      	ldr	r3, [r4, #0]
 8013c52:	681e      	ldr	r6, [r3, #0]
 8013c54:	2e00      	cmp	r6, #0
 8013c56:	f000 809b 	beq.w	8013d90 <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 8013c5e:	f7ff fcef 	bl	8013640 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8013c62:	f7ff fd09 	bl	8013678 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8013c66:	68e3      	ldr	r3, [r4, #12]
 8013c68:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8013c6a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8013c6c:	f200 809f 	bhi.w	8013dae <prvTimerTask+0x16e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013c70:	4286      	cmp	r6, r0
	xLastTime = xTimeNow;
 8013c72:	60e0      	str	r0, [r4, #12]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013c74:	f240 80a4 	bls.w	8013dc0 <prvTimerTask+0x180>
 8013c78:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013c7a:	6860      	ldr	r0, [r4, #4]
 8013c7c:	1b71      	subs	r1, r6, r5
 8013c7e:	f7ff f8cf 	bl	8012e20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013c82:	f7ff fce7 	bl	8013654 <xTaskResumeAll>
 8013c86:	b928      	cbnz	r0, 8013c94 <prvTimerTask+0x54>
					portYIELD_WITHIN_API();
 8013c88:	f8c7 8d04 	str.w	r8, [r7, #3332]	@ 0xd04
 8013c8c:	f3bf 8f4f 	dsb	sy
 8013c90:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013c94:	6860      	ldr	r0, [r4, #4]
 8013c96:	2200      	movs	r2, #0
 8013c98:	4669      	mov	r1, sp
 8013c9a:	f7fe fd3f 	bl	801271c <xQueueReceive>
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	d0d6      	beq.n	8013c50 <prvTimerTask+0x10>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013ca2:	9b00      	ldr	r3, [sp, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	dbf5      	blt.n	8013c94 <prvTimerTask+0x54>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013ca8:	9d02      	ldr	r5, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013caa:	696b      	ldr	r3, [r5, #20]
 8013cac:	b113      	cbz	r3, 8013cb4 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013cae:	1d28      	adds	r0, r5, #4
 8013cb0:	f7fe fa2a 	bl	8012108 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8013cb4:	f7ff fce0 	bl	8013678 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8013cb8:	68e3      	ldr	r3, [r4, #12]
 8013cba:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8013cbc:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8013cbe:	d37c      	bcc.n	8013dba <prvTimerTask+0x17a>
			switch( xMessage.xMessageID )
 8013cc0:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
 8013cc2:	60e6      	str	r6, [r4, #12]
			switch( xMessage.xMessageID )
 8013cc4:	2b09      	cmp	r3, #9
 8013cc6:	d8e5      	bhi.n	8013c94 <prvTimerTask+0x54>
 8013cc8:	e8df f003 	tbb	[pc, r3]
 8013ccc:	52050505 	.word	0x52050505
 8013cd0:	0505593c 	.word	0x0505593c
 8013cd4:	3c52      	.short	0x3c52
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013cd6:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013cda:	9b01      	ldr	r3, [sp, #4]
 8013cdc:	69a9      	ldr	r1, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013cde:	612d      	str	r5, [r5, #16]
 8013ce0:	1858      	adds	r0, r3, r1
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013ce2:	f042 0201 	orr.w	r2, r2, #1
 8013ce6:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013cea:	bf2c      	ite	cs
 8013cec:	2201      	movcs	r2, #1
 8013cee:	2200      	movcc	r2, #0
	if( xNextExpiryTime <= xTimeNow )
 8013cf0:	42b0      	cmp	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013cf2:	6068      	str	r0, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 8013cf4:	d87c      	bhi.n	8013df0 <prvTimerTask+0x1b0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cf6:	1af3      	subs	r3, r6, r3
 8013cf8:	4299      	cmp	r1, r3
 8013cfa:	f200 8094 	bhi.w	8013e26 <prvTimerTask+0x1e6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013cfe:	6a2b      	ldr	r3, [r5, #32]
 8013d00:	4628      	mov	r0, r5
 8013d02:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013d04:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8013d08:	0759      	lsls	r1, r3, #29
 8013d0a:	d5c3      	bpl.n	8013c94 <prvTimerTask+0x54>
	if( xTimerQueue != NULL )
 8013d0c:	6861      	ldr	r1, [r4, #4]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013d0e:	9b01      	ldr	r3, [sp, #4]
 8013d10:	69aa      	ldr	r2, [r5, #24]
	if( xTimerQueue != NULL )
 8013d12:	b171      	cbz	r1, 8013d32 <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013d14:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013d16:	e9cd 3504 	strd	r3, r5, [sp, #16]
		xMessage.xMessageID = xCommandID;
 8013d1a:	2500      	movs	r5, #0
 8013d1c:	9503      	str	r5, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013d1e:	f7ff fe2d 	bl	801397c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013d22:	6860      	ldr	r0, [r4, #4]
 8013d24:	462b      	mov	r3, r5
 8013d26:	462a      	mov	r2, r5
 8013d28:	a903      	add	r1, sp, #12
 8013d2a:	f7fe fabf 	bl	80122ac <xQueueGenericSend>
							configASSERT( xResult );
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d1b0      	bne.n	8013c94 <prvTimerTask+0x54>
 8013d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d36:	f383 8811 	msr	BASEPRI, r3
 8013d3a:	f3bf 8f6f 	isb	sy
 8013d3e:	f3bf 8f4f 	dsb	sy
 8013d42:	e7fe      	b.n	8013d42 <prvTimerTask+0x102>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013d44:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013d48:	9b01      	ldr	r3, [sp, #4]
 8013d4a:	61ab      	str	r3, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013d4c:	f042 0201 	orr.w	r2, r2, #1
 8013d50:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f000 808c 	beq.w	8013e72 <prvTimerTask+0x232>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013d5a:	4433      	add	r3, r6
	if( xNextExpiryTime <= xTimeNow )
 8013d5c:	42b3      	cmp	r3, r6
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013d5e:	bf94      	ite	ls
 8013d60:	68a0      	ldrls	r0, [r4, #8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d62:	6820      	ldrhi	r0, [r4, #0]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013d64:	606b      	str	r3, [r5, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d66:	612d      	str	r5, [r5, #16]
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d68:	1d29      	adds	r1, r5, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d6a:	f7fe f9b5 	bl	80120d8 <vListInsert>
 8013d6e:	e791      	b.n	8013c94 <prvTimerTask+0x54>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d70:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8013d74:	f023 0301 	bic.w	r3, r3, #1
 8013d78:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
					break;
 8013d7c:	e78a      	b.n	8013c94 <prvTimerTask+0x54>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013d7e:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8013d82:	079a      	lsls	r2, r3, #30
 8013d84:	d53d      	bpl.n	8013e02 <prvTimerTask+0x1c2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d86:	f023 0301 	bic.w	r3, r3, #1
 8013d8a:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
 8013d8e:	e781      	b.n	8013c94 <prvTimerTask+0x54>
	vTaskSuspendAll();
 8013d90:	f7ff fc56 	bl	8013640 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8013d94:	f7ff fc70 	bl	8013678 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8013d98:	68e3      	ldr	r3, [r4, #12]
 8013d9a:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8013d9c:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8013d9e:	d306      	bcc.n	8013dae <prvTimerTask+0x16e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013da0:	68a3      	ldr	r3, [r4, #8]
	xLastTime = xTimeNow;
 8013da2:	60e5      	str	r5, [r4, #12]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	fab2 f282 	clz	r2, r2
 8013daa:	0952      	lsrs	r2, r2, #5
 8013dac:	e765      	b.n	8013c7a <prvTimerTask+0x3a>
		prvSwitchTimerLists();
 8013dae:	f7ff ff05 	bl	8013bbc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8013db2:	60e5      	str	r5, [r4, #12]
			( void ) xTaskResumeAll();
 8013db4:	f7ff fc4e 	bl	8013654 <xTaskResumeAll>
 8013db8:	e76c      	b.n	8013c94 <prvTimerTask+0x54>
		prvSwitchTimerLists();
 8013dba:	f7ff feff 	bl	8013bbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013dbe:	e77f      	b.n	8013cc0 <prvTimerTask+0x80>
				( void ) xTaskResumeAll();
 8013dc0:	f7ff fc48 	bl	8013654 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013dc4:	6823      	ldr	r3, [r4, #0]
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013dcc:	f109 0a04 	add.w	sl, r9, #4
 8013dd0:	4650      	mov	r0, sl
 8013dd2:	f7fe f999 	bl	8012108 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013dd6:	f899 3028 	ldrb.w	r3, [r9, #40]	@ 0x28
 8013dda:	0758      	lsls	r0, r3, #29
 8013ddc:	d415      	bmi.n	8013e0a <prvTimerTask+0x1ca>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013dde:	f023 0301 	bic.w	r3, r3, #1
 8013de2:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013de6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013dea:	4648      	mov	r0, r9
 8013dec:	4798      	blx	r3
}
 8013dee:	e751      	b.n	8013c94 <prvTimerTask+0x54>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013df0:	42b3      	cmp	r3, r6
 8013df2:	d901      	bls.n	8013df8 <prvTimerTask+0x1b8>
 8013df4:	2a00      	cmp	r2, #0
 8013df6:	d082      	beq.n	8013cfe <prvTimerTask+0xbe>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013df8:	6820      	ldr	r0, [r4, #0]
 8013dfa:	1d29      	adds	r1, r5, #4
 8013dfc:	f7fe f96c 	bl	80120d8 <vListInsert>
	return xProcessTimerNow;
 8013e00:	e748      	b.n	8013c94 <prvTimerTask+0x54>
							vPortFree( pxTimer );
 8013e02:	4628      	mov	r0, r5
 8013e04:	f000 f9be 	bl	8014184 <vPortFree>
 8013e08:	e744      	b.n	8013c94 <prvTimerTask+0x54>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013e0a:	f8d9 2018 	ldr.w	r2, [r9, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013e0e:	f8c9 9010 	str.w	r9, [r9, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013e12:	18b3      	adds	r3, r6, r2
	if( xNextExpiryTime <= xTimeNow )
 8013e14:	42ab      	cmp	r3, r5
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013e16:	f8c9 3004 	str.w	r3, [r9, #4]
	if( xNextExpiryTime <= xTimeNow )
 8013e1a:	d909      	bls.n	8013e30 <prvTimerTask+0x1f0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013e1c:	6820      	ldr	r0, [r4, #0]
 8013e1e:	4651      	mov	r1, sl
 8013e20:	f7fe f95a 	bl	80120d8 <vListInsert>
	return xProcessTimerNow;
 8013e24:	e7df      	b.n	8013de6 <prvTimerTask+0x1a6>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013e26:	68a0      	ldr	r0, [r4, #8]
 8013e28:	1d29      	adds	r1, r5, #4
 8013e2a:	f7fe f955 	bl	80120d8 <vListInsert>
	return xProcessTimerNow;
 8013e2e:	e731      	b.n	8013c94 <prvTimerTask+0x54>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e30:	1bad      	subs	r5, r5, r6
 8013e32:	42aa      	cmp	r2, r5
 8013e34:	d818      	bhi.n	8013e68 <prvTimerTask+0x228>
	if( xTimerQueue != NULL )
 8013e36:	6863      	ldr	r3, [r4, #4]
 8013e38:	b16b      	cbz	r3, 8013e56 <prvTimerTask+0x216>
		xMessage.xMessageID = xCommandID;
 8013e3a:	2500      	movs	r5, #0
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013e3c:	e9cd 6904 	strd	r6, r9, [sp, #16]
		xMessage.xMessageID = xCommandID;
 8013e40:	9503      	str	r5, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013e42:	f7ff fd9b 	bl	801397c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013e46:	6860      	ldr	r0, [r4, #4]
 8013e48:	462b      	mov	r3, r5
 8013e4a:	462a      	mov	r2, r5
 8013e4c:	a903      	add	r1, sp, #12
 8013e4e:	f7fe fa2d 	bl	80122ac <xQueueGenericSend>
			configASSERT( xResult );
 8013e52:	2800      	cmp	r0, #0
 8013e54:	d1c7      	bne.n	8013de6 <prvTimerTask+0x1a6>
 8013e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e5a:	f383 8811 	msr	BASEPRI, r3
 8013e5e:	f3bf 8f6f 	isb	sy
 8013e62:	f3bf 8f4f 	dsb	sy
 8013e66:	e7fe      	b.n	8013e66 <prvTimerTask+0x226>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013e68:	68a0      	ldr	r0, [r4, #8]
 8013e6a:	4651      	mov	r1, sl
 8013e6c:	f7fe f934 	bl	80120d8 <vListInsert>
	return xProcessTimerNow;
 8013e70:	e7b9      	b.n	8013de6 <prvTimerTask+0x1a6>
 8013e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e76:	f383 8811 	msr	BASEPRI, r3
 8013e7a:	f3bf 8f6f 	isb	sy
 8013e7e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013e82:	e7fe      	b.n	8013e82 <prvTimerTask+0x242>
 8013e84:	20003494 	.word	0x20003494

08013e88 <xTimerCreateTimerTask>:
{
 8013e88:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8013e8a:	4c1c      	ldr	r4, [pc, #112]	@ (8013efc <xTimerCreateTimerTask+0x74>)
{
 8013e8c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8013e8e:	f000 fa39 	bl	8014304 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8013e92:	6865      	ldr	r5, [r4, #4]
 8013e94:	b1d5      	cbz	r5, 8013ecc <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e96:	f000 fa57 	bl	8014348 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8013e9a:	6863      	ldr	r3, [r4, #4]
 8013e9c:	b15b      	cbz	r3, 8013eb6 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
 8013e9e:	4a18      	ldr	r2, [pc, #96]	@ (8013f00 <xTimerCreateTimerTask+0x78>)
 8013ea0:	4918      	ldr	r1, [pc, #96]	@ (8013f04 <xTimerCreateTimerTask+0x7c>)
 8013ea2:	4819      	ldr	r0, [pc, #100]	@ (8013f08 <xTimerCreateTimerTask+0x80>)
 8013ea4:	2306      	movs	r3, #6
 8013ea6:	e9cd 3200 	strd	r3, r2, [sp]
 8013eaa:	2300      	movs	r3, #0
 8013eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013eb0:	f7ff f9aa 	bl	8013208 <xTaskCreate>
	configASSERT( xReturn );
 8013eb4:	b940      	cbnz	r0, 8013ec8 <xTimerCreateTimerTask+0x40>
 8013eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eba:	f383 8811 	msr	BASEPRI, r3
 8013ebe:	f3bf 8f6f 	isb	sy
 8013ec2:	f3bf 8f4f 	dsb	sy
 8013ec6:	e7fe      	b.n	8013ec6 <xTimerCreateTimerTask+0x3e>
}
 8013ec8:	b003      	add	sp, #12
 8013eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 8013ecc:	f104 0710 	add.w	r7, r4, #16
 8013ed0:	4638      	mov	r0, r7
			vListInitialise( &xActiveTimerList2 );
 8013ed2:	f104 0624 	add.w	r6, r4, #36	@ 0x24
			vListInitialise( &xActiveTimerList1 );
 8013ed6:	f7fe f8e1 	bl	801209c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013eda:	4630      	mov	r0, r6
 8013edc:	f7fe f8de 	bl	801209c <vListInitialise>
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8013ee0:	462a      	mov	r2, r5
 8013ee2:	210c      	movs	r1, #12
 8013ee4:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 8013ee6:	6027      	str	r7, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013ee8:	60a6      	str	r6, [r4, #8]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8013eea:	f7fe f95b 	bl	80121a4 <xQueueGenericCreate>
 8013eee:	6060      	str	r0, [r4, #4]
				if( xTimerQueue != NULL )
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d0d0      	beq.n	8013e96 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013ef4:	4905      	ldr	r1, [pc, #20]	@ (8013f0c <xTimerCreateTimerTask+0x84>)
 8013ef6:	f7fe ff7d 	bl	8012df4 <vQueueAddToRegistry>
 8013efa:	e7cc      	b.n	8013e96 <xTimerCreateTimerTask+0xe>
 8013efc:	20003494 	.word	0x20003494
 8013f00:	200034cc 	.word	0x200034cc
 8013f04:	08017638 	.word	0x08017638
 8013f08:	08013c41 	.word	0x08013c41
 8013f0c:	08017630 	.word	0x08017630

08013f10 <xTimerCreate>:
	{
 8013f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f14:	4607      	mov	r7, r0
 8013f16:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8013f18:	202c      	movs	r0, #44	@ 0x2c
	{
 8013f1a:	4688      	mov	r8, r1
 8013f1c:	4616      	mov	r6, r2
 8013f1e:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8013f20:	f000 f884 	bl	801402c <pvPortMalloc>
		if( pxNewTimer != NULL )
 8013f24:	4604      	mov	r4, r0
 8013f26:	b1e8      	cbz	r0, 8013f64 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8013f2e:	f1b8 0f00 	cmp.w	r8, #0
 8013f32:	d01b      	beq.n	8013f6c <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 8013f34:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 8013fbc <xTimerCreate+0xac>
	taskENTER_CRITICAL();
 8013f38:	f000 f9e4 	bl	8014304 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8013f3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013f40:	b1ea      	cbz	r2, 8013f7e <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 8013f42:	f000 fa01 	bl	8014348 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8013f46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
		pxNewTimer->pcTimerName = pcTimerName;
 8013f48:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 8013f4a:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8013f4e:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8013f50:	1d20      	adds	r0, r4, #4
 8013f52:	f7fe f8af 	bl	80120b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8013f56:	b12e      	cbz	r6, 8013f64 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8013f58:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013f5c:	f043 0304 	orr.w	r3, r3, #4
 8013f60:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 8013f64:	4620      	mov	r0, r4
 8013f66:	b003      	add	sp, #12
 8013f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f70:	f383 8811 	msr	BASEPRI, r3
 8013f74:	f3bf 8f6f 	isb	sy
 8013f78:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8013f7c:	e7fe      	b.n	8013f7c <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 8013f7e:	f109 0b10 	add.w	fp, r9, #16
 8013f82:	4658      	mov	r0, fp
			vListInitialise( &xActiveTimerList2 );
 8013f84:	f109 0a24 	add.w	sl, r9, #36	@ 0x24
 8013f88:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
 8013f8a:	f7fe f887 	bl	801209c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013f8e:	4650      	mov	r0, sl
 8013f90:	f7fe f884 	bl	801209c <vListInitialise>
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8013f94:	9a01      	ldr	r2, [sp, #4]
			pxCurrentTimerList = &xActiveTimerList1;
 8013f96:	f8c9 b000 	str.w	fp, [r9]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8013f9a:	210c      	movs	r1, #12
 8013f9c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8013f9e:	f8c9 a008 	str.w	sl, [r9, #8]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8013fa2:	f7fe f8ff 	bl	80121a4 <xQueueGenericCreate>
 8013fa6:	f8c9 0004 	str.w	r0, [r9, #4]
				if( xTimerQueue != NULL )
 8013faa:	2800      	cmp	r0, #0
 8013fac:	d0c9      	beq.n	8013f42 <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013fae:	4902      	ldr	r1, [pc, #8]	@ (8013fb8 <xTimerCreate+0xa8>)
 8013fb0:	f7fe ff20 	bl	8012df4 <vQueueAddToRegistry>
 8013fb4:	e7c5      	b.n	8013f42 <xTimerCreate+0x32>
 8013fb6:	bf00      	nop
 8013fb8:	08017630 	.word	0x08017630
 8013fbc:	20003494 	.word	0x20003494

08013fc0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8013fc0:	b1c0      	cbz	r0, 8013ff4 <xTimerGenericCommand+0x34>
{
 8013fc2:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8013fc4:	4d18      	ldr	r5, [pc, #96]	@ (8014028 <xTimerGenericCommand+0x68>)
 8013fc6:	686c      	ldr	r4, [r5, #4]
{
 8013fc8:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8013fca:	b184      	cbz	r4, 8013fee <xTimerGenericCommand+0x2e>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013fcc:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8013fce:	e9cd 1201 	strd	r1, r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013fd2:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013fd4:	dc17      	bgt.n	8014006 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013fd6:	f7ff fcd1 	bl	801397c <xTaskGetSchedulerState>
 8013fda:	2802      	cmp	r0, #2
 8013fdc:	d01c      	beq.n	8014018 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013fde:	2300      	movs	r3, #0
 8013fe0:	6868      	ldr	r0, [r5, #4]
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	a901      	add	r1, sp, #4
 8013fe6:	f7fe f961 	bl	80122ac <xQueueGenericSend>
}
 8013fea:	b005      	add	sp, #20
 8013fec:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8013fee:	4620      	mov	r0, r4
}
 8013ff0:	b005      	add	sp, #20
 8013ff2:	bd30      	pop	{r4, r5, pc}
 8013ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ff8:	f383 8811 	msr	BASEPRI, r3
 8013ffc:	f3bf 8f6f 	isb	sy
 8014000:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8014004:	e7fe      	b.n	8014004 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014006:	469c      	mov	ip, r3
 8014008:	4662      	mov	r2, ip
 801400a:	2300      	movs	r3, #0
 801400c:	a901      	add	r1, sp, #4
 801400e:	4620      	mov	r0, r4
 8014010:	f7fe facc 	bl	80125ac <xQueueGenericSendFromISR>
}
 8014014:	b005      	add	sp, #20
 8014016:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014018:	6868      	ldr	r0, [r5, #4]
 801401a:	9a08      	ldr	r2, [sp, #32]
 801401c:	2300      	movs	r3, #0
 801401e:	a901      	add	r1, sp, #4
 8014020:	f7fe f944 	bl	80122ac <xQueueGenericSend>
 8014024:	e7e4      	b.n	8013ff0 <xTimerGenericCommand+0x30>
 8014026:	bf00      	nop
 8014028:	20003494 	.word	0x20003494

0801402c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801402c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014030:	4c51      	ldr	r4, [pc, #324]	@ (8014178 <pvPortMalloc+0x14c>)
{
 8014032:	4607      	mov	r7, r0
	vTaskSuspendAll();
 8014034:	f7ff fb04 	bl	8013640 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8014038:	68a5      	ldr	r5, [r4, #8]
 801403a:	2d00      	cmp	r5, #0
 801403c:	d034      	beq.n	80140a8 <pvPortMalloc+0x7c>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801403e:	68e6      	ldr	r6, [r4, #12]
 8014040:	4237      	tst	r7, r6
 8014042:	d12b      	bne.n	801409c <pvPortMalloc+0x70>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014044:	b357      	cbz	r7, 801409c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8014046:	f107 0008 	add.w	r0, r7, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801404a:	077a      	lsls	r2, r7, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801404c:	bf1c      	itt	ne
 801404e:	f020 0007 	bicne.w	r0, r0, #7
 8014052:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014054:	b310      	cbz	r0, 801409c <pvPortMalloc+0x70>
 8014056:	f8d4 e014 	ldr.w	lr, [r4, #20]
 801405a:	4586      	cmp	lr, r0
 801405c:	d31e      	bcc.n	801409c <pvPortMalloc+0x70>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 801405e:	6823      	ldr	r3, [r4, #0]
				pxPreviousBlock = &xStart;
 8014060:	4f45      	ldr	r7, [pc, #276]	@ (8014178 <pvPortMalloc+0x14c>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014062:	e003      	b.n	801406c <pvPortMalloc+0x40>
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	b122      	cbz	r2, 8014072 <pvPortMalloc+0x46>
 8014068:	461f      	mov	r7, r3
 801406a:	4613      	mov	r3, r2
 801406c:	6859      	ldr	r1, [r3, #4]
 801406e:	4281      	cmp	r1, r0
 8014070:	d3f8      	bcc.n	8014064 <pvPortMalloc+0x38>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014072:	42ab      	cmp	r3, r5
 8014074:	d012      	beq.n	801409c <pvPortMalloc+0x70>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	603a      	str	r2, [r7, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801407a:	1a0a      	subs	r2, r1, r0
 801407c:	2a10      	cmp	r2, #16
 801407e:	d947      	bls.n	8014110 <pvPortMalloc+0xe4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014080:	eb03 0c00 	add.w	ip, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014084:	f01c 0f07 	tst.w	ip, #7
 8014088:	d028      	beq.n	80140dc <pvPortMalloc+0xb0>
 801408a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801408e:	f383 8811 	msr	BASEPRI, r3
 8014092:	f3bf 8f6f 	isb	sy
 8014096:	f3bf 8f4f 	dsb	sy
 801409a:	e7fe      	b.n	801409a <pvPortMalloc+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801409c:	f7ff fada 	bl	8013654 <xTaskResumeAll>
void *pvReturn = NULL;
 80140a0:	2500      	movs	r5, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80140a2:	4628      	mov	r0, r5
 80140a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80140a8:	4b34      	ldr	r3, [pc, #208]	@ (801417c <pvPortMalloc+0x150>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 80140aa:	4d35      	ldr	r5, [pc, #212]	@ (8014180 <pvPortMalloc+0x154>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80140ac:	0759      	lsls	r1, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80140ae:	bf18      	it	ne
 80140b0:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80140b2:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80140b6:	bf18      	it	ne
 80140b8:	f023 0307 	bicne.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80140bc:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80140be:	e9c4 3100 	strd	r3, r1, [r4]
 80140c2:	461a      	mov	r2, r3
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80140c4:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80140c8:	1aeb      	subs	r3, r5, r3
	pxEnd->pxNextFreeBlock = NULL;
 80140ca:	e9c5 1100 	strd	r1, r1, [r5]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80140ce:	e9c4 3304 	strd	r3, r3, [r4, #16]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80140d2:	e9c2 5300 	strd	r5, r3, [r2]
	pxEnd = ( void * ) uxAddress;
 80140d6:	60a5      	str	r5, [r4, #8]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80140d8:	60e6      	str	r6, [r4, #12]
}
 80140da:	e7b1      	b.n	8014040 <pvPortMalloc+0x14>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80140dc:	f8cc 2004 	str.w	r2, [ip, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80140e0:	4a25      	ldr	r2, [pc, #148]	@ (8014178 <pvPortMalloc+0x14c>)
						pxBlock->xBlockSize = xWantedSize;
 80140e2:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80140e4:	4617      	mov	r7, r2
 80140e6:	6812      	ldr	r2, [r2, #0]
 80140e8:	4594      	cmp	ip, r2
 80140ea:	d8fb      	bhi.n	80140e4 <pvPortMalloc+0xb8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80140ec:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80140ee:	f8dc 8004 	ldr.w	r8, [ip, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80140f2:	eb07 0901 	add.w	r9, r7, r1
 80140f6:	45cc      	cmp	ip, r9
 80140f8:	d027      	beq.n	801414a <pvPortMalloc+0x11e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80140fa:	eb0c 0108 	add.w	r1, ip, r8
 80140fe:	428a      	cmp	r2, r1
 8014100:	d02d      	beq.n	801415e <pvPortMalloc+0x132>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014102:	f8cc 2000 	str.w	r2, [ip]
 8014106:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014108:	4567      	cmp	r7, ip
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801410a:	bf18      	it	ne
 801410c:	f8c7 c000 	strne.w	ip, [r7]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014110:	6920      	ldr	r0, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014112:	ebae 0201 	sub.w	r2, lr, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014116:	4282      	cmp	r2, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014118:	bf38      	it	cc
 801411a:	6122      	strcc	r2, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801411c:	6162      	str	r2, [r4, #20]
					xNumberOfSuccessfulAllocations++;
 801411e:	69a2      	ldr	r2, [r4, #24]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014120:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 8014122:	2000      	movs	r0, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014124:	f103 0508 	add.w	r5, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014128:	6059      	str	r1, [r3, #4]
					xNumberOfSuccessfulAllocations++;
 801412a:	3201      	adds	r2, #1
					pxBlock->pxNextFreeBlock = NULL;
 801412c:	6018      	str	r0, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801412e:	61a2      	str	r2, [r4, #24]
	( void ) xTaskResumeAll();
 8014130:	f7ff fa90 	bl	8013654 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014134:	076b      	lsls	r3, r5, #29
 8014136:	d0b4      	beq.n	80140a2 <pvPortMalloc+0x76>
 8014138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801413c:	f383 8811 	msr	BASEPRI, r3
 8014140:	f3bf 8f6f 	isb	sy
 8014144:	f3bf 8f4f 	dsb	sy
 8014148:	e7fe      	b.n	8014148 <pvPortMalloc+0x11c>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801414a:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801414c:	eb07 0108 	add.w	r1, r7, r8
 8014150:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014152:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014156:	d001      	beq.n	801415c <pvPortMalloc+0x130>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014158:	6859      	ldr	r1, [r3, #4]
 801415a:	e7d9      	b.n	8014110 <pvPortMalloc+0xe4>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801415c:	46bc      	mov	ip, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801415e:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014160:	bf1c      	itt	ne
 8014162:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014164:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014166:	f8cc 2000 	str.w	r2, [ip]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801416a:	bf1c      	itt	ne
 801416c:	4441      	addne	r1, r8
 801416e:	f8cc 1004 	strne.w	r1, [ip, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014172:	6859      	ldr	r1, [r3, #4]
 8014174:	e7c8      	b.n	8014108 <pvPortMalloc+0xdc>
 8014176:	bf00      	nop
 8014178:	200034d0 	.word	0x200034d0
 801417c:	200034f0 	.word	0x200034f0
 8014180:	200068e8 	.word	0x200068e8

08014184 <vPortFree>:
	if( pv != NULL )
 8014184:	b1e0      	cbz	r0, 80141c0 <vPortFree+0x3c>
{
 8014186:	b5f0      	push	{r4, r5, r6, r7, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014188:	4c2b      	ldr	r4, [pc, #172]	@ (8014238 <vPortFree+0xb4>)
 801418a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801418e:	68e2      	ldr	r2, [r4, #12]
 8014190:	4213      	tst	r3, r2
{
 8014192:	b083      	sub	sp, #12
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014194:	d00b      	beq.n	80141ae <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014196:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801419a:	b191      	cbz	r1, 80141c2 <vPortFree+0x3e>
 801419c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141a0:	f383 8811 	msr	BASEPRI, r3
 80141a4:	f3bf 8f6f 	isb	sy
 80141a8:	f3bf 8f4f 	dsb	sy
 80141ac:	e7fe      	b.n	80141ac <vPortFree+0x28>
 80141ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141b2:	f383 8811 	msr	BASEPRI, r3
 80141b6:	f3bf 8f6f 	isb	sy
 80141ba:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80141be:	e7fe      	b.n	80141be <vPortFree+0x3a>
 80141c0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80141c2:	ea23 0302 	bic.w	r3, r3, r2
 80141c6:	f840 3c04 	str.w	r3, [r0, #-4]
 80141ca:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80141cc:	f7ff fa38 	bl	8013640 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80141d0:	9801      	ldr	r0, [sp, #4]
 80141d2:	6963      	ldr	r3, [r4, #20]
 80141d4:	f850 6c04 	ldr.w	r6, [r0, #-4]
 80141d8:	4433      	add	r3, r6
 80141da:	6163      	str	r3, [r4, #20]
		puc -= xHeapStructSize;
 80141dc:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80141e0:	4623      	mov	r3, r4
 80141e2:	4619      	mov	r1, r3
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d8fb      	bhi.n	80141e2 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80141ea:	684f      	ldr	r7, [r1, #4]
 80141ec:	19cd      	adds	r5, r1, r7
 80141ee:	42aa      	cmp	r2, r5
 80141f0:	d010      	beq.n	8014214 <vPortFree+0x90>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80141f2:	eb02 0e06 	add.w	lr, r2, r6
 80141f6:	4573      	cmp	r3, lr
 80141f8:	d012      	beq.n	8014220 <vPortFree+0x9c>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80141fa:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 80141fe:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014200:	bf18      	it	ne
 8014202:	600a      	strne	r2, [r1, #0]
					xNumberOfSuccessfulFrees++;
 8014204:	69e3      	ldr	r3, [r4, #28]
 8014206:	3301      	adds	r3, #1
 8014208:	61e3      	str	r3, [r4, #28]
}
 801420a:	b003      	add	sp, #12
 801420c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				( void ) xTaskResumeAll();
 8014210:	f7ff ba20 	b.w	8013654 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014214:	443e      	add	r6, r7
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014216:	198a      	adds	r2, r1, r6
 8014218:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801421a:	604e      	str	r6, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801421c:	d1f2      	bne.n	8014204 <vPortFree+0x80>
 801421e:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014220:	68a0      	ldr	r0, [r4, #8]
 8014222:	4283      	cmp	r3, r0
 8014224:	d005      	beq.n	8014232 <vPortFree+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014226:	6858      	ldr	r0, [r3, #4]
 8014228:	eb00 0c06 	add.w	ip, r0, r6
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801422c:	6818      	ldr	r0, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801422e:	f8c2 c004 	str.w	ip, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014232:	6010      	str	r0, [r2, #0]
 8014234:	e7e3      	b.n	80141fe <vPortFree+0x7a>
 8014236:	bf00      	nop
 8014238:	200034d0 	.word	0x200034d0

0801423c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801423c:	4808      	ldr	r0, [pc, #32]	@ (8014260 <prvPortStartFirstTask+0x24>)
 801423e:	6800      	ldr	r0, [r0, #0]
 8014240:	6800      	ldr	r0, [r0, #0]
 8014242:	f380 8808 	msr	MSP, r0
 8014246:	f04f 0000 	mov.w	r0, #0
 801424a:	f380 8814 	msr	CONTROL, r0
 801424e:	b662      	cpsie	i
 8014250:	b661      	cpsie	f
 8014252:	f3bf 8f4f 	dsb	sy
 8014256:	f3bf 8f6f 	isb	sy
 801425a:	df00      	svc	0
 801425c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801425e:	0000      	.short	0x0000
 8014260:	e000ed08 	.word	0xe000ed08

08014264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014274 <vPortEnableVFP+0x10>
 8014268:	6801      	ldr	r1, [r0, #0]
 801426a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801426e:	6001      	str	r1, [r0, #0]
 8014270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014272:	0000      	.short	0x0000
 8014274:	e000ed88 	.word	0xe000ed88

08014278 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8014278:	4b0e      	ldr	r3, [pc, #56]	@ (80142b4 <prvTaskExitError+0x3c>)
 801427a:	681b      	ldr	r3, [r3, #0]
{
 801427c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801427e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8014280:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8014282:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8014284:	d008      	beq.n	8014298 <prvTaskExitError+0x20>
 8014286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801428a:	f383 8811 	msr	BASEPRI, r3
 801428e:	f3bf 8f6f 	isb	sy
 8014292:	f3bf 8f4f 	dsb	sy
 8014296:	e7fe      	b.n	8014296 <prvTaskExitError+0x1e>
 8014298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801429c:	f383 8811 	msr	BASEPRI, r3
 80142a0:	f3bf 8f6f 	isb	sy
 80142a4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80142a8:	9b01      	ldr	r3, [sp, #4]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d0fc      	beq.n	80142a8 <prvTaskExitError+0x30>
}
 80142ae:	b002      	add	sp, #8
 80142b0:	4770      	bx	lr
 80142b2:	bf00      	nop
 80142b4:	20000300 	.word	0x20000300

080142b8 <pxPortInitialiseStack>:
{
 80142b8:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80142ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80142be:	4c07      	ldr	r4, [pc, #28]	@ (80142dc <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80142c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80142c4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80142c8:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80142cc:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80142d0:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 80142d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142d8:	3844      	subs	r0, #68	@ 0x44
 80142da:	4770      	bx	lr
 80142dc:	08014279 	.word	0x08014279

080142e0 <SVC_Handler>:
	__asm volatile (
 80142e0:	4b07      	ldr	r3, [pc, #28]	@ (8014300 <pxCurrentTCBConst2>)
 80142e2:	6819      	ldr	r1, [r3, #0]
 80142e4:	6808      	ldr	r0, [r1, #0]
 80142e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ea:	f380 8809 	msr	PSP, r0
 80142ee:	f3bf 8f6f 	isb	sy
 80142f2:	f04f 0000 	mov.w	r0, #0
 80142f6:	f380 8811 	msr	BASEPRI, r0
 80142fa:	4770      	bx	lr
 80142fc:	f3af 8000 	nop.w

08014300 <pxCurrentTCBConst2>:
 8014300:	20003414 	.word	0x20003414

08014304 <vPortEnterCritical>:
 8014304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014308:	f383 8811 	msr	BASEPRI, r3
 801430c:	f3bf 8f6f 	isb	sy
 8014310:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8014314:	4a0b      	ldr	r2, [pc, #44]	@ (8014344 <vPortEnterCritical+0x40>)
 8014316:	6813      	ldr	r3, [r2, #0]
 8014318:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801431a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801431c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801431e:	d000      	beq.n	8014322 <vPortEnterCritical+0x1e>
}
 8014320:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014322:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8014326:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801432a:	b2db      	uxtb	r3, r3
 801432c:	2b00      	cmp	r3, #0
 801432e:	d0f7      	beq.n	8014320 <vPortEnterCritical+0x1c>
 8014330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014334:	f383 8811 	msr	BASEPRI, r3
 8014338:	f3bf 8f6f 	isb	sy
 801433c:	f3bf 8f4f 	dsb	sy
 8014340:	e7fe      	b.n	8014340 <vPortEnterCritical+0x3c>
 8014342:	bf00      	nop
 8014344:	20000300 	.word	0x20000300

08014348 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8014348:	4a08      	ldr	r2, [pc, #32]	@ (801436c <vPortExitCritical+0x24>)
 801434a:	6813      	ldr	r3, [r2, #0]
 801434c:	b943      	cbnz	r3, 8014360 <vPortExitCritical+0x18>
 801434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014352:	f383 8811 	msr	BASEPRI, r3
 8014356:	f3bf 8f6f 	isb	sy
 801435a:	f3bf 8f4f 	dsb	sy
 801435e:	e7fe      	b.n	801435e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8014360:	3b01      	subs	r3, #1
 8014362:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014364:	b90b      	cbnz	r3, 801436a <vPortExitCritical+0x22>
	__asm volatile
 8014366:	f383 8811 	msr	BASEPRI, r3
}
 801436a:	4770      	bx	lr
 801436c:	20000300 	.word	0x20000300

08014370 <PendSV_Handler>:
	__asm volatile
 8014370:	f3ef 8009 	mrs	r0, PSP
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	4b15      	ldr	r3, [pc, #84]	@ (80143d0 <pxCurrentTCBConst>)
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	f01e 0f10 	tst.w	lr, #16
 8014380:	bf08      	it	eq
 8014382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438a:	6010      	str	r0, [r2, #0]
 801438c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014394:	f380 8811 	msr	BASEPRI, r0
 8014398:	f3bf 8f4f 	dsb	sy
 801439c:	f3bf 8f6f 	isb	sy
 80143a0:	f7ff f980 	bl	80136a4 <vTaskSwitchContext>
 80143a4:	f04f 0000 	mov.w	r0, #0
 80143a8:	f380 8811 	msr	BASEPRI, r0
 80143ac:	bc09      	pop	{r0, r3}
 80143ae:	6819      	ldr	r1, [r3, #0]
 80143b0:	6808      	ldr	r0, [r1, #0]
 80143b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b6:	f01e 0f10 	tst.w	lr, #16
 80143ba:	bf08      	it	eq
 80143bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80143c0:	f380 8809 	msr	PSP, r0
 80143c4:	f3bf 8f6f 	isb	sy
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	f3af 8000 	nop.w

080143d0 <pxCurrentTCBConst>:
 80143d0:	20003414 	.word	0x20003414

080143d4 <xPortSysTickHandler>:
{
 80143d4:	b508      	push	{r3, lr}
	__asm volatile
 80143d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143da:	f383 8811 	msr	BASEPRI, r3
 80143de:	f3bf 8f6f 	isb	sy
 80143e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80143e6:	f7ff f94d 	bl	8013684 <xTaskIncrementTick>
 80143ea:	b128      	cbz	r0, 80143f8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80143ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80143f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80143f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80143f8:	2300      	movs	r3, #0
 80143fa:	f383 8811 	msr	BASEPRI, r3
}
 80143fe:	bd08      	pop	{r3, pc}

08014400 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014400:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8014404:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014406:	4906      	ldr	r1, [pc, #24]	@ (8014420 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014408:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801440a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801440c:	680b      	ldr	r3, [r1, #0]
 801440e:	4905      	ldr	r1, [pc, #20]	@ (8014424 <vPortSetupTimerInterrupt+0x24>)
 8014410:	fba1 1303 	umull	r1, r3, r1, r3
 8014414:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014416:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014418:	3b01      	subs	r3, #1
 801441a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801441c:	6110      	str	r0, [r2, #16]
}
 801441e:	4770      	bx	lr
 8014420:	200001e0 	.word	0x200001e0
 8014424:	10624dd3 	.word	0x10624dd3

08014428 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014428:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801442c:	4a47      	ldr	r2, [pc, #284]	@ (801454c <xPortStartScheduler+0x124>)
 801442e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8014432:	4291      	cmp	r1, r2
 8014434:	d040      	beq.n	80144b8 <xPortStartScheduler+0x90>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014436:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801443a:	4b45      	ldr	r3, [pc, #276]	@ (8014550 <xPortStartScheduler+0x128>)
 801443c:	429a      	cmp	r2, r3
 801443e:	d032      	beq.n	80144a6 <xPortStartScheduler+0x7e>
{
 8014440:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014442:	4b44      	ldr	r3, [pc, #272]	@ (8014554 <xPortStartScheduler+0x12c>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014444:	4844      	ldr	r0, [pc, #272]	@ (8014558 <xPortStartScheduler+0x130>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014446:	781a      	ldrb	r2, [r3, #0]
{
 8014448:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801444a:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801444c:	b2d2      	uxtb	r2, r2
 801444e:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014450:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	b2db      	uxtb	r3, r3
 8014456:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801445a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801445e:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014462:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014466:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014468:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801446a:	7003      	strb	r3, [r0, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801446c:	6041      	str	r1, [r0, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801446e:	bf48      	it	mi
 8014470:	2206      	movmi	r2, #6
 8014472:	d50f      	bpl.n	8014494 <xPortStartScheduler+0x6c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014474:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014478:	005b      	lsls	r3, r3, #1
 801447a:	b2db      	uxtb	r3, r3
 801447c:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014480:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014484:	061b      	lsls	r3, r3, #24
 8014486:	4611      	mov	r1, r2
 8014488:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 801448c:	d4f2      	bmi.n	8014474 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801448e:	2903      	cmp	r1, #3
 8014490:	d01b      	beq.n	80144ca <xPortStartScheduler+0xa2>
 8014492:	6041      	str	r1, [r0, #4]
	__asm volatile
 8014494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014498:	f383 8811 	msr	BASEPRI, r3
 801449c:	f3bf 8f6f 	isb	sy
 80144a0:	f3bf 8f4f 	dsb	sy
 80144a4:	e7fe      	b.n	80144a4 <xPortStartScheduler+0x7c>
 80144a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144aa:	f383 8811 	msr	BASEPRI, r3
 80144ae:	f3bf 8f6f 	isb	sy
 80144b2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80144b6:	e7fe      	b.n	80144b6 <xPortStartScheduler+0x8e>
 80144b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144bc:	f383 8811 	msr	BASEPRI, r3
 80144c0:	f3bf 8f6f 	isb	sy
 80144c4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80144c8:	e7fe      	b.n	80144c8 <xPortStartScheduler+0xa0>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80144ca:	9b02      	ldr	r3, [sp, #8]
 80144cc:	4a21      	ldr	r2, [pc, #132]	@ (8014554 <xPortStartScheduler+0x12c>)
	uxCriticalNesting = 0;
 80144ce:	4d23      	ldr	r5, [pc, #140]	@ (801455c <xPortStartScheduler+0x134>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80144d0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80144d4:	b2db      	uxtb	r3, r3
 80144d6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80144d8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80144dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80144e0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80144e4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80144e8:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80144ec:	f44f 7240 	mov.w	r2, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80144f0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 80144f4:	2600      	movs	r6, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80144f6:	6042      	str	r2, [r0, #4]
	vPortSetupTimerInterrupt();
 80144f8:	f7ff ff82 	bl	8014400 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80144fc:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 80144fe:	f7ff feb1 	bl	8014264 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014502:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8014506:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801450a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801450e:	f7ff fe95 	bl	801423c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8014512:	f7ff f8c7 	bl	80136a4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8014516:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8014518:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 801451a:	3301      	adds	r3, #1
 801451c:	d008      	beq.n	8014530 <xPortStartScheduler+0x108>
 801451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014522:	f383 8811 	msr	BASEPRI, r3
 8014526:	f3bf 8f6f 	isb	sy
 801452a:	f3bf 8f4f 	dsb	sy
 801452e:	e7fe      	b.n	801452e <xPortStartScheduler+0x106>
 8014530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014534:	f383 8811 	msr	BASEPRI, r3
 8014538:	f3bf 8f6f 	isb	sy
 801453c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8014540:	9b03      	ldr	r3, [sp, #12]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d0fc      	beq.n	8014540 <xPortStartScheduler+0x118>
}
 8014546:	2000      	movs	r0, #0
 8014548:	b004      	add	sp, #16
 801454a:	bd70      	pop	{r4, r5, r6, pc}
 801454c:	410fc271 	.word	0x410fc271
 8014550:	410fc270 	.word	0x410fc270
 8014554:	e000e400 	.word	0xe000e400
 8014558:	200068f0 	.word	0x200068f0
 801455c:	20000300 	.word	0x20000300

08014560 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014560:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014564:	2b0f      	cmp	r3, #15
 8014566:	d812      	bhi.n	801458e <vPortValidateInterruptPriority+0x2e>
 8014568:	4a11      	ldr	r2, [pc, #68]	@ (80145b0 <vPortValidateInterruptPriority+0x50>)
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801456a:	6852      	ldr	r2, [r2, #4]
 801456c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8014570:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8014574:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014578:	4293      	cmp	r3, r2
 801457a:	d917      	bls.n	80145ac <vPortValidateInterruptPriority+0x4c>
 801457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014580:	f383 8811 	msr	BASEPRI, r3
 8014584:	f3bf 8f6f 	isb	sy
 8014588:	f3bf 8f4f 	dsb	sy
 801458c:	e7fe      	b.n	801458c <vPortValidateInterruptPriority+0x2c>
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801458e:	4909      	ldr	r1, [pc, #36]	@ (80145b4 <vPortValidateInterruptPriority+0x54>)
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014590:	4a07      	ldr	r2, [pc, #28]	@ (80145b0 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014592:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014594:	7811      	ldrb	r1, [r2, #0]
 8014596:	4299      	cmp	r1, r3
 8014598:	d9e7      	bls.n	801456a <vPortValidateInterruptPriority+0xa>
 801459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801459e:	f383 8811 	msr	BASEPRI, r3
 80145a2:	f3bf 8f6f 	isb	sy
 80145a6:	f3bf 8f4f 	dsb	sy
 80145aa:	e7fe      	b.n	80145aa <vPortValidateInterruptPriority+0x4a>
	}
 80145ac:	4770      	bx	lr
 80145ae:	bf00      	nop
 80145b0:	200068f0 	.word	0x200068f0
 80145b4:	e000e3f0 	.word	0xe000e3f0

080145b8 <__cvt>:
 80145b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145bc:	ec57 6b10 	vmov	r6, r7, d0
 80145c0:	2f00      	cmp	r7, #0
 80145c2:	460c      	mov	r4, r1
 80145c4:	4619      	mov	r1, r3
 80145c6:	463b      	mov	r3, r7
 80145c8:	bfbb      	ittet	lt
 80145ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80145ce:	461f      	movlt	r7, r3
 80145d0:	2300      	movge	r3, #0
 80145d2:	232d      	movlt	r3, #45	@ 0x2d
 80145d4:	700b      	strb	r3, [r1, #0]
 80145d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80145d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80145dc:	4691      	mov	r9, r2
 80145de:	f023 0820 	bic.w	r8, r3, #32
 80145e2:	bfbc      	itt	lt
 80145e4:	4632      	movlt	r2, r6
 80145e6:	4616      	movlt	r6, r2
 80145e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80145ec:	d005      	beq.n	80145fa <__cvt+0x42>
 80145ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80145f2:	d100      	bne.n	80145f6 <__cvt+0x3e>
 80145f4:	3401      	adds	r4, #1
 80145f6:	2102      	movs	r1, #2
 80145f8:	e000      	b.n	80145fc <__cvt+0x44>
 80145fa:	2103      	movs	r1, #3
 80145fc:	ab03      	add	r3, sp, #12
 80145fe:	9301      	str	r3, [sp, #4]
 8014600:	ab02      	add	r3, sp, #8
 8014602:	9300      	str	r3, [sp, #0]
 8014604:	ec47 6b10 	vmov	d0, r6, r7
 8014608:	4653      	mov	r3, sl
 801460a:	4622      	mov	r2, r4
 801460c:	f000 fe68 	bl	80152e0 <_dtoa_r>
 8014610:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014614:	4605      	mov	r5, r0
 8014616:	d119      	bne.n	801464c <__cvt+0x94>
 8014618:	f019 0f01 	tst.w	r9, #1
 801461c:	d00e      	beq.n	801463c <__cvt+0x84>
 801461e:	eb00 0904 	add.w	r9, r0, r4
 8014622:	2200      	movs	r2, #0
 8014624:	2300      	movs	r3, #0
 8014626:	4630      	mov	r0, r6
 8014628:	4639      	mov	r1, r7
 801462a:	f7ec fa65 	bl	8000af8 <__aeabi_dcmpeq>
 801462e:	b108      	cbz	r0, 8014634 <__cvt+0x7c>
 8014630:	f8cd 900c 	str.w	r9, [sp, #12]
 8014634:	2230      	movs	r2, #48	@ 0x30
 8014636:	9b03      	ldr	r3, [sp, #12]
 8014638:	454b      	cmp	r3, r9
 801463a:	d31e      	bcc.n	801467a <__cvt+0xc2>
 801463c:	9b03      	ldr	r3, [sp, #12]
 801463e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014640:	1b5b      	subs	r3, r3, r5
 8014642:	4628      	mov	r0, r5
 8014644:	6013      	str	r3, [r2, #0]
 8014646:	b004      	add	sp, #16
 8014648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801464c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014650:	eb00 0904 	add.w	r9, r0, r4
 8014654:	d1e5      	bne.n	8014622 <__cvt+0x6a>
 8014656:	7803      	ldrb	r3, [r0, #0]
 8014658:	2b30      	cmp	r3, #48	@ 0x30
 801465a:	d10a      	bne.n	8014672 <__cvt+0xba>
 801465c:	2200      	movs	r2, #0
 801465e:	2300      	movs	r3, #0
 8014660:	4630      	mov	r0, r6
 8014662:	4639      	mov	r1, r7
 8014664:	f7ec fa48 	bl	8000af8 <__aeabi_dcmpeq>
 8014668:	b918      	cbnz	r0, 8014672 <__cvt+0xba>
 801466a:	f1c4 0401 	rsb	r4, r4, #1
 801466e:	f8ca 4000 	str.w	r4, [sl]
 8014672:	f8da 3000 	ldr.w	r3, [sl]
 8014676:	4499      	add	r9, r3
 8014678:	e7d3      	b.n	8014622 <__cvt+0x6a>
 801467a:	1c59      	adds	r1, r3, #1
 801467c:	9103      	str	r1, [sp, #12]
 801467e:	701a      	strb	r2, [r3, #0]
 8014680:	e7d9      	b.n	8014636 <__cvt+0x7e>

08014682 <__exponent>:
 8014682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014684:	2900      	cmp	r1, #0
 8014686:	bfba      	itte	lt
 8014688:	4249      	neglt	r1, r1
 801468a:	232d      	movlt	r3, #45	@ 0x2d
 801468c:	232b      	movge	r3, #43	@ 0x2b
 801468e:	2909      	cmp	r1, #9
 8014690:	7002      	strb	r2, [r0, #0]
 8014692:	7043      	strb	r3, [r0, #1]
 8014694:	dd29      	ble.n	80146ea <__exponent+0x68>
 8014696:	f10d 0307 	add.w	r3, sp, #7
 801469a:	461d      	mov	r5, r3
 801469c:	270a      	movs	r7, #10
 801469e:	461a      	mov	r2, r3
 80146a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80146a4:	fb07 1416 	mls	r4, r7, r6, r1
 80146a8:	3430      	adds	r4, #48	@ 0x30
 80146aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80146ae:	460c      	mov	r4, r1
 80146b0:	2c63      	cmp	r4, #99	@ 0x63
 80146b2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80146b6:	4631      	mov	r1, r6
 80146b8:	dcf1      	bgt.n	801469e <__exponent+0x1c>
 80146ba:	3130      	adds	r1, #48	@ 0x30
 80146bc:	1e94      	subs	r4, r2, #2
 80146be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80146c2:	1c41      	adds	r1, r0, #1
 80146c4:	4623      	mov	r3, r4
 80146c6:	42ab      	cmp	r3, r5
 80146c8:	d30a      	bcc.n	80146e0 <__exponent+0x5e>
 80146ca:	f10d 0309 	add.w	r3, sp, #9
 80146ce:	1a9b      	subs	r3, r3, r2
 80146d0:	42ac      	cmp	r4, r5
 80146d2:	bf88      	it	hi
 80146d4:	2300      	movhi	r3, #0
 80146d6:	3302      	adds	r3, #2
 80146d8:	4403      	add	r3, r0
 80146da:	1a18      	subs	r0, r3, r0
 80146dc:	b003      	add	sp, #12
 80146de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80146e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80146e8:	e7ed      	b.n	80146c6 <__exponent+0x44>
 80146ea:	2330      	movs	r3, #48	@ 0x30
 80146ec:	3130      	adds	r1, #48	@ 0x30
 80146ee:	7083      	strb	r3, [r0, #2]
 80146f0:	70c1      	strb	r1, [r0, #3]
 80146f2:	1d03      	adds	r3, r0, #4
 80146f4:	e7f1      	b.n	80146da <__exponent+0x58>
	...

080146f8 <_printf_float>:
 80146f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146fc:	b08d      	sub	sp, #52	@ 0x34
 80146fe:	460c      	mov	r4, r1
 8014700:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014704:	4616      	mov	r6, r2
 8014706:	461f      	mov	r7, r3
 8014708:	4605      	mov	r5, r0
 801470a:	f000 fcdb 	bl	80150c4 <_localeconv_r>
 801470e:	6803      	ldr	r3, [r0, #0]
 8014710:	9304      	str	r3, [sp, #16]
 8014712:	4618      	mov	r0, r3
 8014714:	f7eb fdc4 	bl	80002a0 <strlen>
 8014718:	2300      	movs	r3, #0
 801471a:	930a      	str	r3, [sp, #40]	@ 0x28
 801471c:	f8d8 3000 	ldr.w	r3, [r8]
 8014720:	9005      	str	r0, [sp, #20]
 8014722:	3307      	adds	r3, #7
 8014724:	f023 0307 	bic.w	r3, r3, #7
 8014728:	f103 0208 	add.w	r2, r3, #8
 801472c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014730:	f8d4 b000 	ldr.w	fp, [r4]
 8014734:	f8c8 2000 	str.w	r2, [r8]
 8014738:	e9d3 8900 	ldrd	r8, r9, [r3]
 801473c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014740:	9307      	str	r3, [sp, #28]
 8014742:	f8cd 8018 	str.w	r8, [sp, #24]
 8014746:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801474a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801474e:	4b9c      	ldr	r3, [pc, #624]	@ (80149c0 <_printf_float+0x2c8>)
 8014750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014754:	f7ec fa02 	bl	8000b5c <__aeabi_dcmpun>
 8014758:	bb70      	cbnz	r0, 80147b8 <_printf_float+0xc0>
 801475a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801475e:	4b98      	ldr	r3, [pc, #608]	@ (80149c0 <_printf_float+0x2c8>)
 8014760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014764:	f7ec f9dc 	bl	8000b20 <__aeabi_dcmple>
 8014768:	bb30      	cbnz	r0, 80147b8 <_printf_float+0xc0>
 801476a:	2200      	movs	r2, #0
 801476c:	2300      	movs	r3, #0
 801476e:	4640      	mov	r0, r8
 8014770:	4649      	mov	r1, r9
 8014772:	f7ec f9cb 	bl	8000b0c <__aeabi_dcmplt>
 8014776:	b110      	cbz	r0, 801477e <_printf_float+0x86>
 8014778:	232d      	movs	r3, #45	@ 0x2d
 801477a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801477e:	4a91      	ldr	r2, [pc, #580]	@ (80149c4 <_printf_float+0x2cc>)
 8014780:	4b91      	ldr	r3, [pc, #580]	@ (80149c8 <_printf_float+0x2d0>)
 8014782:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014786:	bf94      	ite	ls
 8014788:	4690      	movls	r8, r2
 801478a:	4698      	movhi	r8, r3
 801478c:	2303      	movs	r3, #3
 801478e:	6123      	str	r3, [r4, #16]
 8014790:	f02b 0304 	bic.w	r3, fp, #4
 8014794:	6023      	str	r3, [r4, #0]
 8014796:	f04f 0900 	mov.w	r9, #0
 801479a:	9700      	str	r7, [sp, #0]
 801479c:	4633      	mov	r3, r6
 801479e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80147a0:	4621      	mov	r1, r4
 80147a2:	4628      	mov	r0, r5
 80147a4:	f000 f9d2 	bl	8014b4c <_printf_common>
 80147a8:	3001      	adds	r0, #1
 80147aa:	f040 808d 	bne.w	80148c8 <_printf_float+0x1d0>
 80147ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147b2:	b00d      	add	sp, #52	@ 0x34
 80147b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b8:	4642      	mov	r2, r8
 80147ba:	464b      	mov	r3, r9
 80147bc:	4640      	mov	r0, r8
 80147be:	4649      	mov	r1, r9
 80147c0:	f7ec f9cc 	bl	8000b5c <__aeabi_dcmpun>
 80147c4:	b140      	cbz	r0, 80147d8 <_printf_float+0xe0>
 80147c6:	464b      	mov	r3, r9
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	bfbc      	itt	lt
 80147cc:	232d      	movlt	r3, #45	@ 0x2d
 80147ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80147d2:	4a7e      	ldr	r2, [pc, #504]	@ (80149cc <_printf_float+0x2d4>)
 80147d4:	4b7e      	ldr	r3, [pc, #504]	@ (80149d0 <_printf_float+0x2d8>)
 80147d6:	e7d4      	b.n	8014782 <_printf_float+0x8a>
 80147d8:	6863      	ldr	r3, [r4, #4]
 80147da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80147de:	9206      	str	r2, [sp, #24]
 80147e0:	1c5a      	adds	r2, r3, #1
 80147e2:	d13b      	bne.n	801485c <_printf_float+0x164>
 80147e4:	2306      	movs	r3, #6
 80147e6:	6063      	str	r3, [r4, #4]
 80147e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80147ec:	2300      	movs	r3, #0
 80147ee:	6022      	str	r2, [r4, #0]
 80147f0:	9303      	str	r3, [sp, #12]
 80147f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80147f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80147f8:	ab09      	add	r3, sp, #36	@ 0x24
 80147fa:	9300      	str	r3, [sp, #0]
 80147fc:	6861      	ldr	r1, [r4, #4]
 80147fe:	ec49 8b10 	vmov	d0, r8, r9
 8014802:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014806:	4628      	mov	r0, r5
 8014808:	f7ff fed6 	bl	80145b8 <__cvt>
 801480c:	9b06      	ldr	r3, [sp, #24]
 801480e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014810:	2b47      	cmp	r3, #71	@ 0x47
 8014812:	4680      	mov	r8, r0
 8014814:	d129      	bne.n	801486a <_printf_float+0x172>
 8014816:	1cc8      	adds	r0, r1, #3
 8014818:	db02      	blt.n	8014820 <_printf_float+0x128>
 801481a:	6863      	ldr	r3, [r4, #4]
 801481c:	4299      	cmp	r1, r3
 801481e:	dd41      	ble.n	80148a4 <_printf_float+0x1ac>
 8014820:	f1aa 0a02 	sub.w	sl, sl, #2
 8014824:	fa5f fa8a 	uxtb.w	sl, sl
 8014828:	3901      	subs	r1, #1
 801482a:	4652      	mov	r2, sl
 801482c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014830:	9109      	str	r1, [sp, #36]	@ 0x24
 8014832:	f7ff ff26 	bl	8014682 <__exponent>
 8014836:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014838:	1813      	adds	r3, r2, r0
 801483a:	2a01      	cmp	r2, #1
 801483c:	4681      	mov	r9, r0
 801483e:	6123      	str	r3, [r4, #16]
 8014840:	dc02      	bgt.n	8014848 <_printf_float+0x150>
 8014842:	6822      	ldr	r2, [r4, #0]
 8014844:	07d2      	lsls	r2, r2, #31
 8014846:	d501      	bpl.n	801484c <_printf_float+0x154>
 8014848:	3301      	adds	r3, #1
 801484a:	6123      	str	r3, [r4, #16]
 801484c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014850:	2b00      	cmp	r3, #0
 8014852:	d0a2      	beq.n	801479a <_printf_float+0xa2>
 8014854:	232d      	movs	r3, #45	@ 0x2d
 8014856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801485a:	e79e      	b.n	801479a <_printf_float+0xa2>
 801485c:	9a06      	ldr	r2, [sp, #24]
 801485e:	2a47      	cmp	r2, #71	@ 0x47
 8014860:	d1c2      	bne.n	80147e8 <_printf_float+0xf0>
 8014862:	2b00      	cmp	r3, #0
 8014864:	d1c0      	bne.n	80147e8 <_printf_float+0xf0>
 8014866:	2301      	movs	r3, #1
 8014868:	e7bd      	b.n	80147e6 <_printf_float+0xee>
 801486a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801486e:	d9db      	bls.n	8014828 <_printf_float+0x130>
 8014870:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014874:	d118      	bne.n	80148a8 <_printf_float+0x1b0>
 8014876:	2900      	cmp	r1, #0
 8014878:	6863      	ldr	r3, [r4, #4]
 801487a:	dd0b      	ble.n	8014894 <_printf_float+0x19c>
 801487c:	6121      	str	r1, [r4, #16]
 801487e:	b913      	cbnz	r3, 8014886 <_printf_float+0x18e>
 8014880:	6822      	ldr	r2, [r4, #0]
 8014882:	07d0      	lsls	r0, r2, #31
 8014884:	d502      	bpl.n	801488c <_printf_float+0x194>
 8014886:	3301      	adds	r3, #1
 8014888:	440b      	add	r3, r1
 801488a:	6123      	str	r3, [r4, #16]
 801488c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801488e:	f04f 0900 	mov.w	r9, #0
 8014892:	e7db      	b.n	801484c <_printf_float+0x154>
 8014894:	b913      	cbnz	r3, 801489c <_printf_float+0x1a4>
 8014896:	6822      	ldr	r2, [r4, #0]
 8014898:	07d2      	lsls	r2, r2, #31
 801489a:	d501      	bpl.n	80148a0 <_printf_float+0x1a8>
 801489c:	3302      	adds	r3, #2
 801489e:	e7f4      	b.n	801488a <_printf_float+0x192>
 80148a0:	2301      	movs	r3, #1
 80148a2:	e7f2      	b.n	801488a <_printf_float+0x192>
 80148a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80148a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148aa:	4299      	cmp	r1, r3
 80148ac:	db05      	blt.n	80148ba <_printf_float+0x1c2>
 80148ae:	6823      	ldr	r3, [r4, #0]
 80148b0:	6121      	str	r1, [r4, #16]
 80148b2:	07d8      	lsls	r0, r3, #31
 80148b4:	d5ea      	bpl.n	801488c <_printf_float+0x194>
 80148b6:	1c4b      	adds	r3, r1, #1
 80148b8:	e7e7      	b.n	801488a <_printf_float+0x192>
 80148ba:	2900      	cmp	r1, #0
 80148bc:	bfd4      	ite	le
 80148be:	f1c1 0202 	rsble	r2, r1, #2
 80148c2:	2201      	movgt	r2, #1
 80148c4:	4413      	add	r3, r2
 80148c6:	e7e0      	b.n	801488a <_printf_float+0x192>
 80148c8:	6823      	ldr	r3, [r4, #0]
 80148ca:	055a      	lsls	r2, r3, #21
 80148cc:	d407      	bmi.n	80148de <_printf_float+0x1e6>
 80148ce:	6923      	ldr	r3, [r4, #16]
 80148d0:	4642      	mov	r2, r8
 80148d2:	4631      	mov	r1, r6
 80148d4:	4628      	mov	r0, r5
 80148d6:	47b8      	blx	r7
 80148d8:	3001      	adds	r0, #1
 80148da:	d12b      	bne.n	8014934 <_printf_float+0x23c>
 80148dc:	e767      	b.n	80147ae <_printf_float+0xb6>
 80148de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80148e2:	f240 80dd 	bls.w	8014aa0 <_printf_float+0x3a8>
 80148e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80148ea:	2200      	movs	r2, #0
 80148ec:	2300      	movs	r3, #0
 80148ee:	f7ec f903 	bl	8000af8 <__aeabi_dcmpeq>
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d033      	beq.n	801495e <_printf_float+0x266>
 80148f6:	4a37      	ldr	r2, [pc, #220]	@ (80149d4 <_printf_float+0x2dc>)
 80148f8:	2301      	movs	r3, #1
 80148fa:	4631      	mov	r1, r6
 80148fc:	4628      	mov	r0, r5
 80148fe:	47b8      	blx	r7
 8014900:	3001      	adds	r0, #1
 8014902:	f43f af54 	beq.w	80147ae <_printf_float+0xb6>
 8014906:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801490a:	4543      	cmp	r3, r8
 801490c:	db02      	blt.n	8014914 <_printf_float+0x21c>
 801490e:	6823      	ldr	r3, [r4, #0]
 8014910:	07d8      	lsls	r0, r3, #31
 8014912:	d50f      	bpl.n	8014934 <_printf_float+0x23c>
 8014914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014918:	4631      	mov	r1, r6
 801491a:	4628      	mov	r0, r5
 801491c:	47b8      	blx	r7
 801491e:	3001      	adds	r0, #1
 8014920:	f43f af45 	beq.w	80147ae <_printf_float+0xb6>
 8014924:	f04f 0900 	mov.w	r9, #0
 8014928:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801492c:	f104 0a1a 	add.w	sl, r4, #26
 8014930:	45c8      	cmp	r8, r9
 8014932:	dc09      	bgt.n	8014948 <_printf_float+0x250>
 8014934:	6823      	ldr	r3, [r4, #0]
 8014936:	079b      	lsls	r3, r3, #30
 8014938:	f100 8103 	bmi.w	8014b42 <_printf_float+0x44a>
 801493c:	68e0      	ldr	r0, [r4, #12]
 801493e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014940:	4298      	cmp	r0, r3
 8014942:	bfb8      	it	lt
 8014944:	4618      	movlt	r0, r3
 8014946:	e734      	b.n	80147b2 <_printf_float+0xba>
 8014948:	2301      	movs	r3, #1
 801494a:	4652      	mov	r2, sl
 801494c:	4631      	mov	r1, r6
 801494e:	4628      	mov	r0, r5
 8014950:	47b8      	blx	r7
 8014952:	3001      	adds	r0, #1
 8014954:	f43f af2b 	beq.w	80147ae <_printf_float+0xb6>
 8014958:	f109 0901 	add.w	r9, r9, #1
 801495c:	e7e8      	b.n	8014930 <_printf_float+0x238>
 801495e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014960:	2b00      	cmp	r3, #0
 8014962:	dc39      	bgt.n	80149d8 <_printf_float+0x2e0>
 8014964:	4a1b      	ldr	r2, [pc, #108]	@ (80149d4 <_printf_float+0x2dc>)
 8014966:	2301      	movs	r3, #1
 8014968:	4631      	mov	r1, r6
 801496a:	4628      	mov	r0, r5
 801496c:	47b8      	blx	r7
 801496e:	3001      	adds	r0, #1
 8014970:	f43f af1d 	beq.w	80147ae <_printf_float+0xb6>
 8014974:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014978:	ea59 0303 	orrs.w	r3, r9, r3
 801497c:	d102      	bne.n	8014984 <_printf_float+0x28c>
 801497e:	6823      	ldr	r3, [r4, #0]
 8014980:	07d9      	lsls	r1, r3, #31
 8014982:	d5d7      	bpl.n	8014934 <_printf_float+0x23c>
 8014984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014988:	4631      	mov	r1, r6
 801498a:	4628      	mov	r0, r5
 801498c:	47b8      	blx	r7
 801498e:	3001      	adds	r0, #1
 8014990:	f43f af0d 	beq.w	80147ae <_printf_float+0xb6>
 8014994:	f04f 0a00 	mov.w	sl, #0
 8014998:	f104 0b1a 	add.w	fp, r4, #26
 801499c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801499e:	425b      	negs	r3, r3
 80149a0:	4553      	cmp	r3, sl
 80149a2:	dc01      	bgt.n	80149a8 <_printf_float+0x2b0>
 80149a4:	464b      	mov	r3, r9
 80149a6:	e793      	b.n	80148d0 <_printf_float+0x1d8>
 80149a8:	2301      	movs	r3, #1
 80149aa:	465a      	mov	r2, fp
 80149ac:	4631      	mov	r1, r6
 80149ae:	4628      	mov	r0, r5
 80149b0:	47b8      	blx	r7
 80149b2:	3001      	adds	r0, #1
 80149b4:	f43f aefb 	beq.w	80147ae <_printf_float+0xb6>
 80149b8:	f10a 0a01 	add.w	sl, sl, #1
 80149bc:	e7ee      	b.n	801499c <_printf_float+0x2a4>
 80149be:	bf00      	nop
 80149c0:	7fefffff 	.word	0x7fefffff
 80149c4:	08017640 	.word	0x08017640
 80149c8:	08017644 	.word	0x08017644
 80149cc:	08017648 	.word	0x08017648
 80149d0:	0801764c 	.word	0x0801764c
 80149d4:	08017650 	.word	0x08017650
 80149d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80149da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80149de:	4553      	cmp	r3, sl
 80149e0:	bfa8      	it	ge
 80149e2:	4653      	movge	r3, sl
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	4699      	mov	r9, r3
 80149e8:	dc36      	bgt.n	8014a58 <_printf_float+0x360>
 80149ea:	f04f 0b00 	mov.w	fp, #0
 80149ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80149f2:	f104 021a 	add.w	r2, r4, #26
 80149f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80149f8:	9306      	str	r3, [sp, #24]
 80149fa:	eba3 0309 	sub.w	r3, r3, r9
 80149fe:	455b      	cmp	r3, fp
 8014a00:	dc31      	bgt.n	8014a66 <_printf_float+0x36e>
 8014a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a04:	459a      	cmp	sl, r3
 8014a06:	dc3a      	bgt.n	8014a7e <_printf_float+0x386>
 8014a08:	6823      	ldr	r3, [r4, #0]
 8014a0a:	07da      	lsls	r2, r3, #31
 8014a0c:	d437      	bmi.n	8014a7e <_printf_float+0x386>
 8014a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a10:	ebaa 0903 	sub.w	r9, sl, r3
 8014a14:	9b06      	ldr	r3, [sp, #24]
 8014a16:	ebaa 0303 	sub.w	r3, sl, r3
 8014a1a:	4599      	cmp	r9, r3
 8014a1c:	bfa8      	it	ge
 8014a1e:	4699      	movge	r9, r3
 8014a20:	f1b9 0f00 	cmp.w	r9, #0
 8014a24:	dc33      	bgt.n	8014a8e <_printf_float+0x396>
 8014a26:	f04f 0800 	mov.w	r8, #0
 8014a2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a2e:	f104 0b1a 	add.w	fp, r4, #26
 8014a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a34:	ebaa 0303 	sub.w	r3, sl, r3
 8014a38:	eba3 0309 	sub.w	r3, r3, r9
 8014a3c:	4543      	cmp	r3, r8
 8014a3e:	f77f af79 	ble.w	8014934 <_printf_float+0x23c>
 8014a42:	2301      	movs	r3, #1
 8014a44:	465a      	mov	r2, fp
 8014a46:	4631      	mov	r1, r6
 8014a48:	4628      	mov	r0, r5
 8014a4a:	47b8      	blx	r7
 8014a4c:	3001      	adds	r0, #1
 8014a4e:	f43f aeae 	beq.w	80147ae <_printf_float+0xb6>
 8014a52:	f108 0801 	add.w	r8, r8, #1
 8014a56:	e7ec      	b.n	8014a32 <_printf_float+0x33a>
 8014a58:	4642      	mov	r2, r8
 8014a5a:	4631      	mov	r1, r6
 8014a5c:	4628      	mov	r0, r5
 8014a5e:	47b8      	blx	r7
 8014a60:	3001      	adds	r0, #1
 8014a62:	d1c2      	bne.n	80149ea <_printf_float+0x2f2>
 8014a64:	e6a3      	b.n	80147ae <_printf_float+0xb6>
 8014a66:	2301      	movs	r3, #1
 8014a68:	4631      	mov	r1, r6
 8014a6a:	4628      	mov	r0, r5
 8014a6c:	9206      	str	r2, [sp, #24]
 8014a6e:	47b8      	blx	r7
 8014a70:	3001      	adds	r0, #1
 8014a72:	f43f ae9c 	beq.w	80147ae <_printf_float+0xb6>
 8014a76:	9a06      	ldr	r2, [sp, #24]
 8014a78:	f10b 0b01 	add.w	fp, fp, #1
 8014a7c:	e7bb      	b.n	80149f6 <_printf_float+0x2fe>
 8014a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a82:	4631      	mov	r1, r6
 8014a84:	4628      	mov	r0, r5
 8014a86:	47b8      	blx	r7
 8014a88:	3001      	adds	r0, #1
 8014a8a:	d1c0      	bne.n	8014a0e <_printf_float+0x316>
 8014a8c:	e68f      	b.n	80147ae <_printf_float+0xb6>
 8014a8e:	9a06      	ldr	r2, [sp, #24]
 8014a90:	464b      	mov	r3, r9
 8014a92:	4442      	add	r2, r8
 8014a94:	4631      	mov	r1, r6
 8014a96:	4628      	mov	r0, r5
 8014a98:	47b8      	blx	r7
 8014a9a:	3001      	adds	r0, #1
 8014a9c:	d1c3      	bne.n	8014a26 <_printf_float+0x32e>
 8014a9e:	e686      	b.n	80147ae <_printf_float+0xb6>
 8014aa0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014aa4:	f1ba 0f01 	cmp.w	sl, #1
 8014aa8:	dc01      	bgt.n	8014aae <_printf_float+0x3b6>
 8014aaa:	07db      	lsls	r3, r3, #31
 8014aac:	d536      	bpl.n	8014b1c <_printf_float+0x424>
 8014aae:	2301      	movs	r3, #1
 8014ab0:	4642      	mov	r2, r8
 8014ab2:	4631      	mov	r1, r6
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	47b8      	blx	r7
 8014ab8:	3001      	adds	r0, #1
 8014aba:	f43f ae78 	beq.w	80147ae <_printf_float+0xb6>
 8014abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ac2:	4631      	mov	r1, r6
 8014ac4:	4628      	mov	r0, r5
 8014ac6:	47b8      	blx	r7
 8014ac8:	3001      	adds	r0, #1
 8014aca:	f43f ae70 	beq.w	80147ae <_printf_float+0xb6>
 8014ace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8014ada:	f7ec f80d 	bl	8000af8 <__aeabi_dcmpeq>
 8014ade:	b9c0      	cbnz	r0, 8014b12 <_printf_float+0x41a>
 8014ae0:	4653      	mov	r3, sl
 8014ae2:	f108 0201 	add.w	r2, r8, #1
 8014ae6:	4631      	mov	r1, r6
 8014ae8:	4628      	mov	r0, r5
 8014aea:	47b8      	blx	r7
 8014aec:	3001      	adds	r0, #1
 8014aee:	d10c      	bne.n	8014b0a <_printf_float+0x412>
 8014af0:	e65d      	b.n	80147ae <_printf_float+0xb6>
 8014af2:	2301      	movs	r3, #1
 8014af4:	465a      	mov	r2, fp
 8014af6:	4631      	mov	r1, r6
 8014af8:	4628      	mov	r0, r5
 8014afa:	47b8      	blx	r7
 8014afc:	3001      	adds	r0, #1
 8014afe:	f43f ae56 	beq.w	80147ae <_printf_float+0xb6>
 8014b02:	f108 0801 	add.w	r8, r8, #1
 8014b06:	45d0      	cmp	r8, sl
 8014b08:	dbf3      	blt.n	8014af2 <_printf_float+0x3fa>
 8014b0a:	464b      	mov	r3, r9
 8014b0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014b10:	e6df      	b.n	80148d2 <_printf_float+0x1da>
 8014b12:	f04f 0800 	mov.w	r8, #0
 8014b16:	f104 0b1a 	add.w	fp, r4, #26
 8014b1a:	e7f4      	b.n	8014b06 <_printf_float+0x40e>
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	4642      	mov	r2, r8
 8014b20:	e7e1      	b.n	8014ae6 <_printf_float+0x3ee>
 8014b22:	2301      	movs	r3, #1
 8014b24:	464a      	mov	r2, r9
 8014b26:	4631      	mov	r1, r6
 8014b28:	4628      	mov	r0, r5
 8014b2a:	47b8      	blx	r7
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	f43f ae3e 	beq.w	80147ae <_printf_float+0xb6>
 8014b32:	f108 0801 	add.w	r8, r8, #1
 8014b36:	68e3      	ldr	r3, [r4, #12]
 8014b38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014b3a:	1a5b      	subs	r3, r3, r1
 8014b3c:	4543      	cmp	r3, r8
 8014b3e:	dcf0      	bgt.n	8014b22 <_printf_float+0x42a>
 8014b40:	e6fc      	b.n	801493c <_printf_float+0x244>
 8014b42:	f04f 0800 	mov.w	r8, #0
 8014b46:	f104 0919 	add.w	r9, r4, #25
 8014b4a:	e7f4      	b.n	8014b36 <_printf_float+0x43e>

08014b4c <_printf_common>:
 8014b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b50:	4616      	mov	r6, r2
 8014b52:	4698      	mov	r8, r3
 8014b54:	688a      	ldr	r2, [r1, #8]
 8014b56:	690b      	ldr	r3, [r1, #16]
 8014b58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	bfb8      	it	lt
 8014b60:	4613      	movlt	r3, r2
 8014b62:	6033      	str	r3, [r6, #0]
 8014b64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014b68:	4607      	mov	r7, r0
 8014b6a:	460c      	mov	r4, r1
 8014b6c:	b10a      	cbz	r2, 8014b72 <_printf_common+0x26>
 8014b6e:	3301      	adds	r3, #1
 8014b70:	6033      	str	r3, [r6, #0]
 8014b72:	6823      	ldr	r3, [r4, #0]
 8014b74:	0699      	lsls	r1, r3, #26
 8014b76:	bf42      	ittt	mi
 8014b78:	6833      	ldrmi	r3, [r6, #0]
 8014b7a:	3302      	addmi	r3, #2
 8014b7c:	6033      	strmi	r3, [r6, #0]
 8014b7e:	6825      	ldr	r5, [r4, #0]
 8014b80:	f015 0506 	ands.w	r5, r5, #6
 8014b84:	d106      	bne.n	8014b94 <_printf_common+0x48>
 8014b86:	f104 0a19 	add.w	sl, r4, #25
 8014b8a:	68e3      	ldr	r3, [r4, #12]
 8014b8c:	6832      	ldr	r2, [r6, #0]
 8014b8e:	1a9b      	subs	r3, r3, r2
 8014b90:	42ab      	cmp	r3, r5
 8014b92:	dc26      	bgt.n	8014be2 <_printf_common+0x96>
 8014b94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014b98:	6822      	ldr	r2, [r4, #0]
 8014b9a:	3b00      	subs	r3, #0
 8014b9c:	bf18      	it	ne
 8014b9e:	2301      	movne	r3, #1
 8014ba0:	0692      	lsls	r2, r2, #26
 8014ba2:	d42b      	bmi.n	8014bfc <_printf_common+0xb0>
 8014ba4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014ba8:	4641      	mov	r1, r8
 8014baa:	4638      	mov	r0, r7
 8014bac:	47c8      	blx	r9
 8014bae:	3001      	adds	r0, #1
 8014bb0:	d01e      	beq.n	8014bf0 <_printf_common+0xa4>
 8014bb2:	6823      	ldr	r3, [r4, #0]
 8014bb4:	6922      	ldr	r2, [r4, #16]
 8014bb6:	f003 0306 	and.w	r3, r3, #6
 8014bba:	2b04      	cmp	r3, #4
 8014bbc:	bf02      	ittt	eq
 8014bbe:	68e5      	ldreq	r5, [r4, #12]
 8014bc0:	6833      	ldreq	r3, [r6, #0]
 8014bc2:	1aed      	subeq	r5, r5, r3
 8014bc4:	68a3      	ldr	r3, [r4, #8]
 8014bc6:	bf0c      	ite	eq
 8014bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014bcc:	2500      	movne	r5, #0
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	bfc4      	itt	gt
 8014bd2:	1a9b      	subgt	r3, r3, r2
 8014bd4:	18ed      	addgt	r5, r5, r3
 8014bd6:	2600      	movs	r6, #0
 8014bd8:	341a      	adds	r4, #26
 8014bda:	42b5      	cmp	r5, r6
 8014bdc:	d11a      	bne.n	8014c14 <_printf_common+0xc8>
 8014bde:	2000      	movs	r0, #0
 8014be0:	e008      	b.n	8014bf4 <_printf_common+0xa8>
 8014be2:	2301      	movs	r3, #1
 8014be4:	4652      	mov	r2, sl
 8014be6:	4641      	mov	r1, r8
 8014be8:	4638      	mov	r0, r7
 8014bea:	47c8      	blx	r9
 8014bec:	3001      	adds	r0, #1
 8014bee:	d103      	bne.n	8014bf8 <_printf_common+0xac>
 8014bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bf8:	3501      	adds	r5, #1
 8014bfa:	e7c6      	b.n	8014b8a <_printf_common+0x3e>
 8014bfc:	18e1      	adds	r1, r4, r3
 8014bfe:	1c5a      	adds	r2, r3, #1
 8014c00:	2030      	movs	r0, #48	@ 0x30
 8014c02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014c06:	4422      	add	r2, r4
 8014c08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014c0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014c10:	3302      	adds	r3, #2
 8014c12:	e7c7      	b.n	8014ba4 <_printf_common+0x58>
 8014c14:	2301      	movs	r3, #1
 8014c16:	4622      	mov	r2, r4
 8014c18:	4641      	mov	r1, r8
 8014c1a:	4638      	mov	r0, r7
 8014c1c:	47c8      	blx	r9
 8014c1e:	3001      	adds	r0, #1
 8014c20:	d0e6      	beq.n	8014bf0 <_printf_common+0xa4>
 8014c22:	3601      	adds	r6, #1
 8014c24:	e7d9      	b.n	8014bda <_printf_common+0x8e>
	...

08014c28 <_printf_i>:
 8014c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c2c:	7e0f      	ldrb	r7, [r1, #24]
 8014c2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014c30:	2f78      	cmp	r7, #120	@ 0x78
 8014c32:	4691      	mov	r9, r2
 8014c34:	4680      	mov	r8, r0
 8014c36:	460c      	mov	r4, r1
 8014c38:	469a      	mov	sl, r3
 8014c3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014c3e:	d807      	bhi.n	8014c50 <_printf_i+0x28>
 8014c40:	2f62      	cmp	r7, #98	@ 0x62
 8014c42:	d80a      	bhi.n	8014c5a <_printf_i+0x32>
 8014c44:	2f00      	cmp	r7, #0
 8014c46:	f000 80d2 	beq.w	8014dee <_printf_i+0x1c6>
 8014c4a:	2f58      	cmp	r7, #88	@ 0x58
 8014c4c:	f000 80b9 	beq.w	8014dc2 <_printf_i+0x19a>
 8014c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014c58:	e03a      	b.n	8014cd0 <_printf_i+0xa8>
 8014c5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014c5e:	2b15      	cmp	r3, #21
 8014c60:	d8f6      	bhi.n	8014c50 <_printf_i+0x28>
 8014c62:	a101      	add	r1, pc, #4	@ (adr r1, 8014c68 <_printf_i+0x40>)
 8014c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c68:	08014cc1 	.word	0x08014cc1
 8014c6c:	08014cd5 	.word	0x08014cd5
 8014c70:	08014c51 	.word	0x08014c51
 8014c74:	08014c51 	.word	0x08014c51
 8014c78:	08014c51 	.word	0x08014c51
 8014c7c:	08014c51 	.word	0x08014c51
 8014c80:	08014cd5 	.word	0x08014cd5
 8014c84:	08014c51 	.word	0x08014c51
 8014c88:	08014c51 	.word	0x08014c51
 8014c8c:	08014c51 	.word	0x08014c51
 8014c90:	08014c51 	.word	0x08014c51
 8014c94:	08014dd5 	.word	0x08014dd5
 8014c98:	08014cff 	.word	0x08014cff
 8014c9c:	08014d8f 	.word	0x08014d8f
 8014ca0:	08014c51 	.word	0x08014c51
 8014ca4:	08014c51 	.word	0x08014c51
 8014ca8:	08014df7 	.word	0x08014df7
 8014cac:	08014c51 	.word	0x08014c51
 8014cb0:	08014cff 	.word	0x08014cff
 8014cb4:	08014c51 	.word	0x08014c51
 8014cb8:	08014c51 	.word	0x08014c51
 8014cbc:	08014d97 	.word	0x08014d97
 8014cc0:	6833      	ldr	r3, [r6, #0]
 8014cc2:	1d1a      	adds	r2, r3, #4
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	6032      	str	r2, [r6, #0]
 8014cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014ccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	e09d      	b.n	8014e10 <_printf_i+0x1e8>
 8014cd4:	6833      	ldr	r3, [r6, #0]
 8014cd6:	6820      	ldr	r0, [r4, #0]
 8014cd8:	1d19      	adds	r1, r3, #4
 8014cda:	6031      	str	r1, [r6, #0]
 8014cdc:	0606      	lsls	r6, r0, #24
 8014cde:	d501      	bpl.n	8014ce4 <_printf_i+0xbc>
 8014ce0:	681d      	ldr	r5, [r3, #0]
 8014ce2:	e003      	b.n	8014cec <_printf_i+0xc4>
 8014ce4:	0645      	lsls	r5, r0, #25
 8014ce6:	d5fb      	bpl.n	8014ce0 <_printf_i+0xb8>
 8014ce8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014cec:	2d00      	cmp	r5, #0
 8014cee:	da03      	bge.n	8014cf8 <_printf_i+0xd0>
 8014cf0:	232d      	movs	r3, #45	@ 0x2d
 8014cf2:	426d      	negs	r5, r5
 8014cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014cf8:	4859      	ldr	r0, [pc, #356]	@ (8014e60 <_printf_i+0x238>)
 8014cfa:	230a      	movs	r3, #10
 8014cfc:	e011      	b.n	8014d22 <_printf_i+0xfa>
 8014cfe:	6821      	ldr	r1, [r4, #0]
 8014d00:	6833      	ldr	r3, [r6, #0]
 8014d02:	0608      	lsls	r0, r1, #24
 8014d04:	f853 5b04 	ldr.w	r5, [r3], #4
 8014d08:	d402      	bmi.n	8014d10 <_printf_i+0xe8>
 8014d0a:	0649      	lsls	r1, r1, #25
 8014d0c:	bf48      	it	mi
 8014d0e:	b2ad      	uxthmi	r5, r5
 8014d10:	2f6f      	cmp	r7, #111	@ 0x6f
 8014d12:	4853      	ldr	r0, [pc, #332]	@ (8014e60 <_printf_i+0x238>)
 8014d14:	6033      	str	r3, [r6, #0]
 8014d16:	bf14      	ite	ne
 8014d18:	230a      	movne	r3, #10
 8014d1a:	2308      	moveq	r3, #8
 8014d1c:	2100      	movs	r1, #0
 8014d1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014d22:	6866      	ldr	r6, [r4, #4]
 8014d24:	60a6      	str	r6, [r4, #8]
 8014d26:	2e00      	cmp	r6, #0
 8014d28:	bfa2      	ittt	ge
 8014d2a:	6821      	ldrge	r1, [r4, #0]
 8014d2c:	f021 0104 	bicge.w	r1, r1, #4
 8014d30:	6021      	strge	r1, [r4, #0]
 8014d32:	b90d      	cbnz	r5, 8014d38 <_printf_i+0x110>
 8014d34:	2e00      	cmp	r6, #0
 8014d36:	d04b      	beq.n	8014dd0 <_printf_i+0x1a8>
 8014d38:	4616      	mov	r6, r2
 8014d3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8014d3e:	fb03 5711 	mls	r7, r3, r1, r5
 8014d42:	5dc7      	ldrb	r7, [r0, r7]
 8014d44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014d48:	462f      	mov	r7, r5
 8014d4a:	42bb      	cmp	r3, r7
 8014d4c:	460d      	mov	r5, r1
 8014d4e:	d9f4      	bls.n	8014d3a <_printf_i+0x112>
 8014d50:	2b08      	cmp	r3, #8
 8014d52:	d10b      	bne.n	8014d6c <_printf_i+0x144>
 8014d54:	6823      	ldr	r3, [r4, #0]
 8014d56:	07df      	lsls	r7, r3, #31
 8014d58:	d508      	bpl.n	8014d6c <_printf_i+0x144>
 8014d5a:	6923      	ldr	r3, [r4, #16]
 8014d5c:	6861      	ldr	r1, [r4, #4]
 8014d5e:	4299      	cmp	r1, r3
 8014d60:	bfde      	ittt	le
 8014d62:	2330      	movle	r3, #48	@ 0x30
 8014d64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014d68:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014d6c:	1b92      	subs	r2, r2, r6
 8014d6e:	6122      	str	r2, [r4, #16]
 8014d70:	f8cd a000 	str.w	sl, [sp]
 8014d74:	464b      	mov	r3, r9
 8014d76:	aa03      	add	r2, sp, #12
 8014d78:	4621      	mov	r1, r4
 8014d7a:	4640      	mov	r0, r8
 8014d7c:	f7ff fee6 	bl	8014b4c <_printf_common>
 8014d80:	3001      	adds	r0, #1
 8014d82:	d14a      	bne.n	8014e1a <_printf_i+0x1f2>
 8014d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d88:	b004      	add	sp, #16
 8014d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d8e:	6823      	ldr	r3, [r4, #0]
 8014d90:	f043 0320 	orr.w	r3, r3, #32
 8014d94:	6023      	str	r3, [r4, #0]
 8014d96:	4833      	ldr	r0, [pc, #204]	@ (8014e64 <_printf_i+0x23c>)
 8014d98:	2778      	movs	r7, #120	@ 0x78
 8014d9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014d9e:	6823      	ldr	r3, [r4, #0]
 8014da0:	6831      	ldr	r1, [r6, #0]
 8014da2:	061f      	lsls	r7, r3, #24
 8014da4:	f851 5b04 	ldr.w	r5, [r1], #4
 8014da8:	d402      	bmi.n	8014db0 <_printf_i+0x188>
 8014daa:	065f      	lsls	r7, r3, #25
 8014dac:	bf48      	it	mi
 8014dae:	b2ad      	uxthmi	r5, r5
 8014db0:	6031      	str	r1, [r6, #0]
 8014db2:	07d9      	lsls	r1, r3, #31
 8014db4:	bf44      	itt	mi
 8014db6:	f043 0320 	orrmi.w	r3, r3, #32
 8014dba:	6023      	strmi	r3, [r4, #0]
 8014dbc:	b11d      	cbz	r5, 8014dc6 <_printf_i+0x19e>
 8014dbe:	2310      	movs	r3, #16
 8014dc0:	e7ac      	b.n	8014d1c <_printf_i+0xf4>
 8014dc2:	4827      	ldr	r0, [pc, #156]	@ (8014e60 <_printf_i+0x238>)
 8014dc4:	e7e9      	b.n	8014d9a <_printf_i+0x172>
 8014dc6:	6823      	ldr	r3, [r4, #0]
 8014dc8:	f023 0320 	bic.w	r3, r3, #32
 8014dcc:	6023      	str	r3, [r4, #0]
 8014dce:	e7f6      	b.n	8014dbe <_printf_i+0x196>
 8014dd0:	4616      	mov	r6, r2
 8014dd2:	e7bd      	b.n	8014d50 <_printf_i+0x128>
 8014dd4:	6833      	ldr	r3, [r6, #0]
 8014dd6:	6825      	ldr	r5, [r4, #0]
 8014dd8:	6961      	ldr	r1, [r4, #20]
 8014dda:	1d18      	adds	r0, r3, #4
 8014ddc:	6030      	str	r0, [r6, #0]
 8014dde:	062e      	lsls	r6, r5, #24
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	d501      	bpl.n	8014de8 <_printf_i+0x1c0>
 8014de4:	6019      	str	r1, [r3, #0]
 8014de6:	e002      	b.n	8014dee <_printf_i+0x1c6>
 8014de8:	0668      	lsls	r0, r5, #25
 8014dea:	d5fb      	bpl.n	8014de4 <_printf_i+0x1bc>
 8014dec:	8019      	strh	r1, [r3, #0]
 8014dee:	2300      	movs	r3, #0
 8014df0:	6123      	str	r3, [r4, #16]
 8014df2:	4616      	mov	r6, r2
 8014df4:	e7bc      	b.n	8014d70 <_printf_i+0x148>
 8014df6:	6833      	ldr	r3, [r6, #0]
 8014df8:	1d1a      	adds	r2, r3, #4
 8014dfa:	6032      	str	r2, [r6, #0]
 8014dfc:	681e      	ldr	r6, [r3, #0]
 8014dfe:	6862      	ldr	r2, [r4, #4]
 8014e00:	2100      	movs	r1, #0
 8014e02:	4630      	mov	r0, r6
 8014e04:	f7eb f9fc 	bl	8000200 <memchr>
 8014e08:	b108      	cbz	r0, 8014e0e <_printf_i+0x1e6>
 8014e0a:	1b80      	subs	r0, r0, r6
 8014e0c:	6060      	str	r0, [r4, #4]
 8014e0e:	6863      	ldr	r3, [r4, #4]
 8014e10:	6123      	str	r3, [r4, #16]
 8014e12:	2300      	movs	r3, #0
 8014e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014e18:	e7aa      	b.n	8014d70 <_printf_i+0x148>
 8014e1a:	6923      	ldr	r3, [r4, #16]
 8014e1c:	4632      	mov	r2, r6
 8014e1e:	4649      	mov	r1, r9
 8014e20:	4640      	mov	r0, r8
 8014e22:	47d0      	blx	sl
 8014e24:	3001      	adds	r0, #1
 8014e26:	d0ad      	beq.n	8014d84 <_printf_i+0x15c>
 8014e28:	6823      	ldr	r3, [r4, #0]
 8014e2a:	079b      	lsls	r3, r3, #30
 8014e2c:	d413      	bmi.n	8014e56 <_printf_i+0x22e>
 8014e2e:	68e0      	ldr	r0, [r4, #12]
 8014e30:	9b03      	ldr	r3, [sp, #12]
 8014e32:	4298      	cmp	r0, r3
 8014e34:	bfb8      	it	lt
 8014e36:	4618      	movlt	r0, r3
 8014e38:	e7a6      	b.n	8014d88 <_printf_i+0x160>
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	4632      	mov	r2, r6
 8014e3e:	4649      	mov	r1, r9
 8014e40:	4640      	mov	r0, r8
 8014e42:	47d0      	blx	sl
 8014e44:	3001      	adds	r0, #1
 8014e46:	d09d      	beq.n	8014d84 <_printf_i+0x15c>
 8014e48:	3501      	adds	r5, #1
 8014e4a:	68e3      	ldr	r3, [r4, #12]
 8014e4c:	9903      	ldr	r1, [sp, #12]
 8014e4e:	1a5b      	subs	r3, r3, r1
 8014e50:	42ab      	cmp	r3, r5
 8014e52:	dcf2      	bgt.n	8014e3a <_printf_i+0x212>
 8014e54:	e7eb      	b.n	8014e2e <_printf_i+0x206>
 8014e56:	2500      	movs	r5, #0
 8014e58:	f104 0619 	add.w	r6, r4, #25
 8014e5c:	e7f5      	b.n	8014e4a <_printf_i+0x222>
 8014e5e:	bf00      	nop
 8014e60:	08017652 	.word	0x08017652
 8014e64:	08017663 	.word	0x08017663

08014e68 <std>:
 8014e68:	2300      	movs	r3, #0
 8014e6a:	b510      	push	{r4, lr}
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8014e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e76:	6083      	str	r3, [r0, #8]
 8014e78:	8181      	strh	r1, [r0, #12]
 8014e7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8014e7c:	81c2      	strh	r2, [r0, #14]
 8014e7e:	6183      	str	r3, [r0, #24]
 8014e80:	4619      	mov	r1, r3
 8014e82:	2208      	movs	r2, #8
 8014e84:	305c      	adds	r0, #92	@ 0x5c
 8014e86:	f000 f914 	bl	80150b2 <memset>
 8014e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8014ec0 <std+0x58>)
 8014e8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8014e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ec4 <std+0x5c>)
 8014e90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014e92:	4b0d      	ldr	r3, [pc, #52]	@ (8014ec8 <std+0x60>)
 8014e94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014e96:	4b0d      	ldr	r3, [pc, #52]	@ (8014ecc <std+0x64>)
 8014e98:	6323      	str	r3, [r4, #48]	@ 0x30
 8014e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8014ed0 <std+0x68>)
 8014e9c:	6224      	str	r4, [r4, #32]
 8014e9e:	429c      	cmp	r4, r3
 8014ea0:	d006      	beq.n	8014eb0 <std+0x48>
 8014ea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014ea6:	4294      	cmp	r4, r2
 8014ea8:	d002      	beq.n	8014eb0 <std+0x48>
 8014eaa:	33d0      	adds	r3, #208	@ 0xd0
 8014eac:	429c      	cmp	r4, r3
 8014eae:	d105      	bne.n	8014ebc <std+0x54>
 8014eb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eb8:	f000 b978 	b.w	80151ac <__retarget_lock_init_recursive>
 8014ebc:	bd10      	pop	{r4, pc}
 8014ebe:	bf00      	nop
 8014ec0:	0801502d 	.word	0x0801502d
 8014ec4:	0801504f 	.word	0x0801504f
 8014ec8:	08015087 	.word	0x08015087
 8014ecc:	080150ab 	.word	0x080150ab
 8014ed0:	200068f8 	.word	0x200068f8

08014ed4 <stdio_exit_handler>:
 8014ed4:	4a02      	ldr	r2, [pc, #8]	@ (8014ee0 <stdio_exit_handler+0xc>)
 8014ed6:	4903      	ldr	r1, [pc, #12]	@ (8014ee4 <stdio_exit_handler+0x10>)
 8014ed8:	4803      	ldr	r0, [pc, #12]	@ (8014ee8 <stdio_exit_handler+0x14>)
 8014eda:	f000 b869 	b.w	8014fb0 <_fwalk_sglue>
 8014ede:	bf00      	nop
 8014ee0:	20000304 	.word	0x20000304
 8014ee4:	08016b25 	.word	0x08016b25
 8014ee8:	20000314 	.word	0x20000314

08014eec <cleanup_stdio>:
 8014eec:	6841      	ldr	r1, [r0, #4]
 8014eee:	4b0c      	ldr	r3, [pc, #48]	@ (8014f20 <cleanup_stdio+0x34>)
 8014ef0:	4299      	cmp	r1, r3
 8014ef2:	b510      	push	{r4, lr}
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	d001      	beq.n	8014efc <cleanup_stdio+0x10>
 8014ef8:	f001 fe14 	bl	8016b24 <_fflush_r>
 8014efc:	68a1      	ldr	r1, [r4, #8]
 8014efe:	4b09      	ldr	r3, [pc, #36]	@ (8014f24 <cleanup_stdio+0x38>)
 8014f00:	4299      	cmp	r1, r3
 8014f02:	d002      	beq.n	8014f0a <cleanup_stdio+0x1e>
 8014f04:	4620      	mov	r0, r4
 8014f06:	f001 fe0d 	bl	8016b24 <_fflush_r>
 8014f0a:	68e1      	ldr	r1, [r4, #12]
 8014f0c:	4b06      	ldr	r3, [pc, #24]	@ (8014f28 <cleanup_stdio+0x3c>)
 8014f0e:	4299      	cmp	r1, r3
 8014f10:	d004      	beq.n	8014f1c <cleanup_stdio+0x30>
 8014f12:	4620      	mov	r0, r4
 8014f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f18:	f001 be04 	b.w	8016b24 <_fflush_r>
 8014f1c:	bd10      	pop	{r4, pc}
 8014f1e:	bf00      	nop
 8014f20:	200068f8 	.word	0x200068f8
 8014f24:	20006960 	.word	0x20006960
 8014f28:	200069c8 	.word	0x200069c8

08014f2c <global_stdio_init.part.0>:
 8014f2c:	b510      	push	{r4, lr}
 8014f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8014f5c <global_stdio_init.part.0+0x30>)
 8014f30:	4c0b      	ldr	r4, [pc, #44]	@ (8014f60 <global_stdio_init.part.0+0x34>)
 8014f32:	4a0c      	ldr	r2, [pc, #48]	@ (8014f64 <global_stdio_init.part.0+0x38>)
 8014f34:	601a      	str	r2, [r3, #0]
 8014f36:	4620      	mov	r0, r4
 8014f38:	2200      	movs	r2, #0
 8014f3a:	2104      	movs	r1, #4
 8014f3c:	f7ff ff94 	bl	8014e68 <std>
 8014f40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014f44:	2201      	movs	r2, #1
 8014f46:	2109      	movs	r1, #9
 8014f48:	f7ff ff8e 	bl	8014e68 <std>
 8014f4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014f50:	2202      	movs	r2, #2
 8014f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f56:	2112      	movs	r1, #18
 8014f58:	f7ff bf86 	b.w	8014e68 <std>
 8014f5c:	20006a30 	.word	0x20006a30
 8014f60:	200068f8 	.word	0x200068f8
 8014f64:	08014ed5 	.word	0x08014ed5

08014f68 <__sfp_lock_acquire>:
 8014f68:	4801      	ldr	r0, [pc, #4]	@ (8014f70 <__sfp_lock_acquire+0x8>)
 8014f6a:	f000 b920 	b.w	80151ae <__retarget_lock_acquire_recursive>
 8014f6e:	bf00      	nop
 8014f70:	20006a39 	.word	0x20006a39

08014f74 <__sfp_lock_release>:
 8014f74:	4801      	ldr	r0, [pc, #4]	@ (8014f7c <__sfp_lock_release+0x8>)
 8014f76:	f000 b91b 	b.w	80151b0 <__retarget_lock_release_recursive>
 8014f7a:	bf00      	nop
 8014f7c:	20006a39 	.word	0x20006a39

08014f80 <__sinit>:
 8014f80:	b510      	push	{r4, lr}
 8014f82:	4604      	mov	r4, r0
 8014f84:	f7ff fff0 	bl	8014f68 <__sfp_lock_acquire>
 8014f88:	6a23      	ldr	r3, [r4, #32]
 8014f8a:	b11b      	cbz	r3, 8014f94 <__sinit+0x14>
 8014f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f90:	f7ff bff0 	b.w	8014f74 <__sfp_lock_release>
 8014f94:	4b04      	ldr	r3, [pc, #16]	@ (8014fa8 <__sinit+0x28>)
 8014f96:	6223      	str	r3, [r4, #32]
 8014f98:	4b04      	ldr	r3, [pc, #16]	@ (8014fac <__sinit+0x2c>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d1f5      	bne.n	8014f8c <__sinit+0xc>
 8014fa0:	f7ff ffc4 	bl	8014f2c <global_stdio_init.part.0>
 8014fa4:	e7f2      	b.n	8014f8c <__sinit+0xc>
 8014fa6:	bf00      	nop
 8014fa8:	08014eed 	.word	0x08014eed
 8014fac:	20006a30 	.word	0x20006a30

08014fb0 <_fwalk_sglue>:
 8014fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fb4:	4607      	mov	r7, r0
 8014fb6:	4688      	mov	r8, r1
 8014fb8:	4614      	mov	r4, r2
 8014fba:	2600      	movs	r6, #0
 8014fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8014fc4:	d505      	bpl.n	8014fd2 <_fwalk_sglue+0x22>
 8014fc6:	6824      	ldr	r4, [r4, #0]
 8014fc8:	2c00      	cmp	r4, #0
 8014fca:	d1f7      	bne.n	8014fbc <_fwalk_sglue+0xc>
 8014fcc:	4630      	mov	r0, r6
 8014fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fd2:	89ab      	ldrh	r3, [r5, #12]
 8014fd4:	2b01      	cmp	r3, #1
 8014fd6:	d907      	bls.n	8014fe8 <_fwalk_sglue+0x38>
 8014fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	d003      	beq.n	8014fe8 <_fwalk_sglue+0x38>
 8014fe0:	4629      	mov	r1, r5
 8014fe2:	4638      	mov	r0, r7
 8014fe4:	47c0      	blx	r8
 8014fe6:	4306      	orrs	r6, r0
 8014fe8:	3568      	adds	r5, #104	@ 0x68
 8014fea:	e7e9      	b.n	8014fc0 <_fwalk_sglue+0x10>

08014fec <siprintf>:
 8014fec:	b40e      	push	{r1, r2, r3}
 8014fee:	b500      	push	{lr}
 8014ff0:	b09c      	sub	sp, #112	@ 0x70
 8014ff2:	ab1d      	add	r3, sp, #116	@ 0x74
 8014ff4:	9002      	str	r0, [sp, #8]
 8014ff6:	9006      	str	r0, [sp, #24]
 8014ff8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014ffc:	4809      	ldr	r0, [pc, #36]	@ (8015024 <siprintf+0x38>)
 8014ffe:	9107      	str	r1, [sp, #28]
 8015000:	9104      	str	r1, [sp, #16]
 8015002:	4909      	ldr	r1, [pc, #36]	@ (8015028 <siprintf+0x3c>)
 8015004:	f853 2b04 	ldr.w	r2, [r3], #4
 8015008:	9105      	str	r1, [sp, #20]
 801500a:	6800      	ldr	r0, [r0, #0]
 801500c:	9301      	str	r3, [sp, #4]
 801500e:	a902      	add	r1, sp, #8
 8015010:	f001 fc08 	bl	8016824 <_svfiprintf_r>
 8015014:	9b02      	ldr	r3, [sp, #8]
 8015016:	2200      	movs	r2, #0
 8015018:	701a      	strb	r2, [r3, #0]
 801501a:	b01c      	add	sp, #112	@ 0x70
 801501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015020:	b003      	add	sp, #12
 8015022:	4770      	bx	lr
 8015024:	20000310 	.word	0x20000310
 8015028:	ffff0208 	.word	0xffff0208

0801502c <__sread>:
 801502c:	b510      	push	{r4, lr}
 801502e:	460c      	mov	r4, r1
 8015030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015034:	f000 f86c 	bl	8015110 <_read_r>
 8015038:	2800      	cmp	r0, #0
 801503a:	bfab      	itete	ge
 801503c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801503e:	89a3      	ldrhlt	r3, [r4, #12]
 8015040:	181b      	addge	r3, r3, r0
 8015042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015046:	bfac      	ite	ge
 8015048:	6563      	strge	r3, [r4, #84]	@ 0x54
 801504a:	81a3      	strhlt	r3, [r4, #12]
 801504c:	bd10      	pop	{r4, pc}

0801504e <__swrite>:
 801504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015052:	461f      	mov	r7, r3
 8015054:	898b      	ldrh	r3, [r1, #12]
 8015056:	05db      	lsls	r3, r3, #23
 8015058:	4605      	mov	r5, r0
 801505a:	460c      	mov	r4, r1
 801505c:	4616      	mov	r6, r2
 801505e:	d505      	bpl.n	801506c <__swrite+0x1e>
 8015060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015064:	2302      	movs	r3, #2
 8015066:	2200      	movs	r2, #0
 8015068:	f000 f840 	bl	80150ec <_lseek_r>
 801506c:	89a3      	ldrh	r3, [r4, #12]
 801506e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015076:	81a3      	strh	r3, [r4, #12]
 8015078:	4632      	mov	r2, r6
 801507a:	463b      	mov	r3, r7
 801507c:	4628      	mov	r0, r5
 801507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015082:	f000 b857 	b.w	8015134 <_write_r>

08015086 <__sseek>:
 8015086:	b510      	push	{r4, lr}
 8015088:	460c      	mov	r4, r1
 801508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801508e:	f000 f82d 	bl	80150ec <_lseek_r>
 8015092:	1c43      	adds	r3, r0, #1
 8015094:	89a3      	ldrh	r3, [r4, #12]
 8015096:	bf15      	itete	ne
 8015098:	6560      	strne	r0, [r4, #84]	@ 0x54
 801509a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801509e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80150a2:	81a3      	strheq	r3, [r4, #12]
 80150a4:	bf18      	it	ne
 80150a6:	81a3      	strhne	r3, [r4, #12]
 80150a8:	bd10      	pop	{r4, pc}

080150aa <__sclose>:
 80150aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ae:	f000 b80d 	b.w	80150cc <_close_r>

080150b2 <memset>:
 80150b2:	4402      	add	r2, r0
 80150b4:	4603      	mov	r3, r0
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d100      	bne.n	80150bc <memset+0xa>
 80150ba:	4770      	bx	lr
 80150bc:	f803 1b01 	strb.w	r1, [r3], #1
 80150c0:	e7f9      	b.n	80150b6 <memset+0x4>
	...

080150c4 <_localeconv_r>:
 80150c4:	4800      	ldr	r0, [pc, #0]	@ (80150c8 <_localeconv_r+0x4>)
 80150c6:	4770      	bx	lr
 80150c8:	20000450 	.word	0x20000450

080150cc <_close_r>:
 80150cc:	b538      	push	{r3, r4, r5, lr}
 80150ce:	4d06      	ldr	r5, [pc, #24]	@ (80150e8 <_close_r+0x1c>)
 80150d0:	2300      	movs	r3, #0
 80150d2:	4604      	mov	r4, r0
 80150d4:	4608      	mov	r0, r1
 80150d6:	602b      	str	r3, [r5, #0]
 80150d8:	f7eb ff5e 	bl	8000f98 <_close>
 80150dc:	1c43      	adds	r3, r0, #1
 80150de:	d102      	bne.n	80150e6 <_close_r+0x1a>
 80150e0:	682b      	ldr	r3, [r5, #0]
 80150e2:	b103      	cbz	r3, 80150e6 <_close_r+0x1a>
 80150e4:	6023      	str	r3, [r4, #0]
 80150e6:	bd38      	pop	{r3, r4, r5, pc}
 80150e8:	20006a34 	.word	0x20006a34

080150ec <_lseek_r>:
 80150ec:	b538      	push	{r3, r4, r5, lr}
 80150ee:	4d07      	ldr	r5, [pc, #28]	@ (801510c <_lseek_r+0x20>)
 80150f0:	4604      	mov	r4, r0
 80150f2:	4608      	mov	r0, r1
 80150f4:	4611      	mov	r1, r2
 80150f6:	2200      	movs	r2, #0
 80150f8:	602a      	str	r2, [r5, #0]
 80150fa:	461a      	mov	r2, r3
 80150fc:	f7eb ff58 	bl	8000fb0 <_lseek>
 8015100:	1c43      	adds	r3, r0, #1
 8015102:	d102      	bne.n	801510a <_lseek_r+0x1e>
 8015104:	682b      	ldr	r3, [r5, #0]
 8015106:	b103      	cbz	r3, 801510a <_lseek_r+0x1e>
 8015108:	6023      	str	r3, [r4, #0]
 801510a:	bd38      	pop	{r3, r4, r5, pc}
 801510c:	20006a34 	.word	0x20006a34

08015110 <_read_r>:
 8015110:	b538      	push	{r3, r4, r5, lr}
 8015112:	4d07      	ldr	r5, [pc, #28]	@ (8015130 <_read_r+0x20>)
 8015114:	4604      	mov	r4, r0
 8015116:	4608      	mov	r0, r1
 8015118:	4611      	mov	r1, r2
 801511a:	2200      	movs	r2, #0
 801511c:	602a      	str	r2, [r5, #0]
 801511e:	461a      	mov	r2, r3
 8015120:	f7eb ff48 	bl	8000fb4 <_read>
 8015124:	1c43      	adds	r3, r0, #1
 8015126:	d102      	bne.n	801512e <_read_r+0x1e>
 8015128:	682b      	ldr	r3, [r5, #0]
 801512a:	b103      	cbz	r3, 801512e <_read_r+0x1e>
 801512c:	6023      	str	r3, [r4, #0]
 801512e:	bd38      	pop	{r3, r4, r5, pc}
 8015130:	20006a34 	.word	0x20006a34

08015134 <_write_r>:
 8015134:	b538      	push	{r3, r4, r5, lr}
 8015136:	4d07      	ldr	r5, [pc, #28]	@ (8015154 <_write_r+0x20>)
 8015138:	4604      	mov	r4, r0
 801513a:	4608      	mov	r0, r1
 801513c:	4611      	mov	r1, r2
 801513e:	2200      	movs	r2, #0
 8015140:	602a      	str	r2, [r5, #0]
 8015142:	461a      	mov	r2, r3
 8015144:	f7eb ff1a 	bl	8000f7c <_write>
 8015148:	1c43      	adds	r3, r0, #1
 801514a:	d102      	bne.n	8015152 <_write_r+0x1e>
 801514c:	682b      	ldr	r3, [r5, #0]
 801514e:	b103      	cbz	r3, 8015152 <_write_r+0x1e>
 8015150:	6023      	str	r3, [r4, #0]
 8015152:	bd38      	pop	{r3, r4, r5, pc}
 8015154:	20006a34 	.word	0x20006a34

08015158 <__errno>:
 8015158:	4b01      	ldr	r3, [pc, #4]	@ (8015160 <__errno+0x8>)
 801515a:	6818      	ldr	r0, [r3, #0]
 801515c:	4770      	bx	lr
 801515e:	bf00      	nop
 8015160:	20000310 	.word	0x20000310

08015164 <__libc_init_array>:
 8015164:	b570      	push	{r4, r5, r6, lr}
 8015166:	4d0d      	ldr	r5, [pc, #52]	@ (801519c <__libc_init_array+0x38>)
 8015168:	4c0d      	ldr	r4, [pc, #52]	@ (80151a0 <__libc_init_array+0x3c>)
 801516a:	1b64      	subs	r4, r4, r5
 801516c:	10a4      	asrs	r4, r4, #2
 801516e:	2600      	movs	r6, #0
 8015170:	42a6      	cmp	r6, r4
 8015172:	d109      	bne.n	8015188 <__libc_init_array+0x24>
 8015174:	4d0b      	ldr	r5, [pc, #44]	@ (80151a4 <__libc_init_array+0x40>)
 8015176:	4c0c      	ldr	r4, [pc, #48]	@ (80151a8 <__libc_init_array+0x44>)
 8015178:	f002 f864 	bl	8017244 <_init>
 801517c:	1b64      	subs	r4, r4, r5
 801517e:	10a4      	asrs	r4, r4, #2
 8015180:	2600      	movs	r6, #0
 8015182:	42a6      	cmp	r6, r4
 8015184:	d105      	bne.n	8015192 <__libc_init_array+0x2e>
 8015186:	bd70      	pop	{r4, r5, r6, pc}
 8015188:	f855 3b04 	ldr.w	r3, [r5], #4
 801518c:	4798      	blx	r3
 801518e:	3601      	adds	r6, #1
 8015190:	e7ee      	b.n	8015170 <__libc_init_array+0xc>
 8015192:	f855 3b04 	ldr.w	r3, [r5], #4
 8015196:	4798      	blx	r3
 8015198:	3601      	adds	r6, #1
 801519a:	e7f2      	b.n	8015182 <__libc_init_array+0x1e>
 801519c:	080179b8 	.word	0x080179b8
 80151a0:	080179b8 	.word	0x080179b8
 80151a4:	080179b8 	.word	0x080179b8
 80151a8:	080179bc 	.word	0x080179bc

080151ac <__retarget_lock_init_recursive>:
 80151ac:	4770      	bx	lr

080151ae <__retarget_lock_acquire_recursive>:
 80151ae:	4770      	bx	lr

080151b0 <__retarget_lock_release_recursive>:
 80151b0:	4770      	bx	lr

080151b2 <memcpy>:
 80151b2:	440a      	add	r2, r1
 80151b4:	4291      	cmp	r1, r2
 80151b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80151ba:	d100      	bne.n	80151be <memcpy+0xc>
 80151bc:	4770      	bx	lr
 80151be:	b510      	push	{r4, lr}
 80151c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151c8:	4291      	cmp	r1, r2
 80151ca:	d1f9      	bne.n	80151c0 <memcpy+0xe>
 80151cc:	bd10      	pop	{r4, pc}

080151ce <quorem>:
 80151ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d2:	6903      	ldr	r3, [r0, #16]
 80151d4:	690c      	ldr	r4, [r1, #16]
 80151d6:	42a3      	cmp	r3, r4
 80151d8:	4607      	mov	r7, r0
 80151da:	db7e      	blt.n	80152da <quorem+0x10c>
 80151dc:	3c01      	subs	r4, #1
 80151de:	f101 0814 	add.w	r8, r1, #20
 80151e2:	00a3      	lsls	r3, r4, #2
 80151e4:	f100 0514 	add.w	r5, r0, #20
 80151e8:	9300      	str	r3, [sp, #0]
 80151ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80151ee:	9301      	str	r3, [sp, #4]
 80151f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80151f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80151f8:	3301      	adds	r3, #1
 80151fa:	429a      	cmp	r2, r3
 80151fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015200:	fbb2 f6f3 	udiv	r6, r2, r3
 8015204:	d32e      	bcc.n	8015264 <quorem+0x96>
 8015206:	f04f 0a00 	mov.w	sl, #0
 801520a:	46c4      	mov	ip, r8
 801520c:	46ae      	mov	lr, r5
 801520e:	46d3      	mov	fp, sl
 8015210:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015214:	b298      	uxth	r0, r3
 8015216:	fb06 a000 	mla	r0, r6, r0, sl
 801521a:	0c02      	lsrs	r2, r0, #16
 801521c:	0c1b      	lsrs	r3, r3, #16
 801521e:	fb06 2303 	mla	r3, r6, r3, r2
 8015222:	f8de 2000 	ldr.w	r2, [lr]
 8015226:	b280      	uxth	r0, r0
 8015228:	b292      	uxth	r2, r2
 801522a:	1a12      	subs	r2, r2, r0
 801522c:	445a      	add	r2, fp
 801522e:	f8de 0000 	ldr.w	r0, [lr]
 8015232:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015236:	b29b      	uxth	r3, r3
 8015238:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801523c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015240:	b292      	uxth	r2, r2
 8015242:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015246:	45e1      	cmp	r9, ip
 8015248:	f84e 2b04 	str.w	r2, [lr], #4
 801524c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015250:	d2de      	bcs.n	8015210 <quorem+0x42>
 8015252:	9b00      	ldr	r3, [sp, #0]
 8015254:	58eb      	ldr	r3, [r5, r3]
 8015256:	b92b      	cbnz	r3, 8015264 <quorem+0x96>
 8015258:	9b01      	ldr	r3, [sp, #4]
 801525a:	3b04      	subs	r3, #4
 801525c:	429d      	cmp	r5, r3
 801525e:	461a      	mov	r2, r3
 8015260:	d32f      	bcc.n	80152c2 <quorem+0xf4>
 8015262:	613c      	str	r4, [r7, #16]
 8015264:	4638      	mov	r0, r7
 8015266:	f001 f979 	bl	801655c <__mcmp>
 801526a:	2800      	cmp	r0, #0
 801526c:	db25      	blt.n	80152ba <quorem+0xec>
 801526e:	4629      	mov	r1, r5
 8015270:	2000      	movs	r0, #0
 8015272:	f858 2b04 	ldr.w	r2, [r8], #4
 8015276:	f8d1 c000 	ldr.w	ip, [r1]
 801527a:	fa1f fe82 	uxth.w	lr, r2
 801527e:	fa1f f38c 	uxth.w	r3, ip
 8015282:	eba3 030e 	sub.w	r3, r3, lr
 8015286:	4403      	add	r3, r0
 8015288:	0c12      	lsrs	r2, r2, #16
 801528a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801528e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015292:	b29b      	uxth	r3, r3
 8015294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015298:	45c1      	cmp	r9, r8
 801529a:	f841 3b04 	str.w	r3, [r1], #4
 801529e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80152a2:	d2e6      	bcs.n	8015272 <quorem+0xa4>
 80152a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80152a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80152ac:	b922      	cbnz	r2, 80152b8 <quorem+0xea>
 80152ae:	3b04      	subs	r3, #4
 80152b0:	429d      	cmp	r5, r3
 80152b2:	461a      	mov	r2, r3
 80152b4:	d30b      	bcc.n	80152ce <quorem+0x100>
 80152b6:	613c      	str	r4, [r7, #16]
 80152b8:	3601      	adds	r6, #1
 80152ba:	4630      	mov	r0, r6
 80152bc:	b003      	add	sp, #12
 80152be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c2:	6812      	ldr	r2, [r2, #0]
 80152c4:	3b04      	subs	r3, #4
 80152c6:	2a00      	cmp	r2, #0
 80152c8:	d1cb      	bne.n	8015262 <quorem+0x94>
 80152ca:	3c01      	subs	r4, #1
 80152cc:	e7c6      	b.n	801525c <quorem+0x8e>
 80152ce:	6812      	ldr	r2, [r2, #0]
 80152d0:	3b04      	subs	r3, #4
 80152d2:	2a00      	cmp	r2, #0
 80152d4:	d1ef      	bne.n	80152b6 <quorem+0xe8>
 80152d6:	3c01      	subs	r4, #1
 80152d8:	e7ea      	b.n	80152b0 <quorem+0xe2>
 80152da:	2000      	movs	r0, #0
 80152dc:	e7ee      	b.n	80152bc <quorem+0xee>
	...

080152e0 <_dtoa_r>:
 80152e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e4:	69c7      	ldr	r7, [r0, #28]
 80152e6:	b099      	sub	sp, #100	@ 0x64
 80152e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80152ec:	ec55 4b10 	vmov	r4, r5, d0
 80152f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80152f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80152f4:	4683      	mov	fp, r0
 80152f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80152f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80152fa:	b97f      	cbnz	r7, 801531c <_dtoa_r+0x3c>
 80152fc:	2010      	movs	r0, #16
 80152fe:	f000 fdfd 	bl	8015efc <malloc>
 8015302:	4602      	mov	r2, r0
 8015304:	f8cb 001c 	str.w	r0, [fp, #28]
 8015308:	b920      	cbnz	r0, 8015314 <_dtoa_r+0x34>
 801530a:	4ba7      	ldr	r3, [pc, #668]	@ (80155a8 <_dtoa_r+0x2c8>)
 801530c:	21ef      	movs	r1, #239	@ 0xef
 801530e:	48a7      	ldr	r0, [pc, #668]	@ (80155ac <_dtoa_r+0x2cc>)
 8015310:	f001 fc5a 	bl	8016bc8 <__assert_func>
 8015314:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015318:	6007      	str	r7, [r0, #0]
 801531a:	60c7      	str	r7, [r0, #12]
 801531c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015320:	6819      	ldr	r1, [r3, #0]
 8015322:	b159      	cbz	r1, 801533c <_dtoa_r+0x5c>
 8015324:	685a      	ldr	r2, [r3, #4]
 8015326:	604a      	str	r2, [r1, #4]
 8015328:	2301      	movs	r3, #1
 801532a:	4093      	lsls	r3, r2
 801532c:	608b      	str	r3, [r1, #8]
 801532e:	4658      	mov	r0, fp
 8015330:	f000 feda 	bl	80160e8 <_Bfree>
 8015334:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015338:	2200      	movs	r2, #0
 801533a:	601a      	str	r2, [r3, #0]
 801533c:	1e2b      	subs	r3, r5, #0
 801533e:	bfb9      	ittee	lt
 8015340:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015344:	9303      	strlt	r3, [sp, #12]
 8015346:	2300      	movge	r3, #0
 8015348:	6033      	strge	r3, [r6, #0]
 801534a:	9f03      	ldr	r7, [sp, #12]
 801534c:	4b98      	ldr	r3, [pc, #608]	@ (80155b0 <_dtoa_r+0x2d0>)
 801534e:	bfbc      	itt	lt
 8015350:	2201      	movlt	r2, #1
 8015352:	6032      	strlt	r2, [r6, #0]
 8015354:	43bb      	bics	r3, r7
 8015356:	d112      	bne.n	801537e <_dtoa_r+0x9e>
 8015358:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801535a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801535e:	6013      	str	r3, [r2, #0]
 8015360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015364:	4323      	orrs	r3, r4
 8015366:	f000 854d 	beq.w	8015e04 <_dtoa_r+0xb24>
 801536a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801536c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80155c4 <_dtoa_r+0x2e4>
 8015370:	2b00      	cmp	r3, #0
 8015372:	f000 854f 	beq.w	8015e14 <_dtoa_r+0xb34>
 8015376:	f10a 0303 	add.w	r3, sl, #3
 801537a:	f000 bd49 	b.w	8015e10 <_dtoa_r+0xb30>
 801537e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015382:	2200      	movs	r2, #0
 8015384:	ec51 0b17 	vmov	r0, r1, d7
 8015388:	2300      	movs	r3, #0
 801538a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801538e:	f7eb fbb3 	bl	8000af8 <__aeabi_dcmpeq>
 8015392:	4680      	mov	r8, r0
 8015394:	b158      	cbz	r0, 80153ae <_dtoa_r+0xce>
 8015396:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015398:	2301      	movs	r3, #1
 801539a:	6013      	str	r3, [r2, #0]
 801539c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801539e:	b113      	cbz	r3, 80153a6 <_dtoa_r+0xc6>
 80153a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80153a2:	4b84      	ldr	r3, [pc, #528]	@ (80155b4 <_dtoa_r+0x2d4>)
 80153a4:	6013      	str	r3, [r2, #0]
 80153a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80155c8 <_dtoa_r+0x2e8>
 80153aa:	f000 bd33 	b.w	8015e14 <_dtoa_r+0xb34>
 80153ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80153b2:	aa16      	add	r2, sp, #88	@ 0x58
 80153b4:	a917      	add	r1, sp, #92	@ 0x5c
 80153b6:	4658      	mov	r0, fp
 80153b8:	f001 f980 	bl	80166bc <__d2b>
 80153bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80153c0:	4681      	mov	r9, r0
 80153c2:	2e00      	cmp	r6, #0
 80153c4:	d077      	beq.n	80154b6 <_dtoa_r+0x1d6>
 80153c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80153c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80153cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80153d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80153d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80153d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80153dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80153e0:	4619      	mov	r1, r3
 80153e2:	2200      	movs	r2, #0
 80153e4:	4b74      	ldr	r3, [pc, #464]	@ (80155b8 <_dtoa_r+0x2d8>)
 80153e6:	f7ea ff67 	bl	80002b8 <__aeabi_dsub>
 80153ea:	a369      	add	r3, pc, #420	@ (adr r3, 8015590 <_dtoa_r+0x2b0>)
 80153ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f0:	f7eb f91a 	bl	8000628 <__aeabi_dmul>
 80153f4:	a368      	add	r3, pc, #416	@ (adr r3, 8015598 <_dtoa_r+0x2b8>)
 80153f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fa:	f7ea ff5f 	bl	80002bc <__adddf3>
 80153fe:	4604      	mov	r4, r0
 8015400:	4630      	mov	r0, r6
 8015402:	460d      	mov	r5, r1
 8015404:	f7eb f8a6 	bl	8000554 <__aeabi_i2d>
 8015408:	a365      	add	r3, pc, #404	@ (adr r3, 80155a0 <_dtoa_r+0x2c0>)
 801540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801540e:	f7eb f90b 	bl	8000628 <__aeabi_dmul>
 8015412:	4602      	mov	r2, r0
 8015414:	460b      	mov	r3, r1
 8015416:	4620      	mov	r0, r4
 8015418:	4629      	mov	r1, r5
 801541a:	f7ea ff4f 	bl	80002bc <__adddf3>
 801541e:	4604      	mov	r4, r0
 8015420:	460d      	mov	r5, r1
 8015422:	f7eb fbb1 	bl	8000b88 <__aeabi_d2iz>
 8015426:	2200      	movs	r2, #0
 8015428:	4607      	mov	r7, r0
 801542a:	2300      	movs	r3, #0
 801542c:	4620      	mov	r0, r4
 801542e:	4629      	mov	r1, r5
 8015430:	f7eb fb6c 	bl	8000b0c <__aeabi_dcmplt>
 8015434:	b140      	cbz	r0, 8015448 <_dtoa_r+0x168>
 8015436:	4638      	mov	r0, r7
 8015438:	f7eb f88c 	bl	8000554 <__aeabi_i2d>
 801543c:	4622      	mov	r2, r4
 801543e:	462b      	mov	r3, r5
 8015440:	f7eb fb5a 	bl	8000af8 <__aeabi_dcmpeq>
 8015444:	b900      	cbnz	r0, 8015448 <_dtoa_r+0x168>
 8015446:	3f01      	subs	r7, #1
 8015448:	2f16      	cmp	r7, #22
 801544a:	d851      	bhi.n	80154f0 <_dtoa_r+0x210>
 801544c:	4b5b      	ldr	r3, [pc, #364]	@ (80155bc <_dtoa_r+0x2dc>)
 801544e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801545a:	f7eb fb57 	bl	8000b0c <__aeabi_dcmplt>
 801545e:	2800      	cmp	r0, #0
 8015460:	d048      	beq.n	80154f4 <_dtoa_r+0x214>
 8015462:	3f01      	subs	r7, #1
 8015464:	2300      	movs	r3, #0
 8015466:	9312      	str	r3, [sp, #72]	@ 0x48
 8015468:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801546a:	1b9b      	subs	r3, r3, r6
 801546c:	1e5a      	subs	r2, r3, #1
 801546e:	bf44      	itt	mi
 8015470:	f1c3 0801 	rsbmi	r8, r3, #1
 8015474:	2300      	movmi	r3, #0
 8015476:	9208      	str	r2, [sp, #32]
 8015478:	bf54      	ite	pl
 801547a:	f04f 0800 	movpl.w	r8, #0
 801547e:	9308      	strmi	r3, [sp, #32]
 8015480:	2f00      	cmp	r7, #0
 8015482:	db39      	blt.n	80154f8 <_dtoa_r+0x218>
 8015484:	9b08      	ldr	r3, [sp, #32]
 8015486:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015488:	443b      	add	r3, r7
 801548a:	9308      	str	r3, [sp, #32]
 801548c:	2300      	movs	r3, #0
 801548e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015492:	2b09      	cmp	r3, #9
 8015494:	d864      	bhi.n	8015560 <_dtoa_r+0x280>
 8015496:	2b05      	cmp	r3, #5
 8015498:	bfc4      	itt	gt
 801549a:	3b04      	subgt	r3, #4
 801549c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801549e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154a0:	f1a3 0302 	sub.w	r3, r3, #2
 80154a4:	bfcc      	ite	gt
 80154a6:	2400      	movgt	r4, #0
 80154a8:	2401      	movle	r4, #1
 80154aa:	2b03      	cmp	r3, #3
 80154ac:	d863      	bhi.n	8015576 <_dtoa_r+0x296>
 80154ae:	e8df f003 	tbb	[pc, r3]
 80154b2:	372a      	.short	0x372a
 80154b4:	5535      	.short	0x5535
 80154b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80154ba:	441e      	add	r6, r3
 80154bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80154c0:	2b20      	cmp	r3, #32
 80154c2:	bfc1      	itttt	gt
 80154c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80154c8:	409f      	lslgt	r7, r3
 80154ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80154ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80154d2:	bfd6      	itet	le
 80154d4:	f1c3 0320 	rsble	r3, r3, #32
 80154d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80154dc:	fa04 f003 	lslle.w	r0, r4, r3
 80154e0:	f7eb f828 	bl	8000534 <__aeabi_ui2d>
 80154e4:	2201      	movs	r2, #1
 80154e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80154ea:	3e01      	subs	r6, #1
 80154ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80154ee:	e777      	b.n	80153e0 <_dtoa_r+0x100>
 80154f0:	2301      	movs	r3, #1
 80154f2:	e7b8      	b.n	8015466 <_dtoa_r+0x186>
 80154f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80154f6:	e7b7      	b.n	8015468 <_dtoa_r+0x188>
 80154f8:	427b      	negs	r3, r7
 80154fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80154fc:	2300      	movs	r3, #0
 80154fe:	eba8 0807 	sub.w	r8, r8, r7
 8015502:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015504:	e7c4      	b.n	8015490 <_dtoa_r+0x1b0>
 8015506:	2300      	movs	r3, #0
 8015508:	930b      	str	r3, [sp, #44]	@ 0x2c
 801550a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801550c:	2b00      	cmp	r3, #0
 801550e:	dc35      	bgt.n	801557c <_dtoa_r+0x29c>
 8015510:	2301      	movs	r3, #1
 8015512:	9300      	str	r3, [sp, #0]
 8015514:	9307      	str	r3, [sp, #28]
 8015516:	461a      	mov	r2, r3
 8015518:	920e      	str	r2, [sp, #56]	@ 0x38
 801551a:	e00b      	b.n	8015534 <_dtoa_r+0x254>
 801551c:	2301      	movs	r3, #1
 801551e:	e7f3      	b.n	8015508 <_dtoa_r+0x228>
 8015520:	2300      	movs	r3, #0
 8015522:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015526:	18fb      	adds	r3, r7, r3
 8015528:	9300      	str	r3, [sp, #0]
 801552a:	3301      	adds	r3, #1
 801552c:	2b01      	cmp	r3, #1
 801552e:	9307      	str	r3, [sp, #28]
 8015530:	bfb8      	it	lt
 8015532:	2301      	movlt	r3, #1
 8015534:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015538:	2100      	movs	r1, #0
 801553a:	2204      	movs	r2, #4
 801553c:	f102 0514 	add.w	r5, r2, #20
 8015540:	429d      	cmp	r5, r3
 8015542:	d91f      	bls.n	8015584 <_dtoa_r+0x2a4>
 8015544:	6041      	str	r1, [r0, #4]
 8015546:	4658      	mov	r0, fp
 8015548:	f000 fd8e 	bl	8016068 <_Balloc>
 801554c:	4682      	mov	sl, r0
 801554e:	2800      	cmp	r0, #0
 8015550:	d13c      	bne.n	80155cc <_dtoa_r+0x2ec>
 8015552:	4b1b      	ldr	r3, [pc, #108]	@ (80155c0 <_dtoa_r+0x2e0>)
 8015554:	4602      	mov	r2, r0
 8015556:	f240 11af 	movw	r1, #431	@ 0x1af
 801555a:	e6d8      	b.n	801530e <_dtoa_r+0x2e>
 801555c:	2301      	movs	r3, #1
 801555e:	e7e0      	b.n	8015522 <_dtoa_r+0x242>
 8015560:	2401      	movs	r4, #1
 8015562:	2300      	movs	r3, #0
 8015564:	9309      	str	r3, [sp, #36]	@ 0x24
 8015566:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015568:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801556c:	9300      	str	r3, [sp, #0]
 801556e:	9307      	str	r3, [sp, #28]
 8015570:	2200      	movs	r2, #0
 8015572:	2312      	movs	r3, #18
 8015574:	e7d0      	b.n	8015518 <_dtoa_r+0x238>
 8015576:	2301      	movs	r3, #1
 8015578:	930b      	str	r3, [sp, #44]	@ 0x2c
 801557a:	e7f5      	b.n	8015568 <_dtoa_r+0x288>
 801557c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	9307      	str	r3, [sp, #28]
 8015582:	e7d7      	b.n	8015534 <_dtoa_r+0x254>
 8015584:	3101      	adds	r1, #1
 8015586:	0052      	lsls	r2, r2, #1
 8015588:	e7d8      	b.n	801553c <_dtoa_r+0x25c>
 801558a:	bf00      	nop
 801558c:	f3af 8000 	nop.w
 8015590:	636f4361 	.word	0x636f4361
 8015594:	3fd287a7 	.word	0x3fd287a7
 8015598:	8b60c8b3 	.word	0x8b60c8b3
 801559c:	3fc68a28 	.word	0x3fc68a28
 80155a0:	509f79fb 	.word	0x509f79fb
 80155a4:	3fd34413 	.word	0x3fd34413
 80155a8:	08017681 	.word	0x08017681
 80155ac:	08017698 	.word	0x08017698
 80155b0:	7ff00000 	.word	0x7ff00000
 80155b4:	08017651 	.word	0x08017651
 80155b8:	3ff80000 	.word	0x3ff80000
 80155bc:	08017790 	.word	0x08017790
 80155c0:	080176f0 	.word	0x080176f0
 80155c4:	0801767d 	.word	0x0801767d
 80155c8:	08017650 	.word	0x08017650
 80155cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80155d0:	6018      	str	r0, [r3, #0]
 80155d2:	9b07      	ldr	r3, [sp, #28]
 80155d4:	2b0e      	cmp	r3, #14
 80155d6:	f200 80a4 	bhi.w	8015722 <_dtoa_r+0x442>
 80155da:	2c00      	cmp	r4, #0
 80155dc:	f000 80a1 	beq.w	8015722 <_dtoa_r+0x442>
 80155e0:	2f00      	cmp	r7, #0
 80155e2:	dd33      	ble.n	801564c <_dtoa_r+0x36c>
 80155e4:	4bad      	ldr	r3, [pc, #692]	@ (801589c <_dtoa_r+0x5bc>)
 80155e6:	f007 020f 	and.w	r2, r7, #15
 80155ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155ee:	ed93 7b00 	vldr	d7, [r3]
 80155f2:	05f8      	lsls	r0, r7, #23
 80155f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80155f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80155fc:	d516      	bpl.n	801562c <_dtoa_r+0x34c>
 80155fe:	4ba8      	ldr	r3, [pc, #672]	@ (80158a0 <_dtoa_r+0x5c0>)
 8015600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015608:	f7eb f938 	bl	800087c <__aeabi_ddiv>
 801560c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015610:	f004 040f 	and.w	r4, r4, #15
 8015614:	2603      	movs	r6, #3
 8015616:	4da2      	ldr	r5, [pc, #648]	@ (80158a0 <_dtoa_r+0x5c0>)
 8015618:	b954      	cbnz	r4, 8015630 <_dtoa_r+0x350>
 801561a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801561e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015622:	f7eb f92b 	bl	800087c <__aeabi_ddiv>
 8015626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801562a:	e028      	b.n	801567e <_dtoa_r+0x39e>
 801562c:	2602      	movs	r6, #2
 801562e:	e7f2      	b.n	8015616 <_dtoa_r+0x336>
 8015630:	07e1      	lsls	r1, r4, #31
 8015632:	d508      	bpl.n	8015646 <_dtoa_r+0x366>
 8015634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015638:	e9d5 2300 	ldrd	r2, r3, [r5]
 801563c:	f7ea fff4 	bl	8000628 <__aeabi_dmul>
 8015640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015644:	3601      	adds	r6, #1
 8015646:	1064      	asrs	r4, r4, #1
 8015648:	3508      	adds	r5, #8
 801564a:	e7e5      	b.n	8015618 <_dtoa_r+0x338>
 801564c:	f000 80d2 	beq.w	80157f4 <_dtoa_r+0x514>
 8015650:	427c      	negs	r4, r7
 8015652:	4b92      	ldr	r3, [pc, #584]	@ (801589c <_dtoa_r+0x5bc>)
 8015654:	4d92      	ldr	r5, [pc, #584]	@ (80158a0 <_dtoa_r+0x5c0>)
 8015656:	f004 020f 	and.w	r2, r4, #15
 801565a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015662:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015666:	f7ea ffdf 	bl	8000628 <__aeabi_dmul>
 801566a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801566e:	1124      	asrs	r4, r4, #4
 8015670:	2300      	movs	r3, #0
 8015672:	2602      	movs	r6, #2
 8015674:	2c00      	cmp	r4, #0
 8015676:	f040 80b2 	bne.w	80157de <_dtoa_r+0x4fe>
 801567a:	2b00      	cmp	r3, #0
 801567c:	d1d3      	bne.n	8015626 <_dtoa_r+0x346>
 801567e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015680:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015684:	2b00      	cmp	r3, #0
 8015686:	f000 80b7 	beq.w	80157f8 <_dtoa_r+0x518>
 801568a:	4b86      	ldr	r3, [pc, #536]	@ (80158a4 <_dtoa_r+0x5c4>)
 801568c:	2200      	movs	r2, #0
 801568e:	4620      	mov	r0, r4
 8015690:	4629      	mov	r1, r5
 8015692:	f7eb fa3b 	bl	8000b0c <__aeabi_dcmplt>
 8015696:	2800      	cmp	r0, #0
 8015698:	f000 80ae 	beq.w	80157f8 <_dtoa_r+0x518>
 801569c:	9b07      	ldr	r3, [sp, #28]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	f000 80aa 	beq.w	80157f8 <_dtoa_r+0x518>
 80156a4:	9b00      	ldr	r3, [sp, #0]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	dd37      	ble.n	801571a <_dtoa_r+0x43a>
 80156aa:	1e7b      	subs	r3, r7, #1
 80156ac:	9304      	str	r3, [sp, #16]
 80156ae:	4620      	mov	r0, r4
 80156b0:	4b7d      	ldr	r3, [pc, #500]	@ (80158a8 <_dtoa_r+0x5c8>)
 80156b2:	2200      	movs	r2, #0
 80156b4:	4629      	mov	r1, r5
 80156b6:	f7ea ffb7 	bl	8000628 <__aeabi_dmul>
 80156ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156be:	9c00      	ldr	r4, [sp, #0]
 80156c0:	3601      	adds	r6, #1
 80156c2:	4630      	mov	r0, r6
 80156c4:	f7ea ff46 	bl	8000554 <__aeabi_i2d>
 80156c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80156cc:	f7ea ffac 	bl	8000628 <__aeabi_dmul>
 80156d0:	4b76      	ldr	r3, [pc, #472]	@ (80158ac <_dtoa_r+0x5cc>)
 80156d2:	2200      	movs	r2, #0
 80156d4:	f7ea fdf2 	bl	80002bc <__adddf3>
 80156d8:	4605      	mov	r5, r0
 80156da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80156de:	2c00      	cmp	r4, #0
 80156e0:	f040 808d 	bne.w	80157fe <_dtoa_r+0x51e>
 80156e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156e8:	4b71      	ldr	r3, [pc, #452]	@ (80158b0 <_dtoa_r+0x5d0>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	f7ea fde4 	bl	80002b8 <__aeabi_dsub>
 80156f0:	4602      	mov	r2, r0
 80156f2:	460b      	mov	r3, r1
 80156f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80156f8:	462a      	mov	r2, r5
 80156fa:	4633      	mov	r3, r6
 80156fc:	f7eb fa24 	bl	8000b48 <__aeabi_dcmpgt>
 8015700:	2800      	cmp	r0, #0
 8015702:	f040 828b 	bne.w	8015c1c <_dtoa_r+0x93c>
 8015706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801570a:	462a      	mov	r2, r5
 801570c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015710:	f7eb f9fc 	bl	8000b0c <__aeabi_dcmplt>
 8015714:	2800      	cmp	r0, #0
 8015716:	f040 8128 	bne.w	801596a <_dtoa_r+0x68a>
 801571a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801571e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015722:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015724:	2b00      	cmp	r3, #0
 8015726:	f2c0 815a 	blt.w	80159de <_dtoa_r+0x6fe>
 801572a:	2f0e      	cmp	r7, #14
 801572c:	f300 8157 	bgt.w	80159de <_dtoa_r+0x6fe>
 8015730:	4b5a      	ldr	r3, [pc, #360]	@ (801589c <_dtoa_r+0x5bc>)
 8015732:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015736:	ed93 7b00 	vldr	d7, [r3]
 801573a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801573c:	2b00      	cmp	r3, #0
 801573e:	ed8d 7b00 	vstr	d7, [sp]
 8015742:	da03      	bge.n	801574c <_dtoa_r+0x46c>
 8015744:	9b07      	ldr	r3, [sp, #28]
 8015746:	2b00      	cmp	r3, #0
 8015748:	f340 8101 	ble.w	801594e <_dtoa_r+0x66e>
 801574c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015750:	4656      	mov	r6, sl
 8015752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015756:	4620      	mov	r0, r4
 8015758:	4629      	mov	r1, r5
 801575a:	f7eb f88f 	bl	800087c <__aeabi_ddiv>
 801575e:	f7eb fa13 	bl	8000b88 <__aeabi_d2iz>
 8015762:	4680      	mov	r8, r0
 8015764:	f7ea fef6 	bl	8000554 <__aeabi_i2d>
 8015768:	e9dd 2300 	ldrd	r2, r3, [sp]
 801576c:	f7ea ff5c 	bl	8000628 <__aeabi_dmul>
 8015770:	4602      	mov	r2, r0
 8015772:	460b      	mov	r3, r1
 8015774:	4620      	mov	r0, r4
 8015776:	4629      	mov	r1, r5
 8015778:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801577c:	f7ea fd9c 	bl	80002b8 <__aeabi_dsub>
 8015780:	f806 4b01 	strb.w	r4, [r6], #1
 8015784:	9d07      	ldr	r5, [sp, #28]
 8015786:	eba6 040a 	sub.w	r4, r6, sl
 801578a:	42a5      	cmp	r5, r4
 801578c:	4602      	mov	r2, r0
 801578e:	460b      	mov	r3, r1
 8015790:	f040 8117 	bne.w	80159c2 <_dtoa_r+0x6e2>
 8015794:	f7ea fd92 	bl	80002bc <__adddf3>
 8015798:	e9dd 2300 	ldrd	r2, r3, [sp]
 801579c:	4604      	mov	r4, r0
 801579e:	460d      	mov	r5, r1
 80157a0:	f7eb f9d2 	bl	8000b48 <__aeabi_dcmpgt>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	f040 80f9 	bne.w	801599c <_dtoa_r+0x6bc>
 80157aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157ae:	4620      	mov	r0, r4
 80157b0:	4629      	mov	r1, r5
 80157b2:	f7eb f9a1 	bl	8000af8 <__aeabi_dcmpeq>
 80157b6:	b118      	cbz	r0, 80157c0 <_dtoa_r+0x4e0>
 80157b8:	f018 0f01 	tst.w	r8, #1
 80157bc:	f040 80ee 	bne.w	801599c <_dtoa_r+0x6bc>
 80157c0:	4649      	mov	r1, r9
 80157c2:	4658      	mov	r0, fp
 80157c4:	f000 fc90 	bl	80160e8 <_Bfree>
 80157c8:	2300      	movs	r3, #0
 80157ca:	7033      	strb	r3, [r6, #0]
 80157cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80157ce:	3701      	adds	r7, #1
 80157d0:	601f      	str	r7, [r3, #0]
 80157d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f000 831d 	beq.w	8015e14 <_dtoa_r+0xb34>
 80157da:	601e      	str	r6, [r3, #0]
 80157dc:	e31a      	b.n	8015e14 <_dtoa_r+0xb34>
 80157de:	07e2      	lsls	r2, r4, #31
 80157e0:	d505      	bpl.n	80157ee <_dtoa_r+0x50e>
 80157e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80157e6:	f7ea ff1f 	bl	8000628 <__aeabi_dmul>
 80157ea:	3601      	adds	r6, #1
 80157ec:	2301      	movs	r3, #1
 80157ee:	1064      	asrs	r4, r4, #1
 80157f0:	3508      	adds	r5, #8
 80157f2:	e73f      	b.n	8015674 <_dtoa_r+0x394>
 80157f4:	2602      	movs	r6, #2
 80157f6:	e742      	b.n	801567e <_dtoa_r+0x39e>
 80157f8:	9c07      	ldr	r4, [sp, #28]
 80157fa:	9704      	str	r7, [sp, #16]
 80157fc:	e761      	b.n	80156c2 <_dtoa_r+0x3e2>
 80157fe:	4b27      	ldr	r3, [pc, #156]	@ (801589c <_dtoa_r+0x5bc>)
 8015800:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015802:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015806:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801580a:	4454      	add	r4, sl
 801580c:	2900      	cmp	r1, #0
 801580e:	d053      	beq.n	80158b8 <_dtoa_r+0x5d8>
 8015810:	4928      	ldr	r1, [pc, #160]	@ (80158b4 <_dtoa_r+0x5d4>)
 8015812:	2000      	movs	r0, #0
 8015814:	f7eb f832 	bl	800087c <__aeabi_ddiv>
 8015818:	4633      	mov	r3, r6
 801581a:	462a      	mov	r2, r5
 801581c:	f7ea fd4c 	bl	80002b8 <__aeabi_dsub>
 8015820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015824:	4656      	mov	r6, sl
 8015826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801582a:	f7eb f9ad 	bl	8000b88 <__aeabi_d2iz>
 801582e:	4605      	mov	r5, r0
 8015830:	f7ea fe90 	bl	8000554 <__aeabi_i2d>
 8015834:	4602      	mov	r2, r0
 8015836:	460b      	mov	r3, r1
 8015838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801583c:	f7ea fd3c 	bl	80002b8 <__aeabi_dsub>
 8015840:	3530      	adds	r5, #48	@ 0x30
 8015842:	4602      	mov	r2, r0
 8015844:	460b      	mov	r3, r1
 8015846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801584a:	f806 5b01 	strb.w	r5, [r6], #1
 801584e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015852:	f7eb f95b 	bl	8000b0c <__aeabi_dcmplt>
 8015856:	2800      	cmp	r0, #0
 8015858:	d171      	bne.n	801593e <_dtoa_r+0x65e>
 801585a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801585e:	4911      	ldr	r1, [pc, #68]	@ (80158a4 <_dtoa_r+0x5c4>)
 8015860:	2000      	movs	r0, #0
 8015862:	f7ea fd29 	bl	80002b8 <__aeabi_dsub>
 8015866:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801586a:	f7eb f94f 	bl	8000b0c <__aeabi_dcmplt>
 801586e:	2800      	cmp	r0, #0
 8015870:	f040 8095 	bne.w	801599e <_dtoa_r+0x6be>
 8015874:	42a6      	cmp	r6, r4
 8015876:	f43f af50 	beq.w	801571a <_dtoa_r+0x43a>
 801587a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801587e:	4b0a      	ldr	r3, [pc, #40]	@ (80158a8 <_dtoa_r+0x5c8>)
 8015880:	2200      	movs	r2, #0
 8015882:	f7ea fed1 	bl	8000628 <__aeabi_dmul>
 8015886:	4b08      	ldr	r3, [pc, #32]	@ (80158a8 <_dtoa_r+0x5c8>)
 8015888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801588c:	2200      	movs	r2, #0
 801588e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015892:	f7ea fec9 	bl	8000628 <__aeabi_dmul>
 8015896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801589a:	e7c4      	b.n	8015826 <_dtoa_r+0x546>
 801589c:	08017790 	.word	0x08017790
 80158a0:	08017768 	.word	0x08017768
 80158a4:	3ff00000 	.word	0x3ff00000
 80158a8:	40240000 	.word	0x40240000
 80158ac:	401c0000 	.word	0x401c0000
 80158b0:	40140000 	.word	0x40140000
 80158b4:	3fe00000 	.word	0x3fe00000
 80158b8:	4631      	mov	r1, r6
 80158ba:	4628      	mov	r0, r5
 80158bc:	f7ea feb4 	bl	8000628 <__aeabi_dmul>
 80158c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80158c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80158c6:	4656      	mov	r6, sl
 80158c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158cc:	f7eb f95c 	bl	8000b88 <__aeabi_d2iz>
 80158d0:	4605      	mov	r5, r0
 80158d2:	f7ea fe3f 	bl	8000554 <__aeabi_i2d>
 80158d6:	4602      	mov	r2, r0
 80158d8:	460b      	mov	r3, r1
 80158da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158de:	f7ea fceb 	bl	80002b8 <__aeabi_dsub>
 80158e2:	3530      	adds	r5, #48	@ 0x30
 80158e4:	f806 5b01 	strb.w	r5, [r6], #1
 80158e8:	4602      	mov	r2, r0
 80158ea:	460b      	mov	r3, r1
 80158ec:	42a6      	cmp	r6, r4
 80158ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80158f2:	f04f 0200 	mov.w	r2, #0
 80158f6:	d124      	bne.n	8015942 <_dtoa_r+0x662>
 80158f8:	4bac      	ldr	r3, [pc, #688]	@ (8015bac <_dtoa_r+0x8cc>)
 80158fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80158fe:	f7ea fcdd 	bl	80002bc <__adddf3>
 8015902:	4602      	mov	r2, r0
 8015904:	460b      	mov	r3, r1
 8015906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801590a:	f7eb f91d 	bl	8000b48 <__aeabi_dcmpgt>
 801590e:	2800      	cmp	r0, #0
 8015910:	d145      	bne.n	801599e <_dtoa_r+0x6be>
 8015912:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015916:	49a5      	ldr	r1, [pc, #660]	@ (8015bac <_dtoa_r+0x8cc>)
 8015918:	2000      	movs	r0, #0
 801591a:	f7ea fccd 	bl	80002b8 <__aeabi_dsub>
 801591e:	4602      	mov	r2, r0
 8015920:	460b      	mov	r3, r1
 8015922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015926:	f7eb f8f1 	bl	8000b0c <__aeabi_dcmplt>
 801592a:	2800      	cmp	r0, #0
 801592c:	f43f aef5 	beq.w	801571a <_dtoa_r+0x43a>
 8015930:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015932:	1e73      	subs	r3, r6, #1
 8015934:	9315      	str	r3, [sp, #84]	@ 0x54
 8015936:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801593a:	2b30      	cmp	r3, #48	@ 0x30
 801593c:	d0f8      	beq.n	8015930 <_dtoa_r+0x650>
 801593e:	9f04      	ldr	r7, [sp, #16]
 8015940:	e73e      	b.n	80157c0 <_dtoa_r+0x4e0>
 8015942:	4b9b      	ldr	r3, [pc, #620]	@ (8015bb0 <_dtoa_r+0x8d0>)
 8015944:	f7ea fe70 	bl	8000628 <__aeabi_dmul>
 8015948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801594c:	e7bc      	b.n	80158c8 <_dtoa_r+0x5e8>
 801594e:	d10c      	bne.n	801596a <_dtoa_r+0x68a>
 8015950:	4b98      	ldr	r3, [pc, #608]	@ (8015bb4 <_dtoa_r+0x8d4>)
 8015952:	2200      	movs	r2, #0
 8015954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015958:	f7ea fe66 	bl	8000628 <__aeabi_dmul>
 801595c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015960:	f7eb f8e8 	bl	8000b34 <__aeabi_dcmpge>
 8015964:	2800      	cmp	r0, #0
 8015966:	f000 8157 	beq.w	8015c18 <_dtoa_r+0x938>
 801596a:	2400      	movs	r4, #0
 801596c:	4625      	mov	r5, r4
 801596e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015970:	43db      	mvns	r3, r3
 8015972:	9304      	str	r3, [sp, #16]
 8015974:	4656      	mov	r6, sl
 8015976:	2700      	movs	r7, #0
 8015978:	4621      	mov	r1, r4
 801597a:	4658      	mov	r0, fp
 801597c:	f000 fbb4 	bl	80160e8 <_Bfree>
 8015980:	2d00      	cmp	r5, #0
 8015982:	d0dc      	beq.n	801593e <_dtoa_r+0x65e>
 8015984:	b12f      	cbz	r7, 8015992 <_dtoa_r+0x6b2>
 8015986:	42af      	cmp	r7, r5
 8015988:	d003      	beq.n	8015992 <_dtoa_r+0x6b2>
 801598a:	4639      	mov	r1, r7
 801598c:	4658      	mov	r0, fp
 801598e:	f000 fbab 	bl	80160e8 <_Bfree>
 8015992:	4629      	mov	r1, r5
 8015994:	4658      	mov	r0, fp
 8015996:	f000 fba7 	bl	80160e8 <_Bfree>
 801599a:	e7d0      	b.n	801593e <_dtoa_r+0x65e>
 801599c:	9704      	str	r7, [sp, #16]
 801599e:	4633      	mov	r3, r6
 80159a0:	461e      	mov	r6, r3
 80159a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80159a6:	2a39      	cmp	r2, #57	@ 0x39
 80159a8:	d107      	bne.n	80159ba <_dtoa_r+0x6da>
 80159aa:	459a      	cmp	sl, r3
 80159ac:	d1f8      	bne.n	80159a0 <_dtoa_r+0x6c0>
 80159ae:	9a04      	ldr	r2, [sp, #16]
 80159b0:	3201      	adds	r2, #1
 80159b2:	9204      	str	r2, [sp, #16]
 80159b4:	2230      	movs	r2, #48	@ 0x30
 80159b6:	f88a 2000 	strb.w	r2, [sl]
 80159ba:	781a      	ldrb	r2, [r3, #0]
 80159bc:	3201      	adds	r2, #1
 80159be:	701a      	strb	r2, [r3, #0]
 80159c0:	e7bd      	b.n	801593e <_dtoa_r+0x65e>
 80159c2:	4b7b      	ldr	r3, [pc, #492]	@ (8015bb0 <_dtoa_r+0x8d0>)
 80159c4:	2200      	movs	r2, #0
 80159c6:	f7ea fe2f 	bl	8000628 <__aeabi_dmul>
 80159ca:	2200      	movs	r2, #0
 80159cc:	2300      	movs	r3, #0
 80159ce:	4604      	mov	r4, r0
 80159d0:	460d      	mov	r5, r1
 80159d2:	f7eb f891 	bl	8000af8 <__aeabi_dcmpeq>
 80159d6:	2800      	cmp	r0, #0
 80159d8:	f43f aebb 	beq.w	8015752 <_dtoa_r+0x472>
 80159dc:	e6f0      	b.n	80157c0 <_dtoa_r+0x4e0>
 80159de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80159e0:	2a00      	cmp	r2, #0
 80159e2:	f000 80db 	beq.w	8015b9c <_dtoa_r+0x8bc>
 80159e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159e8:	2a01      	cmp	r2, #1
 80159ea:	f300 80bf 	bgt.w	8015b6c <_dtoa_r+0x88c>
 80159ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80159f0:	2a00      	cmp	r2, #0
 80159f2:	f000 80b7 	beq.w	8015b64 <_dtoa_r+0x884>
 80159f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80159fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80159fc:	4646      	mov	r6, r8
 80159fe:	9a08      	ldr	r2, [sp, #32]
 8015a00:	2101      	movs	r1, #1
 8015a02:	441a      	add	r2, r3
 8015a04:	4658      	mov	r0, fp
 8015a06:	4498      	add	r8, r3
 8015a08:	9208      	str	r2, [sp, #32]
 8015a0a:	f000 fc21 	bl	8016250 <__i2b>
 8015a0e:	4605      	mov	r5, r0
 8015a10:	b15e      	cbz	r6, 8015a2a <_dtoa_r+0x74a>
 8015a12:	9b08      	ldr	r3, [sp, #32]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	dd08      	ble.n	8015a2a <_dtoa_r+0x74a>
 8015a18:	42b3      	cmp	r3, r6
 8015a1a:	9a08      	ldr	r2, [sp, #32]
 8015a1c:	bfa8      	it	ge
 8015a1e:	4633      	movge	r3, r6
 8015a20:	eba8 0803 	sub.w	r8, r8, r3
 8015a24:	1af6      	subs	r6, r6, r3
 8015a26:	1ad3      	subs	r3, r2, r3
 8015a28:	9308      	str	r3, [sp, #32]
 8015a2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a2c:	b1f3      	cbz	r3, 8015a6c <_dtoa_r+0x78c>
 8015a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	f000 80b7 	beq.w	8015ba4 <_dtoa_r+0x8c4>
 8015a36:	b18c      	cbz	r4, 8015a5c <_dtoa_r+0x77c>
 8015a38:	4629      	mov	r1, r5
 8015a3a:	4622      	mov	r2, r4
 8015a3c:	4658      	mov	r0, fp
 8015a3e:	f000 fcc7 	bl	80163d0 <__pow5mult>
 8015a42:	464a      	mov	r2, r9
 8015a44:	4601      	mov	r1, r0
 8015a46:	4605      	mov	r5, r0
 8015a48:	4658      	mov	r0, fp
 8015a4a:	f000 fc17 	bl	801627c <__multiply>
 8015a4e:	4649      	mov	r1, r9
 8015a50:	9004      	str	r0, [sp, #16]
 8015a52:	4658      	mov	r0, fp
 8015a54:	f000 fb48 	bl	80160e8 <_Bfree>
 8015a58:	9b04      	ldr	r3, [sp, #16]
 8015a5a:	4699      	mov	r9, r3
 8015a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a5e:	1b1a      	subs	r2, r3, r4
 8015a60:	d004      	beq.n	8015a6c <_dtoa_r+0x78c>
 8015a62:	4649      	mov	r1, r9
 8015a64:	4658      	mov	r0, fp
 8015a66:	f000 fcb3 	bl	80163d0 <__pow5mult>
 8015a6a:	4681      	mov	r9, r0
 8015a6c:	2101      	movs	r1, #1
 8015a6e:	4658      	mov	r0, fp
 8015a70:	f000 fbee 	bl	8016250 <__i2b>
 8015a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a76:	4604      	mov	r4, r0
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	f000 81cf 	beq.w	8015e1c <_dtoa_r+0xb3c>
 8015a7e:	461a      	mov	r2, r3
 8015a80:	4601      	mov	r1, r0
 8015a82:	4658      	mov	r0, fp
 8015a84:	f000 fca4 	bl	80163d0 <__pow5mult>
 8015a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	4604      	mov	r4, r0
 8015a8e:	f300 8095 	bgt.w	8015bbc <_dtoa_r+0x8dc>
 8015a92:	9b02      	ldr	r3, [sp, #8]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	f040 8087 	bne.w	8015ba8 <_dtoa_r+0x8c8>
 8015a9a:	9b03      	ldr	r3, [sp, #12]
 8015a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	f040 8089 	bne.w	8015bb8 <_dtoa_r+0x8d8>
 8015aa6:	9b03      	ldr	r3, [sp, #12]
 8015aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015aac:	0d1b      	lsrs	r3, r3, #20
 8015aae:	051b      	lsls	r3, r3, #20
 8015ab0:	b12b      	cbz	r3, 8015abe <_dtoa_r+0x7de>
 8015ab2:	9b08      	ldr	r3, [sp, #32]
 8015ab4:	3301      	adds	r3, #1
 8015ab6:	9308      	str	r3, [sp, #32]
 8015ab8:	f108 0801 	add.w	r8, r8, #1
 8015abc:	2301      	movs	r3, #1
 8015abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	f000 81b0 	beq.w	8015e28 <_dtoa_r+0xb48>
 8015ac8:	6923      	ldr	r3, [r4, #16]
 8015aca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ace:	6918      	ldr	r0, [r3, #16]
 8015ad0:	f000 fb72 	bl	80161b8 <__hi0bits>
 8015ad4:	f1c0 0020 	rsb	r0, r0, #32
 8015ad8:	9b08      	ldr	r3, [sp, #32]
 8015ada:	4418      	add	r0, r3
 8015adc:	f010 001f 	ands.w	r0, r0, #31
 8015ae0:	d077      	beq.n	8015bd2 <_dtoa_r+0x8f2>
 8015ae2:	f1c0 0320 	rsb	r3, r0, #32
 8015ae6:	2b04      	cmp	r3, #4
 8015ae8:	dd6b      	ble.n	8015bc2 <_dtoa_r+0x8e2>
 8015aea:	9b08      	ldr	r3, [sp, #32]
 8015aec:	f1c0 001c 	rsb	r0, r0, #28
 8015af0:	4403      	add	r3, r0
 8015af2:	4480      	add	r8, r0
 8015af4:	4406      	add	r6, r0
 8015af6:	9308      	str	r3, [sp, #32]
 8015af8:	f1b8 0f00 	cmp.w	r8, #0
 8015afc:	dd05      	ble.n	8015b0a <_dtoa_r+0x82a>
 8015afe:	4649      	mov	r1, r9
 8015b00:	4642      	mov	r2, r8
 8015b02:	4658      	mov	r0, fp
 8015b04:	f000 fcbe 	bl	8016484 <__lshift>
 8015b08:	4681      	mov	r9, r0
 8015b0a:	9b08      	ldr	r3, [sp, #32]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	dd05      	ble.n	8015b1c <_dtoa_r+0x83c>
 8015b10:	4621      	mov	r1, r4
 8015b12:	461a      	mov	r2, r3
 8015b14:	4658      	mov	r0, fp
 8015b16:	f000 fcb5 	bl	8016484 <__lshift>
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d059      	beq.n	8015bd6 <_dtoa_r+0x8f6>
 8015b22:	4621      	mov	r1, r4
 8015b24:	4648      	mov	r0, r9
 8015b26:	f000 fd19 	bl	801655c <__mcmp>
 8015b2a:	2800      	cmp	r0, #0
 8015b2c:	da53      	bge.n	8015bd6 <_dtoa_r+0x8f6>
 8015b2e:	1e7b      	subs	r3, r7, #1
 8015b30:	9304      	str	r3, [sp, #16]
 8015b32:	4649      	mov	r1, r9
 8015b34:	2300      	movs	r3, #0
 8015b36:	220a      	movs	r2, #10
 8015b38:	4658      	mov	r0, fp
 8015b3a:	f000 faf7 	bl	801612c <__multadd>
 8015b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015b40:	4681      	mov	r9, r0
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	f000 8172 	beq.w	8015e2c <_dtoa_r+0xb4c>
 8015b48:	2300      	movs	r3, #0
 8015b4a:	4629      	mov	r1, r5
 8015b4c:	220a      	movs	r2, #10
 8015b4e:	4658      	mov	r0, fp
 8015b50:	f000 faec 	bl	801612c <__multadd>
 8015b54:	9b00      	ldr	r3, [sp, #0]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	4605      	mov	r5, r0
 8015b5a:	dc67      	bgt.n	8015c2c <_dtoa_r+0x94c>
 8015b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b5e:	2b02      	cmp	r3, #2
 8015b60:	dc41      	bgt.n	8015be6 <_dtoa_r+0x906>
 8015b62:	e063      	b.n	8015c2c <_dtoa_r+0x94c>
 8015b64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015b66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015b6a:	e746      	b.n	80159fa <_dtoa_r+0x71a>
 8015b6c:	9b07      	ldr	r3, [sp, #28]
 8015b6e:	1e5c      	subs	r4, r3, #1
 8015b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b72:	42a3      	cmp	r3, r4
 8015b74:	bfbf      	itttt	lt
 8015b76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015b78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015b7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015b7c:	1ae3      	sublt	r3, r4, r3
 8015b7e:	bfb4      	ite	lt
 8015b80:	18d2      	addlt	r2, r2, r3
 8015b82:	1b1c      	subge	r4, r3, r4
 8015b84:	9b07      	ldr	r3, [sp, #28]
 8015b86:	bfbc      	itt	lt
 8015b88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015b8a:	2400      	movlt	r4, #0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	bfb5      	itete	lt
 8015b90:	eba8 0603 	sublt.w	r6, r8, r3
 8015b94:	9b07      	ldrge	r3, [sp, #28]
 8015b96:	2300      	movlt	r3, #0
 8015b98:	4646      	movge	r6, r8
 8015b9a:	e730      	b.n	80159fe <_dtoa_r+0x71e>
 8015b9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015b9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015ba0:	4646      	mov	r6, r8
 8015ba2:	e735      	b.n	8015a10 <_dtoa_r+0x730>
 8015ba4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015ba6:	e75c      	b.n	8015a62 <_dtoa_r+0x782>
 8015ba8:	2300      	movs	r3, #0
 8015baa:	e788      	b.n	8015abe <_dtoa_r+0x7de>
 8015bac:	3fe00000 	.word	0x3fe00000
 8015bb0:	40240000 	.word	0x40240000
 8015bb4:	40140000 	.word	0x40140000
 8015bb8:	9b02      	ldr	r3, [sp, #8]
 8015bba:	e780      	b.n	8015abe <_dtoa_r+0x7de>
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8015bc0:	e782      	b.n	8015ac8 <_dtoa_r+0x7e8>
 8015bc2:	d099      	beq.n	8015af8 <_dtoa_r+0x818>
 8015bc4:	9a08      	ldr	r2, [sp, #32]
 8015bc6:	331c      	adds	r3, #28
 8015bc8:	441a      	add	r2, r3
 8015bca:	4498      	add	r8, r3
 8015bcc:	441e      	add	r6, r3
 8015bce:	9208      	str	r2, [sp, #32]
 8015bd0:	e792      	b.n	8015af8 <_dtoa_r+0x818>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	e7f6      	b.n	8015bc4 <_dtoa_r+0x8e4>
 8015bd6:	9b07      	ldr	r3, [sp, #28]
 8015bd8:	9704      	str	r7, [sp, #16]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	dc20      	bgt.n	8015c20 <_dtoa_r+0x940>
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015be2:	2b02      	cmp	r3, #2
 8015be4:	dd1e      	ble.n	8015c24 <_dtoa_r+0x944>
 8015be6:	9b00      	ldr	r3, [sp, #0]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f47f aec0 	bne.w	801596e <_dtoa_r+0x68e>
 8015bee:	4621      	mov	r1, r4
 8015bf0:	2205      	movs	r2, #5
 8015bf2:	4658      	mov	r0, fp
 8015bf4:	f000 fa9a 	bl	801612c <__multadd>
 8015bf8:	4601      	mov	r1, r0
 8015bfa:	4604      	mov	r4, r0
 8015bfc:	4648      	mov	r0, r9
 8015bfe:	f000 fcad 	bl	801655c <__mcmp>
 8015c02:	2800      	cmp	r0, #0
 8015c04:	f77f aeb3 	ble.w	801596e <_dtoa_r+0x68e>
 8015c08:	4656      	mov	r6, sl
 8015c0a:	2331      	movs	r3, #49	@ 0x31
 8015c0c:	f806 3b01 	strb.w	r3, [r6], #1
 8015c10:	9b04      	ldr	r3, [sp, #16]
 8015c12:	3301      	adds	r3, #1
 8015c14:	9304      	str	r3, [sp, #16]
 8015c16:	e6ae      	b.n	8015976 <_dtoa_r+0x696>
 8015c18:	9c07      	ldr	r4, [sp, #28]
 8015c1a:	9704      	str	r7, [sp, #16]
 8015c1c:	4625      	mov	r5, r4
 8015c1e:	e7f3      	b.n	8015c08 <_dtoa_r+0x928>
 8015c20:	9b07      	ldr	r3, [sp, #28]
 8015c22:	9300      	str	r3, [sp, #0]
 8015c24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	f000 8104 	beq.w	8015e34 <_dtoa_r+0xb54>
 8015c2c:	2e00      	cmp	r6, #0
 8015c2e:	dd05      	ble.n	8015c3c <_dtoa_r+0x95c>
 8015c30:	4629      	mov	r1, r5
 8015c32:	4632      	mov	r2, r6
 8015c34:	4658      	mov	r0, fp
 8015c36:	f000 fc25 	bl	8016484 <__lshift>
 8015c3a:	4605      	mov	r5, r0
 8015c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d05a      	beq.n	8015cf8 <_dtoa_r+0xa18>
 8015c42:	6869      	ldr	r1, [r5, #4]
 8015c44:	4658      	mov	r0, fp
 8015c46:	f000 fa0f 	bl	8016068 <_Balloc>
 8015c4a:	4606      	mov	r6, r0
 8015c4c:	b928      	cbnz	r0, 8015c5a <_dtoa_r+0x97a>
 8015c4e:	4b84      	ldr	r3, [pc, #528]	@ (8015e60 <_dtoa_r+0xb80>)
 8015c50:	4602      	mov	r2, r0
 8015c52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015c56:	f7ff bb5a 	b.w	801530e <_dtoa_r+0x2e>
 8015c5a:	692a      	ldr	r2, [r5, #16]
 8015c5c:	3202      	adds	r2, #2
 8015c5e:	0092      	lsls	r2, r2, #2
 8015c60:	f105 010c 	add.w	r1, r5, #12
 8015c64:	300c      	adds	r0, #12
 8015c66:	f7ff faa4 	bl	80151b2 <memcpy>
 8015c6a:	2201      	movs	r2, #1
 8015c6c:	4631      	mov	r1, r6
 8015c6e:	4658      	mov	r0, fp
 8015c70:	f000 fc08 	bl	8016484 <__lshift>
 8015c74:	f10a 0301 	add.w	r3, sl, #1
 8015c78:	9307      	str	r3, [sp, #28]
 8015c7a:	9b00      	ldr	r3, [sp, #0]
 8015c7c:	4453      	add	r3, sl
 8015c7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015c80:	9b02      	ldr	r3, [sp, #8]
 8015c82:	f003 0301 	and.w	r3, r3, #1
 8015c86:	462f      	mov	r7, r5
 8015c88:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c8a:	4605      	mov	r5, r0
 8015c8c:	9b07      	ldr	r3, [sp, #28]
 8015c8e:	4621      	mov	r1, r4
 8015c90:	3b01      	subs	r3, #1
 8015c92:	4648      	mov	r0, r9
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	f7ff fa9a 	bl	80151ce <quorem>
 8015c9a:	4639      	mov	r1, r7
 8015c9c:	9002      	str	r0, [sp, #8]
 8015c9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015ca2:	4648      	mov	r0, r9
 8015ca4:	f000 fc5a 	bl	801655c <__mcmp>
 8015ca8:	462a      	mov	r2, r5
 8015caa:	9008      	str	r0, [sp, #32]
 8015cac:	4621      	mov	r1, r4
 8015cae:	4658      	mov	r0, fp
 8015cb0:	f000 fc70 	bl	8016594 <__mdiff>
 8015cb4:	68c2      	ldr	r2, [r0, #12]
 8015cb6:	4606      	mov	r6, r0
 8015cb8:	bb02      	cbnz	r2, 8015cfc <_dtoa_r+0xa1c>
 8015cba:	4601      	mov	r1, r0
 8015cbc:	4648      	mov	r0, r9
 8015cbe:	f000 fc4d 	bl	801655c <__mcmp>
 8015cc2:	4602      	mov	r2, r0
 8015cc4:	4631      	mov	r1, r6
 8015cc6:	4658      	mov	r0, fp
 8015cc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8015cca:	f000 fa0d 	bl	80160e8 <_Bfree>
 8015cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015cd2:	9e07      	ldr	r6, [sp, #28]
 8015cd4:	ea43 0102 	orr.w	r1, r3, r2
 8015cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cda:	4319      	orrs	r1, r3
 8015cdc:	d110      	bne.n	8015d00 <_dtoa_r+0xa20>
 8015cde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015ce2:	d029      	beq.n	8015d38 <_dtoa_r+0xa58>
 8015ce4:	9b08      	ldr	r3, [sp, #32]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	dd02      	ble.n	8015cf0 <_dtoa_r+0xa10>
 8015cea:	9b02      	ldr	r3, [sp, #8]
 8015cec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015cf0:	9b00      	ldr	r3, [sp, #0]
 8015cf2:	f883 8000 	strb.w	r8, [r3]
 8015cf6:	e63f      	b.n	8015978 <_dtoa_r+0x698>
 8015cf8:	4628      	mov	r0, r5
 8015cfa:	e7bb      	b.n	8015c74 <_dtoa_r+0x994>
 8015cfc:	2201      	movs	r2, #1
 8015cfe:	e7e1      	b.n	8015cc4 <_dtoa_r+0x9e4>
 8015d00:	9b08      	ldr	r3, [sp, #32]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	db04      	blt.n	8015d10 <_dtoa_r+0xa30>
 8015d06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015d08:	430b      	orrs	r3, r1
 8015d0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015d0c:	430b      	orrs	r3, r1
 8015d0e:	d120      	bne.n	8015d52 <_dtoa_r+0xa72>
 8015d10:	2a00      	cmp	r2, #0
 8015d12:	dded      	ble.n	8015cf0 <_dtoa_r+0xa10>
 8015d14:	4649      	mov	r1, r9
 8015d16:	2201      	movs	r2, #1
 8015d18:	4658      	mov	r0, fp
 8015d1a:	f000 fbb3 	bl	8016484 <__lshift>
 8015d1e:	4621      	mov	r1, r4
 8015d20:	4681      	mov	r9, r0
 8015d22:	f000 fc1b 	bl	801655c <__mcmp>
 8015d26:	2800      	cmp	r0, #0
 8015d28:	dc03      	bgt.n	8015d32 <_dtoa_r+0xa52>
 8015d2a:	d1e1      	bne.n	8015cf0 <_dtoa_r+0xa10>
 8015d2c:	f018 0f01 	tst.w	r8, #1
 8015d30:	d0de      	beq.n	8015cf0 <_dtoa_r+0xa10>
 8015d32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015d36:	d1d8      	bne.n	8015cea <_dtoa_r+0xa0a>
 8015d38:	9a00      	ldr	r2, [sp, #0]
 8015d3a:	2339      	movs	r3, #57	@ 0x39
 8015d3c:	7013      	strb	r3, [r2, #0]
 8015d3e:	4633      	mov	r3, r6
 8015d40:	461e      	mov	r6, r3
 8015d42:	3b01      	subs	r3, #1
 8015d44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015d48:	2a39      	cmp	r2, #57	@ 0x39
 8015d4a:	d052      	beq.n	8015df2 <_dtoa_r+0xb12>
 8015d4c:	3201      	adds	r2, #1
 8015d4e:	701a      	strb	r2, [r3, #0]
 8015d50:	e612      	b.n	8015978 <_dtoa_r+0x698>
 8015d52:	2a00      	cmp	r2, #0
 8015d54:	dd07      	ble.n	8015d66 <_dtoa_r+0xa86>
 8015d56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015d5a:	d0ed      	beq.n	8015d38 <_dtoa_r+0xa58>
 8015d5c:	9a00      	ldr	r2, [sp, #0]
 8015d5e:	f108 0301 	add.w	r3, r8, #1
 8015d62:	7013      	strb	r3, [r2, #0]
 8015d64:	e608      	b.n	8015978 <_dtoa_r+0x698>
 8015d66:	9b07      	ldr	r3, [sp, #28]
 8015d68:	9a07      	ldr	r2, [sp, #28]
 8015d6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015d70:	4293      	cmp	r3, r2
 8015d72:	d028      	beq.n	8015dc6 <_dtoa_r+0xae6>
 8015d74:	4649      	mov	r1, r9
 8015d76:	2300      	movs	r3, #0
 8015d78:	220a      	movs	r2, #10
 8015d7a:	4658      	mov	r0, fp
 8015d7c:	f000 f9d6 	bl	801612c <__multadd>
 8015d80:	42af      	cmp	r7, r5
 8015d82:	4681      	mov	r9, r0
 8015d84:	f04f 0300 	mov.w	r3, #0
 8015d88:	f04f 020a 	mov.w	r2, #10
 8015d8c:	4639      	mov	r1, r7
 8015d8e:	4658      	mov	r0, fp
 8015d90:	d107      	bne.n	8015da2 <_dtoa_r+0xac2>
 8015d92:	f000 f9cb 	bl	801612c <__multadd>
 8015d96:	4607      	mov	r7, r0
 8015d98:	4605      	mov	r5, r0
 8015d9a:	9b07      	ldr	r3, [sp, #28]
 8015d9c:	3301      	adds	r3, #1
 8015d9e:	9307      	str	r3, [sp, #28]
 8015da0:	e774      	b.n	8015c8c <_dtoa_r+0x9ac>
 8015da2:	f000 f9c3 	bl	801612c <__multadd>
 8015da6:	4629      	mov	r1, r5
 8015da8:	4607      	mov	r7, r0
 8015daa:	2300      	movs	r3, #0
 8015dac:	220a      	movs	r2, #10
 8015dae:	4658      	mov	r0, fp
 8015db0:	f000 f9bc 	bl	801612c <__multadd>
 8015db4:	4605      	mov	r5, r0
 8015db6:	e7f0      	b.n	8015d9a <_dtoa_r+0xaba>
 8015db8:	9b00      	ldr	r3, [sp, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	bfcc      	ite	gt
 8015dbe:	461e      	movgt	r6, r3
 8015dc0:	2601      	movle	r6, #1
 8015dc2:	4456      	add	r6, sl
 8015dc4:	2700      	movs	r7, #0
 8015dc6:	4649      	mov	r1, r9
 8015dc8:	2201      	movs	r2, #1
 8015dca:	4658      	mov	r0, fp
 8015dcc:	f000 fb5a 	bl	8016484 <__lshift>
 8015dd0:	4621      	mov	r1, r4
 8015dd2:	4681      	mov	r9, r0
 8015dd4:	f000 fbc2 	bl	801655c <__mcmp>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	dcb0      	bgt.n	8015d3e <_dtoa_r+0xa5e>
 8015ddc:	d102      	bne.n	8015de4 <_dtoa_r+0xb04>
 8015dde:	f018 0f01 	tst.w	r8, #1
 8015de2:	d1ac      	bne.n	8015d3e <_dtoa_r+0xa5e>
 8015de4:	4633      	mov	r3, r6
 8015de6:	461e      	mov	r6, r3
 8015de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015dec:	2a30      	cmp	r2, #48	@ 0x30
 8015dee:	d0fa      	beq.n	8015de6 <_dtoa_r+0xb06>
 8015df0:	e5c2      	b.n	8015978 <_dtoa_r+0x698>
 8015df2:	459a      	cmp	sl, r3
 8015df4:	d1a4      	bne.n	8015d40 <_dtoa_r+0xa60>
 8015df6:	9b04      	ldr	r3, [sp, #16]
 8015df8:	3301      	adds	r3, #1
 8015dfa:	9304      	str	r3, [sp, #16]
 8015dfc:	2331      	movs	r3, #49	@ 0x31
 8015dfe:	f88a 3000 	strb.w	r3, [sl]
 8015e02:	e5b9      	b.n	8015978 <_dtoa_r+0x698>
 8015e04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015e06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8015e64 <_dtoa_r+0xb84>
 8015e0a:	b11b      	cbz	r3, 8015e14 <_dtoa_r+0xb34>
 8015e0c:	f10a 0308 	add.w	r3, sl, #8
 8015e10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015e12:	6013      	str	r3, [r2, #0]
 8015e14:	4650      	mov	r0, sl
 8015e16:	b019      	add	sp, #100	@ 0x64
 8015e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e1e:	2b01      	cmp	r3, #1
 8015e20:	f77f ae37 	ble.w	8015a92 <_dtoa_r+0x7b2>
 8015e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e28:	2001      	movs	r0, #1
 8015e2a:	e655      	b.n	8015ad8 <_dtoa_r+0x7f8>
 8015e2c:	9b00      	ldr	r3, [sp, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	f77f aed6 	ble.w	8015be0 <_dtoa_r+0x900>
 8015e34:	4656      	mov	r6, sl
 8015e36:	4621      	mov	r1, r4
 8015e38:	4648      	mov	r0, r9
 8015e3a:	f7ff f9c8 	bl	80151ce <quorem>
 8015e3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015e42:	f806 8b01 	strb.w	r8, [r6], #1
 8015e46:	9b00      	ldr	r3, [sp, #0]
 8015e48:	eba6 020a 	sub.w	r2, r6, sl
 8015e4c:	4293      	cmp	r3, r2
 8015e4e:	ddb3      	ble.n	8015db8 <_dtoa_r+0xad8>
 8015e50:	4649      	mov	r1, r9
 8015e52:	2300      	movs	r3, #0
 8015e54:	220a      	movs	r2, #10
 8015e56:	4658      	mov	r0, fp
 8015e58:	f000 f968 	bl	801612c <__multadd>
 8015e5c:	4681      	mov	r9, r0
 8015e5e:	e7ea      	b.n	8015e36 <_dtoa_r+0xb56>
 8015e60:	080176f0 	.word	0x080176f0
 8015e64:	08017674 	.word	0x08017674

08015e68 <_free_r>:
 8015e68:	b538      	push	{r3, r4, r5, lr}
 8015e6a:	4605      	mov	r5, r0
 8015e6c:	2900      	cmp	r1, #0
 8015e6e:	d041      	beq.n	8015ef4 <_free_r+0x8c>
 8015e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e74:	1f0c      	subs	r4, r1, #4
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	bfb8      	it	lt
 8015e7a:	18e4      	addlt	r4, r4, r3
 8015e7c:	f000 f8e8 	bl	8016050 <__malloc_lock>
 8015e80:	4a1d      	ldr	r2, [pc, #116]	@ (8015ef8 <_free_r+0x90>)
 8015e82:	6813      	ldr	r3, [r2, #0]
 8015e84:	b933      	cbnz	r3, 8015e94 <_free_r+0x2c>
 8015e86:	6063      	str	r3, [r4, #4]
 8015e88:	6014      	str	r4, [r2, #0]
 8015e8a:	4628      	mov	r0, r5
 8015e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e90:	f000 b8e4 	b.w	801605c <__malloc_unlock>
 8015e94:	42a3      	cmp	r3, r4
 8015e96:	d908      	bls.n	8015eaa <_free_r+0x42>
 8015e98:	6820      	ldr	r0, [r4, #0]
 8015e9a:	1821      	adds	r1, r4, r0
 8015e9c:	428b      	cmp	r3, r1
 8015e9e:	bf01      	itttt	eq
 8015ea0:	6819      	ldreq	r1, [r3, #0]
 8015ea2:	685b      	ldreq	r3, [r3, #4]
 8015ea4:	1809      	addeq	r1, r1, r0
 8015ea6:	6021      	streq	r1, [r4, #0]
 8015ea8:	e7ed      	b.n	8015e86 <_free_r+0x1e>
 8015eaa:	461a      	mov	r2, r3
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	b10b      	cbz	r3, 8015eb4 <_free_r+0x4c>
 8015eb0:	42a3      	cmp	r3, r4
 8015eb2:	d9fa      	bls.n	8015eaa <_free_r+0x42>
 8015eb4:	6811      	ldr	r1, [r2, #0]
 8015eb6:	1850      	adds	r0, r2, r1
 8015eb8:	42a0      	cmp	r0, r4
 8015eba:	d10b      	bne.n	8015ed4 <_free_r+0x6c>
 8015ebc:	6820      	ldr	r0, [r4, #0]
 8015ebe:	4401      	add	r1, r0
 8015ec0:	1850      	adds	r0, r2, r1
 8015ec2:	4283      	cmp	r3, r0
 8015ec4:	6011      	str	r1, [r2, #0]
 8015ec6:	d1e0      	bne.n	8015e8a <_free_r+0x22>
 8015ec8:	6818      	ldr	r0, [r3, #0]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	6053      	str	r3, [r2, #4]
 8015ece:	4408      	add	r0, r1
 8015ed0:	6010      	str	r0, [r2, #0]
 8015ed2:	e7da      	b.n	8015e8a <_free_r+0x22>
 8015ed4:	d902      	bls.n	8015edc <_free_r+0x74>
 8015ed6:	230c      	movs	r3, #12
 8015ed8:	602b      	str	r3, [r5, #0]
 8015eda:	e7d6      	b.n	8015e8a <_free_r+0x22>
 8015edc:	6820      	ldr	r0, [r4, #0]
 8015ede:	1821      	adds	r1, r4, r0
 8015ee0:	428b      	cmp	r3, r1
 8015ee2:	bf04      	itt	eq
 8015ee4:	6819      	ldreq	r1, [r3, #0]
 8015ee6:	685b      	ldreq	r3, [r3, #4]
 8015ee8:	6063      	str	r3, [r4, #4]
 8015eea:	bf04      	itt	eq
 8015eec:	1809      	addeq	r1, r1, r0
 8015eee:	6021      	streq	r1, [r4, #0]
 8015ef0:	6054      	str	r4, [r2, #4]
 8015ef2:	e7ca      	b.n	8015e8a <_free_r+0x22>
 8015ef4:	bd38      	pop	{r3, r4, r5, pc}
 8015ef6:	bf00      	nop
 8015ef8:	20006a40 	.word	0x20006a40

08015efc <malloc>:
 8015efc:	4b02      	ldr	r3, [pc, #8]	@ (8015f08 <malloc+0xc>)
 8015efe:	4601      	mov	r1, r0
 8015f00:	6818      	ldr	r0, [r3, #0]
 8015f02:	f000 b825 	b.w	8015f50 <_malloc_r>
 8015f06:	bf00      	nop
 8015f08:	20000310 	.word	0x20000310

08015f0c <sbrk_aligned>:
 8015f0c:	b570      	push	{r4, r5, r6, lr}
 8015f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8015f4c <sbrk_aligned+0x40>)
 8015f10:	460c      	mov	r4, r1
 8015f12:	6831      	ldr	r1, [r6, #0]
 8015f14:	4605      	mov	r5, r0
 8015f16:	b911      	cbnz	r1, 8015f1e <sbrk_aligned+0x12>
 8015f18:	f000 fe46 	bl	8016ba8 <_sbrk_r>
 8015f1c:	6030      	str	r0, [r6, #0]
 8015f1e:	4621      	mov	r1, r4
 8015f20:	4628      	mov	r0, r5
 8015f22:	f000 fe41 	bl	8016ba8 <_sbrk_r>
 8015f26:	1c43      	adds	r3, r0, #1
 8015f28:	d103      	bne.n	8015f32 <sbrk_aligned+0x26>
 8015f2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015f2e:	4620      	mov	r0, r4
 8015f30:	bd70      	pop	{r4, r5, r6, pc}
 8015f32:	1cc4      	adds	r4, r0, #3
 8015f34:	f024 0403 	bic.w	r4, r4, #3
 8015f38:	42a0      	cmp	r0, r4
 8015f3a:	d0f8      	beq.n	8015f2e <sbrk_aligned+0x22>
 8015f3c:	1a21      	subs	r1, r4, r0
 8015f3e:	4628      	mov	r0, r5
 8015f40:	f000 fe32 	bl	8016ba8 <_sbrk_r>
 8015f44:	3001      	adds	r0, #1
 8015f46:	d1f2      	bne.n	8015f2e <sbrk_aligned+0x22>
 8015f48:	e7ef      	b.n	8015f2a <sbrk_aligned+0x1e>
 8015f4a:	bf00      	nop
 8015f4c:	20006a3c 	.word	0x20006a3c

08015f50 <_malloc_r>:
 8015f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f54:	1ccd      	adds	r5, r1, #3
 8015f56:	f025 0503 	bic.w	r5, r5, #3
 8015f5a:	3508      	adds	r5, #8
 8015f5c:	2d0c      	cmp	r5, #12
 8015f5e:	bf38      	it	cc
 8015f60:	250c      	movcc	r5, #12
 8015f62:	2d00      	cmp	r5, #0
 8015f64:	4606      	mov	r6, r0
 8015f66:	db01      	blt.n	8015f6c <_malloc_r+0x1c>
 8015f68:	42a9      	cmp	r1, r5
 8015f6a:	d904      	bls.n	8015f76 <_malloc_r+0x26>
 8015f6c:	230c      	movs	r3, #12
 8015f6e:	6033      	str	r3, [r6, #0]
 8015f70:	2000      	movs	r0, #0
 8015f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801604c <_malloc_r+0xfc>
 8015f7a:	f000 f869 	bl	8016050 <__malloc_lock>
 8015f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8015f82:	461c      	mov	r4, r3
 8015f84:	bb44      	cbnz	r4, 8015fd8 <_malloc_r+0x88>
 8015f86:	4629      	mov	r1, r5
 8015f88:	4630      	mov	r0, r6
 8015f8a:	f7ff ffbf 	bl	8015f0c <sbrk_aligned>
 8015f8e:	1c43      	adds	r3, r0, #1
 8015f90:	4604      	mov	r4, r0
 8015f92:	d158      	bne.n	8016046 <_malloc_r+0xf6>
 8015f94:	f8d8 4000 	ldr.w	r4, [r8]
 8015f98:	4627      	mov	r7, r4
 8015f9a:	2f00      	cmp	r7, #0
 8015f9c:	d143      	bne.n	8016026 <_malloc_r+0xd6>
 8015f9e:	2c00      	cmp	r4, #0
 8015fa0:	d04b      	beq.n	801603a <_malloc_r+0xea>
 8015fa2:	6823      	ldr	r3, [r4, #0]
 8015fa4:	4639      	mov	r1, r7
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	eb04 0903 	add.w	r9, r4, r3
 8015fac:	f000 fdfc 	bl	8016ba8 <_sbrk_r>
 8015fb0:	4581      	cmp	r9, r0
 8015fb2:	d142      	bne.n	801603a <_malloc_r+0xea>
 8015fb4:	6821      	ldr	r1, [r4, #0]
 8015fb6:	1a6d      	subs	r5, r5, r1
 8015fb8:	4629      	mov	r1, r5
 8015fba:	4630      	mov	r0, r6
 8015fbc:	f7ff ffa6 	bl	8015f0c <sbrk_aligned>
 8015fc0:	3001      	adds	r0, #1
 8015fc2:	d03a      	beq.n	801603a <_malloc_r+0xea>
 8015fc4:	6823      	ldr	r3, [r4, #0]
 8015fc6:	442b      	add	r3, r5
 8015fc8:	6023      	str	r3, [r4, #0]
 8015fca:	f8d8 3000 	ldr.w	r3, [r8]
 8015fce:	685a      	ldr	r2, [r3, #4]
 8015fd0:	bb62      	cbnz	r2, 801602c <_malloc_r+0xdc>
 8015fd2:	f8c8 7000 	str.w	r7, [r8]
 8015fd6:	e00f      	b.n	8015ff8 <_malloc_r+0xa8>
 8015fd8:	6822      	ldr	r2, [r4, #0]
 8015fda:	1b52      	subs	r2, r2, r5
 8015fdc:	d420      	bmi.n	8016020 <_malloc_r+0xd0>
 8015fde:	2a0b      	cmp	r2, #11
 8015fe0:	d917      	bls.n	8016012 <_malloc_r+0xc2>
 8015fe2:	1961      	adds	r1, r4, r5
 8015fe4:	42a3      	cmp	r3, r4
 8015fe6:	6025      	str	r5, [r4, #0]
 8015fe8:	bf18      	it	ne
 8015fea:	6059      	strne	r1, [r3, #4]
 8015fec:	6863      	ldr	r3, [r4, #4]
 8015fee:	bf08      	it	eq
 8015ff0:	f8c8 1000 	streq.w	r1, [r8]
 8015ff4:	5162      	str	r2, [r4, r5]
 8015ff6:	604b      	str	r3, [r1, #4]
 8015ff8:	4630      	mov	r0, r6
 8015ffa:	f000 f82f 	bl	801605c <__malloc_unlock>
 8015ffe:	f104 000b 	add.w	r0, r4, #11
 8016002:	1d23      	adds	r3, r4, #4
 8016004:	f020 0007 	bic.w	r0, r0, #7
 8016008:	1ac2      	subs	r2, r0, r3
 801600a:	bf1c      	itt	ne
 801600c:	1a1b      	subne	r3, r3, r0
 801600e:	50a3      	strne	r3, [r4, r2]
 8016010:	e7af      	b.n	8015f72 <_malloc_r+0x22>
 8016012:	6862      	ldr	r2, [r4, #4]
 8016014:	42a3      	cmp	r3, r4
 8016016:	bf0c      	ite	eq
 8016018:	f8c8 2000 	streq.w	r2, [r8]
 801601c:	605a      	strne	r2, [r3, #4]
 801601e:	e7eb      	b.n	8015ff8 <_malloc_r+0xa8>
 8016020:	4623      	mov	r3, r4
 8016022:	6864      	ldr	r4, [r4, #4]
 8016024:	e7ae      	b.n	8015f84 <_malloc_r+0x34>
 8016026:	463c      	mov	r4, r7
 8016028:	687f      	ldr	r7, [r7, #4]
 801602a:	e7b6      	b.n	8015f9a <_malloc_r+0x4a>
 801602c:	461a      	mov	r2, r3
 801602e:	685b      	ldr	r3, [r3, #4]
 8016030:	42a3      	cmp	r3, r4
 8016032:	d1fb      	bne.n	801602c <_malloc_r+0xdc>
 8016034:	2300      	movs	r3, #0
 8016036:	6053      	str	r3, [r2, #4]
 8016038:	e7de      	b.n	8015ff8 <_malloc_r+0xa8>
 801603a:	230c      	movs	r3, #12
 801603c:	6033      	str	r3, [r6, #0]
 801603e:	4630      	mov	r0, r6
 8016040:	f000 f80c 	bl	801605c <__malloc_unlock>
 8016044:	e794      	b.n	8015f70 <_malloc_r+0x20>
 8016046:	6005      	str	r5, [r0, #0]
 8016048:	e7d6      	b.n	8015ff8 <_malloc_r+0xa8>
 801604a:	bf00      	nop
 801604c:	20006a40 	.word	0x20006a40

08016050 <__malloc_lock>:
 8016050:	4801      	ldr	r0, [pc, #4]	@ (8016058 <__malloc_lock+0x8>)
 8016052:	f7ff b8ac 	b.w	80151ae <__retarget_lock_acquire_recursive>
 8016056:	bf00      	nop
 8016058:	20006a38 	.word	0x20006a38

0801605c <__malloc_unlock>:
 801605c:	4801      	ldr	r0, [pc, #4]	@ (8016064 <__malloc_unlock+0x8>)
 801605e:	f7ff b8a7 	b.w	80151b0 <__retarget_lock_release_recursive>
 8016062:	bf00      	nop
 8016064:	20006a38 	.word	0x20006a38

08016068 <_Balloc>:
 8016068:	b570      	push	{r4, r5, r6, lr}
 801606a:	69c6      	ldr	r6, [r0, #28]
 801606c:	4604      	mov	r4, r0
 801606e:	460d      	mov	r5, r1
 8016070:	b976      	cbnz	r6, 8016090 <_Balloc+0x28>
 8016072:	2010      	movs	r0, #16
 8016074:	f7ff ff42 	bl	8015efc <malloc>
 8016078:	4602      	mov	r2, r0
 801607a:	61e0      	str	r0, [r4, #28]
 801607c:	b920      	cbnz	r0, 8016088 <_Balloc+0x20>
 801607e:	4b18      	ldr	r3, [pc, #96]	@ (80160e0 <_Balloc+0x78>)
 8016080:	4818      	ldr	r0, [pc, #96]	@ (80160e4 <_Balloc+0x7c>)
 8016082:	216b      	movs	r1, #107	@ 0x6b
 8016084:	f000 fda0 	bl	8016bc8 <__assert_func>
 8016088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801608c:	6006      	str	r6, [r0, #0]
 801608e:	60c6      	str	r6, [r0, #12]
 8016090:	69e6      	ldr	r6, [r4, #28]
 8016092:	68f3      	ldr	r3, [r6, #12]
 8016094:	b183      	cbz	r3, 80160b8 <_Balloc+0x50>
 8016096:	69e3      	ldr	r3, [r4, #28]
 8016098:	68db      	ldr	r3, [r3, #12]
 801609a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801609e:	b9b8      	cbnz	r0, 80160d0 <_Balloc+0x68>
 80160a0:	2101      	movs	r1, #1
 80160a2:	fa01 f605 	lsl.w	r6, r1, r5
 80160a6:	1d72      	adds	r2, r6, #5
 80160a8:	0092      	lsls	r2, r2, #2
 80160aa:	4620      	mov	r0, r4
 80160ac:	f000 fdaa 	bl	8016c04 <_calloc_r>
 80160b0:	b160      	cbz	r0, 80160cc <_Balloc+0x64>
 80160b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80160b6:	e00e      	b.n	80160d6 <_Balloc+0x6e>
 80160b8:	2221      	movs	r2, #33	@ 0x21
 80160ba:	2104      	movs	r1, #4
 80160bc:	4620      	mov	r0, r4
 80160be:	f000 fda1 	bl	8016c04 <_calloc_r>
 80160c2:	69e3      	ldr	r3, [r4, #28]
 80160c4:	60f0      	str	r0, [r6, #12]
 80160c6:	68db      	ldr	r3, [r3, #12]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d1e4      	bne.n	8016096 <_Balloc+0x2e>
 80160cc:	2000      	movs	r0, #0
 80160ce:	bd70      	pop	{r4, r5, r6, pc}
 80160d0:	6802      	ldr	r2, [r0, #0]
 80160d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80160d6:	2300      	movs	r3, #0
 80160d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80160dc:	e7f7      	b.n	80160ce <_Balloc+0x66>
 80160de:	bf00      	nop
 80160e0:	08017681 	.word	0x08017681
 80160e4:	08017701 	.word	0x08017701

080160e8 <_Bfree>:
 80160e8:	b570      	push	{r4, r5, r6, lr}
 80160ea:	69c6      	ldr	r6, [r0, #28]
 80160ec:	4605      	mov	r5, r0
 80160ee:	460c      	mov	r4, r1
 80160f0:	b976      	cbnz	r6, 8016110 <_Bfree+0x28>
 80160f2:	2010      	movs	r0, #16
 80160f4:	f7ff ff02 	bl	8015efc <malloc>
 80160f8:	4602      	mov	r2, r0
 80160fa:	61e8      	str	r0, [r5, #28]
 80160fc:	b920      	cbnz	r0, 8016108 <_Bfree+0x20>
 80160fe:	4b09      	ldr	r3, [pc, #36]	@ (8016124 <_Bfree+0x3c>)
 8016100:	4809      	ldr	r0, [pc, #36]	@ (8016128 <_Bfree+0x40>)
 8016102:	218f      	movs	r1, #143	@ 0x8f
 8016104:	f000 fd60 	bl	8016bc8 <__assert_func>
 8016108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801610c:	6006      	str	r6, [r0, #0]
 801610e:	60c6      	str	r6, [r0, #12]
 8016110:	b13c      	cbz	r4, 8016122 <_Bfree+0x3a>
 8016112:	69eb      	ldr	r3, [r5, #28]
 8016114:	6862      	ldr	r2, [r4, #4]
 8016116:	68db      	ldr	r3, [r3, #12]
 8016118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801611c:	6021      	str	r1, [r4, #0]
 801611e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016122:	bd70      	pop	{r4, r5, r6, pc}
 8016124:	08017681 	.word	0x08017681
 8016128:	08017701 	.word	0x08017701

0801612c <__multadd>:
 801612c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016130:	690d      	ldr	r5, [r1, #16]
 8016132:	4607      	mov	r7, r0
 8016134:	460c      	mov	r4, r1
 8016136:	461e      	mov	r6, r3
 8016138:	f101 0c14 	add.w	ip, r1, #20
 801613c:	2000      	movs	r0, #0
 801613e:	f8dc 3000 	ldr.w	r3, [ip]
 8016142:	b299      	uxth	r1, r3
 8016144:	fb02 6101 	mla	r1, r2, r1, r6
 8016148:	0c1e      	lsrs	r6, r3, #16
 801614a:	0c0b      	lsrs	r3, r1, #16
 801614c:	fb02 3306 	mla	r3, r2, r6, r3
 8016150:	b289      	uxth	r1, r1
 8016152:	3001      	adds	r0, #1
 8016154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016158:	4285      	cmp	r5, r0
 801615a:	f84c 1b04 	str.w	r1, [ip], #4
 801615e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016162:	dcec      	bgt.n	801613e <__multadd+0x12>
 8016164:	b30e      	cbz	r6, 80161aa <__multadd+0x7e>
 8016166:	68a3      	ldr	r3, [r4, #8]
 8016168:	42ab      	cmp	r3, r5
 801616a:	dc19      	bgt.n	80161a0 <__multadd+0x74>
 801616c:	6861      	ldr	r1, [r4, #4]
 801616e:	4638      	mov	r0, r7
 8016170:	3101      	adds	r1, #1
 8016172:	f7ff ff79 	bl	8016068 <_Balloc>
 8016176:	4680      	mov	r8, r0
 8016178:	b928      	cbnz	r0, 8016186 <__multadd+0x5a>
 801617a:	4602      	mov	r2, r0
 801617c:	4b0c      	ldr	r3, [pc, #48]	@ (80161b0 <__multadd+0x84>)
 801617e:	480d      	ldr	r0, [pc, #52]	@ (80161b4 <__multadd+0x88>)
 8016180:	21ba      	movs	r1, #186	@ 0xba
 8016182:	f000 fd21 	bl	8016bc8 <__assert_func>
 8016186:	6922      	ldr	r2, [r4, #16]
 8016188:	3202      	adds	r2, #2
 801618a:	f104 010c 	add.w	r1, r4, #12
 801618e:	0092      	lsls	r2, r2, #2
 8016190:	300c      	adds	r0, #12
 8016192:	f7ff f80e 	bl	80151b2 <memcpy>
 8016196:	4621      	mov	r1, r4
 8016198:	4638      	mov	r0, r7
 801619a:	f7ff ffa5 	bl	80160e8 <_Bfree>
 801619e:	4644      	mov	r4, r8
 80161a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80161a4:	3501      	adds	r5, #1
 80161a6:	615e      	str	r6, [r3, #20]
 80161a8:	6125      	str	r5, [r4, #16]
 80161aa:	4620      	mov	r0, r4
 80161ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161b0:	080176f0 	.word	0x080176f0
 80161b4:	08017701 	.word	0x08017701

080161b8 <__hi0bits>:
 80161b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80161bc:	4603      	mov	r3, r0
 80161be:	bf36      	itet	cc
 80161c0:	0403      	lslcc	r3, r0, #16
 80161c2:	2000      	movcs	r0, #0
 80161c4:	2010      	movcc	r0, #16
 80161c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80161ca:	bf3c      	itt	cc
 80161cc:	021b      	lslcc	r3, r3, #8
 80161ce:	3008      	addcc	r0, #8
 80161d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80161d4:	bf3c      	itt	cc
 80161d6:	011b      	lslcc	r3, r3, #4
 80161d8:	3004      	addcc	r0, #4
 80161da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80161de:	bf3c      	itt	cc
 80161e0:	009b      	lslcc	r3, r3, #2
 80161e2:	3002      	addcc	r0, #2
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	db05      	blt.n	80161f4 <__hi0bits+0x3c>
 80161e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80161ec:	f100 0001 	add.w	r0, r0, #1
 80161f0:	bf08      	it	eq
 80161f2:	2020      	moveq	r0, #32
 80161f4:	4770      	bx	lr

080161f6 <__lo0bits>:
 80161f6:	6803      	ldr	r3, [r0, #0]
 80161f8:	4602      	mov	r2, r0
 80161fa:	f013 0007 	ands.w	r0, r3, #7
 80161fe:	d00b      	beq.n	8016218 <__lo0bits+0x22>
 8016200:	07d9      	lsls	r1, r3, #31
 8016202:	d421      	bmi.n	8016248 <__lo0bits+0x52>
 8016204:	0798      	lsls	r0, r3, #30
 8016206:	bf49      	itett	mi
 8016208:	085b      	lsrmi	r3, r3, #1
 801620a:	089b      	lsrpl	r3, r3, #2
 801620c:	2001      	movmi	r0, #1
 801620e:	6013      	strmi	r3, [r2, #0]
 8016210:	bf5c      	itt	pl
 8016212:	6013      	strpl	r3, [r2, #0]
 8016214:	2002      	movpl	r0, #2
 8016216:	4770      	bx	lr
 8016218:	b299      	uxth	r1, r3
 801621a:	b909      	cbnz	r1, 8016220 <__lo0bits+0x2a>
 801621c:	0c1b      	lsrs	r3, r3, #16
 801621e:	2010      	movs	r0, #16
 8016220:	b2d9      	uxtb	r1, r3
 8016222:	b909      	cbnz	r1, 8016228 <__lo0bits+0x32>
 8016224:	3008      	adds	r0, #8
 8016226:	0a1b      	lsrs	r3, r3, #8
 8016228:	0719      	lsls	r1, r3, #28
 801622a:	bf04      	itt	eq
 801622c:	091b      	lsreq	r3, r3, #4
 801622e:	3004      	addeq	r0, #4
 8016230:	0799      	lsls	r1, r3, #30
 8016232:	bf04      	itt	eq
 8016234:	089b      	lsreq	r3, r3, #2
 8016236:	3002      	addeq	r0, #2
 8016238:	07d9      	lsls	r1, r3, #31
 801623a:	d403      	bmi.n	8016244 <__lo0bits+0x4e>
 801623c:	085b      	lsrs	r3, r3, #1
 801623e:	f100 0001 	add.w	r0, r0, #1
 8016242:	d003      	beq.n	801624c <__lo0bits+0x56>
 8016244:	6013      	str	r3, [r2, #0]
 8016246:	4770      	bx	lr
 8016248:	2000      	movs	r0, #0
 801624a:	4770      	bx	lr
 801624c:	2020      	movs	r0, #32
 801624e:	4770      	bx	lr

08016250 <__i2b>:
 8016250:	b510      	push	{r4, lr}
 8016252:	460c      	mov	r4, r1
 8016254:	2101      	movs	r1, #1
 8016256:	f7ff ff07 	bl	8016068 <_Balloc>
 801625a:	4602      	mov	r2, r0
 801625c:	b928      	cbnz	r0, 801626a <__i2b+0x1a>
 801625e:	4b05      	ldr	r3, [pc, #20]	@ (8016274 <__i2b+0x24>)
 8016260:	4805      	ldr	r0, [pc, #20]	@ (8016278 <__i2b+0x28>)
 8016262:	f240 1145 	movw	r1, #325	@ 0x145
 8016266:	f000 fcaf 	bl	8016bc8 <__assert_func>
 801626a:	2301      	movs	r3, #1
 801626c:	6144      	str	r4, [r0, #20]
 801626e:	6103      	str	r3, [r0, #16]
 8016270:	bd10      	pop	{r4, pc}
 8016272:	bf00      	nop
 8016274:	080176f0 	.word	0x080176f0
 8016278:	08017701 	.word	0x08017701

0801627c <__multiply>:
 801627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016280:	4614      	mov	r4, r2
 8016282:	690a      	ldr	r2, [r1, #16]
 8016284:	6923      	ldr	r3, [r4, #16]
 8016286:	429a      	cmp	r2, r3
 8016288:	bfa8      	it	ge
 801628a:	4623      	movge	r3, r4
 801628c:	460f      	mov	r7, r1
 801628e:	bfa4      	itt	ge
 8016290:	460c      	movge	r4, r1
 8016292:	461f      	movge	r7, r3
 8016294:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016298:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801629c:	68a3      	ldr	r3, [r4, #8]
 801629e:	6861      	ldr	r1, [r4, #4]
 80162a0:	eb0a 0609 	add.w	r6, sl, r9
 80162a4:	42b3      	cmp	r3, r6
 80162a6:	b085      	sub	sp, #20
 80162a8:	bfb8      	it	lt
 80162aa:	3101      	addlt	r1, #1
 80162ac:	f7ff fedc 	bl	8016068 <_Balloc>
 80162b0:	b930      	cbnz	r0, 80162c0 <__multiply+0x44>
 80162b2:	4602      	mov	r2, r0
 80162b4:	4b44      	ldr	r3, [pc, #272]	@ (80163c8 <__multiply+0x14c>)
 80162b6:	4845      	ldr	r0, [pc, #276]	@ (80163cc <__multiply+0x150>)
 80162b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80162bc:	f000 fc84 	bl	8016bc8 <__assert_func>
 80162c0:	f100 0514 	add.w	r5, r0, #20
 80162c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80162c8:	462b      	mov	r3, r5
 80162ca:	2200      	movs	r2, #0
 80162cc:	4543      	cmp	r3, r8
 80162ce:	d321      	bcc.n	8016314 <__multiply+0x98>
 80162d0:	f107 0114 	add.w	r1, r7, #20
 80162d4:	f104 0214 	add.w	r2, r4, #20
 80162d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80162dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80162e0:	9302      	str	r3, [sp, #8]
 80162e2:	1b13      	subs	r3, r2, r4
 80162e4:	3b15      	subs	r3, #21
 80162e6:	f023 0303 	bic.w	r3, r3, #3
 80162ea:	3304      	adds	r3, #4
 80162ec:	f104 0715 	add.w	r7, r4, #21
 80162f0:	42ba      	cmp	r2, r7
 80162f2:	bf38      	it	cc
 80162f4:	2304      	movcc	r3, #4
 80162f6:	9301      	str	r3, [sp, #4]
 80162f8:	9b02      	ldr	r3, [sp, #8]
 80162fa:	9103      	str	r1, [sp, #12]
 80162fc:	428b      	cmp	r3, r1
 80162fe:	d80c      	bhi.n	801631a <__multiply+0x9e>
 8016300:	2e00      	cmp	r6, #0
 8016302:	dd03      	ble.n	801630c <__multiply+0x90>
 8016304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016308:	2b00      	cmp	r3, #0
 801630a:	d05b      	beq.n	80163c4 <__multiply+0x148>
 801630c:	6106      	str	r6, [r0, #16]
 801630e:	b005      	add	sp, #20
 8016310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016314:	f843 2b04 	str.w	r2, [r3], #4
 8016318:	e7d8      	b.n	80162cc <__multiply+0x50>
 801631a:	f8b1 a000 	ldrh.w	sl, [r1]
 801631e:	f1ba 0f00 	cmp.w	sl, #0
 8016322:	d024      	beq.n	801636e <__multiply+0xf2>
 8016324:	f104 0e14 	add.w	lr, r4, #20
 8016328:	46a9      	mov	r9, r5
 801632a:	f04f 0c00 	mov.w	ip, #0
 801632e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016332:	f8d9 3000 	ldr.w	r3, [r9]
 8016336:	fa1f fb87 	uxth.w	fp, r7
 801633a:	b29b      	uxth	r3, r3
 801633c:	fb0a 330b 	mla	r3, sl, fp, r3
 8016340:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016344:	f8d9 7000 	ldr.w	r7, [r9]
 8016348:	4463      	add	r3, ip
 801634a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801634e:	fb0a c70b 	mla	r7, sl, fp, ip
 8016352:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016356:	b29b      	uxth	r3, r3
 8016358:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801635c:	4572      	cmp	r2, lr
 801635e:	f849 3b04 	str.w	r3, [r9], #4
 8016362:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016366:	d8e2      	bhi.n	801632e <__multiply+0xb2>
 8016368:	9b01      	ldr	r3, [sp, #4]
 801636a:	f845 c003 	str.w	ip, [r5, r3]
 801636e:	9b03      	ldr	r3, [sp, #12]
 8016370:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016374:	3104      	adds	r1, #4
 8016376:	f1b9 0f00 	cmp.w	r9, #0
 801637a:	d021      	beq.n	80163c0 <__multiply+0x144>
 801637c:	682b      	ldr	r3, [r5, #0]
 801637e:	f104 0c14 	add.w	ip, r4, #20
 8016382:	46ae      	mov	lr, r5
 8016384:	f04f 0a00 	mov.w	sl, #0
 8016388:	f8bc b000 	ldrh.w	fp, [ip]
 801638c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016390:	fb09 770b 	mla	r7, r9, fp, r7
 8016394:	4457      	add	r7, sl
 8016396:	b29b      	uxth	r3, r3
 8016398:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801639c:	f84e 3b04 	str.w	r3, [lr], #4
 80163a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80163a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80163a8:	f8be 3000 	ldrh.w	r3, [lr]
 80163ac:	fb09 330a 	mla	r3, r9, sl, r3
 80163b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80163b4:	4562      	cmp	r2, ip
 80163b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80163ba:	d8e5      	bhi.n	8016388 <__multiply+0x10c>
 80163bc:	9f01      	ldr	r7, [sp, #4]
 80163be:	51eb      	str	r3, [r5, r7]
 80163c0:	3504      	adds	r5, #4
 80163c2:	e799      	b.n	80162f8 <__multiply+0x7c>
 80163c4:	3e01      	subs	r6, #1
 80163c6:	e79b      	b.n	8016300 <__multiply+0x84>
 80163c8:	080176f0 	.word	0x080176f0
 80163cc:	08017701 	.word	0x08017701

080163d0 <__pow5mult>:
 80163d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163d4:	4615      	mov	r5, r2
 80163d6:	f012 0203 	ands.w	r2, r2, #3
 80163da:	4607      	mov	r7, r0
 80163dc:	460e      	mov	r6, r1
 80163de:	d007      	beq.n	80163f0 <__pow5mult+0x20>
 80163e0:	4c25      	ldr	r4, [pc, #148]	@ (8016478 <__pow5mult+0xa8>)
 80163e2:	3a01      	subs	r2, #1
 80163e4:	2300      	movs	r3, #0
 80163e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80163ea:	f7ff fe9f 	bl	801612c <__multadd>
 80163ee:	4606      	mov	r6, r0
 80163f0:	10ad      	asrs	r5, r5, #2
 80163f2:	d03d      	beq.n	8016470 <__pow5mult+0xa0>
 80163f4:	69fc      	ldr	r4, [r7, #28]
 80163f6:	b97c      	cbnz	r4, 8016418 <__pow5mult+0x48>
 80163f8:	2010      	movs	r0, #16
 80163fa:	f7ff fd7f 	bl	8015efc <malloc>
 80163fe:	4602      	mov	r2, r0
 8016400:	61f8      	str	r0, [r7, #28]
 8016402:	b928      	cbnz	r0, 8016410 <__pow5mult+0x40>
 8016404:	4b1d      	ldr	r3, [pc, #116]	@ (801647c <__pow5mult+0xac>)
 8016406:	481e      	ldr	r0, [pc, #120]	@ (8016480 <__pow5mult+0xb0>)
 8016408:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801640c:	f000 fbdc 	bl	8016bc8 <__assert_func>
 8016410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016414:	6004      	str	r4, [r0, #0]
 8016416:	60c4      	str	r4, [r0, #12]
 8016418:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801641c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016420:	b94c      	cbnz	r4, 8016436 <__pow5mult+0x66>
 8016422:	f240 2171 	movw	r1, #625	@ 0x271
 8016426:	4638      	mov	r0, r7
 8016428:	f7ff ff12 	bl	8016250 <__i2b>
 801642c:	2300      	movs	r3, #0
 801642e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016432:	4604      	mov	r4, r0
 8016434:	6003      	str	r3, [r0, #0]
 8016436:	f04f 0900 	mov.w	r9, #0
 801643a:	07eb      	lsls	r3, r5, #31
 801643c:	d50a      	bpl.n	8016454 <__pow5mult+0x84>
 801643e:	4631      	mov	r1, r6
 8016440:	4622      	mov	r2, r4
 8016442:	4638      	mov	r0, r7
 8016444:	f7ff ff1a 	bl	801627c <__multiply>
 8016448:	4631      	mov	r1, r6
 801644a:	4680      	mov	r8, r0
 801644c:	4638      	mov	r0, r7
 801644e:	f7ff fe4b 	bl	80160e8 <_Bfree>
 8016452:	4646      	mov	r6, r8
 8016454:	106d      	asrs	r5, r5, #1
 8016456:	d00b      	beq.n	8016470 <__pow5mult+0xa0>
 8016458:	6820      	ldr	r0, [r4, #0]
 801645a:	b938      	cbnz	r0, 801646c <__pow5mult+0x9c>
 801645c:	4622      	mov	r2, r4
 801645e:	4621      	mov	r1, r4
 8016460:	4638      	mov	r0, r7
 8016462:	f7ff ff0b 	bl	801627c <__multiply>
 8016466:	6020      	str	r0, [r4, #0]
 8016468:	f8c0 9000 	str.w	r9, [r0]
 801646c:	4604      	mov	r4, r0
 801646e:	e7e4      	b.n	801643a <__pow5mult+0x6a>
 8016470:	4630      	mov	r0, r6
 8016472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016476:	bf00      	nop
 8016478:	0801775c 	.word	0x0801775c
 801647c:	08017681 	.word	0x08017681
 8016480:	08017701 	.word	0x08017701

08016484 <__lshift>:
 8016484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016488:	460c      	mov	r4, r1
 801648a:	6849      	ldr	r1, [r1, #4]
 801648c:	6923      	ldr	r3, [r4, #16]
 801648e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016492:	68a3      	ldr	r3, [r4, #8]
 8016494:	4607      	mov	r7, r0
 8016496:	4691      	mov	r9, r2
 8016498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801649c:	f108 0601 	add.w	r6, r8, #1
 80164a0:	42b3      	cmp	r3, r6
 80164a2:	db0b      	blt.n	80164bc <__lshift+0x38>
 80164a4:	4638      	mov	r0, r7
 80164a6:	f7ff fddf 	bl	8016068 <_Balloc>
 80164aa:	4605      	mov	r5, r0
 80164ac:	b948      	cbnz	r0, 80164c2 <__lshift+0x3e>
 80164ae:	4602      	mov	r2, r0
 80164b0:	4b28      	ldr	r3, [pc, #160]	@ (8016554 <__lshift+0xd0>)
 80164b2:	4829      	ldr	r0, [pc, #164]	@ (8016558 <__lshift+0xd4>)
 80164b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80164b8:	f000 fb86 	bl	8016bc8 <__assert_func>
 80164bc:	3101      	adds	r1, #1
 80164be:	005b      	lsls	r3, r3, #1
 80164c0:	e7ee      	b.n	80164a0 <__lshift+0x1c>
 80164c2:	2300      	movs	r3, #0
 80164c4:	f100 0114 	add.w	r1, r0, #20
 80164c8:	f100 0210 	add.w	r2, r0, #16
 80164cc:	4618      	mov	r0, r3
 80164ce:	4553      	cmp	r3, sl
 80164d0:	db33      	blt.n	801653a <__lshift+0xb6>
 80164d2:	6920      	ldr	r0, [r4, #16]
 80164d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80164d8:	f104 0314 	add.w	r3, r4, #20
 80164dc:	f019 091f 	ands.w	r9, r9, #31
 80164e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80164e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80164e8:	d02b      	beq.n	8016542 <__lshift+0xbe>
 80164ea:	f1c9 0e20 	rsb	lr, r9, #32
 80164ee:	468a      	mov	sl, r1
 80164f0:	2200      	movs	r2, #0
 80164f2:	6818      	ldr	r0, [r3, #0]
 80164f4:	fa00 f009 	lsl.w	r0, r0, r9
 80164f8:	4310      	orrs	r0, r2
 80164fa:	f84a 0b04 	str.w	r0, [sl], #4
 80164fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8016502:	459c      	cmp	ip, r3
 8016504:	fa22 f20e 	lsr.w	r2, r2, lr
 8016508:	d8f3      	bhi.n	80164f2 <__lshift+0x6e>
 801650a:	ebac 0304 	sub.w	r3, ip, r4
 801650e:	3b15      	subs	r3, #21
 8016510:	f023 0303 	bic.w	r3, r3, #3
 8016514:	3304      	adds	r3, #4
 8016516:	f104 0015 	add.w	r0, r4, #21
 801651a:	4584      	cmp	ip, r0
 801651c:	bf38      	it	cc
 801651e:	2304      	movcc	r3, #4
 8016520:	50ca      	str	r2, [r1, r3]
 8016522:	b10a      	cbz	r2, 8016528 <__lshift+0xa4>
 8016524:	f108 0602 	add.w	r6, r8, #2
 8016528:	3e01      	subs	r6, #1
 801652a:	4638      	mov	r0, r7
 801652c:	612e      	str	r6, [r5, #16]
 801652e:	4621      	mov	r1, r4
 8016530:	f7ff fdda 	bl	80160e8 <_Bfree>
 8016534:	4628      	mov	r0, r5
 8016536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801653a:	f842 0f04 	str.w	r0, [r2, #4]!
 801653e:	3301      	adds	r3, #1
 8016540:	e7c5      	b.n	80164ce <__lshift+0x4a>
 8016542:	3904      	subs	r1, #4
 8016544:	f853 2b04 	ldr.w	r2, [r3], #4
 8016548:	f841 2f04 	str.w	r2, [r1, #4]!
 801654c:	459c      	cmp	ip, r3
 801654e:	d8f9      	bhi.n	8016544 <__lshift+0xc0>
 8016550:	e7ea      	b.n	8016528 <__lshift+0xa4>
 8016552:	bf00      	nop
 8016554:	080176f0 	.word	0x080176f0
 8016558:	08017701 	.word	0x08017701

0801655c <__mcmp>:
 801655c:	690a      	ldr	r2, [r1, #16]
 801655e:	4603      	mov	r3, r0
 8016560:	6900      	ldr	r0, [r0, #16]
 8016562:	1a80      	subs	r0, r0, r2
 8016564:	b530      	push	{r4, r5, lr}
 8016566:	d10e      	bne.n	8016586 <__mcmp+0x2a>
 8016568:	3314      	adds	r3, #20
 801656a:	3114      	adds	r1, #20
 801656c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801657c:	4295      	cmp	r5, r2
 801657e:	d003      	beq.n	8016588 <__mcmp+0x2c>
 8016580:	d205      	bcs.n	801658e <__mcmp+0x32>
 8016582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016586:	bd30      	pop	{r4, r5, pc}
 8016588:	42a3      	cmp	r3, r4
 801658a:	d3f3      	bcc.n	8016574 <__mcmp+0x18>
 801658c:	e7fb      	b.n	8016586 <__mcmp+0x2a>
 801658e:	2001      	movs	r0, #1
 8016590:	e7f9      	b.n	8016586 <__mcmp+0x2a>
	...

08016594 <__mdiff>:
 8016594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016598:	4689      	mov	r9, r1
 801659a:	4606      	mov	r6, r0
 801659c:	4611      	mov	r1, r2
 801659e:	4648      	mov	r0, r9
 80165a0:	4614      	mov	r4, r2
 80165a2:	f7ff ffdb 	bl	801655c <__mcmp>
 80165a6:	1e05      	subs	r5, r0, #0
 80165a8:	d112      	bne.n	80165d0 <__mdiff+0x3c>
 80165aa:	4629      	mov	r1, r5
 80165ac:	4630      	mov	r0, r6
 80165ae:	f7ff fd5b 	bl	8016068 <_Balloc>
 80165b2:	4602      	mov	r2, r0
 80165b4:	b928      	cbnz	r0, 80165c2 <__mdiff+0x2e>
 80165b6:	4b3f      	ldr	r3, [pc, #252]	@ (80166b4 <__mdiff+0x120>)
 80165b8:	f240 2137 	movw	r1, #567	@ 0x237
 80165bc:	483e      	ldr	r0, [pc, #248]	@ (80166b8 <__mdiff+0x124>)
 80165be:	f000 fb03 	bl	8016bc8 <__assert_func>
 80165c2:	2301      	movs	r3, #1
 80165c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80165c8:	4610      	mov	r0, r2
 80165ca:	b003      	add	sp, #12
 80165cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d0:	bfbc      	itt	lt
 80165d2:	464b      	movlt	r3, r9
 80165d4:	46a1      	movlt	r9, r4
 80165d6:	4630      	mov	r0, r6
 80165d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80165dc:	bfba      	itte	lt
 80165de:	461c      	movlt	r4, r3
 80165e0:	2501      	movlt	r5, #1
 80165e2:	2500      	movge	r5, #0
 80165e4:	f7ff fd40 	bl	8016068 <_Balloc>
 80165e8:	4602      	mov	r2, r0
 80165ea:	b918      	cbnz	r0, 80165f4 <__mdiff+0x60>
 80165ec:	4b31      	ldr	r3, [pc, #196]	@ (80166b4 <__mdiff+0x120>)
 80165ee:	f240 2145 	movw	r1, #581	@ 0x245
 80165f2:	e7e3      	b.n	80165bc <__mdiff+0x28>
 80165f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80165f8:	6926      	ldr	r6, [r4, #16]
 80165fa:	60c5      	str	r5, [r0, #12]
 80165fc:	f109 0310 	add.w	r3, r9, #16
 8016600:	f109 0514 	add.w	r5, r9, #20
 8016604:	f104 0e14 	add.w	lr, r4, #20
 8016608:	f100 0b14 	add.w	fp, r0, #20
 801660c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016610:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016614:	9301      	str	r3, [sp, #4]
 8016616:	46d9      	mov	r9, fp
 8016618:	f04f 0c00 	mov.w	ip, #0
 801661c:	9b01      	ldr	r3, [sp, #4]
 801661e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016622:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016626:	9301      	str	r3, [sp, #4]
 8016628:	fa1f f38a 	uxth.w	r3, sl
 801662c:	4619      	mov	r1, r3
 801662e:	b283      	uxth	r3, r0
 8016630:	1acb      	subs	r3, r1, r3
 8016632:	0c00      	lsrs	r0, r0, #16
 8016634:	4463      	add	r3, ip
 8016636:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801663a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801663e:	b29b      	uxth	r3, r3
 8016640:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016644:	4576      	cmp	r6, lr
 8016646:	f849 3b04 	str.w	r3, [r9], #4
 801664a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801664e:	d8e5      	bhi.n	801661c <__mdiff+0x88>
 8016650:	1b33      	subs	r3, r6, r4
 8016652:	3b15      	subs	r3, #21
 8016654:	f023 0303 	bic.w	r3, r3, #3
 8016658:	3415      	adds	r4, #21
 801665a:	3304      	adds	r3, #4
 801665c:	42a6      	cmp	r6, r4
 801665e:	bf38      	it	cc
 8016660:	2304      	movcc	r3, #4
 8016662:	441d      	add	r5, r3
 8016664:	445b      	add	r3, fp
 8016666:	461e      	mov	r6, r3
 8016668:	462c      	mov	r4, r5
 801666a:	4544      	cmp	r4, r8
 801666c:	d30e      	bcc.n	801668c <__mdiff+0xf8>
 801666e:	f108 0103 	add.w	r1, r8, #3
 8016672:	1b49      	subs	r1, r1, r5
 8016674:	f021 0103 	bic.w	r1, r1, #3
 8016678:	3d03      	subs	r5, #3
 801667a:	45a8      	cmp	r8, r5
 801667c:	bf38      	it	cc
 801667e:	2100      	movcc	r1, #0
 8016680:	440b      	add	r3, r1
 8016682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016686:	b191      	cbz	r1, 80166ae <__mdiff+0x11a>
 8016688:	6117      	str	r7, [r2, #16]
 801668a:	e79d      	b.n	80165c8 <__mdiff+0x34>
 801668c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016690:	46e6      	mov	lr, ip
 8016692:	0c08      	lsrs	r0, r1, #16
 8016694:	fa1c fc81 	uxtah	ip, ip, r1
 8016698:	4471      	add	r1, lr
 801669a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801669e:	b289      	uxth	r1, r1
 80166a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80166a4:	f846 1b04 	str.w	r1, [r6], #4
 80166a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80166ac:	e7dd      	b.n	801666a <__mdiff+0xd6>
 80166ae:	3f01      	subs	r7, #1
 80166b0:	e7e7      	b.n	8016682 <__mdiff+0xee>
 80166b2:	bf00      	nop
 80166b4:	080176f0 	.word	0x080176f0
 80166b8:	08017701 	.word	0x08017701

080166bc <__d2b>:
 80166bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80166c0:	460f      	mov	r7, r1
 80166c2:	2101      	movs	r1, #1
 80166c4:	ec59 8b10 	vmov	r8, r9, d0
 80166c8:	4616      	mov	r6, r2
 80166ca:	f7ff fccd 	bl	8016068 <_Balloc>
 80166ce:	4604      	mov	r4, r0
 80166d0:	b930      	cbnz	r0, 80166e0 <__d2b+0x24>
 80166d2:	4602      	mov	r2, r0
 80166d4:	4b23      	ldr	r3, [pc, #140]	@ (8016764 <__d2b+0xa8>)
 80166d6:	4824      	ldr	r0, [pc, #144]	@ (8016768 <__d2b+0xac>)
 80166d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80166dc:	f000 fa74 	bl	8016bc8 <__assert_func>
 80166e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80166e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80166e8:	b10d      	cbz	r5, 80166ee <__d2b+0x32>
 80166ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80166ee:	9301      	str	r3, [sp, #4]
 80166f0:	f1b8 0300 	subs.w	r3, r8, #0
 80166f4:	d023      	beq.n	801673e <__d2b+0x82>
 80166f6:	4668      	mov	r0, sp
 80166f8:	9300      	str	r3, [sp, #0]
 80166fa:	f7ff fd7c 	bl	80161f6 <__lo0bits>
 80166fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016702:	b1d0      	cbz	r0, 801673a <__d2b+0x7e>
 8016704:	f1c0 0320 	rsb	r3, r0, #32
 8016708:	fa02 f303 	lsl.w	r3, r2, r3
 801670c:	430b      	orrs	r3, r1
 801670e:	40c2      	lsrs	r2, r0
 8016710:	6163      	str	r3, [r4, #20]
 8016712:	9201      	str	r2, [sp, #4]
 8016714:	9b01      	ldr	r3, [sp, #4]
 8016716:	61a3      	str	r3, [r4, #24]
 8016718:	2b00      	cmp	r3, #0
 801671a:	bf0c      	ite	eq
 801671c:	2201      	moveq	r2, #1
 801671e:	2202      	movne	r2, #2
 8016720:	6122      	str	r2, [r4, #16]
 8016722:	b1a5      	cbz	r5, 801674e <__d2b+0x92>
 8016724:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016728:	4405      	add	r5, r0
 801672a:	603d      	str	r5, [r7, #0]
 801672c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016730:	6030      	str	r0, [r6, #0]
 8016732:	4620      	mov	r0, r4
 8016734:	b003      	add	sp, #12
 8016736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801673a:	6161      	str	r1, [r4, #20]
 801673c:	e7ea      	b.n	8016714 <__d2b+0x58>
 801673e:	a801      	add	r0, sp, #4
 8016740:	f7ff fd59 	bl	80161f6 <__lo0bits>
 8016744:	9b01      	ldr	r3, [sp, #4]
 8016746:	6163      	str	r3, [r4, #20]
 8016748:	3020      	adds	r0, #32
 801674a:	2201      	movs	r2, #1
 801674c:	e7e8      	b.n	8016720 <__d2b+0x64>
 801674e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016752:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016756:	6038      	str	r0, [r7, #0]
 8016758:	6918      	ldr	r0, [r3, #16]
 801675a:	f7ff fd2d 	bl	80161b8 <__hi0bits>
 801675e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016762:	e7e5      	b.n	8016730 <__d2b+0x74>
 8016764:	080176f0 	.word	0x080176f0
 8016768:	08017701 	.word	0x08017701

0801676c <__ssputs_r>:
 801676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016770:	688e      	ldr	r6, [r1, #8]
 8016772:	461f      	mov	r7, r3
 8016774:	42be      	cmp	r6, r7
 8016776:	680b      	ldr	r3, [r1, #0]
 8016778:	4682      	mov	sl, r0
 801677a:	460c      	mov	r4, r1
 801677c:	4690      	mov	r8, r2
 801677e:	d82d      	bhi.n	80167dc <__ssputs_r+0x70>
 8016780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016788:	d026      	beq.n	80167d8 <__ssputs_r+0x6c>
 801678a:	6965      	ldr	r5, [r4, #20]
 801678c:	6909      	ldr	r1, [r1, #16]
 801678e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016792:	eba3 0901 	sub.w	r9, r3, r1
 8016796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801679a:	1c7b      	adds	r3, r7, #1
 801679c:	444b      	add	r3, r9
 801679e:	106d      	asrs	r5, r5, #1
 80167a0:	429d      	cmp	r5, r3
 80167a2:	bf38      	it	cc
 80167a4:	461d      	movcc	r5, r3
 80167a6:	0553      	lsls	r3, r2, #21
 80167a8:	d527      	bpl.n	80167fa <__ssputs_r+0x8e>
 80167aa:	4629      	mov	r1, r5
 80167ac:	f7ff fbd0 	bl	8015f50 <_malloc_r>
 80167b0:	4606      	mov	r6, r0
 80167b2:	b360      	cbz	r0, 801680e <__ssputs_r+0xa2>
 80167b4:	6921      	ldr	r1, [r4, #16]
 80167b6:	464a      	mov	r2, r9
 80167b8:	f7fe fcfb 	bl	80151b2 <memcpy>
 80167bc:	89a3      	ldrh	r3, [r4, #12]
 80167be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80167c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80167c6:	81a3      	strh	r3, [r4, #12]
 80167c8:	6126      	str	r6, [r4, #16]
 80167ca:	6165      	str	r5, [r4, #20]
 80167cc:	444e      	add	r6, r9
 80167ce:	eba5 0509 	sub.w	r5, r5, r9
 80167d2:	6026      	str	r6, [r4, #0]
 80167d4:	60a5      	str	r5, [r4, #8]
 80167d6:	463e      	mov	r6, r7
 80167d8:	42be      	cmp	r6, r7
 80167da:	d900      	bls.n	80167de <__ssputs_r+0x72>
 80167dc:	463e      	mov	r6, r7
 80167de:	6820      	ldr	r0, [r4, #0]
 80167e0:	4632      	mov	r2, r6
 80167e2:	4641      	mov	r1, r8
 80167e4:	f000 f9c6 	bl	8016b74 <memmove>
 80167e8:	68a3      	ldr	r3, [r4, #8]
 80167ea:	1b9b      	subs	r3, r3, r6
 80167ec:	60a3      	str	r3, [r4, #8]
 80167ee:	6823      	ldr	r3, [r4, #0]
 80167f0:	4433      	add	r3, r6
 80167f2:	6023      	str	r3, [r4, #0]
 80167f4:	2000      	movs	r0, #0
 80167f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167fa:	462a      	mov	r2, r5
 80167fc:	f000 fa28 	bl	8016c50 <_realloc_r>
 8016800:	4606      	mov	r6, r0
 8016802:	2800      	cmp	r0, #0
 8016804:	d1e0      	bne.n	80167c8 <__ssputs_r+0x5c>
 8016806:	6921      	ldr	r1, [r4, #16]
 8016808:	4650      	mov	r0, sl
 801680a:	f7ff fb2d 	bl	8015e68 <_free_r>
 801680e:	230c      	movs	r3, #12
 8016810:	f8ca 3000 	str.w	r3, [sl]
 8016814:	89a3      	ldrh	r3, [r4, #12]
 8016816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801681a:	81a3      	strh	r3, [r4, #12]
 801681c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016820:	e7e9      	b.n	80167f6 <__ssputs_r+0x8a>
	...

08016824 <_svfiprintf_r>:
 8016824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016828:	4698      	mov	r8, r3
 801682a:	898b      	ldrh	r3, [r1, #12]
 801682c:	061b      	lsls	r3, r3, #24
 801682e:	b09d      	sub	sp, #116	@ 0x74
 8016830:	4607      	mov	r7, r0
 8016832:	460d      	mov	r5, r1
 8016834:	4614      	mov	r4, r2
 8016836:	d510      	bpl.n	801685a <_svfiprintf_r+0x36>
 8016838:	690b      	ldr	r3, [r1, #16]
 801683a:	b973      	cbnz	r3, 801685a <_svfiprintf_r+0x36>
 801683c:	2140      	movs	r1, #64	@ 0x40
 801683e:	f7ff fb87 	bl	8015f50 <_malloc_r>
 8016842:	6028      	str	r0, [r5, #0]
 8016844:	6128      	str	r0, [r5, #16]
 8016846:	b930      	cbnz	r0, 8016856 <_svfiprintf_r+0x32>
 8016848:	230c      	movs	r3, #12
 801684a:	603b      	str	r3, [r7, #0]
 801684c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016850:	b01d      	add	sp, #116	@ 0x74
 8016852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016856:	2340      	movs	r3, #64	@ 0x40
 8016858:	616b      	str	r3, [r5, #20]
 801685a:	2300      	movs	r3, #0
 801685c:	9309      	str	r3, [sp, #36]	@ 0x24
 801685e:	2320      	movs	r3, #32
 8016860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016864:	f8cd 800c 	str.w	r8, [sp, #12]
 8016868:	2330      	movs	r3, #48	@ 0x30
 801686a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016a08 <_svfiprintf_r+0x1e4>
 801686e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016872:	f04f 0901 	mov.w	r9, #1
 8016876:	4623      	mov	r3, r4
 8016878:	469a      	mov	sl, r3
 801687a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801687e:	b10a      	cbz	r2, 8016884 <_svfiprintf_r+0x60>
 8016880:	2a25      	cmp	r2, #37	@ 0x25
 8016882:	d1f9      	bne.n	8016878 <_svfiprintf_r+0x54>
 8016884:	ebba 0b04 	subs.w	fp, sl, r4
 8016888:	d00b      	beq.n	80168a2 <_svfiprintf_r+0x7e>
 801688a:	465b      	mov	r3, fp
 801688c:	4622      	mov	r2, r4
 801688e:	4629      	mov	r1, r5
 8016890:	4638      	mov	r0, r7
 8016892:	f7ff ff6b 	bl	801676c <__ssputs_r>
 8016896:	3001      	adds	r0, #1
 8016898:	f000 80a7 	beq.w	80169ea <_svfiprintf_r+0x1c6>
 801689c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801689e:	445a      	add	r2, fp
 80168a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80168a2:	f89a 3000 	ldrb.w	r3, [sl]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	f000 809f 	beq.w	80169ea <_svfiprintf_r+0x1c6>
 80168ac:	2300      	movs	r3, #0
 80168ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80168b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168b6:	f10a 0a01 	add.w	sl, sl, #1
 80168ba:	9304      	str	r3, [sp, #16]
 80168bc:	9307      	str	r3, [sp, #28]
 80168be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80168c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80168c4:	4654      	mov	r4, sl
 80168c6:	2205      	movs	r2, #5
 80168c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168cc:	484e      	ldr	r0, [pc, #312]	@ (8016a08 <_svfiprintf_r+0x1e4>)
 80168ce:	f7e9 fc97 	bl	8000200 <memchr>
 80168d2:	9a04      	ldr	r2, [sp, #16]
 80168d4:	b9d8      	cbnz	r0, 801690e <_svfiprintf_r+0xea>
 80168d6:	06d0      	lsls	r0, r2, #27
 80168d8:	bf44      	itt	mi
 80168da:	2320      	movmi	r3, #32
 80168dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80168e0:	0711      	lsls	r1, r2, #28
 80168e2:	bf44      	itt	mi
 80168e4:	232b      	movmi	r3, #43	@ 0x2b
 80168e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80168ea:	f89a 3000 	ldrb.w	r3, [sl]
 80168ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80168f0:	d015      	beq.n	801691e <_svfiprintf_r+0xfa>
 80168f2:	9a07      	ldr	r2, [sp, #28]
 80168f4:	4654      	mov	r4, sl
 80168f6:	2000      	movs	r0, #0
 80168f8:	f04f 0c0a 	mov.w	ip, #10
 80168fc:	4621      	mov	r1, r4
 80168fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016902:	3b30      	subs	r3, #48	@ 0x30
 8016904:	2b09      	cmp	r3, #9
 8016906:	d94b      	bls.n	80169a0 <_svfiprintf_r+0x17c>
 8016908:	b1b0      	cbz	r0, 8016938 <_svfiprintf_r+0x114>
 801690a:	9207      	str	r2, [sp, #28]
 801690c:	e014      	b.n	8016938 <_svfiprintf_r+0x114>
 801690e:	eba0 0308 	sub.w	r3, r0, r8
 8016912:	fa09 f303 	lsl.w	r3, r9, r3
 8016916:	4313      	orrs	r3, r2
 8016918:	9304      	str	r3, [sp, #16]
 801691a:	46a2      	mov	sl, r4
 801691c:	e7d2      	b.n	80168c4 <_svfiprintf_r+0xa0>
 801691e:	9b03      	ldr	r3, [sp, #12]
 8016920:	1d19      	adds	r1, r3, #4
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	9103      	str	r1, [sp, #12]
 8016926:	2b00      	cmp	r3, #0
 8016928:	bfbb      	ittet	lt
 801692a:	425b      	neglt	r3, r3
 801692c:	f042 0202 	orrlt.w	r2, r2, #2
 8016930:	9307      	strge	r3, [sp, #28]
 8016932:	9307      	strlt	r3, [sp, #28]
 8016934:	bfb8      	it	lt
 8016936:	9204      	strlt	r2, [sp, #16]
 8016938:	7823      	ldrb	r3, [r4, #0]
 801693a:	2b2e      	cmp	r3, #46	@ 0x2e
 801693c:	d10a      	bne.n	8016954 <_svfiprintf_r+0x130>
 801693e:	7863      	ldrb	r3, [r4, #1]
 8016940:	2b2a      	cmp	r3, #42	@ 0x2a
 8016942:	d132      	bne.n	80169aa <_svfiprintf_r+0x186>
 8016944:	9b03      	ldr	r3, [sp, #12]
 8016946:	1d1a      	adds	r2, r3, #4
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	9203      	str	r2, [sp, #12]
 801694c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016950:	3402      	adds	r4, #2
 8016952:	9305      	str	r3, [sp, #20]
 8016954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016a18 <_svfiprintf_r+0x1f4>
 8016958:	7821      	ldrb	r1, [r4, #0]
 801695a:	2203      	movs	r2, #3
 801695c:	4650      	mov	r0, sl
 801695e:	f7e9 fc4f 	bl	8000200 <memchr>
 8016962:	b138      	cbz	r0, 8016974 <_svfiprintf_r+0x150>
 8016964:	9b04      	ldr	r3, [sp, #16]
 8016966:	eba0 000a 	sub.w	r0, r0, sl
 801696a:	2240      	movs	r2, #64	@ 0x40
 801696c:	4082      	lsls	r2, r0
 801696e:	4313      	orrs	r3, r2
 8016970:	3401      	adds	r4, #1
 8016972:	9304      	str	r3, [sp, #16]
 8016974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016978:	4824      	ldr	r0, [pc, #144]	@ (8016a0c <_svfiprintf_r+0x1e8>)
 801697a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801697e:	2206      	movs	r2, #6
 8016980:	f7e9 fc3e 	bl	8000200 <memchr>
 8016984:	2800      	cmp	r0, #0
 8016986:	d036      	beq.n	80169f6 <_svfiprintf_r+0x1d2>
 8016988:	4b21      	ldr	r3, [pc, #132]	@ (8016a10 <_svfiprintf_r+0x1ec>)
 801698a:	bb1b      	cbnz	r3, 80169d4 <_svfiprintf_r+0x1b0>
 801698c:	9b03      	ldr	r3, [sp, #12]
 801698e:	3307      	adds	r3, #7
 8016990:	f023 0307 	bic.w	r3, r3, #7
 8016994:	3308      	adds	r3, #8
 8016996:	9303      	str	r3, [sp, #12]
 8016998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801699a:	4433      	add	r3, r6
 801699c:	9309      	str	r3, [sp, #36]	@ 0x24
 801699e:	e76a      	b.n	8016876 <_svfiprintf_r+0x52>
 80169a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80169a4:	460c      	mov	r4, r1
 80169a6:	2001      	movs	r0, #1
 80169a8:	e7a8      	b.n	80168fc <_svfiprintf_r+0xd8>
 80169aa:	2300      	movs	r3, #0
 80169ac:	3401      	adds	r4, #1
 80169ae:	9305      	str	r3, [sp, #20]
 80169b0:	4619      	mov	r1, r3
 80169b2:	f04f 0c0a 	mov.w	ip, #10
 80169b6:	4620      	mov	r0, r4
 80169b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169bc:	3a30      	subs	r2, #48	@ 0x30
 80169be:	2a09      	cmp	r2, #9
 80169c0:	d903      	bls.n	80169ca <_svfiprintf_r+0x1a6>
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d0c6      	beq.n	8016954 <_svfiprintf_r+0x130>
 80169c6:	9105      	str	r1, [sp, #20]
 80169c8:	e7c4      	b.n	8016954 <_svfiprintf_r+0x130>
 80169ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80169ce:	4604      	mov	r4, r0
 80169d0:	2301      	movs	r3, #1
 80169d2:	e7f0      	b.n	80169b6 <_svfiprintf_r+0x192>
 80169d4:	ab03      	add	r3, sp, #12
 80169d6:	9300      	str	r3, [sp, #0]
 80169d8:	462a      	mov	r2, r5
 80169da:	4b0e      	ldr	r3, [pc, #56]	@ (8016a14 <_svfiprintf_r+0x1f0>)
 80169dc:	a904      	add	r1, sp, #16
 80169de:	4638      	mov	r0, r7
 80169e0:	f7fd fe8a 	bl	80146f8 <_printf_float>
 80169e4:	1c42      	adds	r2, r0, #1
 80169e6:	4606      	mov	r6, r0
 80169e8:	d1d6      	bne.n	8016998 <_svfiprintf_r+0x174>
 80169ea:	89ab      	ldrh	r3, [r5, #12]
 80169ec:	065b      	lsls	r3, r3, #25
 80169ee:	f53f af2d 	bmi.w	801684c <_svfiprintf_r+0x28>
 80169f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80169f4:	e72c      	b.n	8016850 <_svfiprintf_r+0x2c>
 80169f6:	ab03      	add	r3, sp, #12
 80169f8:	9300      	str	r3, [sp, #0]
 80169fa:	462a      	mov	r2, r5
 80169fc:	4b05      	ldr	r3, [pc, #20]	@ (8016a14 <_svfiprintf_r+0x1f0>)
 80169fe:	a904      	add	r1, sp, #16
 8016a00:	4638      	mov	r0, r7
 8016a02:	f7fe f911 	bl	8014c28 <_printf_i>
 8016a06:	e7ed      	b.n	80169e4 <_svfiprintf_r+0x1c0>
 8016a08:	08017858 	.word	0x08017858
 8016a0c:	08017862 	.word	0x08017862
 8016a10:	080146f9 	.word	0x080146f9
 8016a14:	0801676d 	.word	0x0801676d
 8016a18:	0801785e 	.word	0x0801785e

08016a1c <__sflush_r>:
 8016a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a24:	0716      	lsls	r6, r2, #28
 8016a26:	4605      	mov	r5, r0
 8016a28:	460c      	mov	r4, r1
 8016a2a:	d454      	bmi.n	8016ad6 <__sflush_r+0xba>
 8016a2c:	684b      	ldr	r3, [r1, #4]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	dc02      	bgt.n	8016a38 <__sflush_r+0x1c>
 8016a32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	dd48      	ble.n	8016aca <__sflush_r+0xae>
 8016a38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a3a:	2e00      	cmp	r6, #0
 8016a3c:	d045      	beq.n	8016aca <__sflush_r+0xae>
 8016a3e:	2300      	movs	r3, #0
 8016a40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016a44:	682f      	ldr	r7, [r5, #0]
 8016a46:	6a21      	ldr	r1, [r4, #32]
 8016a48:	602b      	str	r3, [r5, #0]
 8016a4a:	d030      	beq.n	8016aae <__sflush_r+0x92>
 8016a4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016a4e:	89a3      	ldrh	r3, [r4, #12]
 8016a50:	0759      	lsls	r1, r3, #29
 8016a52:	d505      	bpl.n	8016a60 <__sflush_r+0x44>
 8016a54:	6863      	ldr	r3, [r4, #4]
 8016a56:	1ad2      	subs	r2, r2, r3
 8016a58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016a5a:	b10b      	cbz	r3, 8016a60 <__sflush_r+0x44>
 8016a5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016a5e:	1ad2      	subs	r2, r2, r3
 8016a60:	2300      	movs	r3, #0
 8016a62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a64:	6a21      	ldr	r1, [r4, #32]
 8016a66:	4628      	mov	r0, r5
 8016a68:	47b0      	blx	r6
 8016a6a:	1c43      	adds	r3, r0, #1
 8016a6c:	89a3      	ldrh	r3, [r4, #12]
 8016a6e:	d106      	bne.n	8016a7e <__sflush_r+0x62>
 8016a70:	6829      	ldr	r1, [r5, #0]
 8016a72:	291d      	cmp	r1, #29
 8016a74:	d82b      	bhi.n	8016ace <__sflush_r+0xb2>
 8016a76:	4a2a      	ldr	r2, [pc, #168]	@ (8016b20 <__sflush_r+0x104>)
 8016a78:	410a      	asrs	r2, r1
 8016a7a:	07d6      	lsls	r6, r2, #31
 8016a7c:	d427      	bmi.n	8016ace <__sflush_r+0xb2>
 8016a7e:	2200      	movs	r2, #0
 8016a80:	6062      	str	r2, [r4, #4]
 8016a82:	04d9      	lsls	r1, r3, #19
 8016a84:	6922      	ldr	r2, [r4, #16]
 8016a86:	6022      	str	r2, [r4, #0]
 8016a88:	d504      	bpl.n	8016a94 <__sflush_r+0x78>
 8016a8a:	1c42      	adds	r2, r0, #1
 8016a8c:	d101      	bne.n	8016a92 <__sflush_r+0x76>
 8016a8e:	682b      	ldr	r3, [r5, #0]
 8016a90:	b903      	cbnz	r3, 8016a94 <__sflush_r+0x78>
 8016a92:	6560      	str	r0, [r4, #84]	@ 0x54
 8016a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a96:	602f      	str	r7, [r5, #0]
 8016a98:	b1b9      	cbz	r1, 8016aca <__sflush_r+0xae>
 8016a9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a9e:	4299      	cmp	r1, r3
 8016aa0:	d002      	beq.n	8016aa8 <__sflush_r+0x8c>
 8016aa2:	4628      	mov	r0, r5
 8016aa4:	f7ff f9e0 	bl	8015e68 <_free_r>
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8016aac:	e00d      	b.n	8016aca <__sflush_r+0xae>
 8016aae:	2301      	movs	r3, #1
 8016ab0:	4628      	mov	r0, r5
 8016ab2:	47b0      	blx	r6
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	1c50      	adds	r0, r2, #1
 8016ab8:	d1c9      	bne.n	8016a4e <__sflush_r+0x32>
 8016aba:	682b      	ldr	r3, [r5, #0]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d0c6      	beq.n	8016a4e <__sflush_r+0x32>
 8016ac0:	2b1d      	cmp	r3, #29
 8016ac2:	d001      	beq.n	8016ac8 <__sflush_r+0xac>
 8016ac4:	2b16      	cmp	r3, #22
 8016ac6:	d11e      	bne.n	8016b06 <__sflush_r+0xea>
 8016ac8:	602f      	str	r7, [r5, #0]
 8016aca:	2000      	movs	r0, #0
 8016acc:	e022      	b.n	8016b14 <__sflush_r+0xf8>
 8016ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ad2:	b21b      	sxth	r3, r3
 8016ad4:	e01b      	b.n	8016b0e <__sflush_r+0xf2>
 8016ad6:	690f      	ldr	r7, [r1, #16]
 8016ad8:	2f00      	cmp	r7, #0
 8016ada:	d0f6      	beq.n	8016aca <__sflush_r+0xae>
 8016adc:	0793      	lsls	r3, r2, #30
 8016ade:	680e      	ldr	r6, [r1, #0]
 8016ae0:	bf08      	it	eq
 8016ae2:	694b      	ldreq	r3, [r1, #20]
 8016ae4:	600f      	str	r7, [r1, #0]
 8016ae6:	bf18      	it	ne
 8016ae8:	2300      	movne	r3, #0
 8016aea:	eba6 0807 	sub.w	r8, r6, r7
 8016aee:	608b      	str	r3, [r1, #8]
 8016af0:	f1b8 0f00 	cmp.w	r8, #0
 8016af4:	dde9      	ble.n	8016aca <__sflush_r+0xae>
 8016af6:	6a21      	ldr	r1, [r4, #32]
 8016af8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016afa:	4643      	mov	r3, r8
 8016afc:	463a      	mov	r2, r7
 8016afe:	4628      	mov	r0, r5
 8016b00:	47b0      	blx	r6
 8016b02:	2800      	cmp	r0, #0
 8016b04:	dc08      	bgt.n	8016b18 <__sflush_r+0xfc>
 8016b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b0e:	81a3      	strh	r3, [r4, #12]
 8016b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b18:	4407      	add	r7, r0
 8016b1a:	eba8 0800 	sub.w	r8, r8, r0
 8016b1e:	e7e7      	b.n	8016af0 <__sflush_r+0xd4>
 8016b20:	dfbffffe 	.word	0xdfbffffe

08016b24 <_fflush_r>:
 8016b24:	b538      	push	{r3, r4, r5, lr}
 8016b26:	690b      	ldr	r3, [r1, #16]
 8016b28:	4605      	mov	r5, r0
 8016b2a:	460c      	mov	r4, r1
 8016b2c:	b913      	cbnz	r3, 8016b34 <_fflush_r+0x10>
 8016b2e:	2500      	movs	r5, #0
 8016b30:	4628      	mov	r0, r5
 8016b32:	bd38      	pop	{r3, r4, r5, pc}
 8016b34:	b118      	cbz	r0, 8016b3e <_fflush_r+0x1a>
 8016b36:	6a03      	ldr	r3, [r0, #32]
 8016b38:	b90b      	cbnz	r3, 8016b3e <_fflush_r+0x1a>
 8016b3a:	f7fe fa21 	bl	8014f80 <__sinit>
 8016b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d0f3      	beq.n	8016b2e <_fflush_r+0xa>
 8016b46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016b48:	07d0      	lsls	r0, r2, #31
 8016b4a:	d404      	bmi.n	8016b56 <_fflush_r+0x32>
 8016b4c:	0599      	lsls	r1, r3, #22
 8016b4e:	d402      	bmi.n	8016b56 <_fflush_r+0x32>
 8016b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b52:	f7fe fb2c 	bl	80151ae <__retarget_lock_acquire_recursive>
 8016b56:	4628      	mov	r0, r5
 8016b58:	4621      	mov	r1, r4
 8016b5a:	f7ff ff5f 	bl	8016a1c <__sflush_r>
 8016b5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b60:	07da      	lsls	r2, r3, #31
 8016b62:	4605      	mov	r5, r0
 8016b64:	d4e4      	bmi.n	8016b30 <_fflush_r+0xc>
 8016b66:	89a3      	ldrh	r3, [r4, #12]
 8016b68:	059b      	lsls	r3, r3, #22
 8016b6a:	d4e1      	bmi.n	8016b30 <_fflush_r+0xc>
 8016b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b6e:	f7fe fb1f 	bl	80151b0 <__retarget_lock_release_recursive>
 8016b72:	e7dd      	b.n	8016b30 <_fflush_r+0xc>

08016b74 <memmove>:
 8016b74:	4288      	cmp	r0, r1
 8016b76:	b510      	push	{r4, lr}
 8016b78:	eb01 0402 	add.w	r4, r1, r2
 8016b7c:	d902      	bls.n	8016b84 <memmove+0x10>
 8016b7e:	4284      	cmp	r4, r0
 8016b80:	4623      	mov	r3, r4
 8016b82:	d807      	bhi.n	8016b94 <memmove+0x20>
 8016b84:	1e43      	subs	r3, r0, #1
 8016b86:	42a1      	cmp	r1, r4
 8016b88:	d008      	beq.n	8016b9c <memmove+0x28>
 8016b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016b92:	e7f8      	b.n	8016b86 <memmove+0x12>
 8016b94:	4402      	add	r2, r0
 8016b96:	4601      	mov	r1, r0
 8016b98:	428a      	cmp	r2, r1
 8016b9a:	d100      	bne.n	8016b9e <memmove+0x2a>
 8016b9c:	bd10      	pop	{r4, pc}
 8016b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ba6:	e7f7      	b.n	8016b98 <memmove+0x24>

08016ba8 <_sbrk_r>:
 8016ba8:	b538      	push	{r3, r4, r5, lr}
 8016baa:	4d06      	ldr	r5, [pc, #24]	@ (8016bc4 <_sbrk_r+0x1c>)
 8016bac:	2300      	movs	r3, #0
 8016bae:	4604      	mov	r4, r0
 8016bb0:	4608      	mov	r0, r1
 8016bb2:	602b      	str	r3, [r5, #0]
 8016bb4:	f7ea f9b2 	bl	8000f1c <_sbrk>
 8016bb8:	1c43      	adds	r3, r0, #1
 8016bba:	d102      	bne.n	8016bc2 <_sbrk_r+0x1a>
 8016bbc:	682b      	ldr	r3, [r5, #0]
 8016bbe:	b103      	cbz	r3, 8016bc2 <_sbrk_r+0x1a>
 8016bc0:	6023      	str	r3, [r4, #0]
 8016bc2:	bd38      	pop	{r3, r4, r5, pc}
 8016bc4:	20006a34 	.word	0x20006a34

08016bc8 <__assert_func>:
 8016bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016bca:	4614      	mov	r4, r2
 8016bcc:	461a      	mov	r2, r3
 8016bce:	4b09      	ldr	r3, [pc, #36]	@ (8016bf4 <__assert_func+0x2c>)
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	4605      	mov	r5, r0
 8016bd4:	68d8      	ldr	r0, [r3, #12]
 8016bd6:	b954      	cbnz	r4, 8016bee <__assert_func+0x26>
 8016bd8:	4b07      	ldr	r3, [pc, #28]	@ (8016bf8 <__assert_func+0x30>)
 8016bda:	461c      	mov	r4, r3
 8016bdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016be0:	9100      	str	r1, [sp, #0]
 8016be2:	462b      	mov	r3, r5
 8016be4:	4905      	ldr	r1, [pc, #20]	@ (8016bfc <__assert_func+0x34>)
 8016be6:	f000 f86f 	bl	8016cc8 <fiprintf>
 8016bea:	f000 f87f 	bl	8016cec <abort>
 8016bee:	4b04      	ldr	r3, [pc, #16]	@ (8016c00 <__assert_func+0x38>)
 8016bf0:	e7f4      	b.n	8016bdc <__assert_func+0x14>
 8016bf2:	bf00      	nop
 8016bf4:	20000310 	.word	0x20000310
 8016bf8:	080178ae 	.word	0x080178ae
 8016bfc:	08017880 	.word	0x08017880
 8016c00:	08017873 	.word	0x08017873

08016c04 <_calloc_r>:
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	fba1 5402 	umull	r5, r4, r1, r2
 8016c0a:	b93c      	cbnz	r4, 8016c1c <_calloc_r+0x18>
 8016c0c:	4629      	mov	r1, r5
 8016c0e:	f7ff f99f 	bl	8015f50 <_malloc_r>
 8016c12:	4606      	mov	r6, r0
 8016c14:	b928      	cbnz	r0, 8016c22 <_calloc_r+0x1e>
 8016c16:	2600      	movs	r6, #0
 8016c18:	4630      	mov	r0, r6
 8016c1a:	bd70      	pop	{r4, r5, r6, pc}
 8016c1c:	220c      	movs	r2, #12
 8016c1e:	6002      	str	r2, [r0, #0]
 8016c20:	e7f9      	b.n	8016c16 <_calloc_r+0x12>
 8016c22:	462a      	mov	r2, r5
 8016c24:	4621      	mov	r1, r4
 8016c26:	f7fe fa44 	bl	80150b2 <memset>
 8016c2a:	e7f5      	b.n	8016c18 <_calloc_r+0x14>

08016c2c <__ascii_mbtowc>:
 8016c2c:	b082      	sub	sp, #8
 8016c2e:	b901      	cbnz	r1, 8016c32 <__ascii_mbtowc+0x6>
 8016c30:	a901      	add	r1, sp, #4
 8016c32:	b142      	cbz	r2, 8016c46 <__ascii_mbtowc+0x1a>
 8016c34:	b14b      	cbz	r3, 8016c4a <__ascii_mbtowc+0x1e>
 8016c36:	7813      	ldrb	r3, [r2, #0]
 8016c38:	600b      	str	r3, [r1, #0]
 8016c3a:	7812      	ldrb	r2, [r2, #0]
 8016c3c:	1e10      	subs	r0, r2, #0
 8016c3e:	bf18      	it	ne
 8016c40:	2001      	movne	r0, #1
 8016c42:	b002      	add	sp, #8
 8016c44:	4770      	bx	lr
 8016c46:	4610      	mov	r0, r2
 8016c48:	e7fb      	b.n	8016c42 <__ascii_mbtowc+0x16>
 8016c4a:	f06f 0001 	mvn.w	r0, #1
 8016c4e:	e7f8      	b.n	8016c42 <__ascii_mbtowc+0x16>

08016c50 <_realloc_r>:
 8016c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c54:	4680      	mov	r8, r0
 8016c56:	4615      	mov	r5, r2
 8016c58:	460c      	mov	r4, r1
 8016c5a:	b921      	cbnz	r1, 8016c66 <_realloc_r+0x16>
 8016c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c60:	4611      	mov	r1, r2
 8016c62:	f7ff b975 	b.w	8015f50 <_malloc_r>
 8016c66:	b92a      	cbnz	r2, 8016c74 <_realloc_r+0x24>
 8016c68:	f7ff f8fe 	bl	8015e68 <_free_r>
 8016c6c:	2400      	movs	r4, #0
 8016c6e:	4620      	mov	r0, r4
 8016c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c74:	f000 f841 	bl	8016cfa <_malloc_usable_size_r>
 8016c78:	4285      	cmp	r5, r0
 8016c7a:	4606      	mov	r6, r0
 8016c7c:	d802      	bhi.n	8016c84 <_realloc_r+0x34>
 8016c7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016c82:	d8f4      	bhi.n	8016c6e <_realloc_r+0x1e>
 8016c84:	4629      	mov	r1, r5
 8016c86:	4640      	mov	r0, r8
 8016c88:	f7ff f962 	bl	8015f50 <_malloc_r>
 8016c8c:	4607      	mov	r7, r0
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d0ec      	beq.n	8016c6c <_realloc_r+0x1c>
 8016c92:	42b5      	cmp	r5, r6
 8016c94:	462a      	mov	r2, r5
 8016c96:	4621      	mov	r1, r4
 8016c98:	bf28      	it	cs
 8016c9a:	4632      	movcs	r2, r6
 8016c9c:	f7fe fa89 	bl	80151b2 <memcpy>
 8016ca0:	4621      	mov	r1, r4
 8016ca2:	4640      	mov	r0, r8
 8016ca4:	f7ff f8e0 	bl	8015e68 <_free_r>
 8016ca8:	463c      	mov	r4, r7
 8016caa:	e7e0      	b.n	8016c6e <_realloc_r+0x1e>

08016cac <__ascii_wctomb>:
 8016cac:	4603      	mov	r3, r0
 8016cae:	4608      	mov	r0, r1
 8016cb0:	b141      	cbz	r1, 8016cc4 <__ascii_wctomb+0x18>
 8016cb2:	2aff      	cmp	r2, #255	@ 0xff
 8016cb4:	d904      	bls.n	8016cc0 <__ascii_wctomb+0x14>
 8016cb6:	228a      	movs	r2, #138	@ 0x8a
 8016cb8:	601a      	str	r2, [r3, #0]
 8016cba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016cbe:	4770      	bx	lr
 8016cc0:	700a      	strb	r2, [r1, #0]
 8016cc2:	2001      	movs	r0, #1
 8016cc4:	4770      	bx	lr
	...

08016cc8 <fiprintf>:
 8016cc8:	b40e      	push	{r1, r2, r3}
 8016cca:	b503      	push	{r0, r1, lr}
 8016ccc:	4601      	mov	r1, r0
 8016cce:	ab03      	add	r3, sp, #12
 8016cd0:	4805      	ldr	r0, [pc, #20]	@ (8016ce8 <fiprintf+0x20>)
 8016cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cd6:	6800      	ldr	r0, [r0, #0]
 8016cd8:	9301      	str	r3, [sp, #4]
 8016cda:	f000 f83f 	bl	8016d5c <_vfiprintf_r>
 8016cde:	b002      	add	sp, #8
 8016ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ce4:	b003      	add	sp, #12
 8016ce6:	4770      	bx	lr
 8016ce8:	20000310 	.word	0x20000310

08016cec <abort>:
 8016cec:	b508      	push	{r3, lr}
 8016cee:	2006      	movs	r0, #6
 8016cf0:	f000 fa08 	bl	8017104 <raise>
 8016cf4:	2001      	movs	r0, #1
 8016cf6:	f7ea f93b 	bl	8000f70 <_exit>

08016cfa <_malloc_usable_size_r>:
 8016cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cfe:	1f18      	subs	r0, r3, #4
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	bfbc      	itt	lt
 8016d04:	580b      	ldrlt	r3, [r1, r0]
 8016d06:	18c0      	addlt	r0, r0, r3
 8016d08:	4770      	bx	lr

08016d0a <__sfputc_r>:
 8016d0a:	6893      	ldr	r3, [r2, #8]
 8016d0c:	3b01      	subs	r3, #1
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	b410      	push	{r4}
 8016d12:	6093      	str	r3, [r2, #8]
 8016d14:	da08      	bge.n	8016d28 <__sfputc_r+0x1e>
 8016d16:	6994      	ldr	r4, [r2, #24]
 8016d18:	42a3      	cmp	r3, r4
 8016d1a:	db01      	blt.n	8016d20 <__sfputc_r+0x16>
 8016d1c:	290a      	cmp	r1, #10
 8016d1e:	d103      	bne.n	8016d28 <__sfputc_r+0x1e>
 8016d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d24:	f000 b932 	b.w	8016f8c <__swbuf_r>
 8016d28:	6813      	ldr	r3, [r2, #0]
 8016d2a:	1c58      	adds	r0, r3, #1
 8016d2c:	6010      	str	r0, [r2, #0]
 8016d2e:	7019      	strb	r1, [r3, #0]
 8016d30:	4608      	mov	r0, r1
 8016d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d36:	4770      	bx	lr

08016d38 <__sfputs_r>:
 8016d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d3a:	4606      	mov	r6, r0
 8016d3c:	460f      	mov	r7, r1
 8016d3e:	4614      	mov	r4, r2
 8016d40:	18d5      	adds	r5, r2, r3
 8016d42:	42ac      	cmp	r4, r5
 8016d44:	d101      	bne.n	8016d4a <__sfputs_r+0x12>
 8016d46:	2000      	movs	r0, #0
 8016d48:	e007      	b.n	8016d5a <__sfputs_r+0x22>
 8016d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d4e:	463a      	mov	r2, r7
 8016d50:	4630      	mov	r0, r6
 8016d52:	f7ff ffda 	bl	8016d0a <__sfputc_r>
 8016d56:	1c43      	adds	r3, r0, #1
 8016d58:	d1f3      	bne.n	8016d42 <__sfputs_r+0xa>
 8016d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016d5c <_vfiprintf_r>:
 8016d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d60:	460d      	mov	r5, r1
 8016d62:	b09d      	sub	sp, #116	@ 0x74
 8016d64:	4614      	mov	r4, r2
 8016d66:	4698      	mov	r8, r3
 8016d68:	4606      	mov	r6, r0
 8016d6a:	b118      	cbz	r0, 8016d74 <_vfiprintf_r+0x18>
 8016d6c:	6a03      	ldr	r3, [r0, #32]
 8016d6e:	b90b      	cbnz	r3, 8016d74 <_vfiprintf_r+0x18>
 8016d70:	f7fe f906 	bl	8014f80 <__sinit>
 8016d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d76:	07d9      	lsls	r1, r3, #31
 8016d78:	d405      	bmi.n	8016d86 <_vfiprintf_r+0x2a>
 8016d7a:	89ab      	ldrh	r3, [r5, #12]
 8016d7c:	059a      	lsls	r2, r3, #22
 8016d7e:	d402      	bmi.n	8016d86 <_vfiprintf_r+0x2a>
 8016d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d82:	f7fe fa14 	bl	80151ae <__retarget_lock_acquire_recursive>
 8016d86:	89ab      	ldrh	r3, [r5, #12]
 8016d88:	071b      	lsls	r3, r3, #28
 8016d8a:	d501      	bpl.n	8016d90 <_vfiprintf_r+0x34>
 8016d8c:	692b      	ldr	r3, [r5, #16]
 8016d8e:	b99b      	cbnz	r3, 8016db8 <_vfiprintf_r+0x5c>
 8016d90:	4629      	mov	r1, r5
 8016d92:	4630      	mov	r0, r6
 8016d94:	f000 f938 	bl	8017008 <__swsetup_r>
 8016d98:	b170      	cbz	r0, 8016db8 <_vfiprintf_r+0x5c>
 8016d9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d9c:	07dc      	lsls	r4, r3, #31
 8016d9e:	d504      	bpl.n	8016daa <_vfiprintf_r+0x4e>
 8016da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016da4:	b01d      	add	sp, #116	@ 0x74
 8016da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016daa:	89ab      	ldrh	r3, [r5, #12]
 8016dac:	0598      	lsls	r0, r3, #22
 8016dae:	d4f7      	bmi.n	8016da0 <_vfiprintf_r+0x44>
 8016db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016db2:	f7fe f9fd 	bl	80151b0 <__retarget_lock_release_recursive>
 8016db6:	e7f3      	b.n	8016da0 <_vfiprintf_r+0x44>
 8016db8:	2300      	movs	r3, #0
 8016dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dbc:	2320      	movs	r3, #32
 8016dbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8016dc6:	2330      	movs	r3, #48	@ 0x30
 8016dc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016f78 <_vfiprintf_r+0x21c>
 8016dcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016dd0:	f04f 0901 	mov.w	r9, #1
 8016dd4:	4623      	mov	r3, r4
 8016dd6:	469a      	mov	sl, r3
 8016dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ddc:	b10a      	cbz	r2, 8016de2 <_vfiprintf_r+0x86>
 8016dde:	2a25      	cmp	r2, #37	@ 0x25
 8016de0:	d1f9      	bne.n	8016dd6 <_vfiprintf_r+0x7a>
 8016de2:	ebba 0b04 	subs.w	fp, sl, r4
 8016de6:	d00b      	beq.n	8016e00 <_vfiprintf_r+0xa4>
 8016de8:	465b      	mov	r3, fp
 8016dea:	4622      	mov	r2, r4
 8016dec:	4629      	mov	r1, r5
 8016dee:	4630      	mov	r0, r6
 8016df0:	f7ff ffa2 	bl	8016d38 <__sfputs_r>
 8016df4:	3001      	adds	r0, #1
 8016df6:	f000 80a7 	beq.w	8016f48 <_vfiprintf_r+0x1ec>
 8016dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016dfc:	445a      	add	r2, fp
 8016dfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e00:	f89a 3000 	ldrb.w	r3, [sl]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	f000 809f 	beq.w	8016f48 <_vfiprintf_r+0x1ec>
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e14:	f10a 0a01 	add.w	sl, sl, #1
 8016e18:	9304      	str	r3, [sp, #16]
 8016e1a:	9307      	str	r3, [sp, #28]
 8016e1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e20:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e22:	4654      	mov	r4, sl
 8016e24:	2205      	movs	r2, #5
 8016e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e2a:	4853      	ldr	r0, [pc, #332]	@ (8016f78 <_vfiprintf_r+0x21c>)
 8016e2c:	f7e9 f9e8 	bl	8000200 <memchr>
 8016e30:	9a04      	ldr	r2, [sp, #16]
 8016e32:	b9d8      	cbnz	r0, 8016e6c <_vfiprintf_r+0x110>
 8016e34:	06d1      	lsls	r1, r2, #27
 8016e36:	bf44      	itt	mi
 8016e38:	2320      	movmi	r3, #32
 8016e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e3e:	0713      	lsls	r3, r2, #28
 8016e40:	bf44      	itt	mi
 8016e42:	232b      	movmi	r3, #43	@ 0x2b
 8016e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e48:	f89a 3000 	ldrb.w	r3, [sl]
 8016e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e4e:	d015      	beq.n	8016e7c <_vfiprintf_r+0x120>
 8016e50:	9a07      	ldr	r2, [sp, #28]
 8016e52:	4654      	mov	r4, sl
 8016e54:	2000      	movs	r0, #0
 8016e56:	f04f 0c0a 	mov.w	ip, #10
 8016e5a:	4621      	mov	r1, r4
 8016e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e60:	3b30      	subs	r3, #48	@ 0x30
 8016e62:	2b09      	cmp	r3, #9
 8016e64:	d94b      	bls.n	8016efe <_vfiprintf_r+0x1a2>
 8016e66:	b1b0      	cbz	r0, 8016e96 <_vfiprintf_r+0x13a>
 8016e68:	9207      	str	r2, [sp, #28]
 8016e6a:	e014      	b.n	8016e96 <_vfiprintf_r+0x13a>
 8016e6c:	eba0 0308 	sub.w	r3, r0, r8
 8016e70:	fa09 f303 	lsl.w	r3, r9, r3
 8016e74:	4313      	orrs	r3, r2
 8016e76:	9304      	str	r3, [sp, #16]
 8016e78:	46a2      	mov	sl, r4
 8016e7a:	e7d2      	b.n	8016e22 <_vfiprintf_r+0xc6>
 8016e7c:	9b03      	ldr	r3, [sp, #12]
 8016e7e:	1d19      	adds	r1, r3, #4
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	9103      	str	r1, [sp, #12]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	bfbb      	ittet	lt
 8016e88:	425b      	neglt	r3, r3
 8016e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8016e8e:	9307      	strge	r3, [sp, #28]
 8016e90:	9307      	strlt	r3, [sp, #28]
 8016e92:	bfb8      	it	lt
 8016e94:	9204      	strlt	r2, [sp, #16]
 8016e96:	7823      	ldrb	r3, [r4, #0]
 8016e98:	2b2e      	cmp	r3, #46	@ 0x2e
 8016e9a:	d10a      	bne.n	8016eb2 <_vfiprintf_r+0x156>
 8016e9c:	7863      	ldrb	r3, [r4, #1]
 8016e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ea0:	d132      	bne.n	8016f08 <_vfiprintf_r+0x1ac>
 8016ea2:	9b03      	ldr	r3, [sp, #12]
 8016ea4:	1d1a      	adds	r2, r3, #4
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	9203      	str	r2, [sp, #12]
 8016eaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016eae:	3402      	adds	r4, #2
 8016eb0:	9305      	str	r3, [sp, #20]
 8016eb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016f88 <_vfiprintf_r+0x22c>
 8016eb6:	7821      	ldrb	r1, [r4, #0]
 8016eb8:	2203      	movs	r2, #3
 8016eba:	4650      	mov	r0, sl
 8016ebc:	f7e9 f9a0 	bl	8000200 <memchr>
 8016ec0:	b138      	cbz	r0, 8016ed2 <_vfiprintf_r+0x176>
 8016ec2:	9b04      	ldr	r3, [sp, #16]
 8016ec4:	eba0 000a 	sub.w	r0, r0, sl
 8016ec8:	2240      	movs	r2, #64	@ 0x40
 8016eca:	4082      	lsls	r2, r0
 8016ecc:	4313      	orrs	r3, r2
 8016ece:	3401      	adds	r4, #1
 8016ed0:	9304      	str	r3, [sp, #16]
 8016ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ed6:	4829      	ldr	r0, [pc, #164]	@ (8016f7c <_vfiprintf_r+0x220>)
 8016ed8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016edc:	2206      	movs	r2, #6
 8016ede:	f7e9 f98f 	bl	8000200 <memchr>
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	d03f      	beq.n	8016f66 <_vfiprintf_r+0x20a>
 8016ee6:	4b26      	ldr	r3, [pc, #152]	@ (8016f80 <_vfiprintf_r+0x224>)
 8016ee8:	bb1b      	cbnz	r3, 8016f32 <_vfiprintf_r+0x1d6>
 8016eea:	9b03      	ldr	r3, [sp, #12]
 8016eec:	3307      	adds	r3, #7
 8016eee:	f023 0307 	bic.w	r3, r3, #7
 8016ef2:	3308      	adds	r3, #8
 8016ef4:	9303      	str	r3, [sp, #12]
 8016ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ef8:	443b      	add	r3, r7
 8016efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016efc:	e76a      	b.n	8016dd4 <_vfiprintf_r+0x78>
 8016efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f02:	460c      	mov	r4, r1
 8016f04:	2001      	movs	r0, #1
 8016f06:	e7a8      	b.n	8016e5a <_vfiprintf_r+0xfe>
 8016f08:	2300      	movs	r3, #0
 8016f0a:	3401      	adds	r4, #1
 8016f0c:	9305      	str	r3, [sp, #20]
 8016f0e:	4619      	mov	r1, r3
 8016f10:	f04f 0c0a 	mov.w	ip, #10
 8016f14:	4620      	mov	r0, r4
 8016f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f1a:	3a30      	subs	r2, #48	@ 0x30
 8016f1c:	2a09      	cmp	r2, #9
 8016f1e:	d903      	bls.n	8016f28 <_vfiprintf_r+0x1cc>
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d0c6      	beq.n	8016eb2 <_vfiprintf_r+0x156>
 8016f24:	9105      	str	r1, [sp, #20]
 8016f26:	e7c4      	b.n	8016eb2 <_vfiprintf_r+0x156>
 8016f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f2c:	4604      	mov	r4, r0
 8016f2e:	2301      	movs	r3, #1
 8016f30:	e7f0      	b.n	8016f14 <_vfiprintf_r+0x1b8>
 8016f32:	ab03      	add	r3, sp, #12
 8016f34:	9300      	str	r3, [sp, #0]
 8016f36:	462a      	mov	r2, r5
 8016f38:	4b12      	ldr	r3, [pc, #72]	@ (8016f84 <_vfiprintf_r+0x228>)
 8016f3a:	a904      	add	r1, sp, #16
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	f7fd fbdb 	bl	80146f8 <_printf_float>
 8016f42:	4607      	mov	r7, r0
 8016f44:	1c78      	adds	r0, r7, #1
 8016f46:	d1d6      	bne.n	8016ef6 <_vfiprintf_r+0x19a>
 8016f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016f4a:	07d9      	lsls	r1, r3, #31
 8016f4c:	d405      	bmi.n	8016f5a <_vfiprintf_r+0x1fe>
 8016f4e:	89ab      	ldrh	r3, [r5, #12]
 8016f50:	059a      	lsls	r2, r3, #22
 8016f52:	d402      	bmi.n	8016f5a <_vfiprintf_r+0x1fe>
 8016f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016f56:	f7fe f92b 	bl	80151b0 <__retarget_lock_release_recursive>
 8016f5a:	89ab      	ldrh	r3, [r5, #12]
 8016f5c:	065b      	lsls	r3, r3, #25
 8016f5e:	f53f af1f 	bmi.w	8016da0 <_vfiprintf_r+0x44>
 8016f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f64:	e71e      	b.n	8016da4 <_vfiprintf_r+0x48>
 8016f66:	ab03      	add	r3, sp, #12
 8016f68:	9300      	str	r3, [sp, #0]
 8016f6a:	462a      	mov	r2, r5
 8016f6c:	4b05      	ldr	r3, [pc, #20]	@ (8016f84 <_vfiprintf_r+0x228>)
 8016f6e:	a904      	add	r1, sp, #16
 8016f70:	4630      	mov	r0, r6
 8016f72:	f7fd fe59 	bl	8014c28 <_printf_i>
 8016f76:	e7e4      	b.n	8016f42 <_vfiprintf_r+0x1e6>
 8016f78:	08017858 	.word	0x08017858
 8016f7c:	08017862 	.word	0x08017862
 8016f80:	080146f9 	.word	0x080146f9
 8016f84:	08016d39 	.word	0x08016d39
 8016f88:	0801785e 	.word	0x0801785e

08016f8c <__swbuf_r>:
 8016f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f8e:	460e      	mov	r6, r1
 8016f90:	4614      	mov	r4, r2
 8016f92:	4605      	mov	r5, r0
 8016f94:	b118      	cbz	r0, 8016f9e <__swbuf_r+0x12>
 8016f96:	6a03      	ldr	r3, [r0, #32]
 8016f98:	b90b      	cbnz	r3, 8016f9e <__swbuf_r+0x12>
 8016f9a:	f7fd fff1 	bl	8014f80 <__sinit>
 8016f9e:	69a3      	ldr	r3, [r4, #24]
 8016fa0:	60a3      	str	r3, [r4, #8]
 8016fa2:	89a3      	ldrh	r3, [r4, #12]
 8016fa4:	071a      	lsls	r2, r3, #28
 8016fa6:	d501      	bpl.n	8016fac <__swbuf_r+0x20>
 8016fa8:	6923      	ldr	r3, [r4, #16]
 8016faa:	b943      	cbnz	r3, 8016fbe <__swbuf_r+0x32>
 8016fac:	4621      	mov	r1, r4
 8016fae:	4628      	mov	r0, r5
 8016fb0:	f000 f82a 	bl	8017008 <__swsetup_r>
 8016fb4:	b118      	cbz	r0, 8016fbe <__swbuf_r+0x32>
 8016fb6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016fba:	4638      	mov	r0, r7
 8016fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fbe:	6823      	ldr	r3, [r4, #0]
 8016fc0:	6922      	ldr	r2, [r4, #16]
 8016fc2:	1a98      	subs	r0, r3, r2
 8016fc4:	6963      	ldr	r3, [r4, #20]
 8016fc6:	b2f6      	uxtb	r6, r6
 8016fc8:	4283      	cmp	r3, r0
 8016fca:	4637      	mov	r7, r6
 8016fcc:	dc05      	bgt.n	8016fda <__swbuf_r+0x4e>
 8016fce:	4621      	mov	r1, r4
 8016fd0:	4628      	mov	r0, r5
 8016fd2:	f7ff fda7 	bl	8016b24 <_fflush_r>
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	d1ed      	bne.n	8016fb6 <__swbuf_r+0x2a>
 8016fda:	68a3      	ldr	r3, [r4, #8]
 8016fdc:	3b01      	subs	r3, #1
 8016fde:	60a3      	str	r3, [r4, #8]
 8016fe0:	6823      	ldr	r3, [r4, #0]
 8016fe2:	1c5a      	adds	r2, r3, #1
 8016fe4:	6022      	str	r2, [r4, #0]
 8016fe6:	701e      	strb	r6, [r3, #0]
 8016fe8:	6962      	ldr	r2, [r4, #20]
 8016fea:	1c43      	adds	r3, r0, #1
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d004      	beq.n	8016ffa <__swbuf_r+0x6e>
 8016ff0:	89a3      	ldrh	r3, [r4, #12]
 8016ff2:	07db      	lsls	r3, r3, #31
 8016ff4:	d5e1      	bpl.n	8016fba <__swbuf_r+0x2e>
 8016ff6:	2e0a      	cmp	r6, #10
 8016ff8:	d1df      	bne.n	8016fba <__swbuf_r+0x2e>
 8016ffa:	4621      	mov	r1, r4
 8016ffc:	4628      	mov	r0, r5
 8016ffe:	f7ff fd91 	bl	8016b24 <_fflush_r>
 8017002:	2800      	cmp	r0, #0
 8017004:	d0d9      	beq.n	8016fba <__swbuf_r+0x2e>
 8017006:	e7d6      	b.n	8016fb6 <__swbuf_r+0x2a>

08017008 <__swsetup_r>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4b29      	ldr	r3, [pc, #164]	@ (80170b0 <__swsetup_r+0xa8>)
 801700c:	4605      	mov	r5, r0
 801700e:	6818      	ldr	r0, [r3, #0]
 8017010:	460c      	mov	r4, r1
 8017012:	b118      	cbz	r0, 801701c <__swsetup_r+0x14>
 8017014:	6a03      	ldr	r3, [r0, #32]
 8017016:	b90b      	cbnz	r3, 801701c <__swsetup_r+0x14>
 8017018:	f7fd ffb2 	bl	8014f80 <__sinit>
 801701c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017020:	0719      	lsls	r1, r3, #28
 8017022:	d422      	bmi.n	801706a <__swsetup_r+0x62>
 8017024:	06da      	lsls	r2, r3, #27
 8017026:	d407      	bmi.n	8017038 <__swsetup_r+0x30>
 8017028:	2209      	movs	r2, #9
 801702a:	602a      	str	r2, [r5, #0]
 801702c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017030:	81a3      	strh	r3, [r4, #12]
 8017032:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017036:	e033      	b.n	80170a0 <__swsetup_r+0x98>
 8017038:	0758      	lsls	r0, r3, #29
 801703a:	d512      	bpl.n	8017062 <__swsetup_r+0x5a>
 801703c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801703e:	b141      	cbz	r1, 8017052 <__swsetup_r+0x4a>
 8017040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017044:	4299      	cmp	r1, r3
 8017046:	d002      	beq.n	801704e <__swsetup_r+0x46>
 8017048:	4628      	mov	r0, r5
 801704a:	f7fe ff0d 	bl	8015e68 <_free_r>
 801704e:	2300      	movs	r3, #0
 8017050:	6363      	str	r3, [r4, #52]	@ 0x34
 8017052:	89a3      	ldrh	r3, [r4, #12]
 8017054:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017058:	81a3      	strh	r3, [r4, #12]
 801705a:	2300      	movs	r3, #0
 801705c:	6063      	str	r3, [r4, #4]
 801705e:	6923      	ldr	r3, [r4, #16]
 8017060:	6023      	str	r3, [r4, #0]
 8017062:	89a3      	ldrh	r3, [r4, #12]
 8017064:	f043 0308 	orr.w	r3, r3, #8
 8017068:	81a3      	strh	r3, [r4, #12]
 801706a:	6923      	ldr	r3, [r4, #16]
 801706c:	b94b      	cbnz	r3, 8017082 <__swsetup_r+0x7a>
 801706e:	89a3      	ldrh	r3, [r4, #12]
 8017070:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017078:	d003      	beq.n	8017082 <__swsetup_r+0x7a>
 801707a:	4621      	mov	r1, r4
 801707c:	4628      	mov	r0, r5
 801707e:	f000 f883 	bl	8017188 <__smakebuf_r>
 8017082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017086:	f013 0201 	ands.w	r2, r3, #1
 801708a:	d00a      	beq.n	80170a2 <__swsetup_r+0x9a>
 801708c:	2200      	movs	r2, #0
 801708e:	60a2      	str	r2, [r4, #8]
 8017090:	6962      	ldr	r2, [r4, #20]
 8017092:	4252      	negs	r2, r2
 8017094:	61a2      	str	r2, [r4, #24]
 8017096:	6922      	ldr	r2, [r4, #16]
 8017098:	b942      	cbnz	r2, 80170ac <__swsetup_r+0xa4>
 801709a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801709e:	d1c5      	bne.n	801702c <__swsetup_r+0x24>
 80170a0:	bd38      	pop	{r3, r4, r5, pc}
 80170a2:	0799      	lsls	r1, r3, #30
 80170a4:	bf58      	it	pl
 80170a6:	6962      	ldrpl	r2, [r4, #20]
 80170a8:	60a2      	str	r2, [r4, #8]
 80170aa:	e7f4      	b.n	8017096 <__swsetup_r+0x8e>
 80170ac:	2000      	movs	r0, #0
 80170ae:	e7f7      	b.n	80170a0 <__swsetup_r+0x98>
 80170b0:	20000310 	.word	0x20000310

080170b4 <_raise_r>:
 80170b4:	291f      	cmp	r1, #31
 80170b6:	b538      	push	{r3, r4, r5, lr}
 80170b8:	4605      	mov	r5, r0
 80170ba:	460c      	mov	r4, r1
 80170bc:	d904      	bls.n	80170c8 <_raise_r+0x14>
 80170be:	2316      	movs	r3, #22
 80170c0:	6003      	str	r3, [r0, #0]
 80170c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170c6:	bd38      	pop	{r3, r4, r5, pc}
 80170c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80170ca:	b112      	cbz	r2, 80170d2 <_raise_r+0x1e>
 80170cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80170d0:	b94b      	cbnz	r3, 80170e6 <_raise_r+0x32>
 80170d2:	4628      	mov	r0, r5
 80170d4:	f000 f830 	bl	8017138 <_getpid_r>
 80170d8:	4622      	mov	r2, r4
 80170da:	4601      	mov	r1, r0
 80170dc:	4628      	mov	r0, r5
 80170de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170e2:	f000 b817 	b.w	8017114 <_kill_r>
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	d00a      	beq.n	8017100 <_raise_r+0x4c>
 80170ea:	1c59      	adds	r1, r3, #1
 80170ec:	d103      	bne.n	80170f6 <_raise_r+0x42>
 80170ee:	2316      	movs	r3, #22
 80170f0:	6003      	str	r3, [r0, #0]
 80170f2:	2001      	movs	r0, #1
 80170f4:	e7e7      	b.n	80170c6 <_raise_r+0x12>
 80170f6:	2100      	movs	r1, #0
 80170f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80170fc:	4620      	mov	r0, r4
 80170fe:	4798      	blx	r3
 8017100:	2000      	movs	r0, #0
 8017102:	e7e0      	b.n	80170c6 <_raise_r+0x12>

08017104 <raise>:
 8017104:	4b02      	ldr	r3, [pc, #8]	@ (8017110 <raise+0xc>)
 8017106:	4601      	mov	r1, r0
 8017108:	6818      	ldr	r0, [r3, #0]
 801710a:	f7ff bfd3 	b.w	80170b4 <_raise_r>
 801710e:	bf00      	nop
 8017110:	20000310 	.word	0x20000310

08017114 <_kill_r>:
 8017114:	b538      	push	{r3, r4, r5, lr}
 8017116:	4d07      	ldr	r5, [pc, #28]	@ (8017134 <_kill_r+0x20>)
 8017118:	2300      	movs	r3, #0
 801711a:	4604      	mov	r4, r0
 801711c:	4608      	mov	r0, r1
 801711e:	4611      	mov	r1, r2
 8017120:	602b      	str	r3, [r5, #0]
 8017122:	f7e9 ff1d 	bl	8000f60 <_kill>
 8017126:	1c43      	adds	r3, r0, #1
 8017128:	d102      	bne.n	8017130 <_kill_r+0x1c>
 801712a:	682b      	ldr	r3, [r5, #0]
 801712c:	b103      	cbz	r3, 8017130 <_kill_r+0x1c>
 801712e:	6023      	str	r3, [r4, #0]
 8017130:	bd38      	pop	{r3, r4, r5, pc}
 8017132:	bf00      	nop
 8017134:	20006a34 	.word	0x20006a34

08017138 <_getpid_r>:
 8017138:	f7e9 bf10 	b.w	8000f5c <_getpid>

0801713c <__swhatbuf_r>:
 801713c:	b570      	push	{r4, r5, r6, lr}
 801713e:	460c      	mov	r4, r1
 8017140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017144:	2900      	cmp	r1, #0
 8017146:	b096      	sub	sp, #88	@ 0x58
 8017148:	4615      	mov	r5, r2
 801714a:	461e      	mov	r6, r3
 801714c:	da0d      	bge.n	801716a <__swhatbuf_r+0x2e>
 801714e:	89a3      	ldrh	r3, [r4, #12]
 8017150:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017154:	f04f 0100 	mov.w	r1, #0
 8017158:	bf14      	ite	ne
 801715a:	2340      	movne	r3, #64	@ 0x40
 801715c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017160:	2000      	movs	r0, #0
 8017162:	6031      	str	r1, [r6, #0]
 8017164:	602b      	str	r3, [r5, #0]
 8017166:	b016      	add	sp, #88	@ 0x58
 8017168:	bd70      	pop	{r4, r5, r6, pc}
 801716a:	466a      	mov	r2, sp
 801716c:	f000 f848 	bl	8017200 <_fstat_r>
 8017170:	2800      	cmp	r0, #0
 8017172:	dbec      	blt.n	801714e <__swhatbuf_r+0x12>
 8017174:	9901      	ldr	r1, [sp, #4]
 8017176:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801717a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801717e:	4259      	negs	r1, r3
 8017180:	4159      	adcs	r1, r3
 8017182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017186:	e7eb      	b.n	8017160 <__swhatbuf_r+0x24>

08017188 <__smakebuf_r>:
 8017188:	898b      	ldrh	r3, [r1, #12]
 801718a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801718c:	079d      	lsls	r5, r3, #30
 801718e:	4606      	mov	r6, r0
 8017190:	460c      	mov	r4, r1
 8017192:	d507      	bpl.n	80171a4 <__smakebuf_r+0x1c>
 8017194:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017198:	6023      	str	r3, [r4, #0]
 801719a:	6123      	str	r3, [r4, #16]
 801719c:	2301      	movs	r3, #1
 801719e:	6163      	str	r3, [r4, #20]
 80171a0:	b003      	add	sp, #12
 80171a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171a4:	ab01      	add	r3, sp, #4
 80171a6:	466a      	mov	r2, sp
 80171a8:	f7ff ffc8 	bl	801713c <__swhatbuf_r>
 80171ac:	9f00      	ldr	r7, [sp, #0]
 80171ae:	4605      	mov	r5, r0
 80171b0:	4639      	mov	r1, r7
 80171b2:	4630      	mov	r0, r6
 80171b4:	f7fe fecc 	bl	8015f50 <_malloc_r>
 80171b8:	b948      	cbnz	r0, 80171ce <__smakebuf_r+0x46>
 80171ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171be:	059a      	lsls	r2, r3, #22
 80171c0:	d4ee      	bmi.n	80171a0 <__smakebuf_r+0x18>
 80171c2:	f023 0303 	bic.w	r3, r3, #3
 80171c6:	f043 0302 	orr.w	r3, r3, #2
 80171ca:	81a3      	strh	r3, [r4, #12]
 80171cc:	e7e2      	b.n	8017194 <__smakebuf_r+0xc>
 80171ce:	89a3      	ldrh	r3, [r4, #12]
 80171d0:	6020      	str	r0, [r4, #0]
 80171d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171d6:	81a3      	strh	r3, [r4, #12]
 80171d8:	9b01      	ldr	r3, [sp, #4]
 80171da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80171de:	b15b      	cbz	r3, 80171f8 <__smakebuf_r+0x70>
 80171e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80171e4:	4630      	mov	r0, r6
 80171e6:	f000 f81d 	bl	8017224 <_isatty_r>
 80171ea:	b128      	cbz	r0, 80171f8 <__smakebuf_r+0x70>
 80171ec:	89a3      	ldrh	r3, [r4, #12]
 80171ee:	f023 0303 	bic.w	r3, r3, #3
 80171f2:	f043 0301 	orr.w	r3, r3, #1
 80171f6:	81a3      	strh	r3, [r4, #12]
 80171f8:	89a3      	ldrh	r3, [r4, #12]
 80171fa:	431d      	orrs	r5, r3
 80171fc:	81a5      	strh	r5, [r4, #12]
 80171fe:	e7cf      	b.n	80171a0 <__smakebuf_r+0x18>

08017200 <_fstat_r>:
 8017200:	b538      	push	{r3, r4, r5, lr}
 8017202:	4d07      	ldr	r5, [pc, #28]	@ (8017220 <_fstat_r+0x20>)
 8017204:	2300      	movs	r3, #0
 8017206:	4604      	mov	r4, r0
 8017208:	4608      	mov	r0, r1
 801720a:	4611      	mov	r1, r2
 801720c:	602b      	str	r3, [r5, #0]
 801720e:	f7e9 fec7 	bl	8000fa0 <_fstat>
 8017212:	1c43      	adds	r3, r0, #1
 8017214:	d102      	bne.n	801721c <_fstat_r+0x1c>
 8017216:	682b      	ldr	r3, [r5, #0]
 8017218:	b103      	cbz	r3, 801721c <_fstat_r+0x1c>
 801721a:	6023      	str	r3, [r4, #0]
 801721c:	bd38      	pop	{r3, r4, r5, pc}
 801721e:	bf00      	nop
 8017220:	20006a34 	.word	0x20006a34

08017224 <_isatty_r>:
 8017224:	b538      	push	{r3, r4, r5, lr}
 8017226:	4d06      	ldr	r5, [pc, #24]	@ (8017240 <_isatty_r+0x1c>)
 8017228:	2300      	movs	r3, #0
 801722a:	4604      	mov	r4, r0
 801722c:	4608      	mov	r0, r1
 801722e:	602b      	str	r3, [r5, #0]
 8017230:	f7e9 febc 	bl	8000fac <_isatty>
 8017234:	1c43      	adds	r3, r0, #1
 8017236:	d102      	bne.n	801723e <_isatty_r+0x1a>
 8017238:	682b      	ldr	r3, [r5, #0]
 801723a:	b103      	cbz	r3, 801723e <_isatty_r+0x1a>
 801723c:	6023      	str	r3, [r4, #0]
 801723e:	bd38      	pop	{r3, r4, r5, pc}
 8017240:	20006a34 	.word	0x20006a34

08017244 <_init>:
 8017244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017246:	bf00      	nop
 8017248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801724a:	bc08      	pop	{r3}
 801724c:	469e      	mov	lr, r3
 801724e:	4770      	bx	lr

08017250 <_fini>:
 8017250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017252:	bf00      	nop
 8017254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017256:	bc08      	pop	{r3}
 8017258:	469e      	mov	lr, r3
 801725a:	4770      	bx	lr
 801725c:	0000      	movs	r0, r0
	...
