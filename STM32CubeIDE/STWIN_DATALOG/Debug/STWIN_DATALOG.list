
STWIN_DATALOG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015200  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080153c0  080153c0  000163c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158a8  080158a8  000174d0  2**0
                  CONTENTS
  4 .ARM          00000008  080158a8  080158a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080158b0  080158b0  000174d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080158b0  080158b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080158b8  080158b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d0  20000000  080158c0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006484  200004d0  08015d90  000174d0  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  20006954  08015d90  00017954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000174d0  2**0
                  CONTENTS, READONLY
 12 .debug_line   000827c6  00000000  00000000  00017500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000011a  00000000  00000000  00099cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000b0cc1  00000000  00000000  00099de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000d91b  00000000  00000000  0014aaa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004da8  00000000  00000000  001583c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170545  00000000  00000000  0015d168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000b4c1  00000000  00000000  002cd6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0005ecee  00000000  00000000  002d8b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00042019  00000000  00000000  0033785c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00379875  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00011b20  00000000  00000000  003798b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200004d0 	.word	0x200004d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080153a4 	.word	0x080153a4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200004d4 	.word	0x200004d4
 80001fc:	080153a4 	.word	0x080153a4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ecc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ede:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ee6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <LoopForever+0x16>)
	cmp	r2, r3
 8000eee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef2:	f006 f98b 	bl	800720c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f012 fb8d 	bl	8013614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f000 f97d 	bl	80011f8 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f00:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000f04:	080158c0 	.word	0x080158c0
	ldr	r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f0c:	200004d0 	.word	0x200004d0
	ldr	r2, =_sbss
 8000f10:	200004d0 	.word	0x200004d0
	ldr	r3, = _ebss
 8000f14:	20006954 	.word	0x20006954

08000f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_IRQHandler>
	...

08000f1c <_sbrk>:
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 8000f1c:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <_sbrk+0x38>)
{
 8000f1e:	b508      	push	{r3, lr}
 8000f20:	4603      	mov	r3, r0
	if (heap_end == 0)
 8000f22:	6808      	ldr	r0, [r1, #0]
 8000f24:	b158      	cbz	r0, 8000f3e <_sbrk+0x22>

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000f26:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000f2a:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000f2c:	f8d2 2d08 	ldr.w	r2, [r2, #3336]	@ 0xd08
 8000f30:	6812      	ldr	r2, [r2, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8000f32:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d804      	bhi.n	8000f44 <_sbrk+0x28>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000f3a:	600b      	str	r3, [r1, #0]

	return (caddr_t) prev_heap_end;
}
 8000f3c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <_sbrk+0x3c>)
 8000f40:	6008      	str	r0, [r1, #0]
 8000f42:	e7f0      	b.n	8000f26 <_sbrk+0xa>
		errno = ENOMEM;
 8000f44:	f012 fb60 	bl	8013608 <__errno>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f50:	bd08      	pop	{r3, pc}
 8000f52:	bf00      	nop
 8000f54:	200004ec 	.word	0x200004ec
 8000f58:	20006958 	.word	0x20006958

08000f5c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <_kill>:

int _kill(int pid, int sig)
{
 8000f60:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f62:	f012 fb51 	bl	8013608 <__errno>
 8000f66:	2316      	movs	r3, #22
 8000f68:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6e:	bd08      	pop	{r3, pc}

08000f70 <_exit>:

void _exit (int status)
{
 8000f70:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f72:	f012 fb49 	bl	8013608 <__errno>
 8000f76:	2316      	movs	r3, #22
 8000f78:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8000f7a:	e7fe      	b.n	8000f7a <_exit+0xa>

08000f7c <_write>:
}

int _write(int file, char *ptr, int len)
{
 8000f7c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	1e16      	subs	r6, r2, #0
 8000f80:	dd07      	ble.n	8000f92 <_write+0x16>
 8000f82:	460c      	mov	r4, r1
 8000f84:	198d      	adds	r5, r1, r6
		{
		   __io_putchar( *ptr++ );
 8000f86:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000f8a:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d1f9      	bne.n	8000f86 <_write+0xa>
		}
	return len;
}
 8000f92:	4630      	mov	r0, r6
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	bf00      	nop

08000f98 <_close>:

int _close(int file)
{
	return -1;
}
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa4:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000fac:	2001      	movs	r0, #1
 8000fae:	4770      	bx	lr

08000fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <_read>:

int _read(int file, char *ptr, int len)
{
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	460c      	mov	r4, r1
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	7020      	strb	r0, [r4, #0]
	return 1;
}
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	bf00      	nop

08000fc4 <DATALOG_SD_Init>:
  * @brief  Start SD-Card demo
  * @param  None
  * @retval None
  */
void DATALOG_SD_Init(void)
{
 8000fc4:	b508      	push	{r3, lr}
  BSP_SD_Detect_Init();
 8000fc6:	f006 f853 	bl	8007070 <BSP_SD_Detect_Init>

      
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000fca:	490d      	ldr	r1, [pc, #52]	@ (8001000 <DATALOG_SD_Init+0x3c>)
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <DATALOG_SD_Init+0x40>)
 8000fce:	f00f f961 	bl	8010294 <FATFS_LinkDriver>
 8000fd2:	b100      	cbz	r0, 8000fd6 <DATALOG_SD_Init+0x12>
        BSP_LED_Off(LED1);
        HAL_Delay(100);
      }
    }
  }
}
 8000fd4:	bd08      	pop	{r3, pc}
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8000fd6:	490a      	ldr	r1, [pc, #40]	@ (8001000 <DATALOG_SD_Init+0x3c>)
 8000fd8:	4602      	mov	r2, r0
 8000fda:	1d08      	adds	r0, r1, #4
 8000fdc:	f00f f916 	bl	801020c <f_mount>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d0f7      	beq.n	8000fd4 <DATALOG_SD_Init+0x10>
        BSP_LED_On(LED1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f004 fcfd 	bl	80059e4 <BSP_LED_On>
        HAL_Delay(500);
 8000fea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fee:	f006 f97d 	bl	80072ec <HAL_Delay>
        BSP_LED_Off(LED1);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f004 fd04 	bl	8005a00 <BSP_LED_Off>
        HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	@ 0x64
 8000ffa:	f006 f977 	bl	80072ec <HAL_Delay>
      while(1)
 8000ffe:	e7f1      	b.n	8000fe4 <DATALOG_SD_Init+0x20>
 8001000:	200004f0 	.word	0x200004f0
 8001004:	080154a0 	.word	0x080154a0

08001008 <MX_X_CUBE_MEMS1_Init>:
}



void MX_X_CUBE_MEMS1_Init(void)
{
 8001008:	b508      	push	{r3, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
  * @retval None
  */
void MX_DataLogTerminal_Init(void)
{
  BSP_MOTION_SENSOR_Init(IIS2MDC_0, MOTION_MAGNETO);
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_ODR);
 800100e:	ed9f 8a22 	vldr	s16, [pc, #136]	@ 8001098 <MX_X_CUBE_MEMS1_Init+0x90>
  Sensor_IO_SPI_CS_Init_All();
 8001012:	f004 fd03 	bl	8005a1c <Sensor_IO_SPI_CS_Init_All>
  BSP_MOTION_SENSOR_Init(IIS2MDC_0, MOTION_MAGNETO);
 8001016:	2104      	movs	r1, #4
 8001018:	2001      	movs	r0, #1
 800101a:	f005 fd05 	bl	8006a28 <BSP_MOTION_SENSOR_Init>
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_ODR);
 800101e:	eeb0 0a48 	vmov.f32	s0, s16
 8001022:	2104      	movs	r1, #4
 8001024:	2001      	movs	r0, #1
 8001026:	f005 ffcb 	bl	8006fc0 <BSP_MOTION_SENSOR_SetOutputDataRate>
  BSP_MOTION_SENSOR_SetFullScale(IIS2MDC_0, MOTION_MAGNETO, IIS2MDC_MAG_FS);
 800102a:	2232      	movs	r2, #50	@ 0x32
 800102c:	2104      	movs	r1, #4
 800102e:	2001      	movs	r0, #1
 8001030:	f005 fff0 	bl	8007014 <BSP_MOTION_SENSOR_SetFullScale>

  // iis3dwb
  BSP_MOTION_SENSOR_Init(IIS3DWB_0, MOTION_ACCELERO);
 8001034:	2102      	movs	r1, #2
 8001036:	4608      	mov	r0, r1
 8001038:	f005 fcf6 	bl	8006a28 <BSP_MOTION_SENSOR_Init>
  BSP_MOTION_SENSOR_SetOutputDataRate(IIS3DWB_0, MOTION_ACCELERO, IIS3DWB_ACC_ODR);
 800103c:	2102      	movs	r1, #2
 800103e:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800109c <MX_X_CUBE_MEMS1_Init+0x94>
 8001042:	4608      	mov	r0, r1
 8001044:	f005 ffbc 	bl	8006fc0 <BSP_MOTION_SENSOR_SetOutputDataRate>
  BSP_MOTION_SENSOR_SetFullScale(IIS3DWB_0, MOTION_ACCELERO, IIS3DWB_ACC_FS);
 8001048:	2202      	movs	r2, #2
 800104a:	4611      	mov	r1, r2
 800104c:	4610      	mov	r0, r2
 800104e:	f005 ffe1 	bl	8007014 <BSP_MOTION_SENSOR_SetFullScale>
  BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DHCX_0, MOTION_GYRO, ISM330DHC_GYRO_ODR);
  BSP_MOTION_SENSOR_SetFullScale(ISM330DHCX_0, MOTION_GYRO, ISM330DHC_GYRO_FS);
  
#endif
  
  BSP_ENV_SENSOR_Init(HTS221_0, ENV_HUMIDITY);
 8001052:	2104      	movs	r1, #4
 8001054:	2000      	movs	r0, #0
 8001056:	f005 f861 	bl	800611c <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_SetOutputDataRate(HTS221_0, ENV_HUMIDITY, HTS221_ODR);
 800105a:	eeb2 0a09 	vmov.f32	s0, #41	@ 0x41480000  12.5
 800105e:	2104      	movs	r1, #4
 8001060:	2000      	movs	r0, #0
 8001062:	f005 fab9 	bl	80065d8 <BSP_ENV_SENSOR_SetOutputDataRate>
 
  BSP_ENV_SENSOR_Init(LPS22HH_0, ENV_PRESSURE);
 8001066:	2102      	movs	r1, #2
 8001068:	2001      	movs	r0, #1
 800106a:	f005 f857 	bl	800611c <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_SetOutputDataRate(LPS22HH_0, ENV_PRESSURE, LPS22HH_ODR);
 800106e:	eeb0 0a48 	vmov.f32	s0, s16
 8001072:	2102      	movs	r1, #2
 8001074:	2001      	movs	r0, #1
 8001076:	f005 faaf 	bl	80065d8 <BSP_ENV_SENSOR_SetOutputDataRate>
  
  BSP_ENV_SENSOR_Init(STTS751_0, ENV_TEMPERATURE);
 800107a:	2101      	movs	r1, #1
 800107c:	2002      	movs	r0, #2
 800107e:	f005 f84d 	bl	800611c <BSP_ENV_SENSOR_Init>
}
 8001082:	ecbd 8b02 	vpop	{d8}
  BSP_ENV_SENSOR_SetOutputDataRate(STTS751_0, ENV_TEMPERATURE, STTS751_ODR);
 8001086:	eeb3 0a00 	vmov.f32	s0, #48	@ 0x41800000  16.0
}
 800108a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_ENV_SENSOR_SetOutputDataRate(STTS751_0, ENV_TEMPERATURE, STTS751_ODR);
 800108e:	2101      	movs	r1, #1
 8001090:	2002      	movs	r0, #2
 8001092:	f005 baa1 	b.w	80065d8 <BSP_ENV_SENSOR_SetOutputDataRate>
 8001096:	bf00      	nop
 8001098:	42480000 	.word	0x42480000
 800109c:	45d05800 	.word	0x45d05800

080010a0 <dataTimer_Callback>:

}

void dataTimer_Callback(void const *arg)
{ 
  osSemaphoreRelease(readDataSem_id);
 80010a0:	4b01      	ldr	r3, [pc, #4]	@ (80010a8 <dataTimer_Callback+0x8>)
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	f00f ba82 	b.w	80105ac <osSemaphoreRelease>
 80010a8:	20000968 	.word	0x20000968

080010ac <MX_USB_DEVICE_Init>:
{
 80010ac:	b510      	push	{r4, lr}
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80010ae:	4c09      	ldr	r4, [pc, #36]	@ (80010d4 <MX_USB_DEVICE_Init+0x28>)
 80010b0:	4909      	ldr	r1, [pc, #36]	@ (80010d8 <MX_USB_DEVICE_Init+0x2c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	4620      	mov	r0, r4
 80010b6:	f00e fa05 	bl	800f4c4 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80010ba:	4908      	ldr	r1, [pc, #32]	@ (80010dc <MX_USB_DEVICE_Init+0x30>)
 80010bc:	4620      	mov	r0, r4
 80010be:	f00e fa15 	bl	800f4ec <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80010c2:	4620      	mov	r0, r4
 80010c4:	4906      	ldr	r1, [pc, #24]	@ (80010e0 <MX_USB_DEVICE_Init+0x34>)
 80010c6:	f00e f9c7 	bl	800f458 <USBD_CDC_RegisterInterface>
  USBD_Start(&hUsbDeviceFS);
 80010ca:	4620      	mov	r0, r4
}
 80010cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80010d0:	f00e ba22 	b.w	800f518 <USBD_Start>
 80010d4:	2000096c 	.word	0x2000096c
 80010d8:	20000038 	.word	0x20000038
 80010dc:	200002c4 	.word	0x200002c4
 80010e0:	20000000 	.word	0x20000000

080010e4 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == SD_DETECT_GPIO_PIN)
 80010e4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80010e8:	d015      	beq.n	8001116 <HAL_GPIO_EXTI_Callback+0x32>
  if(GPIO_Pin == USER_BUTTON_PIN)
 80010ea:	2801      	cmp	r0, #1
{
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4604      	mov	r4, r0
  if(GPIO_Pin == USER_BUTTON_PIN)
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_EXTI_Callback+0x36>
  if (GPIO_Pin == GPIO_PIN_10)
 80010f2:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 80010f6:	d000      	beq.n	80010fa <HAL_GPIO_EXTI_Callback+0x16>
}
 80010f8:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_GetTick() - t_stwin > 4000)
 80010fa:	f006 f8f1 	bl	80072e0 <HAL_GetTick>
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001100:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8001104:	1ac0      	subs	r0, r0, r3
 8001106:	f5b0 6f7a 	cmp.w	r0, #4000	@ 0xfa0
 800110a:	d9f5      	bls.n	80010f8 <HAL_GPIO_EXTI_Callback+0x14>
}
 800110c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8001110:	2017      	movs	r0, #23
 8001112:	f004 bce7 	b.w	8005ae4 <BSP_BC_CmdSend>
      BSP_SD_DetectCallback();
 8001116:	f005 bfcf 	b.w	80070b8 <BSP_SD_DetectCallback>
    if( HAL_GetTick() - t_old > 1000 )
 800111a:	4d09      	ldr	r5, [pc, #36]	@ (8001140 <HAL_GPIO_EXTI_Callback+0x5c>)
 800111c:	f006 f8e0 	bl	80072e0 <HAL_GetTick>
 8001120:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 8001124:	1ac0      	subs	r0, r0, r3
 8001126:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800112a:	d9e5      	bls.n	80010f8 <HAL_GPIO_EXTI_Callback+0x14>
      osSemaphoreRelease(readDataSem_id);
 800112c:	6828      	ldr	r0, [r5, #0]
      MEMSInterrupt=1;
 800112e:	f885 42d8 	strb.w	r4, [r5, #728]	@ 0x2d8
      osSemaphoreRelease(readDataSem_id);
 8001132:	f00f fa3b 	bl	80105ac <osSemaphoreRelease>
      t_old= HAL_GetTick();
 8001136:	f006 f8d3 	bl	80072e0 <HAL_GetTick>
 800113a:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
}
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	20000968 	.word	0x20000968

08001144 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == STBC02_USED_TIM)
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001146:	6802      	ldr	r2, [r0, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d000      	beq.n	800114e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 800114c:	4770      	bx	lr
    BC_CmdMng();
 800114e:	f004 bd4b 	b.w	8005be8 <BC_CmdMng>
 8001152:	bf00      	nop
 8001154:	40001400 	.word	0x40001400

08001158 <SystemClock_Config>:
{
 8001158:	b530      	push	{r4, r5, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800115a:	2000      	movs	r0, #0
{
 800115c:	b0c1      	sub	sp, #260	@ 0x104
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800115e:	f008 f977 	bl	8009450 <HAL_PWREx_ControlVoltageScaling>
 8001162:	b100      	cbz	r0, 8001166 <SystemClock_Config+0xe>
    while(1);
 8001164:	e7fe      	b.n	8001164 <SystemClock_Config+0xc>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001166:	2021      	movs	r0, #33	@ 0x21
 8001168:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800116c:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001170:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001174:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001178:	221e      	movs	r2, #30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800117a:	2505      	movs	r5, #5
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001182:	e9cd 3212 	strd	r3, r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001186:	e9cd 5314 	strd	r5, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800118a:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f008 fa76 	bl	800967c <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	b100      	cbz	r0, 8001196 <SystemClock_Config+0x3e>
 8001194:	e7fe      	b.n	8001194 <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001198:	4629      	mov	r1, r5
 800119a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119c:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a2:	e9cd 2401 	strd	r2, r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a6:	f008 fd7f 	bl	8009ca8 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b100      	cbz	r0, 80011b0 <SystemClock_Config+0x58>
 80011ae:	e7fe      	b.n	80011ae <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_SDMMC1;
 80011b0:	490f      	ldr	r1, [pc, #60]	@ (80011f0 <SystemClock_Config+0x98>)
 80011b2:	9118      	str	r1, [sp, #96]	@ 0x60
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80011b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	a818      	add	r0, sp, #96	@ 0x60
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80011ba:	e9cd 3235 	strd	r3, r2, [sp, #212]	@ 0xd4
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011be:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f009 f85a 	bl	800a278 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4604      	mov	r4, r0
 80011c6:	b100      	cbz	r0, 80011ca <SystemClock_Config+0x72>
 80011c8:	e7fe      	b.n	80011c8 <SystemClock_Config+0x70>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80011ca:	f008 fe79 	bl	8009ec0 <HAL_RCC_GetHCLKFreq>
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <SystemClock_Config+0x9c>)
 80011d0:	fba3 3000 	umull	r3, r0, r3, r0
 80011d4:	0980      	lsrs	r0, r0, #6
 80011d6:	f006 fde9 	bl	8007dac <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011da:	2004      	movs	r0, #4
 80011dc:	f006 fe00 	bl	8007de0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011e0:	4622      	mov	r2, r4
 80011e2:	4621      	mov	r1, r4
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f006 fd96 	bl	8007d18 <HAL_NVIC_SetPriority>
}
 80011ec:	b041      	add	sp, #260	@ 0x104
 80011ee:	bd30      	pop	{r4, r5, pc}
 80011f0:	00082080 	.word	0x00082080
 80011f4:	10624dd3 	.word	0x10624dd3

080011f8 <main>:
{
 80011f8:	b500      	push	{lr}
 80011fa:	b087      	sub	sp, #28
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4c39      	ldr	r4, [pc, #228]	@ (80012e4 <main+0xec>)
  HAL_Init();
 80011fe:	f006 f853 	bl	80072a8 <HAL_Init>
  SystemClock_Config();  
 8001202:	f7ff ffa9 	bl	8001158 <SystemClock_Config>
  huart2.Instance = USART2;
 8001206:	4838      	ldr	r0, [pc, #224]	@ (80012e8 <main+0xf0>)
  huart2.Init.BaudRate = 115200;
 8001208:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120c:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 800120e:	e9c4 01b8 	strd	r0, r1, [r4, #736]	@ 0x2e0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001212:	220c      	movs	r2, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001214:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001218:	e9c4 33ba 	strd	r3, r3, [r4, #744]	@ 0x2e8
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	e9c4 32bc 	strd	r3, r2, [r4, #752]	@ 0x2f0
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	e9c4 33be 	strd	r3, r3, [r4, #760]	@ 0x2f8
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001224:	e9c4 33c0 	strd	r3, r3, [r4, #768]	@ 0x300
 8001228:	f8c4 3308 	str.w	r3, [r4, #776]	@ 0x308
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122c:	f00b febe 	bl	800cfac <HAL_UART_Init>
 8001230:	b100      	cbz	r0, 8001234 <main+0x3c>
 8001232:	e7fe      	b.n	8001232 <main+0x3a>
  {
	  _Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001234:	4601      	mov	r1, r0
 8001236:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 800123a:	f00c f803 	bl	800d244 <HAL_UARTEx_SetTxFifoThreshold>
 800123e:	b100      	cbz	r0, 8001242 <main+0x4a>
 8001240:	e7fe      	b.n	8001240 <main+0x48>
  {
	  _Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	4601      	mov	r1, r0
 8001244:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 8001248:	f00c f83a 	bl	800d2c0 <HAL_UARTEx_SetRxFifoThreshold>
 800124c:	b100      	cbz	r0, 8001250 <main+0x58>
 800124e:	e7fe      	b.n	800124e <main+0x56>
  {
	  _Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001250:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 8001254:	f00b ffd8 	bl	800d208 <HAL_UARTEx_DisableFifoMode>
 8001258:	4605      	mov	r5, r0
 800125a:	2800      	cmp	r0, #0
 800125c:	d13d      	bne.n	80012da <main+0xe2>
    HAL_PWREx_EnableVddIO2();
 800125e:	f008 f971 	bl	8009544 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <main+0xf4>)
 8001264:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001266:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800126a:	659a      	str	r2, [r3, #88]	@ 0x58
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddUSB(); 
 8001276:	f008 f95d 	bl	8009534 <HAL_PWREx_EnableVddUSB>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800127a:	2101      	movs	r1, #1
 800127c:	4628      	mov	r0, r5
 800127e:	f004 fb4d 	bl	800591c <BSP_PB_Init>
  BSP_LED_Init(LED1);
 8001282:	4628      	mov	r0, r5
 8001284:	f004 fb80 	bl	8005988 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8001288:	4628      	mov	r0, r5
 800128a:	f004 fbb9 	bl	8005a00 <BSP_LED_Off>
  BSP_PB_PWR_Init();  
 800128e:	f004 faf3 	bl	8005878 <BSP_PB_PWR_Init>
  BSP_Enable_DCDC2();
 8001292:	f004 fb1d 	bl	80058d0 <BSP_Enable_DCDC2>
  BSP_BC_Init();
 8001296:	f004 fd79 	bl	8005d8c <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 800129a:	f004 fc47 	bl	8005b2c <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);
 800129e:	200a      	movs	r0, #10
 80012a0:	f004 fc20 	bl	8005ae4 <BSP_BC_CmdSend>
  t_stwin = HAL_GetTick(); 
 80012a4:	f006 f81c 	bl	80072e0 <HAL_GetTick>
  if(LoggingInterface == USB_Datalog) /* Configure the USB */
 80012a8:	f894 2370 	ldrb.w	r2, [r4, #880]	@ 0x370
  t_stwin = HAL_GetTick(); 
 80012ac:	f8c4 02dc 	str.w	r0, [r4, #732]	@ 0x2dc
  if(LoggingInterface == USB_Datalog) /* Configure the USB */
 80012b0:	b9a2      	cbnz	r2, 80012dc <main+0xe4>
    MX_USB_DEVICE_Init();
 80012b2:	f7ff fefb 	bl	80010ac <MX_USB_DEVICE_Init>
  osThreadDef(MAIN, Main_Thread, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*8);
 80012b6:	4d0e      	ldr	r5, [pc, #56]	@ (80012f0 <main+0xf8>)
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	f10d 0c04 	add.w	ip, sp, #4
 80012be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	f8cc 3000 	str.w	r3, [ip]
  MainThreadId = osThreadCreate(osThread(MAIN), NULL);
 80012c8:	2100      	movs	r1, #0
 80012ca:	a801      	add	r0, sp, #4
 80012cc:	f00f f8d0 	bl	8010470 <osThreadCreate>
 80012d0:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
  osKernelStart();
 80012d4:	f00f f8c6 	bl	8010464 <osKernelStart>
  while(1);  
 80012d8:	e7fe      	b.n	80012d8 <main+0xe0>
 80012da:	e7fe      	b.n	80012da <main+0xe2>
    DATALOG_SD_Init();
 80012dc:	f7ff fe72 	bl	8000fc4 <DATALOG_SD_Init>
 80012e0:	e7e9      	b.n	80012b6 <main+0xbe>
 80012e2:	bf00      	nop
 80012e4:	20000968 	.word	0x20000968
 80012e8:	40004400 	.word	0x40004400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	080153c0 	.word	0x080153c0

080012f4 <dataTimerStart>:
{
 80012f4:	b510      	push	{r4, lr}
  exec = 1;
 80012f6:	4c09      	ldr	r4, [pc, #36]	@ (800131c <dataTimerStart+0x28>)
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <dataTimerStart+0x2c>)
  exec = 1;
 80012fa:	2101      	movs	r1, #1
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 80012fc:	f504 725e 	add.w	r2, r4, #888	@ 0x378
  exec = 1;
 8001300:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
  sensorTimId = osTimerCreate(osTimer(SensorTimer), osTimerPeriodic, &exec);
 8001304:	f00f f8d0 	bl	80104a8 <osTimerCreate>
 8001308:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
  if (sensorTimId)  {
 800130c:	b120      	cbz	r0, 8001318 <dataTimerStart+0x24>
}
 800130e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = osTimerStart (sensorTimId, DATA_PERIOD_MS);                // start timer
 8001312:	2114      	movs	r1, #20
 8001314:	f00f b8dc 	b.w	80104d0 <osTimerStart>
}
 8001318:	bd10      	pop	{r4, pc}
 800131a:	bf00      	nop
 800131c:	20000968 	.word	0x20000968
 8001320:	080153d4 	.word	0x080153d4

08001324 <Main_Thread>:
{
 8001324:	b530      	push	{r4, r5, lr}
	sensorPool_id = osPoolCreate(osPool(sensorPool));
 8001326:	483a      	ldr	r0, [pc, #232]	@ (8001410 <Main_Thread+0xec>)
 8001328:	4c3a      	ldr	r4, [pc, #232]	@ (8001414 <Main_Thread+0xf0>)
{
 800132a:	f6ad 0d0c 	subw	sp, sp, #2060	@ 0x80c
	sensorPool_id = osPoolCreate(osPool(sensorPool));
 800132e:	f00f f963 	bl	80105f8 <osPoolCreate>
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001332:	2100      	movs	r1, #0
	sensorPool_id = osPoolCreate(osPool(sensorPool));
 8001334:	4603      	mov	r3, r0
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001336:	4838      	ldr	r0, [pc, #224]	@ (8001418 <Main_Thread+0xf4>)
	sensorPool_id = osPoolCreate(osPool(sensorPool));
 8001338:	f8c4 3380 	str.w	r3, [r4, #896]	@ 0x380
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 800133c:	f00f f98c 	bl	8010658 <osMessageCreate>
	readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 8001340:	2101      	movs	r1, #1
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001342:	4603      	mov	r3, r0
	readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 8001344:	4835      	ldr	r0, [pc, #212]	@ (800141c <Main_Thread+0xf8>)
	dataQueue_id = osMessageCreate(osMessageQ(dataqueue), NULL);
 8001346:	f8c4 3384 	str.w	r3, [r4, #900]	@ 0x384
	readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 800134a:	f00f f8ef 	bl	801052c <osSemaphoreCreate>
	osSemaphoreWait(readDataSem_id, osWaitForever);
 800134e:	f04f 31ff 	mov.w	r1, #4294967295
	readDataSem_id = osSemaphoreCreate(osSemaphore(readDataSem), 1);
 8001352:	6020      	str	r0, [r4, #0]
	osSemaphoreWait(readDataSem_id, osWaitForever);
 8001354:	f00f f8fe 	bl	8010554 <osSemaphoreWait>
	doubleTapSem_id = osSemaphoreCreate(osSemaphore(doubleTapSem), 1);
 8001358:	2101      	movs	r1, #1
 800135a:	4831      	ldr	r0, [pc, #196]	@ (8001420 <Main_Thread+0xfc>)
 800135c:	f00f f8e6 	bl	801052c <osSemaphoreCreate>
	osSemaphoreWait(doubleTapSem_id, osWaitForever);
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
	doubleTapSem_id = osSemaphoreCreate(osSemaphore(doubleTapSem), 1);
 8001364:	f8c4 0388 	str.w	r0, [r4, #904]	@ 0x388
	osSemaphoreWait(doubleTapSem_id, osWaitForever);
 8001368:	f00f f8f4 	bl	8010554 <osSemaphoreWait>
	MX_X_CUBE_MEMS1_Init();
 800136c:	f7ff fe4c 	bl	8001008 <MX_X_CUBE_MEMS1_Init>
	if(LoggingInterface == USB_Datalog)
 8001370:	f894 3370 	ldrb.w	r3, [r4, #880]	@ 0x370
 8001374:	2b00      	cmp	r3, #0
 8001376:	d048      	beq.n	800140a <Main_Thread+0xe6>
	iis3dwb_device_id_get(&(iis3dwb_global_obj->Ctx), (uint8_t *)&id);
 8001378:	4c2a      	ldr	r4, [pc, #168]	@ (8001424 <Main_Thread+0x100>)
  /* USER CODE END USART2_Init 2 */

}

static void tx_com (uint8_t *tx2_buffer, uint16_t len){
	HAL_UART_Transmit(&huart2, tx2_buffer, len, 1000);
 800137a:	4d2b      	ldr	r5, [pc, #172]	@ (8001428 <Main_Thread+0x104>)
	iis3dwb_device_id_get(&(iis3dwb_global_obj->Ctx), (uint8_t *)&id);
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	f10d 0103 	add.w	r1, sp, #3
 8001382:	301c      	adds	r0, #28
 8001384:	f002 f8b0 	bl	80034e8 <iis3dwb_device_id_get>
	len = sprintf(buffera, "Hello World!\r\n");
 8001388:	4b28      	ldr	r3, [pc, #160]	@ (800142c <Main_Thread+0x108>)
	volatile uint16_t fifo_level = 0;
 800138a:	2200      	movs	r2, #0
 800138c:	f8ad 2006 	strh.w	r2, [sp, #6]
	len = sprintf(buffera, "Hello World!\r\n");
 8001390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001392:	f10d 0c08 	add.w	ip, sp, #8
 8001396:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800139a:	f82c 3b02 	strh.w	r3, [ip], #2
 800139e:	0c1b      	lsrs	r3, r3, #16
 80013a0:	f88c 3000 	strb.w	r3, [ip]
		iis3dwb_read_reg(&(iis3dwb_global_obj->Ctx), IIS3DWB_FIFO_STATUS1, reg, 2);
 80013a4:	6820      	ldr	r0, [r4, #0]
 80013a6:	aa01      	add	r2, sp, #4
 80013a8:	2302      	movs	r3, #2
 80013aa:	213a      	movs	r1, #58	@ 0x3a
 80013ac:	301c      	adds	r0, #28
 80013ae:	f001 ffef 	bl	8003390 <iis3dwb_read_reg>
		fifo_level = ((reg[1] & 0x03) << 8) + reg[0];
 80013b2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80013b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013ba:	020a      	lsls	r2, r1, #8
 80013bc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80013c0:	4413      	add	r3, r2
 80013c2:	f8ad 3006 	strh.w	r3, [sp, #6]
		if ((reg[1]) & 0x80  && (fifo_level >= iis3dwb_samples_per_it)){
 80013c6:	060b      	lsls	r3, r1, #24
 80013c8:	d5ec      	bpl.n	80013a4 <Main_Thread+0x80>
 80013ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	2bff      	cmp	r3, #255	@ 0xff
 80013d2:	d9e7      	bls.n	80013a4 <Main_Thread+0x80>
			tx_com((uint8_t * )buffera, strlen((char const *)buffera));
 80013d4:	a802      	add	r0, sp, #8
 80013d6:	f7fe ff63 	bl	80002a0 <strlen>
	HAL_UART_Transmit(&huart2, tx2_buffer, len, 1000);
 80013da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013de:	b282      	uxth	r2, r0
 80013e0:	a902      	add	r1, sp, #8
 80013e2:	4628      	mov	r0, r5
 80013e4:	f00b fe6c 	bl	800d0c0 <HAL_UART_Transmit>
			IIS3DWB_FIFO_Read(iis3dwb_global_obj, fifo_buffer, IIS3DWB_FIFO_WATERMARK_LVL);
 80013e8:	a942      	add	r1, sp, #264	@ 0x108
 80013ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ee:	6820      	ldr	r0, [r4, #0]
 80013f0:	f001 ffbe 	bl	8003370 <IIS3DWB_FIFO_Read>
			tx_com((uint8_t * )buffera, strlen((char const *)buffera));
 80013f4:	a802      	add	r0, sp, #8
 80013f6:	f7fe ff53 	bl	80002a0 <strlen>
	HAL_UART_Transmit(&huart2, tx2_buffer, len, 1000);
 80013fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fe:	b282      	uxth	r2, r0
 8001400:	a902      	add	r1, sp, #8
 8001402:	4628      	mov	r0, r5
 8001404:	f00b fe5c 	bl	800d0c0 <HAL_UART_Transmit>
}
 8001408:	e7cc      	b.n	80013a4 <Main_Thread+0x80>
	dataTimerStart();
 800140a:	f7ff ff73 	bl	80012f4 <dataTimerStart>
 800140e:	e7b3      	b.n	8001378 <Main_Thread+0x54>
 8001410:	080153d8 	.word	0x080153d8
 8001414:	20000968 	.word	0x20000968
 8001418:	080153e4 	.word	0x080153e4
 800141c:	080153ec 	.word	0x080153ec
 8001420:	080153f0 	.word	0x080153f0
 8001424:	20002f04 	.word	0x20002f04
 8001428:	20000c48 	.word	0x20000c48
 800142c:	080154b4 	.word	0x080154b4

08001430 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001432:	e7fe      	b.n	8001432 <Error_Handler+0x2>

08001434 <HAL_UART_MspInit>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b5d0      	push	{r4, r6, r7, lr}
 8001436:	4604      	mov	r4, r0
 8001438:	b0b2      	sub	sp, #200	@ 0xc8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	229c      	movs	r2, #156	@ 0x9c
 800143e:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001444:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001448:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144a:	f012 f88a 	bl	8013562 <memset>
  if(huart->Instance==USART2)
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	4a43      	ldr	r2, [pc, #268]	@ (8001560 <HAL_UART_MspInit+0x12c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d004      	beq.n	8001460 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001456:	4a43      	ldr	r2, [pc, #268]	@ (8001564 <HAL_UART_MspInit+0x130>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d033      	beq.n	80014c4 <HAL_UART_MspInit+0x90>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800145c:	b032      	add	sp, #200	@ 0xc8
 800145e:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001460:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001462:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001464:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	f008 ff07 	bl	800a278 <HAL_RCCEx_PeriphCLKConfig>
 800146a:	2800      	cmp	r0, #0
 800146c:	d172      	bne.n	8001554 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART2_CLK_ENABLE();
 800146e:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001470:	483e      	ldr	r0, [pc, #248]	@ (800156c <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001472:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001474:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001478:	659a      	str	r2, [r3, #88]	@ 0x58
 800147a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800147c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001486:	f042 0208 	orr.w	r2, r2, #8
 800148a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 800148e:	2670      	movs	r6, #112	@ 0x70
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001490:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001494:	2702      	movs	r7, #2
 8001496:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149e:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 80014a0:	2600      	movs	r6, #0
 80014a2:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a4:	930a      	str	r3, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a6:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 80014a8:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f006 fca4 	bl	8007df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	4611      	mov	r1, r2
 80014b4:	2026      	movs	r0, #38	@ 0x26
 80014b6:	f006 fc2f 	bl	8007d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014ba:	2026      	movs	r0, #38	@ 0x26
 80014bc:	f006 fc68 	bl	8007d90 <HAL_NVIC_EnableIRQ>
}
 80014c0:	b032      	add	sp, #200	@ 0xc8
 80014c2:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014c4:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c6:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014c8:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ca:	f008 fed5 	bl	800a278 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d143      	bne.n	800155a <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014d2:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <HAL_UART_MspInit+0x134>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	4825      	ldr	r0, [pc, #148]	@ (800156c <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80014d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014d8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80014dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80014de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014e0:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80014e4:	9203      	str	r2, [sp, #12]
 80014e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ea:	f042 0208 	orr.w	r2, r2, #8
 80014ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014f2:	f002 0208 	and.w	r2, r2, #8
 80014f6:	9204      	str	r2, [sp, #16]
 80014f8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014fc:	f042 0202 	orr.w	r2, r2, #2
 8001500:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800150a:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800150e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001512:	2600      	movs	r6, #0
 8001514:	2703      	movs	r7, #3
 8001516:	2302      	movs	r3, #2
 8001518:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800151c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001522:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f006 fc68 	bl	8007df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001528:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 800152c:	f242 0202 	movw	r2, #8194	@ 0x2002
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	480f      	ldr	r0, [pc, #60]	@ (8001570 <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001532:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001534:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001538:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f006 fc5c 	bl	8007df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	4611      	mov	r1, r2
 8001544:	2027      	movs	r0, #39	@ 0x27
 8001546:	f006 fbe7 	bl	8007d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800154a:	2027      	movs	r0, #39	@ 0x27
 800154c:	f006 fc20 	bl	8007d90 <HAL_NVIC_EnableIRQ>
}
 8001550:	b032      	add	sp, #200	@ 0xc8
 8001552:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8001554:	f7ff ff6c 	bl	8001430 <Error_Handler>
 8001558:	e789      	b.n	800146e <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800155a:	f7ff ff69 	bl	8001430 <Error_Handler>
 800155e:	e7b8      	b.n	80014d2 <HAL_UART_MspInit+0x9e>
 8001560:	40004400 	.word	0x40004400
 8001564:	40004800 	.word	0x40004800
 8001568:	40021000 	.word	0x40021000
 800156c:	48000c00 	.word	0x48000c00
 8001570:	48000400 	.word	0x48000400

08001574 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop

08001578 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001578:	e7fe      	b.n	8001578 <HardFault_Handler>
 800157a:	bf00      	nop

0800157c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler>
 800157e:	bf00      	nop

08001580 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001580:	e7fe      	b.n	8001580 <BusFault_Handler>
 8001582:	bf00      	nop

08001584 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler>
 8001586:	bf00      	nop

08001588 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800158c:	b508      	push	{r3, lr}
  osSystickHandler();
 800158e:	f00f f869 	bl	8010664 <osSystickHandler>
  HAL_IncTick();
}
 8001592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8001596:	f005 be97 	b.w	80072c8 <HAL_IncTick>
 800159a:	bf00      	nop

0800159c <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800159c:	4801      	ldr	r0, [pc, #4]	@ (80015a4 <OTG_FS_IRQHandler+0x8>)
 800159e:	f007 baab 	b.w	8008af8 <HAL_PCD_IRQHandler>
 80015a2:	bf00      	nop
 80015a4:	20002050 	.word	0x20002050

080015a8 <SDMMC1_IRQHandler>:
}

void SDMMC1_IRQHandler(void)
{
  HAL_SD_IRQHandler(&hsd1);
 80015a8:	4801      	ldr	r0, [pc, #4]	@ (80015b0 <SDMMC1_IRQHandler+0x8>)
 80015aa:	f009 bd5d 	b.w	800b068 <HAL_SD_IRQHandler>
 80015ae:	bf00      	nop
 80015b0:	20000fc4 	.word	0x20000fc4

080015b4 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);		
 80015b4:	2020      	movs	r0, #32
 80015b6:	f006 be07 	b.w	80081c8 <HAL_GPIO_EXTI_IRQHandler>
 80015ba:	bf00      	nop

080015bc <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80015bc:	2001      	movs	r0, #1
 80015be:	f006 be03 	b.w	80081c8 <HAL_GPIO_EXTI_IRQHandler>
 80015c2:	bf00      	nop

080015c4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80015c4:	2000      	movs	r0, #0
 80015c6:	4770      	bx	lr

080015c8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80015c8:	2000      	movs	r0, #0
 80015ca:	4770      	bx	lr

080015cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80015cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80015ce:	4c05      	ldr	r4, [pc, #20]	@ (80015e4 <CDC_Receive_FS+0x18>)
{
 80015d0:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80015d2:	4620      	mov	r0, r4
 80015d4:	f00d ff54 	bl	800f480 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80015d8:	4620      	mov	r0, r4
 80015da:	f00d ff5b 	bl	800f494 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80015de:	2000      	movs	r0, #0
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	bf00      	nop
 80015e4:	2000096c 	.word	0x2000096c

080015e8 <CDC_Init_FS>:
{
 80015e8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80015ea:	4d07      	ldr	r5, [pc, #28]	@ (8001608 <CDC_Init_FS+0x20>)
 80015ec:	4c07      	ldr	r4, [pc, #28]	@ (800160c <CDC_Init_FS+0x24>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	4629      	mov	r1, r5
 80015f2:	4620      	mov	r0, r4
 80015f4:	f00d ff38 	bl	800f468 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80015f8:	f505 6100 	add.w	r1, r5, #2048	@ 0x800
 80015fc:	4620      	mov	r0, r4
 80015fe:	f00d ff3f 	bl	800f480 <USBD_CDC_SetRxBuffer>
}
 8001602:	2000      	movs	r0, #0
 8001604:	bd38      	pop	{r3, r4, r5, pc}
 8001606:	bf00      	nop
 8001608:	2000104c 	.word	0x2000104c
 800160c:	2000096c 	.word	0x2000096c

08001610 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8001610:	6803      	ldr	r3, [r0, #0]
 8001612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001616:	d000      	beq.n	800161a <HAL_PCD_MspInit+0xa>
 8001618:	4770      	bx	lr
{
 800161a:	b510      	push	{r4, lr}
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800161c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
{
 8001620:	b088      	sub	sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001622:	4c1b      	ldr	r4, [pc, #108]	@ (8001690 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001624:	2102      	movs	r1, #2
 8001626:	2200      	movs	r2, #0
 8001628:	2303      	movs	r3, #3
 800162a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800162e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001634:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800163a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f006 fbdc 	bl	8007df8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001640:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001642:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001646:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001648:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800164a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	9b00      	ldr	r3, [sp, #0]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	d418      	bmi.n	800168a <HAL_PCD_MspInit+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	9b01      	ldr	r3, [sp, #4]
      HAL_PWREx_EnableVddUSB();
 800166a:	f007 ff63 	bl	8009534 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001674:	65a3      	str	r3, [r4, #88]	@ 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	2043      	movs	r0, #67	@ 0x43
 800167c:	f006 fb4c 	bl	8007d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001680:	2043      	movs	r0, #67	@ 0x43
 8001682:	f006 fb85 	bl	8007d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001686:	b008      	add	sp, #32
 8001688:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 800168a:	f007 ff53 	bl	8009534 <HAL_PWREx_EnableVddUSB>
 800168e:	e7f2      	b.n	8001676 <HAL_PCD_MspInit+0x66>
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001694:	f500 7171 	add.w	r1, r0, #964	@ 0x3c4
 8001698:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 800169c:	f00d bf4e 	b.w	800f53c <USBD_LL_SetupStage>

080016a0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80016a0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80016a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80016a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 80016ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80016b0:	f00d bf74 	b.w	800f59c <USBD_LL_DataOutStage>

080016b4 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80016b4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80016b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80016bc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 80016c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80016c2:	f00d bf9f 	b.w	800f604 <USBD_LL_DataInStage>
 80016c6:	bf00      	nop

080016c8 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80016c8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 80016cc:	f00e b838 	b.w	800f740 <USBD_LL_SOF>

080016d0 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80016d0:	b510      	push	{r4, lr}
 80016d2:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80016d4:	2101      	movs	r1, #1
 80016d6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 80016da:	f00e f815 	bl	800f708 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80016de:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 80016e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80016e6:	f00d bfe3 	b.w	800f6b0 <USBD_LL_Reset>
 80016ea:	bf00      	nop

080016ec <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80016ec:	6802      	ldr	r2, [r0, #0]
 80016ee:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
{
 80016f2:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80016f4:	f043 0301 	orr.w	r3, r3, #1
{
 80016f8:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80016fa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80016fe:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001702:	f00e f805 	bl	800f710 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001706:	6a23      	ldr	r3, [r4, #32]
 8001708:	b123      	cbz	r3, 8001714 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800170a:	4a03      	ldr	r2, [pc, #12]	@ (8001718 <HAL_PCD_SuspendCallback+0x2c>)
 800170c:	6913      	ldr	r3, [r2, #16]
 800170e:	f043 0306 	orr.w	r3, r3, #6
 8001712:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001714:	bd10      	pop	{r4, pc}
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800171c:	6802      	ldr	r2, [r0, #0]
 800171e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8001722:	f023 0301 	bic.w	r3, r3, #1
{
 8001726:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001728:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800172c:	6a03      	ldr	r3, [r0, #32]
{
 800172e:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8001730:	b92b      	cbnz	r3, 800173e <HAL_PCD_ResumeCallback+0x22>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001732:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 8001736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800173a:	f00d bff5 	b.w	800f728 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800173e:	4a06      	ldr	r2, [pc, #24]	@ (8001758 <HAL_PCD_ResumeCallback+0x3c>)
 8001740:	6913      	ldr	r3, [r2, #16]
 8001742:	f023 0306 	bic.w	r3, r3, #6
 8001746:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8001748:	f7ff fd06 	bl	8001158 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800174c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
}
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001754:	f00d bfe8 	b.w	800f728 <USBD_LL_Resume>
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800175c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001760:	f00e b812 	b.w	800f788 <USBD_LL_IsoOUTIncomplete>

08001764 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001764:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001768:	f00d bffc 	b.w	800f764 <USBD_LL_IsoINIncomplete>

0800176c <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800176c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001770:	f00e b81c 	b.w	800f7ac <USBD_LL_DevConnected>

08001774 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001774:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
 8001778:	f00e b81a 	b.w	800f7b0 <USBD_LL_DevDisconnected>

0800177c <USBD_LL_Init>:
  if (pdev->id == DEVICE_FS) {
 800177c:	7803      	ldrb	r3, [r0, #0]
 800177e:	b10b      	cbz	r3, 8001784 <USBD_LL_Init+0x8>
}
 8001780:	2000      	movs	r0, #0
 8001782:	4770      	bx	lr
{
 8001784:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 8001786:	4c15      	ldr	r4, [pc, #84]	@ (80017dc <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001788:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800178c:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.pData = pdev;
 800178e:	f8c4 0404 	str.w	r0, [r4, #1028]	@ 0x404
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001792:	e9c4 1200 	strd	r1, r2, [r4]
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 8001796:	2601      	movs	r6, #1
  pdev->pData = &hpcd_USB_OTG_FS;
 8001798:	f8c0 42c4 	str.w	r4, [r0, #708]	@ 0x2c4
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 800179c:	2202      	movs	r2, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800179e:	4620      	mov	r0, r4
  hpcd_USB_OTG_FS.Init.ep0_mps = EP_MPS_64;
 80017a0:	e9c4 3205 	strd	r3, r2, [r4, #20]
 80017a4:	e9c4 6307 	strd	r6, r3, [r4, #28]
 80017a8:	e9c4 3609 	strd	r3, r6, [r4, #36]	@ 0x24
 80017ac:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017b0:	f007 f8f6 	bl	80089a0 <HAL_PCD_Init>
 80017b4:	4605      	mov	r5, r0
 80017b6:	b100      	cbz	r0, 80017ba <USBD_LL_Init+0x3e>
 80017b8:	e7fe      	b.n	80017b8 <USBD_LL_Init+0x3c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80017ba:	2180      	movs	r1, #128	@ 0x80
 80017bc:	4620      	mov	r0, r4
 80017be:	f007 fe1d 	bl	80093fc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80017c2:	4629      	mov	r1, r5
 80017c4:	2240      	movs	r2, #64	@ 0x40
 80017c6:	4620      	mov	r0, r4
 80017c8:	f007 fd96 	bl	80092f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80017cc:	2280      	movs	r2, #128	@ 0x80
 80017ce:	4631      	mov	r1, r6
 80017d0:	4620      	mov	r0, r4
 80017d2:	f007 fd91 	bl	80092f8 <HAL_PCDEx_SetTxFiFo>
}
 80017d6:	2000      	movs	r0, #0
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
 80017da:	bf00      	nop
 80017dc:	20002050 	.word	0x20002050

080017e0 <USBD_LL_Start>:
{
 80017e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80017e2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80017e6:	f007 f96b 	bl	8008ac0 <HAL_PCD_Start>
  switch (hal_status) {
 80017ea:	b118      	cbz	r0, 80017f4 <USBD_LL_Start+0x14>
 80017ec:	2802      	cmp	r0, #2
 80017ee:	bf0c      	ite	eq
 80017f0:	2001      	moveq	r0, #1
 80017f2:	2003      	movne	r0, #3
}
 80017f4:	bd08      	pop	{r3, pc}
 80017f6:	bf00      	nop

080017f8 <USBD_LL_OpenEP>:
{
 80017f8:	4694      	mov	ip, r2
 80017fa:	b508      	push	{r3, lr}
 80017fc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80017fe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001802:	4663      	mov	r3, ip
 8001804:	f007 fc3e 	bl	8009084 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8001808:	b118      	cbz	r0, 8001812 <USBD_LL_OpenEP+0x1a>
 800180a:	2802      	cmp	r0, #2
 800180c:	bf0c      	ite	eq
 800180e:	2001      	moveq	r0, #1
 8001810:	2003      	movne	r0, #3
}
 8001812:	bd08      	pop	{r3, pc}

08001814 <USBD_LL_CloseEP>:
{
 8001814:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001816:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 800181a:	f007 fc71 	bl	8009100 <HAL_PCD_EP_Close>
  switch (hal_status) {
 800181e:	b118      	cbz	r0, 8001828 <USBD_LL_CloseEP+0x14>
 8001820:	2802      	cmp	r0, #2
 8001822:	bf0c      	ite	eq
 8001824:	2001      	moveq	r0, #1
 8001826:	2003      	movne	r0, #3
}
 8001828:	bd08      	pop	{r3, pc}
 800182a:	bf00      	nop

0800182c <USBD_LL_StallEP>:
{
 800182c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800182e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8001832:	f007 fce7 	bl	8009204 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8001836:	b118      	cbz	r0, 8001840 <USBD_LL_StallEP+0x14>
 8001838:	2802      	cmp	r0, #2
 800183a:	bf0c      	ite	eq
 800183c:	2001      	moveq	r0, #1
 800183e:	2003      	movne	r0, #3
}
 8001840:	bd08      	pop	{r3, pc}
 8001842:	bf00      	nop

08001844 <USBD_LL_ClearStallEP>:
{
 8001844:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8001846:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 800184a:	f007 fd1d 	bl	8009288 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 800184e:	b118      	cbz	r0, 8001858 <USBD_LL_ClearStallEP+0x14>
 8001850:	2802      	cmp	r0, #2
 8001852:	bf0c      	ite	eq
 8001854:	2001      	moveq	r0, #1
 8001856:	2003      	movne	r0, #3
}
 8001858:	bd08      	pop	{r3, pc}
 800185a:	bf00      	nop

0800185c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800185c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800185e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8001862:	d406      	bmi.n	8001872 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001864:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001868:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800186c:	f893 01fe 	ldrb.w	r0, [r3, #510]	@ 0x1fe
}
 8001870:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001872:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8001876:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800187a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800187e:	f893 003e 	ldrb.w	r0, [r3, #62]	@ 0x3e
 8001882:	4770      	bx	lr

08001884 <USBD_LL_SetUSBAddress>:
{
 8001884:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001886:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 800188a:	f007 fbe7 	bl	800905c <HAL_PCD_SetAddress>
  switch (hal_status) {
 800188e:	b118      	cbz	r0, 8001898 <USBD_LL_SetUSBAddress+0x14>
 8001890:	2802      	cmp	r0, #2
 8001892:	bf0c      	ite	eq
 8001894:	2001      	moveq	r0, #1
 8001896:	2003      	movne	r0, #3
}
 8001898:	bd08      	pop	{r3, pc}
 800189a:	bf00      	nop

0800189c <USBD_LL_Transmit>:
{
 800189c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800189e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80018a2:	f007 fc8d 	bl	80091c0 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 80018a6:	b118      	cbz	r0, 80018b0 <USBD_LL_Transmit+0x14>
 80018a8:	2802      	cmp	r0, #2
 80018aa:	bf0c      	ite	eq
 80018ac:	2001      	moveq	r0, #1
 80018ae:	2003      	movne	r0, #3
}
 80018b0:	bd08      	pop	{r3, pc}
 80018b2:	bf00      	nop

080018b4 <USBD_LL_PrepareReceive>:
{
 80018b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80018b6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80018ba:	f007 fc55 	bl	8009168 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 80018be:	b118      	cbz	r0, 80018c8 <USBD_LL_PrepareReceive+0x14>
 80018c0:	2802      	cmp	r0, #2
 80018c2:	bf0c      	ite	eq
 80018c4:	2001      	moveq	r0, #1
 80018c6:	2003      	movne	r0, #3
}
 80018c8:	bd08      	pop	{r3, pc}
 80018ca:	bf00      	nop

080018cc <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80018cc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80018d0:	f007 bc6c 	b.w	80091ac <HAL_PCD_EP_GetRxCount>

080018d4 <HAL_PCDEx_LPM_Callback>:
{
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4604      	mov	r4, r0
  switch (msg)
 80018d8:	b1a1      	cbz	r1, 8001904 <HAL_PCDEx_LPM_Callback+0x30>
 80018da:	2901      	cmp	r1, #1
 80018dc:	d111      	bne.n	8001902 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80018de:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80018e0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	@ 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80018e4:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80018f0:	f00d ff0e 	bl	800f710 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80018f4:	6a23      	ldr	r3, [r4, #32]
 80018f6:	b123      	cbz	r3, 8001902 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80018f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001934 <HAL_PCDEx_LPM_Callback+0x60>)
 80018fa:	6913      	ldr	r3, [r2, #16]
 80018fc:	f043 0306 	orr.w	r3, r3, #6
 8001900:	6113      	str	r3, [r2, #16]
}
 8001902:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8001904:	6a03      	ldr	r3, [r0, #32]
 8001906:	b963      	cbnz	r3, 8001922 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001908:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 800190a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	@ 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800190e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8001912:	f023 0301 	bic.w	r3, r3, #1
}
 8001916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800191a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Resume(hpcd->pData);
 800191e:	f00d bf03 	b.w	800f728 <USBD_LL_Resume>
      SystemClock_Config();
 8001922:	f7ff fc19 	bl	8001158 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001926:	4a03      	ldr	r2, [pc, #12]	@ (8001934 <HAL_PCDEx_LPM_Callback+0x60>)
 8001928:	6913      	ldr	r3, [r2, #16]
 800192a:	f023 0306 	bic.w	r3, r3, #6
 800192e:	6113      	str	r3, [r2, #16]
 8001930:	e7ea      	b.n	8001908 <HAL_PCDEx_LPM_Callback+0x34>
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <USBD_static_malloc>:
}
 8001938:	4800      	ldr	r0, [pc, #0]	@ (800193c <USBD_static_malloc+0x4>)
 800193a:	4770      	bx	lr
 800193c:	20002458 	.word	0x20002458

08001940 <USBD_static_free>:
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop

08001944 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8001944:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8001946:	4801      	ldr	r0, [pc, #4]	@ (800194c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8001948:	800b      	strh	r3, [r1, #0]
}
 800194a:	4770      	bx	lr
 800194c:	20000014 	.word	0x20000014

08001950 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8001950:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8001952:	4801      	ldr	r0, [pc, #4]	@ (8001958 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8001954:	800b      	strh	r3, [r1, #0]
}
 8001956:	4770      	bx	lr
 8001958:	20000028 	.word	0x20000028

0800195c <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 800195c:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800195e:	4801      	ldr	r0, [pc, #4]	@ (8001964 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8001960:	800b      	strh	r3, [r1, #0]
}
 8001962:	4770      	bx	lr
 8001964:	2000002c 	.word	0x2000002c

08001968 <USBD_FS_ManufacturerStrDescriptor>:
{
 8001968:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800196a:	4c04      	ldr	r4, [pc, #16]	@ (800197c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 800196e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001970:	4621      	mov	r1, r4
 8001972:	f00e f9c1 	bl	800fcf8 <USBD_GetString>
}
 8001976:	4620      	mov	r0, r4
 8001978:	bd10      	pop	{r4, pc}
 800197a:	bf00      	nop
 800197c:	20002678 	.word	0x20002678
 8001980:	080154cc 	.word	0x080154cc

08001984 <USBD_FS_ProductStrDescriptor>:
{
 8001984:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001986:	4c04      	ldr	r4, [pc, #16]	@ (8001998 <USBD_FS_ProductStrDescriptor+0x14>)
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <USBD_FS_ProductStrDescriptor+0x18>)
{
 800198a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800198c:	4621      	mov	r1, r4
 800198e:	f00e f9b3 	bl	800fcf8 <USBD_GetString>
}
 8001992:	4620      	mov	r0, r4
 8001994:	bd10      	pop	{r4, pc}
 8001996:	bf00      	nop
 8001998:	20002678 	.word	0x20002678
 800199c:	080154e0 	.word	0x080154e0

080019a0 <USBD_FS_SerialStrDescriptor>:
{
 80019a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80019a2:	4c04      	ldr	r4, [pc, #16]	@ (80019b4 <USBD_FS_SerialStrDescriptor+0x14>)
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <USBD_FS_SerialStrDescriptor+0x18>)
{
 80019a6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80019a8:	4621      	mov	r1, r4
 80019aa:	f00e f9a5 	bl	800fcf8 <USBD_GetString>
}
 80019ae:	4620      	mov	r0, r4
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	bf00      	nop
 80019b4:	20002678 	.word	0x20002678
 80019b8:	080154f8 	.word	0x080154f8

080019bc <USBD_FS_ConfigStrDescriptor>:
{
 80019bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80019be:	4c04      	ldr	r4, [pc, #16]	@ (80019d0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80019c0:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 80019c2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80019c4:	4621      	mov	r1, r4
 80019c6:	f00e f997 	bl	800fcf8 <USBD_GetString>
}
 80019ca:	4620      	mov	r0, r4
 80019cc:	bd10      	pop	{r4, pc}
 80019ce:	bf00      	nop
 80019d0:	20002678 	.word	0x20002678
 80019d4:	08015508 	.word	0x08015508

080019d8 <USBD_FS_InterfaceStrDescriptor>:
{
 80019d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80019da:	4c04      	ldr	r4, [pc, #16]	@ (80019ec <USBD_FS_InterfaceStrDescriptor+0x14>)
 80019dc:	4804      	ldr	r0, [pc, #16]	@ (80019f0 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 80019de:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80019e0:	4621      	mov	r1, r4
 80019e2:	f00e f989 	bl	800fcf8 <USBD_GetString>
}
 80019e6:	4620      	mov	r0, r4
 80019e8:	bd10      	pop	{r4, pc}
 80019ea:	bf00      	nop
 80019ec:	20002678 	.word	0x20002678
 80019f0:	08015514 	.word	0x08015514

080019f4 <HTS221_GetCapabilities>:

  Capabilities->Humidity    = 1;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 12.5f;
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <HTS221_GetCapabilities+0x14>)
 80019f6:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
  Capabilities->PressMaxOdr = 0.0f;
 80019f8:	2200      	movs	r2, #0
  Capabilities->Temperature = 1;
 80019fa:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
 80019fe:	6008      	str	r0, [r1, #0]
  Capabilities->TempMaxOdr  = 12.5f;
 8001a00:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001a02:	60ca      	str	r2, [r1, #12]
  return HTS221_OK;
}
 8001a04:	2000      	movs	r0, #0
 8001a06:	4770      	bx	lr
 8001a08:	41480000 	.word	0x41480000

08001a0c <HTS221_HUM_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001a0c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d012      	beq.n	8001a3a <HTS221_HUM_Enable+0x2e>
{
 8001a14:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001a16:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	b123      	cbz	r3, 8001a28 <HTS221_HUM_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return HTS221_OK;
 8001a24:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001a26:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	301c      	adds	r0, #28
 8001a2c:	f000 fa8e 	bl	8001f4c <hts221_power_on_set>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d0f4      	beq.n	8001a1e <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001a38:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001a3a:	2000      	movs	r0, #0
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <HTS221_HUM_Disable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001a40:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001a44:	b18b      	cbz	r3, 8001a6a <HTS221_HUM_Disable+0x2a>
{
 8001a46:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001a48:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	b121      	cbz	r1, 8001a5a <HTS221_HUM_Disable+0x1a>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return HTS221_OK;
 8001a56:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001a58:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001a5a:	301c      	adds	r0, #28
 8001a5c:	f000 fa76 	bl	8001f4c <hts221_power_on_set>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d0f5      	beq.n	8001a50 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001a68:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001a6a:	2000      	movs	r0, #0
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <HTS221_TEMP_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001a70:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d012      	beq.n	8001a9e <HTS221_TEMP_Enable+0x2e>
{
 8001a78:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001a7a:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001a7e:	4604      	mov	r4, r0
 8001a80:	b123      	cbz	r3, 8001a8c <HTS221_TEMP_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return HTS221_OK;
 8001a88:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001a8a:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	301c      	adds	r0, #28
 8001a90:	f000 fa5c 	bl	8001f4c <hts221_power_on_set>
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d0f4      	beq.n	8001a82 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001a9c:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001a9e:	2000      	movs	r0, #0
}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <HTS221_TEMP_Disable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001aa4:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001aa8:	b18b      	cbz	r3, 8001ace <HTS221_TEMP_Disable+0x2a>
{
 8001aaa:	b510      	push	{r4, lr}
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001aac:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	b121      	cbz	r1, 8001abe <HTS221_TEMP_Disable+0x1a>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return HTS221_OK;
 8001aba:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001abc:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001abe:	301c      	adds	r0, #28
 8001ac0:	f000 fa44 	bl	8001f4c <hts221_power_on_set>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d0f5      	beq.n	8001ab4 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001acc:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001ace:	2000      	movs	r0, #0
}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop

08001ad4 <HTS221_Init>:
{
 8001ad4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8001ad6:	f890 1028 	ldrb.w	r1, [r0, #40]	@ 0x28
{
 8001ada:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8001adc:	b121      	cbz	r1, 8001ae8 <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return HTS221_OK;
 8001ae4:	2000      	movs	r0, #0
}
 8001ae6:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001ae8:	f100 051c 	add.w	r5, r0, #28
 8001aec:	4628      	mov	r0, r5
 8001aee:	f000 fa2d 	bl	8001f4c <hts221_power_on_set>
 8001af2:	b950      	cbnz	r0, 8001b0a <HTS221_Init+0x36>
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001af4:	2101      	movs	r1, #1
 8001af6:	4628      	mov	r0, r5
 8001af8:	f000 f9e0 	bl	8001ebc <hts221_block_data_update_set>
 8001afc:	b928      	cbnz	r0, 8001b0a <HTS221_Init+0x36>
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001afe:	2101      	movs	r1, #1
 8001b00:	4628      	mov	r0, r5
 8001b02:	f000 f99b 	bl	8001e3c <hts221_data_rate_set>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d0e9      	beq.n	8001ade <HTS221_Init+0xa>
      return HTS221_ERROR;
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b0e:	bd38      	pop	{r3, r4, r5, pc}

08001b10 <HTS221_HUM_SetOutputDataRate>:
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001b10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001b14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001b1c:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001b1e:	d910      	bls.n	8001b42 <HTS221_HUM_SetOutputDataRate+0x32>
 8001b20:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 8001b24:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	bf94      	ite	ls
 8001b2e:	2102      	movls	r1, #2
 8001b30:	2103      	movhi	r1, #3
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001b32:	301c      	adds	r0, #28
 8001b34:	f000 f982 	bl	8001e3c <hts221_data_rate_set>
 8001b38:	3800      	subs	r0, #0
 8001b3a:	bf18      	it	ne
 8001b3c:	2001      	movne	r0, #1
}
 8001b3e:	4240      	negs	r0, r0
 8001b40:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001b42:	2101      	movs	r1, #1
 8001b44:	e7f5      	b.n	8001b32 <HTS221_HUM_SetOutputDataRate+0x22>
 8001b46:	bf00      	nop

08001b48 <HTS221_ReadID>:
{
 8001b48:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001b4a:	301c      	adds	r0, #28
 8001b4c:	f000 f9f4 	bl	8001f38 <hts221_device_id_get>
 8001b50:	3800      	subs	r0, #0
 8001b52:	bf18      	it	ne
 8001b54:	2001      	movne	r0, #1
}
 8001b56:	4240      	negs	r0, r0
 8001b58:	bd08      	pop	{r3, pc}
 8001b5a:	bf00      	nop

08001b5c <HTS221_HUM_GetOutputDataRate>:
{
 8001b5c:	b510      	push	{r4, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001b62:	301c      	adds	r0, #28
 8001b64:	f10d 0107 	add.w	r1, sp, #7
 8001b68:	f000 f982 	bl	8001e70 <hts221_data_rate_get>
 8001b6c:	b990      	cbnz	r0, 8001b94 <HTS221_HUM_GetOutputDataRate+0x38>
  switch (odr_low_level)
 8001b6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d80e      	bhi.n	8001b94 <HTS221_HUM_GetOutputDataRate+0x38>
 8001b76:	e8df f003 	tbb	[pc, r3]
 8001b7a:	0207      	.short	0x0207
 8001b7c:	090b      	.short	0x090b
 8001b7e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
      *Odr = 1.0f;
 8001b82:	6023      	str	r3, [r4, #0]
}
 8001b84:	b002      	add	sp, #8
 8001b86:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e7fa      	b.n	8001b82 <HTS221_HUM_GetOutputDataRate+0x26>
      break;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <HTS221_HUM_GetOutputDataRate+0x40>)
 8001b8e:	e7f8      	b.n	8001b82 <HTS221_HUM_GetOutputDataRate+0x26>
      break;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <HTS221_HUM_GetOutputDataRate+0x44>)
 8001b92:	e7f6      	b.n	8001b82 <HTS221_HUM_GetOutputDataRate+0x26>
    return HTS221_ERROR;
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001b98:	e7f4      	b.n	8001b84 <HTS221_HUM_GetOutputDataRate+0x28>
 8001b9a:	bf00      	nop
 8001b9c:	41480000 	.word	0x41480000
 8001ba0:	40e00000 	.word	0x40e00000

08001ba4 <HTS221_HUM_GetHumidity>:
{
 8001ba4:	b530      	push	{r4, r5, lr}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001ba6:	f100 041c 	add.w	r4, r0, #28
{
 8001baa:	b087      	sub	sp, #28
 8001bac:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001bae:	4620      	mov	r0, r4
 8001bb0:	a902      	add	r1, sp, #8
 8001bb2:	f000 fa51 	bl	8002058 <hts221_hum_adc_point_0_get>
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d148      	bne.n	8001c4c <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001bba:	a903      	add	r1, sp, #12
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f000 f9df 	bl	8001f80 <hts221_hum_rh_point_0_get>
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d142      	bne.n	8001c4c <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001bc6:	a904      	add	r1, sp, #16
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f000 fa5d 	bl	8002088 <hts221_hum_adc_point_1_get>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d13c      	bne.n	8001c4c <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001bd2:	a905      	add	r1, sp, #20
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f000 f9e7 	bl	8001fa8 <hts221_hum_rh_point_1_get>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	bbb0      	cbnz	r0, 8001c4c <HTS221_HUM_GetHumidity+0xa8>
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001bde:	a901      	add	r1, sp, #4
 8001be0:	4620      	mov	r0, r4
  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8001be2:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001be6:	f000 f983 	bl	8001ef0 <hts221_humidity_raw_get>
 8001bea:	bb78      	cbnz	r0, 8001c4c <HTS221_HUM_GetHumidity+0xa8>
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001bec:	eddd 6a05 	vldr	s13, [sp, #20]
 8001bf0:	eddd 5a02 	vldr	s11, [sp, #8]
 8001bf4:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001bf8:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001bfc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c00:	ee65 7ae6 	vnmul.f32	s15, s11, s13
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001c04:	ee06 3a10 	vmov	s12, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c08:	eee5 7a07 	vfma.f32	s15, s10, s14
  if (*Value < 0.0f)
 8001c0c:	2300      	movs	r3, #0
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c0e:	ee76 6ac5 	vsub.f32	s13, s13, s10
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001c12:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c16:	ee37 7a65 	vsub.f32	s14, s14, s11
 8001c1a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8001c1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  if (*Value < 0.0f)
 8001c22:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	d40c      	bmi.n	8001c46 <HTS221_HUM_GetHumidity+0xa2>
  if (*Value > 100.0f)
 8001c2c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8001c54 <HTS221_HUM_GetHumidity+0xb0>
 8001c30:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c38:	bfd4      	ite	le
 8001c3a:	edc5 6a00 	vstrle	s13, [r5]
    *Value = 100.0f;
 8001c3e:	edc5 7a00 	vstrgt	s15, [r5]
}
 8001c42:	b007      	add	sp, #28
 8001c44:	bd30      	pop	{r4, r5, pc}
 8001c46:	602b      	str	r3, [r5, #0]
 8001c48:	b007      	add	sp, #28
 8001c4a:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	e7f7      	b.n	8001c42 <HTS221_HUM_GetHumidity+0x9e>
 8001c52:	bf00      	nop
 8001c54:	42c80000 	.word	0x42c80000

08001c58 <HTS221_TEMP_GetTemperature>:
{
 8001c58:	b530      	push	{r4, r5, lr}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001c5a:	f100 041c 	add.w	r4, r0, #28
{
 8001c5e:	b087      	sub	sp, #28
 8001c60:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001c62:	4620      	mov	r0, r4
 8001c64:	a902      	add	r1, sp, #8
 8001c66:	f000 fa27 	bl	80020b8 <hts221_temp_adc_point_0_get>
 8001c6a:	bba0      	cbnz	r0, 8001cd6 <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001c6c:	a903      	add	r1, sp, #12
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f000 f9ae 	bl	8001fd0 <hts221_temp_deg_point_0_get>
 8001c74:	bb78      	cbnz	r0, 8001cd6 <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001c76:	a904      	add	r1, sp, #16
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f000 fa35 	bl	80020e8 <hts221_temp_adc_point_1_get>
 8001c7e:	bb50      	cbnz	r0, 8001cd6 <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001c80:	a905      	add	r1, sp, #20
 8001c82:	4620      	mov	r0, r4
 8001c84:	f000 f9c6 	bl	8002014 <hts221_temp_deg_point_1_get>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	bb20      	cbnz	r0, 8001cd6 <HTS221_TEMP_GetTemperature+0x7e>
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001c8c:	a901      	add	r1, sp, #4
 8001c8e:	4620      	mov	r0, r4
  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8001c90:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001c94:	f000 f93e 	bl	8001f14 <hts221_temperature_raw_get>
 8001c98:	b9e8      	cbnz	r0, 8001cd6 <HTS221_TEMP_GetTemperature+0x7e>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001c9a:	eddd 6a05 	vldr	s13, [sp, #20]
 8001c9e:	eddd 5a02 	vldr	s11, [sp, #8]
 8001ca2:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001ca6:	ed9d 7a04 	vldr	s14, [sp, #16]
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001caa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001cae:	ee65 7ae6 	vnmul.f32	s15, s11, s13
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001cb2:	ee06 3a10 	vmov	s12, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001cb6:	eee5 7a07 	vfma.f32	s15, s10, s14
 8001cba:	ee76 6ac5 	vsub.f32	s13, s13, s10
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001cbe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001cc2:	ee37 7a65 	vsub.f32	s14, s14, s11
 8001cc6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8001cca:	eec7 6a87 	vdiv.f32	s13, s15, s14
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001cce:	edc5 6a00 	vstr	s13, [r5]
}
 8001cd2:	b007      	add	sp, #28
 8001cd4:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8001cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cda:	e7fa      	b.n	8001cd2 <HTS221_TEMP_GetTemperature+0x7a>

08001cdc <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cdc:	b430      	push	{r4, r5}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001cde:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001ce0:	6944      	ldr	r4, [r0, #20]
 8001ce2:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001ce4:	b925      	cbnz	r5, 8001cf0 <ReadRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001ce6:	46a4      	mov	ip, r4
 8001ce8:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001cec:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001cee:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001cf0:	46a4      	mov	ip, r4
 8001cf2:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8001cf6:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001cf8:	4760      	bx	ip
 8001cfa:	bf00      	nop

08001cfc <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cfc:	b430      	push	{r4, r5}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001cfe:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001d00:	6904      	ldr	r4, [r0, #16]
 8001d02:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001d04:	b925      	cbnz	r5, 8001d10 <WriteRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001d06:	46a4      	mov	ip, r4
 8001d08:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8001d0c:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001d0e:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001d10:	46a4      	mov	ip, r4
 8001d12:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8001d16:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001d18:	4760      	bx	ip
 8001d1a:	bf00      	nop

08001d1c <HTS221_TEMP_GetOutputDataRate>:
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	460c      	mov	r4, r1
 8001d22:	301c      	adds	r0, #28
 8001d24:	f10d 0107 	add.w	r1, sp, #7
 8001d28:	f000 f8a2 	bl	8001e70 <hts221_data_rate_get>
 8001d2c:	b990      	cbnz	r0, 8001d54 <HTS221_TEMP_GetOutputDataRate+0x38>
 8001d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d80e      	bhi.n	8001d54 <HTS221_TEMP_GetOutputDataRate+0x38>
 8001d36:	e8df f003 	tbb	[pc, r3]
 8001d3a:	0207      	.short	0x0207
 8001d3c:	090b      	.short	0x090b
 8001d3e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d42:	6023      	str	r3, [r4, #0]
 8001d44:	b002      	add	sp, #8
 8001d46:	bd10      	pop	{r4, pc}
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e7fa      	b.n	8001d42 <HTS221_TEMP_GetOutputDataRate+0x26>
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HTS221_TEMP_GetOutputDataRate+0x40>)
 8001d4e:	e7f8      	b.n	8001d42 <HTS221_TEMP_GetOutputDataRate+0x26>
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HTS221_TEMP_GetOutputDataRate+0x44>)
 8001d52:	e7f6      	b.n	8001d42 <HTS221_TEMP_GetOutputDataRate+0x26>
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	e7f4      	b.n	8001d44 <HTS221_TEMP_GetOutputDataRate+0x28>
 8001d5a:	bf00      	nop
 8001d5c:	41480000 	.word	0x41480000
 8001d60:	40e00000 	.word	0x40e00000

08001d64 <HTS221_TEMP_SetOutputDataRate>:
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
 8001d64:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001d68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	b508      	push	{r3, lr}
 8001d72:	d910      	bls.n	8001d96 <HTS221_TEMP_SetOutputDataRate+0x32>
 8001d74:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 8001d78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	bf94      	ite	ls
 8001d82:	2102      	movls	r1, #2
 8001d84:	2103      	movhi	r1, #3
 8001d86:	301c      	adds	r0, #28
 8001d88:	f000 f858 	bl	8001e3c <hts221_data_rate_set>
 8001d8c:	3800      	subs	r0, #0
 8001d8e:	bf18      	it	ne
 8001d90:	2001      	movne	r0, #1
 8001d92:	4240      	negs	r0, r0
 8001d94:	bd08      	pop	{r3, pc}
 8001d96:	2101      	movs	r1, #1
 8001d98:	e7f5      	b.n	8001d86 <HTS221_TEMP_SetOutputDataRate+0x22>
 8001d9a:	bf00      	nop

08001d9c <HTS221_DeInit>:
{
 8001d9c:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8001d9e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8001da2:	2b01      	cmp	r3, #1
{
 8001da4:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8001da6:	d003      	beq.n	8001db0 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 8001da8:	2000      	movs	r0, #0
 8001daa:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8001dae:	bd10      	pop	{r4, pc}
  if (pObj->hum_is_enabled == 0U)
 8001db0:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8001db4:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
  if (pObj->hum_is_enabled == 0U)
 8001db8:	b1a3      	cbz	r3, 8001de4 <HTS221_DeInit+0x48>
  if (pObj->temp_is_enabled == 0U)
 8001dba:	b159      	cbz	r1, 8001dd4 <HTS221_DeInit+0x38>
  pObj->hum_is_enabled = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	f104 001c 	add.w	r0, r4, #28
 8001dc8:	f000 f8c0 	bl	8001f4c <hts221_power_on_set>
 8001dcc:	b968      	cbnz	r0, 8001dea <HTS221_DeInit+0x4e>
  pObj->temp_is_enabled = 0;
 8001dce:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return HTS221_OK;
 8001dd2:	e7e9      	b.n	8001da8 <HTS221_DeInit+0xc>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001dd4:	301c      	adds	r0, #28
 8001dd6:	f000 f8b9 	bl	8001f4c <hts221_power_on_set>
 8001dda:	b930      	cbnz	r0, 8001dea <HTS221_DeInit+0x4e>
  if (pObj->temp_is_enabled == 0U)
 8001ddc:	f894 102a 	ldrb.w	r1, [r4, #42]	@ 0x2a
  pObj->hum_is_enabled = 0;
 8001de0:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8001de4:	2900      	cmp	r1, #0
 8001de6:	d0df      	beq.n	8001da8 <HTS221_DeInit+0xc>
 8001de8:	e7eb      	b.n	8001dc2 <HTS221_DeInit+0x26>
      return HTS221_ERROR;
 8001dea:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001dee:	bd10      	pop	{r4, pc}

08001df0 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8001df0:	b1e0      	cbz	r0, 8001e2c <HTS221_RegisterBusIO+0x3c>
{
 8001df2:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8001df4:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8001df8:	688a      	ldr	r2, [r1, #8]
 8001dfa:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8001dfc:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8001e00:	7b0a      	ldrb	r2, [r1, #12]
 8001e02:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e04:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 8001e08:	6989      	ldr	r1, [r1, #24]
 8001e0a:	6181      	str	r1, [r0, #24]
 8001e0c:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e0e:	4909      	ldr	r1, [pc, #36]	@ (8001e34 <HTS221_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e10:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <HTS221_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e12:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e14:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8001e18:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 8001e1a:	b113      	cbz	r3, 8001e22 <HTS221_RegisterBusIO+0x32>
}
 8001e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8001e20:	4718      	bx	r3
}
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	08001cdd 	.word	0x08001cdd
 8001e38:	08001cfd 	.word	0x08001cfd

08001e3c <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	4604      	mov	r4, r0
 8001e40:	b082      	sub	sp, #8
 8001e42:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e44:	6880      	ldr	r0, [r0, #8]
 8001e46:	6866      	ldr	r6, [r4, #4]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	aa01      	add	r2, sp, #4
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8001e50:	b958      	cbnz	r0, 8001e6a <hts221_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 8001e52:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001e56:	6826      	ldr	r6, [r4, #0]
 8001e58:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 8001e5a:	f365 0301 	bfi	r3, r5, #0, #2
 8001e5e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001e62:	aa01      	add	r2, sp, #4
 8001e64:	2301      	movs	r3, #1
 8001e66:	2120      	movs	r1, #32
 8001e68:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
 8001e6e:	bf00      	nop

08001e70 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001e70:	b530      	push	{r4, r5, lr}
 8001e72:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e74:	2301      	movs	r3, #1
 8001e76:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001e7a:	aa01      	add	r2, sp, #4
{
 8001e7c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e7e:	2120      	movs	r1, #32
 8001e80:	47a8      	blx	r5
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  switch (reg.odr) {
 8001e82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d813      	bhi.n	8001eb6 <hts221_data_rate_get+0x46>
 8001e8e:	e8df f003 	tbb	[pc, r3]
 8001e92:	0206      	.short	0x0206
 8001e94:	0a0e      	.short	0x0a0e
 8001e96:	2301      	movs	r3, #1
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001e98:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 8001e9a:	b003      	add	sp, #12
 8001e9c:	bd30      	pop	{r4, r5, pc}
  switch (reg.odr) {
 8001e9e:	2300      	movs	r3, #0
      *val = HTS221_ONE_SHOT;
 8001ea0:	7023      	strb	r3, [r4, #0]
}
 8001ea2:	b003      	add	sp, #12
 8001ea4:	bd30      	pop	{r4, r5, pc}
      break;
 8001ea6:	2303      	movs	r3, #3
      *val = HTS221_ONE_SHOT;
 8001ea8:	7023      	strb	r3, [r4, #0]
}
 8001eaa:	b003      	add	sp, #12
 8001eac:	bd30      	pop	{r4, r5, pc}
      break;
 8001eae:	2302      	movs	r3, #2
      *val = HTS221_ONE_SHOT;
 8001eb0:	7023      	strb	r3, [r4, #0]
}
 8001eb2:	b003      	add	sp, #12
 8001eb4:	bd30      	pop	{r4, r5, pc}
      break;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e7ee      	b.n	8001e98 <hts221_data_rate_get+0x28>
 8001eba:	bf00      	nop

08001ebc <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ec4:	6880      	ldr	r0, [r0, #8]
 8001ec6:	6866      	ldr	r6, [r4, #4]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	aa01      	add	r2, sp, #4
 8001ecc:	2120      	movs	r1, #32
 8001ece:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8001ed0:	b958      	cbnz	r0, 8001eea <hts221_block_data_update_set+0x2e>
    reg.bdu = val;
 8001ed2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ed6:	6826      	ldr	r6, [r4, #0]
 8001ed8:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8001eda:	f365 0382 	bfi	r3, r5, #2, #1
 8001ede:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ee2:	aa01      	add	r2, sp, #4
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8001eea:	b002      	add	sp, #8
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	bf00      	nop

08001ef0 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ef0:	b530      	push	{r4, r5, lr}
 8001ef2:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ef4:	aa01      	add	r2, sp, #4
{
 8001ef6:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ef8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001efc:	2302      	movs	r3, #2
 8001efe:	2128      	movs	r1, #40	@ 0x28
 8001f00:	47a8      	blx	r5
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 8001f02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001f06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001f0e:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8001f10:	b003      	add	sp, #12
 8001f12:	bd30      	pop	{r4, r5, pc}

08001f14 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001f14:	b530      	push	{r4, r5, lr}
 8001f16:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f18:	aa01      	add	r2, sp, #4
{
 8001f1a:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f1c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001f20:	2302      	movs	r3, #2
 8001f22:	212a      	movs	r1, #42	@ 0x2a
 8001f24:	47a8      	blx	r5
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) +  (int16_t)buff[0];
 8001f26:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001f2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f2e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001f32:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8001f34:	b003      	add	sp, #12
 8001f36:	bd30      	pop	{r4, r5, pc}

08001f38 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001f38:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f3a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8001f3e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f40:	46a4      	mov	ip, r4
 8001f42:	2301      	movs	r3, #1
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
  return ret;
}
 8001f44:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f48:	210f      	movs	r1, #15
 8001f4a:	4760      	bx	ip

08001f4c <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	4604      	mov	r4, r0
 8001f50:	b082      	sub	sp, #8
 8001f52:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f54:	6880      	ldr	r0, [r0, #8]
 8001f56:	6866      	ldr	r6, [r4, #4]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	aa01      	add	r2, sp, #4
 8001f5c:	2120      	movs	r1, #32
 8001f5e:	47b0      	blx	r6
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8001f60:	b958      	cbnz	r0, 8001f7a <hts221_power_on_set+0x2e>
    reg.pd = val;
 8001f62:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001f66:	6826      	ldr	r6, [r4, #0]
 8001f68:	68a0      	ldr	r0, [r4, #8]
    reg.pd = val;
 8001f6a:	f365 13c7 	bfi	r3, r5, #7, #1
 8001f6e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001f72:	aa01      	add	r2, sp, #4
 8001f74:	2301      	movs	r3, #1
 8001f76:	2120      	movs	r1, #32
 8001f78:	47b0      	blx	r6
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bd70      	pop	{r4, r5, r6, pc}
 8001f7e:	bf00      	nop

08001f80 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001f80:	b530      	push	{r4, r5, lr}
 8001f82:	b083      	sub	sp, #12
 8001f84:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f86:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f10d 0207 	add.w	r2, sp, #7
 8001f90:	2130      	movs	r1, #48	@ 0x30
 8001f92:	47a8      	blx	r5
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
  *val = coeff / 2.0f;
 8001f94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8001fa0:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8001fa4:	b003      	add	sp, #12
 8001fa6:	bd30      	pop	{r4, r5, pc}

08001fa8 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001fa8:	b530      	push	{r4, r5, lr}
 8001faa:	b083      	sub	sp, #12
 8001fac:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fae:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f10d 0207 	add.w	r2, sp, #7
 8001fb8:	2131      	movs	r1, #49	@ 0x31
 8001fba:	47a8      	blx	r5
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
  *val = coeff / 2.0f;
 8001fbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8001fc8:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8001fcc:	b003      	add	sp, #12
 8001fce:	bd30      	pop	{r4, r5, pc}

08001fd0 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fd8:	6880      	ldr	r0, [r0, #8]
 8001fda:	6866      	ldr	r6, [r4, #4]
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f10d 0207 	add.w	r2, sp, #7
 8001fe2:	2132      	movs	r1, #50	@ 0x32
 8001fe4:	47b0      	blx	r6
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);

  if (ret == 0) {
 8001fe6:	b998      	cbnz	r0, 8002010 <hts221_temp_deg_point_0_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fe8:	2301      	movs	r3, #1
 8001fea:	aa01      	add	r2, sp, #4
 8001fec:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8001ff0:	2135      	movs	r1, #53	@ 0x35
 8001ff2:	47b0      	blx	r6
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
    coeff_h = reg.t0_msb;
 8001ff4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001ff8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ffc:	f002 0203 	and.w	r2, r2, #3
 8002000:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 800200c:	edc5 7a00 	vstr	s15, [r5]
  }

  return ret;
}
 8002010:	b002      	add	sp, #8
 8002012:	bd70      	pop	{r4, r5, r6, pc}

08002014 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	b082      	sub	sp, #8
 800201a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800201c:	6880      	ldr	r0, [r0, #8]
 800201e:	6866      	ldr	r6, [r4, #4]
 8002020:	2301      	movs	r3, #1
 8002022:	f10d 0207 	add.w	r2, sp, #7
 8002026:	2133      	movs	r1, #51	@ 0x33
 8002028:	47b0      	blx	r6
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);

  if (ret == 0) {
 800202a:	b998      	cbnz	r0, 8002054 <hts221_temp_deg_point_1_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800202c:	2301      	movs	r3, #1
 800202e:	aa01      	add	r2, sp, #4
 8002030:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8002034:	2135      	movs	r1, #53	@ 0x35
 8002036:	47b0      	blx	r6
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
    coeff_h = reg.t1_msb;
 8002038:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800203c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002040:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8002044:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8002050:	edc5 7a00 	vstr	s15, [r5]
  }

  return ret;
}
 8002054:	b002      	add	sp, #8
 8002056:	bd70      	pop	{r4, r5, r6, pc}

08002058 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002058:	b530      	push	{r4, r5, lr}
 800205a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800205c:	aa01      	add	r2, sp, #4
{
 800205e:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002060:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002064:	2302      	movs	r3, #2
 8002066:	2136      	movs	r1, #54	@ 0x36
 8002068:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800206a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800206e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002072:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002076:	b21b      	sxth	r3, r3
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002080:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8002084:	b003      	add	sp, #12
 8002086:	bd30      	pop	{r4, r5, pc}

08002088 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002088:	b530      	push	{r4, r5, lr}
 800208a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800208c:	aa01      	add	r2, sp, #4
{
 800208e:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002090:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002094:	2302      	movs	r3, #2
 8002096:	213a      	movs	r1, #58	@ 0x3a
 8002098:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800209a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800209e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b0:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80020b4:	b003      	add	sp, #12
 80020b6:	bd30      	pop	{r4, r5, pc}

080020b8 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80020bc:	aa01      	add	r2, sp, #4
{
 80020be:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80020c0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80020c4:	2302      	movs	r3, #2
 80020c6:	213c      	movs	r1, #60	@ 0x3c
 80020c8:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80020ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80020ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e0:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 80020e4:	b003      	add	sp, #12
 80020e6:	bd30      	pop	{r4, r5, pc}

080020e8 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80020e8:	b530      	push	{r4, r5, lr}
 80020ea:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80020ec:	aa01      	add	r2, sp, #4
{
 80020ee:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80020f0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80020f4:	2302      	movs	r3, #2
 80020f6:	213e      	movs	r1, #62	@ 0x3e
 80020f8:	47a8      	blx	r5
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80020fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80020fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002102:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *val = coeff * 1.0f;
 8002106:	b21b      	sxth	r3, r3
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002110:	edc4 7a00 	vstr	s15, [r4]
  return ret;
}
 8002114:	b003      	add	sp, #12
 8002116:	bd30      	pop	{r4, r5, pc}

08002118 <IIS2DH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2DH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DH_GetCapabilities(IIS2DH_Object_t *pObj, IIS2DH_Capabilities_t *Capabilities)
{
 8002118:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800211a:	4c07      	ldr	r4, [pc, #28]	@ (8002138 <IIS2DH_GetCapabilities+0x20>)
  Capabilities->LowPower     = 1;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 5376.0f;
 800211c:	4a07      	ldr	r2, [pc, #28]	@ (800213c <IIS2DH_GetCapabilities+0x24>)
  Capabilities->Acc          = 1;
 800211e:	600c      	str	r4, [r1, #0]
  Capabilities->GyroMaxFS    = 0;
 8002120:	2000      	movs	r0, #0
  Capabilities->GyroMaxOdr   = 0.0f;
 8002122:	2300      	movs	r3, #0
  Capabilities->AccMaxFS     = 16;
 8002124:	2410      	movs	r4, #16
 8002126:	e9c1 0401 	strd	r0, r4, [r1, #4]
  Capabilities->MagMaxOdr    = 0.0f;
  return IIS2DH_OK;
}
 800212a:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxFS     = 0;
 800212e:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002130:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 5376.0f;
 8002132:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002134:	618b      	str	r3, [r1, #24]
}
 8002136:	4770      	bx	lr
 8002138:	01000001 	.word	0x01000001
 800213c:	45a80000 	.word	0x45a80000

08002140 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002140:	b410      	push	{r4}
  IIS2DH_Object_t *pObj = (IIS2DH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002142:	6944      	ldr	r4, [r0, #20]
 8002144:	7b00      	ldrb	r0, [r0, #12]
 8002146:	46a4      	mov	ip, r4
}
 8002148:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800214c:	4760      	bx	ip
 800214e:	bf00      	nop

08002150 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002150:	b410      	push	{r4}
  IIS2DH_Object_t *pObj = (IIS2DH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002152:	6904      	ldr	r4, [r0, #16]
 8002154:	7b00      	ldrb	r0, [r0, #12]
 8002156:	46a4      	mov	ip, r4
}
 8002158:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800215c:	4760      	bx	ip
 800215e:	bf00      	nop

08002160 <IIS2DH_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 8002160:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002164:	b90b      	cbnz	r3, 800216a <IIS2DH_ACC_Disable+0xa>
    return IIS2DH_OK;
 8002166:	2000      	movs	r0, #0
}
 8002168:	4770      	bx	lr
{
 800216a:	b510      	push	{r4, lr}
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 800216c:	2100      	movs	r1, #0
 800216e:	4604      	mov	r4, r0
 8002170:	301c      	adds	r0, #28
 8002172:	f000 fbc7 	bl	8002904 <iis2dh_data_rate_set>
 8002176:	b918      	cbnz	r0, 8002180 <IIS2DH_ACC_Disable+0x20>
  pObj->acc_is_enabled = 0;
 8002178:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS2DH_OK;
 800217c:	2000      	movs	r0, #0
}
 800217e:	bd10      	pop	{r4, pc}
    return IIS2DH_ERROR;
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002184:	bd10      	pop	{r4, pc}
 8002186:	bf00      	nop

08002188 <IIS2DH_DeInit>:
{
 8002188:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 800218a:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 800218e:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8002190:	b933      	cbnz	r3, 80021a0 <IIS2DH_DeInit+0x18>
  pObj->is_initialized = 0;
 8002192:	2000      	movs	r0, #0
  pObj->acc_odr = IIS2DH_ODR_1Hz;
 8002194:	2301      	movs	r3, #1
 8002196:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pObj->is_initialized = 0;
 800219a:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 800219e:	bd10      	pop	{r4, pc}
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 80021a0:	2100      	movs	r1, #0
 80021a2:	301c      	adds	r0, #28
 80021a4:	f000 fbae 	bl	8002904 <iis2dh_data_rate_set>
 80021a8:	b910      	cbnz	r0, 80021b0 <IIS2DH_DeInit+0x28>
  pObj->acc_is_enabled = 0;
 80021aa:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS2DH_OK;
 80021ae:	e7f0      	b.n	8002192 <IIS2DH_DeInit+0xa>
    return IIS2DH_ERROR;
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	bf00      	nop

080021b8 <IIS2DH_ACC_SetFullScale>:
         : (FullScale <= 4) ? IIS2DH_4g
 80021b8:	2902      	cmp	r1, #2
{
 80021ba:	b508      	push	{r3, lr}
         : (FullScale <= 4) ? IIS2DH_4g
 80021bc:	dd06      	ble.n	80021cc <IIS2DH_ACC_SetFullScale+0x14>
 80021be:	2904      	cmp	r1, #4
 80021c0:	dd0d      	ble.n	80021de <IIS2DH_ACC_SetFullScale+0x26>
 80021c2:	2908      	cmp	r1, #8
 80021c4:	bfcc      	ite	gt
 80021c6:	2103      	movgt	r1, #3
 80021c8:	2102      	movle	r1, #2
 80021ca:	e000      	b.n	80021ce <IIS2DH_ACC_SetFullScale+0x16>
 80021cc:	2100      	movs	r1, #0
  if (iis2dh_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DH_OK)
 80021ce:	301c      	adds	r0, #28
 80021d0:	f000 fbf8 	bl	80029c4 <iis2dh_full_scale_set>
 80021d4:	3800      	subs	r0, #0
 80021d6:	bf18      	it	ne
 80021d8:	2001      	movne	r0, #1
}
 80021da:	4240      	negs	r0, r0
 80021dc:	bd08      	pop	{r3, pc}
         : (FullScale <= 4) ? IIS2DH_4g
 80021de:	2101      	movs	r1, #1
 80021e0:	e7f5      	b.n	80021ce <IIS2DH_ACC_SetFullScale+0x16>
 80021e2:	bf00      	nop

080021e4 <IIS2DH_Init>:
{
 80021e4:	b570      	push	{r4, r5, r6, lr}
  if (iis2dh_spi_mode_set(&(pObj->Ctx), IIS2DH_SPI_4_WIRE) != IIS2DH_OK)
 80021e6:	f100 041c 	add.w	r4, r0, #28
{
 80021ea:	b084      	sub	sp, #16
 80021ec:	4605      	mov	r5, r0
  if (iis2dh_spi_mode_set(&(pObj->Ctx), IIS2DH_SPI_4_WIRE) != IIS2DH_OK)
 80021ee:	2100      	movs	r1, #0
 80021f0:	4620      	mov	r0, r4
 80021f2:	f000 fc93 	bl	8002b1c <iis2dh_spi_mode_set>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d173      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  if (iis2dh_boot_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DH_OK)
 80021fa:	2101      	movs	r1, #1
 80021fc:	4620      	mov	r0, r4
 80021fe:	f000 fc73 	bl	8002ae8 <iis2dh_boot_set>
 8002202:	2800      	cmp	r0, #0
 8002204:	d16d      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002206:	2301      	movs	r3, #1
 8002208:	aa01      	add	r2, sp, #4
 800220a:	2120      	movs	r1, #32
 800220c:	4620      	mov	r0, r4
 800220e:	f000 fae3 	bl	80027d8 <iis2dh_read_reg>
  if (ret == 0) {
 8002212:	2800      	cmp	r0, #0
 8002214:	d03e      	beq.n	8002294 <IIS2DH_Init+0xb0>
  if (iis2dh_data_rate_set(&(pObj->Ctx), IIS2DH_POWER_DOWN) != IIS2DH_OK)
 8002216:	2100      	movs	r1, #0
 8002218:	4620      	mov	r0, r4
 800221a:	f000 fb73 	bl	8002904 <iis2dh_data_rate_set>
 800221e:	4601      	mov	r1, r0
 8002220:	2800      	cmp	r0, #0
 8002222:	d15e      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  if (iis2dh_temperature_meas_set(&(pObj->Ctx), IIS2DH_TEMP_DISABLE) != IIS2DH_OK)
 8002224:	4620      	mov	r0, r4
 8002226:	f000 fae7 	bl	80027f8 <iis2dh_temperature_meas_set>
 800222a:	4601      	mov	r1, r0
 800222c:	2800      	cmp	r0, #0
 800222e:	d158      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  if (iis2dh_high_pass_on_outputs_set(&(pObj->Ctx), 0) != IIS2DH_OK)
 8002230:	4620      	mov	r0, r4
 8002232:	f000 fbad 	bl	8002990 <iis2dh_high_pass_on_outputs_set>
 8002236:	2800      	cmp	r0, #0
 8002238:	d153      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  if (iis2dh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DH_OK)
 800223a:	2101      	movs	r1, #1
 800223c:	4620      	mov	r0, r4
 800223e:	f000 fbf5 	bl	8002a2c <iis2dh_block_data_update_set>
 8002242:	4601      	mov	r1, r0
 8002244:	2800      	cmp	r0, #0
 8002246:	d14c      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  if (iis2dh_data_format_set(&(pObj->Ctx), IIS2DH_LSB_AT_LOW_ADD) != IIS2DH_OK)
 8002248:	4620      	mov	r0, r4
 800224a:	f000 fc33 	bl	8002ab4 <iis2dh_data_format_set>
 800224e:	4601      	mov	r1, r0
 8002250:	2800      	cmp	r0, #0
 8002252:	d146      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  if (iis2dh_full_scale_set(&(pObj->Ctx), IIS2DH_2g) != IIS2DH_OK)
 8002254:	4620      	mov	r0, r4
 8002256:	f000 fbb5 	bl	80029c4 <iis2dh_full_scale_set>
 800225a:	2800      	cmp	r0, #0
 800225c:	d141      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_LP_8bit) != IIS2DH_OK)
 800225e:	2102      	movs	r1, #2
 8002260:	4620      	mov	r0, r4
 8002262:	f000 fae3 	bl	800282c <iis2dh_operating_mode_set>
 8002266:	4606      	mov	r6, r0
 8002268:	2800      	cmp	r0, #0
 800226a:	d13a      	bne.n	80022e2 <IIS2DH_Init+0xfe>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 800226c:	2301      	movs	r3, #1
 800226e:	aa02      	add	r2, sp, #8
 8002270:	2122      	movs	r1, #34	@ 0x22
 8002272:	4620      	mov	r0, r4
 8002274:	f000 fab0 	bl	80027d8 <iis2dh_read_reg>
  if (ret == 0) {
 8002278:	b330      	cbz	r0, 80022c8 <IIS2DH_Init+0xe4>
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 800227a:	2301      	movs	r3, #1
 800227c:	aa03      	add	r2, sp, #12
 800227e:	2124      	movs	r1, #36	@ 0x24
 8002280:	4620      	mov	r0, r4
 8002282:	f000 faa9 	bl	80027d8 <iis2dh_read_reg>
  if (ret == 0) {
 8002286:	b190      	cbz	r0, 80022ae <IIS2DH_Init+0xca>
  pObj->is_initialized = 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4630      	mov	r0, r6
  pObj->is_initialized = 1;
 800228c:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 8002290:	b004      	add	sp, #16
 8002292:	bd70      	pop	{r4, r5, r6, pc}
    ctrl_reg1.xen = 0;
 8002294:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002298:	f021 0107 	bic.w	r1, r1, #7
 800229c:	f88d 1004 	strb.w	r1, [sp, #4]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80022a0:	2301      	movs	r3, #1
 80022a2:	aa01      	add	r2, sp, #4
 80022a4:	2120      	movs	r1, #32
 80022a6:	4620      	mov	r0, r4
 80022a8:	f000 fa9e 	bl	80027e8 <iis2dh_write_reg>
 80022ac:	e7b3      	b.n	8002216 <IIS2DH_Init+0x32>
    ctrl_reg5.lir_int1 = 1;
 80022ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	f88d 300c 	strb.w	r3, [sp, #12]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 80022ba:	aa03      	add	r2, sp, #12
 80022bc:	4620      	mov	r0, r4
 80022be:	2301      	movs	r3, #1
 80022c0:	2124      	movs	r1, #36	@ 0x24
 80022c2:	f000 fa91 	bl	80027e8 <iis2dh_write_reg>
 80022c6:	e7df      	b.n	8002288 <IIS2DH_Init+0xa4>
    ctrl_reg3.i1_drdy1 = 1;
 80022c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	f88d 3008 	strb.w	r3, [sp, #8]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 80022d4:	aa02      	add	r2, sp, #8
 80022d6:	2301      	movs	r3, #1
 80022d8:	2122      	movs	r1, #34	@ 0x22
 80022da:	4620      	mov	r0, r4
 80022dc:	f000 fa84 	bl	80027e8 <iis2dh_write_reg>
 80022e0:	e7cb      	b.n	800227a <IIS2DH_Init+0x96>
    return IIS2DH_ERROR;
 80022e2:	f04f 36ff 	mov.w	r6, #4294967295
}
 80022e6:	4630      	mov	r0, r6
 80022e8:	b004      	add	sp, #16
 80022ea:	bd70      	pop	{r4, r5, r6, pc}

080022ec <IIS2DH_ACC_SetOutputDataRate>:
{
 80022ec:	b510      	push	{r4, lr}
 80022ee:	ed2d 8b02 	vpush	{d8}
  if (pObj->acc_is_enabled == 1U)
 80022f2:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 80022f6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->acc_is_enabled == 1U)
 80022fa:	2901      	cmp	r1, #1
{
 80022fc:	eeb0 8a40 	vmov.f32	s16, s0
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002300:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8002304:	d043      	beq.n	800238e <IIS2DH_ACC_SetOutputDataRate+0xa2>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	d937      	bls.n	800237c <IIS2DH_ACC_SetOutputDataRate+0x90>
 800230c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002310:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	d937      	bls.n	800238a <IIS2DH_ACC_SetOutputDataRate+0x9e>
 800231a:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 800231e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	f240 8085 	bls.w	8002434 <IIS2DH_ACC_SetOutputDataRate+0x148>
 800232a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8002474 <IIS2DH_ACC_SetOutputDataRate+0x188>
 800232e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	f240 808a 	bls.w	800244e <IIS2DH_ACC_SetOutputDataRate+0x162>
 800233a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8002478 <IIS2DH_ACC_SetOutputDataRate+0x18c>
 800233e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	f240 8086 	bls.w	8002456 <IIS2DH_ACC_SetOutputDataRate+0x16a>
 800234a:	eddf 7a4c 	vldr	s15, [pc, #304]	@ 800247c <IIS2DH_ACC_SetOutputDataRate+0x190>
 800234e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	f240 8082 	bls.w	800245e <IIS2DH_ACC_SetOutputDataRate+0x172>
 800235a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8002480 <IIS2DH_ACC_SetOutputDataRate+0x194>
 800235e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	d97e      	bls.n	8002466 <IIS2DH_ACC_SetOutputDataRate+0x17a>
 8002368:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8002484 <IIS2DH_ACC_SetOutputDataRate+0x198>
 800236c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	bf94      	ite	ls
 8002376:	2308      	movls	r3, #8
 8002378:	2309      	movhi	r3, #9
 800237a:	e000      	b.n	800237e <IIS2DH_ACC_SetOutputDataRate+0x92>
 800237c:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 800237e:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    return IIS2DH_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002382:	2000      	movs	r0, #0
}
 8002384:	ecbd 8b02 	vpop	{d8}
 8002388:	bd10      	pop	{r4, pc}
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800238a:	2302      	movs	r3, #2
 800238c:	e7f7      	b.n	800237e <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	d932      	bls.n	80023fa <IIS2DH_ACC_SetOutputDataRate+0x10e>
 8002394:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002398:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a0:	d953      	bls.n	800244a <IIS2DH_ACC_SetOutputDataRate+0x15e>
 80023a2:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 80023a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d950      	bls.n	8002452 <IIS2DH_ACC_SetOutputDataRate+0x166>
 80023b0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8002474 <IIS2DH_ACC_SetOutputDataRate+0x188>
 80023b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d94d      	bls.n	800245a <IIS2DH_ACC_SetOutputDataRate+0x16e>
 80023be:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 8002478 <IIS2DH_ACC_SetOutputDataRate+0x18c>
 80023c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d94a      	bls.n	8002462 <IIS2DH_ACC_SetOutputDataRate+0x176>
 80023cc:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800247c <IIS2DH_ACC_SetOutputDataRate+0x190>
 80023d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d947      	bls.n	800246a <IIS2DH_ACC_SetOutputDataRate+0x17e>
 80023da:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8002480 <IIS2DH_ACC_SetOutputDataRate+0x194>
 80023de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	d942      	bls.n	800246e <IIS2DH_ACC_SetOutputDataRate+0x182>
 80023e8:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8002484 <IIS2DH_ACC_SetOutputDataRate+0x198>
 80023ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	bf94      	ite	ls
 80023f6:	2108      	movls	r1, #8
 80023f8:	2109      	movhi	r1, #9
  if (iis2dh_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DH_OK)
 80023fa:	f100 041c 	add.w	r4, r0, #28
 80023fe:	4620      	mov	r0, r4
 8002400:	f000 fa80 	bl	8002904 <iis2dh_data_rate_set>
 8002404:	b9f0      	cbnz	r0, 8002444 <IIS2DH_ACC_SetOutputDataRate+0x158>
  if (Odr <= 1.6f)
 8002406:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8002488 <IIS2DH_ACC_SetOutputDataRate+0x19c>
 800240a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	d911      	bls.n	8002438 <IIS2DH_ACC_SetOutputDataRate+0x14c>
  if (Odr > 200.0f)
 8002414:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800247c <IIS2DH_ACC_SetOutputDataRate+0x190>
 8002418:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	ddaf      	ble.n	8002382 <IIS2DH_ACC_SetOutputDataRate+0x96>
    if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_HR_12bit) != IIS2DH_OK)
 8002422:	2100      	movs	r1, #0
 8002424:	4620      	mov	r0, r4
 8002426:	f000 fa01 	bl	800282c <iis2dh_operating_mode_set>
 800242a:	3800      	subs	r0, #0
 800242c:	bf18      	it	ne
 800242e:	2001      	movne	r0, #1
 8002430:	4240      	negs	r0, r0
 8002432:	e7a7      	b.n	8002384 <IIS2DH_ACC_SetOutputDataRate+0x98>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002434:	2303      	movs	r3, #3
 8002436:	e7a2      	b.n	800237e <IIS2DH_ACC_SetOutputDataRate+0x92>
    if (iis2dh_operating_mode_set(&(pObj->Ctx), IIS2DH_LP_8bit) != IIS2DH_OK)
 8002438:	2102      	movs	r1, #2
 800243a:	4620      	mov	r0, r4
 800243c:	f000 f9f6 	bl	800282c <iis2dh_operating_mode_set>
 8002440:	2800      	cmp	r0, #0
 8002442:	d0e7      	beq.n	8002414 <IIS2DH_ACC_SetOutputDataRate+0x128>
    return IIS2DH_ERROR;
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	e79c      	b.n	8002384 <IIS2DH_ACC_SetOutputDataRate+0x98>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800244a:	2102      	movs	r1, #2
 800244c:	e7d5      	b.n	80023fa <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800244e:	2304      	movs	r3, #4
 8002450:	e795      	b.n	800237e <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002452:	2103      	movs	r1, #3
 8002454:	e7d1      	b.n	80023fa <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002456:	2305      	movs	r3, #5
 8002458:	e791      	b.n	800237e <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800245a:	2104      	movs	r1, #4
 800245c:	e7cd      	b.n	80023fa <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800245e:	2306      	movs	r3, #6
 8002460:	e78d      	b.n	800237e <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002462:	2105      	movs	r1, #5
 8002464:	e7c9      	b.n	80023fa <IIS2DH_ACC_SetOutputDataRate+0x10e>
                : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 8002466:	2307      	movs	r3, #7
 8002468:	e789      	b.n	800237e <IIS2DH_ACC_SetOutputDataRate+0x92>
          : (Odr <=   10.0f) ? IIS2DH_ODR_10Hz                    
 800246a:	2106      	movs	r1, #6
 800246c:	e7c5      	b.n	80023fa <IIS2DH_ACC_SetOutputDataRate+0x10e>
 800246e:	2107      	movs	r1, #7
 8002470:	e7c3      	b.n	80023fa <IIS2DH_ACC_SetOutputDataRate+0x10e>
 8002472:	bf00      	nop
 8002474:	42480000 	.word	0x42480000
 8002478:	42c80000 	.word	0x42c80000
 800247c:	43480000 	.word	0x43480000
 8002480:	43c80000 	.word	0x43c80000
 8002484:	44ca8000 	.word	0x44ca8000
 8002488:	3fcccccd 	.word	0x3fcccccd

0800248c <IIS2DH_ReadID>:
{
 800248c:	b508      	push	{r3, lr}
  if (iis2dh_device_id_get(&(pObj->Ctx), Id) != IIS2DH_OK)
 800248e:	301c      	adds	r0, #28
 8002490:	f000 fb06 	bl	8002aa0 <iis2dh_device_id_get>
 8002494:	3800      	subs	r0, #0
 8002496:	bf18      	it	ne
 8002498:	2001      	movne	r0, #1
}
 800249a:	4240      	negs	r0, r0
 800249c:	bd08      	pop	{r3, pc}
 800249e:	bf00      	nop

080024a0 <IIS2DH_ACC_GetFullScale>:
{
 80024a0:	b510      	push	{r4, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	460c      	mov	r4, r1
  if (iis2dh_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DH_OK)
 80024a6:	301c      	adds	r0, #28
 80024a8:	f10d 0107 	add.w	r1, sp, #7
 80024ac:	f000 faa4 	bl	80029f8 <iis2dh_full_scale_get>
 80024b0:	b9a0      	cbnz	r0, 80024dc <IIS2DH_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 80024b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d80d      	bhi.n	80024d6 <IIS2DH_ACC_GetFullScale+0x36>
 80024ba:	e8df f003 	tbb	[pc, r3]
 80024be:	0206      	.short	0x0206
 80024c0:	080a      	.short	0x080a
 80024c2:	2304      	movs	r3, #4
      *FullScale =  2;
 80024c4:	6023      	str	r3, [r4, #0]
}
 80024c6:	b002      	add	sp, #8
 80024c8:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 80024ca:	2302      	movs	r3, #2
 80024cc:	e7fa      	b.n	80024c4 <IIS2DH_ACC_GetFullScale+0x24>
      break;
 80024ce:	2310      	movs	r3, #16
 80024d0:	e7f8      	b.n	80024c4 <IIS2DH_ACC_GetFullScale+0x24>
      break;
 80024d2:	2308      	movs	r3, #8
 80024d4:	e7f6      	b.n	80024c4 <IIS2DH_ACC_GetFullScale+0x24>
      *FullScale = -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	6023      	str	r3, [r4, #0]
    return IIS2DH_ERROR;
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80024e0:	b002      	add	sp, #8
 80024e2:	bd10      	pop	{r4, pc}

080024e4 <IIS2DH_ACC_GetSensitivity>:
{
 80024e4:	b530      	push	{r4, r5, lr}
  if (iis2dh_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DH_OK)
 80024e6:	f100 041c 	add.w	r4, r0, #28
{
 80024ea:	b083      	sub	sp, #12
 80024ec:	460d      	mov	r5, r1
  if (iis2dh_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DH_OK)
 80024ee:	4620      	mov	r0, r4
 80024f0:	f10d 0106 	add.w	r1, sp, #6
 80024f4:	f000 fa80 	bl	80029f8 <iis2dh_full_scale_get>
 80024f8:	b970      	cbnz	r0, 8002518 <IIS2DH_ACC_GetSensitivity+0x34>
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &mode) != IIS2DH_OK)
 80024fa:	f10d 0107 	add.w	r1, sp, #7
 80024fe:	4620      	mov	r0, r4
 8002500:	f000 f9e0 	bl	80028c4 <iis2dh_operating_mode_get>
 8002504:	b940      	cbnz	r0, 8002518 <IIS2DH_ACC_GetSensitivity+0x34>
  switch(mode)
 8002506:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d018      	beq.n	8002540 <IIS2DH_ACC_GetSensitivity+0x5c>
 800250e:	2b02      	cmp	r3, #2
 8002510:	d00e      	beq.n	8002530 <IIS2DH_ACC_GetSensitivity+0x4c>
 8002512:	b12b      	cbz	r3, 8002520 <IIS2DH_ACC_GetSensitivity+0x3c>
      *Sensitivity = -1.0f;
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <IIS2DH_ACC_GetSensitivity+0x98>)
 8002516:	602b      	str	r3, [r5, #0]
    return IIS2DH_ERROR;
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
}
 800251c:	b003      	add	sp, #12
 800251e:	bd30      	pop	{r4, r5, pc}
    switch (full_scale)
 8002520:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d8f5      	bhi.n	8002514 <IIS2DH_ACC_GetSensitivity+0x30>
 8002528:	e8df f003 	tbb	[pc, r3]
 800252c:	1d151f1b 	.word	0x1d151f1b
    switch (full_scale)
 8002530:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d8ed      	bhi.n	8002514 <IIS2DH_ACC_GetSensitivity+0x30>
 8002538:	e8df f003 	tbb	[pc, r3]
 800253c:	1d1b0f0a 	.word	0x1d1b0f0a
    switch (full_scale)
 8002540:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d8e5      	bhi.n	8002514 <IIS2DH_ACC_GetSensitivity+0x30>
 8002548:	e8df f003 	tbb	[pc, r3]
 800254c:	11020905 	.word	0x11020905
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <IIS2DH_ACC_GetSensitivity+0x9c>)
      *Sensitivity = IIS2DH_ACC_SENSITIVITY_8G_LPM;
 8002552:	602b      	str	r3, [r5, #0]
 8002554:	e7e2      	b.n	800251c <IIS2DH_ACC_GetSensitivity+0x38>
 8002556:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <IIS2DH_ACC_GetSensitivity+0xa0>)
 8002558:	e7fb      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
 800255a:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <IIS2DH_ACC_GetSensitivity+0xa4>)
 800255c:	e7f9      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
 800255e:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <IIS2DH_ACC_GetSensitivity+0xa8>)
 8002560:	e7f7      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
 8002562:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <IIS2DH_ACC_GetSensitivity+0xac>)
 8002564:	e7f5      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 8002566:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <IIS2DH_ACC_GetSensitivity+0xb0>)
 8002568:	e7f3      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <IIS2DH_ACC_GetSensitivity+0xb4>)
 800256c:	e7f1      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <IIS2DH_ACC_GetSensitivity+0xb8>)
 8002570:	e7ef      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <IIS2DH_ACC_GetSensitivity+0xbc>)
 8002574:	e7ed      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
      break;
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <IIS2DH_ACC_GetSensitivity+0xc0>)
 8002578:	e7eb      	b.n	8002552 <IIS2DH_ACC_GetSensitivity+0x6e>
 800257a:	bf00      	nop
 800257c:	bf800000 	.word	0xbf800000
 8002580:	417a147b 	.word	0x417a147b
 8002584:	407a3d71 	.word	0x407a3d71
 8002588:	41fa0000 	.word	0x41fa0000
 800258c:	40f9eb85 	.word	0x40f9eb85
 8002590:	3f7ae148 	.word	0x3f7ae148
 8002594:	413b851f 	.word	0x413b851f
 8002598:	3ff9999a 	.word	0x3ff9999a
 800259c:	423bcccd 	.word	0x423bcccd
 80025a0:	427a0000 	.word	0x427a0000
 80025a4:	433cae14 	.word	0x433cae14

080025a8 <IIS2DH_ACC_GetOutputDataRate>:
{
 80025a8:	b510      	push	{r4, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	460c      	mov	r4, r1
  if (iis2dh_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DH_OK)
 80025ae:	301c      	adds	r0, #28
 80025b0:	f10d 0107 	add.w	r1, sp, #7
 80025b4:	f000 f9c0 	bl	8002938 <iis2dh_data_rate_get>
 80025b8:	bb18      	cbnz	r0, 8002602 <IIS2DH_ACC_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 80025ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025be:	2b09      	cmp	r3, #9
 80025c0:	d81d      	bhi.n	80025fe <IIS2DH_ACC_GetOutputDataRate+0x56>
 80025c2:	e8df f003 	tbb	[pc, r3]
 80025c6:	050a      	.short	0x050a
 80025c8:	1816140c 	.word	0x1816140c
 80025cc:	0e12101a 	.word	0x0e12101a
 80025d0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    *odr =  0.0f;
 80025d4:	6023      	str	r3, [r4, #0]
}
 80025d6:	b002      	add	sp, #8
 80025d8:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 80025da:	2300      	movs	r3, #0
 80025dc:	e7fa      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <IIS2DH_ACC_GetOutputDataRate+0x60>)
 80025e0:	e7f8      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 80025e2:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <IIS2DH_ACC_GetOutputDataRate+0x64>)
 80025e4:	e7f6      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <IIS2DH_ACC_GetOutputDataRate+0x68>)
 80025e8:	e7f4      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <IIS2DH_ACC_GetOutputDataRate+0x6c>)
 80025ec:	e7f2      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 80025ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <IIS2DH_ACC_GetOutputDataRate+0x70>)
 80025f0:	e7f0      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <IIS2DH_ACC_GetOutputDataRate+0x74>)
 80025f4:	e7ee      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <IIS2DH_ACC_GetOutputDataRate+0x78>)
 80025f8:	e7ec      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    break;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <IIS2DH_ACC_GetOutputDataRate+0x7c>)
 80025fc:	e7ea      	b.n	80025d4 <IIS2DH_ACC_GetOutputDataRate+0x2c>
    *odr = -1.0f;
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <IIS2DH_ACC_GetOutputDataRate+0x80>)
 8002600:	6023      	str	r3, [r4, #0]
    return IIS2DH_ERROR;
 8002602:	f04f 30ff 	mov.w	r0, #4294967295
 8002606:	e7e6      	b.n	80025d6 <IIS2DH_ACC_GetOutputDataRate+0x2e>
 8002608:	41200000 	.word	0x41200000
 800260c:	44a80000 	.word	0x44a80000
 8002610:	43c80000 	.word	0x43c80000
 8002614:	44ca8000 	.word	0x44ca8000
 8002618:	41c80000 	.word	0x41c80000
 800261c:	42480000 	.word	0x42480000
 8002620:	42c80000 	.word	0x42c80000
 8002624:	43480000 	.word	0x43480000
 8002628:	bf800000 	.word	0xbf800000

0800262c <IIS2DH_ACC_GetAxesRaw>:
{
 800262c:	b530      	push	{r4, r5, lr}
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 800262e:	f100 051c 	add.w	r5, r0, #28
{
 8002632:	b085      	sub	sp, #20
 8002634:	460c      	mov	r4, r1
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 8002636:	4628      	mov	r0, r5
 8002638:	f10d 0107 	add.w	r1, sp, #7
 800263c:	f000 f942 	bl	80028c4 <iis2dh_operating_mode_get>
 8002640:	b9e0      	cbnz	r0, 800267c <IIS2DH_ACC_GetAxesRaw+0x50>
  switch (op_mode)
 8002642:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d818      	bhi.n	800267c <IIS2DH_ACC_GetAxesRaw+0x50>
 800264a:	4a0e      	ldr	r2, [pc, #56]	@ (8002684 <IIS2DH_ACC_GetAxesRaw+0x58>)
  if (iis2dh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DH_OK)
 800264c:	4628      	mov	r0, r5
 800264e:	a902      	add	r1, sp, #8
 8002650:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8002654:	f000 fa04 	bl	8002a60 <iis2dh_acceleration_raw_get>
 8002658:	b980      	cbnz	r0, 800267c <IIS2DH_ACC_GetAxesRaw+0x50>
  Value->x = (data_raw.i16bit[0] / divisor);
 800265a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Value->y = (data_raw.i16bit[1] / divisor);
 800265e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Value->x = (data_raw.i16bit[0] / divisor);
 8002662:	fb92 f2f5 	sdiv	r2, r2, r5
  Value->y = (data_raw.i16bit[1] / divisor);
 8002666:	fb93 f3f5 	sdiv	r3, r3, r5
  Value->x = (data_raw.i16bit[0] / divisor);
 800266a:	8022      	strh	r2, [r4, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 800266c:	8063      	strh	r3, [r4, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 800266e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002672:	fb93 f3f5 	sdiv	r3, r3, r5
 8002676:	80a3      	strh	r3, [r4, #4]
}
 8002678:	b005      	add	sp, #20
 800267a:	bd30      	pop	{r4, r5, pc}
    return IIS2DH_ERROR;
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	e7fa      	b.n	8002678 <IIS2DH_ACC_GetAxesRaw+0x4c>
 8002682:	bf00      	nop
 8002684:	080153f4 	.word	0x080153f4

08002688 <IIS2DH_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8002688:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 800268c:	2b01      	cmp	r3, #1
 800268e:	d023      	beq.n	80026d8 <IIS2DH_ACC_Enable+0x50>
{
 8002690:	b530      	push	{r4, r5, lr}
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 8002692:	2309      	movs	r3, #9
{
 8002694:	b083      	sub	sp, #12
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8002696:	f100 051c 	add.w	r5, r0, #28
  pObj->acc_odr = (Odr <=    1.0f) ? IIS2DH_ODR_1Hz                                  
 800269a:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
  ret = iis2dh_read_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800269e:	4604      	mov	r4, r0
 80026a0:	2301      	movs	r3, #1
 80026a2:	aa01      	add	r2, sp, #4
 80026a4:	2120      	movs	r1, #32
 80026a6:	4628      	mov	r0, r5
 80026a8:	f000 f896 	bl	80027d8 <iis2dh_read_reg>
  if (ret == 0) {
 80026ac:	b128      	cbz	r0, 80026ba <IIS2DH_ACC_Enable+0x32>
  pObj->acc_is_enabled = 1;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	2000      	movs	r0, #0
  pObj->acc_is_enabled = 1;
 80026b2:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
}
 80026b6:	b003      	add	sp, #12
 80026b8:	bd30      	pop	{r4, r5, pc}
    ctrl_reg1.xen = 1;
 80026ba:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80026be:	f021 0107 	bic.w	r1, r1, #7
 80026c2:	f041 0107 	orr.w	r1, r1, #7
 80026c6:	f88d 1004 	strb.w	r1, [sp, #4]
    (void)iis2dh_write_reg(&(pObj->Ctx), IIS2DH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80026ca:	2301      	movs	r3, #1
 80026cc:	aa01      	add	r2, sp, #4
 80026ce:	4628      	mov	r0, r5
 80026d0:	2120      	movs	r1, #32
 80026d2:	f000 f889 	bl	80027e8 <iis2dh_write_reg>
 80026d6:	e7ea      	b.n	80026ae <IIS2DH_ACC_Enable+0x26>
}
 80026d8:	2000      	movs	r0, #0
 80026da:	4770      	bx	lr

080026dc <IIS2DH_ACC_GetAxes>:
{
 80026dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 80026e0:	f100 051c 	add.w	r5, r0, #28
{
 80026e4:	b084      	sub	sp, #16
 80026e6:	4604      	mov	r4, r0
  float sensitivity = 0.0f;
 80026e8:	2300      	movs	r3, #0
{
 80026ea:	460e      	mov	r6, r1
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 80026ec:	4628      	mov	r0, r5
 80026ee:	f10d 0103 	add.w	r1, sp, #3
  float sensitivity = 0.0f;
 80026f2:	9301      	str	r3, [sp, #4]
  if (iis2dh_operating_mode_get(&(pObj->Ctx), &op_mode) != IIS2DH_OK)
 80026f4:	f000 f8e6 	bl	80028c4 <iis2dh_operating_mode_get>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d142      	bne.n	8002782 <IIS2DH_ACC_GetAxes+0xa6>
  switch (op_mode)
 80026fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d83e      	bhi.n	8002782 <IIS2DH_ACC_GetAxes+0xa6>
 8002704:	4a20      	ldr	r2, [pc, #128]	@ (8002788 <IIS2DH_ACC_GetAxes+0xac>)
  if (iis2dh_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DH_OK)
 8002706:	4628      	mov	r0, r5
 8002708:	a902      	add	r1, sp, #8
 800270a:	f932 8013 	ldrsh.w	r8, [r2, r3, lsl #1]
 800270e:	f000 f9a7 	bl	8002a60 <iis2dh_acceleration_raw_get>
 8002712:	bbb0      	cbnz	r0, 8002782 <IIS2DH_ACC_GetAxes+0xa6>
  if (IIS2DH_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DH_OK)
 8002714:	4620      	mov	r0, r4
 8002716:	a901      	add	r1, sp, #4
  Value->x = (data_raw.i16bit[0] / divisor);
 8002718:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Value->y = (data_raw.i16bit[1] / divisor);
 800271c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Value->x = (data_raw.i16bit[0] / divisor);
 8002720:	fb92 f2f8 	sdiv	r2, r2, r8
  Value->y = (data_raw.i16bit[1] / divisor);
 8002724:	fb93 f3f8 	sdiv	r3, r3, r8
  Value->x = (data_raw.i16bit[0] / divisor);
 8002728:	b217      	sxth	r7, r2
  Value->y = (data_raw.i16bit[1] / divisor);
 800272a:	b21d      	sxth	r5, r3
  Value->z = (data_raw.i16bit[2] / divisor);
 800272c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002730:	fb93 f3f8 	sdiv	r3, r3, r8
 8002734:	b21c      	sxth	r4, r3
  if (IIS2DH_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DH_OK)
 8002736:	f7ff fed5 	bl	80024e4 <IIS2DH_ACC_GetSensitivity>
 800273a:	bb10      	cbnz	r0, 8002782 <IIS2DH_ACC_GetAxes+0xa6>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800273c:	ee07 7a90 	vmov	s15, r7
 8002740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002744:	ee07 5a90 	vmov	s15, r5
 8002748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800274c:	ee07 4a90 	vmov	s15, r4
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002750:	ed9d 6a01 	vldr	s12, [sp, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002758:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800275c:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002760:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002764:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002768:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800276c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002770:	edc6 6a00 	vstr	s13, [r6]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002774:	ed86 7a01 	vstr	s14, [r6, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002778:	edc6 7a02 	vstr	s15, [r6, #8]
}
 800277c:	b004      	add	sp, #16
 800277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return IIS2DH_ERROR;
 8002782:	f04f 30ff 	mov.w	r0, #4294967295
 8002786:	e7f9      	b.n	800277c <IIS2DH_ACC_GetAxes+0xa0>
 8002788:	080153f4 	.word	0x080153f4

0800278c <IIS2DH_RegisterBusIO>:
  if (pObj == NULL)
 800278c:	b1e0      	cbz	r0, 80027c8 <IIS2DH_RegisterBusIO+0x3c>
{
 800278e:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8002790:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8002794:	688a      	ldr	r2, [r1, #8]
 8002796:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8002798:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 800279c:	7b0a      	ldrb	r2, [r1, #12]
 800279e:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80027a0:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 80027a4:	6989      	ldr	r1, [r1, #24]
 80027a6:	6181      	str	r1, [r0, #24]
 80027a8:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80027aa:	4909      	ldr	r1, [pc, #36]	@ (80027d0 <IIS2DH_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 80027ac:	4a09      	ldr	r2, [pc, #36]	@ (80027d4 <IIS2DH_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80027ae:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 80027b0:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 80027b4:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 80027b6:	b113      	cbz	r3, 80027be <IIS2DH_RegisterBusIO+0x32>
}
 80027b8:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 80027bc:	4718      	bx	r3
}
 80027be:	f04f 30ff 	mov.w	r0, #4294967295
 80027c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	08002141 	.word	0x08002141
 80027d4:	08002151 	.word	0x08002151

080027d8 <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 80027d8:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027da:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80027de:	46a4      	mov	ip, r4
  return ret;
}
 80027e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027e4:	4760      	bx	ip
 80027e6:	bf00      	nop

080027e8 <iis2dh_write_reg>:
  *
  */
int32_t iis2dh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80027e8:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027ea:	6804      	ldr	r4, [r0, #0]
 80027ec:	6880      	ldr	r0, [r0, #8]
 80027ee:	46a4      	mov	ip, r4
  return ret;
}
 80027f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027f4:	4760      	bx	ip
 80027f6:	bf00      	nop

080027f8 <iis2dh_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_temperature_meas_set(stmdev_ctx_t *ctx,
                                    iis2dh_temp_en_t val)
{
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	4604      	mov	r4, r0
 80027fc:	b082      	sub	sp, #8
 80027fe:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002800:	6880      	ldr	r0, [r0, #8]
 8002802:	6866      	ldr	r6, [r4, #4]
 8002804:	2301      	movs	r3, #1
 8002806:	aa01      	add	r2, sp, #4
 8002808:	211f      	movs	r1, #31
 800280a:	47b0      	blx	r6
  iis2dh_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_TEMP_CFG_REG,
                        (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0) {
 800280c:	b958      	cbnz	r0, 8002826 <iis2dh_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
 800280e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002812:	6826      	ldr	r6, [r4, #0]
 8002814:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
 8002816:	f365 1387 	bfi	r3, r5, #6, #2
 800281a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800281e:	aa01      	add	r2, sp, #4
 8002820:	2301      	movs	r3, #1
 8002822:	211f      	movs	r1, #31
 8002824:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_TEMP_CFG_REG,
                           (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
}
 8002826:	b002      	add	sp, #8
 8002828:	bd70      	pop	{r4, r5, r6, pc}
 800282a:	bf00      	nop

0800282c <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	4604      	mov	r4, r0
 8002830:	b082      	sub	sp, #8
 8002832:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002834:	6880      	ldr	r0, [r0, #8]
 8002836:	6866      	ldr	r6, [r4, #4]
 8002838:	2301      	movs	r3, #1
 800283a:	466a      	mov	r2, sp
 800283c:	2120      	movs	r1, #32
 800283e:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 8002840:	bb10      	cbnz	r0, 8002888 <iis2dh_operating_mode_set+0x5c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002842:	68a0      	ldr	r0, [r4, #8]
 8002844:	6866      	ldr	r6, [r4, #4]
 8002846:	2301      	movs	r3, #1
 8002848:	aa01      	add	r2, sp, #4
 800284a:	2123      	movs	r1, #35	@ 0x23
 800284c:	47b0      	blx	r6
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                          1);
  }

  if (ret == 0) {
 800284e:	b9d8      	cbnz	r0, 8002888 <iis2dh_operating_mode_set+0x5c>
    if ( val == IIS2DH_HR_12bit ) {
 8002850:	b1e5      	cbz	r5, 800288c <iis2dh_operating_mode_set+0x60>
      ctrl_reg1.lpen = 0;
      ctrl_reg4.hr   = 1;
    }

    if (val == IIS2DH_NM_10bit) {
 8002852:	2d01      	cmp	r5, #1
 8002854:	d127      	bne.n	80028a6 <iis2dh_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
 8002856:	f89d 3000 	ldrb.w	r3, [sp]
 800285a:	f360 03c3 	bfi	r3, r0, #3, #1
 800285e:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
 8002862:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002866:	f360 03c3 	bfi	r3, r0, #3, #1
 800286a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800286e:	6825      	ldr	r5, [r4, #0]
 8002870:	68a0      	ldr	r0, [r4, #8]
 8002872:	2301      	movs	r3, #1
 8002874:	466a      	mov	r2, sp
 8002876:	2120      	movs	r1, #32
 8002878:	47a8      	blx	r5

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                           1);
  }

  if (ret == 0) {
 800287a:	b928      	cbnz	r0, 8002888 <iis2dh_operating_mode_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800287c:	6825      	ldr	r5, [r4, #0]
 800287e:	68a0      	ldr	r0, [r4, #8]
 8002880:	2301      	movs	r3, #1
 8002882:	aa01      	add	r2, sp, #4
 8002884:	2123      	movs	r1, #35	@ 0x23
 8002886:	47a8      	blx	r5
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002888:	b002      	add	sp, #8
 800288a:	bd70      	pop	{r4, r5, r6, pc}
      ctrl_reg1.lpen = 0;
 800288c:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
 8002890:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
 8002894:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
 8002898:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
 800289c:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
 80028a0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == IIS2DH_LP_8bit) {
 80028a4:	e7e3      	b.n	800286e <iis2dh_operating_mode_set+0x42>
 80028a6:	2d02      	cmp	r5, #2
 80028a8:	d1e1      	bne.n	800286e <iis2dh_operating_mode_set+0x42>
      ctrl_reg1.lpen = 1;
 80028aa:	f89d 3000 	ldrb.w	r3, [sp]
 80028ae:	f043 0308 	orr.w	r3, r3, #8
 80028b2:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
 80028b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028ba:	f360 03c3 	bfi	r3, r0, #3, #1
 80028be:	f88d 3004 	strb.w	r3, [sp, #4]
 80028c2:	e7d4      	b.n	800286e <iis2dh_operating_mode_set+0x42>

080028c4 <iis2dh_operating_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_get(stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t *val)
{
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	4604      	mov	r4, r0
 80028c8:	b082      	sub	sp, #8
 80028ca:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028cc:	6880      	ldr	r0, [r0, #8]
 80028ce:	6866      	ldr	r6, [r4, #4]
 80028d0:	2301      	movs	r3, #1
 80028d2:	466a      	mov	r2, sp
 80028d4:	2120      	movs	r1, #32
 80028d6:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 80028d8:	b988      	cbnz	r0, 80028fe <iis2dh_operating_mode_get+0x3a>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028da:	2301      	movs	r3, #1
 80028dc:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80028e0:	aa01      	add	r2, sp, #4
 80028e2:	2123      	movs	r1, #35	@ 0x23
 80028e4:	47b0      	blx	r6
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                          1);

    if ( ctrl_reg1.lpen == PROPERTY_ENABLE ) {
 80028e6:	f89d 3000 	ldrb.w	r3, [sp]
 80028ea:	071b      	lsls	r3, r3, #28
      *val = IIS2DH_LP_8bit;
    }

    else if (ctrl_reg4.hr == PROPERTY_ENABLE ) {
 80028ec:	bf5d      	ittte	pl
 80028ee:	f89d 3004 	ldrbpl.w	r3, [sp, #4]
 80028f2:	f083 0308 	eorpl.w	r3, r3, #8
 80028f6:	f3c3 03c0 	ubfxpl	r3, r3, #3, #1
 80028fa:	2302      	movmi	r3, #2
      *val = IIS2DH_HR_12bit;
 80028fc:	702b      	strb	r3, [r5, #0]
      *val = IIS2DH_NM_10bit;
    }
  }

  return ret;
}
 80028fe:	b002      	add	sp, #8
 8002900:	bd70      	pop	{r4, r5, r6, pc}
 8002902:	bf00      	nop

08002904 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	4604      	mov	r4, r0
 8002908:	b082      	sub	sp, #8
 800290a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800290c:	6880      	ldr	r0, [r0, #8]
 800290e:	6866      	ldr	r6, [r4, #4]
 8002910:	2301      	movs	r3, #1
 8002912:	aa01      	add	r2, sp, #4
 8002914:	2120      	movs	r1, #32
 8002916:	47b0      	blx	r6
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  if (ret == 0) {
 8002918:	b958      	cbnz	r0, 8002932 <iis2dh_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
 800291a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800291e:	6826      	ldr	r6, [r4, #0]
 8002920:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
 8002922:	f365 1307 	bfi	r3, r5, #4, #4
 8002926:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800292a:	aa01      	add	r2, sp, #4
 800292c:	2301      	movs	r3, #1
 800292e:	2120      	movs	r1, #32
 8002930:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                           1);
  }

  return ret;
}
 8002932:	b002      	add	sp, #8
 8002934:	bd70      	pop	{r4, r5, r6, pc}
 8002936:	bf00      	nop

08002938 <iis2dh_data_rate_get>:
  * @param  val      get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_get(stmdev_ctx_t *ctx, iis2dh_odr_t *val)
{
 8002938:	b530      	push	{r4, r5, lr}
 800293a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800293c:	2301      	movs	r3, #1
 800293e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002942:	aa01      	add	r2, sp, #4
{
 8002944:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002946:	2120      	movs	r1, #32
 8002948:	47a8      	blx	r5
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                        1);

  switch (ctrl_reg1.odr) {
 800294a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	3b01      	subs	r3, #1
 8002952:	2b08      	cmp	r3, #8
 8002954:	d81a      	bhi.n	800298c <iis2dh_data_rate_get+0x54>
 8002956:	e8df f003 	tbb	[pc, r3]
 800295a:	0905      	.short	0x0905
 800295c:	110f0d0b 	.word	0x110f0d0b
 8002960:	1513      	.short	0x1513
 8002962:	17          	.byte	0x17
 8002963:	00          	.byte	0x00
 8002964:	2301      	movs	r3, #1
    case IIS2DH_POWER_DOWN:
      *val = IIS2DH_POWER_DOWN;
 8002966:	7023      	strb	r3, [r4, #0]
      *val = IIS2DH_POWER_DOWN;
      break;
  }

  return ret;
}
 8002968:	b003      	add	sp, #12
 800296a:	bd30      	pop	{r4, r5, pc}
      break;
 800296c:	2302      	movs	r3, #2
 800296e:	e7fa      	b.n	8002966 <iis2dh_data_rate_get+0x2e>
      break;
 8002970:	2303      	movs	r3, #3
 8002972:	e7f8      	b.n	8002966 <iis2dh_data_rate_get+0x2e>
      break;
 8002974:	2304      	movs	r3, #4
 8002976:	e7f6      	b.n	8002966 <iis2dh_data_rate_get+0x2e>
      break;
 8002978:	2305      	movs	r3, #5
 800297a:	e7f4      	b.n	8002966 <iis2dh_data_rate_get+0x2e>
      break;
 800297c:	2306      	movs	r3, #6
 800297e:	e7f2      	b.n	8002966 <iis2dh_data_rate_get+0x2e>
      break;
 8002980:	2307      	movs	r3, #7
 8002982:	e7f0      	b.n	8002966 <iis2dh_data_rate_get+0x2e>
      break;
 8002984:	2308      	movs	r3, #8
 8002986:	e7ee      	b.n	8002966 <iis2dh_data_rate_get+0x2e>
      break;
 8002988:	2309      	movs	r3, #9
 800298a:	e7ec      	b.n	8002966 <iis2dh_data_rate_get+0x2e>
  switch (ctrl_reg1.odr) {
 800298c:	2300      	movs	r3, #0
 800298e:	e7ea      	b.n	8002966 <iis2dh_data_rate_get+0x2e>

08002990 <iis2dh_high_pass_on_outputs_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_high_pass_on_outputs_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4604      	mov	r4, r0
 8002994:	b082      	sub	sp, #8
 8002996:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002998:	6880      	ldr	r0, [r0, #8]
 800299a:	6866      	ldr	r6, [r4, #4]
 800299c:	2301      	movs	r3, #1
 800299e:	aa01      	add	r2, sp, #4
 80029a0:	2121      	movs	r1, #33	@ 0x21
 80029a2:	47b0      	blx	r6
  iis2dh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                        1);

  if (ret == 0) {
 80029a4:	b958      	cbnz	r0, 80029be <iis2dh_high_pass_on_outputs_set+0x2e>
    ctrl_reg2.fds = val;
 80029a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029aa:	6826      	ldr	r6, [r4, #0]
 80029ac:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg2.fds = val;
 80029ae:	f365 03c3 	bfi	r3, r5, #3, #1
 80029b2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029b6:	aa01      	add	r2, sp, #4
 80029b8:	2301      	movs	r3, #1
 80029ba:	2121      	movs	r1, #33	@ 0x21
 80029bc:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  return ret;
}
 80029be:	b002      	add	sp, #8
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	bf00      	nop

080029c4 <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	4604      	mov	r4, r0
 80029c8:	b082      	sub	sp, #8
 80029ca:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029cc:	6880      	ldr	r0, [r0, #8]
 80029ce:	6866      	ldr	r6, [r4, #4]
 80029d0:	2301      	movs	r3, #1
 80029d2:	aa01      	add	r2, sp, #4
 80029d4:	2123      	movs	r1, #35	@ 0x23
 80029d6:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 80029d8:	b958      	cbnz	r0, 80029f2 <iis2dh_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
 80029da:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029de:	6826      	ldr	r6, [r4, #0]
 80029e0:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
 80029e2:	f365 1305 	bfi	r3, r5, #4, #2
 80029e6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029ea:	aa01      	add	r2, sp, #4
 80029ec:	2301      	movs	r3, #1
 80029ee:	2123      	movs	r1, #35	@ 0x23
 80029f0:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 80029f2:	b002      	add	sp, #8
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	bf00      	nop

080029f8 <iis2dh_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_get(stmdev_ctx_t *ctx, iis2dh_fs_t *val)
{
 80029f8:	b530      	push	{r4, r5, lr}
 80029fa:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029fc:	2301      	movs	r3, #1
 80029fe:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002a02:	aa01      	add	r2, sp, #4
{
 8002a04:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a06:	2123      	movs	r1, #35	@ 0x23
 8002a08:	47a8      	blx	r5
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  switch (ctrl_reg4.fs) {
 8002a0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a0e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d006      	beq.n	8002a24 <iis2dh_full_scale_get+0x2c>
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d004      	beq.n	8002a24 <iis2dh_full_scale_get+0x2c>
 8002a1a:	f1a3 0301 	sub.w	r3, r3, #1
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	095b      	lsrs	r3, r3, #5
    case IIS2DH_2g:
      *val = IIS2DH_2g;
 8002a24:	7023      	strb	r3, [r4, #0]
      *val = IIS2DH_2g;
      break;
  }

  return ret;
}
 8002a26:	b003      	add	sp, #12
 8002a28:	bd30      	pop	{r4, r5, pc}
 8002a2a:	bf00      	nop

08002a2c <iis2dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	b082      	sub	sp, #8
 8002a32:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a34:	6880      	ldr	r0, [r0, #8]
 8002a36:	6866      	ldr	r6, [r4, #4]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	aa01      	add	r2, sp, #4
 8002a3c:	2123      	movs	r1, #35	@ 0x23
 8002a3e:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002a40:	b958      	cbnz	r0, 8002a5a <iis2dh_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
 8002a42:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a46:	6826      	ldr	r6, [r4, #0]
 8002a48:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
 8002a4a:	f365 13c7 	bfi	r3, r5, #7, #1
 8002a4e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a52:	aa01      	add	r2, sp, #4
 8002a54:	2301      	movs	r3, #1
 8002a56:	2123      	movs	r1, #35	@ 0x23
 8002a58:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	bf00      	nop

08002a60 <iis2dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002a60:	b530      	push	{r4, r5, lr}
 8002a62:	b083      	sub	sp, #12
 8002a64:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a66:	466a      	mov	r2, sp
 8002a68:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	2128      	movs	r1, #40	@ 0x28
 8002a70:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_OUT_X_L, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002a72:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002a76:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002a7a:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002a7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a82:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002a84:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002a88:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002a8c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002a90:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002a92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a9a:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd30      	pop	{r4, r5, pc}

08002aa0 <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002aa0:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002aa2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8002aa6:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002aa8:	46a4      	mov	ip, r4
 8002aaa:	2301      	movs	r3, #1
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
  return ret;
}
 8002aac:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ab0:	210f      	movs	r1, #15
 8002ab2:	4760      	bx	ip

08002ab4 <iis2dh_data_format_set>:
  * @param  val      change the values of ble in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_format_set(stmdev_ctx_t *ctx, iis2dh_ble_t val)
{
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	b082      	sub	sp, #8
 8002aba:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002abc:	6880      	ldr	r0, [r0, #8]
 8002abe:	6866      	ldr	r6, [r4, #4]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	aa01      	add	r2, sp, #4
 8002ac4:	2123      	movs	r1, #35	@ 0x23
 8002ac6:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002ac8:	b958      	cbnz	r0, 8002ae2 <iis2dh_data_format_set+0x2e>
    ctrl_reg4.ble = (uint8_t)val;
 8002aca:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ace:	6826      	ldr	r6, [r4, #0]
 8002ad0:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.ble = (uint8_t)val;
 8002ad2:	f365 1386 	bfi	r3, r5, #6, #1
 8002ad6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ada:	aa01      	add	r2, sp, #4
 8002adc:	2301      	movs	r3, #1
 8002ade:	2123      	movs	r1, #35	@ 0x23
 8002ae0:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002ae2:	b002      	add	sp, #8
 8002ae4:	bd70      	pop	{r4, r5, r6, pc}
 8002ae6:	bf00      	nop

08002ae8 <iis2dh_boot_set>:
  * @param  val      change the values of boot in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	4604      	mov	r4, r0
 8002aec:	b082      	sub	sp, #8
 8002aee:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002af0:	6880      	ldr	r0, [r0, #8]
 8002af2:	6866      	ldr	r6, [r4, #4]
 8002af4:	2301      	movs	r3, #1
 8002af6:	aa01      	add	r2, sp, #4
 8002af8:	2124      	movs	r1, #36	@ 0x24
 8002afa:	47b0      	blx	r6
  iis2dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5,
                        1);

  if (ret == 0) {
 8002afc:	b958      	cbnz	r0, 8002b16 <iis2dh_boot_set+0x2e>
    ctrl_reg5.boot = val;
 8002afe:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b02:	6826      	ldr	r6, [r4, #0]
 8002b04:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg5.boot = val;
 8002b06:	f365 13c7 	bfi	r3, r5, #7, #1
 8002b0a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b0e:	aa01      	add	r2, sp, #4
 8002b10:	2301      	movs	r3, #1
 8002b12:	2124      	movs	r1, #36	@ 0x24
 8002b14:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5,
                           1);
  }

  return ret;
}
 8002b16:	b002      	add	sp, #8
 8002b18:	bd70      	pop	{r4, r5, r6, pc}
 8002b1a:	bf00      	nop

08002b1c <iis2dh_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_spi_mode_set(stmdev_ctx_t *ctx, iis2dh_sim_t val)
{
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	4604      	mov	r4, r0
 8002b20:	b082      	sub	sp, #8
 8002b22:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b24:	6880      	ldr	r0, [r0, #8]
 8002b26:	6866      	ldr	r6, [r4, #4]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	aa01      	add	r2, sp, #4
 8002b2c:	2123      	movs	r1, #35	@ 0x23
 8002b2e:	47b0      	blx	r6
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                        1);

  if (ret == 0) {
 8002b30:	b958      	cbnz	r0, 8002b4a <iis2dh_spi_mode_set+0x2e>
    ctrl_reg4.sim = (uint8_t)val;
 8002b32:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b36:	6826      	ldr	r6, [r4, #0]
 8002b38:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.sim = (uint8_t)val;
 8002b3a:	f365 0300 	bfi	r3, r5, #0, #1
 8002b3e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b42:	aa01      	add	r2, sp, #4
 8002b44:	2301      	movs	r3, #1
 8002b46:	2123      	movs	r1, #35	@ 0x23
 8002b48:	47b0      	blx	r6
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
                           1);
  }

  return ret;
}
 8002b4a:	b002      	add	sp, #8
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
 8002b4e:	bf00      	nop

08002b50 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002b50:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002b52:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
  Capabilities->Magneto      = 1;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
  Capabilities->GyroMaxOdr   = 0.0f;
 8002b56:	2300      	movs	r3, #0
  Capabilities->GyroMaxFS    = 0;
 8002b58:	2000      	movs	r0, #0
  Capabilities->AccMaxOdr    = 0.0f;
  Capabilities->MagMaxOdr    = 100.0f;
 8002b5a:	4a06      	ldr	r2, [pc, #24]	@ (8002b74 <IIS2MDC_GetCapabilities+0x24>)
  Capabilities->Acc          = 0;
 8002b5c:	600c      	str	r4, [r1, #0]
  Capabilities->MagMaxFS     = 50;
 8002b5e:	2432      	movs	r4, #50	@ 0x32
 8002b60:	60cc      	str	r4, [r1, #12]
  Capabilities->AccMaxFS     = 0;
 8002b62:	e9c1 0001 	strd	r0, r0, [r1, #4]
  return IIS2MDC_OK;
}
 8002b66:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->GyroMaxOdr   = 0.0f;
 8002b6a:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002b6c:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002b6e:	618a      	str	r2, [r1, #24]
}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	42c80000 	.word	0x42c80000

08002b78 <IIS2MDC_MAG_GetSensitivity>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8002b78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002b7c:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 8002b7e:	2000      	movs	r0, #0
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop

08002b84 <IIS2MDC_MAG_GetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
  UNUSED(pObj);
  *FullScale = 50;
 8002b84:	2332      	movs	r3, #50	@ 0x32
 8002b86:	600b      	str	r3, [r1, #0]

  return IIS2MDC_OK;
}
 8002b88:	2000      	movs	r0, #0
 8002b8a:	4770      	bx	lr

08002b8c <IIS2MDC_MAG_SetFullScale>:
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
}
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	4770      	bx	lr

08002b90 <IIS2MDC_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8002b90:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d00b      	beq.n	8002bb0 <IIS2MDC_MAG_Enable+0x20>
{
 8002b98:	b510      	push	{r4, lr}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	301c      	adds	r0, #28
 8002ba0:	f000 f944 	bl	8002e2c <iis2mdc_operating_mode_set>
 8002ba4:	b930      	cbnz	r0, 8002bb4 <IIS2MDC_MAG_Enable+0x24>
  pObj->mag_is_enabled = 1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return IIS2MDC_OK;
 8002bac:	2000      	movs	r0, #0
}
 8002bae:	bd10      	pop	{r4, pc}
    return IIS2MDC_OK;
 8002bb0:	2000      	movs	r0, #0
}
 8002bb2:	4770      	bx	lr
    return IIS2MDC_ERROR;
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002bb8:	bd10      	pop	{r4, pc}
 8002bba:	bf00      	nop

08002bbc <IIS2MDC_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8002bbc:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002bc0:	b90b      	cbnz	r3, 8002bc6 <IIS2MDC_MAG_Disable+0xa>
    return IIS2MDC_OK;
 8002bc2:	2000      	movs	r0, #0
}
 8002bc4:	4770      	bx	lr
{
 8002bc6:	b510      	push	{r4, lr}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4604      	mov	r4, r0
 8002bcc:	301c      	adds	r0, #28
 8002bce:	f000 f92d 	bl	8002e2c <iis2mdc_operating_mode_set>
 8002bd2:	b918      	cbnz	r0, 8002bdc <IIS2MDC_MAG_Disable+0x20>
  pObj->mag_is_enabled = 0;
 8002bd4:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS2MDC_OK;
 8002bd8:	2000      	movs	r0, #0
}
 8002bda:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002be0:	bd10      	pop	{r4, pc}
 8002be2:	bf00      	nop

08002be4 <IIS2MDC_DeInit>:
{
 8002be4:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 0U)
 8002be6:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8002bea:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 8002bec:	b91b      	cbnz	r3, 8002bf6 <IIS2MDC_DeInit+0x12>
  pObj->is_initialized = 0;
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8002bf4:	bd10      	pop	{r4, pc}
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	301c      	adds	r0, #28
 8002bfa:	f000 f917 	bl	8002e2c <iis2mdc_operating_mode_set>
 8002bfe:	b910      	cbnz	r0, 8002c06 <IIS2MDC_DeInit+0x22>
  pObj->mag_is_enabled = 0;
 8002c00:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS2MDC_OK;
 8002c04:	e7f3      	b.n	8002bee <IIS2MDC_DeInit+0xa>
    return IIS2MDC_ERROR;
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c0a:	bd10      	pop	{r4, pc}

08002c0c <IIS2MDC_MAG_SetOutputDataRate>:
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002c0c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002c10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002c18:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002c1a:	d908      	bls.n	8002c2e <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8002c1c:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8002c20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c28:	d80a      	bhi.n	8002c40 <IIS2MDC_MAG_SetOutputDataRate+0x34>
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	e000      	b.n	8002c30 <IIS2MDC_MAG_SetOutputDataRate+0x24>
 8002c2e:	2100      	movs	r1, #0
  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8002c30:	301c      	adds	r0, #28
 8002c32:	f000 f915 	bl	8002e60 <iis2mdc_data_rate_set>
 8002c36:	3800      	subs	r0, #0
 8002c38:	bf18      	it	ne
 8002c3a:	2001      	movne	r0, #1
}
 8002c3c:	4240      	negs	r0, r0
 8002c3e:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002c40:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8002c54 <IIS2MDC_MAG_SetOutputDataRate+0x48>
 8002c44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	bf94      	ite	ls
 8002c4e:	2102      	movls	r1, #2
 8002c50:	2103      	movhi	r1, #3
 8002c52:	e7ed      	b.n	8002c30 <IIS2MDC_MAG_SetOutputDataRate+0x24>
 8002c54:	42480000 	.word	0x42480000

08002c58 <IIS2MDC_Init>:
{
 8002c58:	b538      	push	{r3, r4, r5, lr}
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002c5a:	f100 051c 	add.w	r5, r0, #28
{
 8002c5e:	4604      	mov	r4, r0
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002c60:	2101      	movs	r1, #1
 8002c62:	4628      	mov	r0, r5
 8002c64:	f000 f930 	bl	8002ec8 <iis2mdc_block_data_update_set>
 8002c68:	b990      	cbnz	r0, 8002c90 <IIS2MDC_Init+0x38>
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f000 f8dd 	bl	8002e2c <iis2mdc_operating_mode_set>
 8002c72:	b968      	cbnz	r0, 8002c90 <IIS2MDC_Init+0x38>
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8002c74:	2103      	movs	r1, #3
 8002c76:	4628      	mov	r0, r5
 8002c78:	f000 f8f2 	bl	8002e60 <iis2mdc_data_rate_set>
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	b938      	cbnz	r0, 8002c90 <IIS2MDC_Init+0x38>
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8002c80:	4628      	mov	r0, r5
 8002c82:	f000 f965 	bl	8002f50 <iis2mdc_self_test_set>
 8002c86:	b918      	cbnz	r0, 8002c90 <IIS2MDC_Init+0x38>
  pObj->is_initialized = 1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
}
 8002c8e:	bd38      	pop	{r3, r4, r5, pc}
    return IIS2MDC_ERROR;
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c94:	bd38      	pop	{r3, r4, r5, pc}
 8002c96:	bf00      	nop

08002c98 <IIS2MDC_ReadID>:
{
 8002c98:	b508      	push	{r3, lr}
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002c9a:	301c      	adds	r0, #28
 8002c9c:	f000 f94e 	bl	8002f3c <iis2mdc_device_id_get>
 8002ca0:	3800      	subs	r0, #0
 8002ca2:	bf18      	it	ne
 8002ca4:	2001      	movne	r0, #1
}
 8002ca6:	4240      	negs	r0, r0
 8002ca8:	bd08      	pop	{r3, pc}
 8002caa:	bf00      	nop

08002cac <IIS2MDC_MAG_GetOutputDataRate>:
{
 8002cac:	b510      	push	{r4, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	460c      	mov	r4, r1
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8002cb2:	301c      	adds	r0, #28
 8002cb4:	f10d 0107 	add.w	r1, sp, #7
 8002cb8:	f000 f8ec 	bl	8002e94 <iis2mdc_data_rate_get>
 8002cbc:	b988      	cbnz	r0, 8002ce2 <IIS2MDC_MAG_GetOutputDataRate+0x36>
  switch (odr_low_level)
 8002cbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d80d      	bhi.n	8002ce2 <IIS2MDC_MAG_GetOutputDataRate+0x36>
 8002cc6:	e8df f003 	tbb	[pc, r3]
 8002cca:	0206      	.short	0x0206
 8002ccc:	080a      	.short	0x080a
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <IIS2MDC_MAG_GetOutputDataRate+0x3c>)
      *Odr = 10.0f;
 8002cd0:	6023      	str	r3, [r4, #0]
}
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <IIS2MDC_MAG_GetOutputDataRate+0x40>)
 8002cd8:	e7fa      	b.n	8002cd0 <IIS2MDC_MAG_GetOutputDataRate+0x24>
      break;
 8002cda:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <IIS2MDC_MAG_GetOutputDataRate+0x44>)
 8002cdc:	e7f8      	b.n	8002cd0 <IIS2MDC_MAG_GetOutputDataRate+0x24>
      break;
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <IIS2MDC_MAG_GetOutputDataRate+0x48>)
 8002ce0:	e7f6      	b.n	8002cd0 <IIS2MDC_MAG_GetOutputDataRate+0x24>
  switch (odr_low_level)
 8002ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce6:	e7f4      	b.n	8002cd2 <IIS2MDC_MAG_GetOutputDataRate+0x26>
 8002ce8:	41a00000 	.word	0x41a00000
 8002cec:	41200000 	.word	0x41200000
 8002cf0:	42c80000 	.word	0x42c80000
 8002cf4:	42480000 	.word	0x42480000

08002cf8 <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8002cf8:	b510      	push	{r4, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	460c      	mov	r4, r1
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002cfe:	301c      	adds	r0, #28
 8002d00:	4669      	mov	r1, sp
 8002d02:	f000 f8fb 	bl	8002efc <iis2mdc_magnetic_raw_get>
 8002d06:	b930      	cbnz	r0, 8002d16 <IIS2MDC_MAG_GetAxesRaw+0x1e>
  {
    return IIS2MDC_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002d08:	9a00      	ldr	r2, [sp, #0]
  Value->y = data_raw.i16bit[1];
  Value->z = data_raw.i16bit[2];
 8002d0a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8002d0e:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8002d10:	80a3      	strh	r3, [r4, #4]

  return IIS2MDC_OK;
}
 8002d12:	b002      	add	sp, #8
 8002d14:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8002d16:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1a:	e7fa      	b.n	8002d12 <IIS2MDC_MAG_GetAxesRaw+0x1a>

08002d1c <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	460c      	mov	r4, r1
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002d22:	301c      	adds	r0, #28
 8002d24:	4669      	mov	r1, sp
 8002d26:	f000 f8e9 	bl	8002efc <iis2mdc_magnetic_raw_get>
 8002d2a:	bb38      	cbnz	r0, 8002d7c <IIS2MDC_MAG_GetAxes+0x60>

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d2c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8002d30:	ee06 3a90 	vmov	s13, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d34:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002d38:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d3c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8002d40:	ee07 3a90 	vmov	s15, r3
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d50:	eeb7 6a08 	vmov.f32	s12, #120	@ 0x3fc00000  1.5
 8002d54:	ee66 6a86 	vmul.f32	s13, s13, s12
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d58:	ee27 7a06 	vmul.f32	s14, s14, s12
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d5c:	ee67 7a86 	vmul.f32	s15, s15, s12
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d60:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d64:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d6c:	edc4 6a00 	vstr	s13, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d70:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d74:	edc4 7a02 	vstr	s15, [r4, #8]

  return IIS2MDC_OK;
}
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd10      	pop	{r4, pc}
    return IIS2MDC_ERROR;
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	e7fa      	b.n	8002d78 <IIS2MDC_MAG_GetAxes+0x5c>
 8002d82:	bf00      	nop

08002d84 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d84:	b430      	push	{r4, r5}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002d86:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d88:	6944      	ldr	r4, [r0, #20]
 8002d8a:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002d8c:	b925      	cbnz	r5, 8002d98 <ReadMagRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d8e:	46a4      	mov	ip, r4
 8002d90:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8002d94:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d96:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d98:	46a4      	mov	ip, r4
 8002d9a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8002d9e:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002da0:	4760      	bx	ip
 8002da2:	bf00      	nop

08002da4 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002da4:	b430      	push	{r4, r5}
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002da6:	6885      	ldr	r5, [r0, #8]
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002da8:	6904      	ldr	r4, [r0, #16]
 8002daa:	7b00      	ldrb	r0, [r0, #12]
  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002dac:	b925      	cbnz	r5, 8002db8 <WriteMagRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002dae:	46a4      	mov	ip, r4
 8002db0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8002db4:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002db6:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002db8:	46a4      	mov	ip, r4
 8002dba:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
}
 8002dbe:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002dc0:	4760      	bx	ip
 8002dc2:	bf00      	nop

08002dc4 <IIS2MDC_RegisterBusIO>:
  if (pObj == NULL)
 8002dc4:	b350      	cbz	r0, 8002e1c <IIS2MDC_RegisterBusIO+0x58>
{
 8002dc6:	b510      	push	{r4, lr}
 8002dc8:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8002dca:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8002dce:	688a      	ldr	r2, [r1, #8]
 8002dd0:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8002dd2:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8002dd6:	7b0a      	ldrb	r2, [r1, #12]
 8002dd8:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002dda:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8002dde:	6989      	ldr	r1, [r1, #24]
 8002de0:	61a1      	str	r1, [r4, #24]
 8002de2:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002de4:	490f      	ldr	r1, [pc, #60]	@ (8002e24 <IIS2MDC_RegisterBusIO+0x60>)
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002de6:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <IIS2MDC_RegisterBusIO+0x64>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002de8:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002dea:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle    = pObj;
 8002dee:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 8002df0:	b18b      	cbz	r3, 8002e16 <IIS2MDC_RegisterBusIO+0x52>
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8002df2:	4798      	blx	r3
 8002df4:	b978      	cbnz	r0, 8002e16 <IIS2MDC_RegisterBusIO+0x52>
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8002df6:	68a3      	ldr	r3, [r4, #8]
 8002df8:	b113      	cbz	r3, 8002e00 <IIS2MDC_RegisterBusIO+0x3c>
        if (pObj->is_initialized == 0U)
 8002dfa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002dfe:	b103      	cbz	r3, 8002e02 <IIS2MDC_RegisterBusIO+0x3e>
}
 8002e00:	bd10      	pop	{r4, pc}
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002e02:	2101      	movs	r1, #1
 8002e04:	f104 001c 	add.w	r0, r4, #28
 8002e08:	f000 f8bc 	bl	8002f84 <iis2mdc_i2c_interface_set>
 8002e0c:	3800      	subs	r0, #0
 8002e0e:	bf18      	it	ne
 8002e10:	2001      	movne	r0, #1
 8002e12:	4240      	negs	r0, r0
}
 8002e14:	bd10      	pop	{r4, pc}
    ret = IIS2MDC_ERROR;
 8002e16:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e1a:	bd10      	pop	{r4, pc}
    ret = IIS2MDC_ERROR;
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	08002d85 	.word	0x08002d85
 8002e28:	08002da5 	.word	0x08002da5

08002e2c <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	4604      	mov	r4, r0
 8002e30:	b082      	sub	sp, #8
 8002e32:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e34:	6880      	ldr	r0, [r0, #8]
 8002e36:	6866      	ldr	r6, [r4, #4]
 8002e38:	2301      	movs	r3, #1
 8002e3a:	aa01      	add	r2, sp, #4
 8002e3c:	2160      	movs	r1, #96	@ 0x60
 8002e3e:	47b0      	blx	r6
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002e40:	b958      	cbnz	r0, 8002e5a <iis2mdc_operating_mode_set+0x2e>
    reg.md = (uint8_t)val;
 8002e42:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e46:	6826      	ldr	r6, [r4, #0]
 8002e48:	68a0      	ldr	r0, [r4, #8]
    reg.md = (uint8_t)val;
 8002e4a:	f365 0301 	bfi	r3, r5, #0, #2
 8002e4e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e52:	aa01      	add	r2, sp, #4
 8002e54:	2301      	movs	r3, #1
 8002e56:	2160      	movs	r1, #96	@ 0x60
 8002e58:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
 8002e5e:	bf00      	nop

08002e60 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4604      	mov	r4, r0
 8002e64:	b082      	sub	sp, #8
 8002e66:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e68:	6880      	ldr	r0, [r0, #8]
 8002e6a:	6866      	ldr	r6, [r4, #4]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	aa01      	add	r2, sp, #4
 8002e70:	2160      	movs	r1, #96	@ 0x60
 8002e72:	47b0      	blx	r6
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002e74:	b958      	cbnz	r0, 8002e8e <iis2mdc_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 8002e76:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e7a:	6826      	ldr	r6, [r4, #0]
 8002e7c:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 8002e7e:	f365 0383 	bfi	r3, r5, #2, #2
 8002e82:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e86:	aa01      	add	r2, sp, #4
 8002e88:	2301      	movs	r3, #1
 8002e8a:	2160      	movs	r1, #96	@ 0x60
 8002e8c:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002e8e:	b002      	add	sp, #8
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
 8002e92:	bf00      	nop

08002e94 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8002e94:	b530      	push	{r4, r5, lr}
 8002e96:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002e9e:	aa01      	add	r2, sp, #4
{
 8002ea0:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ea2:	2160      	movs	r1, #96	@ 0x60
 8002ea4:	47a8      	blx	r5
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);

  switch (reg.odr) {
 8002ea6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002eaa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d006      	beq.n	8002ec0 <iis2mdc_data_rate_get+0x2c>
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d004      	beq.n	8002ec0 <iis2mdc_data_rate_get+0x2c>
 8002eb6:	f1a3 0301 	sub.w	r3, r3, #1
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8002ec0:	7023      	strb	r3, [r4, #0]
      *val = IIS2MDC_ODR_10Hz;
      break;
  }

  return ret;
}
 8002ec2:	b003      	add	sp, #12
 8002ec4:	bd30      	pop	{r4, r5, pc}
 8002ec6:	bf00      	nop

08002ec8 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	4604      	mov	r4, r0
 8002ecc:	b082      	sub	sp, #8
 8002ece:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ed0:	6880      	ldr	r0, [r0, #8]
 8002ed2:	6866      	ldr	r6, [r4, #4]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	aa01      	add	r2, sp, #4
 8002ed8:	2162      	movs	r1, #98	@ 0x62
 8002eda:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002edc:	b958      	cbnz	r0, 8002ef6 <iis2mdc_block_data_update_set+0x2e>
    reg.bdu = val;
 8002ede:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ee2:	6826      	ldr	r6, [r4, #0]
 8002ee4:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8002ee6:	f365 1304 	bfi	r3, r5, #4, #1
 8002eea:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002eee:	aa01      	add	r2, sp, #4
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2162      	movs	r1, #98	@ 0x62
 8002ef4:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	bf00      	nop

08002efc <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002efc:	b530      	push	{r4, r5, lr}
 8002efe:	b083      	sub	sp, #12
 8002f00:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f02:	466a      	mov	r2, sp
 8002f04:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8002f08:	2306      	movs	r3, #6
 8002f0a:	2168      	movs	r1, #104	@ 0x68
 8002f0c:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002f0e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002f12:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002f16:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002f1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002f1e:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002f20:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002f24:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002f28:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002f2c:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002f2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002f36:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8002f38:	b003      	add	sp, #12
 8002f3a:	bd30      	pop	{r4, r5, pc}

08002f3c <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f3c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f3e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8002f42:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f44:	46a4      	mov	ip, r4
 8002f46:	2301      	movs	r3, #1
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
  return ret;
}
 8002f48:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f4c:	214f      	movs	r1, #79	@ 0x4f
 8002f4e:	4760      	bx	ip

08002f50 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	b082      	sub	sp, #8
 8002f56:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f58:	6880      	ldr	r0, [r0, #8]
 8002f5a:	6866      	ldr	r6, [r4, #4]
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	aa01      	add	r2, sp, #4
 8002f60:	2162      	movs	r1, #98	@ 0x62
 8002f62:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002f64:	b958      	cbnz	r0, 8002f7e <iis2mdc_self_test_set+0x2e>
    reg.self_test = val;
 8002f66:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f6a:	6826      	ldr	r6, [r4, #0]
 8002f6c:	68a0      	ldr	r0, [r4, #8]
    reg.self_test = val;
 8002f6e:	f365 0341 	bfi	r3, r5, #1, #1
 8002f72:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f76:	aa01      	add	r2, sp, #4
 8002f78:	2301      	movs	r3, #1
 8002f7a:	2162      	movs	r1, #98	@ 0x62
 8002f7c:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
 8002f82:	bf00      	nop

08002f84 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	4604      	mov	r4, r0
 8002f88:	b082      	sub	sp, #8
 8002f8a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f8c:	6880      	ldr	r0, [r0, #8]
 8002f8e:	6866      	ldr	r6, [r4, #4]
 8002f90:	2301      	movs	r3, #1
 8002f92:	aa01      	add	r2, sp, #4
 8002f94:	2162      	movs	r1, #98	@ 0x62
 8002f96:	47b0      	blx	r6
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8002f98:	b958      	cbnz	r0, 8002fb2 <iis2mdc_i2c_interface_set+0x2e>
    reg.i2c_dis = (uint8_t)val;
 8002f9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f9e:	6826      	ldr	r6, [r4, #0]
 8002fa0:	68a0      	ldr	r0, [r4, #8]
    reg.i2c_dis = (uint8_t)val;
 8002fa2:	f365 1345 	bfi	r3, r5, #5, #1
 8002fa6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002faa:	aa01      	add	r2, sp, #4
 8002fac:	2301      	movs	r3, #1
 8002fae:	2162      	movs	r1, #98	@ 0x62
 8002fb0:	47b0      	blx	r6
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
 8002fb6:	bf00      	nop

08002fb8 <IIS3DWB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS3DWB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_GetCapabilities(IIS3DWB_Object_t *pObj, IIS3DWB_Capabilities_t *Capabilities)
{
 8002fb8:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002fba:	2401      	movs	r4, #1
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
 8002fbc:	2000      	movs	r0, #0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
 8002fbe:	2300      	movs	r3, #0
  Capabilities->AccMaxOdr    = 26700.0f;
 8002fc0:	4a05      	ldr	r2, [pc, #20]	@ (8002fd8 <IIS3DWB_GetCapabilities+0x20>)
  Capabilities->Acc          = 1;
 8002fc2:	600c      	str	r4, [r1, #0]
  Capabilities->AccMaxFS     = 16;
 8002fc4:	2410      	movs	r4, #16
 8002fc6:	e9c1 0401 	strd	r0, r4, [r1, #4]
  Capabilities->MagMaxOdr    = 0.0f;
  return IIS3DWB_OK;
}
 8002fca:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxFS     = 0;
 8002fce:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002fd0:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 26700.0f;
 8002fd2:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002fd4:	618b      	str	r3, [r1, #24]
}
 8002fd6:	4770      	bx	lr
 8002fd8:	46d09800 	.word	0x46d09800

08002fdc <IIS3DWB_ACC_Enable>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS3DWB_ACC_Enable(IIS3DWB_Object_t *pObj)
{
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002fdc:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002fe0:	2b01      	cmp	r3, #1
  {
    return IIS3DWB_OK;
  }

  pObj->acc_is_enabled = 1;
 8002fe2:	bf1c      	itt	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	f880 3029 	strbne.w	r3, [r0, #41]	@ 0x29

  return IIS3DWB_OK;
}
 8002fea:	2000      	movs	r0, #0
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ff0:	b410      	push	{r4}
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002ff2:	6944      	ldr	r4, [r0, #20]
 8002ff4:	7b00      	ldrb	r0, [r0, #12]
 8002ff6:	46a4      	mov	ip, r4
}
 8002ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002ffc:	4760      	bx	ip
 8002ffe:	bf00      	nop

08003000 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003000:	b410      	push	{r4}
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003002:	6904      	ldr	r4, [r0, #16]
 8003004:	7b00      	ldrb	r0, [r0, #12]
 8003006:	46a4      	mov	ip, r4
}
 8003008:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800300c:	4760      	bx	ip
 800300e:	bf00      	nop

08003010 <IIS3DWB_ReadID>:
{
 8003010:	b538      	push	{r3, r4, r5, lr}
	iis3dwb_device_id_get(&(pObj->Ctx), Id);
 8003012:	f100 041c 	add.w	r4, r0, #28
{
 8003016:	460d      	mov	r5, r1
	iis3dwb_device_id_get(&(pObj->Ctx), Id);
 8003018:	4620      	mov	r0, r4
 800301a:	f000 fa65 	bl	80034e8 <iis3dwb_device_id_get>
  if (iis3dwb_device_id_get(&(pObj->Ctx), Id) != IIS3DWB_OK)
 800301e:	4629      	mov	r1, r5
 8003020:	4620      	mov	r0, r4
 8003022:	f000 fa61 	bl	80034e8 <iis3dwb_device_id_get>
 8003026:	3800      	subs	r0, #0
 8003028:	bf18      	it	ne
 800302a:	2001      	movne	r0, #1
}
 800302c:	4240      	negs	r0, r0
 800302e:	bd38      	pop	{r3, r4, r5, pc}

08003030 <IIS3DWB_ACC_SetFullScale>:
         : (FullScale <= 4) ? IIS3DWB_4g
 8003030:	2902      	cmp	r1, #2
{
 8003032:	b508      	push	{r3, lr}
         : (FullScale <= 4) ? IIS3DWB_4g
 8003034:	dd06      	ble.n	8003044 <IIS3DWB_ACC_SetFullScale+0x14>
 8003036:	2904      	cmp	r1, #4
 8003038:	dd0d      	ble.n	8003056 <IIS3DWB_ACC_SetFullScale+0x26>
 800303a:	2908      	cmp	r1, #8
 800303c:	bfcc      	ite	gt
 800303e:	2101      	movgt	r1, #1
 8003040:	2103      	movle	r1, #3
 8003042:	e000      	b.n	8003046 <IIS3DWB_ACC_SetFullScale+0x16>
 8003044:	2100      	movs	r1, #0
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), new_fs) != IIS3DWB_OK)
 8003046:	301c      	adds	r0, #28
 8003048:	f000 f9b2 	bl	80033b0 <iis3dwb_xl_full_scale_set>
 800304c:	3800      	subs	r0, #0
 800304e:	bf18      	it	ne
 8003050:	2001      	movne	r0, #1
}
 8003052:	4240      	negs	r0, r0
 8003054:	bd08      	pop	{r3, pc}
         : (FullScale <= 4) ? IIS3DWB_4g
 8003056:	2102      	movs	r1, #2
 8003058:	e7f5      	b.n	8003046 <IIS3DWB_ACC_SetFullScale+0x16>
 800305a:	bf00      	nop

0800305c <IIS3DWB_Init>:
{
 800305c:	b530      	push	{r4, r5, lr}
  if (iis3dwb_i2c_interface_set(&(pObj->Ctx), IIS3DWB_I2C_DISABLE) != IIS3DWB_OK)
 800305e:	f100 041c 	add.w	r4, r0, #28
{
 8003062:	b083      	sub	sp, #12
 8003064:	4605      	mov	r5, r0
  if (iis3dwb_i2c_interface_set(&(pObj->Ctx), IIS3DWB_I2C_DISABLE) != IIS3DWB_OK)
 8003066:	2101      	movs	r1, #1
 8003068:	4620      	mov	r0, r4
 800306a:	f000 fa61 	bl	8003530 <iis3dwb_i2c_interface_set>
 800306e:	2800      	cmp	r0, #0
 8003070:	d146      	bne.n	8003100 <IIS3DWB_Init+0xa4>
  if (iis3dwb_device_id_get(&(pObj->Ctx), (uint8_t *)&reg0) != IIS3DWB_OK)
 8003072:	f10d 0107 	add.w	r1, sp, #7
 8003076:	4620      	mov	r0, r4
 8003078:	f000 fa36 	bl	80034e8 <iis3dwb_device_id_get>
 800307c:	2800      	cmp	r0, #0
 800307e:	d13f      	bne.n	8003100 <IIS3DWB_Init+0xa4>
  if (iis3dwb_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != IIS3DWB_OK)
 8003080:	2101      	movs	r1, #1
 8003082:	4620      	mov	r0, r4
 8003084:	f000 fa3a 	bl	80034fc <iis3dwb_reset_set>
 8003088:	bbd0      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1) != IIS3DWB_OK)
 800308a:	2301      	movs	r3, #1
 800308c:	f10d 0207 	add.w	r2, sp, #7
 8003090:	2110      	movs	r1, #16
 8003092:	4620      	mov	r0, r4
 8003094:	f000 f97c 	bl	8003390 <iis3dwb_read_reg>
 8003098:	bb90      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
  reg0 |= 0xA0;
 800309a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800309e:	f062 025f 	orn	r2, r2, #95	@ 0x5f
 80030a2:	f88d 2007 	strb.w	r2, [sp, #7]
  if (iis3dwb_write_reg(&(pObj->Ctx), IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1) != IIS3DWB_OK)
 80030a6:	2301      	movs	r3, #1
 80030a8:	f10d 0207 	add.w	r2, sp, #7
 80030ac:	2110      	movs	r1, #16
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 f976 	bl	80033a0 <iis3dwb_write_reg>
 80030b4:	bb20      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
  if (iis3dwb_fifo_mode_set(&(pObj->Ctx), IIS3DWB_STREAM_MODE) != IIS3DWB_OK)
 80030b6:	2106      	movs	r1, #6
 80030b8:	4620      	mov	r0, r4
 80030ba:	f000 fa91 	bl	80035e0 <iis3dwb_fifo_mode_set>
 80030be:	4601      	mov	r1, r0
 80030c0:	b9f0      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), IIS3DWB_2g) != IIS3DWB_OK)
 80030c2:	4620      	mov	r0, r4
 80030c4:	f000 f974 	bl	80033b0 <iis3dwb_xl_full_scale_set>
 80030c8:	b9d0      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
  if (iis3dwb_fifo_watermark_set(&(pObj->Ctx), iis3dwb_wtm_level) != IIS3DWB_OK)
 80030ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030ce:	4620      	mov	r0, r4
 80030d0:	f000 fa48 	bl	8003564 <iis3dwb_fifo_watermark_set>
 80030d4:	b9a0      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
  if (iis3dwb_data_ready_mode_set(&(pObj->Ctx), IIS3DWB_DRDY_PULSED) != IIS3DWB_OK)
 80030d6:	2101      	movs	r1, #1
 80030d8:	4620      	mov	r0, r4
 80030da:	f000 f9eb 	bl	80034b4 <iis3dwb_data_ready_mode_set>
 80030de:	b978      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
   if (iis3dwb_fifo_xl_batch_set(&(pObj->Ctx), IIS3DWB_XL_BATCHED_AT_26k7Hz) != IIS3DWB_OK)
 80030e0:	210a      	movs	r1, #10
 80030e2:	4620      	mov	r0, r4
 80030e4:	f000 fa62 	bl	80035ac <iis3dwb_fifo_xl_batch_set>
 80030e8:	b950      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
   if (iis3dwb_device_id_get(&(pObj->Ctx), (uint8_t *)&reg0) != IIS3DWB_OK)
 80030ea:	f10d 0107 	add.w	r1, sp, #7
 80030ee:	4620      	mov	r0, r4
 80030f0:	f000 f9fa 	bl	80034e8 <iis3dwb_device_id_get>
 80030f4:	b920      	cbnz	r0, 8003100 <IIS3DWB_Init+0xa4>
  pObj->is_initialized = 1;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 80030fc:	b003      	add	sp, #12
 80030fe:	bd30      	pop	{r4, r5, pc}
    return IIS3DWB_ERROR;
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003104:	b003      	add	sp, #12
 8003106:	bd30      	pop	{r4, r5, pc}

08003108 <IIS3DWB_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 8003108:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 800310c:	b90b      	cbnz	r3, 8003112 <IIS3DWB_ACC_Disable+0xa>
    return IIS3DWB_OK;
 800310e:	2000      	movs	r0, #0
}
 8003110:	4770      	bx	lr
{
 8003112:	b510      	push	{r4, lr}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
 8003114:	2100      	movs	r1, #0
 8003116:	4604      	mov	r4, r0
 8003118:	301c      	adds	r0, #28
 800311a:	f000 f97d 	bl	8003418 <iis3dwb_xl_data_rate_set>
 800311e:	b918      	cbnz	r0, 8003128 <IIS3DWB_ACC_Disable+0x20>
  pObj->acc_is_enabled = 0;
 8003120:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return IIS3DWB_OK;
 8003124:	2000      	movs	r0, #0
}
 8003126:	bd10      	pop	{r4, pc}
    return IIS3DWB_ERROR;
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
}
 800312c:	bd10      	pop	{r4, pc}
 800312e:	bf00      	nop

08003130 <IIS3DWB_DeInit>:
{
 8003130:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 8003132:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8003136:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8003138:	b91b      	cbnz	r3, 8003142 <IIS3DWB_DeInit+0x12>
  pObj->is_initialized = 0;
 800313a:	2000      	movs	r0, #0
 800313c:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8003140:	bd10      	pop	{r4, pc}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
 8003142:	2100      	movs	r1, #0
 8003144:	301c      	adds	r0, #28
 8003146:	f000 f967 	bl	8003418 <iis3dwb_xl_data_rate_set>
 800314a:	b910      	cbnz	r0, 8003152 <IIS3DWB_DeInit+0x22>
  pObj->acc_is_enabled = 0;
 800314c:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return IIS3DWB_OK;
 8003150:	e7f3      	b.n	800313a <IIS3DWB_DeInit+0xa>
    return IIS3DWB_ERROR;
 8003152:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003156:	bd10      	pop	{r4, pc}

08003158 <IIS3DWB_ACC_SetOutputDataRate>:
          :                    IIS3DWB_XL_ODR_26k7Hz;
 8003158:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800315c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
 8003164:	bf8c      	ite	hi
 8003166:	2105      	movhi	r1, #5
 8003168:	2100      	movls	r1, #0
{
 800316a:	b508      	push	{r3, lr}
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
 800316c:	301c      	adds	r0, #28
 800316e:	f000 f953 	bl	8003418 <iis3dwb_xl_data_rate_set>
 8003172:	3800      	subs	r0, #0
 8003174:	bf18      	it	ne
 8003176:	2001      	movne	r0, #1
}
 8003178:	4240      	negs	r0, r0
 800317a:	bd08      	pop	{r3, pc}

0800317c <IIS3DWB_ACC_GetSensitivity>:
{
 800317c:	b510      	push	{r4, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	460c      	mov	r4, r1
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
 8003182:	301c      	adds	r0, #28
 8003184:	f10d 0107 	add.w	r1, sp, #7
 8003188:	f000 f92c 	bl	80033e4 <iis3dwb_xl_full_scale_get>
 800318c:	b998      	cbnz	r0, 80031b6 <IIS3DWB_ACC_GetSensitivity+0x3a>
  switch (full_scale)
 800318e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d80d      	bhi.n	80031b2 <IIS3DWB_ACC_GetSensitivity+0x36>
 8003196:	e8df f003 	tbb	[pc, r3]
 800319a:	0806      	.short	0x0806
 800319c:	0a02      	.short	0x0a02
 800319e:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <IIS3DWB_ACC_GetSensitivity+0x44>)
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80031a0:	6023      	str	r3, [r4, #0]
}
 80031a2:	b002      	add	sp, #8
 80031a4:	bd10      	pop	{r4, pc}
  switch (full_scale)
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <IIS3DWB_ACC_GetSensitivity+0x48>)
 80031a8:	e7fa      	b.n	80031a0 <IIS3DWB_ACC_GetSensitivity+0x24>
    break;
 80031aa:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <IIS3DWB_ACC_GetSensitivity+0x4c>)
 80031ac:	e7f8      	b.n	80031a0 <IIS3DWB_ACC_GetSensitivity+0x24>
    break;
 80031ae:	4b07      	ldr	r3, [pc, #28]	@ (80031cc <IIS3DWB_ACC_GetSensitivity+0x50>)
 80031b0:	e7f6      	b.n	80031a0 <IIS3DWB_ACC_GetSensitivity+0x24>
    *Sensitivity = -1.0f;
 80031b2:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <IIS3DWB_ACC_GetSensitivity+0x54>)
 80031b4:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 80031b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80031ba:	b002      	add	sp, #8
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	bf00      	nop
 80031c0:	3df9db23 	.word	0x3df9db23
 80031c4:	3d79db23 	.word	0x3d79db23
 80031c8:	3ef9db23 	.word	0x3ef9db23
 80031cc:	3e79db23 	.word	0x3e79db23
 80031d0:	bf800000 	.word	0xbf800000

080031d4 <IIS3DWB_ACC_GetFullScale>:
{
 80031d4:	b510      	push	{r4, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	460c      	mov	r4, r1
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS3DWB_OK)
 80031da:	301c      	adds	r0, #28
 80031dc:	f10d 0107 	add.w	r1, sp, #7
 80031e0:	f000 f900 	bl	80033e4 <iis3dwb_xl_full_scale_get>
 80031e4:	b9a0      	cbnz	r0, 8003210 <IIS3DWB_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 80031e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d80d      	bhi.n	800320a <IIS3DWB_ACC_GetFullScale+0x36>
 80031ee:	e8df f003 	tbb	[pc, r3]
 80031f2:	0806      	.short	0x0806
 80031f4:	0a02      	.short	0x0a02
 80031f6:	2304      	movs	r3, #4
      *FullScale =  2;
 80031f8:	6023      	str	r3, [r4, #0]
}
 80031fa:	b002      	add	sp, #8
 80031fc:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 80031fe:	2302      	movs	r3, #2
 8003200:	e7fa      	b.n	80031f8 <IIS3DWB_ACC_GetFullScale+0x24>
      break;
 8003202:	2310      	movs	r3, #16
 8003204:	e7f8      	b.n	80031f8 <IIS3DWB_ACC_GetFullScale+0x24>
      break;
 8003206:	2308      	movs	r3, #8
 8003208:	e7f6      	b.n	80031f8 <IIS3DWB_ACC_GetFullScale+0x24>
      *FullScale = -1;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
 800320e:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003214:	b002      	add	sp, #8
 8003216:	bd10      	pop	{r4, pc}

08003218 <IIS3DWB_ACC_GetOutputDataRate>:
{
 8003218:	b510      	push	{r4, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	460c      	mov	r4, r1
  if (iis3dwb_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS3DWB_OK)
 800321e:	301c      	adds	r0, #28
 8003220:	f10d 0107 	add.w	r1, sp, #7
 8003224:	f000 f912 	bl	800344c <iis3dwb_xl_data_rate_get>
 8003228:	b950      	cbnz	r0, 8003240 <IIS3DWB_ACC_GetOutputDataRate+0x28>
  switch (odr_low_level)
 800322a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800322e:	b15b      	cbz	r3, 8003248 <IIS3DWB_ACC_GetOutputDataRate+0x30>
 8003230:	2b05      	cmp	r3, #5
 8003232:	d103      	bne.n	800323c <IIS3DWB_ACC_GetOutputDataRate+0x24>
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <IIS3DWB_ACC_GetOutputDataRate+0x34>)
    *odr =  0.0f;
 8003236:	6023      	str	r3, [r4, #0]
}
 8003238:	b002      	add	sp, #8
 800323a:	bd10      	pop	{r4, pc}
    *odr = -1.0f;
 800323c:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <IIS3DWB_ACC_GetOutputDataRate+0x38>)
 800323e:	6023      	str	r3, [r4, #0]
    return IIS3DWB_ERROR;
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003244:	b002      	add	sp, #8
 8003246:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8003248:	2300      	movs	r3, #0
 800324a:	e7f4      	b.n	8003236 <IIS3DWB_ACC_GetOutputDataRate+0x1e>
 800324c:	46d09800 	.word	0x46d09800
 8003250:	bf800000 	.word	0xbf800000

08003254 <IIS3DWB_ACC_GetAxesRaw>:
{
 8003254:	b510      	push	{r4, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	460c      	mov	r4, r1
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 800325a:	301c      	adds	r0, #28
 800325c:	4669      	mov	r1, sp
 800325e:	f000 f909 	bl	8003474 <iis3dwb_acceleration_raw_get>
 8003262:	b930      	cbnz	r0, 8003272 <IIS3DWB_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8003264:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8003266:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 800326a:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 800326c:	80a3      	strh	r3, [r4, #4]
}
 800326e:	b002      	add	sp, #8
 8003270:	bd10      	pop	{r4, pc}
    return IIS3DWB_ERROR;
 8003272:	f04f 30ff 	mov.w	r0, #4294967295
 8003276:	e7fa      	b.n	800326e <IIS3DWB_ACC_GetAxesRaw+0x1a>

08003278 <IIS3DWB_ACC_GetAxes>:
{
 8003278:	b530      	push	{r4, r5, lr}
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 800327a:	f100 051c 	add.w	r5, r0, #28
{
 800327e:	b085      	sub	sp, #20
 8003280:	460c      	mov	r4, r1
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
 8003282:	4628      	mov	r0, r5
 8003284:	a902      	add	r1, sp, #8
 8003286:	f000 f8f5 	bl	8003474 <iis3dwb_acceleration_raw_get>
 800328a:	2800      	cmp	r0, #0
 800328c:	d13e      	bne.n	800330c <IIS3DWB_ACC_GetAxes+0x94>
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
 800328e:	f10d 0107 	add.w	r1, sp, #7
 8003292:	4628      	mov	r0, r5
 8003294:	f000 f8a6 	bl	80033e4 <iis3dwb_xl_full_scale_get>
 8003298:	bbc0      	cbnz	r0, 800330c <IIS3DWB_ACC_GetAxes+0x94>
  switch (full_scale)
 800329a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d834      	bhi.n	800330c <IIS3DWB_ACC_GetAxes+0x94>
 80032a2:	e8df f003 	tbb	[pc, r3]
 80032a6:	2a30      	.short	0x2a30
 80032a8:	022d      	.short	0x022d
 80032aa:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003314 <IIS3DWB_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80032ae:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80032b2:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80032b6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80032ba:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80032be:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80032c2:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80032c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80032ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80032ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80032d2:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80032d6:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80032da:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80032de:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80032e2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80032e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80032ea:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80032ee:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80032f2:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80032f6:	b005      	add	sp, #20
 80032f8:	bd30      	pop	{r4, r5, pc}
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80032fa:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8003318 <IIS3DWB_ACC_GetAxes+0xa0>
 80032fe:	e7d6      	b.n	80032ae <IIS3DWB_ACC_GetAxes+0x36>
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003300:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 800331c <IIS3DWB_ACC_GetAxes+0xa4>
 8003304:	e7d3      	b.n	80032ae <IIS3DWB_ACC_GetAxes+0x36>
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003306:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003320 <IIS3DWB_ACC_GetAxes+0xa8>
 800330a:	e7d0      	b.n	80032ae <IIS3DWB_ACC_GetAxes+0x36>
    return IIS3DWB_ERROR;
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	e7f1      	b.n	80032f6 <IIS3DWB_ACC_GetAxes+0x7e>
 8003312:	bf00      	nop
 8003314:	3e79db23 	.word	0x3e79db23
 8003318:	3ef9db23 	.word	0x3ef9db23
 800331c:	3df9db23 	.word	0x3df9db23
 8003320:	3d79db23 	.word	0x3d79db23

08003324 <IIS3DWB_RegisterBusIO>:
  if (pObj == NULL)
 8003324:	b1e0      	cbz	r0, 8003360 <IIS3DWB_RegisterBusIO+0x3c>
{
 8003326:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8003328:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 800332c:	688a      	ldr	r2, [r1, #8]
 800332e:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8003330:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8003334:	7b0a      	ldrb	r2, [r1, #12]
 8003336:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003338:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 800333c:	6989      	ldr	r1, [r1, #24]
 800333e:	6181      	str	r1, [r0, #24]
 8003340:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003342:	4909      	ldr	r1, [pc, #36]	@ (8003368 <IIS3DWB_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8003344:	4a09      	ldr	r2, [pc, #36]	@ (800336c <IIS3DWB_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003346:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003348:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 800334c:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 800334e:	b113      	cbz	r3, 8003356 <IIS3DWB_RegisterBusIO+0x32>
}
 8003350:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8003354:	4718      	bx	r3
}
 8003356:	f04f 30ff 	mov.w	r0, #4294967295
 800335a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	08002ff1 	.word	0x08002ff1
 800336c:	08003001 	.word	0x08003001

08003370 <IIS3DWB_FIFO_Read>:
{
 8003370:	b508      	push	{r3, lr}
 8003372:	4613      	mov	r3, r2
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_FIFO_DATA_OUT_TAG, pBuff, (Watermark * 7)) != IIS3DWB_OK)
 8003374:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
{
 8003378:	460a      	mov	r2, r1
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_FIFO_DATA_OUT_TAG, pBuff, (Watermark * 7)) != IIS3DWB_OK)
 800337a:	b29b      	uxth	r3, r3
 800337c:	2178      	movs	r1, #120	@ 0x78
 800337e:	301c      	adds	r0, #28
 8003380:	f000 f806 	bl	8003390 <iis3dwb_read_reg>
 8003384:	3800      	subs	r0, #0
 8003386:	bf18      	it	ne
 8003388:	2001      	movne	r0, #1
}
 800338a:	4240      	negs	r0, r0
 800338c:	bd08      	pop	{r3, pc}
 800338e:	bf00      	nop

08003390 <iis3dwb_read_reg>:
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003390:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003392:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8003396:	46a4      	mov	ip, r4
  return ret;
}
 8003398:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800339c:	4760      	bx	ip
 800339e:	bf00      	nop

080033a0 <iis3dwb_write_reg>:
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80033a0:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033a2:	6804      	ldr	r4, [r0, #0]
 80033a4:	6880      	ldr	r0, [r0, #8]
 80033a6:	46a4      	mov	ip, r4
  return ret;
}
 80033a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033ac:	4760      	bx	ip
 80033ae:	bf00      	nop

080033b0 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4604      	mov	r4, r0
 80033b4:	b082      	sub	sp, #8
 80033b6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033b8:	6880      	ldr	r0, [r0, #8]
 80033ba:	6866      	ldr	r6, [r4, #4]
 80033bc:	2301      	movs	r3, #1
 80033be:	aa01      	add	r2, sp, #4
 80033c0:	2110      	movs	r1, #16
 80033c2:	47b0      	blx	r6
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  if (ret == 0) {
 80033c4:	b958      	cbnz	r0, 80033de <iis3dwb_xl_full_scale_set+0x2e>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80033c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033ca:	6826      	ldr	r6, [r4, #0]
 80033cc:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.fs_xl = (uint8_t)val;
 80033ce:	f365 0383 	bfi	r3, r5, #2, #2
 80033d2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033d6:	aa01      	add	r2, sp, #4
 80033d8:	2301      	movs	r3, #1
 80033da:	2110      	movs	r1, #16
 80033dc:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80033de:	b002      	add	sp, #8
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
 80033e2:	bf00      	nop

080033e4 <iis3dwb_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t *val)
{
 80033e4:	b530      	push	{r4, r5, lr}
 80033e6:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033e8:	2301      	movs	r3, #1
 80033ea:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80033ee:	aa01      	add	r2, sp, #4
{
 80033f0:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033f2:	2110      	movs	r1, #16
 80033f4:	47a8      	blx	r5
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  switch (ctrl1_xl.fs_xl) {
 80033f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80033fa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d006      	beq.n	8003410 <iis3dwb_xl_full_scale_get+0x2c>
 8003402:	2b03      	cmp	r3, #3
 8003404:	d004      	beq.n	8003410 <iis3dwb_xl_full_scale_get+0x2c>
 8003406:	f1a3 0301 	sub.w	r3, r3, #1
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	095b      	lsrs	r3, r3, #5
    case IIS3DWB_2g:
      *val = IIS3DWB_2g;
 8003410:	7023      	strb	r3, [r4, #0]
      *val = IIS3DWB_2g;
      break;
  }

  return ret;
}
 8003412:	b003      	add	sp, #12
 8003414:	bd30      	pop	{r4, r5, pc}
 8003416:	bf00      	nop

08003418 <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	4604      	mov	r4, r0
 800341c:	b082      	sub	sp, #8
 800341e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003420:	6880      	ldr	r0, [r0, #8]
 8003422:	6866      	ldr	r6, [r4, #4]
 8003424:	2301      	movs	r3, #1
 8003426:	aa01      	add	r2, sp, #4
 8003428:	2110      	movs	r1, #16
 800342a:	47b0      	blx	r6
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  if (ret == 0) {
 800342c:	b958      	cbnz	r0, 8003446 <iis3dwb_xl_data_rate_set+0x2e>
    ctrl1_xl.xl_en = (uint8_t)val;
 800342e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003432:	6826      	ldr	r6, [r4, #0]
 8003434:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.xl_en = (uint8_t)val;
 8003436:	f365 1347 	bfi	r3, r5, #5, #3
 800343a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800343e:	aa01      	add	r2, sp, #4
 8003440:	2301      	movs	r3, #1
 8003442:	2110      	movs	r1, #16
 8003444:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 8003446:	b002      	add	sp, #8
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	bf00      	nop

0800344c <iis3dwb_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t *val)
{
 800344c:	b530      	push	{r4, r5, lr}
 800344e:	b083      	sub	sp, #12
 8003450:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003452:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003456:	2301      	movs	r3, #1
 8003458:	aa01      	add	r2, sp, #4
 800345a:	2110      	movs	r1, #16
 800345c:	47a8      	blx	r5
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl,
                         1);

  switch (ctrl1_xl.xl_en) {
 800345e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2b05      	cmp	r3, #5
 8003466:	bf14      	ite	ne
 8003468:	2300      	movne	r3, #0
 800346a:	2305      	moveq	r3, #5
    case IIS3DWB_XL_ODR_OFF:
      *val = IIS3DWB_XL_ODR_OFF;
 800346c:	7023      	strb	r3, [r4, #0]
      *val = IIS3DWB_XL_ODR_OFF;
      break;
  }

  return ret;
}
 800346e:	b003      	add	sp, #12
 8003470:	bd30      	pop	{r4, r5, pc}
 8003472:	bf00      	nop

08003474 <iis3dwb_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003474:	b530      	push	{r4, r5, lr}
 8003476:	b083      	sub	sp, #12
 8003478:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800347a:	466a      	mov	r2, sp
 800347c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8003480:	2306      	movs	r3, #6
 8003482:	2128      	movs	r1, #40	@ 0x28
 8003484:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8003486:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800348a:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800348e:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8003492:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003496:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003498:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800349c:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80034a0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80034a4:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80034a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80034ae:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 80034b0:	b003      	add	sp, #12
 80034b2:	bd30      	pop	{r4, r5, pc}

080034b4 <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    iis3dwb_dataready_pulsed_t val)
{
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4604      	mov	r4, r0
 80034b8:	b082      	sub	sp, #8
 80034ba:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034bc:	6880      	ldr	r0, [r0, #8]
 80034be:	6866      	ldr	r6, [r4, #4]
 80034c0:	2301      	movs	r3, #1
 80034c2:	aa01      	add	r2, sp, #4
 80034c4:	210b      	movs	r1, #11
 80034c6:	47b0      	blx	r6
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                         (uint8_t *)&counter_bdr_reg1, 1);

  if (ret == 0) {
 80034c8:	b958      	cbnz	r0, 80034e2 <iis3dwb_data_ready_mode_set+0x2e>
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 80034ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034ce:	6826      	ldr	r6, [r4, #0]
 80034d0:	68a0      	ldr	r0, [r4, #8]
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 80034d2:	f365 13c7 	bfi	r3, r5, #7, #1
 80034d6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034da:	aa01      	add	r2, sp, #4
 80034dc:	2301      	movs	r3, #1
 80034de:	210b      	movs	r1, #11
 80034e0:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                            (uint8_t *)&counter_bdr_reg1, 1);
  }

  return ret;
}
 80034e2:	b002      	add	sp, #8
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
 80034e6:	bf00      	nop

080034e8 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80034e8:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034ea:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 80034ee:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034f0:	46a4      	mov	ip, r4
 80034f2:	2301      	movs	r3, #1
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
  return ret;
}
 80034f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034f8:	210f      	movs	r1, #15
 80034fa:	4760      	bx	ip

080034fc <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4604      	mov	r4, r0
 8003500:	b082      	sub	sp, #8
 8003502:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003504:	6880      	ldr	r0, [r0, #8]
 8003506:	6866      	ldr	r6, [r4, #4]
 8003508:	2301      	movs	r3, #1
 800350a:	aa01      	add	r2, sp, #4
 800350c:	2112      	movs	r1, #18
 800350e:	47b0      	blx	r6
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8003510:	b958      	cbnz	r0, 800352a <iis3dwb_reset_set+0x2e>
    ctrl3_c.sw_reset = (uint8_t)val;
 8003512:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003516:	6826      	ldr	r6, [r4, #0]
 8003518:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.sw_reset = (uint8_t)val;
 800351a:	f365 0300 	bfi	r3, r5, #0, #1
 800351e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003522:	aa01      	add	r2, sp, #4
 8003524:	2301      	movs	r3, #1
 8003526:	2112      	movs	r1, #18
 8003528:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 800352a:	b002      	add	sp, #8
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	bf00      	nop

08003530 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis3dwb_i2c_disable_t val)
{
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4604      	mov	r4, r0
 8003534:	b082      	sub	sp, #8
 8003536:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003538:	6880      	ldr	r0, [r0, #8]
 800353a:	6866      	ldr	r6, [r4, #4]
 800353c:	2301      	movs	r3, #1
 800353e:	aa01      	add	r2, sp, #4
 8003540:	2113      	movs	r1, #19
 8003542:	47b0      	blx	r6
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);

  if (ret == 0) {
 8003544:	b958      	cbnz	r0, 800355e <iis3dwb_i2c_interface_set+0x2e>
    ctrl4_c.i2c_disable = (uint8_t)val;
 8003546:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800354a:	6826      	ldr	r6, [r4, #0]
 800354c:	68a0      	ldr	r0, [r4, #8]
    ctrl4_c.i2c_disable = (uint8_t)val;
 800354e:	f365 0382 	bfi	r3, r5, #2, #1
 8003552:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003556:	aa01      	add	r2, sp, #4
 8003558:	2301      	movs	r3, #1
 800355a:	2113      	movs	r1, #19
 800355c:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
}
 800355e:	b002      	add	sp, #8
 8003560:	bd70      	pop	{r4, r5, r6, pc}
 8003562:	bf00      	nop

08003564 <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	4604      	mov	r4, r0
 8003568:	b082      	sub	sp, #8
 800356a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800356c:	6880      	ldr	r0, [r0, #8]
 800356e:	6866      	ldr	r6, [r4, #4]
 8003570:	2301      	movs	r3, #1
 8003572:	aa01      	add	r2, sp, #4
 8003574:	2108      	movs	r1, #8
 8003576:	47b0      	blx	r6
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 8003578:	b9a8      	cbnz	r0, 80035a6 <iis3dwb_fifo_watermark_set+0x42>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800357a:	68a0      	ldr	r0, [r4, #8]
 800357c:	6826      	ldr	r6, [r4, #0]
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 800357e:	f88d 5000 	strb.w	r5, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003582:	2301      	movs	r3, #1
 8003584:	466a      	mov	r2, sp
 8003586:	2107      	movs	r1, #7
 8003588:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
                            (uint8_t *)&fifo_ctrl1, 1);
  }

  if (ret == 0) {
 800358a:	b960      	cbnz	r0, 80035a6 <iis3dwb_fifo_watermark_set+0x42>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 800358c:	f89d c004 	ldrb.w	ip, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003590:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8003592:	0a29      	lsrs	r1, r5, #8
 8003594:	f361 0c00 	bfi	ip, r1, #0, #1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003598:	6825      	ldr	r5, [r4, #0]
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 800359a:	f88d c004 	strb.w	ip, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800359e:	2301      	movs	r3, #1
 80035a0:	aa01      	add	r2, sp, #4
 80035a2:	2108      	movs	r1, #8
 80035a4:	47a8      	blx	r5
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
                            (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
}
 80035a6:	b002      	add	sp, #8
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	bf00      	nop

080035ac <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  iis3dwb_bdr_xl_t val)
{
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	4604      	mov	r4, r0
 80035b0:	b082      	sub	sp, #8
 80035b2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80035b4:	6880      	ldr	r0, [r0, #8]
 80035b6:	6866      	ldr	r6, [r4, #4]
 80035b8:	2301      	movs	r3, #1
 80035ba:	aa01      	add	r2, sp, #4
 80035bc:	2109      	movs	r1, #9
 80035be:	47b0      	blx	r6
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 80035c0:	b958      	cbnz	r0, 80035da <iis3dwb_fifo_xl_batch_set+0x2e>
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 80035c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035c6:	6826      	ldr	r6, [r4, #0]
 80035c8:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 80035ca:	f365 0303 	bfi	r3, r5, #0, #4
 80035ce:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035d2:	aa01      	add	r2, sp, #4
 80035d4:	2301      	movs	r3, #1
 80035d6:	2109      	movs	r1, #9
 80035d8:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
}
 80035da:	b002      	add	sp, #8
 80035dc:	bd70      	pop	{r4, r5, r6, pc}
 80035de:	bf00      	nop

080035e0 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                              iis3dwb_fifo_mode_t val)
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4604      	mov	r4, r0
 80035e4:	b082      	sub	sp, #8
 80035e6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80035e8:	6880      	ldr	r0, [r0, #8]
 80035ea:	6866      	ldr	r6, [r4, #4]
 80035ec:	2301      	movs	r3, #1
 80035ee:	aa01      	add	r2, sp, #4
 80035f0:	210a      	movs	r1, #10
 80035f2:	47b0      	blx	r6
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 80035f4:	b958      	cbnz	r0, 800360e <iis3dwb_fifo_mode_set+0x2e>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80035f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035fa:	6826      	ldr	r6, [r4, #0]
 80035fc:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80035fe:	f365 0302 	bfi	r3, r5, #0, #3
 8003602:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003606:	aa01      	add	r2, sp, #4
 8003608:	2301      	movs	r3, #1
 800360a:	210a      	movs	r1, #10
 800360c:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 800360e:	b002      	add	sp, #8
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	bf00      	nop

08003614 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8003614:	b410      	push	{r4}

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 1;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 8003616:	f240 1c01 	movw	ip, #257	@ 0x101
 800361a:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6667.0f;
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <ISM330DHCX_GetCapabilities+0x28>)
 8003620:	610b      	str	r3, [r1, #16]
  Capabilities->MagMaxFS     = 0;
 8003622:	2000      	movs	r0, #0
  Capabilities->GyroMaxFS    = 2000;
 8003624:	e9c1 c400 	strd	ip, r4, [r1]
  Capabilities->AccMaxFS     = 16;
 8003628:	2410      	movs	r4, #16
  Capabilities->AccMaxOdr    = 6667.0f;
  Capabilities->MagMaxOdr    = 0.0f;
 800362a:	2200      	movs	r2, #0
  Capabilities->MagMaxFS     = 0;
 800362c:	e9c1 4002 	strd	r4, r0, [r1, #8]
  Capabilities->AccMaxOdr    = 6667.0f;
 8003630:	614b      	str	r3, [r1, #20]
  return ISM330DHCX_OK;
}
 8003632:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxOdr    = 0.0f;
 8003636:	618a      	str	r2, [r1, #24]
}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	45d05800 	.word	0x45d05800

08003640 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003640:	b410      	push	{r4}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003642:	6944      	ldr	r4, [r0, #20]
 8003644:	7b00      	ldrb	r0, [r0, #12]
 8003646:	46a4      	mov	ip, r4
}
 8003648:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800364c:	4760      	bx	ip
 800364e:	bf00      	nop

08003650 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003650:	b410      	push	{r4}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003652:	6904      	ldr	r4, [r0, #16]
 8003654:	7b00      	ldrb	r0, [r0, #12]
 8003656:	46a4      	mov	ip, r4
}
 8003658:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800365c:	4760      	bx	ip
 800365e:	bf00      	nop

08003660 <ISM330DHCX_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8003660:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8003664:	2b01      	cmp	r3, #1
 8003666:	d00c      	beq.n	8003682 <ISM330DHCX_ACC_Enable+0x22>
{
 8003668:	b510      	push	{r4, lr}
 800366a:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 800366c:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 8003670:	301c      	adds	r0, #28
 8003672:	f000 feed 	bl	8004450 <ism330dhcx_xl_data_rate_set>
 8003676:	b930      	cbnz	r0, 8003686 <ISM330DHCX_ACC_Enable+0x26>
  pObj->acc_is_enabled = 1;
 8003678:	2301      	movs	r3, #1
 800367a:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return ISM330DHCX_OK;
 800367e:	2000      	movs	r0, #0
}
 8003680:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 8003682:	2000      	movs	r0, #0
}
 8003684:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 8003686:	f04f 30ff 	mov.w	r0, #4294967295
}
 800368a:	bd10      	pop	{r4, pc}

0800368c <ISM330DHCX_ACC_SetFullScale>:
           : (FullScale <= 4) ? ISM330DHCX_4g
 800368c:	2902      	cmp	r1, #2
{
 800368e:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? ISM330DHCX_4g
 8003690:	dd06      	ble.n	80036a0 <ISM330DHCX_ACC_SetFullScale+0x14>
 8003692:	2904      	cmp	r1, #4
 8003694:	dd0d      	ble.n	80036b2 <ISM330DHCX_ACC_SetFullScale+0x26>
 8003696:	2908      	cmp	r1, #8
 8003698:	bfcc      	ite	gt
 800369a:	2101      	movgt	r1, #1
 800369c:	2103      	movle	r1, #3
 800369e:	e000      	b.n	80036a2 <ISM330DHCX_ACC_SetFullScale+0x16>
 80036a0:	2100      	movs	r1, #0
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80036a2:	301c      	adds	r0, #28
 80036a4:	f000 fcbc 	bl	8004020 <ism330dhcx_xl_full_scale_set>
 80036a8:	3800      	subs	r0, #0
 80036aa:	bf18      	it	ne
 80036ac:	2001      	movne	r0, #1
}
 80036ae:	4240      	negs	r0, r0
 80036b0:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? ISM330DHCX_4g
 80036b2:	2102      	movs	r1, #2
 80036b4:	e7f5      	b.n	80036a2 <ISM330DHCX_ACC_SetFullScale+0x16>
 80036b6:	bf00      	nop

080036b8 <ISM330DHCX_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 80036b8:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d00c      	beq.n	80036da <ISM330DHCX_GYRO_Enable+0x22>
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 80036c4:	f890 102c 	ldrb.w	r1, [r0, #44]	@ 0x2c
 80036c8:	301c      	adds	r0, #28
 80036ca:	f000 ffbd 	bl	8004648 <ism330dhcx_gy_data_rate_set>
 80036ce:	b930      	cbnz	r0, 80036de <ISM330DHCX_GYRO_Enable+0x26>
  pObj->gyro_is_enabled = 1;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return ISM330DHCX_OK;
 80036d6:	2000      	movs	r0, #0
}
 80036d8:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 80036da:	2000      	movs	r0, #0
}
 80036dc:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80036e2:	bd10      	pop	{r4, pc}

080036e4 <ISM330DHCX_GYRO_SetOutputDataRate>:
{
 80036e4:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 80036e6:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80036ea:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
  if (pObj->gyro_is_enabled == 1U)
 80036ee:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80036f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->gyro_is_enabled == 1U)
 80036f4:	d042      	beq.n	800377c <ISM330DHCX_GYRO_SetOutputDataRate+0x98>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80036f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fa:	d804      	bhi.n	8003706 <ISM330DHCX_GYRO_SetOutputDataRate+0x22>
 80036fc:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80036fe:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003702:	2000      	movs	r0, #0
}
 8003704:	bd08      	pop	{r3, pc}
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003706:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 800370a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003712:	d978      	bls.n	8003806 <ISM330DHCX_GYRO_SetOutputDataRate+0x122>
 8003714:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8003840 <ISM330DHCX_GYRO_SetOutputDataRate+0x15c>
 8003718:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	d975      	bls.n	800380e <ISM330DHCX_GYRO_SetOutputDataRate+0x12a>
 8003722:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8003844 <ISM330DHCX_GYRO_SetOutputDataRate+0x160>
 8003726:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	d972      	bls.n	8003816 <ISM330DHCX_GYRO_SetOutputDataRate+0x132>
 8003730:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8003848 <ISM330DHCX_GYRO_SetOutputDataRate+0x164>
 8003734:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d96f      	bls.n	800381e <ISM330DHCX_GYRO_SetOutputDataRate+0x13a>
 800373e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800384c <ISM330DHCX_GYRO_SetOutputDataRate+0x168>
 8003742:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374a:	d96c      	bls.n	8003826 <ISM330DHCX_GYRO_SetOutputDataRate+0x142>
 800374c:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8003850 <ISM330DHCX_GYRO_SetOutputDataRate+0x16c>
 8003750:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	d969      	bls.n	800382e <ISM330DHCX_GYRO_SetOutputDataRate+0x14a>
 800375a:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8003854 <ISM330DHCX_GYRO_SetOutputDataRate+0x170>
 800375e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003766:	d966      	bls.n	8003836 <ISM330DHCX_GYRO_SetOutputDataRate+0x152>
 8003768:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003858 <ISM330DHCX_GYRO_SetOutputDataRate+0x174>
 800376c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003774:	bf94      	ite	ls
 8003776:	2309      	movls	r3, #9
 8003778:	230a      	movhi	r3, #10
 800377a:	e7c0      	b.n	80036fe <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003780:	d939      	bls.n	80037f6 <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
 8003782:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003786:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	d93c      	bls.n	800380a <ISM330DHCX_GYRO_SetOutputDataRate+0x126>
 8003790:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8003840 <ISM330DHCX_GYRO_SetOutputDataRate+0x15c>
 8003794:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379c:	d939      	bls.n	8003812 <ISM330DHCX_GYRO_SetOutputDataRate+0x12e>
 800379e:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8003844 <ISM330DHCX_GYRO_SetOutputDataRate+0x160>
 80037a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80037a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037aa:	d936      	bls.n	800381a <ISM330DHCX_GYRO_SetOutputDataRate+0x136>
 80037ac:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8003848 <ISM330DHCX_GYRO_SetOutputDataRate+0x164>
 80037b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80037b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b8:	d933      	bls.n	8003822 <ISM330DHCX_GYRO_SetOutputDataRate+0x13e>
 80037ba:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800384c <ISM330DHCX_GYRO_SetOutputDataRate+0x168>
 80037be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	d930      	bls.n	800382a <ISM330DHCX_GYRO_SetOutputDataRate+0x146>
 80037c8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8003850 <ISM330DHCX_GYRO_SetOutputDataRate+0x16c>
 80037cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80037d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d4:	d92d      	bls.n	8003832 <ISM330DHCX_GYRO_SetOutputDataRate+0x14e>
 80037d6:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003854 <ISM330DHCX_GYRO_SetOutputDataRate+0x170>
 80037da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80037de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e2:	d92a      	bls.n	800383a <ISM330DHCX_GYRO_SetOutputDataRate+0x156>
 80037e4:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8003858 <ISM330DHCX_GYRO_SetOutputDataRate+0x174>
 80037e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80037ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f0:	bf94      	ite	ls
 80037f2:	2109      	movls	r1, #9
 80037f4:	210a      	movhi	r1, #10
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80037f6:	301c      	adds	r0, #28
 80037f8:	f000 ff26 	bl	8004648 <ism330dhcx_gy_data_rate_set>
 80037fc:	3800      	subs	r0, #0
 80037fe:	bf18      	it	ne
 8003800:	2001      	movne	r0, #1
 8003802:	4240      	negs	r0, r0
}
 8003804:	bd08      	pop	{r3, pc}
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003806:	2302      	movs	r3, #2
 8003808:	e779      	b.n	80036fe <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800380a:	2102      	movs	r1, #2
 800380c:	e7f3      	b.n	80037f6 <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800380e:	2303      	movs	r3, #3
 8003810:	e775      	b.n	80036fe <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003812:	2103      	movs	r1, #3
 8003814:	e7ef      	b.n	80037f6 <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003816:	2304      	movs	r3, #4
 8003818:	e771      	b.n	80036fe <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800381a:	2104      	movs	r1, #4
 800381c:	e7eb      	b.n	80037f6 <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800381e:	2305      	movs	r3, #5
 8003820:	e76d      	b.n	80036fe <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003822:	2105      	movs	r1, #5
 8003824:	e7e7      	b.n	80037f6 <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003826:	2306      	movs	r3, #6
 8003828:	e769      	b.n	80036fe <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800382a:	2106      	movs	r1, #6
 800382c:	e7e3      	b.n	80037f6 <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800382e:	2307      	movs	r3, #7
 8003830:	e765      	b.n	80036fe <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003832:	2107      	movs	r1, #7
 8003834:	e7df      	b.n	80037f6 <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003836:	2308      	movs	r3, #8
 8003838:	e761      	b.n	80036fe <ISM330DHCX_GYRO_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800383a:	2108      	movs	r1, #8
 800383c:	e7db      	b.n	80037f6 <ISM330DHCX_GYRO_SetOutputDataRate+0x112>
 800383e:	bf00      	nop
 8003840:	42500000 	.word	0x42500000
 8003844:	42d00000 	.word	0x42d00000
 8003848:	43500000 	.word	0x43500000
 800384c:	43d08000 	.word	0x43d08000
 8003850:	44504000 	.word	0x44504000
 8003854:	44d06000 	.word	0x44d06000
 8003858:	45505000 	.word	0x45505000

0800385c <ISM330DHCX_Init>:
{
 800385c:	b570      	push	{r4, r5, r6, lr}
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800385e:	f100 041c 	add.w	r4, r0, #28
{
 8003862:	4605      	mov	r5, r0
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003864:	2101      	movs	r1, #1
 8003866:	4620      	mov	r0, r4
 8003868:	f000 fd34 	bl	80042d4 <ism330dhcx_auto_increment_set>
 800386c:	bb80      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 800386e:	2101      	movs	r1, #1
 8003870:	4620      	mov	r0, r4
 8003872:	f000 fd15 	bl	80042a0 <ism330dhcx_reset_set>
 8003876:	bb58      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8003878:	2101      	movs	r1, #1
 800387a:	4620      	mov	r0, r4
 800387c:	f000 fd2a 	bl	80042d4 <ism330dhcx_auto_increment_set>
 8003880:	bb30      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003882:	2101      	movs	r1, #1
 8003884:	4620      	mov	r0, r4
 8003886:	f000 fca7 	bl	80041d8 <ism330dhcx_block_data_update_set>
 800388a:	4601      	mov	r1, r0
 800388c:	bb00      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 800388e:	4620      	mov	r0, r4
 8003890:	f000 fd3a 	bl	8004308 <ism330dhcx_fifo_mode_set>
 8003894:	4601      	mov	r1, r0
 8003896:	b9d8      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8003898:	2604      	movs	r6, #4
 800389a:	f885 602b 	strb.w	r6, [r5, #43]	@ 0x2b
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800389e:	4620      	mov	r0, r4
 80038a0:	f000 fdd6 	bl	8004450 <ism330dhcx_xl_data_rate_set>
 80038a4:	4601      	mov	r1, r0
 80038a6:	b998      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80038a8:	4620      	mov	r0, r4
 80038aa:	f000 fbb9 	bl	8004020 <ism330dhcx_xl_full_scale_set>
 80038ae:	4601      	mov	r1, r0
 80038b0:	b970      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80038b2:	f885 602c 	strb.w	r6, [r5, #44]	@ 0x2c
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80038b6:	4620      	mov	r0, r4
 80038b8:	f000 fec6 	bl	8004648 <ism330dhcx_gy_data_rate_set>
 80038bc:	b940      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 80038be:	210c      	movs	r1, #12
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 fc13 	bl	80040ec <ism330dhcx_gy_full_scale_set>
 80038c6:	b918      	cbnz	r0, 80038d0 <ISM330DHCX_Init+0x74>
  pObj->is_initialized = 1;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
}
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
    return ISM330DHCX_ERROR;
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80038d4:	bd70      	pop	{r4, r5, r6, pc}
 80038d6:	bf00      	nop

080038d8 <ISM330DHCX_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80038d8:	297d      	cmp	r1, #125	@ 0x7d
{
 80038da:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80038dc:	dd0a      	ble.n	80038f4 <ISM330DHCX_GYRO_SetFullScale+0x1c>
 80038de:	29fa      	cmp	r1, #250	@ 0xfa
 80038e0:	dd11      	ble.n	8003906 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 80038e2:	f5b1 7ffa 	cmp.w	r1, #500	@ 0x1f4
 80038e6:	dd10      	ble.n	800390a <ISM330DHCX_GYRO_SetFullScale+0x32>
 80038e8:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 80038ec:	bfcc      	ite	gt
 80038ee:	210c      	movgt	r1, #12
 80038f0:	2108      	movle	r1, #8
 80038f2:	e000      	b.n	80038f6 <ISM330DHCX_GYRO_SetFullScale+0x1e>
 80038f4:	2102      	movs	r1, #2
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80038f6:	301c      	adds	r0, #28
 80038f8:	f000 fbf8 	bl	80040ec <ism330dhcx_gy_full_scale_set>
 80038fc:	3800      	subs	r0, #0
 80038fe:	bf18      	it	ne
 8003900:	2001      	movne	r0, #1
}
 8003902:	4240      	negs	r0, r0
 8003904:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003906:	2100      	movs	r1, #0
 8003908:	e7f5      	b.n	80038f6 <ISM330DHCX_GYRO_SetFullScale+0x1e>
 800390a:	2104      	movs	r1, #4
 800390c:	e7f3      	b.n	80038f6 <ISM330DHCX_GYRO_SetFullScale+0x1e>
 800390e:	bf00      	nop

08003910 <ISM330DHCX_ReadID>:
{
 8003910:	b508      	push	{r3, lr}
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8003912:	301c      	adds	r0, #28
 8003914:	f000 fcba 	bl	800428c <ism330dhcx_device_id_get>
 8003918:	3800      	subs	r0, #0
 800391a:	bf18      	it	ne
 800391c:	2001      	movne	r0, #1
}
 800391e:	4240      	negs	r0, r0
 8003920:	bd08      	pop	{r3, pc}
 8003922:	bf00      	nop

08003924 <ISM330DHCX_ACC_Disable>:
{
 8003924:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003926:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 800392a:	b90b      	cbnz	r3, 8003930 <ISM330DHCX_ACC_Disable+0xc>
    return ISM330DHCX_OK;
 800392c:	2000      	movs	r0, #0
}
 800392e:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003930:	f100 051c 	add.w	r5, r0, #28
 8003934:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8003938:	4604      	mov	r4, r0
 800393a:	4628      	mov	r0, r5
 800393c:	f000 fba4 	bl	8004088 <ism330dhcx_xl_data_rate_get>
 8003940:	4601      	mov	r1, r0
 8003942:	b930      	cbnz	r0, 8003952 <ISM330DHCX_ACC_Disable+0x2e>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003944:	4628      	mov	r0, r5
 8003946:	f000 fd83 	bl	8004450 <ism330dhcx_xl_data_rate_set>
 800394a:	b910      	cbnz	r0, 8003952 <ISM330DHCX_ACC_Disable+0x2e>
  pObj->acc_is_enabled = 0;
 800394c:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return ISM330DHCX_OK;
 8003950:	e7ec      	b.n	800392c <ISM330DHCX_ACC_Disable+0x8>
    return ISM330DHCX_ERROR;
 8003952:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003956:	bd38      	pop	{r3, r4, r5, pc}

08003958 <ISM330DHCX_ACC_GetOutputDataRate>:
{
 8003958:	b510      	push	{r4, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	460c      	mov	r4, r1
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800395e:	301c      	adds	r0, #28
 8003960:	f10d 0107 	add.w	r1, sp, #7
 8003964:	f000 fb90 	bl	8004088 <ism330dhcx_xl_data_rate_get>
 8003968:	bb18      	cbnz	r0, 80039b2 <ISM330DHCX_ACC_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 800396a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800396e:	2b0a      	cmp	r3, #10
 8003970:	d81f      	bhi.n	80039b2 <ISM330DHCX_ACC_GetOutputDataRate+0x5a>
 8003972:	e8df f003 	tbb	[pc, r3]
 8003976:	060a      	.short	0x060a
 8003978:	18160e0c 	.word	0x18160e0c
 800397c:	14121c1a 	.word	0x14121c1a
 8003980:	10          	.byte	0x10
 8003981:	00          	.byte	0x00
 8003982:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <ISM330DHCX_ACC_GetOutputDataRate+0x60>)
      *Odr = 0.0f;
 8003984:	6023      	str	r3, [r4, #0]
}
 8003986:	b002      	add	sp, #8
 8003988:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 800398a:	2300      	movs	r3, #0
 800398c:	e7fa      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <ISM330DHCX_ACC_GetOutputDataRate+0x64>)
 8003990:	e7f8      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003992:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <ISM330DHCX_ACC_GetOutputDataRate+0x68>)
 8003994:	e7f6      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 8003996:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <ISM330DHCX_ACC_GetOutputDataRate+0x6c>)
 8003998:	e7f4      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 800399a:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <ISM330DHCX_ACC_GetOutputDataRate+0x70>)
 800399c:	e7f2      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 800399e:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <ISM330DHCX_ACC_GetOutputDataRate+0x74>)
 80039a0:	e7f0      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <ISM330DHCX_ACC_GetOutputDataRate+0x78>)
 80039a4:	e7ee      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <ISM330DHCX_ACC_GetOutputDataRate+0x7c>)
 80039a8:	e7ec      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <ISM330DHCX_ACC_GetOutputDataRate+0x80>)
 80039ac:	e7ea      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
      break;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <ISM330DHCX_ACC_GetOutputDataRate+0x84>)
 80039b0:	e7e8      	b.n	8003984 <ISM330DHCX_ACC_GetOutputDataRate+0x2c>
  switch (odr_low_level)
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295
 80039b6:	e7e6      	b.n	8003986 <ISM330DHCX_ACC_GetOutputDataRate+0x2e>
 80039b8:	41480000 	.word	0x41480000
 80039bc:	41d00000 	.word	0x41d00000
 80039c0:	42500000 	.word	0x42500000
 80039c4:	45d05800 	.word	0x45d05800
 80039c8:	44d06000 	.word	0x44d06000
 80039cc:	45505000 	.word	0x45505000
 80039d0:	42d00000 	.word	0x42d00000
 80039d4:	43500000 	.word	0x43500000
 80039d8:	43d08000 	.word	0x43d08000
 80039dc:	44504000 	.word	0x44504000

080039e0 <ISM330DHCX_ACC_GetSensitivity>:
{
 80039e0:	b510      	push	{r4, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80039e6:	301c      	adds	r0, #28
 80039e8:	f10d 0107 	add.w	r1, sp, #7
 80039ec:	f000 fb32 	bl	8004054 <ism330dhcx_xl_full_scale_get>
 80039f0:	b988      	cbnz	r0, 8003a16 <ISM330DHCX_ACC_GetSensitivity+0x36>
  switch (full_scale)
 80039f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d80d      	bhi.n	8003a16 <ISM330DHCX_ACC_GetSensitivity+0x36>
 80039fa:	e8df f003 	tbb	[pc, r3]
 80039fe:	0a06      	.short	0x0a06
 8003a00:	0802      	.short	0x0802
 8003a02:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <ISM330DHCX_ACC_GetSensitivity+0x3c>)
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003a04:	6023      	str	r3, [r4, #0]
}
 8003a06:	b002      	add	sp, #8
 8003a08:	bd10      	pop	{r4, pc}
  switch (full_scale)
 8003a0a:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <ISM330DHCX_ACC_GetSensitivity+0x40>)
 8003a0c:	e7fa      	b.n	8003a04 <ISM330DHCX_ACC_GetSensitivity+0x24>
      break;
 8003a0e:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <ISM330DHCX_ACC_GetSensitivity+0x44>)
 8003a10:	e7f8      	b.n	8003a04 <ISM330DHCX_ACC_GetSensitivity+0x24>
      break;
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <ISM330DHCX_ACC_GetSensitivity+0x48>)
 8003a14:	e7f6      	b.n	8003a04 <ISM330DHCX_ACC_GetSensitivity+0x24>
  switch (full_scale)
 8003a16:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1a:	e7f4      	b.n	8003a06 <ISM330DHCX_ACC_GetSensitivity+0x26>
 8003a1c:	3df9db23 	.word	0x3df9db23
 8003a20:	3d79db23 	.word	0x3d79db23
 8003a24:	3e79db23 	.word	0x3e79db23
 8003a28:	3ef9db23 	.word	0x3ef9db23

08003a2c <ISM330DHCX_ACC_GetFullScale>:
{
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003a32:	301c      	adds	r0, #28
 8003a34:	f10d 0107 	add.w	r1, sp, #7
 8003a38:	f000 fb0c 	bl	8004054 <ism330dhcx_xl_full_scale_get>
 8003a3c:	b988      	cbnz	r0, 8003a62 <ISM330DHCX_ACC_GetFullScale+0x36>
  switch (fs_low_level)
 8003a3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d80d      	bhi.n	8003a62 <ISM330DHCX_ACC_GetFullScale+0x36>
 8003a46:	e8df f003 	tbb	[pc, r3]
 8003a4a:	0a06      	.short	0x0a06
 8003a4c:	0802      	.short	0x0802
 8003a4e:	2304      	movs	r3, #4
      *FullScale =  2;
 8003a50:	6023      	str	r3, [r4, #0]
}
 8003a52:	b002      	add	sp, #8
 8003a54:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 8003a56:	2302      	movs	r3, #2
 8003a58:	e7fa      	b.n	8003a50 <ISM330DHCX_ACC_GetFullScale+0x24>
      break;
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	e7f8      	b.n	8003a50 <ISM330DHCX_ACC_GetFullScale+0x24>
      break;
 8003a5e:	2310      	movs	r3, #16
 8003a60:	e7f6      	b.n	8003a50 <ISM330DHCX_ACC_GetFullScale+0x24>
  switch (fs_low_level)
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	e7f4      	b.n	8003a52 <ISM330DHCX_ACC_GetFullScale+0x26>

08003a68 <ISM330DHCX_ACC_GetAxesRaw>:
{
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003a6e:	301c      	adds	r0, #28
 8003a70:	4669      	mov	r1, sp
 8003a72:	f000 fbeb 	bl	800424c <ism330dhcx_acceleration_raw_get>
 8003a76:	b930      	cbnz	r0, 8003a86 <ISM330DHCX_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8003a78:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8003a7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8003a7e:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8003a80:	80a3      	strh	r3, [r4, #4]
}
 8003a82:	b002      	add	sp, #8
 8003a84:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8003a86:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8a:	e7fa      	b.n	8003a82 <ISM330DHCX_ACC_GetAxesRaw+0x1a>

08003a8c <ISM330DHCX_GYRO_Disable>:
{
 8003a8c:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8003a8e:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8003a92:	b90b      	cbnz	r3, 8003a98 <ISM330DHCX_GYRO_Disable+0xc>
    return ISM330DHCX_OK;
 8003a94:	2000      	movs	r0, #0
}
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003a98:	f100 051c 	add.w	r5, r0, #28
 8003a9c:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 fb6a 	bl	800417c <ism330dhcx_gy_data_rate_get>
 8003aa8:	4601      	mov	r1, r0
 8003aaa:	b930      	cbnz	r0, 8003aba <ISM330DHCX_GYRO_Disable+0x2e>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003aac:	4628      	mov	r0, r5
 8003aae:	f000 fdcb 	bl	8004648 <ism330dhcx_gy_data_rate_set>
 8003ab2:	b910      	cbnz	r0, 8003aba <ISM330DHCX_GYRO_Disable+0x2e>
  pObj->gyro_is_enabled = 0;
 8003ab4:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return ISM330DHCX_OK;
 8003ab8:	e7ec      	b.n	8003a94 <ISM330DHCX_GYRO_Disable+0x8>
    return ISM330DHCX_ERROR;
 8003aba:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003abe:	bd38      	pop	{r3, r4, r5, pc}

08003ac0 <ISM330DHCX_GYRO_GetOutputDataRate>:
{
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	460c      	mov	r4, r1
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003ac6:	301c      	adds	r0, #28
 8003ac8:	f10d 0107 	add.w	r1, sp, #7
 8003acc:	f000 fb56 	bl	800417c <ism330dhcx_gy_data_rate_get>
 8003ad0:	bb18      	cbnz	r0, 8003b1a <ISM330DHCX_GYRO_GetOutputDataRate+0x5a>
  switch (odr_low_level)
 8003ad2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ad6:	2b0a      	cmp	r3, #10
 8003ad8:	d81f      	bhi.n	8003b1a <ISM330DHCX_GYRO_GetOutputDataRate+0x5a>
 8003ada:	e8df f003 	tbb	[pc, r3]
 8003ade:	060a      	.short	0x060a
 8003ae0:	18160e0c 	.word	0x18160e0c
 8003ae4:	14121c1a 	.word	0x14121c1a
 8003ae8:	10          	.byte	0x10
 8003ae9:	00          	.byte	0x00
 8003aea:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <ISM330DHCX_GYRO_GetOutputDataRate+0x60>)
      *Odr = 0.0f;
 8003aec:	6023      	str	r3, [r4, #0]
}
 8003aee:	b002      	add	sp, #8
 8003af0:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8003af2:	2300      	movs	r3, #0
 8003af4:	e7fa      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <ISM330DHCX_GYRO_GetOutputDataRate+0x64>)
 8003af8:	e7f8      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003afa:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <ISM330DHCX_GYRO_GetOutputDataRate+0x68>)
 8003afc:	e7f6      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <ISM330DHCX_GYRO_GetOutputDataRate+0x6c>)
 8003b00:	e7f4      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <ISM330DHCX_GYRO_GetOutputDataRate+0x70>)
 8003b04:	e7f2      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <ISM330DHCX_GYRO_GetOutputDataRate+0x74>)
 8003b08:	e7f0      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <ISM330DHCX_GYRO_GetOutputDataRate+0x78>)
 8003b0c:	e7ee      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <ISM330DHCX_GYRO_GetOutputDataRate+0x7c>)
 8003b10:	e7ec      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <ISM330DHCX_GYRO_GetOutputDataRate+0x80>)
 8003b14:	e7ea      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
      break;
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <ISM330DHCX_GYRO_GetOutputDataRate+0x84>)
 8003b18:	e7e8      	b.n	8003aec <ISM330DHCX_GYRO_GetOutputDataRate+0x2c>
  switch (odr_low_level)
 8003b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1e:	e7e6      	b.n	8003aee <ISM330DHCX_GYRO_GetOutputDataRate+0x2e>
 8003b20:	41480000 	.word	0x41480000
 8003b24:	41d00000 	.word	0x41d00000
 8003b28:	42500000 	.word	0x42500000
 8003b2c:	45d05800 	.word	0x45d05800
 8003b30:	44d06000 	.word	0x44d06000
 8003b34:	45505000 	.word	0x45505000
 8003b38:	42d00000 	.word	0x42d00000
 8003b3c:	43500000 	.word	0x43500000
 8003b40:	43d08000 	.word	0x43d08000
 8003b44:	44504000 	.word	0x44504000

08003b48 <ISM330DHCX_GYRO_GetSensitivity>:
{
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003b4e:	301c      	adds	r0, #28
 8003b50:	f10d 0107 	add.w	r1, sp, #7
 8003b54:	f000 fae4 	bl	8004120 <ism330dhcx_gy_full_scale_get>
 8003b58:	b960      	cbnz	r0, 8003b74 <ISM330DHCX_GYRO_GetSensitivity+0x2c>
  switch (full_scale)
 8003b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d808      	bhi.n	8003b74 <ISM330DHCX_GYRO_GetSensitivity+0x2c>
 8003b62:	e8df f003 	tbb	[pc, r3]
 8003b66:	0713      	.short	0x0713
 8003b68:	070f0715 	.word	0x070f0715
 8003b6c:	07110707 	.word	0x07110707
 8003b70:	0707      	.short	0x0707
 8003b72:	0b          	.byte	0x0b
 8003b73:	00          	.byte	0x00
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd10      	pop	{r4, pc}
      break;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ISM330DHCX_GYRO_GetSensitivity+0x4c>)
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003b7e:	6023      	str	r3, [r4, #0]
}
 8003b80:	b002      	add	sp, #8
 8003b82:	bd10      	pop	{r4, pc}
      break;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ISM330DHCX_GYRO_GetSensitivity+0x50>)
 8003b86:	e7fa      	b.n	8003b7e <ISM330DHCX_GYRO_GetSensitivity+0x36>
      break;
 8003b88:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <ISM330DHCX_GYRO_GetSensitivity+0x54>)
 8003b8a:	e7f8      	b.n	8003b7e <ISM330DHCX_GYRO_GetSensitivity+0x36>
  switch (full_scale)
 8003b8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <ISM330DHCX_GYRO_GetSensitivity+0x58>)
 8003b8e:	e7f6      	b.n	8003b7e <ISM330DHCX_GYRO_GetSensitivity+0x36>
 8003b90:	4b04      	ldr	r3, [pc, #16]	@ (8003ba4 <ISM330DHCX_GYRO_GetSensitivity+0x5c>)
 8003b92:	e7f4      	b.n	8003b7e <ISM330DHCX_GYRO_GetSensitivity+0x36>
 8003b94:	428c0000 	.word	0x428c0000
 8003b98:	418c0000 	.word	0x418c0000
 8003b9c:	420c0000 	.word	0x420c0000
 8003ba0:	410c0000 	.word	0x410c0000
 8003ba4:	408c0000 	.word	0x408c0000

08003ba8 <ISM330DHCX_GYRO_GetFullScale>:
{
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003bae:	301c      	adds	r0, #28
 8003bb0:	f10d 0107 	add.w	r1, sp, #7
 8003bb4:	f000 fab4 	bl	8004120 <ism330dhcx_gy_full_scale_get>
 8003bb8:	b960      	cbnz	r0, 8003bd4 <ISM330DHCX_GYRO_GetFullScale+0x2c>
  switch (fs_low_level)
 8003bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d808      	bhi.n	8003bd4 <ISM330DHCX_GYRO_GetFullScale+0x2c>
 8003bc2:	e8df f003 	tbb	[pc, r3]
 8003bc6:	0716      	.short	0x0716
 8003bc8:	07100718 	.word	0x07100718
 8003bcc:	07130707 	.word	0x07130707
 8003bd0:	0707      	.short	0x0707
 8003bd2:	0b          	.byte	0x0b
 8003bd3:	00          	.byte	0x00
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd10      	pop	{r4, pc}
      break;
 8003bdc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
      *FullScale =  125;
 8003be0:	6023      	str	r3, [r4, #0]
}
 8003be2:	b002      	add	sp, #8
 8003be4:	bd10      	pop	{r4, pc}
      break;
 8003be6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003bea:	e7f9      	b.n	8003be0 <ISM330DHCX_GYRO_GetFullScale+0x38>
      break;
 8003bec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bf0:	e7f6      	b.n	8003be0 <ISM330DHCX_GYRO_GetFullScale+0x38>
  switch (fs_low_level)
 8003bf2:	23fa      	movs	r3, #250	@ 0xfa
 8003bf4:	e7f4      	b.n	8003be0 <ISM330DHCX_GYRO_GetFullScale+0x38>
 8003bf6:	237d      	movs	r3, #125	@ 0x7d
 8003bf8:	e7f2      	b.n	8003be0 <ISM330DHCX_GYRO_GetFullScale+0x38>
 8003bfa:	bf00      	nop

08003bfc <ISM330DHCX_GYRO_GetAxesRaw>:
{
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003c02:	301c      	adds	r0, #28
 8003c04:	4669      	mov	r1, sp
 8003c06:	f000 fb01 	bl	800420c <ism330dhcx_angular_rate_raw_get>
 8003c0a:	b930      	cbnz	r0, 8003c1a <ISM330DHCX_GYRO_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8003c0c:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8003c0e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8003c12:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8003c14:	80a3      	strh	r3, [r4, #4]
}
 8003c16:	b002      	add	sp, #8
 8003c18:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8003c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1e:	e7fa      	b.n	8003c16 <ISM330DHCX_GYRO_GetAxesRaw+0x1a>

08003c20 <ISM330DHCX_ACC_SetOutputDataRate>:
{
 8003c20:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8003c22:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003c26:	eef2 7a09 	vmov.f32	s15, #41	@ 0x41480000  12.5
  if (pObj->acc_is_enabled == 1U)
 8003c2a:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003c2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8003c30:	d042      	beq.n	8003cb8 <ISM330DHCX_ACC_SetOutputDataRate+0x98>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c36:	d804      	bhi.n	8003c42 <ISM330DHCX_ACC_SetOutputDataRate+0x22>
 8003c38:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003c3a:	f880 302b 	strb.w	r3, [r0, #43]	@ 0x2b
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003c3e:	2000      	movs	r0, #0
}
 8003c40:	bd08      	pop	{r3, pc}
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003c42:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003c46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4e:	d978      	bls.n	8003d42 <ISM330DHCX_ACC_SetOutputDataRate+0x122>
 8003c50:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8003d7c <ISM330DHCX_ACC_SetOutputDataRate+0x15c>
 8003c54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5c:	d975      	bls.n	8003d4a <ISM330DHCX_ACC_SetOutputDataRate+0x12a>
 8003c5e:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8003d80 <ISM330DHCX_ACC_SetOutputDataRate+0x160>
 8003c62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	d972      	bls.n	8003d52 <ISM330DHCX_ACC_SetOutputDataRate+0x132>
 8003c6c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8003d84 <ISM330DHCX_ACC_SetOutputDataRate+0x164>
 8003c70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	d96f      	bls.n	8003d5a <ISM330DHCX_ACC_SetOutputDataRate+0x13a>
 8003c7a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8003d88 <ISM330DHCX_ACC_SetOutputDataRate+0x168>
 8003c7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c86:	d96c      	bls.n	8003d62 <ISM330DHCX_ACC_SetOutputDataRate+0x142>
 8003c88:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8003d8c <ISM330DHCX_ACC_SetOutputDataRate+0x16c>
 8003c8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	d969      	bls.n	8003d6a <ISM330DHCX_ACC_SetOutputDataRate+0x14a>
 8003c96:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8003d90 <ISM330DHCX_ACC_SetOutputDataRate+0x170>
 8003c9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	d966      	bls.n	8003d72 <ISM330DHCX_ACC_SetOutputDataRate+0x152>
 8003ca4:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003d94 <ISM330DHCX_ACC_SetOutputDataRate+0x174>
 8003ca8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb0:	bf94      	ite	ls
 8003cb2:	2309      	movls	r3, #9
 8003cb4:	230a      	movhi	r3, #10
 8003cb6:	e7c0      	b.n	8003c3a <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbc:	d939      	bls.n	8003d32 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
 8003cbe:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
 8003cc2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cca:	d93c      	bls.n	8003d46 <ISM330DHCX_ACC_SetOutputDataRate+0x126>
 8003ccc:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8003d7c <ISM330DHCX_ACC_SetOutputDataRate+0x15c>
 8003cd0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd8:	d939      	bls.n	8003d4e <ISM330DHCX_ACC_SetOutputDataRate+0x12e>
 8003cda:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8003d80 <ISM330DHCX_ACC_SetOutputDataRate+0x160>
 8003cde:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce6:	d936      	bls.n	8003d56 <ISM330DHCX_ACC_SetOutputDataRate+0x136>
 8003ce8:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8003d84 <ISM330DHCX_ACC_SetOutputDataRate+0x164>
 8003cec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf4:	d933      	bls.n	8003d5e <ISM330DHCX_ACC_SetOutputDataRate+0x13e>
 8003cf6:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003d88 <ISM330DHCX_ACC_SetOutputDataRate+0x168>
 8003cfa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d930      	bls.n	8003d66 <ISM330DHCX_ACC_SetOutputDataRate+0x146>
 8003d04:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8003d8c <ISM330DHCX_ACC_SetOutputDataRate+0x16c>
 8003d08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	d92d      	bls.n	8003d6e <ISM330DHCX_ACC_SetOutputDataRate+0x14e>
 8003d12:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003d90 <ISM330DHCX_ACC_SetOutputDataRate+0x170>
 8003d16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	d92a      	bls.n	8003d76 <ISM330DHCX_ACC_SetOutputDataRate+0x156>
 8003d20:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8003d94 <ISM330DHCX_ACC_SetOutputDataRate+0x174>
 8003d24:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	bf94      	ite	ls
 8003d2e:	2109      	movls	r1, #9
 8003d30:	210a      	movhi	r1, #10
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003d32:	301c      	adds	r0, #28
 8003d34:	f000 fb8c 	bl	8004450 <ism330dhcx_xl_data_rate_set>
 8003d38:	3800      	subs	r0, #0
 8003d3a:	bf18      	it	ne
 8003d3c:	2001      	movne	r0, #1
 8003d3e:	4240      	negs	r0, r0
}
 8003d40:	bd08      	pop	{r3, pc}
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d42:	2302      	movs	r3, #2
 8003d44:	e779      	b.n	8003c3a <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d46:	2102      	movs	r1, #2
 8003d48:	e7f3      	b.n	8003d32 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e775      	b.n	8003c3a <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d4e:	2103      	movs	r1, #3
 8003d50:	e7ef      	b.n	8003d32 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d52:	2304      	movs	r3, #4
 8003d54:	e771      	b.n	8003c3a <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d56:	2104      	movs	r1, #4
 8003d58:	e7eb      	b.n	8003d32 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e76d      	b.n	8003c3a <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d5e:	2105      	movs	r1, #5
 8003d60:	e7e7      	b.n	8003d32 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d62:	2306      	movs	r3, #6
 8003d64:	e769      	b.n	8003c3a <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d66:	2106      	movs	r1, #6
 8003d68:	e7e3      	b.n	8003d32 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d6a:	2307      	movs	r3, #7
 8003d6c:	e765      	b.n	8003c3a <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d6e:	2107      	movs	r1, #7
 8003d70:	e7df      	b.n	8003d32 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d72:	2308      	movs	r3, #8
 8003d74:	e761      	b.n	8003c3a <ISM330DHCX_ACC_SetOutputDataRate+0x1a>
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d76:	2108      	movs	r1, #8
 8003d78:	e7db      	b.n	8003d32 <ISM330DHCX_ACC_SetOutputDataRate+0x112>
 8003d7a:	bf00      	nop
 8003d7c:	42500000 	.word	0x42500000
 8003d80:	42d00000 	.word	0x42d00000
 8003d84:	43500000 	.word	0x43500000
 8003d88:	43d08000 	.word	0x43d08000
 8003d8c:	44504000 	.word	0x44504000
 8003d90:	44d06000 	.word	0x44d06000
 8003d94:	45505000 	.word	0x45505000

08003d98 <ISM330DHCX_DeInit>:
{
 8003d98:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003d9a:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
{
 8003d9e:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8003da0:	b943      	cbnz	r3, 8003db4 <ISM330DHCX_DeInit+0x1c>
  if (pObj->gyro_is_enabled == 0U)
 8003da2:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003da6:	b9c3      	cbnz	r3, 8003dda <ISM330DHCX_DeInit+0x42>
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8003da8:	2000      	movs	r0, #0
 8003daa:	f8a4 002b 	strh.w	r0, [r4, #43]	@ 0x2b
  pObj->is_initialized = 0;
 8003dae:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003db4:	f100 051c 	add.w	r5, r0, #28
 8003db8:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 f963 	bl	8004088 <ism330dhcx_xl_data_rate_get>
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	b9c8      	cbnz	r0, 8003dfa <ISM330DHCX_DeInit+0x62>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f000 fb42 	bl	8004450 <ism330dhcx_xl_data_rate_set>
 8003dcc:	b9a8      	cbnz	r0, 8003dfa <ISM330DHCX_DeInit+0x62>
  if (pObj->gyro_is_enabled == 0U)
 8003dce:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
  pObj->acc_is_enabled = 0;
 8003dd2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->gyro_is_enabled == 0U)
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0e6      	beq.n	8003da8 <ISM330DHCX_DeInit+0x10>
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003dda:	f104 051c 	add.w	r5, r4, #28
 8003dde:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 8003de2:	4628      	mov	r0, r5
 8003de4:	f000 f9ca 	bl	800417c <ism330dhcx_gy_data_rate_get>
 8003de8:	4601      	mov	r1, r0
 8003dea:	b930      	cbnz	r0, 8003dfa <ISM330DHCX_DeInit+0x62>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003dec:	4628      	mov	r0, r5
 8003dee:	f000 fc2b 	bl	8004648 <ism330dhcx_gy_data_rate_set>
 8003df2:	b910      	cbnz	r0, 8003dfa <ISM330DHCX_DeInit+0x62>
  pObj->gyro_is_enabled = 0;
 8003df4:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return ISM330DHCX_OK;
 8003df8:	e7d6      	b.n	8003da8 <ISM330DHCX_DeInit+0x10>
    return ISM330DHCX_ERROR;
 8003dfa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}

08003e00 <ISM330DHCX_ACC_GetAxes>:
{
 8003e00:	b530      	push	{r4, r5, lr}
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003e02:	f100 051c 	add.w	r5, r0, #28
{
 8003e06:	b085      	sub	sp, #20
 8003e08:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	a902      	add	r1, sp, #8
 8003e0e:	f000 fa1d 	bl	800424c <ism330dhcx_acceleration_raw_get>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d13e      	bne.n	8003e94 <ISM330DHCX_ACC_GetAxes+0x94>
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003e16:	f10d 0107 	add.w	r1, sp, #7
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f91a 	bl	8004054 <ism330dhcx_xl_full_scale_get>
 8003e20:	bbc0      	cbnz	r0, 8003e94 <ISM330DHCX_ACC_GetAxes+0x94>
  switch (full_scale)
 8003e22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d834      	bhi.n	8003e94 <ISM330DHCX_ACC_GetAxes+0x94>
 8003e2a:	e8df f003 	tbb	[pc, r3]
 8003e2e:	2a2d      	.short	0x2a2d
 8003e30:	0230      	.short	0x0230
 8003e32:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003e9c <ISM330DHCX_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e36:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003e3a:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e3e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003e42:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e46:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003e4a:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e5a:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e5e:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e62:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e66:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e6a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e72:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e76:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e7a:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003e7e:	b005      	add	sp, #20
 8003e80:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003e82:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8003ea0 <ISM330DHCX_ACC_GetAxes+0xa0>
 8003e86:	e7d6      	b.n	8003e36 <ISM330DHCX_ACC_GetAxes+0x36>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003e88:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003ea4 <ISM330DHCX_ACC_GetAxes+0xa4>
 8003e8c:	e7d3      	b.n	8003e36 <ISM330DHCX_ACC_GetAxes+0x36>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003e8e:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003ea8 <ISM330DHCX_ACC_GetAxes+0xa8>
 8003e92:	e7d0      	b.n	8003e36 <ISM330DHCX_ACC_GetAxes+0x36>
    return ISM330DHCX_ERROR;
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e98:	b005      	add	sp, #20
 8003e9a:	bd30      	pop	{r4, r5, pc}
 8003e9c:	3e79db23 	.word	0x3e79db23
 8003ea0:	3ef9db23 	.word	0x3ef9db23
 8003ea4:	3d79db23 	.word	0x3d79db23
 8003ea8:	3df9db23 	.word	0x3df9db23

08003eac <ISM330DHCX_GYRO_GetAxes>:
{
 8003eac:	b530      	push	{r4, r5, lr}
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003eae:	f100 051c 	add.w	r5, r0, #28
{
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	a902      	add	r1, sp, #8
 8003eba:	f000 f9a7 	bl	800420c <ism330dhcx_angular_rate_raw_get>
 8003ebe:	b990      	cbnz	r0, 8003ee6 <ISM330DHCX_GYRO_GetAxes+0x3a>
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003ec0:	f10d 0107 	add.w	r1, sp, #7
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f000 f92b 	bl	8004120 <ism330dhcx_gy_full_scale_get>
 8003eca:	b960      	cbnz	r0, 8003ee6 <ISM330DHCX_GYRO_GetAxes+0x3a>
  switch (full_scale)
 8003ecc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ed0:	2b0c      	cmp	r3, #12
 8003ed2:	d808      	bhi.n	8003ee6 <ISM330DHCX_GYRO_GetAxes+0x3a>
 8003ed4:	e8df f003 	tbb	[pc, r3]
 8003ed8:	0733070b 	.word	0x0733070b
 8003edc:	07070739 	.word	0x07070739
 8003ee0:	0707073c 	.word	0x0707073c
 8003ee4:	36          	.byte	0x36
 8003ee5:	00          	.byte	0x00
    return ISM330DHCX_ERROR;
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003eea:	b005      	add	sp, #20
 8003eec:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003eee:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003f58 <ISM330DHCX_GYRO_GetAxes+0xac>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003ef2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003ef6:	ee06 3a90 	vmov	s13, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003efa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003efe:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003f02:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003f06:	ee07 3a90 	vmov	s15, r3
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003f0a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003f0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003f16:	ee66 6a86 	vmul.f32	s13, s13, s12
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003f1a:	ee27 7a06 	vmul.f32	s14, s14, s12
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003f1e:	ee67 7a86 	vmul.f32	s15, s15, s12
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003f22:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003f26:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003f2e:	edc4 6a00 	vstr	s13, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003f32:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003f36:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003f3a:	b005      	add	sp, #20
 8003f3c:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003f3e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8003f5c <ISM330DHCX_GYRO_GetAxes+0xb0>
 8003f42:	e7d6      	b.n	8003ef2 <ISM330DHCX_GYRO_GetAxes+0x46>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8003f44:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003f60 <ISM330DHCX_GYRO_GetAxes+0xb4>
 8003f48:	e7d3      	b.n	8003ef2 <ISM330DHCX_GYRO_GetAxes+0x46>
  switch (full_scale)
 8003f4a:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 8003f64 <ISM330DHCX_GYRO_GetAxes+0xb8>
 8003f4e:	e7d0      	b.n	8003ef2 <ISM330DHCX_GYRO_GetAxes+0x46>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003f50:	ed9f 6a05 	vldr	s12, [pc, #20]	@ 8003f68 <ISM330DHCX_GYRO_GetAxes+0xbc>
 8003f54:	e7cd      	b.n	8003ef2 <ISM330DHCX_GYRO_GetAxes+0x46>
 8003f56:	bf00      	nop
 8003f58:	410c0000 	.word	0x410c0000
 8003f5c:	408c0000 	.word	0x408c0000
 8003f60:	428c0000 	.word	0x428c0000
 8003f64:	418c0000 	.word	0x418c0000
 8003f68:	420c0000 	.word	0x420c0000

08003f6c <ISM330DHCX_RegisterBusIO>:
{
 8003f6c:	b530      	push	{r4, r5, lr}
 8003f6e:	b083      	sub	sp, #12
  if (pObj == NULL)
 8003f70:	b370      	cbz	r0, 8003fd0 <ISM330DHCX_RegisterBusIO+0x64>
    pObj->IO.Init      = pIO->Init;
 8003f72:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8003f74:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8003f78:	688a      	ldr	r2, [r1, #8]
 8003f7a:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f7c:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8003f80:	7b0a      	ldrb	r2, [r1, #12]
 8003f82:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f84:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8003f88:	6989      	ldr	r1, [r1, #24]
 8003f8a:	61a1      	str	r1, [r4, #24]
 8003f8c:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003f8e:	4912      	ldr	r1, [pc, #72]	@ (8003fd8 <ISM330DHCX_RegisterBusIO+0x6c>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8003f90:	4a12      	ldr	r2, [pc, #72]	@ (8003fdc <ISM330DHCX_RegisterBusIO+0x70>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f92:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003f94:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8003f98:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 8003f9a:	b1cb      	cbz	r3, 8003fd0 <ISM330DHCX_RegisterBusIO+0x64>
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8003f9c:	4798      	blx	r3
 8003f9e:	4605      	mov	r5, r0
 8003fa0:	b9b0      	cbnz	r0, 8003fd0 <ISM330DHCX_RegisterBusIO+0x64>
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003fa2:	68a3      	ldr	r3, [r4, #8]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d002      	beq.n	8003fae <ISM330DHCX_RegisterBusIO+0x42>
}
 8003fa8:	4628      	mov	r0, r5
 8003faa:	b003      	add	sp, #12
 8003fac:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8003fae:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f8      	bne.n	8003fa8 <ISM330DHCX_RegisterBusIO+0x3c>
          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8003fb6:	210c      	movs	r1, #12
 8003fb8:	f88d 1007 	strb.w	r1, [sp, #7]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f10d 0207 	add.w	r2, sp, #7
 8003fc2:	f104 001c 	add.w	r0, r4, #28
 8003fc6:	2112      	movs	r1, #18
 8003fc8:	f000 f822 	bl	8004010 <ism330dhcx_write_reg>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d0eb      	beq.n	8003fa8 <ISM330DHCX_RegisterBusIO+0x3c>
    ret = ISM330DHCX_ERROR;
 8003fd0:	f04f 35ff 	mov.w	r5, #4294967295
  return ret;
 8003fd4:	e7e8      	b.n	8003fa8 <ISM330DHCX_RegisterBusIO+0x3c>
 8003fd6:	bf00      	nop
 8003fd8:	08003641 	.word	0x08003641
 8003fdc:	08003651 	.word	0x08003651

08003fe0 <ism330dhcx_mem_bank_set.constprop.0>:
  * @param  ctx    Read / write interface definitions.(ptr)
  * @param  val    Change the values of reg_access in reg FUNC_CFG_ACCESS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
 8003fe0:	b530      	push	{r4, r5, lr}
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	6880      	ldr	r0, [r0, #8]
 8003fea:	6865      	ldr	r5, [r4, #4]
 8003fec:	aa01      	add	r2, sp, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	47a8      	blx	r5
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8003ff2:	b958      	cbnz	r0, 800400c <ism330dhcx_mem_bank_set.constprop.0+0x2c>
    func_cfg_access.reg_access = (uint8_t)val;
 8003ff4:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ff8:	6825      	ldr	r5, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 8003ffa:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ffe:	2301      	movs	r3, #1
 8004000:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 8004002:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004006:	4619      	mov	r1, r3
 8004008:	aa01      	add	r2, sp, #4
 800400a:	47a8      	blx	r5
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
}
 800400c:	b003      	add	sp, #12
 800400e:	bd30      	pop	{r4, r5, pc}

08004010 <ism330dhcx_write_reg>:
{
 8004010:	b410      	push	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004012:	6804      	ldr	r4, [r0, #0]
 8004014:	6880      	ldr	r0, [r0, #8]
 8004016:	46a4      	mov	ip, r4
}
 8004018:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800401c:	4760      	bx	ip
 800401e:	bf00      	nop

08004020 <ism330dhcx_xl_full_scale_set>:
{
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4604      	mov	r4, r0
 8004024:	b082      	sub	sp, #8
 8004026:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004028:	6880      	ldr	r0, [r0, #8]
 800402a:	6866      	ldr	r6, [r4, #4]
 800402c:	2301      	movs	r3, #1
 800402e:	aa01      	add	r2, sp, #4
 8004030:	2110      	movs	r1, #16
 8004032:	47b0      	blx	r6
  if (ret == 0) {
 8004034:	b958      	cbnz	r0, 800404e <ism330dhcx_xl_full_scale_set+0x2e>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004036:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800403a:	6826      	ldr	r6, [r4, #0]
 800403c:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.fs_xl = (uint8_t)val;
 800403e:	f365 0383 	bfi	r3, r5, #2, #2
 8004042:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004046:	aa01      	add	r2, sp, #4
 8004048:	2301      	movs	r3, #1
 800404a:	2110      	movs	r1, #16
 800404c:	47b0      	blx	r6
}
 800404e:	b002      	add	sp, #8
 8004050:	bd70      	pop	{r4, r5, r6, pc}
 8004052:	bf00      	nop

08004054 <ism330dhcx_xl_full_scale_get>:
{
 8004054:	b530      	push	{r4, r5, lr}
 8004056:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004058:	2301      	movs	r3, #1
 800405a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800405e:	aa01      	add	r2, sp, #4
{
 8004060:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004062:	2110      	movs	r1, #16
 8004064:	47a8      	blx	r5
  switch (ctrl1_xl.fs_xl) {
 8004066:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800406a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800406e:	2b02      	cmp	r3, #2
 8004070:	d006      	beq.n	8004080 <ism330dhcx_xl_full_scale_get+0x2c>
 8004072:	2b03      	cmp	r3, #3
 8004074:	d004      	beq.n	8004080 <ism330dhcx_xl_full_scale_get+0x2c>
 8004076:	f1a3 0301 	sub.w	r3, r3, #1
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	095b      	lsrs	r3, r3, #5
      *val = ISM330DHCX_2g;
 8004080:	7023      	strb	r3, [r4, #0]
}
 8004082:	b003      	add	sp, #12
 8004084:	bd30      	pop	{r4, r5, pc}
 8004086:	bf00      	nop

08004088 <ism330dhcx_xl_data_rate_get>:
{
 8004088:	b530      	push	{r4, r5, lr}
 800408a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800408c:	2301      	movs	r3, #1
 800408e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004092:	aa01      	add	r2, sp, #4
{
 8004094:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004096:	2110      	movs	r1, #16
 8004098:	47a8      	blx	r5
  switch (ctrl1_xl.odr_xl) {
 800409a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	3b01      	subs	r3, #1
 80040a2:	2b0a      	cmp	r3, #10
 80040a4:	d81f      	bhi.n	80040e6 <ism330dhcx_xl_data_rate_get+0x5e>
 80040a6:	e8df f003 	tbb	[pc, r3]
 80040aa:	0a06      	.short	0x0a06
 80040ac:	12100e0c 	.word	0x12100e0c
 80040b0:	1a181614 	.word	0x1a181614
 80040b4:	1c          	.byte	0x1c
 80040b5:	00          	.byte	0x00
 80040b6:	2301      	movs	r3, #1
      *val = ISM330DHCX_XL_ODR_OFF;
 80040b8:	7023      	strb	r3, [r4, #0]
}
 80040ba:	b003      	add	sp, #12
 80040bc:	bd30      	pop	{r4, r5, pc}
      break;
 80040be:	2302      	movs	r3, #2
 80040c0:	e7fa      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e7f8      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040c6:	2304      	movs	r3, #4
 80040c8:	e7f6      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040ca:	2305      	movs	r3, #5
 80040cc:	e7f4      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040ce:	2306      	movs	r3, #6
 80040d0:	e7f2      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040d2:	2307      	movs	r3, #7
 80040d4:	e7f0      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040d6:	2308      	movs	r3, #8
 80040d8:	e7ee      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040da:	2309      	movs	r3, #9
 80040dc:	e7ec      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040de:	230a      	movs	r3, #10
 80040e0:	e7ea      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
      break;
 80040e2:	230b      	movs	r3, #11
 80040e4:	e7e8      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
  switch (ctrl1_xl.odr_xl) {
 80040e6:	2300      	movs	r3, #0
 80040e8:	e7e6      	b.n	80040b8 <ism330dhcx_xl_data_rate_get+0x30>
 80040ea:	bf00      	nop

080040ec <ism330dhcx_gy_full_scale_set>:
{
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4604      	mov	r4, r0
 80040f0:	b082      	sub	sp, #8
 80040f2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80040f4:	6880      	ldr	r0, [r0, #8]
 80040f6:	6866      	ldr	r6, [r4, #4]
 80040f8:	2301      	movs	r3, #1
 80040fa:	aa01      	add	r2, sp, #4
 80040fc:	2111      	movs	r1, #17
 80040fe:	47b0      	blx	r6
  if (ret == 0) {
 8004100:	b958      	cbnz	r0, 800411a <ism330dhcx_gy_full_scale_set+0x2e>
    ctrl2_g.fs_g = (uint8_t)val;
 8004102:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004106:	6826      	ldr	r6, [r4, #0]
 8004108:	68a0      	ldr	r0, [r4, #8]
    ctrl2_g.fs_g = (uint8_t)val;
 800410a:	f365 0303 	bfi	r3, r5, #0, #4
 800410e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004112:	aa01      	add	r2, sp, #4
 8004114:	2301      	movs	r3, #1
 8004116:	2111      	movs	r1, #17
 8004118:	47b0      	blx	r6
}
 800411a:	b002      	add	sp, #8
 800411c:	bd70      	pop	{r4, r5, r6, pc}
 800411e:	bf00      	nop

08004120 <ism330dhcx_gy_full_scale_get>:
{
 8004120:	b530      	push	{r4, r5, lr}
 8004122:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004124:	2301      	movs	r3, #1
 8004126:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800412a:	aa01      	add	r2, sp, #4
{
 800412c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800412e:	2111      	movs	r1, #17
 8004130:	47a8      	blx	r5
  switch (ctrl2_g.fs_g) {
 8004132:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d808      	bhi.n	8004150 <ism330dhcx_gy_full_scale_get+0x30>
 800413e:	e8df f003 	tbb	[pc, r3]
 8004142:	0f1b      	.short	0x0f1b
 8004144:	07130707 	.word	0x07130707
 8004148:	07170707 	.word	0x07170707
 800414c:	0707      	.short	0x0707
 800414e:	0b          	.byte	0x0b
 800414f:	00          	.byte	0x00
 8004150:	2302      	movs	r3, #2
      *val = ISM330DHCX_125dps;
 8004152:	7023      	strb	r3, [r4, #0]
}
 8004154:	b003      	add	sp, #12
 8004156:	bd30      	pop	{r4, r5, pc}
      break;
 8004158:	230c      	movs	r3, #12
      *val = ISM330DHCX_125dps;
 800415a:	7023      	strb	r3, [r4, #0]
}
 800415c:	b003      	add	sp, #12
 800415e:	bd30      	pop	{r4, r5, pc}
      break;
 8004160:	2301      	movs	r3, #1
      *val = ISM330DHCX_125dps;
 8004162:	7023      	strb	r3, [r4, #0]
}
 8004164:	b003      	add	sp, #12
 8004166:	bd30      	pop	{r4, r5, pc}
      break;
 8004168:	2304      	movs	r3, #4
      *val = ISM330DHCX_125dps;
 800416a:	7023      	strb	r3, [r4, #0]
}
 800416c:	b003      	add	sp, #12
 800416e:	bd30      	pop	{r4, r5, pc}
      break;
 8004170:	2308      	movs	r3, #8
      *val = ISM330DHCX_125dps;
 8004172:	7023      	strb	r3, [r4, #0]
}
 8004174:	b003      	add	sp, #12
 8004176:	bd30      	pop	{r4, r5, pc}
  switch (ctrl2_g.fs_g) {
 8004178:	2300      	movs	r3, #0
 800417a:	e7ea      	b.n	8004152 <ism330dhcx_gy_full_scale_get+0x32>

0800417c <ism330dhcx_gy_data_rate_get>:
{
 800417c:	b530      	push	{r4, r5, lr}
 800417e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004180:	2301      	movs	r3, #1
 8004182:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004186:	aa01      	add	r2, sp, #4
{
 8004188:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800418a:	2111      	movs	r1, #17
 800418c:	47a8      	blx	r5
  switch (ctrl2_g.odr_g) {
 800418e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	3b01      	subs	r3, #1
 8004196:	2b09      	cmp	r3, #9
 8004198:	d81c      	bhi.n	80041d4 <ism330dhcx_gy_data_rate_get+0x58>
 800419a:	e8df f003 	tbb	[pc, r3]
 800419e:	0905      	.short	0x0905
 80041a0:	110f0d0b 	.word	0x110f0d0b
 80041a4:	19171513 	.word	0x19171513
 80041a8:	2301      	movs	r3, #1
      *val = ISM330DHCX_GY_ODR_OFF;
 80041aa:	7023      	strb	r3, [r4, #0]
}
 80041ac:	b003      	add	sp, #12
 80041ae:	bd30      	pop	{r4, r5, pc}
      break;
 80041b0:	2302      	movs	r3, #2
 80041b2:	e7fa      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e7f8      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80041b8:	2304      	movs	r3, #4
 80041ba:	e7f6      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80041bc:	2305      	movs	r3, #5
 80041be:	e7f4      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80041c0:	2306      	movs	r3, #6
 80041c2:	e7f2      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80041c4:	2307      	movs	r3, #7
 80041c6:	e7f0      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80041c8:	2308      	movs	r3, #8
 80041ca:	e7ee      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80041cc:	2309      	movs	r3, #9
 80041ce:	e7ec      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
      break;
 80041d0:	230a      	movs	r3, #10
 80041d2:	e7ea      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>
  switch (ctrl2_g.odr_g) {
 80041d4:	2300      	movs	r3, #0
 80041d6:	e7e8      	b.n	80041aa <ism330dhcx_gy_data_rate_get+0x2e>

080041d8 <ism330dhcx_block_data_update_set>:
{
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	4604      	mov	r4, r0
 80041dc:	b082      	sub	sp, #8
 80041de:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041e0:	6880      	ldr	r0, [r0, #8]
 80041e2:	6866      	ldr	r6, [r4, #4]
 80041e4:	2301      	movs	r3, #1
 80041e6:	aa01      	add	r2, sp, #4
 80041e8:	2112      	movs	r1, #18
 80041ea:	47b0      	blx	r6
  if (ret == 0) {
 80041ec:	b958      	cbnz	r0, 8004206 <ism330dhcx_block_data_update_set+0x2e>
    ctrl3_c.bdu = (uint8_t)val;
 80041ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041f2:	6826      	ldr	r6, [r4, #0]
 80041f4:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.bdu = (uint8_t)val;
 80041f6:	f365 1386 	bfi	r3, r5, #6, #1
 80041fa:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041fe:	aa01      	add	r2, sp, #4
 8004200:	2301      	movs	r3, #1
 8004202:	2112      	movs	r1, #18
 8004204:	47b0      	blx	r6
}
 8004206:	b002      	add	sp, #8
 8004208:	bd70      	pop	{r4, r5, r6, pc}
 800420a:	bf00      	nop

0800420c <ism330dhcx_angular_rate_raw_get>:
{
 800420c:	b530      	push	{r4, r5, lr}
 800420e:	b083      	sub	sp, #12
 8004210:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004212:	466a      	mov	r2, sp
 8004214:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004218:	2306      	movs	r3, #6
 800421a:	2122      	movs	r1, #34	@ 0x22
 800421c:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800421e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004222:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004226:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800422a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800422e:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004230:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004234:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004238:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800423c:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800423e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004242:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004246:	80a3      	strh	r3, [r4, #4]
}
 8004248:	b003      	add	sp, #12
 800424a:	bd30      	pop	{r4, r5, pc}

0800424c <ism330dhcx_acceleration_raw_get>:
{
 800424c:	b530      	push	{r4, r5, lr}
 800424e:	b083      	sub	sp, #12
 8004250:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004252:	466a      	mov	r2, sp
 8004254:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004258:	2306      	movs	r3, #6
 800425a:	2128      	movs	r1, #40	@ 0x28
 800425c:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800425e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004262:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004266:	f89d 1003 	ldrb.w	r1, [sp, #3]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800426a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800426e:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004270:	f89d 3002 	ldrb.w	r3, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004274:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004278:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800427c:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800427e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004282:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004286:	80a3      	strh	r3, [r4, #4]
}
 8004288:	b003      	add	sp, #12
 800428a:	bd30      	pop	{r4, r5, pc}

0800428c <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800428c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800428e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8004292:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004294:	46a4      	mov	ip, r4
 8004296:	2301      	movs	r3, #1
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
  return ret;
}
 8004298:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800429c:	210f      	movs	r1, #15
 800429e:	4760      	bx	ip

080042a0 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	4604      	mov	r4, r0
 80042a4:	b082      	sub	sp, #8
 80042a6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042a8:	6880      	ldr	r0, [r0, #8]
 80042aa:	6866      	ldr	r6, [r4, #4]
 80042ac:	2301      	movs	r3, #1
 80042ae:	aa01      	add	r2, sp, #4
 80042b0:	2112      	movs	r1, #18
 80042b2:	47b0      	blx	r6
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80042b4:	b958      	cbnz	r0, 80042ce <ism330dhcx_reset_set+0x2e>
    ctrl3_c.sw_reset = (uint8_t)val;
 80042b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042ba:	6826      	ldr	r6, [r4, #0]
 80042bc:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.sw_reset = (uint8_t)val;
 80042be:	f365 0300 	bfi	r3, r5, #0, #1
 80042c2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042c6:	aa01      	add	r2, sp, #4
 80042c8:	2301      	movs	r3, #1
 80042ca:	2112      	movs	r1, #18
 80042cc:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80042ce:	b002      	add	sp, #8
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	bf00      	nop

080042d4 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	4604      	mov	r4, r0
 80042d8:	b082      	sub	sp, #8
 80042da:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042dc:	6880      	ldr	r0, [r0, #8]
 80042de:	6866      	ldr	r6, [r4, #4]
 80042e0:	2301      	movs	r3, #1
 80042e2:	aa01      	add	r2, sp, #4
 80042e4:	2112      	movs	r1, #18
 80042e6:	47b0      	blx	r6
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80042e8:	b958      	cbnz	r0, 8004302 <ism330dhcx_auto_increment_set+0x2e>
    ctrl3_c.if_inc = (uint8_t)val;
 80042ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042ee:	6826      	ldr	r6, [r4, #0]
 80042f0:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.if_inc = (uint8_t)val;
 80042f2:	f365 0382 	bfi	r3, r5, #2, #1
 80042f6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042fa:	aa01      	add	r2, sp, #4
 80042fc:	2301      	movs	r3, #1
 80042fe:	2112      	movs	r1, #18
 8004300:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8004302:	b002      	add	sp, #8
 8004304:	bd70      	pop	{r4, r5, r6, pc}
 8004306:	bf00      	nop

08004308 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	4604      	mov	r4, r0
 800430c:	b082      	sub	sp, #8
 800430e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004310:	6880      	ldr	r0, [r0, #8]
 8004312:	6866      	ldr	r6, [r4, #4]
 8004314:	2301      	movs	r3, #1
 8004316:	aa01      	add	r2, sp, #4
 8004318:	210a      	movs	r1, #10
 800431a:	47b0      	blx	r6
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 800431c:	b958      	cbnz	r0, 8004336 <ism330dhcx_fifo_mode_set+0x2e>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800431e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004322:	6826      	ldr	r6, [r4, #0]
 8004324:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8004326:	f365 0302 	bfi	r3, r5, #0, #3
 800432a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800432e:	aa01      	add	r2, sp, #4
 8004330:	2301      	movs	r3, #1
 8004332:	210a      	movs	r1, #10
 8004334:	47b0      	blx	r6
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 8004336:	b002      	add	sp, #8
 8004338:	bd70      	pop	{r4, r5, r6, pc}
 800433a:	bf00      	nop

0800433c <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	4605      	mov	r5, r0
 8004340:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004342:	2301      	movs	r3, #1
{
 8004344:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004346:	6880      	ldr	r0, [r0, #8]
 8004348:	686e      	ldr	r6, [r5, #4]
 800434a:	aa01      	add	r2, sp, #4
 800434c:	4619      	mov	r1, r3
 800434e:	47b0      	blx	r6
  if (ret == 0) {
 8004350:	b9a0      	cbnz	r0, 800437c <ism330dhcx_fsm_data_rate_get+0x40>
    func_cfg_access.reg_access = (uint8_t)val;
 8004352:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004356:	68a8      	ldr	r0, [r5, #8]
 8004358:	682e      	ldr	r6, [r5, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800435a:	2302      	movs	r3, #2
 800435c:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004360:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004362:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004366:	4619      	mov	r1, r3
 8004368:	aa01      	add	r2, sp, #4
 800436a:	47b0      	blx	r6
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 800436c:	b930      	cbnz	r0, 800437c <ism330dhcx_fsm_data_rate_get+0x40>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800436e:	68a8      	ldr	r0, [r5, #8]
 8004370:	686e      	ldr	r6, [r5, #4]
 8004372:	2301      	movs	r3, #1
 8004374:	466a      	mov	r2, sp
 8004376:	215f      	movs	r1, #95	@ 0x5f
 8004378:	47b0      	blx	r6
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800437a:	b178      	cbz	r0, 800439c <ism330dhcx_fsm_data_rate_get+0x60>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800437c:	f89d 3000 	ldrb.w	r3, [sp]
 8004380:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d006      	beq.n	8004396 <ism330dhcx_fsm_data_rate_get+0x5a>
 8004388:	2b03      	cmp	r3, #3
 800438a:	d004      	beq.n	8004396 <ism330dhcx_fsm_data_rate_get+0x5a>
 800438c:	f1a3 0301 	sub.w	r3, r3, #1
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	095b      	lsrs	r3, r3, #5
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8004396:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_ODR_FSM_12Hz5;
      break;
  }

  return ret;
}
 8004398:	b002      	add	sp, #8
 800439a:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800439c:	2301      	movs	r3, #1
 800439e:	68a8      	ldr	r0, [r5, #8]
 80043a0:	686e      	ldr	r6, [r5, #4]
 80043a2:	aa01      	add	r2, sp, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	47b0      	blx	r6
  if (ret == 0) {
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d1e7      	bne.n	800437c <ism330dhcx_fsm_data_rate_get+0x40>
    func_cfg_access.reg_access = (uint8_t)val;
 80043ac:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043b0:	682e      	ldr	r6, [r5, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80043b2:	f360 1187 	bfi	r1, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043b6:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80043b8:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043bc:	68a8      	ldr	r0, [r5, #8]
 80043be:	aa01      	add	r2, sp, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	47b0      	blx	r6
  return ret;
 80043c4:	e7da      	b.n	800437c <ism330dhcx_fsm_data_rate_get+0x40>
 80043c6:	bf00      	nop

080043c8 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	4604      	mov	r4, r0
 80043cc:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043ce:	2301      	movs	r3, #1
{
 80043d0:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043d2:	6880      	ldr	r0, [r0, #8]
 80043d4:	6866      	ldr	r6, [r4, #4]
 80043d6:	aa01      	add	r2, sp, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	47b0      	blx	r6
  if (ret == 0) {
 80043dc:	2800      	cmp	r0, #0
 80043de:	d135      	bne.n	800444c <ism330dhcx_mlc_data_rate_get+0x84>
    func_cfg_access.reg_access = (uint8_t)val;
 80043e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043e4:	68a0      	ldr	r0, [r4, #8]
 80043e6:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80043e8:	2302      	movs	r3, #2
 80043ea:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043ee:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80043f0:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043f4:	4619      	mov	r1, r3
 80043f6:	aa01      	add	r2, sp, #4
 80043f8:	47b0      	blx	r6
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 80043fa:	bb38      	cbnz	r0, 800444c <ism330dhcx_mlc_data_rate_get+0x84>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80043fc:	68a0      	ldr	r0, [r4, #8]
 80043fe:	6866      	ldr	r6, [r4, #4]
 8004400:	2301      	movs	r3, #1
 8004402:	466a      	mov	r2, sp
 8004404:	2160      	movs	r1, #96	@ 0x60
 8004406:	47b0      	blx	r6
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004408:	bb00      	cbnz	r0, 800444c <ism330dhcx_mlc_data_rate_get+0x84>
    switch (reg.mlc_odr) {
 800440a:	f89d 3000 	ldrb.w	r3, [sp]
 800440e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d006      	beq.n	8004424 <ism330dhcx_mlc_data_rate_get+0x5c>
 8004416:	2b03      	cmp	r3, #3
 8004418:	d004      	beq.n	8004424 <ism330dhcx_mlc_data_rate_get+0x5c>
 800441a:	f1a3 0301 	sub.w	r3, r3, #1
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	095b      	lsrs	r3, r3, #5
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004424:	702b      	strb	r3, [r5, #0]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004426:	2301      	movs	r3, #1
 8004428:	6865      	ldr	r5, [r4, #4]
 800442a:	68a0      	ldr	r0, [r4, #8]
 800442c:	aa01      	add	r2, sp, #4
 800442e:	4619      	mov	r1, r3
 8004430:	47a8      	blx	r5
  if (ret == 0) {
 8004432:	b958      	cbnz	r0, 800444c <ism330dhcx_mlc_data_rate_get+0x84>
    func_cfg_access.reg_access = (uint8_t)val;
 8004434:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004438:	6825      	ldr	r5, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800443a:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800443e:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004440:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004444:	68a0      	ldr	r0, [r4, #8]
 8004446:	aa01      	add	r2, sp, #4
 8004448:	4619      	mov	r1, r3
 800444a:	47a8      	blx	r5

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  return ret;
}
 800444c:	b002      	add	sp, #8
 800444e:	bd70      	pop	{r4, r5, r6, pc}

08004450 <ism330dhcx_xl_data_rate_set>:
{
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004452:	2301      	movs	r3, #1
{
 8004454:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004456:	6846      	ldr	r6, [r0, #4]
{
 8004458:	4604      	mov	r4, r0
 800445a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800445c:	6880      	ldr	r0, [r0, #8]
 800445e:	aa03      	add	r2, sp, #12
 8004460:	4619      	mov	r1, r3
 8004462:	47b0      	blx	r6
  if (ret == 0) {
 8004464:	2800      	cmp	r0, #0
 8004466:	f040 80a5 	bne.w	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 800446a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800446e:	6826      	ldr	r6, [r4, #0]
 8004470:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 8004472:	2302      	movs	r3, #2
 8004474:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004478:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 800447a:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800447e:	4619      	mov	r1, r3
 8004480:	aa03      	add	r2, sp, #12
 8004482:	47b0      	blx	r6
  if (ret == 0) {
 8004484:	2800      	cmp	r0, #0
 8004486:	f040 8095 	bne.w	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800448a:	6866      	ldr	r6, [r4, #4]
 800448c:	68a0      	ldr	r0, [r4, #8]
 800448e:	2301      	movs	r3, #1
 8004490:	aa03      	add	r2, sp, #12
 8004492:	2146      	movs	r1, #70	@ 0x46
 8004494:	47b0      	blx	r6
  if (ret == 0) {
 8004496:	2800      	cmp	r0, #0
 8004498:	f040 808c 	bne.w	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800449c:	6866      	ldr	r6, [r4, #4]
 800449e:	68a0      	ldr	r0, [r4, #8]
 80044a0:	2301      	movs	r3, #1
 80044a2:	f10d 020d 	add.w	r2, sp, #13
 80044a6:	2147      	movs	r1, #71	@ 0x47
 80044a8:	47b0      	blx	r6
  if (ret == 0) {
 80044aa:	2800      	cmp	r0, #0
 80044ac:	f040 8082 	bne.w	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044b0:	2301      	movs	r3, #1
 80044b2:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80044b6:	aa02      	add	r2, sp, #8
 80044b8:	4619      	mov	r1, r3
 80044ba:	47b0      	blx	r6
  if (ret == 0) {
 80044bc:	2800      	cmp	r0, #0
 80044be:	d179      	bne.n	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 80044c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044c4:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80044c6:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044ca:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80044cc:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044d0:	68a0      	ldr	r0, [r4, #8]
 80044d2:	aa02      	add	r2, sp, #8
 80044d4:	4619      	mov	r1, r3
 80044d6:	47b0      	blx	r6
  if (ret == 0) {
 80044d8:	2800      	cmp	r0, #0
 80044da:	d16b      	bne.n	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80044dc:	f89d 100c 	ldrb.w	r1, [sp, #12]
          fsm_enable.fsm_enable_a.fsm2_en  |
 80044e0:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80044e4:	f3c1 0300 	ubfx	r3, r1, #0, #1
 80044e8:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm3_en  |
 80044ea:	f3c1 0280 	ubfx	r2, r1, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 80044ee:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm4_en  |
 80044f0:	f3c1 02c0 	ubfx	r2, r1, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 80044f4:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm5_en  |
 80044f6:	f3c1 1200 	ubfx	r2, r1, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 80044fa:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm6_en  |
 80044fc:	f3c1 1240 	ubfx	r2, r1, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004500:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004502:	f3c1 1080 	ubfx	r0, r1, #6, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004506:	f89d 200d 	ldrb.w	r2, [sp, #13]
          fsm_enable.fsm_enable_a.fsm6_en  |
 800450a:	4303      	orrs	r3, r0
          fsm_enable.fsm_enable_a.fsm7_en  |
 800450c:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004510:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004514:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 8004516:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 800451a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 800451c:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 8004520:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 8004522:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 8004526:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 8004528:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 800452c:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 800452e:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 8004532:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8004534:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 8004538:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 800453a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800453e:	07da      	lsls	r2, r3, #31
 8004540:	d43a      	bmi.n	80045b8 <ism330dhcx_xl_data_rate_set+0x168>
  ism330dhcx_odr_xl_t odr_xl =  val;
 8004542:	462e      	mov	r6, r5
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004544:	2301      	movs	r3, #1
 8004546:	68a0      	ldr	r0, [r4, #8]
 8004548:	6867      	ldr	r7, [r4, #4]
 800454a:	aa02      	add	r2, sp, #8
 800454c:	4619      	mov	r1, r3
 800454e:	47b8      	blx	r7
  if (ret == 0) {
 8004550:	2800      	cmp	r0, #0
 8004552:	d12f      	bne.n	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 8004554:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004558:	68a0      	ldr	r0, [r4, #8]
 800455a:	6827      	ldr	r7, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 800455c:	2202      	movs	r2, #2
 800455e:	f362 1387 	bfi	r3, r2, #6, #2
 8004562:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004566:	2301      	movs	r3, #1
 8004568:	aa02      	add	r2, sp, #8
 800456a:	4619      	mov	r1, r3
 800456c:	47b8      	blx	r7
  if (ret == 0) {
 800456e:	bb08      	cbnz	r0, 80045b4 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004570:	68a0      	ldr	r0, [r4, #8]
 8004572:	6867      	ldr	r7, [r4, #4]
 8004574:	2301      	movs	r3, #1
 8004576:	aa02      	add	r2, sp, #8
 8004578:	2105      	movs	r1, #5
 800457a:	47b8      	blx	r7
  if (ret == 0) {
 800457c:	b9d0      	cbnz	r0, 80045b4 <ism330dhcx_xl_data_rate_set+0x164>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff fd2e 	bl	8003fe0 <ism330dhcx_mem_bank_set.constprop.0>
    *val  = reg.mlc_en;
 8004584:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if ( mlc_enable == PROPERTY_ENABLE ) {
 8004588:	06db      	lsls	r3, r3, #27
 800458a:	d424      	bmi.n	80045d6 <ism330dhcx_xl_data_rate_set+0x186>
  if (ret == 0) {
 800458c:	b990      	cbnz	r0, 80045b4 <ism330dhcx_xl_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800458e:	6865      	ldr	r5, [r4, #4]
 8004590:	68a0      	ldr	r0, [r4, #8]
 8004592:	2301      	movs	r3, #1
 8004594:	aa01      	add	r2, sp, #4
 8004596:	2110      	movs	r1, #16
 8004598:	47a8      	blx	r5
  if (ret == 0) {
 800459a:	b958      	cbnz	r0, 80045b4 <ism330dhcx_xl_data_rate_set+0x164>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800459c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045a0:	6825      	ldr	r5, [r4, #0]
 80045a2:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80045a4:	f366 1307 	bfi	r3, r6, #4, #4
 80045a8:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045ac:	aa01      	add	r2, sp, #4
 80045ae:	2301      	movs	r3, #1
 80045b0:	2110      	movs	r1, #16
 80045b2:	47a8      	blx	r5
}
 80045b4:	b005      	add	sp, #20
 80045b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80045b8:	f10d 0107 	add.w	r1, sp, #7
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff febd 	bl	800433c <ism330dhcx_fsm_data_rate_get>
      if (ret == 0) {
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d1f6      	bne.n	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
        switch (fsm_odr) {
 80045c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d8b9      	bhi.n	8004542 <ism330dhcx_xl_data_rate_set+0xf2>
 80045ce:	e8df f003 	tbb	[pc, r3]
 80045d2:	151a      	.short	0x151a
 80045d4:	101f      	.short	0x101f
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80045d6:	a902      	add	r1, sp, #8
 80045d8:	4620      	mov	r0, r4
 80045da:	f7ff fef5 	bl	80043c8 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0) {
 80045de:	2800      	cmp	r0, #0
 80045e0:	d1e8      	bne.n	80045b4 <ism330dhcx_xl_data_rate_set+0x164>
        switch (mlc_odr) {
 80045e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d82b      	bhi.n	8004642 <ism330dhcx_xl_data_rate_set+0x1f2>
 80045ea:	e8df f003 	tbb	[pc, r3]
 80045ee:	2025      	.short	0x2025
 80045f0:	161b      	.short	0x161b
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80045f2:	2d04      	cmp	r5, #4
 80045f4:	462e      	mov	r6, r5
 80045f6:	bf38      	it	cc
 80045f8:	2604      	movcc	r6, #4
 80045fa:	e7a3      	b.n	8004544 <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80045fc:	2d02      	cmp	r5, #2
 80045fe:	462e      	mov	r6, r5
 8004600:	bf38      	it	cc
 8004602:	2602      	movcc	r6, #2
 8004604:	e79e      	b.n	8004544 <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004606:	2d01      	cmp	r5, #1
 8004608:	462e      	mov	r6, r5
 800460a:	bf38      	it	cc
 800460c:	2601      	movcc	r6, #1
  if (ret == 0) {
 800460e:	e799      	b.n	8004544 <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004610:	2d03      	cmp	r5, #3
 8004612:	462e      	mov	r6, r5
 8004614:	bf38      	it	cc
 8004616:	2603      	movcc	r6, #3
 8004618:	e794      	b.n	8004544 <ism330dhcx_xl_data_rate_set+0xf4>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800461a:	2d04      	cmp	r5, #4
 800461c:	bf38      	it	cc
 800461e:	2504      	movcc	r5, #4
 8004620:	462e      	mov	r6, r5
 8004622:	e7b4      	b.n	800458e <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004624:	2d03      	cmp	r5, #3
 8004626:	bf38      	it	cc
 8004628:	2503      	movcc	r5, #3
 800462a:	462e      	mov	r6, r5
 800462c:	e7af      	b.n	800458e <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800462e:	2d02      	cmp	r5, #2
 8004630:	bf38      	it	cc
 8004632:	2502      	movcc	r5, #2
 8004634:	462e      	mov	r6, r5
 8004636:	e7aa      	b.n	800458e <ism330dhcx_xl_data_rate_set+0x13e>
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004638:	2d01      	cmp	r5, #1
 800463a:	bf38      	it	cc
 800463c:	2501      	movcc	r5, #1
 800463e:	462e      	mov	r6, r5
  if (ret == 0) {
 8004640:	e7a5      	b.n	800458e <ism330dhcx_xl_data_rate_set+0x13e>
        switch (mlc_odr) {
 8004642:	462e      	mov	r6, r5
 8004644:	e7a3      	b.n	800458e <ism330dhcx_xl_data_rate_set+0x13e>
 8004646:	bf00      	nop

08004648 <ism330dhcx_gy_data_rate_set>:
{
 8004648:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800464a:	2301      	movs	r3, #1
{
 800464c:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800464e:	6846      	ldr	r6, [r0, #4]
{
 8004650:	4604      	mov	r4, r0
 8004652:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004654:	6880      	ldr	r0, [r0, #8]
 8004656:	aa03      	add	r2, sp, #12
 8004658:	4619      	mov	r1, r3
 800465a:	47b0      	blx	r6
  if (ret == 0) {
 800465c:	2800      	cmp	r0, #0
 800465e:	f040 80a5 	bne.w	80047ac <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 8004662:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004666:	6826      	ldr	r6, [r4, #0]
 8004668:	68a0      	ldr	r0, [r4, #8]
    func_cfg_access.reg_access = (uint8_t)val;
 800466a:	2302      	movs	r3, #2
 800466c:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004670:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 8004672:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004676:	4619      	mov	r1, r3
 8004678:	aa03      	add	r2, sp, #12
 800467a:	47b0      	blx	r6
  if (ret == 0) {
 800467c:	2800      	cmp	r0, #0
 800467e:	f040 8095 	bne.w	80047ac <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004682:	6866      	ldr	r6, [r4, #4]
 8004684:	68a0      	ldr	r0, [r4, #8]
 8004686:	2301      	movs	r3, #1
 8004688:	aa03      	add	r2, sp, #12
 800468a:	2146      	movs	r1, #70	@ 0x46
 800468c:	47b0      	blx	r6
  if (ret == 0) {
 800468e:	2800      	cmp	r0, #0
 8004690:	f040 808c 	bne.w	80047ac <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004694:	6866      	ldr	r6, [r4, #4]
 8004696:	68a0      	ldr	r0, [r4, #8]
 8004698:	2301      	movs	r3, #1
 800469a:	f10d 020d 	add.w	r2, sp, #13
 800469e:	2147      	movs	r1, #71	@ 0x47
 80046a0:	47b0      	blx	r6
  if (ret == 0) {
 80046a2:	2800      	cmp	r0, #0
 80046a4:	f040 8082 	bne.w	80047ac <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046a8:	2301      	movs	r3, #1
 80046aa:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80046ae:	aa02      	add	r2, sp, #8
 80046b0:	4619      	mov	r1, r3
 80046b2:	47b0      	blx	r6
  if (ret == 0) {
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d179      	bne.n	80047ac <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 80046b8:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046bc:	6826      	ldr	r6, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 80046be:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046c2:	2301      	movs	r3, #1
    func_cfg_access.reg_access = (uint8_t)val;
 80046c4:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80046c8:	68a0      	ldr	r0, [r4, #8]
 80046ca:	aa02      	add	r2, sp, #8
 80046cc:	4619      	mov	r1, r3
 80046ce:	47b0      	blx	r6
  if (ret == 0) {
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d16b      	bne.n	80047ac <ism330dhcx_gy_data_rate_set+0x164>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80046d4:	f89d 100c 	ldrb.w	r1, [sp, #12]
          fsm_enable.fsm_enable_a.fsm2_en  |
 80046d8:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80046dc:	f3c1 0300 	ubfx	r3, r1, #0, #1
 80046e0:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm3_en  |
 80046e2:	f3c1 0280 	ubfx	r2, r1, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 80046e6:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm4_en  |
 80046e8:	f3c1 02c0 	ubfx	r2, r1, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 80046ec:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm5_en  |
 80046ee:	f3c1 1200 	ubfx	r2, r1, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 80046f2:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm6_en  |
 80046f4:	f3c1 1240 	ubfx	r2, r1, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 80046f8:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm7_en  |
 80046fa:	f3c1 1080 	ubfx	r0, r1, #6, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 80046fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004702:	4303      	orrs	r3, r0
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004704:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004708:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 800470c:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 800470e:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004712:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 8004714:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 8004718:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 800471a:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 800471e:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 8004720:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 8004724:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 8004726:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 800472a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 800472c:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 8004730:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8004732:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004736:	07da      	lsls	r2, r3, #31
 8004738:	d43a      	bmi.n	80047b0 <ism330dhcx_gy_data_rate_set+0x168>
  ism330dhcx_odr_g_t odr_gy =  val;
 800473a:	462e      	mov	r6, r5
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800473c:	2301      	movs	r3, #1
 800473e:	68a0      	ldr	r0, [r4, #8]
 8004740:	6867      	ldr	r7, [r4, #4]
 8004742:	aa02      	add	r2, sp, #8
 8004744:	4619      	mov	r1, r3
 8004746:	47b8      	blx	r7
  if (ret == 0) {
 8004748:	2800      	cmp	r0, #0
 800474a:	d12f      	bne.n	80047ac <ism330dhcx_gy_data_rate_set+0x164>
    func_cfg_access.reg_access = (uint8_t)val;
 800474c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004750:	68a0      	ldr	r0, [r4, #8]
 8004752:	6827      	ldr	r7, [r4, #0]
    func_cfg_access.reg_access = (uint8_t)val;
 8004754:	2202      	movs	r2, #2
 8004756:	f362 1387 	bfi	r3, r2, #6, #2
 800475a:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800475e:	2301      	movs	r3, #1
 8004760:	aa02      	add	r2, sp, #8
 8004762:	4619      	mov	r1, r3
 8004764:	47b8      	blx	r7
  if (ret == 0) {
 8004766:	bb08      	cbnz	r0, 80047ac <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004768:	68a0      	ldr	r0, [r4, #8]
 800476a:	6867      	ldr	r7, [r4, #4]
 800476c:	2301      	movs	r3, #1
 800476e:	aa02      	add	r2, sp, #8
 8004770:	2105      	movs	r1, #5
 8004772:	47b8      	blx	r7
  if (ret == 0) {
 8004774:	b9d0      	cbnz	r0, 80047ac <ism330dhcx_gy_data_rate_set+0x164>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff fc32 	bl	8003fe0 <ism330dhcx_mem_bank_set.constprop.0>
    *val  = reg.mlc_en;
 800477c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if ( mlc_enable == PROPERTY_ENABLE ) {
 8004780:	06db      	lsls	r3, r3, #27
 8004782:	d424      	bmi.n	80047ce <ism330dhcx_gy_data_rate_set+0x186>
  if (ret == 0) {
 8004784:	b990      	cbnz	r0, 80047ac <ism330dhcx_gy_data_rate_set+0x164>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004786:	6865      	ldr	r5, [r4, #4]
 8004788:	68a0      	ldr	r0, [r4, #8]
 800478a:	2301      	movs	r3, #1
 800478c:	aa01      	add	r2, sp, #4
 800478e:	2111      	movs	r1, #17
 8004790:	47a8      	blx	r5
  if (ret == 0) {
 8004792:	b958      	cbnz	r0, 80047ac <ism330dhcx_gy_data_rate_set+0x164>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004794:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004798:	6825      	ldr	r5, [r4, #0]
 800479a:	68a0      	ldr	r0, [r4, #8]
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800479c:	f366 1307 	bfi	r3, r6, #4, #4
 80047a0:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047a4:	aa01      	add	r2, sp, #4
 80047a6:	2301      	movs	r3, #1
 80047a8:	2111      	movs	r1, #17
 80047aa:	47a8      	blx	r5
}
 80047ac:	b005      	add	sp, #20
 80047ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80047b0:	f10d 0107 	add.w	r1, sp, #7
 80047b4:	4620      	mov	r0, r4
 80047b6:	f7ff fdc1 	bl	800433c <ism330dhcx_fsm_data_rate_get>
      if (ret == 0) {
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d1f6      	bne.n	80047ac <ism330dhcx_gy_data_rate_set+0x164>
        switch (fsm_odr) {
 80047be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d8b9      	bhi.n	800473a <ism330dhcx_gy_data_rate_set+0xf2>
 80047c6:	e8df f003 	tbb	[pc, r3]
 80047ca:	151a      	.short	0x151a
 80047cc:	101f      	.short	0x101f
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80047ce:	a902      	add	r1, sp, #8
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7ff fdf9 	bl	80043c8 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0) {
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d1e8      	bne.n	80047ac <ism330dhcx_gy_data_rate_set+0x164>
        switch (mlc_odr) {
 80047da:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d82b      	bhi.n	800483a <ism330dhcx_gy_data_rate_set+0x1f2>
 80047e2:	e8df f003 	tbb	[pc, r3]
 80047e6:	2025      	.short	0x2025
 80047e8:	161b      	.short	0x161b
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80047ea:	2d04      	cmp	r5, #4
 80047ec:	462e      	mov	r6, r5
 80047ee:	bf38      	it	cc
 80047f0:	2604      	movcc	r6, #4
 80047f2:	e7a3      	b.n	800473c <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80047f4:	2d02      	cmp	r5, #2
 80047f6:	462e      	mov	r6, r5
 80047f8:	bf38      	it	cc
 80047fa:	2602      	movcc	r6, #2
 80047fc:	e79e      	b.n	800473c <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80047fe:	2d01      	cmp	r5, #1
 8004800:	462e      	mov	r6, r5
 8004802:	bf38      	it	cc
 8004804:	2601      	movcc	r6, #1
  if (ret == 0) {
 8004806:	e799      	b.n	800473c <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004808:	2d03      	cmp	r5, #3
 800480a:	462e      	mov	r6, r5
 800480c:	bf38      	it	cc
 800480e:	2603      	movcc	r6, #3
 8004810:	e794      	b.n	800473c <ism330dhcx_gy_data_rate_set+0xf4>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004812:	2d04      	cmp	r5, #4
 8004814:	bf38      	it	cc
 8004816:	2504      	movcc	r5, #4
 8004818:	462e      	mov	r6, r5
 800481a:	e7b4      	b.n	8004786 <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800481c:	2d03      	cmp	r5, #3
 800481e:	bf38      	it	cc
 8004820:	2503      	movcc	r5, #3
 8004822:	462e      	mov	r6, r5
 8004824:	e7af      	b.n	8004786 <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004826:	2d02      	cmp	r5, #2
 8004828:	bf38      	it	cc
 800482a:	2502      	movcc	r5, #2
 800482c:	462e      	mov	r6, r5
 800482e:	e7aa      	b.n	8004786 <ism330dhcx_gy_data_rate_set+0x13e>
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004830:	2d01      	cmp	r5, #1
 8004832:	bf38      	it	cc
 8004834:	2501      	movcc	r5, #1
 8004836:	462e      	mov	r6, r5
  if (ret == 0) {
 8004838:	e7a5      	b.n	8004786 <ism330dhcx_gy_data_rate_set+0x13e>
        switch (mlc_odr) {
 800483a:	462e      	mov	r6, r5
 800483c:	e7a3      	b.n	8004786 <ism330dhcx_gy_data_rate_set+0x13e>
 800483e:	bf00      	nop

08004840 <LPS22HH_GetCapabilities>:
  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
  Capabilities->TempMaxOdr  = 200.0f;
 8004840:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <LPS22HH_GetCapabilities+0x14>)
 8004842:	608b      	str	r3, [r1, #8]
  Capabilities->HumMaxOdr   = 0.0f;
 8004844:	2200      	movs	r2, #0
  Capabilities->Temperature = 1;
 8004846:	f240 1001 	movw	r0, #257	@ 0x101
 800484a:	6008      	str	r0, [r1, #0]
  Capabilities->HumMaxOdr   = 0.0f;
 800484c:	604a      	str	r2, [r1, #4]
  Capabilities->PressMaxOdr = 200.0f;
 800484e:	60cb      	str	r3, [r1, #12]
  return LPS22HH_OK;
}
 8004850:	2000      	movs	r0, #0
 8004852:	4770      	bx	lr
 8004854:	43480000 	.word	0x43480000

08004858 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004858:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800485a:	6944      	ldr	r4, [r0, #20]
 800485c:	7b00      	ldrb	r0, [r0, #12]
 800485e:	46a4      	mov	ip, r4
}
 8004860:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004864:	4760      	bx	ip
 8004866:	bf00      	nop

08004868 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004868:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800486a:	6904      	ldr	r4, [r0, #16]
 800486c:	7b00      	ldrb	r0, [r0, #12]
 800486e:	46a4      	mov	ip, r4
}
 8004870:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004874:	4760      	bx	ip
 8004876:	bf00      	nop

08004878 <LPS22HH_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 8004878:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 800487c:	2b01      	cmp	r3, #1
 800487e:	d00c      	beq.n	800489a <LPS22HH_PRESS_Enable+0x22>
{
 8004880:	b510      	push	{r4, lr}
 8004882:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004884:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 8004888:	301c      	adds	r0, #28
 800488a:	f000 fae7 	bl	8004e5c <lps22hh_data_rate_set>
 800488e:	b930      	cbnz	r0, 800489e <LPS22HH_PRESS_Enable+0x26>
  pObj->press_is_enabled = 1;
 8004890:	2301      	movs	r3, #1
 8004892:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return LPS22HH_OK;
 8004896:	2000      	movs	r0, #0
}
 8004898:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 800489a:	2000      	movs	r0, #0
}
 800489c:	4770      	bx	lr
    return LPS22HH_ERROR;
 800489e:	f04f 30ff 	mov.w	r0, #4294967295
}
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <LPS22HH_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 80048a4:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d00c      	beq.n	80048c6 <LPS22HH_TEMP_Enable+0x22>
{
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80048b0:	f890 102b 	ldrb.w	r1, [r0, #43]	@ 0x2b
 80048b4:	301c      	adds	r0, #28
 80048b6:	f000 fad1 	bl	8004e5c <lps22hh_data_rate_set>
 80048ba:	b930      	cbnz	r0, 80048ca <LPS22HH_TEMP_Enable+0x26>
  pObj->temp_is_enabled = 1;
 80048bc:	2301      	movs	r3, #1
 80048be:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return LPS22HH_OK;
 80048c2:	2000      	movs	r0, #0
}
 80048c4:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 80048c6:	2000      	movs	r0, #0
}
 80048c8:	4770      	bx	lr
    return LPS22HH_ERROR;
 80048ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <LPS22HH_Init>:
{
 80048d0:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 80048d2:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
{
 80048d6:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80048d8:	b123      	cbz	r3, 80048e4 <LPS22HH_Init+0x14>
  pObj->is_initialized = 1U;
 80048da:	2301      	movs	r3, #1
 80048dc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return LPS22HH_OK;
 80048e0:	2000      	movs	r0, #0
}
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80048e4:	f100 051c 	add.w	r5, r0, #28
 80048e8:	2111      	movs	r1, #17
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 fbac 	bl	8005048 <lps22hh_i3c_interface_set>
 80048f0:	b9b8      	cbnz	r0, 8004922 <LPS22HH_Init+0x52>
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80048f2:	2110      	movs	r1, #16
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 fab1 	bl	8004e5c <lps22hh_data_rate_set>
 80048fa:	4601      	mov	r1, r0
 80048fc:	b988      	cbnz	r0, 8004922 <LPS22HH_Init+0x52>
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80048fe:	4628      	mov	r0, r5
 8004900:	f000 fb88 	bl	8005014 <lps22hh_lp_bandwidth_set>
 8004904:	b968      	cbnz	r0, 8004922 <LPS22HH_Init+0x52>
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004906:	2101      	movs	r1, #1
 8004908:	4628      	mov	r0, r5
 800490a:	f000 fa8d 	bl	8004e28 <lps22hh_block_data_update_set>
 800490e:	b940      	cbnz	r0, 8004922 <LPS22HH_Init+0x52>
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004910:	2101      	movs	r1, #1
 8004912:	4628      	mov	r0, r5
 8004914:	f000 fb64 	bl	8004fe0 <lps22hh_auto_increment_set>
 8004918:	b918      	cbnz	r0, 8004922 <LPS22HH_Init+0x52>
  pObj->last_odr = LPS22HH_25_Hz;
 800491a:	2303      	movs	r3, #3
 800491c:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  return LPS22HH_OK;
 8004920:	e7db      	b.n	80048da <LPS22HH_Init+0xa>
      return LPS22HH_ERROR;
 8004922:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004926:	bd38      	pop	{r3, r4, r5, pc}

08004928 <LPS22HH_ReadID>:
{
 8004928:	b508      	push	{r3, lr}
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800492a:	301c      	adds	r0, #28
 800492c:	f000 fb4e 	bl	8004fcc <lps22hh_device_id_get>
 8004930:	3800      	subs	r0, #0
 8004932:	bf18      	it	ne
 8004934:	2001      	movne	r0, #1
}
 8004936:	4240      	negs	r0, r0
 8004938:	bd08      	pop	{r3, pc}
 800493a:	bf00      	nop

0800493c <LPS22HH_PRESS_Disable>:
{
 800493c:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 800493e:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8004942:	b133      	cbz	r3, 8004952 <LPS22HH_PRESS_Disable+0x16>
  if (pObj->temp_is_enabled == 0U)
 8004944:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8004948:	4604      	mov	r4, r0
 800494a:	b123      	cbz	r3, 8004956 <LPS22HH_PRESS_Disable+0x1a>
  pObj->press_is_enabled = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return LPS22HH_OK;
 8004952:	2000      	movs	r0, #0
}
 8004954:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004956:	f100 051c 	add.w	r5, r0, #28
 800495a:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 800495e:	4628      	mov	r0, r5
 8004960:	f000 faac 	bl	8004ebc <lps22hh_data_rate_get>
 8004964:	4601      	mov	r1, r0
 8004966:	b920      	cbnz	r0, 8004972 <LPS22HH_PRESS_Disable+0x36>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004968:	4628      	mov	r0, r5
 800496a:	f000 fa77 	bl	8004e5c <lps22hh_data_rate_set>
 800496e:	2800      	cmp	r0, #0
 8004970:	d0ec      	beq.n	800494c <LPS22HH_PRESS_Disable+0x10>
      return LPS22HH_ERROR;
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004976:	bd38      	pop	{r3, r4, r5, pc}

08004978 <LPS22HH_TEMP_SetOutputDataRate>:
{
 8004978:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 1U)
 800497a:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800497e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->temp_is_enabled == 1U)
 8004982:	2901      	cmp	r1, #1
{
 8004984:	4604      	mov	r4, r0
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004986:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->temp_is_enabled == 1U)
 800498a:	d027      	beq.n	80049dc <LPS22HH_TEMP_SetOutputDataRate+0x64>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	d91d      	bls.n	80049ce <LPS22HH_TEMP_SetOutputDataRate+0x56>
 8004992:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004996:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499e:	d91b      	bls.n	80049d8 <LPS22HH_TEMP_SetOutputDataRate+0x60>
 80049a0:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 80049a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80049a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ac:	d94e      	bls.n	8004a4c <LPS22HH_TEMP_SetOutputDataRate+0xd4>
 80049ae:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8004a80 <LPS22HH_TEMP_SetOutputDataRate+0x108>
 80049b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	d94b      	bls.n	8004a54 <LPS22HH_TEMP_SetOutputDataRate+0xdc>
 80049bc:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8004a84 <LPS22HH_TEMP_SetOutputDataRate+0x10c>
 80049c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80049c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c8:	d848      	bhi.n	8004a5c <LPS22HH_TEMP_SetOutputDataRate+0xe4>
 80049ca:	2305      	movs	r3, #5
 80049cc:	e000      	b.n	80049d0 <LPS22HH_TEMP_SetOutputDataRate+0x58>
 80049ce:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80049d0:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80049d4:	2000      	movs	r0, #0
}
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049d8:	2302      	movs	r3, #2
 80049da:	e7f9      	b.n	80049d0 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e0:	d924      	bls.n	8004a2c <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 80049e2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80049e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	d92f      	bls.n	8004a50 <LPS22HH_TEMP_SetOutputDataRate+0xd8>
 80049f0:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 80049f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	d92c      	bls.n	8004a58 <LPS22HH_TEMP_SetOutputDataRate+0xe0>
 80049fe:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8004a80 <LPS22HH_TEMP_SetOutputDataRate+0x108>
 8004a02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	d934      	bls.n	8004a76 <LPS22HH_TEMP_SetOutputDataRate+0xfe>
 8004a0c:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8004a84 <LPS22HH_TEMP_SetOutputDataRate+0x10c>
 8004a10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a18:	d92f      	bls.n	8004a7a <LPS22HH_TEMP_SetOutputDataRate+0x102>
 8004a1a:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8004a88 <LPS22HH_TEMP_SetOutputDataRate+0x110>
 8004a1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	bf94      	ite	ls
 8004a28:	2106      	movls	r1, #6
 8004a2a:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004a2c:	f104 051c 	add.w	r5, r4, #28
 8004a30:	4628      	mov	r0, r5
 8004a32:	f000 fa13 	bl	8004e5c <lps22hh_data_rate_set>
 8004a36:	b9d8      	cbnz	r0, 8004a70 <LPS22HH_TEMP_SetOutputDataRate+0xf8>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004a38:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f000 fa3d 	bl	8004ebc <lps22hh_data_rate_get>
 8004a42:	3800      	subs	r0, #0
 8004a44:	bf18      	it	ne
 8004a46:	2001      	movne	r0, #1
 8004a48:	4240      	negs	r0, r0
}
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e7bf      	b.n	80049d0 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004a50:	2102      	movs	r1, #2
 8004a52:	e7eb      	b.n	8004a2c <LPS22HH_TEMP_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004a54:	2304      	movs	r3, #4
 8004a56:	e7bb      	b.n	80049d0 <LPS22HH_TEMP_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004a58:	2103      	movs	r1, #3
 8004a5a:	e7e7      	b.n	8004a2c <LPS22HH_TEMP_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004a5c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8004a88 <LPS22HH_TEMP_SetOutputDataRate+0x110>
 8004a60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a68:	bf94      	ite	ls
 8004a6a:	2306      	movls	r3, #6
 8004a6c:	2307      	movhi	r3, #7
 8004a6e:	e7af      	b.n	80049d0 <LPS22HH_TEMP_SetOutputDataRate+0x58>
    return LPS22HH_ERROR;
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004a74:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004a76:	2104      	movs	r1, #4
 8004a78:	e7d8      	b.n	8004a2c <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 8004a7a:	2105      	movs	r1, #5
 8004a7c:	e7d6      	b.n	8004a2c <LPS22HH_TEMP_SetOutputDataRate+0xb4>
 8004a7e:	bf00      	nop
 8004a80:	42480000 	.word	0x42480000
 8004a84:	42960000 	.word	0x42960000
 8004a88:	42c80000 	.word	0x42c80000

08004a8c <LPS22HH_TEMP_Disable>:
{
 8004a8c:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 8004a8e:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8004a92:	b133      	cbz	r3, 8004aa2 <LPS22HH_TEMP_Disable+0x16>
  if (pObj->press_is_enabled == 0U)
 8004a94:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8004a98:	4604      	mov	r4, r0
 8004a9a:	b123      	cbz	r3, 8004aa6 <LPS22HH_TEMP_Disable+0x1a>
  pObj->temp_is_enabled = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    return LPS22HH_OK;
 8004aa2:	2000      	movs	r0, #0
}
 8004aa4:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004aa6:	f100 051c 	add.w	r5, r0, #28
 8004aaa:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 fa04 	bl	8004ebc <lps22hh_data_rate_get>
 8004ab4:	4601      	mov	r1, r0
 8004ab6:	b920      	cbnz	r0, 8004ac2 <LPS22HH_TEMP_Disable+0x36>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 f9cf 	bl	8004e5c <lps22hh_data_rate_set>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d0ec      	beq.n	8004a9c <LPS22HH_TEMP_Disable+0x10>
      return LPS22HH_ERROR;
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}

08004ac8 <LPS22HH_PRESS_GetPressure>:
{
 8004ac8:	b530      	push	{r4, r5, lr}
 8004aca:	b083      	sub	sp, #12
 8004acc:	460d      	mov	r5, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004ace:	2200      	movs	r2, #0
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004ad0:	a901      	add	r1, sp, #4
 8004ad2:	301c      	adds	r0, #28
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004ad4:	9201      	str	r2, [sp, #4]
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004ad6:	f000 fa4f 	bl	8004f78 <lps22hh_pressure_raw_get>
 8004ada:	b940      	cbnz	r0, 8004aee <LPS22HH_PRESS_GetPressure+0x26>
  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004adc:	4604      	mov	r4, r0
 8004ade:	9801      	ldr	r0, [sp, #4]
 8004ae0:	f000 f990 	bl	8004e04 <lps22hh_from_lsb_to_hpa>
 8004ae4:	ed85 0a00 	vstr	s0, [r5]
}
 8004ae8:	4620      	mov	r0, r4
 8004aea:	b003      	add	sp, #12
 8004aec:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8004aee:	f04f 34ff 	mov.w	r4, #4294967295
 8004af2:	e7f9      	b.n	8004ae8 <LPS22HH_PRESS_GetPressure+0x20>

08004af4 <LPS22HH_TEMP_GetTemperature>:
{
 8004af4:	b530      	push	{r4, r5, lr}
 8004af6:	b083      	sub	sp, #12
 8004af8:	460d      	mov	r5, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004afa:	2200      	movs	r2, #0
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004afc:	a901      	add	r1, sp, #4
 8004afe:	301c      	adds	r0, #28
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004b00:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004b04:	f000 fa50 	bl	8004fa8 <lps22hh_temperature_raw_get>
 8004b08:	b948      	cbnz	r0, 8004b1e <LPS22HH_TEMP_GetTemperature+0x2a>
  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004b10:	f000 f97e 	bl	8004e10 <lps22hh_from_lsb_to_celsius>
 8004b14:	ed85 0a00 	vstr	s0, [r5]
}
 8004b18:	4620      	mov	r0, r4
 8004b1a:	b003      	add	sp, #12
 8004b1c:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 8004b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004b22:	e7f9      	b.n	8004b18 <LPS22HH_TEMP_GetTemperature+0x24>

08004b24 <LPS22HH_TEMP_GetOutputDataRate>:
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
 8004b24:	b510      	push	{r4, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	460c      	mov	r4, r1
 8004b2a:	301c      	adds	r0, #28
 8004b2c:	f10d 0107 	add.w	r1, sp, #7
 8004b30:	f000 f9c4 	bl	8004ebc <lps22hh_data_rate_get>
 8004b34:	b9e0      	cbnz	r0, 8004b70 <LPS22HH_TEMP_GetOutputDataRate+0x4c>
 8004b36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b3a:	2b07      	cmp	r3, #7
 8004b3c:	d818      	bhi.n	8004b70 <LPS22HH_TEMP_GetOutputDataRate+0x4c>
 8004b3e:	e8df f003 	tbb	[pc, r3]
 8004b42:	0409      	.short	0x0409
 8004b44:	0d151311 	.word	0x0d151311
 8004b48:	0b0f      	.short	0x0b0f
 8004b4a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	b002      	add	sp, #8
 8004b52:	bd10      	pop	{r4, pc}
 8004b54:	2300      	movs	r3, #0
 8004b56:	e7fa      	b.n	8004b4e <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004b58:	4b07      	ldr	r3, [pc, #28]	@ (8004b78 <LPS22HH_TEMP_GetOutputDataRate+0x54>)
 8004b5a:	e7f8      	b.n	8004b4e <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004b5c:	4b07      	ldr	r3, [pc, #28]	@ (8004b7c <LPS22HH_TEMP_GetOutputDataRate+0x58>)
 8004b5e:	e7f6      	b.n	8004b4e <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004b60:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <LPS22HH_TEMP_GetOutputDataRate+0x5c>)
 8004b62:	e7f4      	b.n	8004b4e <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004b64:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <LPS22HH_TEMP_GetOutputDataRate+0x60>)
 8004b66:	e7f2      	b.n	8004b4e <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004b68:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <LPS22HH_TEMP_GetOutputDataRate+0x64>)
 8004b6a:	e7f0      	b.n	8004b4e <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004b6c:	4b07      	ldr	r3, [pc, #28]	@ (8004b8c <LPS22HH_TEMP_GetOutputDataRate+0x68>)
 8004b6e:	e7ee      	b.n	8004b4e <LPS22HH_TEMP_GetOutputDataRate+0x2a>
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	e7ec      	b.n	8004b50 <LPS22HH_TEMP_GetOutputDataRate+0x2c>
 8004b76:	bf00      	nop
 8004b78:	43480000 	.word	0x43480000
 8004b7c:	42960000 	.word	0x42960000
 8004b80:	42c80000 	.word	0x42c80000
 8004b84:	41200000 	.word	0x41200000
 8004b88:	41c80000 	.word	0x41c80000
 8004b8c:	42480000 	.word	0x42480000

08004b90 <LPS22HH_PRESS_GetOutputDataRate>:
{
 8004b90:	b510      	push	{r4, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	460c      	mov	r4, r1
  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8004b96:	301c      	adds	r0, #28
 8004b98:	f10d 0107 	add.w	r1, sp, #7
 8004b9c:	f000 f98e 	bl	8004ebc <lps22hh_data_rate_get>
 8004ba0:	b9e0      	cbnz	r0, 8004bdc <LPS22HH_PRESS_GetOutputDataRate+0x4c>
  switch (odr_low_level)
 8004ba2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ba6:	2b07      	cmp	r3, #7
 8004ba8:	d818      	bhi.n	8004bdc <LPS22HH_PRESS_GetOutputDataRate+0x4c>
 8004baa:	e8df f003 	tbb	[pc, r3]
 8004bae:	0409      	.short	0x0409
 8004bb0:	0d151311 	.word	0x0d151311
 8004bb4:	0b0f      	.short	0x0b0f
 8004bb6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
      *Odr = 1.0f;
 8004bba:	6023      	str	r3, [r4, #0]
}
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e7fa      	b.n	8004bba <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004bc4:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <LPS22HH_PRESS_GetOutputDataRate+0x54>)
 8004bc6:	e7f8      	b.n	8004bba <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004bc8:	4b07      	ldr	r3, [pc, #28]	@ (8004be8 <LPS22HH_PRESS_GetOutputDataRate+0x58>)
 8004bca:	e7f6      	b.n	8004bba <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004bcc:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <LPS22HH_PRESS_GetOutputDataRate+0x5c>)
 8004bce:	e7f4      	b.n	8004bba <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <LPS22HH_PRESS_GetOutputDataRate+0x60>)
 8004bd2:	e7f2      	b.n	8004bba <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004bd4:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <LPS22HH_PRESS_GetOutputDataRate+0x64>)
 8004bd6:	e7f0      	b.n	8004bba <LPS22HH_PRESS_GetOutputDataRate+0x2a>
      break;
 8004bd8:	4b07      	ldr	r3, [pc, #28]	@ (8004bf8 <LPS22HH_PRESS_GetOutputDataRate+0x68>)
 8004bda:	e7ee      	b.n	8004bba <LPS22HH_PRESS_GetOutputDataRate+0x2a>
    return LPS22HH_ERROR;
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004be0:	e7ec      	b.n	8004bbc <LPS22HH_PRESS_GetOutputDataRate+0x2c>
 8004be2:	bf00      	nop
 8004be4:	43480000 	.word	0x43480000
 8004be8:	42960000 	.word	0x42960000
 8004bec:	42c80000 	.word	0x42c80000
 8004bf0:	41200000 	.word	0x41200000
 8004bf4:	41c80000 	.word	0x41c80000
 8004bf8:	42480000 	.word	0x42480000

08004bfc <LPS22HH_PRESS_SetOutputDataRate>:
{
 8004bfc:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 1U)
 8004bfe:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c02:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  if (pObj->press_is_enabled == 1U)
 8004c06:	2901      	cmp	r1, #1
{
 8004c08:	4604      	mov	r4, r0
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->press_is_enabled == 1U)
 8004c0e:	d027      	beq.n	8004c60 <LPS22HH_PRESS_SetOutputDataRate+0x64>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	d91d      	bls.n	8004c52 <LPS22HH_PRESS_SetOutputDataRate+0x56>
 8004c16:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004c1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c22:	d91b      	bls.n	8004c5c <LPS22HH_PRESS_SetOutputDataRate+0x60>
 8004c24:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8004c28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c30:	d94e      	bls.n	8004cd0 <LPS22HH_PRESS_SetOutputDataRate+0xd4>
 8004c32:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8004d04 <LPS22HH_PRESS_SetOutputDataRate+0x108>
 8004c36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	d94b      	bls.n	8004cd8 <LPS22HH_PRESS_SetOutputDataRate+0xdc>
 8004c40:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8004d08 <LPS22HH_PRESS_SetOutputDataRate+0x10c>
 8004c44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4c:	d848      	bhi.n	8004ce0 <LPS22HH_PRESS_SetOutputDataRate+0xe4>
 8004c4e:	2305      	movs	r3, #5
 8004c50:	e000      	b.n	8004c54 <LPS22HH_PRESS_SetOutputDataRate+0x58>
 8004c52:	2301      	movs	r3, #1
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004c54:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004c58:	2000      	movs	r0, #0
}
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e7f9      	b.n	8004c54 <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	d924      	bls.n	8004cb0 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004c66:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004c6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c72:	d92f      	bls.n	8004cd4 <LPS22HH_PRESS_SetOutputDataRate+0xd8>
 8004c74:	eef3 7a09 	vmov.f32	s15, #57	@ 0x41c80000  25.0
 8004c78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	d92c      	bls.n	8004cdc <LPS22HH_PRESS_SetOutputDataRate+0xe0>
 8004c82:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8004d04 <LPS22HH_PRESS_SetOutputDataRate+0x108>
 8004c86:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8e:	d934      	bls.n	8004cfa <LPS22HH_PRESS_SetOutputDataRate+0xfe>
 8004c90:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8004d08 <LPS22HH_PRESS_SetOutputDataRate+0x10c>
 8004c94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9c:	d92f      	bls.n	8004cfe <LPS22HH_PRESS_SetOutputDataRate+0x102>
 8004c9e:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8004d0c <LPS22HH_PRESS_SetOutputDataRate+0x110>
 8004ca2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	bf94      	ite	ls
 8004cac:	2106      	movls	r1, #6
 8004cae:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004cb0:	f104 051c 	add.w	r5, r4, #28
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 f8d1 	bl	8004e5c <lps22hh_data_rate_set>
 8004cba:	b9d8      	cbnz	r0, 8004cf4 <LPS22HH_PRESS_SetOutputDataRate+0xf8>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004cbc:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f000 f8fb 	bl	8004ebc <lps22hh_data_rate_get>
 8004cc6:	3800      	subs	r0, #0
 8004cc8:	bf18      	it	ne
 8004cca:	2001      	movne	r0, #1
 8004ccc:	4240      	negs	r0, r0
}
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e7bf      	b.n	8004c54 <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	e7eb      	b.n	8004cb0 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004cd8:	2304      	movs	r3, #4
 8004cda:	e7bb      	b.n	8004c54 <LPS22HH_PRESS_SetOutputDataRate+0x58>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004cdc:	2103      	movs	r1, #3
 8004cde:	e7e7      	b.n	8004cb0 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004ce0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8004d0c <LPS22HH_PRESS_SetOutputDataRate+0x110>
 8004ce4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cec:	bf94      	ite	ls
 8004cee:	2306      	movls	r3, #6
 8004cf0:	2307      	movhi	r3, #7
 8004cf2:	e7af      	b.n	8004c54 <LPS22HH_PRESS_SetOutputDataRate+0x58>
    return LPS22HH_ERROR;
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004cf8:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004cfa:	2104      	movs	r1, #4
 8004cfc:	e7d8      	b.n	8004cb0 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004cfe:	2105      	movs	r1, #5
 8004d00:	e7d6      	b.n	8004cb0 <LPS22HH_PRESS_SetOutputDataRate+0xb4>
 8004d02:	bf00      	nop
 8004d04:	42480000 	.word	0x42480000
 8004d08:	42960000 	.word	0x42960000
 8004d0c:	42c80000 	.word	0x42c80000

08004d10 <LPS22HH_DeInit>:
{
 8004d10:	b570      	push	{r4, r5, r6, lr}
  if (pObj->is_initialized == 1U)
 8004d12:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8004d16:	2b01      	cmp	r3, #1
{
 8004d18:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8004d1a:	d003      	beq.n	8004d24 <LPS22HH_DeInit+0x14>
  pObj->is_initialized = 0;
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
  if (pObj->press_is_enabled == 0U)
 8004d24:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8004d28:	f890 502a 	ldrb.w	r5, [r0, #42]	@ 0x2a
  if (pObj->press_is_enabled == 0U)
 8004d2c:	b323      	cbz	r3, 8004d78 <LPS22HH_DeInit+0x68>
  if (pObj->temp_is_enabled == 0U)
 8004d2e:	b195      	cbz	r5, 8004d56 <LPS22HH_DeInit+0x46>
  pObj->press_is_enabled = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004d36:	f104 051c 	add.w	r5, r4, #28
 8004d3a:	f104 012b 	add.w	r1, r4, #43	@ 0x2b
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 f8bc 	bl	8004ebc <lps22hh_data_rate_get>
 8004d44:	4601      	mov	r1, r0
 8004d46:	b9d0      	cbnz	r0, 8004d7e <LPS22HH_DeInit+0x6e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f887 	bl	8004e5c <lps22hh_data_rate_set>
 8004d4e:	b9b0      	cbnz	r0, 8004d7e <LPS22HH_DeInit+0x6e>
  pObj->temp_is_enabled = 0;
 8004d50:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
  return LPS22HH_OK;
 8004d54:	e7e2      	b.n	8004d1c <LPS22HH_DeInit+0xc>
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004d56:	f100 061c 	add.w	r6, r0, #28
 8004d5a:	f100 012b 	add.w	r1, r0, #43	@ 0x2b
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 f8ac 	bl	8004ebc <lps22hh_data_rate_get>
 8004d64:	b958      	cbnz	r0, 8004d7e <LPS22HH_DeInit+0x6e>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004d66:	4629      	mov	r1, r5
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 f877 	bl	8004e5c <lps22hh_data_rate_set>
 8004d6e:	b930      	cbnz	r0, 8004d7e <LPS22HH_DeInit+0x6e>
  if (pObj->temp_is_enabled == 0U)
 8004d70:	f894 502a 	ldrb.w	r5, [r4, #42]	@ 0x2a
  pObj->press_is_enabled = 0;
 8004d74:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  if (pObj->temp_is_enabled == 0U)
 8004d78:	2d00      	cmp	r5, #0
 8004d7a:	d0cf      	beq.n	8004d1c <LPS22HH_DeInit+0xc>
 8004d7c:	e7db      	b.n	8004d36 <LPS22HH_DeInit+0x26>
      return LPS22HH_ERROR;
 8004d7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004d82:	bd70      	pop	{r4, r5, r6, pc}

08004d84 <LPS22HH_RegisterBusIO>:
{
 8004d84:	b530      	push	{r4, r5, lr}
 8004d86:	b083      	sub	sp, #12
  if (pObj == NULL)
 8004d88:	b368      	cbz	r0, 8004de6 <LPS22HH_RegisterBusIO+0x62>
    pObj->IO.Init      = pIO->Init;
 8004d8a:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8004d8c:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8004d90:	688a      	ldr	r2, [r1, #8]
 8004d92:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8004d94:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8004d98:	7b0a      	ldrb	r2, [r1, #12]
 8004d9a:	7322      	strb	r2, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d9c:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8004da0:	6989      	ldr	r1, [r1, #24]
 8004da2:	61a1      	str	r1, [r4, #24]
 8004da4:	6122      	str	r2, [r4, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004da6:	4911      	ldr	r1, [pc, #68]	@ (8004dec <LPS22HH_RegisterBusIO+0x68>)
    pObj->Ctx.write_reg = WriteRegWrap;
 8004da8:	4a11      	ldr	r2, [pc, #68]	@ (8004df0 <LPS22HH_RegisterBusIO+0x6c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004daa:	6160      	str	r0, [r4, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004dac:	e9c4 2107 	strd	r2, r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8004db0:	6264      	str	r4, [r4, #36]	@ 0x24
    if (pObj->IO.Init == NULL)
 8004db2:	b1c3      	cbz	r3, 8004de6 <LPS22HH_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004db4:	4798      	blx	r3
 8004db6:	4605      	mov	r5, r0
 8004db8:	b9a8      	cbnz	r0, 8004de6 <LPS22HH_RegisterBusIO+0x62>
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004dba:	68a3      	ldr	r3, [r4, #8]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d002      	beq.n	8004dc6 <LPS22HH_RegisterBusIO+0x42>
}
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	b003      	add	sp, #12
 8004dc4:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8004dc6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f8      	bne.n	8004dc0 <LPS22HH_RegisterBusIO+0x3c>
          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004dce:	2301      	movs	r3, #1
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8004dd0:	f10d 0207 	add.w	r2, sp, #7
 8004dd4:	f104 001c 	add.w	r0, r4, #28
 8004dd8:	2110      	movs	r1, #16
 8004dda:	f88d 3007 	strb.w	r3, [sp, #7]
 8004dde:	f000 f809 	bl	8004df4 <lps22hh_write_reg>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d0ec      	beq.n	8004dc0 <LPS22HH_RegisterBusIO+0x3c>
    ret = LPS22HH_ERROR;
 8004de6:	f04f 35ff 	mov.w	r5, #4294967295
  return ret;
 8004dea:	e7e9      	b.n	8004dc0 <LPS22HH_RegisterBusIO+0x3c>
 8004dec:	08004859 	.word	0x08004859
 8004df0:	08004869 	.word	0x08004869

08004df4 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004df4:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004df6:	6804      	ldr	r4, [r0, #0]
 8004df8:	6880      	ldr	r0, [r0, #8]
 8004dfa:	46a4      	mov	ip, r4
  return ret;
}
 8004dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e00:	4760      	bx	ip
 8004e02:	bf00      	nop

08004e04 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004e04:	ee00 0a10 	vmov	s0, r0
  return ( (float_t) lsb / 1048576.0f );
}
 8004e08:	eebb 0ac6 	vcvt.f32.u32	s0, s0, #20
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop

08004e10 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004e10:	ee07 0a90 	vmov	s15, r0
  return ( (float_t) lsb / 100.0f );
 8004e14:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8004e24 <lps22hh_from_lsb_to_celsius+0x14>
 8004e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004e1c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	42c80000 	.word	0x42c80000

08004e28 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e30:	6880      	ldr	r0, [r0, #8]
 8004e32:	6866      	ldr	r6, [r4, #4]
 8004e34:	2301      	movs	r3, #1
 8004e36:	aa01      	add	r2, sp, #4
 8004e38:	2110      	movs	r1, #16
 8004e3a:	47b0      	blx	r6
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8004e3c:	b958      	cbnz	r0, 8004e56 <lps22hh_block_data_update_set+0x2e>
    reg.bdu = val;
 8004e3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e42:	6826      	ldr	r6, [r4, #0]
 8004e44:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8004e46:	f365 0341 	bfi	r3, r5, #1, #1
 8004e4a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e4e:	aa01      	add	r2, sp, #4
 8004e50:	2301      	movs	r3, #1
 8004e52:	2110      	movs	r1, #16
 8004e54:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8004e56:	b002      	add	sp, #8
 8004e58:	bd70      	pop	{r4, r5, r6, pc}
 8004e5a:	bf00      	nop

08004e5c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4604      	mov	r4, r0
 8004e60:	b082      	sub	sp, #8
 8004e62:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e64:	6880      	ldr	r0, [r0, #8]
 8004e66:	6866      	ldr	r6, [r4, #4]
 8004e68:	2301      	movs	r3, #1
 8004e6a:	466a      	mov	r2, sp
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                         1);

  if (ret == 0) {
 8004e70:	bb10      	cbnz	r0, 8004eb8 <lps22hh_data_rate_set+0x5c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e72:	68a0      	ldr	r0, [r4, #8]
 8004e74:	6866      	ldr	r6, [r4, #4]
 8004e76:	2301      	movs	r3, #1
 8004e78:	aa01      	add	r2, sp, #4
 8004e7a:	2111      	movs	r1, #17
 8004e7c:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  if (ret == 0) {
 8004e7e:	b9d8      	cbnz	r0, 8004eb8 <lps22hh_data_rate_set+0x5c>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004e80:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e84:	68a0      	ldr	r0, [r4, #8]
 8004e86:	6826      	ldr	r6, [r4, #0]
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004e88:	f365 1306 	bfi	r3, r5, #4, #3
 8004e8c:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e90:	466a      	mov	r2, sp
 8004e92:	2301      	movs	r3, #1
 8004e94:	2110      	movs	r1, #16
 8004e96:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                            1);
  }

  if (ret == 0) {
 8004e98:	b970      	cbnz	r0, 8004eb8 <lps22hh_data_rate_set+0x5c>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004e9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e9e:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004ea0:	f3c5 01c1 	ubfx	r1, r5, #3, #2
 8004ea4:	f023 0303 	bic.w	r3, r3, #3
 8004ea8:	4319      	orrs	r1, r3
 8004eaa:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004eae:	6825      	ldr	r5, [r4, #0]
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	aa01      	add	r2, sp, #4
 8004eb4:	2111      	movs	r1, #17
 8004eb6:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                            1);
  }

  return ret;
}
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd70      	pop	{r4, r5, r6, pc}

08004ebc <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ec4:	6880      	ldr	r0, [r0, #8]
 8004ec6:	6866      	ldr	r6, [r4, #4]
 8004ec8:	2301      	movs	r3, #1
 8004eca:	466a      	mov	r2, sp
 8004ecc:	2110      	movs	r1, #16
 8004ece:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
                         1);

  if (ret == 0) {
 8004ed0:	bb40      	cbnz	r0, 8004f24 <lps22hh_data_rate_get+0x68>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ed2:	68a0      	ldr	r0, [r4, #8]
 8004ed4:	6866      	ldr	r6, [r4, #4]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	aa01      	add	r2, sp, #4
 8004eda:	2111      	movs	r1, #17
 8004edc:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);
  }

  if (ret == 0) {
 8004ede:	bb08      	cbnz	r0, 8004f24 <lps22hh_data_rate_get+0x68>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	aa01      	add	r2, sp, #4
 8004ee4:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8004ee8:	2111      	movs	r1, #17
 8004eea:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
                           1);

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004eec:	f89d 3004 	ldrb.w	r3, [sp, #4]
             ctrl_reg1.odr )) {
 8004ef0:	f89d 2000 	ldrb.w	r2, [sp]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	f003 0318 	and.w	r3, r3, #24
             ctrl_reg1.odr )) {
 8004efa:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004efe:	4413      	add	r3, r2
 8004f00:	3b01      	subs	r3, #1
 8004f02:	2b14      	cmp	r3, #20
 8004f04:	d80c      	bhi.n	8004f20 <lps22hh_data_rate_get+0x64>
 8004f06:	e8df f003 	tbb	[pc, r3]
 8004f0a:	120f      	.short	0x120f
 8004f0c:	1e1b1815 	.word	0x1e1b1815
 8004f10:	0b0b3321 	.word	0x0b0b3321
 8004f14:	0b0b0b0b 	.word	0x0b0b0b0b
 8004f18:	27240b0b 	.word	0x27240b0b
 8004f1c:	2d2a      	.short	0x2d2a
 8004f1e:	30          	.byte	0x30
 8004f1f:	00          	.byte	0x00
 8004f20:	2300      	movs	r3, #0
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
        break;

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8004f22:	702b      	strb	r3, [r5, #0]
        break;
    }
  }

  return ret;
}
 8004f24:	b002      	add	sp, #8
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
        break;
 8004f28:	2301      	movs	r3, #1
        *val = LPS22HH_ONE_SHOOT;
 8004f2a:	702b      	strb	r3, [r5, #0]
 8004f2c:	e7fa      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f2e:	2302      	movs	r3, #2
        *val = LPS22HH_ONE_SHOOT;
 8004f30:	702b      	strb	r3, [r5, #0]
 8004f32:	e7f7      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f34:	2303      	movs	r3, #3
        *val = LPS22HH_ONE_SHOOT;
 8004f36:	702b      	strb	r3, [r5, #0]
 8004f38:	e7f4      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f3a:	2304      	movs	r3, #4
        *val = LPS22HH_ONE_SHOOT;
 8004f3c:	702b      	strb	r3, [r5, #0]
 8004f3e:	e7f1      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f40:	2305      	movs	r3, #5
        *val = LPS22HH_ONE_SHOOT;
 8004f42:	702b      	strb	r3, [r5, #0]
 8004f44:	e7ee      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f46:	2306      	movs	r3, #6
        *val = LPS22HH_ONE_SHOOT;
 8004f48:	702b      	strb	r3, [r5, #0]
 8004f4a:	e7eb      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f4c:	2307      	movs	r3, #7
        *val = LPS22HH_ONE_SHOOT;
 8004f4e:	702b      	strb	r3, [r5, #0]
 8004f50:	e7e8      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f52:	2311      	movs	r3, #17
        *val = LPS22HH_ONE_SHOOT;
 8004f54:	702b      	strb	r3, [r5, #0]
 8004f56:	e7e5      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f58:	2312      	movs	r3, #18
        *val = LPS22HH_ONE_SHOOT;
 8004f5a:	702b      	strb	r3, [r5, #0]
 8004f5c:	e7e2      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f5e:	2313      	movs	r3, #19
        *val = LPS22HH_ONE_SHOOT;
 8004f60:	702b      	strb	r3, [r5, #0]
 8004f62:	e7df      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f64:	2314      	movs	r3, #20
        *val = LPS22HH_ONE_SHOOT;
 8004f66:	702b      	strb	r3, [r5, #0]
 8004f68:	e7dc      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
        break;
 8004f6a:	2315      	movs	r3, #21
        *val = LPS22HH_ONE_SHOOT;
 8004f6c:	702b      	strb	r3, [r5, #0]
 8004f6e:	e7d9      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004f70:	2308      	movs	r3, #8
        *val = LPS22HH_ONE_SHOOT;
 8004f72:	702b      	strb	r3, [r5, #0]
 8004f74:	e7d6      	b.n	8004f24 <lps22hh_data_rate_get+0x68>
 8004f76:	bf00      	nop

08004f78 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004f78:	b530      	push	{r4, r5, lr}
 8004f7a:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f7c:	aa01      	add	r2, sp, #4
{
 8004f7e:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f80:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004f84:	2303      	movs	r3, #3
 8004f86:	2128      	movs	r1, #40	@ 0x28
 8004f88:	47a8      	blx	r5
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
  *buff = reg[2];
 8004f8a:	f89d 1006 	ldrb.w	r1, [sp, #6]
  *buff = (*buff * 256) + reg[1];
 8004f8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
  *buff = (*buff * 256) + reg[0];
 8004f92:	f89d 3004 	ldrb.w	r3, [sp, #4]
  *buff = (*buff * 256) + reg[1];
 8004f96:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  *buff = (*buff * 256) + reg[0];
 8004f9a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  *buff *= 256;
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	6023      	str	r3, [r4, #0]
  return ret;
}
 8004fa2:	b003      	add	sp, #12
 8004fa4:	bd30      	pop	{r4, r5, pc}
 8004fa6:	bf00      	nop

08004fa8 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004fa8:	b530      	push	{r4, r5, lr}
 8004faa:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fac:	aa01      	add	r2, sp, #4
{
 8004fae:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fb0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	212b      	movs	r1, #43	@ 0x2b
 8004fb8:	47a8      	blx	r5
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
  *buff = reg[1];
  *buff = (*buff * 256) + reg[0];
 8004fba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004fbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004fc2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004fc6:	8023      	strh	r3, [r4, #0]
  return ret;
}
 8004fc8:	b003      	add	sp, #12
 8004fca:	bd30      	pop	{r4, r5, pc}

08004fcc <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004fcc:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fce:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8004fd2:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fd4:	46a4      	mov	ip, r4
 8004fd6:	2301      	movs	r3, #1
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
  return ret;
}
 8004fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fdc:	210f      	movs	r1, #15
 8004fde:	4760      	bx	ip

08004fe0 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fe8:	6880      	ldr	r0, [r0, #8]
 8004fea:	6866      	ldr	r6, [r4, #4]
 8004fec:	2301      	movs	r3, #1
 8004fee:	aa01      	add	r2, sp, #4
 8004ff0:	2111      	movs	r1, #17
 8004ff2:	47b0      	blx	r6
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8004ff4:	b958      	cbnz	r0, 800500e <lps22hh_auto_increment_set+0x2e>
    reg.if_add_inc = val;
 8004ff6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ffa:	6826      	ldr	r6, [r4, #0]
 8004ffc:	68a0      	ldr	r0, [r4, #8]
    reg.if_add_inc = val;
 8004ffe:	f365 1304 	bfi	r3, r5, #4, #1
 8005002:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005006:	aa01      	add	r2, sp, #4
 8005008:	2301      	movs	r3, #1
 800500a:	2111      	movs	r1, #17
 800500c:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800500e:	b002      	add	sp, #8
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	bf00      	nop

08005014 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	4604      	mov	r4, r0
 8005018:	b082      	sub	sp, #8
 800501a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800501c:	6880      	ldr	r0, [r0, #8]
 800501e:	6866      	ldr	r6, [r4, #4]
 8005020:	2301      	movs	r3, #1
 8005022:	aa01      	add	r2, sp, #4
 8005024:	2110      	movs	r1, #16
 8005026:	47b0      	blx	r6
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8005028:	b958      	cbnz	r0, 8005042 <lps22hh_lp_bandwidth_set+0x2e>
    reg.lpfp_cfg = (uint8_t)val;
 800502a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800502e:	6826      	ldr	r6, [r4, #0]
 8005030:	68a0      	ldr	r0, [r4, #8]
    reg.lpfp_cfg = (uint8_t)val;
 8005032:	f365 0383 	bfi	r3, r5, #2, #2
 8005036:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800503a:	aa01      	add	r2, sp, #4
 800503c:	2301      	movs	r3, #1
 800503e:	2110      	movs	r1, #16
 8005040:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8005042:	b002      	add	sp, #8
 8005044:	bd70      	pop	{r4, r5, r6, pc}
 8005046:	bf00      	nop

08005048 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4604      	mov	r4, r0
 800504c:	b082      	sub	sp, #8
 800504e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005050:	6880      	ldr	r0, [r0, #8]
 8005052:	6866      	ldr	r6, [r4, #4]
 8005054:	2301      	movs	r3, #1
 8005056:	aa01      	add	r2, sp, #4
 8005058:	210e      	movs	r1, #14
 800505a:	47b0      	blx	r6
  lps22hh_if_ctrl_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);

  if (ret == 0) {
 800505c:	b990      	cbnz	r0, 8005084 <lps22hh_i3c_interface_set+0x3c>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 800505e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005062:	68a0      	ldr	r0, [r4, #8]
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005064:	0069      	lsls	r1, r5, #1
 8005066:	f001 0102 	and.w	r1, r1, #2
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 800506a:	092d      	lsrs	r5, r5, #4
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 800506c:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8005070:	f003 037d 	and.w	r3, r3, #125	@ 0x7d
 8005074:	4319      	orrs	r1, r3
 8005076:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	2301      	movs	r3, #1
 800507e:	aa01      	add	r2, sp, #4
 8005080:	210e      	movs	r1, #14
 8005082:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8005084:	b002      	add	sp, #8
 8005086:	bd70      	pop	{r4, r5, r6, pc}

08005088 <STTS751_GetCapabilities>:

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
 8005088:	2300      	movs	r3, #0
  Capabilities->TempMaxOdr  = 32.0f;
 800508a:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
  Capabilities->Temperature = 1;
 800508e:	2001      	movs	r0, #1
 8005090:	6008      	str	r0, [r1, #0]
  Capabilities->HumMaxOdr   = 0.0f;
 8005092:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8005094:	608a      	str	r2, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8005096:	60cb      	str	r3, [r1, #12]
  return STTS751_OK;
}
 8005098:	2000      	movs	r0, #0
 800509a:	4770      	bx	lr

0800509c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80050a2:	6880      	ldr	r0, [r0, #8]
 80050a4:	b9a8      	cbnz	r0, 80050d2 <ReadRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 80050a6:	b1a3      	cbz	r3, 80050d2 <ReadRegWrap+0x36>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80050a8:	4614      	mov	r4, r2
 80050aa:	eb02 0803 	add.w	r8, r2, r3
 80050ae:	1a8f      	subs	r7, r1, r2
 80050b0:	e001      	b.n	80050b6 <ReadRegWrap+0x1a>
    for (i = 0; i < Length; i++)
 80050b2:	4544      	cmp	r4, r8
 80050b4:	d00d      	beq.n	80050d2 <ReadRegWrap+0x36>
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80050b6:	1939      	adds	r1, r7, r4
 80050b8:	4622      	mov	r2, r4
 80050ba:	2301      	movs	r3, #1
 80050bc:	7b28      	ldrb	r0, [r5, #12]
 80050be:	696e      	ldr	r6, [r5, #20]
 80050c0:	b289      	uxth	r1, r1
    for (i = 0; i < Length; i++)
 80050c2:	441c      	add	r4, r3
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80050c4:	47b0      	blx	r6
      if (ret != STTS751_OK)
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d0f3      	beq.n	80050b2 <ReadRegWrap+0x16>
      {
        return STTS751_ERROR;
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
 80050ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ret;
 80050d2:	2000      	movs	r0, #0
}
 80050d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080050d8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80050d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050dc:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = STTS751_OK;
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80050de:	6880      	ldr	r0, [r0, #8]
 80050e0:	b9a8      	cbnz	r0, 800510e <WriteRegWrap+0x36>
  {
	for (i = 0; i < Length; i++)
 80050e2:	b1a3      	cbz	r3, 800510e <WriteRegWrap+0x36>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80050e4:	4614      	mov	r4, r2
 80050e6:	eb02 0803 	add.w	r8, r2, r3
 80050ea:	1a8f      	subs	r7, r1, r2
 80050ec:	e001      	b.n	80050f2 <WriteRegWrap+0x1a>
	for (i = 0; i < Length; i++)
 80050ee:	4544      	cmp	r4, r8
 80050f0:	d00d      	beq.n	800510e <WriteRegWrap+0x36>
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80050f2:	1939      	adds	r1, r7, r4
 80050f4:	4622      	mov	r2, r4
 80050f6:	2301      	movs	r3, #1
 80050f8:	7b28      	ldrb	r0, [r5, #12]
 80050fa:	692e      	ldr	r6, [r5, #16]
 80050fc:	b289      	uxth	r1, r1
	for (i = 0; i < Length; i++)
 80050fe:	441c      	add	r4, r3
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005100:	47b0      	blx	r6
      if (ret != STTS751_OK)
 8005102:	2800      	cmp	r0, #0
 8005104:	d0f3      	beq.n	80050ee <WriteRegWrap+0x16>
      {
        return STTS751_ERROR;
 8005106:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
 800510a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ret;
 800510e:	2000      	movs	r0, #0
}
 8005110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005114 <STTS751_Init>:
{
 8005114:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8005116:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
{
 800511a:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 800511c:	b123      	cbz	r3, 8005128 <STTS751_Init+0x14>
  pObj->is_initialized = 1;
 800511e:	2301      	movs	r3, #1
 8005120:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  return STTS751_OK;
 8005124:	2000      	movs	r0, #0
}
 8005126:	bd38      	pop	{r3, r4, r5, pc}
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8005128:	f100 051c 	add.w	r5, r0, #28
 800512c:	2101      	movs	r1, #1
 800512e:	4628      	mov	r0, r5
 8005130:	f000 fb18 	bl	8005764 <stts751_pin_event_route_set>
 8005134:	b968      	cbnz	r0, 8005152 <STTS751_Init+0x3e>
    pObj->temp_odr = 1.0f;
 8005136:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800513a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 800513c:	2103      	movs	r1, #3
 800513e:	4628      	mov	r0, r5
 8005140:	f000 fac2 	bl	80056c8 <stts751_resolution_set>
 8005144:	b928      	cbnz	r0, 8005152 <STTS751_Init+0x3e>
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	4628      	mov	r0, r5
 800514a:	f000 fa45 	bl	80055d8 <stts751_temp_data_rate_set>
 800514e:	2800      	cmp	r0, #0
 8005150:	d0e5      	beq.n	800511e <STTS751_Init+0xa>
      return STTS751_ERROR;
 8005152:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005156:	bd38      	pop	{r3, r4, r5, pc}

08005158 <STTS751_ReadID>:
{
 8005158:	b510      	push	{r4, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	460c      	mov	r4, r1
  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 800515e:	301c      	adds	r0, #28
 8005160:	a901      	add	r1, sp, #4
 8005162:	f000 fb19 	bl	8005798 <stts751_device_id_get>
 8005166:	b920      	cbnz	r0, 8005172 <STTS751_ReadID+0x1a>
  *Id = buf.manufacturer_id;
 8005168:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800516c:	7023      	strb	r3, [r4, #0]
}
 800516e:	b002      	add	sp, #8
 8005170:	bd10      	pop	{r4, pc}
    return STTS751_ERROR;
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	e7fa      	b.n	800516e <STTS751_ReadID+0x16>

08005178 <STTS751_TEMP_GetOutputDataRate>:
{
 8005178:	b510      	push	{r4, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	460c      	mov	r4, r1
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800517e:	301c      	adds	r0, #28
 8005180:	f10d 0107 	add.w	r1, sp, #7
 8005184:	f000 fa64 	bl	8005650 <stts751_temp_data_rate_get>
 8005188:	b988      	cbnz	r0, 80051ae <STTS751_TEMP_GetOutputDataRate+0x36>
  switch (odr_low_level)
 800518a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800518e:	2b09      	cmp	r3, #9
 8005190:	d809      	bhi.n	80051a6 <STTS751_TEMP_GetOutputDataRate+0x2e>
 8005192:	3b01      	subs	r3, #1
 8005194:	2b08      	cmp	r3, #8
 8005196:	d82c      	bhi.n	80051f2 <STTS751_TEMP_GetOutputDataRate+0x7a>
 8005198:	e8df f003 	tbb	[pc, r3]
 800519c:	19161310 	.word	0x19161310
 80051a0:	25221f1c 	.word	0x25221f1c
 80051a4:	28          	.byte	0x28
 80051a5:	00          	.byte	0x00
 80051a6:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80051aa:	2b80      	cmp	r3, #128	@ 0x80
 80051ac:	d003      	beq.n	80051b6 <STTS751_TEMP_GetOutputDataRate+0x3e>
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 80051b2:	b002      	add	sp, #8
 80051b4:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 80051b6:	2300      	movs	r3, #0
      *Odr = 0.0f;
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	e7fa      	b.n	80051b2 <STTS751_TEMP_GetOutputDataRate+0x3a>
  switch (odr_low_level)
 80051bc:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 80051c0:	e7fa      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80051c2:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80051c6:	e7f7      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80051c8:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80051cc:	e7f4      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80051ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80051d2:	e7f1      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80051d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051d8:	e7ee      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80051da:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80051de:	e7eb      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80051e0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80051e4:	e7e8      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80051e6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80051ea:	e7e5      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
      break;
 80051ec:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 80051f0:	e7e2      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>
  switch (odr_low_level)
 80051f2:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 80051f6:	e7df      	b.n	80051b8 <STTS751_TEMP_GetOutputDataRate+0x40>

080051f8 <STTS751_TEMP_SetOutputDataRate>:
{
 80051f8:	b510      	push	{r4, lr}
 80051fa:	ed2d 8b02 	vpush	{d8}
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80051fe:	f100 041c 	add.w	r4, r0, #28
{
 8005202:	b082      	sub	sp, #8
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005204:	f10d 0107 	add.w	r1, sp, #7
 8005208:	4620      	mov	r0, r4
{
 800520a:	eeb0 8a40 	vmov.f32	s16, s0
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800520e:	f000 fa75 	bl	80056fc <stts751_resolution_get>
 8005212:	2800      	cmp	r0, #0
 8005214:	d146      	bne.n	80052a4 <STTS751_TEMP_SetOutputDataRate+0xac>
  if(Odr == 16.0f && res == STTS751_12bit)
 8005216:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 800521a:	eeb4 8a67 	vcmp.f32	s16, s15
 800521e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005222:	d018      	beq.n	8005256 <STTS751_TEMP_SetOutputDataRate+0x5e>
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8005224:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8005324 <STTS751_TEMP_SetOutputDataRate+0x12c>
 8005228:	eeb4 8a67 	vcmp.f32	s16, s15
 800522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005230:	d117      	bne.n	8005262 <STTS751_TEMP_SetOutputDataRate+0x6a>
 8005232:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005236:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 800523a:	2b01      	cmp	r3, #1
 800523c:	d02c      	beq.n	8005298 <STTS751_TEMP_SetOutputDataRate+0xa0>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800523e:	2109      	movs	r1, #9
  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8005240:	4620      	mov	r0, r4
 8005242:	f000 f9c9 	bl	80055d8 <stts751_temp_data_rate_set>
 8005246:	3800      	subs	r0, #0
 8005248:	bf18      	it	ne
 800524a:	2001      	movne	r0, #1
 800524c:	4240      	negs	r0, r0
}
 800524e:	b002      	add	sp, #8
 8005250:	ecbd 8b02 	vpop	{d8}
 8005254:	bd10      	pop	{r4, pc}
  if(Odr == 16.0f && res == STTS751_12bit)
 8005256:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d03c      	beq.n	80052d8 <STTS751_TEMP_SetOutputDataRate+0xe0>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800525e:	2108      	movs	r1, #8
 8005260:	e7ee      	b.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005262:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8005328 <STTS751_TEMP_SetOutputDataRate+0x130>
 8005266:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	d801      	bhi.n	8005274 <STTS751_TEMP_SetOutputDataRate+0x7c>
 8005270:	4601      	mov	r1, r0
 8005272:	e7e5      	b.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005274:	eef4 7a00 	vmov.f32	s15, #64	@ 0x3e000000  0.125
 8005278:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005280:	d908      	bls.n	8005294 <STTS751_TEMP_SetOutputDataRate+0x9c>
 8005282:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005286:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	d80c      	bhi.n	80052aa <STTS751_TEMP_SetOutputDataRate+0xb2>
 8005290:	2102      	movs	r1, #2
 8005292:	e7d5      	b.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005294:	2101      	movs	r1, #1
 8005296:	e7d3      	b.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8005298:	4601      	mov	r1, r0
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fa14 	bl	80056c8 <stts751_resolution_set>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d0cc      	beq.n	800523e <STTS751_TEMP_SetOutputDataRate+0x46>
    return STTS751_ERROR;
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	e7d1      	b.n	800524e <STTS751_TEMP_SetOutputDataRate+0x56>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80052aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80052ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	d916      	bls.n	80052e6 <STTS751_TEMP_SetOutputDataRate+0xee>
 80052b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80052bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80052c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c4:	d911      	bls.n	80052ea <STTS751_TEMP_SetOutputDataRate+0xf2>
 80052c6:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80052ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	d80c      	bhi.n	80052ee <STTS751_TEMP_SetOutputDataRate+0xf6>
 80052d4:	2105      	movs	r1, #5
 80052d6:	e7b3      	b.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80052d8:	2101      	movs	r1, #1
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 f9f4 	bl	80056c8 <stts751_resolution_set>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d0bc      	beq.n	800525e <STTS751_TEMP_SetOutputDataRate+0x66>
 80052e4:	e7de      	b.n	80052a4 <STTS751_TEMP_SetOutputDataRate+0xac>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80052e6:	2103      	movs	r1, #3
 80052e8:	e7aa      	b.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
 80052ea:	2104      	movs	r1, #4
 80052ec:	e7a8      	b.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
 80052ee:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80052f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	d801      	bhi.n	8005300 <STTS751_TEMP_SetOutputDataRate+0x108>
 80052fc:	2106      	movs	r1, #6
 80052fe:	e79f      	b.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005300:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005304:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530c:	bf98      	it	ls
 800530e:	2107      	movls	r1, #7
 8005310:	d996      	bls.n	8005240 <STTS751_TEMP_SetOutputDataRate+0x48>
 8005312:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 8005316:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531e:	d88e      	bhi.n	800523e <STTS751_TEMP_SetOutputDataRate+0x46>
 8005320:	e79d      	b.n	800525e <STTS751_TEMP_SetOutputDataRate+0x66>
 8005322:	bf00      	nop
 8005324:	42000000 	.word	0x42000000
 8005328:	3d800000 	.word	0x3d800000

0800532c <STTS751_TEMP_GetTemperature>:
{
 800532c:	b530      	push	{r4, r5, lr}
 800532e:	b083      	sub	sp, #12
 8005330:	460d      	mov	r5, r1
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8005332:	301c      	adds	r0, #28
 8005334:	f10d 0106 	add.w	r1, sp, #6
 8005338:	f000 f9f8 	bl	800572c <stts751_temperature_raw_get>
 800533c:	b948      	cbnz	r0, 8005352 <STTS751_TEMP_GetTemperature+0x26>
  *Value = stts751_from_lsb_to_celsius(raw_value);
 800533e:	4604      	mov	r4, r0
 8005340:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8005344:	f000 f942 	bl	80055cc <stts751_from_lsb_to_celsius>
 8005348:	ed85 0a00 	vstr	s0, [r5]
}
 800534c:	4620      	mov	r0, r4
 800534e:	b003      	add	sp, #12
 8005350:	bd30      	pop	{r4, r5, pc}
    return STTS751_ERROR;
 8005352:	f04f 34ff 	mov.w	r4, #4294967295
 8005356:	e7f9      	b.n	800534c <STTS751_TEMP_GetTemperature+0x20>

08005358 <STTS751_DeInit>:
{
 8005358:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 800535a:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 800535e:	2b01      	cmp	r3, #1
{
 8005360:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8005362:	d003      	beq.n	800536c <STTS751_DeInit+0x14>
  pObj->is_initialized = 0;
 8005364:	2000      	movs	r0, #0
 8005366:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
}
 800536a:	bd10      	pop	{r4, pc}
  if (pObj->temp_is_enabled == 0U)
 800536c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f7      	beq.n	8005364 <STTS751_DeInit+0xc>
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8005374:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 8005378:	f7ff fefe 	bl	8005178 <STTS751_TEMP_GetOutputDataRate>
 800537c:	b940      	cbnz	r0, 8005390 <STTS751_DeInit+0x38>
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800537e:	2180      	movs	r1, #128	@ 0x80
 8005380:	f104 001c 	add.w	r0, r4, #28
 8005384:	f000 f928 	bl	80055d8 <stts751_temp_data_rate_set>
 8005388:	b910      	cbnz	r0, 8005390 <STTS751_DeInit+0x38>
  pObj->temp_is_enabled = 0;
 800538a:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
  return STTS751_OK;
 800538e:	e7e9      	b.n	8005364 <STTS751_DeInit+0xc>
      return STTS751_ERROR;
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop

08005398 <STTS751_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8005398:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 800539c:	b90b      	cbnz	r3, 80053a2 <STTS751_TEMP_Disable+0xa>
    return STTS751_OK;
 800539e:	2000      	movs	r0, #0
}
 80053a0:	4770      	bx	lr
{
 80053a2:	b530      	push	{r4, r5, lr}
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80053a4:	f100 051c 	add.w	r5, r0, #28
{
 80053a8:	b083      	sub	sp, #12
 80053aa:	4604      	mov	r4, r0
  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80053ac:	f10d 0107 	add.w	r1, sp, #7
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 f94d 	bl	8005650 <stts751_temp_data_rate_get>
 80053b6:	b988      	cbnz	r0, 80053dc <STTS751_TEMP_Disable+0x44>
  switch (odr_low_level)
 80053b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d809      	bhi.n	80053d4 <STTS751_TEMP_Disable+0x3c>
 80053c0:	3b01      	subs	r3, #1
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d836      	bhi.n	8005434 <STTS751_TEMP_Disable+0x9c>
 80053c6:	e8df f003 	tbb	[pc, r3]
 80053ca:	0d1d      	.short	0x0d1d
 80053cc:	29262320 	.word	0x29262320
 80053d0:	322f      	.short	0x322f
 80053d2:	2c          	.byte	0x2c
 80053d3:	00          	.byte	0x00
 80053d4:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80053d8:	2b80      	cmp	r3, #128	@ 0x80
 80053da:	d011      	beq.n	8005400 <STTS751_TEMP_Disable+0x68>
    return STTS751_ERROR;
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80053e0:	b003      	add	sp, #12
 80053e2:	bd30      	pop	{r4, r5, pc}
  switch (odr_low_level)
 80053e4:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
      *Odr = 0.0625f;
 80053e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80053ea:	2180      	movs	r1, #128	@ 0x80
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f8f3 	bl	80055d8 <stts751_temp_data_rate_set>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d1f2      	bne.n	80053dc <STTS751_TEMP_Disable+0x44>
  pObj->temp_is_enabled = 0;
 80053f6:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
    return STTS751_OK;
 80053fa:	2000      	movs	r0, #0
}
 80053fc:	b003      	add	sp, #12
 80053fe:	bd30      	pop	{r4, r5, pc}
  switch (odr_low_level)
 8005400:	2300      	movs	r3, #0
 8005402:	e7f1      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
 8005404:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 8005408:	e7ee      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_500mHz:
 800540a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800540e:	e7eb      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_1Hz:
 8005410:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005414:	e7e8      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_2Hz:
 8005416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800541a:	e7e5      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_4Hz:
 800541c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005420:	e7e2      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_32Hz:
 8005422:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8005426:	e7df      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_8Hz:
 8005428:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800542c:	e7dc      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
    case STTS751_TEMP_ODR_16Hz:
 800542e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005432:	e7d9      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
  switch (odr_low_level)
 8005434:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8005438:	e7d6      	b.n	80053e8 <STTS751_TEMP_Disable+0x50>
 800543a:	bf00      	nop

0800543c <STTS751_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 800543c:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8005440:	2b01      	cmp	r3, #1
 8005442:	d048      	beq.n	80054d6 <STTS751_TEMP_Enable+0x9a>
{
 8005444:	b530      	push	{r4, r5, lr}
 8005446:	ed2d 8b02 	vpush	{d8}
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800544a:	f100 051c 	add.w	r5, r0, #28
{
 800544e:	b083      	sub	sp, #12
 8005450:	4604      	mov	r4, r0
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8005452:	f10d 0107 	add.w	r1, sp, #7
 8005456:	4628      	mov	r0, r5
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8005458:	ed94 8a0b 	vldr	s16, [r4, #44]	@ 0x2c
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800545c:	f000 f94e 	bl	80056fc <stts751_resolution_get>
 8005460:	2800      	cmp	r0, #0
 8005462:	d150      	bne.n	8005506 <STTS751_TEMP_Enable+0xca>
  if(Odr == 16.0f && res == STTS751_12bit)
 8005464:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 8005468:	eeb4 8a67 	vcmp.f32	s16, s15
 800546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005470:	d019      	beq.n	80054a6 <STTS751_TEMP_Enable+0x6a>
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8005472:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8005578 <STTS751_TEMP_Enable+0x13c>
 8005476:	eeb4 8a67 	vcmp.f32	s16, s15
 800547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547e:	d118      	bne.n	80054b2 <STTS751_TEMP_Enable+0x76>
 8005480:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005484:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8005488:	2b01      	cmp	r3, #1
 800548a:	d036      	beq.n	80054fa <STTS751_TEMP_Enable+0xbe>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800548c:	2109      	movs	r1, #9
  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 800548e:	4628      	mov	r0, r5
 8005490:	f000 f8a2 	bl	80055d8 <stts751_temp_data_rate_set>
 8005494:	bbb8      	cbnz	r0, 8005506 <STTS751_TEMP_Enable+0xca>
  pObj->temp_is_enabled = 1;
 8005496:	2301      	movs	r3, #1
 8005498:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    return STTS751_OK;
 800549c:	2000      	movs	r0, #0
}
 800549e:	b003      	add	sp, #12
 80054a0:	ecbd 8b02 	vpop	{d8}
 80054a4:	bd30      	pop	{r4, r5, pc}
  if(Odr == 16.0f && res == STTS751_12bit)
 80054a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d030      	beq.n	8005510 <STTS751_TEMP_Enable+0xd4>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80054ae:	2108      	movs	r1, #8
 80054b0:	e7ed      	b.n	800548e <STTS751_TEMP_Enable+0x52>
 80054b2:	eddf 7a32 	vldr	s15, [pc, #200]	@ 800557c <STTS751_TEMP_Enable+0x140>
 80054b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054be:	d801      	bhi.n	80054c4 <STTS751_TEMP_Enable+0x88>
 80054c0:	4601      	mov	r1, r0
 80054c2:	e7e4      	b.n	800548e <STTS751_TEMP_Enable+0x52>
 80054c4:	eef4 7a00 	vmov.f32	s15, #64	@ 0x3e000000  0.125
 80054c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d0:	d803      	bhi.n	80054da <STTS751_TEMP_Enable+0x9e>
 80054d2:	2101      	movs	r1, #1
 80054d4:	e7db      	b.n	800548e <STTS751_TEMP_Enable+0x52>
    return STTS751_OK;
 80054d6:	2000      	movs	r0, #0
}
 80054d8:	4770      	bx	lr
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80054da:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80054de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e6:	d911      	bls.n	800550c <STTS751_TEMP_Enable+0xd0>
 80054e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80054ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f4:	d813      	bhi.n	800551e <STTS751_TEMP_Enable+0xe2>
 80054f6:	2103      	movs	r1, #3
 80054f8:	e7c9      	b.n	800548e <STTS751_TEMP_Enable+0x52>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80054fa:	4601      	mov	r1, r0
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f8e3 	bl	80056c8 <stts751_resolution_set>
 8005502:	2800      	cmp	r0, #0
 8005504:	d0c2      	beq.n	800548c <STTS751_TEMP_Enable+0x50>
    return STTS751_ERROR;
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	e7c8      	b.n	800549e <STTS751_TEMP_Enable+0x62>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800550c:	2102      	movs	r1, #2
 800550e:	e7be      	b.n	800548e <STTS751_TEMP_Enable+0x52>
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8005510:	2101      	movs	r1, #1
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f8d8 	bl	80056c8 <stts751_resolution_set>
 8005518:	2800      	cmp	r0, #0
 800551a:	d0c8      	beq.n	80054ae <STTS751_TEMP_Enable+0x72>
 800551c:	e7f3      	b.n	8005506 <STTS751_TEMP_Enable+0xca>
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800551e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005522:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552a:	d908      	bls.n	800553e <STTS751_TEMP_Enable+0x102>
 800552c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005530:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005538:	d803      	bhi.n	8005542 <STTS751_TEMP_Enable+0x106>
 800553a:	2105      	movs	r1, #5
 800553c:	e7a7      	b.n	800548e <STTS751_TEMP_Enable+0x52>
 800553e:	2104      	movs	r1, #4
 8005540:	e7a5      	b.n	800548e <STTS751_TEMP_Enable+0x52>
 8005542:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8005546:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554e:	d801      	bhi.n	8005554 <STTS751_TEMP_Enable+0x118>
 8005550:	2106      	movs	r1, #6
 8005552:	e79c      	b.n	800548e <STTS751_TEMP_Enable+0x52>
 8005554:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005558:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800555c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005560:	bf98      	it	ls
 8005562:	2107      	movls	r1, #7
 8005564:	d993      	bls.n	800548e <STTS751_TEMP_Enable+0x52>
 8005566:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 800556a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800556e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005572:	d99c      	bls.n	80054ae <STTS751_TEMP_Enable+0x72>
 8005574:	e78a      	b.n	800548c <STTS751_TEMP_Enable+0x50>
 8005576:	bf00      	nop
 8005578:	42000000 	.word	0x42000000
 800557c:	3d800000 	.word	0x3d800000

08005580 <STTS751_RegisterBusIO>:
  if (pObj == NULL)
 8005580:	b1e0      	cbz	r0, 80055bc <STTS751_RegisterBusIO+0x3c>
{
 8005582:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8005584:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8005588:	688a      	ldr	r2, [r1, #8]
 800558a:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800558c:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8005590:	7b0a      	ldrb	r2, [r1, #12]
 8005592:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005594:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 8005598:	6989      	ldr	r1, [r1, #24]
 800559a:	6181      	str	r1, [r0, #24]
 800559c:	6102      	str	r2, [r0, #16]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800559e:	4909      	ldr	r1, [pc, #36]	@ (80055c4 <STTS751_RegisterBusIO+0x44>)
    pObj->Ctx.write_reg = WriteRegWrap;
 80055a0:	4a09      	ldr	r2, [pc, #36]	@ (80055c8 <STTS751_RegisterBusIO+0x48>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80055a2:	6144      	str	r4, [r0, #20]
    pObj->Ctx.write_reg = WriteRegWrap;
 80055a4:	e9c0 2107 	strd	r2, r1, [r0, #28]
    pObj->Ctx.handle   = pObj;
 80055a8:	6240      	str	r0, [r0, #36]	@ 0x24
    if (pObj->IO.Init != NULL)
 80055aa:	b113      	cbz	r3, 80055b2 <STTS751_RegisterBusIO+0x32>
}
 80055ac:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 80055b0:	4718      	bx	r3
}
 80055b2:	f04f 30ff 	mov.w	r0, #4294967295
 80055b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	0800509d 	.word	0x0800509d
 80055c8:	080050d9 	.word	0x080050d9

080055cc <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float stts751_from_lsb_to_celsius(int16_t lsb)
{
 80055cc:	ee00 0a10 	vmov	s0, r0
  return ((float)lsb) / 256.0f;
}
 80055d0:	eeba 0acc 	vcvt.f32.s32	s0, s0, #8
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop

080055d8 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	b082      	sub	sp, #8
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 80055de:	23aa      	movs	r3, #170	@ 0xaa
{
 80055e0:	460d      	mov	r5, r1
  uint8_t dummy_value = 0xAA;
 80055e2:	f88d 3007 	strb.w	r3, [sp, #7]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80055e6:	6880      	ldr	r0, [r0, #8]
 80055e8:	6866      	ldr	r6, [r4, #4]
 80055ea:	2301      	movs	r3, #1
 80055ec:	aa01      	add	r2, sp, #4
 80055ee:	2104      	movs	r1, #4
 80055f0:	47b0      	blx	r6
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0) {
 80055f2:	bb50      	cbnz	r0, 800564a <stts751_temp_data_rate_set+0x72>
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80055f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80055f8:	68a0      	ldr	r0, [r4, #8]
 80055fa:	6826      	ldr	r6, [r4, #0]
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80055fc:	f365 0303 	bfi	r3, r5, #0, #4
 8005600:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005604:	aa01      	add	r2, sp, #4
 8005606:	2301      	movs	r3, #1
 8005608:	2104      	movs	r1, #4
 800560a:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0) {
 800560c:	b9e8      	cbnz	r0, 800564a <stts751_temp_data_rate_set+0x72>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800560e:	6866      	ldr	r6, [r4, #4]
 8005610:	68a0      	ldr	r0, [r4, #8]
 8005612:	2301      	movs	r3, #1
 8005614:	466a      	mov	r2, sp
 8005616:	2103      	movs	r1, #3
 8005618:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0) {
 800561a:	b9b0      	cbnz	r0, 800564a <stts751_temp_data_rate_set+0x72>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800561c:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005620:	6826      	ldr	r6, [r4, #0]
 8005622:	68a0      	ldr	r0, [r4, #8]
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8005624:	09ea      	lsrs	r2, r5, #7
 8005626:	f362 1386 	bfi	r3, r2, #6, #1
 800562a:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800562e:	466a      	mov	r2, sp
 8005630:	2301      	movs	r3, #1
 8005632:	2103      	movs	r1, #3
 8005634:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT)) {
 8005636:	b940      	cbnz	r0, 800564a <stts751_temp_data_rate_set+0x72>
 8005638:	2d90      	cmp	r5, #144	@ 0x90
 800563a:	d106      	bne.n	800564a <stts751_temp_data_rate_set+0x72>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800563c:	6825      	ldr	r5, [r4, #0]
 800563e:	68a0      	ldr	r0, [r4, #8]
 8005640:	2301      	movs	r3, #1
 8005642:	f10d 0207 	add.w	r2, sp, #7
 8005646:	210f      	movs	r1, #15
 8005648:	47a8      	blx	r5
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
  }

  return ret;
}
 800564a:	b002      	add	sp, #8
 800564c:	bd70      	pop	{r4, r5, r6, pc}
 800564e:	bf00      	nop

08005650 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	4604      	mov	r4, r0
 8005654:	b082      	sub	sp, #8
 8005656:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005658:	6880      	ldr	r0, [r0, #8]
 800565a:	6866      	ldr	r6, [r4, #4]
 800565c:	2301      	movs	r3, #1
 800565e:	466a      	mov	r2, sp
 8005660:	2104      	movs	r1, #4
 8005662:	47b0      	blx	r6
  stts751_configuration_t configuration;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0) {
 8005664:	b928      	cbnz	r0, 8005672 <stts751_temp_data_rate_get+0x22>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005666:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 800566a:	2301      	movs	r3, #1
 800566c:	aa01      	add	r2, sp, #4
 800566e:	2103      	movs	r1, #3
 8005670:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
                           (uint8_t *)&configuration, 1);
  }

  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 8005672:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005676:	f89d 3000 	ldrb.w	r3, [sp]
 800567a:	f3c2 1280 	ubfx	r2, r2, #6, #1
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005686:	2b09      	cmp	r3, #9
 8005688:	d81c      	bhi.n	80056c4 <stts751_temp_data_rate_get+0x74>
 800568a:	e8df f003 	tbb	[pc, r3]
 800568e:	0905      	.short	0x0905
 8005690:	110f0d0b 	.word	0x110f0d0b
 8005694:	19171513 	.word	0x19171513
 8005698:	2300      	movs	r3, #0
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 800569a:	702b      	strb	r3, [r5, #0]
      *val = STTS751_TEMP_ODR_OFF;
      break;
  }

  return ret;
}
 800569c:	b002      	add	sp, #8
 800569e:	bd70      	pop	{r4, r5, r6, pc}
      break;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e7fa      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
      break;
 80056a4:	2302      	movs	r3, #2
 80056a6:	e7f8      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
      break;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e7f6      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
      break;
 80056ac:	2304      	movs	r3, #4
 80056ae:	e7f4      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
      break;
 80056b0:	2305      	movs	r3, #5
 80056b2:	e7f2      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
      break;
 80056b4:	2306      	movs	r3, #6
 80056b6:	e7f0      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
      break;
 80056b8:	2307      	movs	r3, #7
 80056ba:	e7ee      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
      break;
 80056bc:	2308      	movs	r3, #8
 80056be:	e7ec      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
      break;
 80056c0:	2309      	movs	r3, #9
 80056c2:	e7ea      	b.n	800569a <stts751_temp_data_rate_get+0x4a>
  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 80056c4:	2380      	movs	r3, #128	@ 0x80
 80056c6:	e7e8      	b.n	800569a <stts751_temp_data_rate_get+0x4a>

080056c8 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4604      	mov	r4, r0
 80056cc:	b082      	sub	sp, #8
 80056ce:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80056d0:	6880      	ldr	r0, [r0, #8]
 80056d2:	6866      	ldr	r6, [r4, #4]
 80056d4:	2301      	movs	r3, #1
 80056d6:	aa01      	add	r2, sp, #4
 80056d8:	2103      	movs	r1, #3
 80056da:	47b0      	blx	r6
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                         1);

  if (ret == 0) {
 80056dc:	b958      	cbnz	r0, 80056f6 <stts751_resolution_set+0x2e>
    reg.tres = (uint8_t) val;
 80056de:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80056e2:	6826      	ldr	r6, [r4, #0]
 80056e4:	68a0      	ldr	r0, [r4, #8]
    reg.tres = (uint8_t) val;
 80056e6:	f365 0383 	bfi	r3, r5, #2, #2
 80056ea:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80056ee:	aa01      	add	r2, sp, #4
 80056f0:	2301      	movs	r3, #1
 80056f2:	2103      	movs	r1, #3
 80056f4:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                            1);
  }

  return ret;
}
 80056f6:	b002      	add	sp, #8
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	bf00      	nop

080056fc <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 80056fc:	b530      	push	{r4, r5, lr}
 80056fe:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005700:	2301      	movs	r3, #1
 8005702:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8005706:	aa01      	add	r2, sp, #4
{
 8005708:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800570a:	2103      	movs	r1, #3
 800570c:	47a8      	blx	r5
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg,
                         1);

  switch (reg.tres) {
 800570e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005712:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005716:	2b01      	cmp	r3, #1
 8005718:	d005      	beq.n	8005726 <stts751_resolution_get+0x2a>
 800571a:	2b03      	cmp	r3, #3
 800571c:	d003      	beq.n	8005726 <stts751_resolution_get+0x2a>
 800571e:	3b00      	subs	r3, #0
 8005720:	bf18      	it	ne
 8005722:	2301      	movne	r3, #1
 8005724:	005b      	lsls	r3, r3, #1
    case STTS751_9bit:
      *val = STTS751_9bit;
 8005726:	7023      	strb	r3, [r4, #0]
      *val = STTS751_9bit;
      break;
  }

  return ret;
}
 8005728:	b003      	add	sp, #12
 800572a:	bd30      	pop	{r4, r5, pc}

0800572c <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4604      	mov	r4, r0
 8005730:	b082      	sub	sp, #8
 8005732:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005734:	6880      	ldr	r0, [r0, #8]
 8005736:	6866      	ldr	r6, [r4, #4]
 8005738:	2301      	movs	r3, #1
 800573a:	f10d 0205 	add.w	r2, sp, #5
 800573e:	2100      	movs	r1, #0
 8005740:	47b0      	blx	r6
  uint8_t buff[2];
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
                         (uint8_t *)&buff[1], 1);

  if (ret == 0) {
 8005742:	b960      	cbnz	r0, 800575e <stts751_temperature_raw_get+0x32>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005744:	2301      	movs	r3, #1
 8005746:	aa01      	add	r2, sp, #4
 8005748:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 800574c:	2102      	movs	r1, #2
 800574e:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
                           &buff[0], 1);
    *val = (int16_t)buff[1];
    *val = (*val * 256) + (int16_t)buff[0];
 8005750:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005754:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005758:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800575c:	802b      	strh	r3, [r5, #0]
  }

  return ret;
}
 800575e:	b002      	add	sp, #8
 8005760:	bd70      	pop	{r4, r5, r6, pc}
 8005762:	bf00      	nop

08005764 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4604      	mov	r4, r0
 8005768:	b082      	sub	sp, #8
 800576a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800576c:	6880      	ldr	r0, [r0, #8]
 800576e:	6866      	ldr	r6, [r4, #4]
 8005770:	2301      	movs	r3, #1
 8005772:	aa01      	add	r2, sp, #4
 8005774:	2103      	movs	r1, #3
 8005776:	47b0      	blx	r6
  stts751_configuration_t reg;
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg,
                         1);

  if (ret == 0) {
 8005778:	b958      	cbnz	r0, 8005792 <stts751_pin_event_route_set+0x2e>
    reg.mask1 = val;
 800577a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800577e:	6826      	ldr	r6, [r4, #0]
 8005780:	68a0      	ldr	r0, [r4, #8]
    reg.mask1 = val;
 8005782:	f365 13c7 	bfi	r3, r5, #7, #1
 8005786:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800578a:	aa01      	add	r2, sp, #4
 800578c:	2301      	movs	r3, #1
 800578e:	2103      	movs	r1, #3
 8005790:	47b0      	blx	r6
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg,
                            1);
  }

  return ret;
}
 8005792:	b002      	add	sp, #8
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	bf00      	nop

08005798 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4604      	mov	r4, r0
 800579c:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800579e:	460a      	mov	r2, r1
 80057a0:	6880      	ldr	r0, [r0, #8]
 80057a2:	6866      	ldr	r6, [r4, #4]
 80057a4:	2301      	movs	r3, #1
 80057a6:	21fd      	movs	r1, #253	@ 0xfd
 80057a8:	47b0      	blx	r6
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0) {
 80057aa:	b978      	cbnz	r0, 80057cc <stts751_device_id_get+0x34>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80057ac:	2301      	movs	r3, #1
 80057ae:	68a0      	ldr	r0, [r4, #8]
 80057b0:	6866      	ldr	r6, [r4, #4]
 80057b2:	18ea      	adds	r2, r5, r3
 80057b4:	21fe      	movs	r1, #254	@ 0xfe
 80057b6:	47b0      	blx	r6
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0) {
 80057b8:	b940      	cbnz	r0, 80057cc <stts751_device_id_get+0x34>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80057ba:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80057be:	1caa      	adds	r2, r5, #2
 80057c0:	46b4      	mov	ip, r6
 80057c2:	2301      	movs	r3, #1
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
}
 80057c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80057c8:	21ff      	movs	r1, #255	@ 0xff
 80057ca:	4760      	bx	ip
}
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
 80057ce:	bf00      	nop

080057d0 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 80057d0:	b570      	push	{r4, r5, r6, lr}
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 80057d2:	4c1a      	ldr	r4, [pc, #104]	@ (800583c <BSP_ADC1_Initialization+0x6c>)
 80057d4:	7823      	ldrb	r3, [r4, #0]
{
 80057d6:	4605      	mov	r5, r0
  if(ADC_UsedFor == ADC1_NOT_USED){
 80057d8:	b123      	cbz	r3, 80057e4 <BSP_ADC1_Initialization+0x14>
      return BSP_ERROR_PERIPH_FAILURE;
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 80057da:	ea45 0003 	orr.w	r0, r5, r3
 80057de:	7020      	strb	r0, [r4, #0]

  return BSP_ERROR_NONE;
 80057e0:	2000      	movs	r0, #0
}
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80057e4:	2204      	movs	r2, #4
    ADC1_Handle.Instance = ADC1;
 80057e6:	4916      	ldr	r1, [pc, #88]	@ (8005840 <BSP_ADC1_Initialization+0x70>)
 80057e8:	6061      	str	r1, [r4, #4]
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 80057ea:	18a6      	adds	r6, r4, r2
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 80057ec:	e9c4 3302 	strd	r3, r3, [r4, #8]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 80057f0:	e9c4 3304 	strd	r3, r3, [r4, #16]
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80057f4:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 80057f8:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 80057fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005800:	61a2      	str	r2, [r4, #24]
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8005802:	6522      	str	r2, [r4, #80]	@ 0x50
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 8005804:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8005808:	2201      	movs	r2, #1
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 800580a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 800580e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8005812:	4630      	mov	r0, r6
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8005818:	83a1      	strh	r1, [r4, #28]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 800581a:	6222      	str	r2, [r4, #32]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 800581c:	62a2      	str	r2, [r4, #40]	@ 0x28
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 800581e:	64e2      	str	r2, [r4, #76]	@ 0x4c
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005820:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8005822:	f001 fd75 	bl	8007310 <HAL_ADC_Init>
 8005826:	b930      	cbnz	r0, 8005836 <BSP_ADC1_Initialization+0x66>
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8005828:	217f      	movs	r1, #127	@ 0x7f
 800582a:	4630      	mov	r0, r6
 800582c:	f001 ffa8 	bl	8007780 <HAL_ADCEx_Calibration_Start>
 8005830:	b908      	cbnz	r0, 8005836 <BSP_ADC1_Initialization+0x66>
  ADC_UsedFor |= ADC_InitFor;
 8005832:	7823      	ldrb	r3, [r4, #0]
 8005834:	e7d1      	b.n	80057da <BSP_ADC1_Initialization+0xa>
      return BSP_ERROR_PERIPH_FAILURE;
 8005836:	f06f 0003 	mvn.w	r0, #3
}
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	20002878 	.word	0x20002878
 8005840:	50040000 	.word	0x50040000

08005844 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8005844:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <HAL_ADC_MspInit+0x2c>)
 8005846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005848:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800584c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800584e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{ 
 8005850:	b082      	sub	sp, #8
  __HAL_RCC_ADC_CLK_ENABLE();
 8005852:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005856:	9201      	str	r2, [sp, #4]
 8005858:	9a01      	ldr	r2, [sp, #4]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 800585a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800585e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005862:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800586a:	b002      	add	sp, #8
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000
 8005874:	00000000 	.word	0x00000000

08005878 <BSP_PB_PWR_Init>:
*/
void BSP_PB_PWR_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005878:	4b13      	ldr	r3, [pc, #76]	@ (80058c8 <BSP_PB_PWR_Init+0x50>)
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800587a:	4814      	ldr	r0, [pc, #80]	@ (80058cc <BSP_PB_PWR_Init+0x54>)
  POWER_BUTTON_GPIO_CLK_ENABLE();
 800587c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 800587e:	b500      	push	{lr}
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005880:	f042 0208 	orr.w	r2, r2, #8
 8005884:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 8005888:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 800588a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80058c0 <BSP_PB_PWR_Init+0x48>
  POWER_BUTTON_GPIO_CLK_ENABLE();
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8005894:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 8005896:	2202      	movs	r2, #2
 8005898:	2302      	movs	r3, #2
 800589a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800589e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80058a2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80058a4:	f002 faa8 	bl	8007df8 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 80058a8:	2200      	movs	r2, #0
 80058aa:	210f      	movs	r1, #15
 80058ac:	2028      	movs	r0, #40	@ 0x28
 80058ae:	f002 fa33 	bl	8007d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 80058b2:	2028      	movs	r0, #40	@ 0x28
 80058b4:	f002 fa6c 	bl	8007d90 <HAL_NVIC_EnableIRQ>
  
}
 80058b8:	b009      	add	sp, #36	@ 0x24
 80058ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80058be:	bf00      	nop
 80058c0:	00000400 	.word	0x00000400
 80058c4:	10110000 	.word	0x10110000
 80058c8:	40021000 	.word	0x40021000
 80058cc:	48000c00 	.word	0x48000c00

080058d0 <BSP_Enable_DCDC2>:
*/
void BSP_Enable_DCDC2(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058d0:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <BSP_Enable_DCDC2+0x44>)
{
 80058d2:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058d6:	4c10      	ldr	r4, [pc, #64]	@ (8005918 <BSP_Enable_DCDC2+0x48>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058d8:	f042 0210 	orr.w	r2, r2, #16
 80058dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80058de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 80058e0:	b088      	sub	sp, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80058e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058ec:	2301      	movs	r3, #1
 80058ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058f2:	a902      	add	r1, sp, #8
 80058f4:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80058f6:	2200      	movs	r2, #0
 80058f8:	2302      	movs	r3, #2
 80058fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058fe:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005900:	f002 fa7a 	bl	8007df8 <HAL_GPIO_Init>
  
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8005904:	2201      	movs	r2, #1
 8005906:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800590a:	4620      	mov	r0, r4
 800590c:	f002 fc4c 	bl	80081a8 <HAL_GPIO_WritePin>
}
 8005910:	b008      	add	sp, #32
 8005912:	bd10      	pop	{r4, pc}
 8005914:	40021000 	.word	0x40021000
 8005918:	48001000 	.word	0x48001000

0800591c <BSP_PB_Init>:
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800591c:	4a17      	ldr	r2, [pc, #92]	@ (800597c <BSP_PB_Init+0x60>)
{
 800591e:	b510      	push	{r4, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005920:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8005922:	f040 0010 	orr.w	r0, r0, #16
 8005926:	64d0      	str	r0, [r2, #76]	@ 0x4c
 8005928:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
{
 800592a:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800592c:	f002 0210 	and.w	r2, r2, #16
 8005930:	9201      	str	r2, [sp, #4]
 8005932:	9a01      	ldr	r2, [sp, #4]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005934:	b969      	cbnz	r1, 8005952 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005936:	460b      	mov	r3, r1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005938:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800593a:	4811      	ldr	r0, [pc, #68]	@ (8005980 <BSP_PB_Init+0x64>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800593c:	2401      	movs	r4, #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800593e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005940:	e9cd 4302 	strd	r4, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005944:	e9cd 2204 	strd	r2, r2, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005948:	f002 fa56 	bl	8007df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;  
}
 800594c:	2000      	movs	r0, #0
 800594e:	b008      	add	sp, #32
 8005950:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005952:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <BSP_PB_Init+0x68>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005954:	480a      	ldr	r0, [pc, #40]	@ (8005980 <BSP_PB_Init+0x64>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005956:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005958:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800595a:	2201      	movs	r2, #1
 800595c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005960:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005962:	f002 fa49 	bl	8007df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005966:	4622      	mov	r2, r4
 8005968:	210f      	movs	r1, #15
 800596a:	2006      	movs	r0, #6
 800596c:	f002 f9d4 	bl	8007d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005970:	2006      	movs	r0, #6
 8005972:	f002 fa0d 	bl	8007d90 <HAL_NVIC_EnableIRQ>
}
 8005976:	2000      	movs	r0, #0
 8005978:	b008      	add	sp, #32
 800597a:	bd10      	pop	{r4, pc}
 800597c:	40021000 	.word	0x40021000
 8005980:	48001000 	.word	0x48001000
 8005984:	10210000 	.word	0x10210000

08005988 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005988:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800598a:	4b14      	ldr	r3, [pc, #80]	@ (80059dc <BSP_LED_Init+0x54>)
{
 800598c:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800598e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005990:	b9d0      	cbnz	r0, 80059c8 <BSP_LED_Init+0x40>
 8005992:	f042 0210 	orr.w	r2, r2, #16
 8005996:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80059a2:	4b0f      	ldr	r3, [pc, #60]	@ (80059e0 <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80059a4:	eb03 0280 	add.w	r2, r3, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80059a8:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80059ac:	6850      	ldr	r0, [r2, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ae:	2201      	movs	r2, #1
 80059b0:	e9cd 1203 	strd	r1, r2, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b4:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80059b6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80059b8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80059ba:	e9cd 4305 	strd	r4, r3, [sp, #20]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80059be:	f002 fa1b 	bl	8007df8 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
}
 80059c2:	4620      	mov	r0, r4
 80059c4:	b008      	add	sp, #32
 80059c6:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 80059c8:	f042 0208 	orr.w	r2, r2, #8
 80059cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80059ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	9302      	str	r3, [sp, #8]
 80059d6:	9b02      	ldr	r3, [sp, #8]
 80059d8:	e7e3      	b.n	80059a2 <BSP_LED_Init+0x1a>
 80059da:	bf00      	nop
 80059dc:	40021000 	.word	0x40021000
 80059e0:	080153fc 	.word	0x080153fc

080059e4 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80059e4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80059e6:	4b05      	ldr	r3, [pc, #20]	@ (80059fc <BSP_LED_On+0x18>)
 80059e8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80059ec:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80059f0:	6850      	ldr	r0, [r2, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f002 fbd8 	bl	80081a8 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 80059f8:	2000      	movs	r0, #0
 80059fa:	bd08      	pop	{r3, pc}
 80059fc:	080153fc 	.word	0x080153fc

08005a00 <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8005a00:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005a02:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <BSP_LED_Off+0x18>)
 8005a04:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005a08:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8005a0c:	6850      	ldr	r0, [r2, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f002 fbca 	bl	80081a8 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 8005a14:	2000      	movs	r0, #0
 8005a16:	bd08      	pop	{r3, pc}
 8005a18:	080153fc 	.word	0x080153fc

08005a1c <Sensor_IO_SPI_CS_Init_All>:
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set all the pins before init to avoid glitch */
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ad8 <Sensor_IO_SPI_CS_Init_All+0xbc>)
{
 8005a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005a20:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();

  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005a22:	4d2e      	ldr	r5, [pc, #184]	@ (8005adc <Sensor_IO_SPI_CS_Init_All+0xc0>)
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 8005a24:	4c2e      	ldr	r4, [pc, #184]	@ (8005ae0 <Sensor_IO_SPI_CS_Init_All+0xc4>)
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005a26:	f041 0108 	orr.w	r1, r1, #8
 8005a2a:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8005a2c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
{
 8005a2e:	b08b      	sub	sp, #44	@ 0x2c
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8005a30:	f000 0008 	and.w	r0, r0, #8
 8005a34:	9001      	str	r0, [sp, #4]
 8005a36:	9801      	ldr	r0, [sp, #4]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8005a38:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005a3a:	f040 0020 	orr.w	r0, r0, #32
 8005a3e:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8005a40:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005a42:	f000 0020 	and.w	r0, r0, #32
 8005a46:	9002      	str	r0, [sp, #8]
 8005a48:	9802      	ldr	r0, [sp, #8]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8005a4a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005a4c:	f040 0020 	orr.w	r0, r0, #32
 8005a50:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8005a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8005a62:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005a64:	f002 fba0 	bl	80081a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 8005a68:	4620      	mov	r0, r4
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	f002 fb9b 	bl	80081a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN,GPIO_PIN_SET);
 8005a72:	4620      	mov	r0, r4
 8005a74:	2201      	movs	r2, #1
 8005a76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a7a:	f002 fb95 	bl	80081a8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;

  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8005a7e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005a82:	2301      	movs	r3, #1
 8005a84:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8005a88:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8005a8a:	2303      	movs	r3, #3
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8005a8c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8005a8e:	2200      	movs	r2, #0
 8005a90:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8005a94:	f002 f9b0 	bl	8007df8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8005a98:	4628      	mov	r0, r5
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005aa0:	f002 fb82 	bl	80081a8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8005aa4:	2720      	movs	r7, #32
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8005aa6:	a904      	add	r1, sp, #16
 8005aa8:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8005aaa:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8005aac:	f002 f9a4 	bl	8007df8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN,GPIO_PIN_SET);
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f002 fb77 	bl	80081a8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8005aba:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8005abe:	a904      	add	r1, sp, #16
 8005ac0:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8005ac2:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8005ac4:	f002 f998 	bl	8007df8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN,GPIO_PIN_SET);
 8005ac8:	4620      	mov	r0, r4
 8005aca:	2201      	movs	r2, #1
 8005acc:	4631      	mov	r1, r6
 8005ace:	f002 fb6b 	bl	80081a8 <HAL_GPIO_WritePin>

  return 0;
}
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	b00b      	add	sp, #44	@ 0x2c
 8005ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	48000c00 	.word	0x48000c00
 8005ae0:	48001400 	.word	0x48001400

08005ae4 <BSP_BC_CmdSend>:
* @param stbc02_SwCmd The command to be sent
* @retval 0 in case of success
* @retval 1 in case of failure
*/
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4604      	mov	r4, r0
  uint32_t tk = STBC02_GetTick();
 8005ae8:	f001 fbfa 	bl	80072e0 <HAL_GetTick>
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005aec:	4d0d      	ldr	r5, [pc, #52]	@ (8005b24 <BSP_BC_CmdSend+0x40>)
  uint32_t tk = STBC02_GetTick();
 8005aee:	4606      	mov	r6, r0
  stbc02_SwState = start;
 8005af0:	2301      	movs	r3, #1
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005af2:	f105 0050 	add.w	r0, r5, #80	@ 0x50
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005af6:	f885 404c 	strb.w	r4, [r5, #76]	@ 0x4c
  stbc02_SwState = start;
 8005afa:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005afe:	f006 fecf 	bl	800c8a0 <HAL_TIM_Base_Start_IT>
  
  while(stbc02_SwState != idle)
 8005b02:	e004      	b.n	8005b0e <BSP_BC_CmdSend+0x2a>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8005b04:	f001 fbec 	bl	80072e0 <HAL_GetTick>
 8005b08:	1b80      	subs	r0, r0, r6
 8005b0a:	280a      	cmp	r0, #10
 8005b0c:	d808      	bhi.n	8005b20 <BSP_BC_CmdSend+0x3c>
  while(stbc02_SwState != idle)
 8005b0e:	f895 404d 	ldrb.w	r4, [r5, #77]	@ 0x4d
 8005b12:	2c00      	cmp	r4, #0
 8005b14:	d1f6      	bne.n	8005b04 <BSP_BC_CmdSend+0x20>
    {
      return 1;
    }
  }
  /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 8005b16:	4804      	ldr	r0, [pc, #16]	@ (8005b28 <BSP_BC_CmdSend+0x44>)
 8005b18:	f006 ff00 	bl	800c91c <HAL_TIM_Base_Stop_IT>
  
  return 0;
 8005b1c:	4620      	mov	r0, r4
}
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8005b20:	2001      	movs	r0, #1
}
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	20002978 	.word	0x20002978
 8005b28:	200029c8 	.word	0x200029c8

08005b2c <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8005b2c:	b510      	push	{r4, lr}
  /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005b2e:	2002      	movs	r0, #2
{
 8005b30:	b094      	sub	sp, #80	@ 0x50
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005b32:	f7ff fe4d 	bl	80057d0 <BSP_ADC1_Initialization>
* @retval 0 in case of success
* @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005b36:	2234      	movs	r2, #52	@ 0x34
 8005b38:	2100      	movs	r1, #0
 8005b3a:	a807      	add	r0, sp, #28
 8005b3c:	f00d fd11 	bl	8013562 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8005b40:	4824      	ldr	r0, [pc, #144]	@ (8005bd4 <BSP_BC_BatMS_Init+0xa8>)
 8005b42:	f001 fcbf 	bl	80074c4 <HAL_ADC_GetState>
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 8005b46:	05c4      	lsls	r4, r0, #23
 8005b48:	d436      	bmi.n	8005bb8 <BSP_BC_BatMS_Init+0x8c>
 8005b4a:	4c23      	ldr	r4, [pc, #140]	@ (8005bd8 <BSP_BC_BatMS_Init+0xac>)
  }
  
  
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8005b4c:	4923      	ldr	r1, [pc, #140]	@ (8005bdc <BSP_BC_BatMS_Init+0xb0>)
 8005b4e:	2208      	movs	r2, #8
 8005b50:	e9cd 1207 	strd	r1, r2, [sp, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8005b54:	2007      	movs	r0, #7
 8005b56:	227f      	movs	r2, #127	@ 0x7f
 8005b58:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8005b5c:	2204      	movs	r2, #4
  sConfigInjected.InjectedOffset = 0;
 8005b5e:	2300      	movs	r3, #0
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8005b60:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8005b62:	2201      	movs	r2, #1
 8005b64:	e9cd 320c 	strd	r3, r2, [sp, #48]	@ 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8005b68:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005b70:	4a1b      	ldr	r2, [pc, #108]	@ (8005be0 <BSP_BC_BatMS_Init+0xb4>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005b72:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  sConfigInjected.QueueInjectedContext = DISABLE;
 8005b76:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 8005b7a:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b7e:	9306      	str	r3, [sp, #24]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005b80:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005b82:	4818      	ldr	r0, [pc, #96]	@ (8005be4 <BSP_BC_BatMS_Init+0xb8>)
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005b84:	f043 0304 	orr.w	r3, r3, #4
 8005b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b8a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8005b92:	2210      	movs	r2, #16
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005b94:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8005b96:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8005b98:	230b      	movs	r3, #11
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005b9a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8005b9c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8005b9e:	f002 f92b 	bl	8007df8 <HAL_GPIO_Init>
  
  HAL_ADC_BC_MspInit();
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 8005ba2:	480c      	ldr	r0, [pc, #48]	@ (8005bd4 <BSP_BC_BatMS_Init+0xa8>)
 8005ba4:	a907      	add	r1, sp, #28
 8005ba6:	f001 fe37 	bl	8007818 <HAL_ADCEx_InjectedConfigChannel>
  
  if (ADC_stopped == 1U)
 8005baa:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d00a      	beq.n	8005bc8 <BSP_BC_BatMS_Init+0x9c>
}
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	b014      	add	sp, #80	@ 0x50
 8005bb6:	bd10      	pop	{r4, pc}
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8005bb8:	4806      	ldr	r0, [pc, #24]	@ (8005bd4 <BSP_BC_BatMS_Init+0xa8>)
    ADC_stopped=1;
 8005bba:	4c07      	ldr	r4, [pc, #28]	@ (8005bd8 <BSP_BC_BatMS_Init+0xac>)
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8005bbc:	f001 fdbc 	bl	8007738 <HAL_ADC_Stop>
    ADC_stopped=1;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f884 30b1 	strb.w	r3, [r4, #177]	@ 0xb1
 8005bc6:	e7c1      	b.n	8005b4c <BSP_BC_BatMS_Init+0x20>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8005bc8:	4802      	ldr	r0, [pc, #8]	@ (8005bd4 <BSP_BC_BatMS_Init+0xa8>)
 8005bca:	f001 fd3b 	bl	8007644 <HAL_ADC_Start>
}
 8005bce:	2000      	movs	r0, #0
 8005bd0:	b014      	add	sp, #80	@ 0x50
 8005bd2:	bd10      	pop	{r4, pc}
 8005bd4:	2000287c 	.word	0x2000287c
 8005bd8:	20002978 	.word	0x20002978
 8005bdc:	36902000 	.word	0x36902000
 8005be0:	40021000 	.word	0x40021000
 8005be4:	48000800 	.word	0x48000800

08005be8 <BC_CmdMng>:
{
 8005be8:	b510      	push	{r4, lr}
  TIMx_Pulse++;
 8005bea:	4c39      	ldr	r4, [pc, #228]	@ (8005cd0 <BC_CmdMng+0xe8>)
 8005bec:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
  switch (stbc02_SwState)
 8005bf0:	f894 204d 	ldrb.w	r2, [r4, #77]	@ 0x4d
  TIMx_Pulse++;
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	b29b      	uxth	r3, r3
  switch (stbc02_SwState)
 8005bf8:	3a01      	subs	r2, #1
  TIMx_Pulse++;
 8005bfa:	f8a4 30b2 	strh.w	r3, [r4, #178]	@ 0xb2
  switch (stbc02_SwState)
 8005bfe:	2a05      	cmp	r2, #5
 8005c00:	d814      	bhi.n	8005c2c <BC_CmdMng+0x44>
 8005c02:	e8df f002 	tbb	[pc, r2]
 8005c06:	0314      	.short	0x0314
 8005c08:	36250303 	.word	0x36250303
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005c0c:	2140      	movs	r1, #64	@ 0x40
 8005c0e:	4831      	ldr	r0, [pc, #196]	@ (8005cd4 <BC_CmdMng+0xec>)
 8005c10:	f002 fad0 	bl	80081b4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005c14:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005c18:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005c1c:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005c20:	3314      	adds	r3, #20
    stbc02_SwState = wait;
 8005c22:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005c24:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
    stbc02_SwState = wait;
 8005c28:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
}
 8005c2c:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005c2e:	2140      	movs	r1, #64	@ 0x40
 8005c30:	4828      	ldr	r0, [pc, #160]	@ (8005cd4 <BC_CmdMng+0xec>)
 8005c32:	f002 fabf 	bl	80081b4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005c36:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005c3a:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005c3e:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    stbc02_SwState = wait;
 8005c42:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005c44:	3346      	adds	r3, #70	@ 0x46
    stbc02_SwState = wait;
 8005c46:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005c4a:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
}
 8005c4e:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005c50:	2140      	movs	r1, #64	@ 0x40
 8005c52:	4820      	ldr	r0, [pc, #128]	@ (8005cd4 <BC_CmdMng+0xec>)
 8005c54:	f002 faae 	bl	80081b4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005c58:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    stbc02_sw_state_prv = stbc02_SwState;
 8005c5c:	f894 104d 	ldrb.w	r1, [r4, #77]	@ 0x4d
 8005c60:	f884 10b6 	strb.w	r1, [r4, #182]	@ 0xb6
    stbc02_SwState = wait;
 8005c64:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005c66:	3364      	adds	r3, #100	@ 0x64
    stbc02_SwState = wait;
 8005c68:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005c6c:	f8a4 30b4 	strh.w	r3, [r4, #180]	@ 0xb4
}
 8005c70:	bd10      	pop	{r4, pc}
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8005c72:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	@ 0xb4
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d2d8      	bcs.n	8005c2c <BC_CmdMng+0x44>
      if ( stbc02_sw_state_prv == stop_h )
 8005c7a:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d016      	beq.n	8005cb0 <BC_CmdMng+0xc8>
        if ( stbc02_sw_state_prv == pulse_h )
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d005      	beq.n	8005c92 <BC_CmdMng+0xaa>
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1U);
 8005c86:	3301      	adds	r3, #1
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        __NOP();
 8005c8e:	bf00      	nop
}
 8005c90:	bd10      	pop	{r4, pc}
          CmdPulse++;
 8005c92:	f894 30b7 	ldrb.w	r3, [r4, #183]	@ 0xb7
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005c96:	f894 204c 	ldrb.w	r2, [r4, #76]	@ 0x4c
          CmdPulse++;
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005c9e:	429a      	cmp	r2, r3
          CmdPulse++;
 8005ca0:	f884 30b7 	strb.w	r3, [r4, #183]	@ 0xb7
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005ca4:	d90f      	bls.n	8005cc6 <BC_CmdMng+0xde>
            stbc02_sw_state_prv = start;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 8005cac:	2302      	movs	r3, #2
 8005cae:	e7ec      	b.n	8005c8a <BC_CmdMng+0xa2>
        CmdPulse = 0;
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f884 20b7 	strb.w	r2, [r4, #183]	@ 0xb7
        stbc02_SwState = idle;
 8005cb6:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
}
 8005cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005cbe:	4805      	ldr	r0, [pc, #20]	@ (8005cd4 <BC_CmdMng+0xec>)
 8005cc0:	2140      	movs	r1, #64	@ 0x40
 8005cc2:	f002 ba71 	b.w	80081a8 <HAL_GPIO_WritePin>
            __NOP();
 8005cc6:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1U);
 8005cc8:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8005ccc:	e7db      	b.n	8005c86 <BC_CmdMng+0x9e>
 8005cce:	bf00      	nop
 8005cd0:	20002978 	.word	0x20002978
 8005cd4:	48001400 	.word	0x48001400

08005cd8 <BC_TIMx_Init>:
{
 8005cd8:	b530      	push	{r4, r5, lr}
 8005cda:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005ce2:	9303      	str	r3, [sp, #12]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005ce4:	f004 f8f2 	bl	8009ecc <HAL_RCC_GetPCLK1Freq>
 8005ce8:	4b23      	ldr	r3, [pc, #140]	@ (8005d78 <BC_TIMx_Init+0xa0>)
  float prescaler = 0.0f;
 8005cea:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005d7c <BC_TIMx_Init+0xa4>
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005cee:	689b      	ldr	r3, [r3, #8]
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005cf0:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8005d80 <BC_TIMx_Init+0xa8>
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005cf4:	055b      	lsls	r3, r3, #21
 8005cf6:	bf48      	it	mi
 8005cf8:	0040      	lslmi	r0, r0, #1
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005cfa:	ee07 0a90 	vmov	s15, r0
 8005cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
    prescaler++;
 8005d02:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005d06:	ee37 7a06 	vadd.f32	s14, s14, s12
    period = (((float)freq)/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    loop_counter = (uint32_t) period;
 8005d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d16:	ee17 3a90 	vmov	r3, s15
  } while (loop_counter > 65535U);
 8005d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1e:	d2f2      	bcs.n	8005d06 <BC_TIMx_Init+0x2e>
    STBC02_USED_TIM_CLK_ENABLE();
 8005d20:	4a15      	ldr	r2, [pc, #84]	@ (8005d78 <BC_TIMx_Init+0xa0>)
  hstbc02_UsedTim.Instance = STBC02_USED_TIM; 
 8005d22:	4c18      	ldr	r4, [pc, #96]	@ (8005d84 <BC_TIMx_Init+0xac>)
    STBC02_USED_TIM_CLK_ENABLE();
 8005d24:	6d91      	ldr	r1, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Period = (uint32_t)period;
 8005d26:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
    STBC02_USED_TIM_CLK_ENABLE();
 8005d2a:	f041 0120 	orr.w	r1, r1, #32
 8005d2e:	6591      	str	r1, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005d30:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    STBC02_USED_TIM_CLK_ENABLE();
 8005d34:	6d92      	ldr	r2, [r2, #88]	@ 0x58
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005d36:	ee17 3a10 	vmov	r3, s14
    STBC02_USED_TIM_CLK_ENABLE();
 8005d3a:	f002 0220 	and.w	r2, r2, #32
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP; 
 8005d3e:	2500      	movs	r5, #0
    STBC02_USED_TIM_CLK_ENABLE();
 8005d40:	9200      	str	r2, [sp, #0]
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005d42:	3b01      	subs	r3, #1
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005d44:	462a      	mov	r2, r5
 8005d46:	2103      	movs	r1, #3
  hstbc02_UsedTim.Init.Prescaler = ((uint32_t)prescaler-1U);
 8005d48:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005d4a:	2037      	movs	r0, #55	@ 0x37
    STBC02_USED_TIM_CLK_ENABLE();
 8005d4c:	9b00      	ldr	r3, [sp, #0]
  hstbc02_UsedTim.Instance = STBC02_USED_TIM; 
 8005d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d88 <BC_TIMx_Init+0xb0>)
 8005d50:	6523      	str	r3, [r4, #80]	@ 0x50
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP; 
 8005d52:	65a5      	str	r5, [r4, #88]	@ 0x58
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005d54:	f001 ffe0 	bl	8007d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8005d58:	2037      	movs	r0, #55	@ 0x37
 8005d5a:	f002 f819 	bl	8007d90 <HAL_NVIC_EnableIRQ>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 8005d5e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d62:	f006 fd0f 	bl	800c784 <HAL_TIM_Base_Init>
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005d66:	a901      	add	r1, sp, #4
 8005d68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d6c:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d6e:	9503      	str	r5, [sp, #12]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005d70:	f006 feac 	bl	800cacc <HAL_TIMEx_MasterConfigSynchronization>
}
 8005d74:	b005      	add	sp, #20
 8005d76:	bd30      	pop	{r4, r5, pc}
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	00000000 	.word	0x00000000
 8005d80:	36a7c5ac 	.word	0x36a7c5ac
 8005d84:	20002978 	.word	0x20002978
 8005d88:	40001400 	.word	0x40001400

08005d8c <BSP_BC_Init>:
{
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	b088      	sub	sp, #32
  BC_TIMx_Init();
 8005d90:	f7ff ffa2 	bl	8005cd8 <BC_TIMx_Init>
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005d94:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd0 <BSP_BC_Init+0x44>)
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005d96:	4c0f      	ldr	r4, [pc, #60]	@ (8005dd4 <BSP_BC_Init+0x48>)
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005d98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d9a:	f042 0220 	orr.w	r2, r2, #32
 8005d9e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 8005da8:	2240      	movs	r2, #64	@ 0x40
 8005daa:	2301      	movs	r3, #1
 8005dac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2302      	movs	r3, #2
 8005db4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005db8:	4620      	mov	r0, r4
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2140      	movs	r1, #64	@ 0x40
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005dbe:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005dc0:	f002 f9f2 	bl	80081a8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 8005dc4:	a902      	add	r1, sp, #8
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f002 f816 	bl	8007df8 <HAL_GPIO_Init>
}
 8005dcc:	b008      	add	sp, #32
 8005dce:	bd10      	pop	{r4, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	48001400 	.word	0x48001400

08005dd8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
  //HAL_EXTI_IRQHandler(&iis3dwb_exti);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005dd8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005ddc:	f002 b9f4 	b.w	80081c8 <HAL_GPIO_EXTI_IRQHandler>

08005de0 <TIM7_IRQHandler>:
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 8005de0:	4801      	ldr	r0, [pc, #4]	@ (8005de8 <TIM7_IRQHandler+0x8>)
 8005de2:	f006 bdbb 	b.w	800c95c <HAL_TIM_IRQHandler>
 8005de6:	bf00      	nop
 8005de8:	200029c8 	.word	0x200029c8

08005dec <TIM3_IRQHandler>:
* @param  None
* @retval None
*/
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimBCHandle);
 8005dec:	4801      	ldr	r0, [pc, #4]	@ (8005df4 <TIM3_IRQHandler+0x8>)
 8005dee:	f006 bdb5 	b.w	800c95c <HAL_TIM_IRQHandler>
 8005df2:	bf00      	nop
 8005df4:	20002978 	.word	0x20002978

08005df8 <BSP_I2C2_DeInit>:
static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
  UNUSED(i2cHandle);
  
  /* Peripheral clock disable */
  __HAL_RCC_I2C2_CLK_DISABLE();
 8005df8:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <BSP_I2C2_DeInit+0x28>)
  
  /**I2C2 GPIO Configuration    
  PF1     ------> I2C2_SCL
  PF0     ------> I2C2_SDA 
  */
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8005dfa:	480a      	ldr	r0, [pc, #40]	@ (8005e24 <BSP_I2C2_DeInit+0x2c>)
{
 8005dfc:	b508      	push	{r3, lr}
  __HAL_RCC_I2C2_CLK_DISABLE();
 8005dfe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005e00:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8005e04:	2103      	movs	r1, #3
  __HAL_RCC_I2C2_CLK_DISABLE();
 8005e06:	6593      	str	r3, [r2, #88]	@ 0x58
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0);
 8005e08:	f002 f91a 	bl	8008040 <HAL_GPIO_DeInit>
  if (HAL_I2C_DeInit(&hi2c2) == HAL_OK)
 8005e0c:	4806      	ldr	r0, [pc, #24]	@ (8005e28 <BSP_I2C2_DeInit+0x30>)
 8005e0e:	f002 faff 	bl	8008410 <HAL_I2C_DeInit>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8005e12:	2800      	cmp	r0, #0
}
 8005e14:	bf14      	ite	ne
 8005e16:	f06f 0007 	mvnne.w	r0, #7
 8005e1a:	2000      	moveq	r0, #0
 8005e1c:	bd08      	pop	{r3, pc}
 8005e1e:	bf00      	nop
 8005e20:	40021000 	.word	0x40021000
 8005e24:	48001400 	.word	0x48001400
 8005e28:	20002a7c 	.word	0x20002a7c

08005e2c <BSP_I2C2_WriteReg>:
{
 8005e2c:	b500      	push	{lr}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	4684      	mov	ip, r0
  if(HAL_I2C_Mem_Write(&hi2c2, (uint8_t)DevAddr,
 8005e32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e36:	e9cd 2300 	strd	r2, r3, [sp]
 8005e3a:	9002      	str	r0, [sp, #8]
 8005e3c:	460a      	mov	r2, r1
 8005e3e:	2301      	movs	r3, #1
 8005e40:	fa5f f18c 	uxtb.w	r1, ip
 8005e44:	4805      	ldr	r0, [pc, #20]	@ (8005e5c <BSP_I2C2_WriteReg+0x30>)
 8005e46:	f002 fafd 	bl	8008444 <HAL_I2C_Mem_Write>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8005e4a:	2800      	cmp	r0, #0
}
 8005e4c:	bf14      	ite	ne
 8005e4e:	f06f 0007 	mvnne.w	r0, #7
 8005e52:	2000      	moveq	r0, #0
 8005e54:	b005      	add	sp, #20
 8005e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e5a:	bf00      	nop
 8005e5c:	20002a7c 	.word	0x20002a7c

08005e60 <BSP_I2C2_ReadReg>:
{
 8005e60:	b500      	push	{lr}
 8005e62:	b085      	sub	sp, #20
 8005e64:	4684      	mov	ip, r0
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, (uint16_t)Reg,
 8005e66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e6a:	e9cd 2300 	strd	r2, r3, [sp]
 8005e6e:	9002      	str	r0, [sp, #8]
 8005e70:	460a      	mov	r2, r1
 8005e72:	2301      	movs	r3, #1
 8005e74:	4661      	mov	r1, ip
 8005e76:	4805      	ldr	r0, [pc, #20]	@ (8005e8c <BSP_I2C2_ReadReg+0x2c>)
 8005e78:	f002 fc0c 	bl	8008694 <HAL_I2C_Mem_Read>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8005e7c:	2800      	cmp	r0, #0
}
 8005e7e:	bf14      	ite	ne
 8005e80:	f06f 0007 	mvnne.w	r0, #7
 8005e84:	2000      	moveq	r0, #0
 8005e86:	b005      	add	sp, #20
 8005e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e8c:	20002a7c 	.word	0x20002a7c

08005e90 <BSP_SPI3_DeInit>:
  __HAL_RCC_SPI3_CLK_DISABLE();
 8005e90:	4a09      	ldr	r2, [pc, #36]	@ (8005eb8 <BSP_SPI3_DeInit+0x28>)
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 8005e92:	480a      	ldr	r0, [pc, #40]	@ (8005ebc <BSP_SPI3_DeInit+0x2c>)
{
 8005e94:	b508      	push	{r3, lr}
  __HAL_RCC_SPI3_CLK_DISABLE();
 8005e96:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005e98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 8005e9c:	2128      	movs	r1, #40	@ 0x28
  __HAL_RCC_SPI3_CLK_DISABLE();
 8005e9e:	6593      	str	r3, [r2, #88]	@ 0x58
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_5);
 8005ea0:	f002 f8ce 	bl	8008040 <HAL_GPIO_DeInit>
  if (HAL_SPI_DeInit(&hbusspi3) == HAL_OK) 
 8005ea4:	4806      	ldr	r0, [pc, #24]	@ (8005ec0 <BSP_SPI3_DeInit+0x30>)
 8005ea6:	f006 f823 	bl	800bef0 <HAL_SPI_DeInit>
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8005eaa:	2800      	cmp	r0, #0
}
 8005eac:	bf14      	ite	ne
 8005eae:	f06f 0007 	mvnne.w	r0, #7
 8005eb2:	2000      	moveq	r0, #0
 8005eb4:	bd08      	pop	{r3, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	48000400 	.word	0x48000400
 8005ec0:	20002c28 	.word	0x20002c28

08005ec4 <BSP_SPI3_Send>:
{
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005ec8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8005ecc:	4601      	mov	r1, r0
  if(HAL_SPI_Transmit(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005ece:	4622      	mov	r2, r4
 8005ed0:	4804      	ldr	r0, [pc, #16]	@ (8005ee4 <BSP_SPI3_Send+0x20>)
 8005ed2:	f006 f823 	bl	800bf1c <HAL_SPI_Transmit>
      ret = (int32_t)len;
 8005ed6:	2800      	cmp	r0, #0
}
 8005ed8:	bf0c      	ite	eq
 8005eda:	4620      	moveq	r0, r4
 8005edc:	f06f 0005 	mvnne.w	r0, #5
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20002c28 	.word	0x20002c28

08005ee8 <BSP_SPI3_Recv>:
{
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	460c      	mov	r4, r1
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8005ef0:	4601      	mov	r1, r0
  if(HAL_SPI_Receive(&hbusspi3, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4804      	ldr	r0, [pc, #16]	@ (8005f08 <BSP_SPI3_Recv+0x20>)
 8005ef6:	f006 fab7 	bl	800c468 <HAL_SPI_Receive>
      ret = (int32_t)len;
 8005efa:	2800      	cmp	r0, #0
}
 8005efc:	bf0c      	ite	eq
 8005efe:	4620      	moveq	r0, r4
 8005f00:	f06f 0005 	mvnne.w	r0, #5
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	bf00      	nop
 8005f08:	20002c28 	.word	0x20002c28

08005f0c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005f0c:	f001 b9e8 	b.w	80072e0 <HAL_GetTick>

08005f10 <MX_SPI3_Init>:
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005f10:	4913      	ldr	r1, [pc, #76]	@ (8005f60 <MX_SPI3_Init+0x50>)
 8005f12:	f44f 7282 	mov.w	r2, #260	@ 0x104
{
 8005f16:	b510      	push	{r4, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e9c0 1200 	strd	r1, r2, [r0]
 8005f1e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8005f22:	2202      	movs	r2, #2
 8005f24:	e9c0 3102 	strd	r3, r1, [r0, #8]
 8005f28:	6102      	str	r2, [r0, #16]
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f30:	e9c0 1205 	strd	r1, r2, [r0, #20]
 8005f34:	2207      	movs	r2, #7
{
 8005f36:	4604      	mov	r4, r0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005f38:	2118      	movs	r1, #24
 8005f3a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005f3c:	2208      	movs	r2, #8
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005f3e:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005f42:	e9c0 320c 	strd	r3, r2, [r0, #48]	@ 0x30
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005f46:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005f4a:	f005 ff53 	bl	800bdf4 <HAL_SPI_Init>
  __HAL_SPI_ENABLE(hspi);
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	6813      	ldr	r3, [r2, #0]
}
 8005f52:	3800      	subs	r0, #0
  __HAL_SPI_ENABLE(hspi);
 8005f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
}
 8005f58:	bf18      	it	ne
 8005f5a:	2001      	movne	r0, #1
  __HAL_SPI_ENABLE(hspi);
 8005f5c:	6013      	str	r3, [r2, #0]
}
 8005f5e:	bd10      	pop	{r4, pc}
 8005f60:	40003c00 	.word	0x40003c00

08005f64 <BSP_SPI3_Init>:
{
 8005f64:	b510      	push	{r4, lr}
  hbusspi3.Instance  = SPI3;
 8005f66:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd4 <BSP_SPI3_Init+0x70>)
 8005f68:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd8 <BSP_SPI3_Init+0x74>)
 8005f6a:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 8005f6e:	f503 74fc 	add.w	r4, r3, #504	@ 0x1f8
{
 8005f72:	b088      	sub	sp, #32
  if (HAL_SPI_GetState(&hbusspi3) == HAL_SPI_STATE_RESET) 
 8005f74:	4620      	mov	r0, r4
 8005f76:	f006 fbff 	bl	800c778 <HAL_SPI_GetState>
 8005f7a:	b110      	cbz	r0, 8005f82 <BSP_SPI3_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8005f7c:	2000      	movs	r0, #0
}
 8005f7e:	b008      	add	sp, #32
 8005f80:	bd10      	pop	{r4, pc}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8005f82:	4b16      	ldr	r3, [pc, #88]	@ (8005fdc <BSP_SPI3_Init+0x78>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f84:	4816      	ldr	r0, [pc, #88]	@ (8005fe0 <BSP_SPI3_Init+0x7c>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8005f86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f90:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8005f94:	9200      	str	r2, [sp, #0]
 8005f96:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f9a:	f042 0202 	orr.w	r2, r2, #2
 8005f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005fa8:	2238      	movs	r2, #56	@ 0x38
 8005faa:	2302      	movs	r3, #2
 8005fac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fb8:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005fba:	2306      	movs	r3, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fbc:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005fbe:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fc0:	f001 ff1a 	bl	8007df8 <HAL_GPIO_Init>
    if (MX_SPI3_Init(&hbusspi3) != HAL_OK)
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f7ff ffa3 	bl	8005f10 <MX_SPI3_Init>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d0d6      	beq.n	8005f7c <BSP_SPI3_Init+0x18>
      ret = BSP_ERROR_BUS_FAILURE;
 8005fce:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005fd2:	e7d4      	b.n	8005f7e <BSP_SPI3_Init+0x1a>
 8005fd4:	20002a30 	.word	0x20002a30
 8005fd8:	40003c00 	.word	0x40003c00
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	48000400 	.word	0x48000400

08005fe4 <MX_I2C2_Init>:
  hi2c->Init.Timing = 0x00B03FDB;
 8005fe4:	4a11      	ldr	r2, [pc, #68]	@ (800602c <MX_I2C2_Init+0x48>)
 8005fe6:	4b12      	ldr	r3, [pc, #72]	@ (8006030 <MX_I2C2_Init+0x4c>)
{
 8005fe8:	b570      	push	{r4, r5, r6, lr}
  hi2c->Init.Timing = 0x00B03FDB;
 8005fea:	2600      	movs	r6, #0
 8005fec:	e9c0 2300 	strd	r2, r3, [r0]
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e9c0 6302 	strd	r6, r3, [r0, #8]
 8005ff6:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8005ffa:	e9c0 6606 	strd	r6, r6, [r0, #24]
 8005ffe:	6206      	str	r6, [r0, #32]
{
 8006000:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8006002:	f002 f9af 	bl	8008364 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006006:	4631      	mov	r1, r6
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8006008:	4605      	mov	r5, r0
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800600a:	4620      	mov	r0, r4
 800600c:	f002 fc72 	bl	80088f4 <HAL_I2CEx_ConfigAnalogFilter>
 8006010:	4305      	orrs	r5, r0
 8006012:	b2ed      	uxtb	r5, r5
 8006014:	1bad      	subs	r5, r5, r6
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8006016:	4631      	mov	r1, r6
 8006018:	4620      	mov	r0, r4
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800601a:	bf18      	it	ne
 800601c:	2501      	movne	r5, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800601e:	f002 fc93 	bl	8008948 <HAL_I2CEx_ConfigDigitalFilter>
    ret = HAL_ERROR;
 8006022:	42b0      	cmp	r0, r6
}
 8006024:	bf0c      	ite	eq
 8006026:	4628      	moveq	r0, r5
 8006028:	2001      	movne	r0, #1
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	40005800 	.word	0x40005800
 8006030:	00b03fdb 	.word	0x00b03fdb

08006034 <BSP_I2C2_Init>:
{
 8006034:	b570      	push	{r4, r5, r6, lr}
  hi2c2.Instance  = I2C2;
 8006036:	4d2c      	ldr	r5, [pc, #176]	@ (80060e8 <BSP_I2C2_Init+0xb4>)
 8006038:	4b2c      	ldr	r3, [pc, #176]	@ (80060ec <BSP_I2C2_Init+0xb8>)
 800603a:	f845 3f4c 	str.w	r3, [r5, #76]!
{
 800603e:	b0ae      	sub	sp, #184	@ 0xb8
  if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8006040:	4628      	mov	r0, r5
 8006042:	f002 fc53 	bl	80088ec <HAL_I2C_GetState>
 8006046:	b110      	cbz	r0, 800604e <BSP_I2C2_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006048:	2000      	movs	r0, #0
}
 800604a:	b02e      	add	sp, #184	@ 0xb8
 800604c:	bd70      	pop	{r4, r5, r6, pc}
  __GPIOF_CLK_ENABLE();
 800604e:	4e28      	ldr	r6, [pc, #160]	@ (80060f0 <BSP_I2C2_Init+0xbc>)
 8006050:	4604      	mov	r4, r0
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006052:	2380      	movs	r3, #128	@ 0x80
  (void)HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8006054:	a807      	add	r0, sp, #28
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006056:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006058:	941d      	str	r4, [sp, #116]	@ 0x74
  (void)HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800605a:	f004 f90d 	bl	800a278 <HAL_RCCEx_PeriphCLKConfig>
  __GPIOF_CLK_ENABLE();
 800605e:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006060:	4824      	ldr	r0, [pc, #144]	@ (80060f4 <BSP_I2C2_Init+0xc0>)
  __GPIOF_CLK_ENABLE();
 8006062:	f043 0320 	orr.w	r3, r3, #32
 8006066:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8006068:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8006070:	2203      	movs	r2, #3
 8006072:	2312      	movs	r3, #18
 8006074:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006078:	2201      	movs	r2, #1
 800607a:	2302      	movs	r3, #2
 800607c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006080:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006082:	2304      	movs	r3, #4
 8006084:	9306      	str	r3, [sp, #24]
  __GPIOF_CLK_ENABLE();
 8006086:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006088:	f001 feb6 	bl	8007df8 <HAL_GPIO_Init>
  __HAL_RCC_I2C2_CLK_ENABLE();  
 800608c:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 800608e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006092:	65b3      	str	r3, [r6, #88]	@ 0x58
 8006094:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8006096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	9b01      	ldr	r3, [sp, #4]
  __I2C2_FORCE_RESET();
 800609e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80060a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060a4:	63b3      	str	r3, [r6, #56]	@ 0x38
  __I2C2_RELEASE_RESET();
 80060a6:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 80060a8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80060ac:	63b3      	str	r3, [r6, #56]	@ 0x38
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80060ae:	4622      	mov	r2, r4
 80060b0:	4621      	mov	r1, r4
 80060b2:	2021      	movs	r0, #33	@ 0x21
 80060b4:	f001 fe30 	bl	8007d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80060b8:	2021      	movs	r0, #33	@ 0x21
 80060ba:	f001 fe69 	bl	8007d90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80060be:	4621      	mov	r1, r4
 80060c0:	4622      	mov	r2, r4
 80060c2:	2022      	movs	r0, #34	@ 0x22
 80060c4:	f001 fe28 	bl	8007d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80060c8:	2022      	movs	r0, #34	@ 0x22
 80060ca:	f001 fe61 	bl	8007d90 <HAL_NVIC_EnableIRQ>
    if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 80060ce:	4628      	mov	r0, r5
 80060d0:	f7ff ff88 	bl	8005fe4 <MX_I2C2_Init>
 80060d4:	4601      	mov	r1, r0
 80060d6:	b920      	cbnz	r0, 80060e2 <BSP_I2C2_Init+0xae>
    else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 80060d8:	4628      	mov	r0, r5
 80060da:	f002 fc0b 	bl	80088f4 <HAL_I2CEx_ConfigAnalogFilter>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d0b2      	beq.n	8006048 <BSP_I2C2_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 80060e2:	f06f 0007 	mvn.w	r0, #7
 80060e6:	e7b0      	b.n	800604a <BSP_I2C2_Init+0x16>
 80060e8:	20002a30 	.word	0x20002a30
 80060ec:	40005800 	.word	0x40005800
 80060f0:	40021000 	.word	0x40021000
 80060f4:	48001400 	.word	0x48001400

080060f8 <BSP_HTS221_WriteReg>:
}

#if (USE_ENV_SENSOR_HTS221_0 == 1)

int32_t BSP_HTS221_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80060f8:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  
  if (BSP_I2C2_WriteReg(Addr, dataReg, pdata, len) != BSP_ERROR_NONE)
 80060fa:	f7ff fe97 	bl	8005e2c <BSP_I2C2_WriteReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80060fe:	2800      	cmp	r0, #0
  }
  
  
  return ret;
}
 8006100:	bf18      	it	ne
 8006102:	f06f 0007 	mvnne.w	r0, #7
 8006106:	bd08      	pop	{r3, pc}

08006108 <BSP_HTS221_ReadReg>:


int32_t BSP_HTS221_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006108:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  uint16_t dataReg = (uint16_t)Reg;
  
  dataReg |= 0x80U;
  
  if (BSP_I2C2_ReadReg(Addr, dataReg, pdata, len) !=BSP_ERROR_NONE)
 800610a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800610e:	f7ff fea7 	bl	8005e60 <BSP_I2C2_ReadReg>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006112:	2800      	cmp	r0, #0
  }
  
  
  return ret;
}
 8006114:	bf18      	it	ne
 8006116:	f06f 0007 	mvnne.w	r0, #7
 800611a:	bd08      	pop	{r3, pc}

0800611c <BSP_ENV_SENSOR_Init>:
{
 800611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch (Instance)
 8006120:	2801      	cmp	r0, #1
{
 8006122:	b08c      	sub	sp, #48	@ 0x30
 8006124:	4604      	mov	r4, r0
 8006126:	460d      	mov	r5, r1
  switch (Instance)
 8006128:	d009      	beq.n	800613e <BSP_ENV_SENSOR_Init+0x22>
 800612a:	2802      	cmp	r0, #2
 800612c:	f000 80dd 	beq.w	80062ea <BSP_ENV_SENSOR_Init+0x1ce>
 8006130:	2800      	cmp	r0, #0
 8006132:	d07b      	beq.n	800622c <BSP_ENV_SENSOR_Init+0x110>
 8006134:	f06f 0001 	mvn.w	r0, #1
}
 8006138:	b00c      	add	sp, #48	@ 0x30
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LPS22HH_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
  io_ctx.Init        = BSP_I2C2_Init;
 800613e:	4bbe      	ldr	r3, [pc, #760]	@ (8006438 <BSP_ENV_SENSOR_Init+0x31c>)
 8006140:	9305      	str	r3, [sp, #20]
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8006142:	2300      	movs	r3, #0
 8006144:	9307      	str	r3, [sp, #28]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006146:	4bbd      	ldr	r3, [pc, #756]	@ (800643c <BSP_ENV_SENSOR_Init+0x320>)
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8006148:	4fbd      	ldr	r7, [pc, #756]	@ (8006440 <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800614a:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 800614c:	4bbd      	ldr	r3, [pc, #756]	@ (8006444 <BSP_ENV_SENSOR_Init+0x328>)
 800614e:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8006150:	4bbd      	ldr	r3, [pc, #756]	@ (8006448 <BSP_ENV_SENSOR_Init+0x32c>)
 8006152:	9309      	str	r3, [sp, #36]	@ 0x24
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8006154:	ae05      	add	r6, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 8006156:	4bbd      	ldr	r3, [pc, #756]	@ (800644c <BSP_ENV_SENSOR_Init+0x330>)
 8006158:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800615a:	f107 0a2c 	add.w	sl, r7, #44	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800615e:	23bb      	movs	r3, #187	@ 0xbb
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8006160:	4631      	mov	r1, r6
 8006162:	4650      	mov	r0, sl
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8006164:	f88d 3020 	strb.w	r3, [sp, #32]
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8006168:	f7fe fe0c 	bl	8004d84 <LPS22HH_RegisterBusIO>
 800616c:	2800      	cmp	r0, #0
 800616e:	f040 81c6 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8006172:	f10d 0103 	add.w	r1, sp, #3
 8006176:	4650      	mov	r0, sl
 8006178:	f7fe fbd6 	bl	8004928 <LPS22HH_ReadID>
 800617c:	2800      	cmp	r0, #0
 800617e:	f040 81be 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HH_ID)
 8006182:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006186:	2bb3      	cmp	r3, #179	@ 0xb3
 8006188:	f040 81b9 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800618c:	a901      	add	r1, sp, #4
 800618e:	4650      	mov	r0, sl
 8006190:	f7fe fb56 	bl	8004840 <LPS22HH_GetCapabilities>
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
                                   uint32_t)cap.Humidity << 2);
 8006194:	f89d 0006 	ldrb.w	r0, [sp, #6]
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006198:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800619c:	f89d 2004 	ldrb.w	r2, [sp, #4]

    EnvCompObj[LPS22HH_0] = &lps22hh_obj_0;
 80061a0:	f8c7 a098 	str.w	sl, [r7, #152]	@ 0x98
                                   uint32_t)cap.Humidity << 2);
 80061a4:	0083      	lsls	r3, r0, #2
    EnvCtx[LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80061a6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80061b0:	f005 0804 	and.w	r8, r5, #4
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80061b4:	4ba6      	ldr	r3, [pc, #664]	@ (8006450 <BSP_ENV_SENSOR_Init+0x334>)
 80061b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80061ba:	f005 0902 	and.w	r9, r5, #2

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80061be:	f015 0501 	ands.w	r5, r5, #1
 80061c2:	f040 80fe 	bne.w	80063c2 <BSP_ENV_SENSOR_Init+0x2a6>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80061c6:	f1b9 0f00 	cmp.w	r9, #0
 80061ca:	f040 81a8 	bne.w	800651e <BSP_ENV_SENSOR_Init+0x402>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80061ce:	f1b8 0f00 	cmp.w	r8, #0
 80061d2:	f040 81b1 	bne.w	8006538 <BSP_ENV_SENSOR_Init+0x41c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
 80061d6:	489f      	ldr	r0, [pc, #636]	@ (8006454 <BSP_ENV_SENSOR_Init+0x338>)
 80061d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006450 <BSP_ENV_SENSOR_Init+0x334>)
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4631      	mov	r1, r6
 80061de:	4798      	blx	r3
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f040 81f0 	bne.w	80065c6 <BSP_ENV_SENSOR_Init+0x4aa>
      if (cap.Temperature == 1U)
 80061e6:	f89d 6014 	ldrb.w	r6, [sp, #20]
      if (cap.Humidity == 1U)
 80061ea:	f89d 3016 	ldrb.w	r3, [sp, #22]
      if (cap.Temperature == 1U)
 80061ee:	f1a6 0601 	sub.w	r6, r6, #1
      if (cap.Humidity == 1U)
 80061f2:	2b01      	cmp	r3, #1
      if (cap.Temperature == 1U)
 80061f4:	fab6 f686 	clz	r6, r6
      if (cap.Pressure == 1U)
 80061f8:	f89d 3015 	ldrb.w	r3, [sp, #21]
      if (cap.Temperature == 1U)
 80061fc:	ea4f 1656 	mov.w	r6, r6, lsr #5
        component_functions |= ENV_HUMIDITY;
 8006200:	bf08      	it	eq
 8006202:	f046 0604 	orreq.w	r6, r6, #4
      if (cap.Pressure == 1U)
 8006206:	2b01      	cmp	r3, #1
        component_functions |= ENV_PRESSURE;
 8006208:	bf08      	it	eq
 800620a:	f046 0602 	orreq.w	r6, r6, #2
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800620e:	2d00      	cmp	r5, #0
 8006210:	f040 8134 	bne.w	800647c <BSP_ENV_SENSOR_Init+0x360>
 8006214:	f1b9 0f00 	cmp.w	r9, #0
 8006218:	f040 8145 	bne.w	80064a6 <BSP_ENV_SENSOR_Init+0x38a>
 800621c:	f1b8 0f00 	cmp.w	r8, #0
 8006220:	f040 8156 	bne.w	80064d0 <BSP_ENV_SENSOR_Init+0x3b4>
  for (i = 0; i < ENV_FUNCTIONS_NBR; i++)
 8006224:	2000      	movs	r0, #0
}
 8006226:	b00c      	add	sp, #48	@ 0x30
 8006228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  io_ctx.Init        = BSP_I2C2_Init;
 800622c:	4b82      	ldr	r3, [pc, #520]	@ (8006438 <BSP_ENV_SENSOR_Init+0x31c>)
 800622e:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006230:	4b82      	ldr	r3, [pc, #520]	@ (800643c <BSP_ENV_SENSOR_Init+0x320>)
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006232:	4f83      	ldr	r7, [pc, #524]	@ (8006440 <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006234:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_HTS221_ReadReg;
 8006236:	4b88      	ldr	r3, [pc, #544]	@ (8006458 <BSP_ENV_SENSOR_Init+0x33c>)
 8006238:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800623a:	ae05      	add	r6, sp, #20
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
 800623c:	4b87      	ldr	r3, [pc, #540]	@ (800645c <BSP_ENV_SENSOR_Init+0x340>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800623e:	9007      	str	r0, [sp, #28]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8006240:	22bf      	movs	r2, #191	@ 0xbf
  io_ctx.WriteReg    = BSP_HTS221_WriteReg;
 8006242:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006244:	4631      	mov	r1, r6
  io_ctx.GetTick     = BSP_GetTick;
 8006246:	4b81      	ldr	r3, [pc, #516]	@ (800644c <BSP_ENV_SENSOR_Init+0x330>)
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8006248:	f88d 2020 	strb.w	r2, [sp, #32]
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800624c:	4638      	mov	r0, r7
  io_ctx.GetTick     = BSP_GetTick;
 800624e:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8006250:	f7fb fdce 	bl	8001df0 <HTS221_RegisterBusIO>
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 8152 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800625a:	f10d 0103 	add.w	r1, sp, #3
 800625e:	4638      	mov	r0, r7
 8006260:	f7fb fc72 	bl	8001b48 <HTS221_ReadID>
 8006264:	2800      	cmp	r0, #0
 8006266:	f040 814a 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  else if (id != HTS221_ID)
 800626a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800626e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006270:	f040 8145 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8006274:	a901      	add	r1, sp, #4
 8006276:	4638      	mov	r0, r7
 8006278:	f7fb fbbc 	bl	80019f4 <HTS221_GetCapabilities>
                                   uint32_t)cap.Humidity << 2);
 800627c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006280:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8006284:	f89d 2004 	ldrb.w	r2, [sp, #4]
    EnvCompObj[HTS221_0] = &hts221_obj_0;
 8006288:	f8c7 7094 	str.w	r7, [r7, #148]	@ 0x94
                                   uint32_t)cap.Humidity << 2);
 800628c:	008b      	lsls	r3, r1, #2
    EnvCtx[HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800628e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006298:	f005 0804 	and.w	r8, r5, #4
    EnvDrv[HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800629c:	4b70      	ldr	r3, [pc, #448]	@ (8006460 <BSP_ENV_SENSOR_Init+0x344>)
 800629e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80062a2:	f005 0902 	and.w	r9, r5, #2
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80062a6:	f015 0501 	ands.w	r5, r5, #1
 80062aa:	f000 80b4 	beq.w	8006416 <BSP_ENV_SENSOR_Init+0x2fa>
 80062ae:	2a01      	cmp	r2, #1
 80062b0:	f000 8148 	beq.w	8006544 <BSP_ENV_SENSOR_Init+0x428>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80062b4:	f1b8 0f00 	cmp.w	r8, #0
 80062b8:	f000 811d 	beq.w	80064f6 <BSP_ENV_SENSOR_Init+0x3da>
 80062bc:	2901      	cmp	r1, #1
 80062be:	f040 80b0 	bne.w	8006422 <BSP_ENV_SENSOR_Init+0x306>
 80062c2:	485f      	ldr	r0, [pc, #380]	@ (8006440 <BSP_ENV_SENSOR_Init+0x324>)
 80062c4:	4b66      	ldr	r3, [pc, #408]	@ (8006460 <BSP_ENV_SENSOR_Init+0x344>)
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80062c6:	4a67      	ldr	r2, [pc, #412]	@ (8006464 <BSP_ENV_SENSOR_Init+0x348>)
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 80062c8:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80062ca:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 80062ce:	4798      	blx	r3
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f040 8114 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80062d6:	f1b9 0f00 	cmp.w	r9, #0
 80062da:	f000 80a7 	beq.w	800642c <BSP_ENV_SENSOR_Init+0x310>
 80062de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 80a2 	bne.w	800642c <BSP_ENV_SENSOR_Init+0x310>
 80062e8:	e109      	b.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
  io_ctx.Init        = BSP_I2C2_Init;
 80062ea:	4b53      	ldr	r3, [pc, #332]	@ (8006438 <BSP_ENV_SENSOR_Init+0x31c>)
 80062ec:	9305      	str	r3, [sp, #20]
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 80062ee:	2300      	movs	r3, #0
 80062f0:	9307      	str	r3, [sp, #28]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80062f2:	4b52      	ldr	r3, [pc, #328]	@ (800643c <BSP_ENV_SENSOR_Init+0x320>)
  io_ctx.ReadReg     = BSP_I2C2_ReadReg; 
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 80062f4:	4f52      	ldr	r7, [pc, #328]	@ (8006440 <BSP_ENV_SENSOR_Init+0x324>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80062f6:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg; 
 80062f8:	4b52      	ldr	r3, [pc, #328]	@ (8006444 <BSP_ENV_SENSOR_Init+0x328>)
 80062fa:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 80062fc:	4b52      	ldr	r3, [pc, #328]	@ (8006448 <BSP_ENV_SENSOR_Init+0x32c>)
 80062fe:	9309      	str	r3, [sp, #36]	@ 0x24
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006300:	ae05      	add	r6, sp, #20
  io_ctx.GetTick     = BSP_GetTick;
 8006302:	4b52      	ldr	r3, [pc, #328]	@ (800644c <BSP_ENV_SENSOR_Init+0x330>)
 8006304:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006306:	f107 0a58 	add.w	sl, r7, #88	@ 0x58
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
 800630a:	2391      	movs	r3, #145	@ 0x91
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800630c:	4631      	mov	r1, r6
 800630e:	4650      	mov	r0, sl
  io_ctx.Address     = STTS751_0xxxx_ADD_7K5;
 8006310:	f88d 3020 	strb.w	r3, [sp, #32]
  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8006314:	f7ff f934 	bl	8005580 <STTS751_RegisterBusIO>
 8006318:	2800      	cmp	r0, #0
 800631a:	f040 80f0 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800631e:	f10d 0103 	add.w	r1, sp, #3
 8006322:	4650      	mov	r0, sl
 8006324:	f7fe ff18 	bl	8005158 <STTS751_ReadID>
 8006328:	2800      	cmp	r0, #0
 800632a:	f040 80e8 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != STTS751_ID_MAN)
 800632e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006332:	2b53      	cmp	r3, #83	@ 0x53
 8006334:	f040 80e3 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8006338:	a901      	add	r1, sp, #4
 800633a:	4650      	mov	r0, sl
 800633c:	f7fe fea4 	bl	8005088 <STTS751_GetCapabilities>

    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
                                            uint32_t)cap.Humidity << 2);
 8006340:	f89d 1006 	ldrb.w	r1, [sp, #6]
    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006344:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8006348:	f89d 2004 	ldrb.w	r2, [sp, #4]

    EnvCompObj[STTS751_0] = &stts751_obj_0;
 800634c:	f8c7 a09c 	str.w	sl, [r7, #156]	@ 0x9c
                                            uint32_t)cap.Humidity << 2);
 8006350:	008b      	lsls	r3, r1, #2
    EnvCtx[STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006352:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800635c:	f005 0804 	and.w	r8, r5, #4
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8006360:	4b41      	ldr	r3, [pc, #260]	@ (8006468 <BSP_ENV_SENSOR_Init+0x34c>)
 8006362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006366:	f005 0902 	and.w	r9, r5, #2

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800636a:	f015 0501 	ands.w	r5, r5, #1
 800636e:	d10c      	bne.n	800638a <BSP_ENV_SENSOR_Init+0x26e>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006370:	f1b8 0f00 	cmp.w	r8, #0
 8006374:	f040 80c9 	bne.w	800650a <BSP_ENV_SENSOR_Init+0x3ee>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006378:	f1b9 0f00 	cmp.w	r9, #0
 800637c:	d002      	beq.n	8006384 <BSP_ENV_SENSOR_Init+0x268>
 800637e:	2800      	cmp	r0, #0
 8006380:	f000 80bd 	beq.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
 8006384:	4839      	ldr	r0, [pc, #228]	@ (800646c <BSP_ENV_SENSOR_Init+0x350>)
 8006386:	4b38      	ldr	r3, [pc, #224]	@ (8006468 <BSP_ENV_SENSOR_Init+0x34c>)
 8006388:	e727      	b.n	80061da <BSP_ENV_SENSOR_Init+0xbe>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800638a:	2a01      	cmp	r2, #1
 800638c:	d1f0      	bne.n	8006370 <BSP_ENV_SENSOR_Init+0x254>
      EnvFuncDrv[STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800638e:	4a38      	ldr	r2, [pc, #224]	@ (8006470 <BSP_ENV_SENSOR_Init+0x354>)
      if (EnvDrv[STTS751_0]->Init(EnvCompObj[STTS751_0]) != STTS751_OK)
 8006390:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8006392:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
      if (EnvDrv[STTS751_0]->Init(EnvCompObj[STTS751_0]) != STTS751_OK)
 8006396:	4650      	mov	r0, sl
 8006398:	4798      	blx	r3
 800639a:	2800      	cmp	r0, #0
 800639c:	f040 80af 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80063a0:	f1b8 0f00 	cmp.w	r8, #0
 80063a4:	f040 8101 	bne.w	80065aa <BSP_ENV_SENSOR_Init+0x48e>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80063a8:	f1b9 0f00 	cmp.w	r9, #0
 80063ac:	d004      	beq.n	80063b8 <BSP_ENV_SENSOR_Init+0x29c>
 80063ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80a3 	beq.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80063b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063bc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80063c0:	e70b      	b.n	80061da <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80063c2:	2a01      	cmp	r2, #1
 80063c4:	f47f aeff 	bne.w	80061c6 <BSP_ENV_SENSOR_Init+0xaa>
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 80063c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006474 <BSP_ENV_SENSOR_Init+0x358>)
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 80063ca:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 80063cc:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 80063d0:	4650      	mov	r0, sl
 80063d2:	4798      	blx	r3
 80063d4:	2800      	cmp	r0, #0
 80063d6:	f000 80ca 	beq.w	800656e <BSP_ENV_SENSOR_Init+0x452>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80063da:	f1b9 0f00 	cmp.w	r9, #0
 80063de:	f000 808e 	beq.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
 80063e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	f040 8089 	bne.w	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 80063ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063f0:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80063f4:	4a20      	ldr	r2, [pc, #128]	@ (8006478 <BSP_ENV_SENSOR_Init+0x35c>)
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 80063f6:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80063f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
      if (EnvDrv[LPS22HH_0]->Init(EnvCompObj[LPS22HH_0]) != LPS22HH_OK)
 80063fc:	4798      	blx	r3
 80063fe:	2800      	cmp	r0, #0
 8006400:	d17d      	bne.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006402:	f1b8 0f00 	cmp.w	r8, #0
 8006406:	f000 8092 	beq.w	800652e <BSP_ENV_SENSOR_Init+0x412>
 800640a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 808d 	bne.w	800652e <BSP_ENV_SENSOR_Init+0x412>
 8006414:	e073      	b.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006416:	f1b8 0f00 	cmp.w	r8, #0
 800641a:	d06c      	beq.n	80064f6 <BSP_ENV_SENSOR_Init+0x3da>
 800641c:	2901      	cmp	r1, #1
 800641e:	f000 808f 	beq.w	8006540 <BSP_ENV_SENSOR_Init+0x424>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 8006422:	f1b9 0f00 	cmp.w	r9, #0
 8006426:	d06d      	beq.n	8006504 <BSP_ENV_SENSOR_Init+0x3e8>
 8006428:	2800      	cmp	r0, #0
 800642a:	d068      	beq.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800642c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006430:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8006434:	e6d1      	b.n	80061da <BSP_ENV_SENSOR_Init+0xbe>
 8006436:	bf00      	nop
 8006438:	08006035 	.word	0x08006035
 800643c:	08005df9 	.word	0x08005df9
 8006440:	20002d1c 	.word	0x20002d1c
 8006444:	08005e61 	.word	0x08005e61
 8006448:	08005e2d 	.word	0x08005e2d
 800644c:	08005f0d 	.word	0x08005f0d
 8006450:	200001ac 	.word	0x200001ac
 8006454:	20002d48 	.word	0x20002d48
 8006458:	08006109 	.word	0x08006109
 800645c:	080060f9 	.word	0x080060f9
 8006460:	20000080 	.word	0x20000080
 8006464:	2000006c 	.word	0x2000006c
 8006468:	200001d0 	.word	0x200001d0
 800646c:	20002d74 	.word	0x20002d74
 8006470:	200001bc 	.word	0x200001bc
 8006474:	20000184 	.word	0x20000184
 8006478:	20000198 	.word	0x20000198
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800647c:	07f1      	lsls	r1, r6, #31
 800647e:	f57f aec9 	bpl.w	8006214 <BSP_ENV_SENSOR_Init+0xf8>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8006482:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006486:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800648a:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 800648e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006492:	f8d2 0094 	ldr.w	r0, [r2, #148]	@ 0x94
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4798      	blx	r3
 800649a:	2800      	cmp	r0, #0
 800649c:	f43f aeba 	beq.w	8006214 <BSP_ENV_SENSOR_Init+0xf8>
        return BSP_ERROR_COMPONENT_FAILURE;
 80064a0:	f06f 0004 	mvn.w	r0, #4
 80064a4:	e648      	b.n	8006138 <BSP_ENV_SENSOR_Init+0x1c>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80064a6:	07b2      	lsls	r2, r6, #30
 80064a8:	f57f aeb8 	bpl.w	800621c <BSP_ENV_SENSOR_Init+0x100>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80064ac:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80064b0:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
 80064b4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80064b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80064bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4798      	blx	r3
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d1eb      	bne.n	80064a0 <BSP_ENV_SENSOR_Init+0x384>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80064c8:	f1b8 0f00 	cmp.w	r8, #0
 80064cc:	f43f aeaa 	beq.w	8006224 <BSP_ENV_SENSOR_Init+0x108>
 80064d0:	0773      	lsls	r3, r6, #29
 80064d2:	f57f aea7 	bpl.w	8006224 <BSP_ENV_SENSOR_Init+0x108>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80064d6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80064da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80064de:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80064e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064e6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4798      	blx	r3
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f43f ae98 	beq.w	8006224 <BSP_ENV_SENSOR_Init+0x108>
 80064f4:	e7d4      	b.n	80064a0 <BSP_ENV_SENSOR_Init+0x384>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80064f6:	f1b9 0f00 	cmp.w	r9, #0
 80064fa:	d003      	beq.n	8006504 <BSP_ENV_SENSOR_Init+0x3e8>
 80064fc:	b910      	cbnz	r0, 8006504 <BSP_ENV_SENSOR_Init+0x3e8>
        return BSP_ERROR_NO_INIT;
 80064fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006502:	e619      	b.n	8006138 <BSP_ENV_SENSOR_Init+0x1c>
  return ret;
 8006504:	4831      	ldr	r0, [pc, #196]	@ (80065cc <BSP_ENV_SENSOR_Init+0x4b0>)
 8006506:	4b32      	ldr	r3, [pc, #200]	@ (80065d0 <BSP_ENV_SENSOR_Init+0x4b4>)
 8006508:	e667      	b.n	80061da <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 800650a:	2900      	cmp	r1, #0
 800650c:	d0f7      	beq.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800650e:	f1b9 0f00 	cmp.w	r9, #0
 8006512:	f43f af37 	beq.w	8006384 <BSP_ENV_SENSOR_Init+0x268>
 8006516:	2800      	cmp	r0, #0
 8006518:	f47f af4e 	bne.w	80063b8 <BSP_ENV_SENSOR_Init+0x29c>
 800651c:	e7ef      	b.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800651e:	2901      	cmp	r1, #1
 8006520:	d023      	beq.n	800656a <BSP_ENV_SENSOR_Init+0x44e>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006522:	f1b8 0f00 	cmp.w	r8, #0
 8006526:	f43f ae56 	beq.w	80061d6 <BSP_ENV_SENSOR_Init+0xba>
 800652a:	2800      	cmp	r0, #0
 800652c:	d0e7      	beq.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800652e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006532:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8006536:	e650      	b.n	80061da <BSP_ENV_SENSOR_Init+0xbe>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006538:	2800      	cmp	r0, #0
 800653a:	f47f ae4c 	bne.w	80061d6 <BSP_ENV_SENSOR_Init+0xba>
 800653e:	e7de      	b.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006540:	4638      	mov	r0, r7
 8006542:	e6c0      	b.n	80062c6 <BSP_ENV_SENSOR_Init+0x1aa>
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8006544:	4a23      	ldr	r2, [pc, #140]	@ (80065d4 <BSP_ENV_SENSOR_Init+0x4b8>)
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8006546:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8006548:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 800654c:	4638      	mov	r0, r7
 800654e:	4798      	blx	r3
 8006550:	b1e0      	cbz	r0, 800658c <BSP_ENV_SENSOR_Init+0x470>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8006552:	f1b8 0f00 	cmp.w	r8, #0
 8006556:	d0d2      	beq.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
 8006558:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d1ce      	bne.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
      if (EnvDrv[HTS221_0]->Init(EnvCompObj[HTS221_0]) != HTS221_OK)
 8006560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006564:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8006568:	e6ad      	b.n	80062c6 <BSP_ENV_SENSOR_Init+0x1aa>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800656a:	4650      	mov	r0, sl
 800656c:	e742      	b.n	80063f4 <BSP_ENV_SENSOR_Init+0x2d8>
 800656e:	f1b9 0f00 	cmp.w	r9, #0
 8006572:	f43f af46 	beq.w	8006402 <BSP_ENV_SENSOR_Init+0x2e6>
 8006576:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800657a:	2b01      	cmp	r3, #1
 800657c:	f43f af36 	beq.w	80063ec <BSP_ENV_SENSOR_Init+0x2d0>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 8006580:	f1b8 0f00 	cmp.w	r8, #0
 8006584:	d0d3      	beq.n	800652e <BSP_ENV_SENSOR_Init+0x412>
 8006586:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800658a:	e7ce      	b.n	800652a <BSP_ENV_SENSOR_Init+0x40e>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800658c:	f1b8 0f00 	cmp.w	r8, #0
 8006590:	f43f aea1 	beq.w	80062d6 <BSP_ENV_SENSOR_Init+0x1ba>
 8006594:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d0e1      	beq.n	8006560 <BSP_ENV_SENSOR_Init+0x444>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 800659c:	f1b9 0f00 	cmp.w	r9, #0
 80065a0:	f43f af44 	beq.w	800642c <BSP_ENV_SENSOR_Init+0x310>
 80065a4:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80065a8:	e73e      	b.n	8006428 <BSP_ENV_SENSOR_Init+0x30c>
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 0U))
 80065aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0a5      	beq.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 0U))
 80065b2:	f1b9 0f00 	cmp.w	r9, #0
 80065b6:	f43f aeff 	beq.w	80063b8 <BSP_ENV_SENSOR_Init+0x29c>
 80065ba:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80065be:	2800      	cmp	r0, #0
 80065c0:	f47f aefa 	bne.w	80063b8 <BSP_ENV_SENSOR_Init+0x29c>
 80065c4:	e79b      	b.n	80064fe <BSP_ENV_SENSOR_Init+0x3e2>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80065c6:	f06f 0006 	mvn.w	r0, #6
 80065ca:	e5b5      	b.n	8006138 <BSP_ENV_SENSOR_Init+0x1c>
 80065cc:	20002d1c 	.word	0x20002d1c
 80065d0:	20000080 	.word	0x20000080
 80065d4:	20000058 	.word	0x20000058

080065d8 <BSP_ENV_SENSOR_SetOutputDataRate>:
  if (Instance >= ENV_INSTANCES_NBR)
 80065d8:	2802      	cmp	r0, #2
 80065da:	d81f      	bhi.n	800661c <BSP_ENV_SENSOR_SetOutputDataRate+0x44>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80065dc:	4a11      	ldr	r2, [pc, #68]	@ (8006624 <BSP_ENV_SENSOR_SetOutputDataRate+0x4c>)
 80065de:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
{
 80065e2:	b508      	push	{r3, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80065e4:	f8dc 3088 	ldr.w	r3, [ip, #136]	@ 0x88
 80065e8:	ea01 0e03 	and.w	lr, r1, r3
 80065ec:	4399      	bics	r1, r3
 80065ee:	d112      	bne.n	8006616 <BSP_ENV_SENSOR_SetOutputDataRate+0x3e>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80065f0:	490d      	ldr	r1, [pc, #52]	@ (8006628 <BSP_ENV_SENSOR_SetOutputDataRate+0x50>)
 80065f2:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 80065f6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80065fa:	440b      	add	r3, r1
 80065fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006600:	f8dc 0094 	ldr.w	r0, [ip, #148]	@ 0x94
 8006604:	f8d2 30ac 	ldr.w	r3, [r2, #172]	@ 0xac
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800660c:	2800      	cmp	r0, #0
 800660e:	bf18      	it	ne
 8006610:	f06f 0004 	mvnne.w	r0, #4
}
 8006614:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006616:	f06f 0001 	mvn.w	r0, #1
}
 800661a:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800661c:	f06f 0001 	mvn.w	r0, #1
}
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20002d1c 	.word	0x20002d1c
 8006628:	08015408 	.word	0x08015408

0800662c <BSP_IIS2DH_WriteReg>:

  return ret;
}

static int32_t BSP_IIS2DH_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800662c:	b530      	push	{r4, r5, lr}
 800662e:	461c      	mov	r4, r3
 8006630:	b083      	sub	sp, #12
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;
 8006632:	b2cb      	uxtb	r3, r1

  if (len > 1U)
 8006634:	2c01      	cmp	r4, #1
{
 8006636:	4615      	mov	r5, r2
  {
    dataReg |= 0x40U;
 8006638:	bf88      	it	hi
 800663a:	f043 0340 	orrhi.w	r3, r3, #64	@ 0x40
  }
  
  /* CS Enable */
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 800663e:	2200      	movs	r2, #0
 8006640:	4810      	ldr	r0, [pc, #64]	@ (8006684 <BSP_IIS2DH_WriteReg+0x58>)
  uint8_t dataReg = (uint8_t)Reg;
 8006642:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 8006646:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800664a:	f001 fdad 	bl	80081a8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 800664e:	2101      	movs	r1, #1
 8006650:	f10d 0007 	add.w	r0, sp, #7
 8006654:	f7ff fc36 	bl	8005ec4 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006658:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 800665a:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 800665c:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 800665e:	bf14      	ite	ne
 8006660:	f06f 0505 	mvnne.w	r5, #5
 8006664:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006666:	f7ff fc2d 	bl	8005ec4 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 800666a:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800666c:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 800666e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006672:	4804      	ldr	r0, [pc, #16]	@ (8006684 <BSP_IIS2DH_WriteReg+0x58>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006674:	bf18      	it	ne
 8006676:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 800667a:	f001 fd95 	bl	80081a8 <HAL_GPIO_WritePin>

  return ret;
}
 800667e:	4628      	mov	r0, r5
 8006680:	b003      	add	sp, #12
 8006682:	bd30      	pop	{r4, r5, pc}
 8006684:	48000c00 	.word	0x48000c00

08006688 <BSP_IIS3DWB_WriteReg>:

  return ret;
}

static int32_t BSP_IIS3DWB_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8006688:	b530      	push	{r4, r5, lr}
 800668a:	b083      	sub	sp, #12
 800668c:	468c      	mov	ip, r1
 800668e:	4615      	mov	r5, r2
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 8006690:	4812      	ldr	r0, [pc, #72]	@ (80066dc <BSP_IIS3DWB_WriteReg+0x54>)
  uint8_t dataReg = (uint8_t)Reg;
 8006692:	f88d c007 	strb.w	ip, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 8006696:	2200      	movs	r2, #0
 8006698:	2120      	movs	r1, #32
{
 800669a:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 800669c:	f001 fd84 	bl	80081a8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 80066a0:	2101      	movs	r1, #1
 80066a2:	f10d 0007 	add.w	r0, sp, #7
 80066a6:	f7ff fc0d 	bl	8005ec4 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 80066aa:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 80066ac:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 80066ae:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 80066b0:	bf14      	ite	ne
 80066b2:	f06f 0505 	mvnne.w	r5, #5
 80066b6:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int16_t)len)
 80066b8:	f7ff fc04 	bl	8005ec4 <BSP_SPI3_Send>
 80066bc:	b224      	sxth	r4, r4
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80066be:	42a0      	cmp	r0, r4
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 80066c0:	f04f 0201 	mov.w	r2, #1
 80066c4:	4805      	ldr	r0, [pc, #20]	@ (80066dc <BSP_IIS3DWB_WriteReg+0x54>)
 80066c6:	f04f 0120 	mov.w	r1, #32
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80066ca:	bf18      	it	ne
 80066cc:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 80066d0:	f001 fd6a 	bl	80081a8 <HAL_GPIO_WritePin>

  return ret;
}
 80066d4:	4628      	mov	r0, r5
 80066d6:	b003      	add	sp, #12
 80066d8:	bd30      	pop	{r4, r5, pc}
 80066da:	bf00      	nop
 80066dc:	48001400 	.word	0x48001400

080066e0 <BSP_ISM330DHCX_WriteReg>:

  return ret;
}

static int32_t BSP_ISM330DHCX_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80066e0:	b530      	push	{r4, r5, lr}
 80066e2:	b083      	sub	sp, #12
 80066e4:	468c      	mov	ip, r1
 80066e6:	4615      	mov	r5, r2
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80066e8:	4811      	ldr	r0, [pc, #68]	@ (8006730 <BSP_ISM330DHCX_WriteReg+0x50>)
  uint8_t dataReg = (uint8_t)Reg;
 80066ea:	f88d c007 	strb.w	ip, [sp, #7]
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80066ee:	2200      	movs	r2, #0
 80066f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
 80066f4:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80066f6:	f001 fd57 	bl	80081a8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 80066fa:	2101      	movs	r1, #1
 80066fc:	f10d 0007 	add.w	r0, sp, #7
 8006700:	f7ff fbe0 	bl	8005ec4 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006704:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 8006706:	2801      	cmp	r0, #1
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006708:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 800670a:	bf14      	ite	ne
 800670c:	f06f 0505 	mvnne.w	r5, #5
 8006710:	2500      	moveq	r5, #0
  if (BSP_SPI3_Send(pdata, len) != (int32_t)len)
 8006712:	f7ff fbd7 	bl	8005ec4 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006716:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006718:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800671a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800671e:	4804      	ldr	r0, [pc, #16]	@ (8006730 <BSP_ISM330DHCX_WriteReg+0x50>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006720:	bf18      	it	ne
 8006722:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006726:	f001 fd3f 	bl	80081a8 <HAL_GPIO_WritePin>

  return ret;
}
 800672a:	4628      	mov	r0, r5
 800672c:	b003      	add	sp, #12
 800672e:	bd30      	pop	{r4, r5, pc}
 8006730:	48001400 	.word	0x48001400

08006734 <BSP_IIS2DH_ReadReg>:
{
 8006734:	b530      	push	{r4, r5, lr}
  if (len > 1U)
 8006736:	2b01      	cmp	r3, #1
{
 8006738:	b083      	sub	sp, #12
  uint8_t dataReg = (uint8_t)Reg;
 800673a:	b2c9      	uxtb	r1, r1
{
 800673c:	461c      	mov	r4, r3
 800673e:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 8006740:	bf94      	ite	ls
 8006742:	f041 0380 	orrls.w	r3, r1, #128	@ 0x80
    dataReg |= 0x40U;
 8006746:	f041 03c0 	orrhi.w	r3, r1, #192	@ 0xc0
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 800674a:	2200      	movs	r2, #0
 800674c:	4810      	ldr	r0, [pc, #64]	@ (8006790 <BSP_IIS2DH_ReadReg+0x5c>)
  dataReg |= 0x80U;
 800674e:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_RESET);
 8006752:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006756:	f001 fd27 	bl	80081a8 <HAL_GPIO_WritePin>
  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 800675a:	2101      	movs	r1, #1
 800675c:	f10d 0007 	add.w	r0, sp, #7
 8006760:	f7ff fbb0 	bl	8005ec4 <BSP_SPI3_Send>
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006764:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 8006766:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006768:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 800676a:	bf14      	ite	ne
 800676c:	f06f 0505 	mvnne.w	r5, #5
 8006770:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006772:	f7ff fbb9 	bl	8005ee8 <BSP_SPI3_Recv>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006776:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006778:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 800677a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800677e:	4804      	ldr	r0, [pc, #16]	@ (8006790 <BSP_IIS2DH_ReadReg+0x5c>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006780:	bf18      	it	ne
 8006782:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006786:	f001 fd0f 	bl	80081a8 <HAL_GPIO_WritePin>
}
 800678a:	4628      	mov	r0, r5
 800678c:	b003      	add	sp, #12
 800678e:	bd30      	pop	{r4, r5, pc}
 8006790:	48000c00 	.word	0x48000c00

08006794 <BSP_IIS3DWB_ReadReg>:
{
 8006794:	b530      	push	{r4, r5, lr}
 8006796:	b083      	sub	sp, #12
  dataReg |= 0x80U;
 8006798:	f061 017f 	orn	r1, r1, #127	@ 0x7f
{
 800679c:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 800679e:	f88d 1007 	strb.w	r1, [sp, #7]
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80067a2:	2200      	movs	r2, #0
 80067a4:	4810      	ldr	r0, [pc, #64]	@ (80067e8 <BSP_IIS3DWB_ReadReg+0x54>)
 80067a6:	2120      	movs	r1, #32
{
 80067a8:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_RESET);
 80067aa:	f001 fcfd 	bl	80081a8 <HAL_GPIO_WritePin>
  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 80067ae:	2101      	movs	r1, #1
 80067b0:	f10d 0007 	add.w	r0, sp, #7
 80067b4:	f7ff fb86 	bl	8005ec4 <BSP_SPI3_Send>
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 80067b8:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 80067ba:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 80067bc:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 80067be:	bf14      	ite	ne
 80067c0:	f06f 0505 	mvnne.w	r5, #5
 80067c4:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int16_t)len)
 80067c6:	f7ff fb8f 	bl	8005ee8 <BSP_SPI3_Recv>
 80067ca:	b224      	sxth	r4, r4
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80067cc:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 80067ce:	f04f 0201 	mov.w	r2, #1
 80067d2:	4805      	ldr	r0, [pc, #20]	@ (80067e8 <BSP_IIS3DWB_ReadReg+0x54>)
 80067d4:	f04f 0120 	mov.w	r1, #32
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80067d8:	bf18      	it	ne
 80067da:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 80067de:	f001 fce3 	bl	80081a8 <HAL_GPIO_WritePin>
}
 80067e2:	4628      	mov	r0, r5
 80067e4:	b003      	add	sp, #12
 80067e6:	bd30      	pop	{r4, r5, pc}
 80067e8:	48001400 	.word	0x48001400

080067ec <BSP_ISM330DHCX_ReadReg>:

static int32_t BSP_ISM330DHCX_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80067ec:	b530      	push	{r4, r5, lr}
 80067ee:	b083      	sub	sp, #12
  UNUSED(Addr);
  int32_t ret = BSP_ERROR_NONE;
  uint8_t dataReg = (uint8_t)Reg;

  dataReg |= 0x80U;
 80067f0:	f061 017f 	orn	r1, r1, #127	@ 0x7f
{
 80067f4:	4615      	mov	r5, r2
  dataReg |= 0x80U;
 80067f6:	f88d 1007 	strb.w	r1, [sp, #7]

  /* CS Enable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 80067fa:	2200      	movs	r2, #0
 80067fc:	4810      	ldr	r0, [pc, #64]	@ (8006840 <BSP_ISM330DHCX_ReadReg+0x54>)
 80067fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
 8006802:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_RESET);
 8006804:	f001 fcd0 	bl	80081a8 <HAL_GPIO_WritePin>

  if (BSP_SPI3_Send(&dataReg, 1) != 1)
 8006808:	2101      	movs	r1, #1
 800680a:	f10d 0007 	add.w	r0, sp, #7
 800680e:	f7ff fb59 	bl	8005ec4 <BSP_SPI3_Send>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006812:	4621      	mov	r1, r4
  int32_t ret = BSP_ERROR_NONE;
 8006814:	2801      	cmp	r0, #1
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006816:	4628      	mov	r0, r5
  int32_t ret = BSP_ERROR_NONE;
 8006818:	bf14      	ite	ne
 800681a:	f06f 0505 	mvnne.w	r5, #5
 800681e:	2500      	moveq	r5, #0
  if (BSP_SPI3_Recv(pdata, len) != (int32_t)len)
 8006820:	f7ff fb62 	bl	8005ee8 <BSP_SPI3_Recv>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
  }

  /* CS Disable */
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006824:	2201      	movs	r2, #1
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006826:	42a0      	cmp	r0, r4
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006828:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800682c:	4804      	ldr	r0, [pc, #16]	@ (8006840 <BSP_ISM330DHCX_ReadReg+0x54>)
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800682e:	bf18      	it	ne
 8006830:	f06f 0505 	mvnne.w	r5, #5
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006834:	f001 fcb8 	bl	80081a8 <HAL_GPIO_WritePin>

  return ret;
}
 8006838:	4628      	mov	r0, r5
 800683a:	b003      	add	sp, #12
 800683c:	bd30      	pop	{r4, r5, pc}
 800683e:	bf00      	nop
 8006840:	48001400 	.word	0x48001400

08006844 <BSP_IIS2DH_DeInit>:
{
 8006844:	b508      	push	{r3, lr}
  if(BSP_SPI3_DeInit() == BSP_ERROR_NONE)
 8006846:	f7ff fb23 	bl	8005e90 <BSP_SPI3_DeInit>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800684a:	2800      	cmp	r0, #0
}
 800684c:	bf18      	it	ne
 800684e:	f06f 0005 	mvnne.w	r0, #5
 8006852:	bd08      	pop	{r3, pc}

08006854 <BSP_IIS2DH_Init>:
{
 8006854:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006856:	4815      	ldr	r0, [pc, #84]	@ (80068ac <BSP_IIS2DH_Init+0x58>)
{
 8006858:	b089      	sub	sp, #36	@ 0x24
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 800685a:	2201      	movs	r2, #1
 800685c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006860:	f001 fca2 	bl	80081a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006864:	2501      	movs	r5, #1
 8006866:	2200      	movs	r2, #0
 8006868:	e9cd 5203 	strd	r5, r2, [sp, #12]
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 800686c:	4b10      	ldr	r3, [pc, #64]	@ (80068b0 <BSP_IIS2DH_Init+0x5c>)
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 800686e:	480f      	ldr	r0, [pc, #60]	@ (80068ac <BSP_IIS2DH_Init+0x58>)
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006870:	2103      	movs	r1, #3
 8006872:	9105      	str	r1, [sp, #20]
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8006874:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006876:	f041 0108 	orr.w	r1, r1, #8
 800687a:	64d9      	str	r1, [r3, #76]	@ 0x4c
 800687c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687e:	f003 0308 	and.w	r3, r3, #8
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 8006882:	f44f 4400 	mov.w	r4, #32768	@ 0x8000
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 8006886:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 8006888:	a902      	add	r1, sp, #8
  BSP_IIS2DH_CS_GPIO_CLK_ENABLE();
 800688a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = BSP_IIS2DH_CS_PIN;
 800688c:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(BSP_IIS2DH_CS_PORT, &GPIO_InitStruct);
 800688e:	f001 fab3 	bl	8007df8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS2DH_CS_PORT, BSP_IIS2DH_CS_PIN, GPIO_PIN_SET);
 8006892:	462a      	mov	r2, r5
 8006894:	4621      	mov	r1, r4
 8006896:	4805      	ldr	r0, [pc, #20]	@ (80068ac <BSP_IIS2DH_Init+0x58>)
 8006898:	f001 fc86 	bl	80081a8 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 800689c:	f7ff fb62 	bl	8005f64 <BSP_SPI3_Init>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80068a0:	2800      	cmp	r0, #0
}
 80068a2:	bf18      	it	ne
 80068a4:	f06f 0005 	mvnne.w	r0, #5
 80068a8:	b009      	add	sp, #36	@ 0x24
 80068aa:	bd30      	pop	{r4, r5, pc}
 80068ac:	48000c00 	.word	0x48000c00
 80068b0:	40021000 	.word	0x40021000

080068b4 <BSP_IIS3DWB_Init>:
{
 80068b4:	b570      	push	{r4, r5, r6, lr}
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 80068b6:	4c1e      	ldr	r4, [pc, #120]	@ (8006930 <BSP_IIS3DWB_Init+0x7c>)
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 80068b8:	481e      	ldr	r0, [pc, #120]	@ (8006934 <BSP_IIS3DWB_Init+0x80>)
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 80068ba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80068bc:	f043 0310 	orr.w	r3, r3, #16
 80068c0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80068c2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
{
 80068c4:	b088      	sub	sp, #32
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80068cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006938 <BSP_IIS3DWB_Init+0x84>)
 80068ce:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d0:	2600      	movs	r6, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068d2:	2302      	movs	r3, #2
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 80068d4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = BSP_IIS3DWB_INT1_PIN;
 80068d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068da:	e9cd 6304 	strd	r6, r3, [sp, #16]
  GPIO_InitStruct.Pin = BSP_IIS3DWB_INT1_PIN;
 80068de:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068e0:	2501      	movs	r5, #1
  BSP_IIS3DWB_INT1_GPIO_CLK_ENABLE();
 80068e2:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(BSP_IIS3DWB_INT1_PORT, &GPIO_InitStruct);
 80068e4:	f001 fa88 	bl	8007df8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 80068e8:	2201      	movs	r2, #1
 80068ea:	4814      	ldr	r0, [pc, #80]	@ (800693c <BSP_IIS3DWB_Init+0x88>)
 80068ec:	2120      	movs	r1, #32
 80068ee:	f001 fc5b 	bl	80081a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068f2:	e9cd 5603 	strd	r5, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80068f6:	2303      	movs	r3, #3
 80068f8:	9305      	str	r3, [sp, #20]
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 80068fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 80068fc:	480f      	ldr	r0, [pc, #60]	@ (800693c <BSP_IIS3DWB_Init+0x88>)
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 80068fe:	f043 0320 	orr.w	r3, r3, #32
 8006902:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006904:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8006906:	2420      	movs	r4, #32
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 8006908:	4023      	ands	r3, r4
 800690a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 800690c:	a902      	add	r1, sp, #8
  BSP_IIS3DWB_CS_GPIO_CLK_ENABLE();
 800690e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = BSP_IIS3DWB_CS_PIN;
 8006910:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(BSP_IIS3DWB_CS_PORT, &GPIO_InitStruct);
 8006912:	f001 fa71 	bl	8007df8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_IIS3DWB_CS_PORT, BSP_IIS3DWB_CS_PIN, GPIO_PIN_SET);
 8006916:	462a      	mov	r2, r5
 8006918:	4621      	mov	r1, r4
 800691a:	4808      	ldr	r0, [pc, #32]	@ (800693c <BSP_IIS3DWB_Init+0x88>)
 800691c:	f001 fc44 	bl	80081a8 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 8006920:	f7ff fb20 	bl	8005f64 <BSP_SPI3_Init>
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006924:	2800      	cmp	r0, #0
}
 8006926:	bf18      	it	ne
 8006928:	f06f 0005 	mvnne.w	r0, #5
 800692c:	b008      	add	sp, #32
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	40021000 	.word	0x40021000
 8006934:	48001000 	.word	0x48001000
 8006938:	10110000 	.word	0x10110000
 800693c:	48001400 	.word	0x48001400

08006940 <BSP_IIS2MDC_WriteReg>:
{
 8006940:	b508      	push	{r3, lr}
  if (BSP_I2C2_WriteReg(Addr, dataReg, pdata, len) != BSP_ERROR_NONE)
 8006942:	f7ff fa73 	bl	8005e2c <BSP_I2C2_WriteReg>
    ret = BSP_ERROR_BUS_FAILURE;
 8006946:	2800      	cmp	r0, #0
}
 8006948:	bf18      	it	ne
 800694a:	f06f 0007 	mvnne.w	r0, #7
 800694e:	bd08      	pop	{r3, pc}

08006950 <BSP_IIS2MDC_ReadReg>:
{
 8006950:	b508      	push	{r3, lr}
  if (BSP_I2C2_ReadReg(Addr, dataReg, pdata, len) !=BSP_ERROR_NONE)
 8006952:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006956:	f7ff fa83 	bl	8005e60 <BSP_I2C2_ReadReg>
    ret = BSP_ERROR_BUS_FAILURE;
 800695a:	2800      	cmp	r0, #0
}
 800695c:	bf18      	it	ne
 800695e:	f06f 0007 	mvnne.w	r0, #7
 8006962:	bd08      	pop	{r3, pc}

08006964 <BSP_ISM330DHCX_Init>:
{
 8006964:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006966:	2201      	movs	r2, #1
{
 8006968:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800696a:	2600      	movs	r6, #0
 800696c:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 800696e:	4823      	ldr	r0, [pc, #140]	@ (80069fc <BSP_ISM330DHCX_Init+0x98>)
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006970:	4d23      	ldr	r5, [pc, #140]	@ (8006a00 <BSP_ISM330DHCX_Init+0x9c>)
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 8006972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006976:	f001 fc17 	bl	80081a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800697a:	e9cd 7603 	strd	r7, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800697e:	2303      	movs	r3, #3
 8006980:	9305      	str	r3, [sp, #20]
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006982:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8006984:	481d      	ldr	r0, [pc, #116]	@ (80069fc <BSP_ISM330DHCX_Init+0x98>)
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 8006986:	f043 0320 	orr.w	r3, r3, #32
 800698a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800698c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 8006994:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 8006998:	a902      	add	r1, sp, #8
  BSP_ISM330DHCX_CS_GPIO_CLK_ENABLE();
 800699a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_CS_PIN;
 800699c:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(BSP_ISM330DHCX_CS_PORT, &GPIO_InitStruct);
 800699e:	f001 fa2b 	bl	8007df8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_ISM330DHCX_CS_PORT, BSP_ISM330DHCX_CS_PIN, GPIO_PIN_SET);
 80069a2:	463a      	mov	r2, r7
 80069a4:	4621      	mov	r1, r4
 80069a6:	4815      	ldr	r0, [pc, #84]	@ (80069fc <BSP_ISM330DHCX_Init+0x98>)
 80069a8:	f001 fbfe 	bl	80081a8 <HAL_GPIO_WritePin>
  if(BSP_SPI3_Init() == BSP_ERROR_NONE)
 80069ac:	f7ff fada 	bl	8005f64 <BSP_SPI3_Init>
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 80069b0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80069b2:	f043 0320 	orr.w	r3, r3, #32
 80069b6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80069b8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80069c0:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <BSP_ISM330DHCX_Init+0xa0>)
 80069c2:	9303      	str	r3, [sp, #12]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80069c4:	1e04      	subs	r4, r0, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069c6:	f04f 0302 	mov.w	r3, #2
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 80069ca:	a902      	add	r1, sp, #8
 80069cc:	480b      	ldr	r0, [pc, #44]	@ (80069fc <BSP_ISM330DHCX_Init+0x98>)
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 80069ce:	f04f 0210 	mov.w	r2, #16
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80069d2:	bf18      	it	ne
 80069d4:	f06f 0405 	mvnne.w	r4, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d8:	e9cd 6304 	strd	r6, r3, [sp, #16]
  GPIO_InitStruct.Pin = BSP_ISM330DHCX_INT2_PIN;
 80069dc:	9202      	str	r2, [sp, #8]
  BSP_ISM330DHCX_INT2_GPIO_CLK_ENABLE();
 80069de:	9a01      	ldr	r2, [sp, #4]
  HAL_GPIO_Init(BSP_ISM330DHCX_INT2_PORT, &GPIO_InitStruct);
 80069e0:	f001 fa0a 	bl	8007df8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(BSP_ISM330DHCX_INT2_EXTI_IRQn, BSP_ISM330DHCX_INT2_EXTI_IRQ_PP, BSP_ISM330DHCX_INT2_EXTI_IRQ_SP);
 80069e4:	4632      	mov	r2, r6
 80069e6:	2107      	movs	r1, #7
 80069e8:	200a      	movs	r0, #10
 80069ea:	f001 f995 	bl	8007d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_ISM330DHCX_INT2_EXTI_IRQn);
 80069ee:	200a      	movs	r0, #10
 80069f0:	f001 f9ce 	bl	8007d90 <HAL_NVIC_EnableIRQ>
}
 80069f4:	4620      	mov	r0, r4
 80069f6:	b009      	add	sp, #36	@ 0x24
 80069f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fa:	bf00      	nop
 80069fc:	48001400 	.word	0x48001400
 8006a00:	40021000 	.word	0x40021000
 8006a04:	10110000 	.word	0x10110000

08006a08 <BSP_ISM330DHCX_DeInit>:
static int32_t BSP_ISM330DHCX_DeInit(void)
 8006a08:	b508      	push	{r3, lr}
 8006a0a:	f7ff fa41 	bl	8005e90 <BSP_SPI3_DeInit>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	bf18      	it	ne
 8006a12:	f06f 0005 	mvnne.w	r0, #5
 8006a16:	bd08      	pop	{r3, pc}

08006a18 <BSP_IIS3DWB_DeInit>:
static int32_t BSP_IIS3DWB_DeInit(void)
 8006a18:	b508      	push	{r3, lr}
 8006a1a:	f7ff fa39 	bl	8005e90 <BSP_SPI3_DeInit>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	bf18      	it	ne
 8006a22:	f06f 0005 	mvnne.w	r0, #5
 8006a26:	bd08      	pop	{r3, pc}

08006a28 <BSP_MOTION_SENSOR_Init>:
{
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	b091      	sub	sp, #68	@ 0x44
 8006a30:	460d      	mov	r5, r1
  switch (Instance)
 8006a32:	2803      	cmp	r0, #3
 8006a34:	f200 82b2 	bhi.w	8006f9c <BSP_MOTION_SENSOR_Init+0x574>
 8006a38:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006a3c:	00d0011f 	.word	0x00d0011f
 8006a40:	0004007f 	.word	0x0004007f
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 8006a44:	4bbe      	ldr	r3, [pc, #760]	@ (8006d40 <BSP_MOTION_SENSOR_Init+0x318>)
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006a46:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8006d9c <BSP_MOTION_SENSOR_Init+0x374>
  io_ctx.Init        = BSP_ISM330DHCX_Init;
 8006a4a:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_ISM330DHCX_ReadReg;
 8006a4c:	4bbd      	ldr	r3, [pc, #756]	@ (8006d44 <BSP_MOTION_SENSOR_Init+0x31c>)
 8006a4e:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 8006a50:	4bbd      	ldr	r3, [pc, #756]	@ (8006d48 <BSP_MOTION_SENSOR_Init+0x320>)
  io_ctx.DeInit      = BSP_ISM330DHCX_DeInit;
 8006a52:	4abe      	ldr	r2, [pc, #760]	@ (8006d4c <BSP_MOTION_SENSOR_Init+0x324>)
  io_ctx.WriteReg    = BSP_ISM330DHCX_WriteReg;
 8006a54:	9306      	str	r3, [sp, #24]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006a56:	f108 0b88 	add.w	fp, r8, #136	@ 0x88
  io_ctx.GetTick     = BSP_GetTick;
 8006a5a:	4bbd      	ldr	r3, [pc, #756]	@ (8006d50 <BSP_MOTION_SENSOR_Init+0x328>)
  io_ctx.DeInit      = BSP_ISM330DHCX_DeInit;
 8006a5c:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006a5e:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006a60:	2201      	movs	r2, #1
  io_ctx.Address     = 0x0;
 8006a62:	2300      	movs	r3, #0
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006a64:	a902      	add	r1, sp, #8
 8006a66:	4658      	mov	r0, fp
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006a68:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = 0x0;
 8006a6a:	f88d 3014 	strb.w	r3, [sp, #20]
  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8006a6e:	f7fd fa7d 	bl	8003f6c <ISM330DHCX_RegisterBusIO>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	f040 80af 	bne.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8006a78:	f10d 0107 	add.w	r1, sp, #7
 8006a7c:	4658      	mov	r0, fp
 8006a7e:	f7fc ff47 	bl	8003910 <ISM330DHCX_ReadID>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f040 80a7 	bne.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  else if (id != ISM330DHCX_ID)
 8006a88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a8c:	2b6b      	cmp	r3, #107	@ 0x6b
 8006a8e:	f040 80a2 	bne.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8006a92:	ae09      	add	r6, sp, #36	@ 0x24
 8006a94:	4631      	mov	r1, r6
 8006a96:	4658      	mov	r0, fp
 8006a98:	f7fc fdbc 	bl	8003614 <ISM330DHCX_GetCapabilities>
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006a9c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006aa0:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006aa4:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[ISM330DHCX_0] = &ism330dhcx_obj_0;
 8006aa8:	f8c8 b0d4 	str.w	fp, [r8, #212]	@ 0xd4
    MotionCtx[ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006aac:	0083      	lsls	r3, r0, #2
 8006aae:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	f8c8 30c4 	str.w	r3, [r8, #196]	@ 0xc4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006ab8:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 8006abc:	4ba5      	ldr	r3, [pc, #660]	@ (8006d54 <BSP_MOTION_SENSOR_Init+0x32c>)
 8006abe:	f8c8 30e4 	str.w	r3, [r8, #228]	@ 0xe4
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006ac2:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006ac6:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006aca:	d002      	beq.n	8006ad2 <BSP_MOTION_SENSOR_Init+0xaa>
 8006acc:	2a01      	cmp	r2, #1
 8006ace:	f000 81c0 	beq.w	8006e52 <BSP_MOTION_SENSOR_Init+0x42a>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006ad2:	2f00      	cmp	r7, #0
 8006ad4:	f040 8196 	bne.w	8006e04 <BSP_MOTION_SENSOR_Init+0x3dc>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006ad8:	f1b9 0f00 	cmp.w	r9, #0
 8006adc:	f040 81b5 	bne.w	8006e4a <BSP_MOTION_SENSOR_Init+0x422>
  return ret;
 8006ae0:	489d      	ldr	r0, [pc, #628]	@ (8006d58 <BSP_MOTION_SENSOR_Init+0x330>)
 8006ae2:	4b9c      	ldr	r3, [pc, #624]	@ (8006d54 <BSP_MOTION_SENSOR_Init+0x32c>)
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4798      	blx	r3
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f040 8239 	bne.w	8006f62 <BSP_MOTION_SENSOR_Init+0x53a>
      if (cap.Acc == 1U)
 8006af0:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
      if (cap.Gyro == 1U)
 8006af4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
      if (cap.Acc == 1U)
 8006af8:	f1a5 0501 	sub.w	r5, r5, #1
 8006afc:	fab5 f585 	clz	r5, r5
      if (cap.Gyro == 1U)
 8006b00:	2b01      	cmp	r3, #1
      if (cap.Acc == 1U)
 8006b02:	ea4f 1555 	mov.w	r5, r5, lsr #5
      if (cap.Magneto == 1U)
 8006b06:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
      if (cap.Acc == 1U)
 8006b0a:	ea4f 0545 	mov.w	r5, r5, lsl #1
        component_functions |= MOTION_GYRO;
 8006b0e:	bf08      	it	eq
 8006b10:	f045 0501 	orreq.w	r5, r5, #1
      if (cap.Magneto == 1U)
 8006b14:	2b01      	cmp	r3, #1
        component_functions |= MOTION_MAGNETO;
 8006b16:	bf08      	it	eq
 8006b18:	f045 0504 	orreq.w	r5, r5, #4
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006b1c:	2f00      	cmp	r7, #0
 8006b1e:	f040 80fa 	bne.w	8006d16 <BSP_MOTION_SENSOR_Init+0x2ee>
 8006b22:	f1ba 0f00 	cmp.w	sl, #0
 8006b26:	f040 813b 	bne.w	8006da0 <BSP_MOTION_SENSOR_Init+0x378>
 8006b2a:	f1b9 0f00 	cmp.w	r9, #0
 8006b2e:	f040 814c 	bne.w	8006dca <BSP_MOTION_SENSOR_Init+0x3a2>
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8006b32:	2000      	movs	r0, #0
}
 8006b34:	b011      	add	sp, #68	@ 0x44
 8006b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  io_ctx.Init        = BSP_IIS3DWB_Init;
 8006b3a:	4b88      	ldr	r3, [pc, #544]	@ (8006d5c <BSP_MOTION_SENSOR_Init+0x334>)
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006b3c:	f8df 825c 	ldr.w	r8, [pc, #604]	@ 8006d9c <BSP_MOTION_SENSOR_Init+0x374>
  io_ctx.Init        = BSP_IIS3DWB_Init;
 8006b40:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS3DWB_ReadReg;
 8006b42:	4b87      	ldr	r3, [pc, #540]	@ (8006d60 <BSP_MOTION_SENSOR_Init+0x338>)
 8006b44:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_IIS3DWB_WriteReg;
 8006b46:	4b87      	ldr	r3, [pc, #540]	@ (8006d64 <BSP_MOTION_SENSOR_Init+0x33c>)
  io_ctx.DeInit      = BSP_IIS3DWB_DeInit;
 8006b48:	4a87      	ldr	r2, [pc, #540]	@ (8006d68 <BSP_MOTION_SENSOR_Init+0x340>)
  io_ctx.WriteReg    = BSP_IIS3DWB_WriteReg;
 8006b4a:	9306      	str	r3, [sp, #24]
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006b4c:	f108 0b58 	add.w	fp, r8, #88	@ 0x58
  io_ctx.GetTick     = BSP_GetTick;
 8006b50:	4b7f      	ldr	r3, [pc, #508]	@ (8006d50 <BSP_MOTION_SENSOR_Init+0x328>)
  io_ctx.DeInit      = BSP_IIS3DWB_DeInit;
 8006b52:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006b54:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = IIS3DWB_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006b56:	2201      	movs	r2, #1
  io_ctx.Address     = 0x0;
 8006b58:	2300      	movs	r3, #0
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006b5a:	a902      	add	r1, sp, #8
 8006b5c:	4658      	mov	r0, fp
  io_ctx.BusType     = IIS3DWB_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006b5e:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = 0x0;
 8006b60:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS3DWB_RegisterBusIO(&iis3dwb_obj_0, &io_ctx) != IIS3DWB_OK)
 8006b64:	f7fc fbde 	bl	8003324 <IIS3DWB_RegisterBusIO>
 8006b68:	bba8      	cbnz	r0, 8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  else if (IIS3DWB_ReadID(&iis3dwb_obj_0, &id) != IIS3DWB_OK)
 8006b6a:	f10d 0107 	add.w	r1, sp, #7
 8006b6e:	4658      	mov	r0, fp
 8006b70:	f7fc fa4e 	bl	8003010 <IIS3DWB_ReadID>
 8006b74:	bb78      	cbnz	r0, 8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  else if (id != IIS3DWB_ID)
 8006b76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b7a:	2b7b      	cmp	r3, #123	@ 0x7b
 8006b7c:	d12b      	bne.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    (void)IIS3DWB_GetCapabilities(&iis3dwb_obj_0, &cap);
 8006b7e:	ae09      	add	r6, sp, #36	@ 0x24
 8006b80:	4631      	mov	r1, r6
 8006b82:	4658      	mov	r0, fp
 8006b84:	f7fc fa18 	bl	8002fb8 <IIS3DWB_GetCapabilities>
    MotionCtx[IIS3DWB_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006b88:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006b8c:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006b90:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    iis3dwb_global_obj = &iis3dwb_obj_0;
 8006b94:	f8c8 b118 	str.w	fp, [r8, #280]	@ 0x118
    MotionCtx[IIS3DWB_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006b98:	0083      	lsls	r3, r0, #2
 8006b9a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	f8c8 30c0 	str.w	r3, [r8, #192]	@ 0xc0
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006ba4:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[IIS3DWB_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS3DWB_COMMON_Driver;
 8006ba8:	4b70      	ldr	r3, [pc, #448]	@ (8006d6c <BSP_MOTION_SENSOR_Init+0x344>)
    MotionCompObj[IIS3DWB_0] = &iis3dwb_obj_0;
 8006baa:	f8c8 b0d0 	str.w	fp, [r8, #208]	@ 0xd0
    MotionDrv[IIS3DWB_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS3DWB_COMMON_Driver;
 8006bae:	f8c8 30e0 	str.w	r3, [r8, #224]	@ 0xe0
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006bb2:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006bb6:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006bba:	d002      	beq.n	8006bc2 <BSP_MOTION_SENSOR_Init+0x19a>
 8006bbc:	2a01      	cmp	r2, #1
 8006bbe:	f000 816c 	beq.w	8006e9a <BSP_MOTION_SENSOR_Init+0x472>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006bc2:	2f00      	cmp	r7, #0
 8006bc4:	f040 8114 	bne.w	8006df0 <BSP_MOTION_SENSOR_Init+0x3c8>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006bc8:	f1b9 0f00 	cmp.w	r9, #0
 8006bcc:	f000 8117 	beq.w	8006dfe <BSP_MOTION_SENSOR_Init+0x3d6>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f040 8114 	bne.w	8006dfe <BSP_MOTION_SENSOR_Init+0x3d6>
        return BSP_ERROR_NO_INIT;
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	e7ab      	b.n	8006b34 <BSP_MOTION_SENSOR_Init+0x10c>
  io_ctx.Init        = BSP_I2C2_Init;
 8006bdc:	4b64      	ldr	r3, [pc, #400]	@ (8006d70 <BSP_MOTION_SENSOR_Init+0x348>)
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006bde:	f8df 81bc 	ldr.w	r8, [pc, #444]	@ 8006d9c <BSP_MOTION_SENSOR_Init+0x374>
  io_ctx.Init        = BSP_I2C2_Init;
 8006be2:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS2MDC_ReadReg;
 8006be4:	4b63      	ldr	r3, [pc, #396]	@ (8006d74 <BSP_MOTION_SENSOR_Init+0x34c>)
 8006be6:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_IIS2MDC_WriteReg;
 8006be8:	4b63      	ldr	r3, [pc, #396]	@ (8006d78 <BSP_MOTION_SENSOR_Init+0x350>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006bea:	4a64      	ldr	r2, [pc, #400]	@ (8006d7c <BSP_MOTION_SENSOR_Init+0x354>)
  io_ctx.WriteReg    = BSP_IIS2MDC_WriteReg;
 8006bec:	9306      	str	r3, [sp, #24]
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006bee:	f108 0b2c 	add.w	fp, r8, #44	@ 0x2c
  io_ctx.GetTick     = BSP_GetTick;
 8006bf2:	4b57      	ldr	r3, [pc, #348]	@ (8006d50 <BSP_MOTION_SENSOR_Init+0x328>)
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8006bf4:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006bf6:	9308      	str	r3, [sp, #32]
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8006bf8:	2200      	movs	r2, #0
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006bfa:	233d      	movs	r3, #61	@ 0x3d
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006bfc:	a902      	add	r1, sp, #8
 8006bfe:	4658      	mov	r0, fp
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8006c00:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8006c02:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8006c06:	f7fc f8dd 	bl	8002dc4 <IIS2MDC_RegisterBusIO>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d1e3      	bne.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8006c0e:	f10d 0107 	add.w	r1, sp, #7
 8006c12:	4658      	mov	r0, fp
 8006c14:	f7fc f840 	bl	8002c98 <IIS2MDC_ReadID>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d1dc      	bne.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  else if (id != IIS2MDC_ID)
 8006c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c20:	2b40      	cmp	r3, #64	@ 0x40
 8006c22:	d1d8      	bne.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 8006c24:	ae09      	add	r6, sp, #36	@ 0x24
 8006c26:	4631      	mov	r1, r6
 8006c28:	4658      	mov	r0, fp
 8006c2a:	f7fb ff91 	bl	8002b50 <IIS2MDC_GetCapabilities>
    MotionCtx[IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006c2e:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8006c32:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8006c36:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[IIS2MDC_0] = &iis2mdc_obj_0;
 8006c3a:	f8c8 b0cc 	str.w	fp, [r8, #204]	@ 0xcc
    MotionCtx[IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006c3e:	0093      	lsls	r3, r2, #2
 8006c40:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8006c44:	430b      	orrs	r3, r1
 8006c46:	f8c8 30bc 	str.w	r3, [r8, #188]	@ 0xbc
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006c4a:	f015 0904 	ands.w	r9, r5, #4
    MotionDrv[IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8006c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8006d80 <BSP_MOTION_SENSOR_Init+0x358>)
 8006c50:	f8c8 30dc 	str.w	r3, [r8, #220]	@ 0xdc
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006c54:	f005 0a02 	and.w	sl, r5, #2
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006c58:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006c5c:	d002      	beq.n	8006c64 <BSP_MOTION_SENSOR_Init+0x23c>
 8006c5e:	2a01      	cmp	r2, #1
 8006c60:	f000 8133 	beq.w	8006eca <BSP_MOTION_SENSOR_Init+0x4a2>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	f040 80e6 	bne.w	8006e36 <BSP_MOTION_SENSOR_Init+0x40e>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006c6a:	f1ba 0f00 	cmp.w	sl, #0
 8006c6e:	d001      	beq.n	8006c74 <BSP_MOTION_SENSOR_Init+0x24c>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d0b0      	beq.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  return ret;
 8006c74:	4843      	ldr	r0, [pc, #268]	@ (8006d84 <BSP_MOTION_SENSOR_Init+0x35c>)
 8006c76:	4b42      	ldr	r3, [pc, #264]	@ (8006d80 <BSP_MOTION_SENSOR_Init+0x358>)
 8006c78:	e734      	b.n	8006ae4 <BSP_MOTION_SENSOR_Init+0xbc>
  io_ctx.Init        = BSP_IIS2DH_Init;
 8006c7a:	4b43      	ldr	r3, [pc, #268]	@ (8006d88 <BSP_MOTION_SENSOR_Init+0x360>)
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006c7c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8006d9c <BSP_MOTION_SENSOR_Init+0x374>
  io_ctx.Init        = BSP_IIS2DH_Init;
 8006c80:	9302      	str	r3, [sp, #8]
  io_ctx.ReadReg     = BSP_IIS2DH_ReadReg;
 8006c82:	4b42      	ldr	r3, [pc, #264]	@ (8006d8c <BSP_MOTION_SENSOR_Init+0x364>)
  io_ctx.DeInit      = BSP_IIS2DH_DeInit;
 8006c84:	4a42      	ldr	r2, [pc, #264]	@ (8006d90 <BSP_MOTION_SENSOR_Init+0x368>)
  io_ctx.ReadReg     = BSP_IIS2DH_ReadReg;
 8006c86:	9307      	str	r3, [sp, #28]
  io_ctx.BusType     = IIS2DH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006c88:	2101      	movs	r1, #1
  io_ctx.GetTick     = BSP_GetTick;
 8006c8a:	4b31      	ldr	r3, [pc, #196]	@ (8006d50 <BSP_MOTION_SENSOR_Init+0x328>)
  io_ctx.BusType     = IIS2DH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8006c8c:	9104      	str	r1, [sp, #16]
  io_ctx.DeInit      = BSP_IIS2DH_DeInit;
 8006c8e:	9203      	str	r2, [sp, #12]
  io_ctx.GetTick     = BSP_GetTick;
 8006c90:	9308      	str	r3, [sp, #32]
  io_ctx.WriteReg    = BSP_IIS2DH_WriteReg;
 8006c92:	4a40      	ldr	r2, [pc, #256]	@ (8006d94 <BSP_MOTION_SENSOR_Init+0x36c>)
 8006c94:	9206      	str	r2, [sp, #24]
  io_ctx.Address     = 0x0;
 8006c96:	2300      	movs	r3, #0
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006c98:	a902      	add	r1, sp, #8
 8006c9a:	4640      	mov	r0, r8
  io_ctx.Address     = 0x0;
 8006c9c:	f88d 3014 	strb.w	r3, [sp, #20]
  if (IIS2DH_RegisterBusIO(&iis2dh_obj_0, &io_ctx) != IIS2DH_OK)
 8006ca0:	f7fb fd74 	bl	800278c <IIS2DH_RegisterBusIO>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d196      	bne.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  else if (IIS2DH_ReadID(&iis2dh_obj_0, &id) != IIS2DH_OK)
 8006ca8:	f10d 0107 	add.w	r1, sp, #7
 8006cac:	4640      	mov	r0, r8
 8006cae:	f7fb fbed 	bl	800248c <IIS2DH_ReadID>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d18f      	bne.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  else if (id != IIS2DH_ID)
 8006cb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006cba:	2b33      	cmp	r3, #51	@ 0x33
 8006cbc:	d18b      	bne.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    (void)IIS2DH_GetCapabilities(&iis2dh_obj_0, &cap);
 8006cbe:	ae09      	add	r6, sp, #36	@ 0x24
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	f7fb fa28 	bl	8002118 <IIS2DH_GetCapabilities>
    MotionCtx[IIS2DH_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006cc8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006ccc:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8006cd0:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    MotionCompObj[IIS2DH_0] = &iis2dh_obj_0;
 8006cd4:	f8c8 80c8 	str.w	r8, [r8, #200]	@ 0xc8
    MotionCtx[IIS2DH_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006cd8:	0083      	lsls	r3, r0, #2
 8006cda:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	f8c8 30b8 	str.w	r3, [r8, #184]	@ 0xb8
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006ce4:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[IIS2DH_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DH_COMMON_Driver;
 8006ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d98 <BSP_MOTION_SENSOR_Init+0x370>)
 8006cea:	f8c8 30d8 	str.w	r3, [r8, #216]	@ 0xd8
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006cee:	f005 0701 	and.w	r7, r5, #1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006cf2:	f005 0904 	and.w	r9, r5, #4
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006cf6:	d002      	beq.n	8006cfe <BSP_MOTION_SENSOR_Init+0x2d6>
 8006cf8:	2a01      	cmp	r2, #1
 8006cfa:	f000 80fe 	beq.w	8006efa <BSP_MOTION_SENSOR_Init+0x4d2>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006cfe:	2f00      	cmp	r7, #0
 8006d00:	f040 808f 	bne.w	8006e22 <BSP_MOTION_SENSOR_Init+0x3fa>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006d04:	f1b9 0f00 	cmp.w	r9, #0
 8006d08:	d002      	beq.n	8006d10 <BSP_MOTION_SENSOR_Init+0x2e8>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f43f af63 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  return ret;
 8006d10:	4822      	ldr	r0, [pc, #136]	@ (8006d9c <BSP_MOTION_SENSOR_Init+0x374>)
 8006d12:	4b21      	ldr	r3, [pc, #132]	@ (8006d98 <BSP_MOTION_SENSOR_Init+0x370>)
 8006d14:	e6e6      	b.n	8006ae4 <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006d16:	07e9      	lsls	r1, r5, #31
 8006d18:	f57f af03 	bpl.w	8006b22 <BSP_MOTION_SENSOR_Init+0xfa>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006d1c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006d20:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006d24:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d2c:	f8d2 00c8 	ldr.w	r0, [r2, #200]	@ 0xc8
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4798      	blx	r3
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f43f aef4 	beq.w	8006b22 <BSP_MOTION_SENSOR_Init+0xfa>
        return BSP_ERROR_COMPONENT_FAILURE;
 8006d3a:	f06f 0004 	mvn.w	r0, #4
 8006d3e:	e6f9      	b.n	8006b34 <BSP_MOTION_SENSOR_Init+0x10c>
 8006d40:	08006965 	.word	0x08006965
 8006d44:	080067ed 	.word	0x080067ed
 8006d48:	080066e1 	.word	0x080066e1
 8006d4c:	08006a09 	.word	0x08006a09
 8006d50:	08005f0d 	.word	0x08005f0d
 8006d54:	20000174 	.word	0x20000174
 8006d58:	20002e74 	.word	0x20002e74
 8006d5c:	080068b5 	.word	0x080068b5
 8006d60:	08006795 	.word	0x08006795
 8006d64:	08006689 	.word	0x08006689
 8006d68:	08006a19 	.word	0x08006a19
 8006d6c:	2000011c 	.word	0x2000011c
 8006d70:	08006035 	.word	0x08006035
 8006d74:	08006951 	.word	0x08006951
 8006d78:	08006941 	.word	0x08006941
 8006d7c:	08005df9 	.word	0x08005df9
 8006d80:	200000e8 	.word	0x200000e8
 8006d84:	20002e18 	.word	0x20002e18
 8006d88:	08006855 	.word	0x08006855
 8006d8c:	08006735 	.word	0x08006735
 8006d90:	08006845 	.word	0x08006845
 8006d94:	0800662d 	.word	0x0800662d
 8006d98:	200000b4 	.word	0x200000b4
 8006d9c:	20002dec 	.word	0x20002dec
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006da0:	07aa      	lsls	r2, r5, #30
 8006da2:	f57f aec2 	bpl.w	8006b2a <BSP_MOTION_SENSOR_Init+0x102>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006da6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8006daa:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006dae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006db2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006db6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4798      	blx	r3
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d1bb      	bne.n	8006d3a <BSP_MOTION_SENSOR_Init+0x312>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006dc2:	f1b9 0f00 	cmp.w	r9, #0
 8006dc6:	f43f aeb4 	beq.w	8006b32 <BSP_MOTION_SENSOR_Init+0x10a>
 8006dca:	076b      	lsls	r3, r5, #29
 8006dcc:	f57f aeb1 	bpl.w	8006b32 <BSP_MOTION_SENSOR_Init+0x10a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8006dd0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006dd4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006dd8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8006ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de0:	f8d8 00c8 	ldr.w	r0, [r8, #200]	@ 0xc8
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4798      	blx	r3
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f43f aea2 	beq.w	8006b32 <BSP_MOTION_SENSOR_Init+0x10a>
 8006dee:	e7a4      	b.n	8006d3a <BSP_MOTION_SENSOR_Init+0x312>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006df0:	2900      	cmp	r1, #0
 8006df2:	f43f aef0 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006df6:	f1b9 0f00 	cmp.w	r9, #0
 8006dfa:	f040 80a2 	bne.w	8006f42 <BSP_MOTION_SENSOR_Init+0x51a>
  return ret;
 8006dfe:	4869      	ldr	r0, [pc, #420]	@ (8006fa4 <BSP_MOTION_SENSOR_Init+0x57c>)
 8006e00:	4b69      	ldr	r3, [pc, #420]	@ (8006fa8 <BSP_MOTION_SENSOR_Init+0x580>)
 8006e02:	e66f      	b.n	8006ae4 <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006e04:	2901      	cmp	r1, #1
 8006e06:	f000 8090 	beq.w	8006f2a <BSP_MOTION_SENSOR_Init+0x502>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e0a:	f1b9 0f00 	cmp.w	r9, #0
 8006e0e:	f43f ae67 	beq.w	8006ae0 <BSP_MOTION_SENSOR_Init+0xb8>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f43f aedf 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006e18:	f8d8 30e4 	ldr.w	r3, [r8, #228]	@ 0xe4
 8006e1c:	f8d8 00d4 	ldr.w	r0, [r8, #212]	@ 0xd4
 8006e20:	e660      	b.n	8006ae4 <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006e22:	2900      	cmp	r1, #0
 8006e24:	f43f aed7 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e28:	f1b9 0f00 	cmp.w	r9, #0
 8006e2c:	f43f af70 	beq.w	8006d10 <BSP_MOTION_SENSOR_Init+0x2e8>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d175      	bne.n	8006f20 <BSP_MOTION_SENSOR_Init+0x4f8>
 8006e34:	e6cf      	b.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006e36:	2900      	cmp	r1, #0
 8006e38:	f43f aecd 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006e3c:	f1ba 0f00 	cmp.w	sl, #0
 8006e40:	f43f af18 	beq.w	8006c74 <BSP_MOTION_SENSOR_Init+0x24c>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d153      	bne.n	8006ef0 <BSP_MOTION_SENSOR_Init+0x4c8>
 8006e48:	e6c5      	b.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f47f ae48 	bne.w	8006ae0 <BSP_MOTION_SENSOR_Init+0xb8>
 8006e50:	e6c1      	b.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 8006e52:	4a56      	ldr	r2, [pc, #344]	@ (8006fac <BSP_MOTION_SENSOR_Init+0x584>)
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006e54:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 8006e56:	f8c8 2110 	str.w	r2, [r8, #272]	@ 0x110
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006e5a:	4658      	mov	r0, fp
 8006e5c:	4798      	blx	r3
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d072      	beq.n	8006f48 <BSP_MOTION_SENSOR_Init+0x520>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006e62:	2f00      	cmp	r7, #0
 8006e64:	f43f aeb7 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
 8006e68:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	f47f aeb2 	bne.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006e72:	f8d8 30e4 	ldr.w	r3, [r8, #228]	@ 0xe4
 8006e76:	f8d8 00d4 	ldr.w	r0, [r8, #212]	@ 0xd4
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8006e7a:	4a4d      	ldr	r2, [pc, #308]	@ (8006fb0 <BSP_MOTION_SENSOR_Init+0x588>)
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006e7c:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8006e7e:	f8c8 210c 	str.w	r2, [r8, #268]	@ 0x10c
      if (MotionDrv[ISM330DHCX_0]->Init(MotionCompObj[ISM330DHCX_0]) != ISM330DHCX_OK)
 8006e82:	4798      	blx	r3
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f47f aea6 	bne.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	d0c3      	beq.n	8006e18 <BSP_MOTION_SENSOR_Init+0x3f0>
 8006e90:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1bf      	bne.n	8006e18 <BSP_MOTION_SENSOR_Init+0x3f0>
 8006e98:	e69d      	b.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
      MotionFuncDrv[IIS3DWB_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS3DWB_ACC_Driver;
 8006e9a:	4a46      	ldr	r2, [pc, #280]	@ (8006fb4 <BSP_MOTION_SENSOR_Init+0x58c>)
      if (MotionDrv[IIS3DWB_0]->Init(MotionCompObj[IIS3DWB_0]) != IIS3DWB_OK)
 8006e9c:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS3DWB_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS3DWB_ACC_Driver;
 8006e9e:	f8c8 2104 	str.w	r2, [r8, #260]	@ 0x104
      if (MotionDrv[IIS3DWB_0]->Init(MotionCompObj[IIS3DWB_0]) != IIS3DWB_OK)
 8006ea2:	4658      	mov	r0, fp
 8006ea4:	4798      	blx	r3
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f47f ae95 	bne.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006eac:	2f00      	cmp	r7, #0
 8006eae:	d13e      	bne.n	8006f2e <BSP_MOTION_SENSOR_Init+0x506>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	d004      	beq.n	8006ec0 <BSP_MOTION_SENSOR_Init+0x498>
 8006eb6:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f43f ae8b 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006ec0:	f8d8 30e0 	ldr.w	r3, [r8, #224]	@ 0xe0
 8006ec4:	f8d8 00d0 	ldr.w	r0, [r8, #208]	@ 0xd0
 8006ec8:	e60c      	b.n	8006ae4 <BSP_MOTION_SENSOR_Init+0xbc>
      MotionFuncDrv[IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2MDC_MAG_Driver;
 8006eca:	4a3b      	ldr	r2, [pc, #236]	@ (8006fb8 <BSP_MOTION_SENSOR_Init+0x590>)
      if (MotionDrv[IIS2MDC_0]->Init(MotionCompObj[IIS2MDC_0]) != IIS2MDC_OK)
 8006ecc:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2MDC_MAG_Driver;
 8006ece:	f8c8 20fc 	str.w	r2, [r8, #252]	@ 0xfc
      if (MotionDrv[IIS2MDC_0]->Init(MotionCompObj[IIS2MDC_0]) != IIS2MDC_OK)
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	4798      	blx	r3
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f47f ae7d 	bne.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006edc:	2f00      	cmp	r7, #0
 8006ede:	d143      	bne.n	8006f68 <BSP_MOTION_SENSOR_Init+0x540>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006ee0:	f1ba 0f00 	cmp.w	sl, #0
 8006ee4:	d004      	beq.n	8006ef0 <BSP_MOTION_SENSOR_Init+0x4c8>
 8006ee6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f43f ae73 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006ef0:	f8d8 30dc 	ldr.w	r3, [r8, #220]	@ 0xdc
 8006ef4:	f8d8 00cc 	ldr.w	r0, [r8, #204]	@ 0xcc
 8006ef8:	e5f4      	b.n	8006ae4 <BSP_MOTION_SENSOR_Init+0xbc>
      MotionFuncDrv[IIS2DH_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2DH_ACC_Driver;
 8006efa:	4a30      	ldr	r2, [pc, #192]	@ (8006fbc <BSP_MOTION_SENSOR_Init+0x594>)
      if (MotionDrv[IIS2DH_0]->Init(MotionCompObj[IIS2DH_0]) != IIS2DH_OK)
 8006efc:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IIS2DH_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&IIS2DH_ACC_Driver;
 8006efe:	f8c8 20ec 	str.w	r2, [r8, #236]	@ 0xec
      if (MotionDrv[IIS2DH_0]->Init(MotionCompObj[IIS2DH_0]) != IIS2DH_OK)
 8006f02:	4640      	mov	r0, r8
 8006f04:	4798      	blx	r3
 8006f06:	2800      	cmp	r0, #0
 8006f08:	f47f ae65 	bne.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006f0c:	2f00      	cmp	r7, #0
 8006f0e:	d138      	bne.n	8006f82 <BSP_MOTION_SENSOR_Init+0x55a>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006f10:	f1b9 0f00 	cmp.w	r9, #0
 8006f14:	d004      	beq.n	8006f20 <BSP_MOTION_SENSOR_Init+0x4f8>
 8006f16:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f43f ae5b 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006f20:	f8d8 30d8 	ldr.w	r3, [r8, #216]	@ 0xd8
 8006f24:	f8d8 00c8 	ldr.w	r0, [r8, #200]	@ 0xc8
 8006f28:	e5dc      	b.n	8006ae4 <BSP_MOTION_SENSOR_Init+0xbc>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006f2a:	4658      	mov	r0, fp
 8006f2c:	e7a5      	b.n	8006e7a <BSP_MOTION_SENSOR_Init+0x452>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006f2e:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f43f ae4f 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006f38:	f1b9 0f00 	cmp.w	r9, #0
 8006f3c:	d0c0      	beq.n	8006ec0 <BSP_MOTION_SENSOR_Init+0x498>
 8006f3e:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d1bc      	bne.n	8006ec0 <BSP_MOTION_SENSOR_Init+0x498>
 8006f46:	e646      	b.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8006f48:	2f00      	cmp	r7, #0
 8006f4a:	d09e      	beq.n	8006e8a <BSP_MOTION_SENSOR_Init+0x462>
 8006f4c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d08e      	beq.n	8006e72 <BSP_MOTION_SENSOR_Init+0x44a>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006f54:	f1b9 0f00 	cmp.w	r9, #0
 8006f58:	f43f af5e 	beq.w	8006e18 <BSP_MOTION_SENSOR_Init+0x3f0>
 8006f5c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006f60:	e757      	b.n	8006e12 <BSP_MOTION_SENSOR_Init+0x3ea>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006f62:	f06f 0006 	mvn.w	r0, #6
 8006f66:	e5e5      	b.n	8006b34 <BSP_MOTION_SENSOR_Init+0x10c>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006f68:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f43f ae32 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc== 0U))
 8006f72:	f1ba 0f00 	cmp.w	sl, #0
 8006f76:	d0bb      	beq.n	8006ef0 <BSP_MOTION_SENSOR_Init+0x4c8>
 8006f78:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d1b7      	bne.n	8006ef0 <BSP_MOTION_SENSOR_Init+0x4c8>
 8006f80:	e629      	b.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro== 0U))
 8006f82:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f43f ae25 	beq.w	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto== 0U))
 8006f8c:	f1b9 0f00 	cmp.w	r9, #0
 8006f90:	d0c6      	beq.n	8006f20 <BSP_MOTION_SENSOR_Init+0x4f8>
 8006f92:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d1c2      	bne.n	8006f20 <BSP_MOTION_SENSOR_Init+0x4f8>
 8006f9a:	e61c      	b.n	8006bd6 <BSP_MOTION_SENSOR_Init+0x1ae>
  switch (Instance)
 8006f9c:	f06f 0001 	mvn.w	r0, #1
 8006fa0:	e5c8      	b.n	8006b34 <BSP_MOTION_SENSOR_Init+0x10c>
 8006fa2:	bf00      	nop
 8006fa4:	20002e44 	.word	0x20002e44
 8006fa8:	2000011c 	.word	0x2000011c
 8006fac:	20000150 	.word	0x20000150
 8006fb0:	2000012c 	.word	0x2000012c
 8006fb4:	200000f8 	.word	0x200000f8
 8006fb8:	200000c4 	.word	0x200000c4
 8006fbc:	20000090 	.word	0x20000090

08006fc0 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8006fc0:	2803      	cmp	r0, #3
 8006fc2:	d81f      	bhi.n	8007004 <BSP_MOTION_SENSOR_SetOutputDataRate+0x44>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006fc4:	4a11      	ldr	r2, [pc, #68]	@ (800700c <BSP_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 8006fc6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
{
 8006fca:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006fcc:	f8dc 30b8 	ldr.w	r3, [ip, #184]	@ 0xb8
 8006fd0:	ea01 0e03 	and.w	lr, r1, r3
 8006fd4:	4399      	bics	r1, r3
 8006fd6:	d112      	bne.n	8006ffe <BSP_MOTION_SENSOR_SetOutputDataRate+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8006fd8:	490d      	ldr	r1, [pc, #52]	@ (8007010 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>)
 8006fda:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 8006fde:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006fe2:	440b      	add	r3, r1
 8006fe4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006fe8:	f8dc 00c8 	ldr.w	r0, [ip, #200]	@ 0xc8
 8006fec:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	bf18      	it	ne
 8006ff8:	f06f 0004 	mvnne.w	r0, #4
}
 8006ffc:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006ffe:	f06f 0001 	mvn.w	r0, #1
}
 8007002:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007004:	f06f 0001 	mvn.w	r0, #1
}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20002dec 	.word	0x20002dec
 8007010:	0801541c 	.word	0x0801541c

08007014 <BSP_MOTION_SENSOR_SetFullScale>:
  if (Instance >= MOTION_INSTANCES_NBR)
 8007014:	2803      	cmp	r0, #3
 8007016:	d821      	bhi.n	800705c <BSP_MOTION_SENSOR_SetFullScale+0x48>
{
 8007018:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800701a:	4c12      	ldr	r4, [pc, #72]	@ (8007064 <BSP_MOTION_SENSOR_SetFullScale+0x50>)
 800701c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8007020:	460b      	mov	r3, r1
 8007022:	4611      	mov	r1, r2
 8007024:	f8dc 20b8 	ldr.w	r2, [ip, #184]	@ 0xb8
 8007028:	ea03 0e02 	and.w	lr, r3, r2
 800702c:	4393      	bics	r3, r2
 800702e:	d112      	bne.n	8007056 <BSP_MOTION_SENSOR_SetFullScale+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 8007030:	4a0d      	ldr	r2, [pc, #52]	@ (8007068 <BSP_MOTION_SENSOR_SetFullScale+0x54>)
 8007032:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8007036:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800703a:	4413      	add	r3, r2
 800703c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007040:	f8dc 00c8 	ldr.w	r0, [ip, #200]	@ 0xc8
 8007044:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800704c:	2800      	cmp	r0, #0
 800704e:	bf18      	it	ne
 8007050:	f06f 0004 	mvnne.w	r0, #4
}
 8007054:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007056:	f06f 0001 	mvn.w	r0, #1
}
 800705a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800705c:	f06f 0001 	mvn.w	r0, #1
}
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20002dec 	.word	0x20002dec
 8007068:	0801541c 	.word	0x0801541c
 800706c:	00000000 	.word	0x00000000

08007070 <BSP_SD_Detect_Init>:
 */
void BSP_SD_Detect_Init(void)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8007070:	4b0f      	ldr	r3, [pc, #60]	@ (80070b0 <BSP_SD_Detect_Init+0x40>)
  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8007072:	4810      	ldr	r0, [pc, #64]	@ (80070b4 <BSP_SD_Detect_Init+0x44>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8007074:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 8007076:	b500      	push	{lr}
  SD_DETECT_GPIO_CLK_ENABLE();
 8007078:	f042 0202 	orr.w	r2, r2, #2
 800707c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800707e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
 8007080:	b089      	sub	sp, #36	@ 0x24
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8007082:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80070a8 <BSP_SD_Detect_Init+0x38>
  SD_DETECT_GPIO_CLK_ENABLE();
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 800708c:	2201      	movs	r2, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800708e:	a902      	add	r1, sp, #8
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8007090:	2300      	movs	r3, #0
 8007092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007096:	ed8d 7b02 	vstr	d7, [sp, #8]
  SD_DETECT_GPIO_CLK_ENABLE();
 800709a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800709c:	f000 feac 	bl	8007df8 <HAL_GPIO_Init>
}
 80070a0:	b009      	add	sp, #36	@ 0x24
 80070a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80070a6:	bf00      	nop
 80070a8:	00001000 	.word	0x00001000
 80070ac:	00000000 	.word	0x00000000
 80070b0:	40021000 	.word	0x40021000
 80070b4:	48000400 	.word	0x48000400

080070b8 <BSP_SD_DetectCallback>:
{
  /* NOTE: This function Should not be modified, when the callback is needed,
  the BSP_SD_DetectCallback could be implemented in the user file
  */ 
  
}
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop

080070bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80070bc:	4684      	mov	ip, r0
 80070be:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80070c0:	4804      	ldr	r0, [pc, #16]	@ (80070d4 <BSP_SD_ReadBlocks_DMA+0x18>)
{
 80070c2:	4613      	mov	r3, r2
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80070c4:	460a      	mov	r2, r1
 80070c6:	4661      	mov	r1, ip
 80070c8:	f003 fefc 	bl	800aec4 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 80070cc:	3800      	subs	r0, #0
 80070ce:	bf18      	it	ne
 80070d0:	2001      	movne	r0, #1
 80070d2:	bd08      	pop	{r3, pc}
 80070d4:	20000fc4 	.word	0x20000fc4

080070d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80070d8:	4684      	mov	ip, r0
 80070da:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80070dc:	4804      	ldr	r0, [pc, #16]	@ (80070f0 <BSP_SD_WriteBlocks_DMA+0x18>)
{
 80070de:	4613      	mov	r3, r2
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80070e0:	460a      	mov	r2, r1
 80070e2:	4661      	mov	r1, ip
 80070e4:	f003 ff54 	bl	800af90 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 80070e8:	3800      	subs	r0, #0
 80070ea:	bf18      	it	ne
 80070ec:	2001      	movne	r0, #1
 80070ee:	bd08      	pop	{r3, pc}
 80070f0:	20000fc4 	.word	0x20000fc4

080070f4 <BSP_SD_MspInit>:
{
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80070f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007170 <BSP_SD_MspInit+0x7c>)
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80070f6:	481f      	ldr	r0, [pc, #124]	@ (8007174 <BSP_SD_MspInit+0x80>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80070f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 80070fa:	b500      	push	{lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80070fc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007100:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 8007104:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007106:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800710a:	9201      	str	r2, [sp, #4]
 800710c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800710e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007110:	f042 0204 	orr.w	r2, r2, #4
 8007114:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007118:	f002 0204 	and.w	r2, r2, #4
 800711c:	9202      	str	r2, [sp, #8]
 800711e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007120:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007122:	f042 0208 	orr.w	r2, r2, #8
 8007126:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8007130:	210c      	movs	r1, #12
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8007132:	f44f 52f8 	mov.w	r2, #7936	@ 0x1f00
 8007136:	2302      	movs	r3, #2
 8007138:	e9cd 2304 	strd	r2, r3, [sp, #16]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 800713c:	9108      	str	r1, [sp, #32]
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800713e:	2201      	movs	r2, #1
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8007140:	a904      	add	r1, sp, #16
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8007142:	2303      	movs	r3, #3
 8007144:	e9cd 2306 	strd	r2, r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007148:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800714a:	f000 fe55 	bl	8007df8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 800714e:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8007150:	a904      	add	r1, sp, #16
 8007152:	4809      	ldr	r0, [pc, #36]	@ (8007178 <BSP_SD_MspInit+0x84>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 8007154:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8007156:	f000 fe4f 	bl	8007df8 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 800715a:	2200      	movs	r2, #0
 800715c:	2105      	movs	r1, #5
 800715e:	2031      	movs	r0, #49	@ 0x31
 8007160:	f000 fdda 	bl	8007d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8007164:	2031      	movs	r0, #49	@ 0x31
 8007166:	f000 fe13 	bl	8007d90 <HAL_NVIC_EnableIRQ>


}
 800716a:	b00b      	add	sp, #44	@ 0x2c
 800716c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007170:	40021000 	.word	0x40021000
 8007174:	48000800 	.word	0x48000800
 8007178:	48000c00 	.word	0x48000c00

0800717c <BSP_SD_Init>:
  hsd1.Instance = SDMMC1;
 800717c:	4813      	ldr	r0, [pc, #76]	@ (80071cc <BSP_SD_Init+0x50>)
 800717e:	4914      	ldr	r1, [pc, #80]	@ (80071d0 <BSP_SD_Init+0x54>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007180:	2300      	movs	r3, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007182:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
{
 8007186:	b510      	push	{r4, lr}
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007188:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hsd1.Init.ClockDiv = 1;
 800718c:	2401      	movs	r4, #1
 800718e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007192:	e9c0 1300 	strd	r1, r3, [r0]
  hsd1.Init.ClockDiv = 1;
 8007196:	6183      	str	r3, [r0, #24]
 8007198:	e9c0 2404 	strd	r2, r4, [r0, #16]
  BSP_SD_MspInit(&hsd1);
 800719c:	f7ff ffaa 	bl	80070f4 <BSP_SD_MspInit>
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 80071a0:	480c      	ldr	r0, [pc, #48]	@ (80071d4 <BSP_SD_Init+0x58>)
 80071a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80071a6:	f000 fff9 	bl	800819c <HAL_GPIO_ReadPin>
    SD_Status = SD_NOT_PRESENT;
 80071aa:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <BSP_SD_Init+0x5c>)
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 80071ac:	b928      	cbnz	r0, 80071ba <BSP_SD_Init+0x3e>
    SD_Status = SD_NOT_PRESENT;
 80071ae:	7018      	strb	r0, [r3, #0]
  return SD_Status;
 80071b0:	781b      	ldrb	r3, [r3, #0]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d005      	beq.n	80071c2 <BSP_SD_Init+0x46>
}
 80071b6:	2002      	movs	r0, #2
 80071b8:	bd10      	pop	{r4, pc}
    SD_Status = SD_PRESENT;
 80071ba:	701c      	strb	r4, [r3, #0]
  return SD_Status;
 80071bc:	781b      	ldrb	r3, [r3, #0]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d1f9      	bne.n	80071b6 <BSP_SD_Init+0x3a>
}
 80071c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 80071c6:	4801      	ldr	r0, [pc, #4]	@ (80071cc <BSP_SD_Init+0x50>)
 80071c8:	f004 bc84 	b.w	800bad4 <HAL_SD_Init>
 80071cc:	20000fc4 	.word	0x20000fc4
 80071d0:	50062400 	.word	0x50062400
 80071d4:	48000400 	.word	0x48000400
 80071d8:	20002f10 	.word	0x20002f10

080071dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80071dc:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80071de:	4803      	ldr	r0, [pc, #12]	@ (80071ec <BSP_SD_GetCardState+0x10>)
 80071e0:	f004 fcdc 	bl	800bb9c <HAL_SD_GetCardState>
}
 80071e4:	3804      	subs	r0, #4
 80071e6:	bf18      	it	ne
 80071e8:	2001      	movne	r0, #1
 80071ea:	bd08      	pop	{r3, pc}
 80071ec:	20000fc4 	.word	0x20000fc4

080071f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80071f0:	4601      	mov	r1, r0
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80071f2:	4801      	ldr	r0, [pc, #4]	@ (80071f8 <BSP_SD_GetCardInfo+0x8>)
 80071f4:	f004 bb8c 	b.w	800b910 <HAL_SD_GetCardInfo>
 80071f8:	20000fc4 	.word	0x20000fc4

080071fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80071fc:	b508      	push	{r3, lr}
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 80071fe:	f009 f925 	bl	801044c <BSP_SD_WriteCpltCallback>
}
 8007202:	bd08      	pop	{r3, pc}

08007204 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007204:	b508      	push	{r3, lr}
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8007206:	f009 f927 	bl	8010458 <BSP_SD_ReadCpltCallback>
}
 800720a:	bd08      	pop	{r3, pc}

0800720c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800720c:	4911      	ldr	r1, [pc, #68]	@ (8007254 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800720e:	4b12      	ldr	r3, [pc, #72]	@ (8007258 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007210:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007214:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
{
 8007218:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800721a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 800721e:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007220:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007228:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8007230:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8007234:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8007238:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000;
 800723a:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800723c:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800723e:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007242:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007246:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 8007248:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800724a:	608c      	str	r4, [r1, #8]
#endif
}
 800724c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	e000ed00 	.word	0xe000ed00
 8007258:	40021000 	.word	0x40021000

0800725c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop

08007260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007260:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007262:	4e0f      	ldr	r6, [pc, #60]	@ (80072a0 <HAL_InitTick+0x40>)
 8007264:	7833      	ldrb	r3, [r6, #0]
 8007266:	b90b      	cbnz	r3, 800726c <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8007268:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800726a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800726c:	490d      	ldr	r1, [pc, #52]	@ (80072a4 <HAL_InitTick+0x44>)
 800726e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007272:	4605      	mov	r5, r0
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	6808      	ldr	r0, [r1, #0]
 800727a:	fbb0 f0f3 	udiv	r0, r0, r3
 800727e:	f000 fd95 	bl	8007dac <HAL_SYSTICK_Config>
 8007282:	4604      	mov	r4, r0
 8007284:	2800      	cmp	r0, #0
 8007286:	d1ef      	bne.n	8007268 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007288:	2d0f      	cmp	r5, #15
 800728a:	d8ed      	bhi.n	8007268 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800728c:	4602      	mov	r2, r0
 800728e:	4629      	mov	r1, r5
 8007290:	f04f 30ff 	mov.w	r0, #4294967295
 8007294:	f000 fd40 	bl	8007d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007298:	6075      	str	r5, [r6, #4]
 800729a:	4620      	mov	r0, r4
}
 800729c:	bd70      	pop	{r4, r5, r6, pc}
 800729e:	bf00      	nop
 80072a0:	200001e4 	.word	0x200001e4
 80072a4:	200001e0 	.word	0x200001e0

080072a8 <HAL_Init>:
{
 80072a8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072aa:	2003      	movs	r0, #3
 80072ac:	f000 fd22 	bl	8007cf4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80072b0:	2000      	movs	r0, #0
 80072b2:	f7ff ffd5 	bl	8007260 <HAL_InitTick>
 80072b6:	b110      	cbz	r0, 80072be <HAL_Init+0x16>
    status = HAL_ERROR;
 80072b8:	2401      	movs	r4, #1
}
 80072ba:	4620      	mov	r0, r4
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	4604      	mov	r4, r0
    HAL_MspInit();
 80072c0:	f7ff ffcc 	bl	800725c <HAL_MspInit>
}
 80072c4:	4620      	mov	r0, r4
 80072c6:	bd10      	pop	{r4, pc}

080072c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80072c8:	4a03      	ldr	r2, [pc, #12]	@ (80072d8 <HAL_IncTick+0x10>)
 80072ca:	4b04      	ldr	r3, [pc, #16]	@ (80072dc <HAL_IncTick+0x14>)
 80072cc:	6811      	ldr	r1, [r2, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	440b      	add	r3, r1
 80072d2:	6013      	str	r3, [r2, #0]
}
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20002f14 	.word	0x20002f14
 80072dc:	200001e4 	.word	0x200001e4

080072e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80072e0:	4b01      	ldr	r3, [pc, #4]	@ (80072e8 <HAL_GetTick+0x8>)
 80072e2:	6818      	ldr	r0, [r3, #0]
}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20002f14 	.word	0x20002f14

080072ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80072f0:	f7ff fff6 	bl	80072e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80072f6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80072f8:	d002      	beq.n	8007300 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80072fa:	4b04      	ldr	r3, [pc, #16]	@ (800730c <HAL_Delay+0x20>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007300:	f7ff ffee 	bl	80072e0 <HAL_GetTick>
 8007304:	1b40      	subs	r0, r0, r5
 8007306:	42a0      	cmp	r0, r4
 8007308:	d3fa      	bcc.n	8007300 <HAL_Delay+0x14>
  {
  }
}
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	200001e4 	.word	0x200001e4

08007310 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007310:	b530      	push	{r4, r5, lr}
 8007312:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007314:	2300      	movs	r3, #0
 8007316:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007318:	2800      	cmp	r0, #0
 800731a:	f000 8087 	beq.w	800742c <HAL_ADC_Init+0x11c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800731e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8007320:	4604      	mov	r4, r0
 8007322:	2d00      	cmp	r5, #0
 8007324:	f000 8087 	beq.w	8007436 <HAL_ADC_Init+0x126>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007328:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800732a:	6893      	ldr	r3, [r2, #8]
 800732c:	0098      	lsls	r0, r3, #2
 800732e:	d505      	bpl.n	800733c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007330:	6893      	ldr	r3, [r2, #8]
 8007332:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007336:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800733a:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800733c:	6893      	ldr	r3, [r2, #8]
 800733e:	00d9      	lsls	r1, r3, #3
 8007340:	d419      	bmi.n	8007376 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007342:	4b5b      	ldr	r3, [pc, #364]	@ (80074b0 <HAL_ADC_Init+0x1a0>)
 8007344:	485b      	ldr	r0, [pc, #364]	@ (80074b4 <HAL_ADC_Init+0x1a4>)
 8007346:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8007348:	6891      	ldr	r1, [r2, #8]
 800734a:	099b      	lsrs	r3, r3, #6
 800734c:	fba0 0303 	umull	r0, r3, r0, r3
 8007350:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8007354:	099b      	lsrs	r3, r3, #6
 8007356:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800735a:	3301      	adds	r3, #1
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8007362:	6091      	str	r1, [r2, #8]
 8007364:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	b12b      	cbz	r3, 8007376 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	3b01      	subs	r3, #1
 800736e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f9      	bne.n	800736a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007376:	6893      	ldr	r3, [r2, #8]
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	d45a      	bmi.n	8007432 <HAL_ADC_Init+0x122>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800737c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800737e:	f043 0310 	orr.w	r3, r3, #16
 8007382:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007384:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007386:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007388:	4303      	orrs	r3, r0
 800738a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800738c:	6893      	ldr	r3, [r2, #8]
 800738e:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007392:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007394:	d146      	bne.n	8007424 <HAL_ADC_Init+0x114>
 8007396:	06dd      	lsls	r5, r3, #27
 8007398:	d444      	bmi.n	8007424 <HAL_ADC_Init+0x114>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800739a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800739c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80073a0:	f043 0302 	orr.w	r3, r3, #2
 80073a4:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80073a6:	6893      	ldr	r3, [r2, #8]
 80073a8:	07d9      	lsls	r1, r3, #31
 80073aa:	d40a      	bmi.n	80073c2 <HAL_ADC_Init+0xb2>
 80073ac:	4b42      	ldr	r3, [pc, #264]	@ (80074b8 <HAL_ADC_Init+0x1a8>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	07db      	lsls	r3, r3, #31
 80073b2:	d406      	bmi.n	80073c2 <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80073b4:	4941      	ldr	r1, [pc, #260]	@ (80074bc <HAL_ADC_Init+0x1ac>)
 80073b6:	6865      	ldr	r5, [r4, #4]
 80073b8:	688b      	ldr	r3, [r1, #8]
 80073ba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80073be:	432b      	orrs	r3, r5
 80073c0:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80073c2:	68e5      	ldr	r5, [r4, #12]
 80073c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80073c6:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80073ca:	432b      	orrs	r3, r5
 80073cc:	68a5      	ldr	r5, [r4, #8]
 80073ce:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80073d0:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80073d2:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80073d4:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80073d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80073dc:	d049      	beq.n	8007472 <HAL_ADC_Init+0x162>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073de:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80073e0:	b121      	cbz	r1, 80073ec <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80073e2:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80073e4:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80073e8:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80073ea:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80073ec:	68d5      	ldr	r5, [r2, #12]
 80073ee:	4934      	ldr	r1, [pc, #208]	@ (80074c0 <HAL_ADC_Init+0x1b0>)
 80073f0:	4029      	ands	r1, r5
 80073f2:	4319      	orrs	r1, r3
 80073f4:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073f6:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80073f8:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073fa:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	430b      	orrs	r3, r1
 8007404:	d01d      	beq.n	8007442 <HAL_ADC_Init+0x132>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d037      	beq.n	800747c <HAL_ADC_Init+0x16c>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800740c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800740e:	f023 030f 	bic.w	r3, r3, #15
 8007412:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007414:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8007420:	b003      	add	sp, #12
 8007422:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007424:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007426:	f043 0310 	orr.w	r3, r3, #16
 800742a:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800742c:	2001      	movs	r0, #1
}
 800742e:	b003      	add	sp, #12
 8007430:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007432:	2000      	movs	r0, #0
 8007434:	e7aa      	b.n	800738c <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8007436:	f7fe fa05 	bl	8005844 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800743a:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800743c:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8007440:	e772      	b.n	8007328 <HAL_ADC_Init+0x18>
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007442:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007446:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007448:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800744a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800744c:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8007450:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007452:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8007456:	f021 0106 	bic.w	r1, r1, #6
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800745a:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800745c:	430b      	orrs	r3, r1
 800745e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8007460:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8007464:	2b01      	cmp	r3, #1
 8007466:	d011      	beq.n	800748c <HAL_ADC_Init+0x17c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007468:	6913      	ldr	r3, [r2, #16]
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	6113      	str	r3, [r2, #16]
 8007470:	e7c9      	b.n	8007406 <HAL_ADC_Init+0xf6>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007472:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007474:	3901      	subs	r1, #1
 8007476:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800747a:	e7b0      	b.n	80073de <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800747c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	f021 010f 	bic.w	r1, r1, #15
 8007484:	3b01      	subs	r3, #1
 8007486:	430b      	orrs	r3, r1
 8007488:	6313      	str	r3, [r2, #48]	@ 0x30
 800748a:	e7c3      	b.n	8007414 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 800748c:	6911      	ldr	r1, [r2, #16]
 800748e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007490:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8007492:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8007496:	f021 0104 	bic.w	r1, r1, #4
 800749a:	432b      	orrs	r3, r5
 800749c:	430b      	orrs	r3, r1
 800749e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80074a0:	430b      	orrs	r3, r1
 80074a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80074a4:	430b      	orrs	r3, r1
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	6113      	str	r3, [r2, #16]
 80074ac:	e7ab      	b.n	8007406 <HAL_ADC_Init+0xf6>
 80074ae:	bf00      	nop
 80074b0:	200001e0 	.word	0x200001e0
 80074b4:	053e2d63 	.word	0x053e2d63
 80074b8:	50040000 	.word	0x50040000
 80074bc:	50040300 	.word	0x50040300
 80074c0:	fff0c007 	.word	0xfff0c007

080074c4 <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 80074c4:	6d80      	ldr	r0, [r0, #88]	@ 0x58
}
 80074c6:	4770      	bx	lr

080074c8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80074c8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	f012 0f04 	tst.w	r2, #4
{
 80074d0:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074d6:	d101      	bne.n	80074dc <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80074d8:	0716      	lsls	r6, r2, #28
 80074da:	d53c      	bpl.n	8007556 <ADC_ConversionStop+0x8e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	0195      	lsls	r5, r2, #6
 80074e0:	d504      	bpl.n	80074ec <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80074e2:	8b20      	ldrh	r0, [r4, #24]
 80074e4:	f240 1201 	movw	r2, #257	@ 0x101
 80074e8:	4290      	cmp	r0, r2
 80074ea:	d045      	beq.n	8007578 <ADC_ConversionStop+0xb0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80074ec:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	d033      	beq.n	800755a <ADC_ConversionStop+0x92>
 80074f2:	0750      	lsls	r0, r2, #29
 80074f4:	d502      	bpl.n	80074fc <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	0792      	lsls	r2, r2, #30
 80074fa:	d559      	bpl.n	80075b0 <ADC_ConversionStop+0xe8>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80074fc:	2901      	cmp	r1, #1
 80074fe:	d055      	beq.n	80075ac <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	0710      	lsls	r0, r2, #28
 8007504:	d50a      	bpl.n	800751c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	0792      	lsls	r2, r2, #30
 800750a:	d407      	bmi.n	800751c <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007512:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8007516:	f042 0220 	orr.w	r2, r2, #32
 800751a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800751c:	2903      	cmp	r1, #3
 800751e:	d145      	bne.n	80075ac <ADC_ConversionStop+0xe4>
 8007520:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007522:	f7ff fedd 	bl	80072e0 <HAL_GetTick>

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007526:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007528:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	421d      	tst	r5, r3
 800752e:	d012      	beq.n	8007556 <ADC_ConversionStop+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007530:	f7ff fed6 	bl	80072e0 <HAL_GetTick>
 8007534:	1b80      	subs	r0, r0, r6
 8007536:	2805      	cmp	r0, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007538:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800753a:	d9f6      	bls.n	800752a <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	422a      	tst	r2, r5
 8007540:	d0f3      	beq.n	800752a <ADC_ConversionStop+0x62>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007544:	f043 0310 	orr.w	r3, r3, #16
 8007548:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800754a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800754c:	f043 0301 	orr.w	r3, r3, #1
 8007550:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8007552:	2001      	movs	r0, #1

  }

  /* Return HAL status */
  return HAL_OK;
}
 8007554:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8007556:	2000      	movs	r0, #0
}
 8007558:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800755a:	0716      	lsls	r6, r2, #28
 800755c:	d50a      	bpl.n	8007574 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	0795      	lsls	r5, r2, #30
 8007562:	d407      	bmi.n	8007574 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800756a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800756e:	f042 0220 	orr.w	r2, r2, #32
 8007572:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007574:	2508      	movs	r5, #8
 8007576:	e7d4      	b.n	8007522 <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	0650      	lsls	r0, r2, #25
 800757c:	d406      	bmi.n	800758c <ADC_ConversionStop+0xc4>
 800757e:	4a11      	ldr	r2, [pc, #68]	@ (80075c4 <ADC_ConversionStop+0xfc>)
 8007580:	e001      	b.n	8007586 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007582:	3a01      	subs	r2, #1
 8007584:	d0dd      	beq.n	8007542 <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	0649      	lsls	r1, r1, #25
 800758a:	d5fa      	bpl.n	8007582 <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800758c:	2240      	movs	r2, #64	@ 0x40
 800758e:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	0756      	lsls	r6, r2, #29
 8007594:	d50a      	bpl.n	80075ac <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	0795      	lsls	r5, r2, #30
 800759a:	d407      	bmi.n	80075ac <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80075a2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80075a6:	f042 0210 	orr.w	r2, r2, #16
 80075aa:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80075ac:	2504      	movs	r5, #4
 80075ae:	e7b8      	b.n	8007522 <ADC_ConversionStop+0x5a>
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80075b6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80075ba:	f042 0210 	orr.w	r2, r2, #16
 80075be:	609a      	str	r2, [r3, #8]
}
 80075c0:	e79c      	b.n	80074fc <ADC_ConversionStop+0x34>
 80075c2:	bf00      	nop
 80075c4:	a3400000 	.word	0xa3400000

080075c8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075c8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	07d2      	lsls	r2, r2, #31
 80075ce:	d501      	bpl.n	80075d4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80075d0:	2000      	movs	r0, #0
}
 80075d2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80075d4:	6899      	ldr	r1, [r3, #8]
 80075d6:	4a19      	ldr	r2, [pc, #100]	@ (800763c <ADC_Enable+0x74>)
 80075d8:	4211      	tst	r1, r2
{
 80075da:	b570      	push	{r4, r5, r6, lr}
 80075dc:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80075de:	d009      	beq.n	80075f4 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075e0:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80075e2:	f043 0310 	orr.w	r3, r3, #16
 80075e6:	65b3      	str	r3, [r6, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075e8:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	65f3      	str	r3, [r6, #92]	@ 0x5c
      return HAL_ERROR;
 80075f0:	2001      	movs	r0, #1
}
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	4d12      	ldr	r5, [pc, #72]	@ (8007640 <ADC_Enable+0x78>)
 80075f8:	402a      	ands	r2, r5
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007600:	f7ff fe6e 	bl	80072e0 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007604:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007606:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	07d0      	lsls	r0, r2, #31
 800760c:	d413      	bmi.n	8007636 <ADC_Enable+0x6e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	07d1      	lsls	r1, r2, #31
 8007612:	d404      	bmi.n	800761e <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	402a      	ands	r2, r5
 8007618:	f042 0201 	orr.w	r2, r2, #1
 800761c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800761e:	f7ff fe5f 	bl	80072e0 <HAL_GetTick>
 8007622:	1b03      	subs	r3, r0, r4
 8007624:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007626:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007628:	d9ee      	bls.n	8007608 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	07d2      	lsls	r2, r2, #31
 800762e:	d5d7      	bpl.n	80075e0 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	07d0      	lsls	r0, r2, #31
 8007634:	d5eb      	bpl.n	800760e <ADC_Enable+0x46>
  return HAL_OK;
 8007636:	2000      	movs	r0, #0
}
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	bf00      	nop
 800763c:	8000003f 	.word	0x8000003f
 8007640:	7fffffc0 	.word	0x7fffffc0

08007644 <HAL_ADC_Start>:
{
 8007644:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007646:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007648:	689d      	ldr	r5, [r3, #8]
 800764a:	f015 0504 	ands.w	r5, r5, #4
 800764e:	d133      	bne.n	80076b8 <HAL_ADC_Start+0x74>
    __HAL_LOCK(hadc);
 8007650:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8007654:	2b01      	cmp	r3, #1
 8007656:	4604      	mov	r4, r0
 8007658:	d02e      	beq.n	80076b8 <HAL_ADC_Start+0x74>
 800765a:	2301      	movs	r3, #1
 800765c:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8007660:	f7ff ffb2 	bl	80075c8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007664:	bb50      	cbnz	r0, 80076bc <HAL_ADC_Start+0x78>
      ADC_STATE_CLR_SET(hadc->State,
 8007666:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007668:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800766c:	f023 0301 	bic.w	r3, r3, #1
 8007670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007674:	65a3      	str	r3, [r4, #88]	@ 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007676:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007678:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800767a:	bf48      	it	mi
 800767c:	6de3      	ldrmi	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800767e:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc);
 8007680:	bf52      	itee	pl
 8007682:	65e0      	strpl	r0, [r4, #92]	@ 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007684:	f023 0306 	bicmi.w	r3, r3, #6
 8007688:	65e3      	strmi	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800768a:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 800768c:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800768e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8007690:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007694:	68d3      	ldr	r3, [r2, #12]
 8007696:	019b      	lsls	r3, r3, #6
 8007698:	d505      	bpl.n	80076a6 <HAL_ADC_Start+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800769a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800769c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80076a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80076a4:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 80076a6:	6893      	ldr	r3, [r2, #8]
 80076a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80076b0:	f043 0304 	orr.w	r3, r3, #4
 80076b4:	6093      	str	r3, [r2, #8]
}
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 80076b8:	2002      	movs	r0, #2
}
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80076bc:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	bf00      	nop

080076c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80076c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80076c6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	0795      	lsls	r5, r2, #30
 80076cc:	d502      	bpl.n	80076d4 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076ce:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80076d0:	2000      	movs	r0, #0
}
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	07d4      	lsls	r4, r2, #31
 80076d8:	d5fa      	bpl.n	80076d0 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	f002 020d 	and.w	r2, r2, #13
 80076e0:	2a01      	cmp	r2, #1
 80076e2:	4604      	mov	r4, r0
 80076e4:	d009      	beq.n	80076fa <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076e8:	f043 0310 	orr.w	r3, r3, #16
 80076ec:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076ee:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80076f0:	f043 0301 	orr.w	r3, r3, #1
 80076f4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80076f6:	2001      	movs	r0, #1
}
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007700:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007704:	2103      	movs	r1, #3
 8007706:	f042 0202 	orr.w	r2, r2, #2
 800770a:	609a      	str	r2, [r3, #8]
 800770c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800770e:	f7ff fde7 	bl	80072e0 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8007718:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800771a:	d403      	bmi.n	8007724 <ADC_Disable+0x60>
 800771c:	e7d8      	b.n	80076d0 <ADC_Disable+0xc>
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	07db      	lsls	r3, r3, #31
 8007722:	d5d5      	bpl.n	80076d0 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007724:	f7ff fddc 	bl	80072e0 <HAL_GetTick>
 8007728:	1b40      	subs	r0, r0, r5
 800772a:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800772c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800772e:	d9f6      	bls.n	800771e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	07d2      	lsls	r2, r2, #31
 8007734:	d5f3      	bpl.n	800771e <ADC_Disable+0x5a>
 8007736:	e7d6      	b.n	80076e6 <ADC_Disable+0x22>

08007738 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8007738:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 800773c:	2b01      	cmp	r3, #1
 800773e:	d01d      	beq.n	800777c <HAL_ADC_Stop+0x44>
 8007740:	2301      	movs	r3, #1
{
 8007742:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007744:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8007746:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800774a:	4604      	mov	r4, r0
 800774c:	f7ff febc 	bl	80074c8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8007750:	b118      	cbz	r0, 800775a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8007752:	2300      	movs	r3, #0
 8007754:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8007758:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff ffb2 	bl	80076c4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8007760:	2800      	cmp	r0, #0
 8007762:	d1f6      	bne.n	8007752 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8007764:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007766:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8007774:	2300      	movs	r3, #0
 8007776:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 800777a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800777c:	2002      	movs	r0, #2
}
 800777e:	4770      	bx	lr

08007780 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007780:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007782:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 8007786:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8007788:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800778a:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 800778c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800778e:	d03f      	beq.n	8007810 <HAL_ADCEx_Calibration_Start+0x90>
 8007790:	2301      	movs	r3, #1
 8007792:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007796:	4604      	mov	r4, r0
 8007798:	460d      	mov	r5, r1
 800779a:	f7ff ff93 	bl	80076c4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800779e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 80077a0:	b9e0      	cbnz	r0, 80077dc <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 80077a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80077a6:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80077aa:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80077ac:	f043 0302 	orr.w	r3, r3, #2
 80077b0:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 80077b2:	6893      	ldr	r3, [r2, #8]
 80077b4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80077b8:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 80077bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80077c0:	430b      	orrs	r3, r1
 80077c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077c6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80077c8:	6893      	ldr	r3, [r2, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	db0e      	blt.n	80077ec <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077d0:	f023 0303 	bic.w	r3, r3, #3
 80077d4:	f043 0301 	orr.w	r3, r3, #1
 80077d8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80077da:	e002      	b.n	80077e2 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077dc:	f043 0310 	orr.w	r3, r3, #16
 80077e0:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077e2:	2300      	movs	r3, #0
 80077e4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80077e8:	b003      	add	sp, #12
 80077ea:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 80077ec:	9b01      	ldr	r3, [sp, #4]
 80077ee:	3301      	adds	r3, #1
 80077f0:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80077f2:	9b01      	ldr	r3, [sp, #4]
 80077f4:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80077f8:	d3e6      	bcc.n	80077c8 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80077fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077fc:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8007800:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8007802:	f043 0310 	orr.w	r3, r3, #16
 8007806:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8007808:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 800780c:	2001      	movs	r0, #1
 800780e:	e7eb      	b.n	80077e8 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8007810:	2002      	movs	r0, #2
}
 8007812:	b003      	add	sp, #12
 8007814:	bd30      	pop	{r4, r5, pc}
 8007816:	bf00      	nop

08007818 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8007818:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800781a:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800781e:	6904      	ldr	r4, [r0, #16]
{
 8007820:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8007822:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8007824:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8007826:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8007828:	f000 8180 	beq.w	8007b2c <HAL_ADCEx_InjectedConfigChannel+0x314>
 800782c:	4684      	mov	ip, r0
 800782e:	2301      	movs	r3, #1
 8007830:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8007834:	e9d1 2000 	ldrd	r2, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007838:	f8dc 3000 	ldr.w	r3, [ip]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800783c:	2c00      	cmp	r4, #0
 800783e:	d064      	beq.n	800790a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8007840:	698c      	ldr	r4, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007842:	2c01      	cmp	r4, #1
 8007844:	d061      	beq.n	800790a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007846:	f8dc 6064 	ldr.w	r6, [ip, #100]	@ 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800784a:	f000 001f 	and.w	r0, r0, #31
 800784e:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8007852:	4085      	lsls	r5, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007854:	2e00      	cmp	r6, #0
 8007856:	f040 80c6 	bne.w	80079e6 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800785a:	6a08      	ldr	r0, [r1, #32]
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800785c:	3c01      	subs	r4, #1
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800785e:	2800      	cmp	r0, #0
 8007860:	f000 81c9 	beq.w	8007bf6 <HAL_ADCEx_InjectedConfigChannel+0x3de>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8007864:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007866:	f000 003c 	and.w	r0, r0, #60	@ 0x3c
 800786a:	4320      	orrs	r0, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800786c:	4330      	orrs	r0, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800786e:	4328      	orrs	r0, r5
 8007870:	e9cc 0418 	strd	r0, r4, [ip, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007874:	6898      	ldr	r0, [r3, #8]
 8007876:	0707      	lsls	r7, r0, #28
 8007878:	d40d      	bmi.n	8007896 <HAL_ADCEx_InjectedConfigChannel+0x7e>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800787a:	7f88      	ldrb	r0, [r1, #30]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800787c:	7f4c      	ldrb	r4, [r1, #29]
      MODIFY_REG(hadc->Instance->CFGR,
 800787e:	0540      	lsls	r0, r0, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8007880:	2c00      	cmp	r4, #0
 8007882:	f040 80a6 	bne.w	80079d2 <HAL_ADCEx_InjectedConfigChannel+0x1ba>
      MODIFY_REG(hadc->Instance->CFGR,
 8007886:	68dc      	ldr	r4, [r3, #12]
 8007888:	7f0d      	ldrb	r5, [r1, #28]
 800788a:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 800788e:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8007892:	4320      	orrs	r0, r4
 8007894:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007896:	6898      	ldr	r0, [r3, #8]
 8007898:	f010 0004 	ands.w	r0, r0, #4
 800789c:	d04c      	beq.n	8007938 <HAL_ADCEx_InjectedConfigChannel+0x120>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800789e:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078a0:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078a2:	689c      	ldr	r4, [r3, #8]
 80078a4:	07e5      	lsls	r5, r4, #31
 80078a6:	d413      	bmi.n	80078d0 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80078a8:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80078aa:	4cab      	ldr	r4, [pc, #684]	@ (8007b58 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 80078ac:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 80078b0:	f006 0718 	and.w	r7, r6, #24
 80078b4:	40fc      	lsrs	r4, r7
 80078b6:	f3c2 0712 	ubfx	r7, r2, #0, #19
 80078ba:	4014      	ands	r4, r2
 80078bc:	ea25 0e07 	bic.w	lr, r5, r7
 80078c0:	ea44 040e 	orr.w	r4, r4, lr
 80078c4:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80078c8:	4ca4      	ldr	r4, [pc, #656]	@ (8007b5c <HAL_ADCEx_InjectedConfigChannel+0x344>)
 80078ca:	42a6      	cmp	r6, r4
 80078cc:	f000 80b7 	beq.w	8007a3e <HAL_ADCEx_InjectedConfigChannel+0x226>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80078d0:	49a3      	ldr	r1, [pc, #652]	@ (8007b60 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80078d2:	420a      	tst	r2, r1
 80078d4:	d014      	beq.n	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80078d6:	4da3      	ldr	r5, [pc, #652]	@ (8007b64 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 80078d8:	4ca3      	ldr	r4, [pc, #652]	@ (8007b68 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80078da:	68a9      	ldr	r1, [r5, #8]
 80078dc:	42a2      	cmp	r2, r4
 80078de:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 80078e2:	f000 80fe 	beq.w	8007ae2 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80078e6:	4ca1      	ldr	r4, [pc, #644]	@ (8007b6c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80078e8:	42a2      	cmp	r2, r4
 80078ea:	f000 8099 	beq.w	8007a20 <HAL_ADCEx_InjectedConfigChannel+0x208>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80078ee:	4ca0      	ldr	r4, [pc, #640]	@ (8007b70 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80078f0:	42a2      	cmp	r2, r4
 80078f2:	d105      	bne.n	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80078f4:	024a      	lsls	r2, r1, #9
 80078f6:	d403      	bmi.n	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80078f8:	4a9e      	ldr	r2, [pc, #632]	@ (8007b74 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	f000 81bd 	beq.w	8007c7a <HAL_ADCEx_InjectedConfigChannel+0x462>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007900:	2300      	movs	r3, #0
 8007902:	f88c 3054 	strb.w	r3, [ip, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8007906:	b003      	add	sp, #12
 8007908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800790a:	2808      	cmp	r0, #8
 800790c:	d1b2      	bne.n	8007874 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800790e:	6a08      	ldr	r0, [r1, #32]
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007910:	0c94      	lsrs	r4, r2, #18
 8007912:	f404 54f8 	and.w	r4, r4, #7936	@ 0x1f00
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007916:	b120      	cbz	r0, 8007922 <HAL_ADCEx_InjectedConfigChannel+0x10a>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007918:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800791a:	f000 003c 	and.w	r0, r0, #60	@ 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800791e:	4328      	orrs	r0, r5
 8007920:	4304      	orrs	r4, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8007922:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007924:	4d94      	ldr	r5, [pc, #592]	@ (8007b78 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8007926:	4028      	ands	r0, r5
 8007928:	4320      	orrs	r0, r4
 800792a:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800792c:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800792e:	f8cc 4060 	str.w	r4, [ip, #96]	@ 0x60
 8007932:	0707      	lsls	r7, r0, #28
 8007934:	d4af      	bmi.n	8007896 <HAL_ADCEx_InjectedConfigChannel+0x7e>
 8007936:	e7a0      	b.n	800787a <HAL_ADCEx_InjectedConfigChannel+0x62>
 8007938:	689c      	ldr	r4, [r3, #8]
 800793a:	0726      	lsls	r6, r4, #28
 800793c:	d4b1      	bmi.n	80078a2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800793e:	6a0c      	ldr	r4, [r1, #32]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8007940:	7f48      	ldrb	r0, [r1, #29]
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007942:	2c00      	cmp	r4, #0
 8007944:	d164      	bne.n	8007a10 <HAL_ADCEx_InjectedConfigChannel+0x1f8>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007946:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007948:	68d8      	ldr	r0, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800794a:	f000 8156 	beq.w	8007bfa <HAL_ADCEx_InjectedConfigChannel+0x3e2>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800794e:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8007952:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007954:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8007956:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
 800795a:	2c01      	cmp	r4, #1
 800795c:	f000 80f1 	beq.w	8007b42 <HAL_ADCEx_InjectedConfigChannel+0x32a>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8007960:	691c      	ldr	r4, [r3, #16]
 8007962:	f024 0402 	bic.w	r4, r4, #2
 8007966:	611c      	str	r4, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007968:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 800796a:	f3c2 5604 	ubfx	r6, r2, #20, #5
 800796e:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007970:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 8007972:	40b4      	lsls	r4, r6
 8007974:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007978:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 800797c:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007980:	f103 0714 	add.w	r7, r3, #20
 8007984:	f000 80d5 	beq.w	8007b32 <HAL_ADCEx_InjectedConfigChannel+0x31a>
  MODIFY_REG(*preg,
 8007988:	40b5      	lsls	r5, r6
 800798a:	58be      	ldr	r6, [r7, r2]
 800798c:	4034      	ands	r4, r6
 800798e:	432c      	orrs	r4, r5
 8007990:	50bc      	str	r4, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007992:	695a      	ldr	r2, [r3, #20]
 8007994:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007998:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800799a:	e9d1 7404 	ldrd	r7, r4, [r1, #16]
 800799e:	2f04      	cmp	r7, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80079a0:	68de      	ldr	r6, [r3, #12]
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80079a2:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079a4:	f103 0560 	add.w	r5, r3, #96	@ 0x60
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80079a8:	f000 80ee 	beq.w	8007b88 <HAL_ADCEx_InjectedConfigChannel+0x370>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80079ac:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80079b0:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 80079b2:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 80079b6:	40b4      	lsls	r4, r6
 80079b8:	4e70      	ldr	r6, [pc, #448]	@ (8007b7c <HAL_ADCEx_InjectedConfigChannel+0x364>)
 80079ba:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80079be:	ea0e 0606 	and.w	r6, lr, r6
 80079c2:	4316      	orrs	r6, r2
 80079c4:	4334      	orrs	r4, r6
 80079c6:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80079ca:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80079ce:	680a      	ldr	r2, [r1, #0]
}
 80079d0:	e767      	b.n	80078a2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
      MODIFY_REG(hadc->Instance->CFGR,
 80079d2:	68dc      	ldr	r4, [r3, #12]
 80079d4:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 80079d8:	4320      	orrs	r0, r4
 80079da:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80079dc:	6898      	ldr	r0, [r3, #8]
 80079de:	f010 0004 	ands.w	r0, r0, #4
 80079e2:	d0a9      	beq.n	8007938 <HAL_ADCEx_InjectedConfigChannel+0x120>
 80079e4:	e75b      	b.n	800789e <HAL_ADCEx_InjectedConfigChannel+0x86>
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80079e6:	f8dc 4060 	ldr.w	r4, [ip, #96]	@ 0x60
    hadc->InjectionConfig.ChannelCount--;
 80079ea:	3e01      	subs	r6, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80079ec:	432c      	orrs	r4, r5
    hadc->InjectionConfig.ChannelCount--;
 80079ee:	f8cc 6064 	str.w	r6, [ip, #100]	@ 0x64
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80079f2:	f8cc 4060 	str.w	r4, [ip, #96]	@ 0x60
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	f47f af3c 	bne.w	8007874 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80079fc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80079fe:	4d5e      	ldr	r5, [pc, #376]	@ (8007b78 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8007a00:	4028      	ands	r0, r5
 8007a02:	4320      	orrs	r0, r4
 8007a04:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007a06:	6898      	ldr	r0, [r3, #8]
 8007a08:	0707      	lsls	r7, r0, #28
 8007a0a:	f53f af44 	bmi.w	8007896 <HAL_ADCEx_InjectedConfigChannel+0x7e>
 8007a0e:	e734      	b.n	800787a <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8007a10:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8007a12:	2c00      	cmp	r4, #0
 8007a14:	d097      	beq.n	8007946 <HAL_ADCEx_InjectedConfigChannel+0x12e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8007a16:	2801      	cmp	r0, #1
 8007a18:	f000 8128 	beq.w	8007c6c <HAL_ADCEx_InjectedConfigChannel+0x454>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007a1c:	68d8      	ldr	r0, [r3, #12]
 8007a1e:	e796      	b.n	800794e <HAL_ADCEx_InjectedConfigChannel+0x136>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a20:	01c9      	lsls	r1, r1, #7
 8007a22:	f53f af6d 	bmi.w	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a26:	4a53      	ldr	r2, [pc, #332]	@ (8007b74 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	f47f af69 	bne.w	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007a2e:	68ab      	ldr	r3, [r5, #8]
 8007a30:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007a34:	4333      	orrs	r3, r6
 8007a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a3a:	60ab      	str	r3, [r5, #8]
}
 8007a3c:	e760      	b.n	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007a3e:	bb47      	cbnz	r7, 8007a92 <HAL_ADCEx_InjectedConfigChannel+0x27a>
 8007a40:	0e94      	lsrs	r4, r2, #26
 8007a42:	3401      	adds	r4, #1
 8007a44:	f004 051f 	and.w	r5, r4, #31
 8007a48:	2201      	movs	r2, #1
 8007a4a:	06a4      	lsls	r4, r4, #26
 8007a4c:	40aa      	lsls	r2, r5
 8007a4e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a52:	2d09      	cmp	r5, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007a54:	ea44 0402 	orr.w	r4, r4, r2
 8007a58:	eb05 0245 	add.w	r2, r5, r5, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a5c:	d93f      	bls.n	8007ade <HAL_ADCEx_InjectedConfigChannel+0x2c6>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007a5e:	3a1e      	subs	r2, #30
 8007a60:	0512      	lsls	r2, r2, #20
 8007a62:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a66:	4314      	orrs	r4, r2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007a68:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8007a6a:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007a6c:	f005 0504 	and.w	r5, r5, #4
 8007a70:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8007a74:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8007a78:	fa02 f704 	lsl.w	r7, r2, r4
 8007a7c:	f04f 0e07 	mov.w	lr, #7
 8007a80:	5972      	ldr	r2, [r6, r5]
 8007a82:	fa0e f404 	lsl.w	r4, lr, r4
 8007a86:	ea22 0204 	bic.w	r2, r2, r4
 8007a8a:	433a      	orrs	r2, r7
 8007a8c:	5172      	str	r2, [r6, r5]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8007a8e:	680a      	ldr	r2, [r1, #0]
}
 8007a90:	e71e      	b.n	80078d0 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a92:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007a96:	fab4 f484 	clz	r4, r4
 8007a9a:	3401      	adds	r4, #1
 8007a9c:	f004 041f 	and.w	r4, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007aa0:	2c09      	cmp	r4, #9
 8007aa2:	f200 80ae 	bhi.w	8007c02 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8007aa6:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007aaa:	fab4 f484 	clz	r4, r4
 8007aae:	fa92 f5a2 	rbit	r5, r2
 8007ab2:	fab5 f585 	clz	r5, r5
 8007ab6:	3401      	adds	r4, #1
 8007ab8:	3501      	adds	r5, #1
 8007aba:	2601      	movs	r6, #1
 8007abc:	06a4      	lsls	r4, r4, #26
 8007abe:	f005 051f 	and.w	r5, r5, #31
 8007ac2:	fa06 f505 	lsl.w	r5, r6, r5
 8007ac6:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007aca:	432c      	orrs	r4, r5
 8007acc:	fa92 f2a2 	rbit	r2, r2
 8007ad0:	fab2 f282 	clz	r2, r2
 8007ad4:	4432      	add	r2, r6
 8007ad6:	f002 021f 	and.w	r2, r2, #31
 8007ada:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007ade:	0512      	lsls	r2, r2, #20
 8007ae0:	e7c1      	b.n	8007a66 <HAL_ADCEx_InjectedConfigChannel+0x24e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007ae2:	020c      	lsls	r4, r1, #8
 8007ae4:	f53f af0c 	bmi.w	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ae8:	4a22      	ldr	r2, [pc, #136]	@ (8007b74 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	f47f af08 	bne.w	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007af0:	68ab      	ldr	r3, [r5, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8007af2:	4a23      	ldr	r2, [pc, #140]	@ (8007b80 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8007af4:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007af8:	4333      	orrs	r3, r6
 8007afa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007afe:	60ab      	str	r3, [r5, #8]
 8007b00:	6813      	ldr	r3, [r2, #0]
 8007b02:	4a20      	ldr	r2, [pc, #128]	@ (8007b84 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8007b04:	099b      	lsrs	r3, r3, #6
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	099b      	lsrs	r3, r3, #6
 8007b0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	3318      	adds	r3, #24
 8007b14:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f43f aef1 	beq.w	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
          wait_loop_index--;
 8007b1e:	9b01      	ldr	r3, [sp, #4]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1f9      	bne.n	8007b1e <HAL_ADCEx_InjectedConfigChannel+0x306>
 8007b2a:	e6e9      	b.n	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  __HAL_LOCK(hadc);
 8007b2c:	2002      	movs	r0, #2
}
 8007b2e:	b003      	add	sp, #12
 8007b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(*preg,
 8007b32:	58bd      	ldr	r5, [r7, r2]
 8007b34:	402c      	ands	r4, r5
 8007b36:	50bc      	str	r4, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007b38:	695a      	ldr	r2, [r3, #20]
 8007b3a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007b3e:	615a      	str	r2, [r3, #20]
}
 8007b40:	e72b      	b.n	800799a <HAL_ADCEx_InjectedConfigChannel+0x182>
      MODIFY_REG(hadc->Instance->CFGR2,
 8007b42:	e9d1 460b 	ldrd	r4, r6, [r1, #44]	@ 0x2c
 8007b46:	691d      	ldr	r5, [r3, #16]
 8007b48:	4334      	orrs	r4, r6
 8007b4a:	f425 75ff 	bic.w	r5, r5, #510	@ 0x1fe
 8007b4e:	432c      	orrs	r4, r5
 8007b50:	f044 0402 	orr.w	r4, r4, #2
 8007b54:	611c      	str	r4, [r3, #16]
 8007b56:	e707      	b.n	8007968 <HAL_ADCEx_InjectedConfigChannel+0x150>
 8007b58:	0007ffff 	.word	0x0007ffff
 8007b5c:	407f0000 	.word	0x407f0000
 8007b60:	80080000 	.word	0x80080000
 8007b64:	50040300 	.word	0x50040300
 8007b68:	c7520000 	.word	0xc7520000
 8007b6c:	cb840000 	.word	0xcb840000
 8007b70:	80000001 	.word	0x80000001
 8007b74:	50040000 	.word	0x50040000
 8007b78:	82082000 	.word	0x82082000
 8007b7c:	03fff000 	.word	0x03fff000
 8007b80:	200001e0 	.word	0x200001e0
 8007b84:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007b88:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8007b8a:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007b8c:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007b90:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007b94:	2c00      	cmp	r4, #0
 8007b96:	d051      	beq.n	8007c3c <HAL_ADCEx_InjectedConfigChannel+0x424>
 8007b98:	fa92 f4a2 	rbit	r4, r2
 8007b9c:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007ba0:	42a6      	cmp	r6, r4
 8007ba2:	f000 8096 	beq.w	8007cd2 <HAL_ADCEx_InjectedConfigChannel+0x4ba>
 8007ba6:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8007ba8:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007baa:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007bae:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007bb2:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007bb6:	42b4      	cmp	r4, r6
 8007bb8:	d078      	beq.n	8007cac <HAL_ADCEx_InjectedConfigChannel+0x494>
 8007bba:	68ac      	ldr	r4, [r5, #8]
 8007bbc:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bbe:	f105 0708 	add.w	r7, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007bc2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007bc6:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007bca:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007bce:	42b4      	cmp	r4, r6
 8007bd0:	d05b      	beq.n	8007c8a <HAL_ADCEx_InjectedConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007bd2:	68ec      	ldr	r4, [r5, #12]
 8007bd4:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007bd6:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007bd8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007bdc:	fa92 f4a2 	rbit	r4, r2
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007be0:	fab4 f484 	clz	r4, r4
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007be4:	42b4      	cmp	r4, r6
 8007be6:	f47f ae5c 	bne.w	80078a2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
  MODIFY_REG(*preg,
 8007bea:	682a      	ldr	r2, [r5, #0]
 8007bec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bf0:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8007bf2:	680a      	ldr	r2, [r1, #0]
}
 8007bf4:	e655      	b.n	80078a2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	e639      	b.n	800786e <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007bfa:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8007bfe:	60d8      	str	r0, [r3, #12]
 8007c00:	e6a8      	b.n	8007954 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8007c02:	fa92 f4a2 	rbit	r4, r2
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8007c06:	fab4 f484 	clz	r4, r4
 8007c0a:	fa92 f5a2 	rbit	r5, r2
 8007c0e:	fab5 f585 	clz	r5, r5
 8007c12:	3401      	adds	r4, #1
 8007c14:	3501      	adds	r5, #1
 8007c16:	2601      	movs	r6, #1
 8007c18:	06a4      	lsls	r4, r4, #26
 8007c1a:	f005 051f 	and.w	r5, r5, #31
 8007c1e:	fa06 f505 	lsl.w	r5, r6, r5
 8007c22:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8007c26:	432c      	orrs	r4, r5
 8007c28:	fa92 f2a2 	rbit	r2, r2
 8007c2c:	fab2 f282 	clz	r2, r2
 8007c30:	4432      	add	r2, r6
 8007c32:	f002 021f 	and.w	r2, r2, #31
 8007c36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007c3a:	e710      	b.n	8007a5e <HAL_ADCEx_InjectedConfigChannel+0x246>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007c3c:	f3c2 6484 	ubfx	r4, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007c40:	42a6      	cmp	r6, r4
 8007c42:	d046      	beq.n	8007cd2 <HAL_ADCEx_InjectedConfigChannel+0x4ba>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007c44:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8007c46:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007c48:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007c4c:	42a6      	cmp	r6, r4
 8007c4e:	d02d      	beq.n	8007cac <HAL_ADCEx_InjectedConfigChannel+0x494>
 8007c50:	68ae      	ldr	r6, [r5, #8]
 8007c52:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007c54:	f105 0708 	add.w	r7, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007c58:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007c5c:	42a6      	cmp	r6, r4
 8007c5e:	d014      	beq.n	8007c8a <HAL_ADCEx_InjectedConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007c60:	68ee      	ldr	r6, [r5, #12]
 8007c62:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007c64:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007c66:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8007c6a:	e7bb      	b.n	8007be4 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c6c:	f8dc 4058 	ldr.w	r4, [ip, #88]	@ 0x58
 8007c70:	f044 0420 	orr.w	r4, r4, #32
 8007c74:	f8cc 4058 	str.w	r4, [ip, #88]	@ 0x58
        tmp_hal_status = HAL_ERROR;
 8007c78:	e66d      	b.n	8007956 <HAL_ADCEx_InjectedConfigChannel+0x13e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007c7a:	68ab      	ldr	r3, [r5, #8]
 8007c7c:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8007c80:	4333      	orrs	r3, r6
 8007c82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c86:	60ab      	str	r3, [r5, #8]
}
 8007c88:	e63a      	b.n	8007900 <HAL_ADCEx_InjectedConfigChannel+0xe8>
  MODIFY_REG(*preg,
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007c90:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007c92:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007c94:	680a      	ldr	r2, [r1, #0]
 8007c96:	68ee      	ldr	r6, [r5, #12]
 8007c98:	f3c2 0412 	ubfx	r4, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007c9c:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007c9e:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007ca2:	2c00      	cmp	r4, #0
 8007ca4:	d19a      	bne.n	8007bdc <HAL_ADCEx_InjectedConfigChannel+0x3c4>
 8007ca6:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8007caa:	e79b      	b.n	8007be4 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
  MODIFY_REG(*preg,
 8007cac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007cae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007cb2:	665a      	str	r2, [r3, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007cb4:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007cb6:	680a      	ldr	r2, [r1, #0]
 8007cb8:	68ae      	ldr	r6, [r5, #8]
 8007cba:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007cbe:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cc2:	f105 0708 	add.w	r7, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	f47f af7d 	bne.w	8007bc6 <HAL_ADCEx_InjectedConfigChannel+0x3ae>
 8007ccc:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8007cd0:	e7c4      	b.n	8007c5c <HAL_ADCEx_InjectedConfigChannel+0x444>
  MODIFY_REG(*preg,
 8007cd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007cd4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007cd8:	661a      	str	r2, [r3, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007cda:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007cdc:	680a      	ldr	r2, [r1, #0]
 8007cde:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8007ce0:	f3c2 0412 	ubfx	r4, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ce4:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007ce8:	2c00      	cmp	r4, #0
 8007cea:	f47f af60 	bne.w	8007bae <HAL_ADCEx_InjectedConfigChannel+0x396>
 8007cee:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8007cf2:	e7ab      	b.n	8007c4c <HAL_ADCEx_InjectedConfigChannel+0x434>

08007cf4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007cf4:	4907      	ldr	r1, [pc, #28]	@ (8007d14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007cf6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cf8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007cfa:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cfe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d02:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d04:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d06:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8007d0e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	e000ed00 	.word	0xe000ed00

08007d18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d18:	4b1b      	ldr	r3, [pc, #108]	@ (8007d88 <HAL_NVIC_SetPriority+0x70>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d20:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d22:	f1c3 0e07 	rsb	lr, r3, #7
 8007d26:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d2a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d2e:	bf28      	it	cs
 8007d30:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d34:	f1bc 0f06 	cmp.w	ip, #6
 8007d38:	d91c      	bls.n	8007d74 <HAL_NVIC_SetPriority+0x5c>
 8007d3a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	fa03 f30c 	lsl.w	r3, r3, ip
 8007d46:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4e:	fa03 f30e 	lsl.w	r3, r3, lr
 8007d52:	ea21 0303 	bic.w	r3, r1, r3
 8007d56:	fa03 f30c 	lsl.w	r3, r3, ip
 8007d5a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d5c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8007d5e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d60:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8007d62:	db0a      	blt.n	8007d7a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d64:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8007d68:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007d6c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007d70:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d74:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d76:	4694      	mov	ip, r2
 8007d78:	e7e7      	b.n	8007d4a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d7a:	4a04      	ldr	r2, [pc, #16]	@ (8007d8c <HAL_NVIC_SetPriority+0x74>)
 8007d7c:	f000 000f 	and.w	r0, r0, #15
 8007d80:	4402      	add	r2, r0
 8007d82:	7613      	strb	r3, [r2, #24]
 8007d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d88:	e000ed00 	.word	0xe000ed00
 8007d8c:	e000ecfc 	.word	0xe000ecfc

08007d90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007d90:	2800      	cmp	r0, #0
 8007d92:	db07      	blt.n	8007da4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d94:	0941      	lsrs	r1, r0, #5
 8007d96:	4a04      	ldr	r2, [pc, #16]	@ (8007da8 <HAL_NVIC_EnableIRQ+0x18>)
 8007d98:	f000 001f 	and.w	r0, r0, #31
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4083      	lsls	r3, r0
 8007da0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	e000e100 	.word	0xe000e100

08007dac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007dac:	3801      	subs	r0, #1
 8007dae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8007db2:	d301      	bcc.n	8007db8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007db4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007db6:	4770      	bx	lr
{
 8007db8:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007dba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dbe:	4c07      	ldr	r4, [pc, #28]	@ (8007ddc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007dc0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dc2:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8007dc6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007dca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007dcc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007dce:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007dd0:	619a      	str	r2, [r3, #24]
}
 8007dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007dd6:	6119      	str	r1, [r3, #16]
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	e000ed00 	.word	0xe000ed00

08007de0 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007de0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8007de4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007de6:	6913      	ldr	r3, [r2, #16]
 8007de8:	bf0c      	ite	eq
 8007dea:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007dee:	f023 0304 	bicne.w	r3, r3, #4
 8007df2:	6113      	str	r3, [r2, #16]
  }
}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop

08007df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dfc:	680c      	ldr	r4, [r1, #0]
{
 8007dfe:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e00:	2c00      	cmp	r4, #0
 8007e02:	f000 8098 	beq.w	8007f36 <HAL_GPIO_Init+0x13e>
  uint32_t position = 0x00u;
 8007e06:	2200      	movs	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007e08:	f04f 0901 	mov.w	r9, #1
 8007e0c:	fa09 f502 	lsl.w	r5, r9, r2

    if (iocurrent != 0x00u)
 8007e10:	ea15 0a04 	ands.w	sl, r5, r4
 8007e14:	f000 808a 	beq.w	8007f2c <HAL_GPIO_Init+0x134>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e18:	684b      	ldr	r3, [r1, #4]
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007e1a:	688f      	ldr	r7, [r1, #8]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e1c:	f023 0e10 	bic.w	lr, r3, #16
 8007e20:	ea4f 0c42 	mov.w	ip, r2, lsl #1
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007e24:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e26:	f10e 3bff 	add.w	fp, lr, #4294967295
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007e2a:	fa07 f80c 	lsl.w	r8, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e2e:	f1bb 0f01 	cmp.w	fp, #1
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007e32:	fa06 f70c 	lsl.w	r7, r6, ip
 8007e36:	ea6f 0707 	mvn.w	r7, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e3a:	d97f      	bls.n	8007f3c <HAL_GPIO_Init+0x144>
      temp = GPIOx->PUPDR;
 8007e3c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007e3e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007e40:	ea45 0508 	orr.w	r5, r5, r8
      GPIOx->PUPDR = temp;
 8007e44:	60c5      	str	r5, [r0, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e46:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007e48:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007e4a:	ea03 0506 	and.w	r5, r3, r6
 8007e4e:	fa05 f50c 	lsl.w	r5, r5, ip
 8007e52:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e54:	00df      	lsls	r7, r3, #3
      GPIOx->MODER = temp;
 8007e56:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e58:	d568      	bpl.n	8007f2c <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e5a:	4f70      	ldr	r7, [pc, #448]	@ (800801c <HAL_GPIO_Init+0x224>)
 8007e5c:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8007e5e:	f045 0501 	orr.w	r5, r5, #1
 8007e62:	663d      	str	r5, [r7, #96]	@ 0x60
 8007e64:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8007e66:	f005 0501 	and.w	r5, r5, #1
 8007e6a:	9501      	str	r5, [sp, #4]
 8007e6c:	9d01      	ldr	r5, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007e6e:	f022 0503 	bic.w	r5, r2, #3
 8007e72:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8007e76:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007e7a:	f002 0c03 	and.w	ip, r2, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8007e7e:	68af      	ldr	r7, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007e80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007e84:	260f      	movs	r6, #15
 8007e86:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007e8a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007e8e:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007e92:	d027      	beq.n	8007ee4 <HAL_GPIO_Init+0xec>
 8007e94:	4e62      	ldr	r6, [pc, #392]	@ (8008020 <HAL_GPIO_Init+0x228>)
 8007e96:	42b0      	cmp	r0, r6
 8007e98:	f000 809f 	beq.w	8007fda <HAL_GPIO_Init+0x1e2>
 8007e9c:	4e61      	ldr	r6, [pc, #388]	@ (8008024 <HAL_GPIO_Init+0x22c>)
 8007e9e:	42b0      	cmp	r0, r6
 8007ea0:	f000 80a0 	beq.w	8007fe4 <HAL_GPIO_Init+0x1ec>
 8007ea4:	f8df e184 	ldr.w	lr, [pc, #388]	@ 800802c <HAL_GPIO_Init+0x234>
 8007ea8:	4570      	cmp	r0, lr
 8007eaa:	f000 8090 	beq.w	8007fce <HAL_GPIO_Init+0x1d6>
 8007eae:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8008030 <HAL_GPIO_Init+0x238>
 8007eb2:	4570      	cmp	r0, lr
 8007eb4:	f000 80a4 	beq.w	8008000 <HAL_GPIO_Init+0x208>
 8007eb8:	f8df e178 	ldr.w	lr, [pc, #376]	@ 8008034 <HAL_GPIO_Init+0x23c>
 8007ebc:	4570      	cmp	r0, lr
 8007ebe:	f000 80a6 	beq.w	800800e <HAL_GPIO_Init+0x216>
 8007ec2:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8008038 <HAL_GPIO_Init+0x240>
 8007ec6:	4570      	cmp	r0, lr
 8007ec8:	f000 8093 	beq.w	8007ff2 <HAL_GPIO_Init+0x1fa>
 8007ecc:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 800803c <HAL_GPIO_Init+0x244>
 8007ed0:	4570      	cmp	r0, lr
 8007ed2:	bf0c      	ite	eq
 8007ed4:	f04f 0e07 	moveq.w	lr, #7
 8007ed8:	f04f 0e08 	movne.w	lr, #8
 8007edc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007ee0:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007ee4:	60af      	str	r7, [r5, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007ee6:	4d50      	ldr	r5, [pc, #320]	@ (8008028 <HAL_GPIO_Init+0x230>)
 8007ee8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007eea:	03de      	lsls	r6, r3, #15
        temp &= ~(iocurrent);
 8007eec:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8007ef0:	4e4d      	ldr	r6, [pc, #308]	@ (8008028 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8007ef2:	bf54      	ite	pl
 8007ef4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007ef6:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->IMR1 = temp;
 8007efa:	6035      	str	r5, [r6, #0]

        temp = EXTI->EMR1;
 8007efc:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007efe:	039e      	lsls	r6, r3, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8007f00:	4e49      	ldr	r6, [pc, #292]	@ (8008028 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8007f02:	bf54      	ite	pl
 8007f04:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007f06:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 8007f0a:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f0c:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f0e:	02de      	lsls	r6, r3, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8007f10:	4e45      	ldr	r6, [pc, #276]	@ (8008028 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8007f12:	bf54      	ite	pl
 8007f14:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007f16:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR1 = temp;
 8007f1a:	60b5      	str	r5, [r6, #8]

        temp = EXTI->FTSR1;
 8007f1c:	68f5      	ldr	r5, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f1e:	029b      	lsls	r3, r3, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8007f20:	4b41      	ldr	r3, [pc, #260]	@ (8008028 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8007f22:	bf54      	ite	pl
 8007f24:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007f26:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 8007f2a:	60dd      	str	r5, [r3, #12]
      }
    }

    position++;
 8007f2c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f2e:	fa34 f302 	lsrs.w	r3, r4, r2
 8007f32:	f47f af6b 	bne.w	8007e0c <HAL_GPIO_Init+0x14>
  }
}
 8007f36:	b003      	add	sp, #12
 8007f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007f3c:	f8d0 b008 	ldr.w	fp, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007f40:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f42:	ea0b 0b07 	and.w	fp, fp, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007f46:	fa06 fa0c 	lsl.w	sl, r6, ip
 8007f4a:	ea4a 0a0b 	orr.w	sl, sl, fp
        GPIOx->OSPEEDR = temp;
 8007f4e:	f8c0 a008 	str.w	sl, [r0, #8]
        temp = GPIOx->OTYPER;
 8007f52:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f56:	ea2a 0a05 	bic.w	sl, sl, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007f5a:	091d      	lsrs	r5, r3, #4
 8007f5c:	4095      	lsls	r5, r2
 8007f5e:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8007f62:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8007f64:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007f66:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007f68:	ea45 0508 	orr.w	r5, r5, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f6c:	f003 0303 	and.w	r3, r3, #3
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f70:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8007f74:	60c5      	str	r5, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f76:	fa03 f30c 	lsl.w	r3, r3, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f7a:	d009      	beq.n	8007f90 <HAL_GPIO_Init+0x198>
      temp = GPIOx->MODER;
 8007f7c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f7e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f80:	432b      	orrs	r3, r5
    position++;
 8007f82:	3201      	adds	r2, #1
      GPIOx->MODER = temp;
 8007f84:	6003      	str	r3, [r0, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f86:	fa34 f302 	lsrs.w	r3, r4, r2
 8007f8a:	f47f af3f 	bne.w	8007e0c <HAL_GPIO_Init+0x14>
 8007f8e:	e7d2      	b.n	8007f36 <HAL_GPIO_Init+0x13e>
        temp = GPIOx->AFR[position >> 3u];
 8007f90:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f94:	690e      	ldr	r6, [r1, #16]
 8007f96:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007f9a:	f002 0507 	and.w	r5, r2, #7
 8007f9e:	00ad      	lsls	r5, r5, #2
        temp = GPIOx->AFR[position >> 3u];
 8007fa0:	f8dc 8020 	ldr.w	r8, [ip, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007fa4:	fa06 fe05 	lsl.w	lr, r6, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007fa8:	260f      	movs	r6, #15
 8007faa:	fa06 f505 	lsl.w	r5, r6, r5
 8007fae:	ea28 0505 	bic.w	r5, r8, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007fb2:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->AFR[position >> 3u] = temp;
 8007fb6:	f8cc 5020 	str.w	r5, [ip, #32]
      temp = GPIOx->MODER;
 8007fba:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007fbc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007fbe:	432b      	orrs	r3, r5
    position++;
 8007fc0:	3201      	adds	r2, #1
      GPIOx->MODER = temp;
 8007fc2:	6003      	str	r3, [r0, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fc4:	fa34 f302 	lsrs.w	r3, r4, r2
 8007fc8:	f47f af20 	bne.w	8007e0c <HAL_GPIO_Init+0x14>
 8007fcc:	e7b3      	b.n	8007f36 <HAL_GPIO_Init+0x13e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007fce:	2603      	movs	r6, #3
 8007fd0:	fa06 fc0c 	lsl.w	ip, r6, ip
 8007fd4:	ea47 070c 	orr.w	r7, r7, ip
 8007fd8:	e784      	b.n	8007ee4 <HAL_GPIO_Init+0xec>
 8007fda:	fa09 fc0c 	lsl.w	ip, r9, ip
 8007fde:	ea47 070c 	orr.w	r7, r7, ip
 8007fe2:	e77f      	b.n	8007ee4 <HAL_GPIO_Init+0xec>
 8007fe4:	f04f 0e02 	mov.w	lr, #2
 8007fe8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007fec:	ea47 070c 	orr.w	r7, r7, ip
 8007ff0:	e778      	b.n	8007ee4 <HAL_GPIO_Init+0xec>
 8007ff2:	f04f 0e06 	mov.w	lr, #6
 8007ff6:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007ffa:	ea47 070c 	orr.w	r7, r7, ip
 8007ffe:	e771      	b.n	8007ee4 <HAL_GPIO_Init+0xec>
 8008000:	f04f 0e04 	mov.w	lr, #4
 8008004:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008008:	ea47 070c 	orr.w	r7, r7, ip
 800800c:	e76a      	b.n	8007ee4 <HAL_GPIO_Init+0xec>
 800800e:	f04f 0e05 	mov.w	lr, #5
 8008012:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008016:	ea47 070c 	orr.w	r7, r7, ip
 800801a:	e763      	b.n	8007ee4 <HAL_GPIO_Init+0xec>
 800801c:	40021000 	.word	0x40021000
 8008020:	48000400 	.word	0x48000400
 8008024:	48000800 	.word	0x48000800
 8008028:	40010400 	.word	0x40010400
 800802c:	48000c00 	.word	0x48000c00
 8008030:	48001000 	.word	0x48001000
 8008034:	48001400 	.word	0x48001400
 8008038:	48001800 	.word	0x48001800
 800803c:	48001c00 	.word	0x48001c00

08008040 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008040:	2900      	cmp	r1, #0
 8008042:	f000 8099 	beq.w	8008178 <HAL_GPIO_DeInit+0x138>
{
 8008046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800804a:	4e4c      	ldr	r6, [pc, #304]	@ (800817c <HAL_GPIO_DeInit+0x13c>)
  uint32_t position = 0x00u;
 800804c:	2300      	movs	r3, #0
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800804e:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008052:	f04f 0a03 	mov.w	sl, #3
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008056:	2201      	movs	r2, #1
 8008058:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800805a:	ea12 0e01 	ands.w	lr, r2, r1
 800805e:	d068      	beq.n	8008132 <HAL_GPIO_DeInit+0xf2>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8008060:	f023 0503 	bic.w	r5, r3, #3
 8008064:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8008068:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800806c:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8008070:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008074:	00a4      	lsls	r4, r4, #2
 8008076:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800807a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800807e:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008082:	d01e      	beq.n	80080c2 <HAL_GPIO_DeInit+0x82>
 8008084:	4f3e      	ldr	r7, [pc, #248]	@ (8008180 <HAL_GPIO_DeInit+0x140>)
 8008086:	42b8      	cmp	r0, r7
 8008088:	d059      	beq.n	800813e <HAL_GPIO_DeInit+0xfe>
 800808a:	4f3e      	ldr	r7, [pc, #248]	@ (8008184 <HAL_GPIO_DeInit+0x144>)
 800808c:	42b8      	cmp	r0, r7
 800808e:	d05a      	beq.n	8008146 <HAL_GPIO_DeInit+0x106>
 8008090:	4f3d      	ldr	r7, [pc, #244]	@ (8008188 <HAL_GPIO_DeInit+0x148>)
 8008092:	42b8      	cmp	r0, r7
 8008094:	d061      	beq.n	800815a <HAL_GPIO_DeInit+0x11a>
 8008096:	4f3d      	ldr	r7, [pc, #244]	@ (800818c <HAL_GPIO_DeInit+0x14c>)
 8008098:	42b8      	cmp	r0, r7
 800809a:	d063      	beq.n	8008164 <HAL_GPIO_DeInit+0x124>
 800809c:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 8008190 <HAL_GPIO_DeInit+0x150>
 80080a0:	4558      	cmp	r0, fp
 80080a2:	d055      	beq.n	8008150 <HAL_GPIO_DeInit+0x110>
 80080a4:	f8df b0ec 	ldr.w	fp, [pc, #236]	@ 8008194 <HAL_GPIO_DeInit+0x154>
 80080a8:	4558      	cmp	r0, fp
 80080aa:	d060      	beq.n	800816e <HAL_GPIO_DeInit+0x12e>
 80080ac:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 8008198 <HAL_GPIO_DeInit+0x158>
 80080b0:	4558      	cmp	r0, fp
 80080b2:	bf14      	ite	ne
 80080b4:	f04f 0b08 	movne.w	fp, #8
 80080b8:	f04f 0b07 	moveq.w	fp, #7
 80080bc:	fa0b f404 	lsl.w	r4, fp, r4
 80080c0:	e000      	b.n	80080c4 <HAL_GPIO_DeInit+0x84>
 80080c2:	2400      	movs	r4, #0
 80080c4:	45a4      	cmp	ip, r4
 80080c6:	d113      	bne.n	80080f0 <HAL_GPIO_DeInit+0xb0>
        EXTI->IMR1 &= ~(iocurrent);
 80080c8:	6834      	ldr	r4, [r6, #0]
 80080ca:	ea24 040e 	bic.w	r4, r4, lr
 80080ce:	6034      	str	r4, [r6, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80080d0:	6874      	ldr	r4, [r6, #4]
 80080d2:	ea24 040e 	bic.w	r4, r4, lr
 80080d6:	6074      	str	r4, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80080d8:	68b4      	ldr	r4, [r6, #8]
 80080da:	ea24 040e 	bic.w	r4, r4, lr
 80080de:	60b4      	str	r4, [r6, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80080e0:	68f4      	ldr	r4, [r6, #12]
 80080e2:	ea24 040e 	bic.w	r4, r4, lr
 80080e6:	60f4      	str	r4, [r6, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80080e8:	68ac      	ldr	r4, [r5, #8]
 80080ea:	ea24 0408 	bic.w	r4, r4, r8
 80080ee:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80080f0:	6804      	ldr	r4, [r0, #0]
 80080f2:	005d      	lsls	r5, r3, #1
 80080f4:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80080f8:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80080fc:	432c      	orrs	r4, r5
 80080fe:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8008102:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008104:	f003 0407 	and.w	r4, r3, #7
 8008108:	f8dc e020 	ldr.w	lr, [ip, #32]
 800810c:	00a4      	lsls	r4, r4, #2
 800810e:	fa09 f404 	lsl.w	r4, r9, r4
 8008112:	ea2e 0404 	bic.w	r4, lr, r4
 8008116:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800811a:	6884      	ldr	r4, [r0, #8]
 800811c:	ea24 0405 	bic.w	r4, r4, r5
 8008120:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008122:	6844      	ldr	r4, [r0, #4]
 8008124:	ea24 0202 	bic.w	r2, r4, r2
 8008128:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800812a:	68c2      	ldr	r2, [r0, #12]
 800812c:	ea22 0205 	bic.w	r2, r2, r5
 8008130:	60c2      	str	r2, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008132:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8008134:	fa31 f203 	lsrs.w	r2, r1, r3
 8008138:	d18d      	bne.n	8008056 <HAL_GPIO_DeInit+0x16>
  }
}
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800813e:	2701      	movs	r7, #1
 8008140:	fa07 f404 	lsl.w	r4, r7, r4
 8008144:	e7be      	b.n	80080c4 <HAL_GPIO_DeInit+0x84>
 8008146:	f04f 0b02 	mov.w	fp, #2
 800814a:	fa0b f404 	lsl.w	r4, fp, r4
 800814e:	e7b9      	b.n	80080c4 <HAL_GPIO_DeInit+0x84>
 8008150:	f04f 0b05 	mov.w	fp, #5
 8008154:	fa0b f404 	lsl.w	r4, fp, r4
 8008158:	e7b4      	b.n	80080c4 <HAL_GPIO_DeInit+0x84>
 800815a:	f04f 0b03 	mov.w	fp, #3
 800815e:	fa0b f404 	lsl.w	r4, fp, r4
 8008162:	e7af      	b.n	80080c4 <HAL_GPIO_DeInit+0x84>
 8008164:	f04f 0b04 	mov.w	fp, #4
 8008168:	fa0b f404 	lsl.w	r4, fp, r4
 800816c:	e7aa      	b.n	80080c4 <HAL_GPIO_DeInit+0x84>
 800816e:	f04f 0b06 	mov.w	fp, #6
 8008172:	fa0b f404 	lsl.w	r4, fp, r4
 8008176:	e7a5      	b.n	80080c4 <HAL_GPIO_DeInit+0x84>
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	40010400 	.word	0x40010400
 8008180:	48000400 	.word	0x48000400
 8008184:	48000800 	.word	0x48000800
 8008188:	48000c00 	.word	0x48000c00
 800818c:	48001000 	.word	0x48001000
 8008190:	48001400 	.word	0x48001400
 8008194:	48001800 	.word	0x48001800
 8008198:	48001c00 	.word	0x48001c00

0800819c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800819c:	6903      	ldr	r3, [r0, #16]
 800819e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80081a0:	bf14      	ite	ne
 80081a2:	2001      	movne	r0, #1
 80081a4:	2000      	moveq	r0, #0
 80081a6:	4770      	bx	lr

080081a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081a8:	b10a      	cbz	r2, 80081ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80081aa:	6181      	str	r1, [r0, #24]
 80081ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80081ae:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop

080081b4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80081b4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80081b6:	ea01 0203 	and.w	r2, r1, r3
 80081ba:	ea21 0103 	bic.w	r1, r1, r3
 80081be:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081c2:	6181      	str	r1, [r0, #24]
}
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop

080081c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80081c8:	4a04      	ldr	r2, [pc, #16]	@ (80081dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80081ca:	6951      	ldr	r1, [r2, #20]
 80081cc:	4201      	tst	r1, r0
 80081ce:	d100      	bne.n	80081d2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80081d0:	4770      	bx	lr
{
 80081d2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081d4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081d6:	f7f8 ff85 	bl	80010e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80081da:	bd08      	pop	{r3, pc}
 80081dc:	40010400 	.word	0x40010400

080081e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	460d      	mov	r5, r1
 80081e4:	1c6e      	adds	r6, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081e6:	6801      	ldr	r1, [r0, #0]
{
 80081e8:	4604      	mov	r4, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081ea:	bf18      	it	ne
 80081ec:	4616      	movne	r6, r2
 80081ee:	d132      	bne.n	8008256 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80081f0:	698b      	ldr	r3, [r1, #24]
 80081f2:	0798      	lsls	r0, r3, #30
 80081f4:	d451      	bmi.n	800829a <I2C_WaitOnTXISFlagUntilTimeout+0xba>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081f6:	698b      	ldr	r3, [r1, #24]
 80081f8:	06da      	lsls	r2, r3, #27
 80081fa:	d5f9      	bpl.n	80081f0 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081fc:	698b      	ldr	r3, [r1, #24]
 80081fe:	069a      	lsls	r2, r3, #26
 8008200:	d5fc      	bpl.n	80081fc <I2C_WaitOnTXISFlagUntilTimeout+0x1c>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008202:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008204:	2210      	movs	r2, #16
 8008206:	61ca      	str	r2, [r1, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008208:	61cb      	str	r3, [r1, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800820a:	698b      	ldr	r3, [r1, #24]
 800820c:	079e      	lsls	r6, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800820e:	bf44      	itt	mi
 8008210:	2300      	movmi	r3, #0
 8008212:	628b      	strmi	r3, [r1, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008214:	698b      	ldr	r3, [r1, #24]
 8008216:	07dd      	lsls	r5, r3, #31
 8008218:	d403      	bmi.n	8008222 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800821a:	698b      	ldr	r3, [r1, #24]
 800821c:	f043 0301 	orr.w	r3, r3, #1
 8008220:	618b      	str	r3, [r1, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008222:	684b      	ldr	r3, [r1, #4]
 8008224:	4a1e      	ldr	r2, [pc, #120]	@ (80082a0 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)
 8008226:	4013      	ands	r3, r2
 8008228:	604b      	str	r3, [r1, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800822a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800822c:	2020      	movs	r0, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800822e:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008230:	f043 0304 	orr.w	r3, r3, #4
 8008234:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008236:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800823a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800823e:	2300      	movs	r3, #0
 8008240:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008244:	2001      	movs	r0, #1
}
 8008246:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008248:	f7ff f84a 	bl	80072e0 <HAL_GetTick>
 800824c:	1b83      	subs	r3, r0, r6
 800824e:	42ab      	cmp	r3, r5
 8008250:	d819      	bhi.n	8008286 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
 8008252:	b1c5      	cbz	r5, 8008286 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008254:	6821      	ldr	r1, [r4, #0]
 8008256:	698b      	ldr	r3, [r1, #24]
 8008258:	079b      	lsls	r3, r3, #30
 800825a:	d41e      	bmi.n	800829a <I2C_WaitOnTXISFlagUntilTimeout+0xba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800825c:	698b      	ldr	r3, [r1, #24]
 800825e:	06d8      	lsls	r0, r3, #27
 8008260:	d5f2      	bpl.n	8008248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008262:	698b      	ldr	r3, [r1, #24]
 8008264:	069b      	lsls	r3, r3, #26
 8008266:	d4cc      	bmi.n	8008202 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008268:	f7ff f83a 	bl	80072e0 <HAL_GetTick>
 800826c:	1b80      	subs	r0, r0, r6
 800826e:	4285      	cmp	r5, r0
 8008270:	d309      	bcc.n	8008286 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
 8008272:	b145      	cbz	r5, 8008286 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008274:	6821      	ldr	r1, [r4, #0]
 8008276:	698b      	ldr	r3, [r1, #24]
 8008278:	069b      	lsls	r3, r3, #26
 800827a:	d4c2      	bmi.n	8008202 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800827c:	f7ff f830 	bl	80072e0 <HAL_GetTick>
 8008280:	1b80      	subs	r0, r0, r6
 8008282:	4285      	cmp	r5, r0
 8008284:	d2f5      	bcs.n	8008272 <I2C_WaitOnTXISFlagUntilTimeout+0x92>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008286:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008288:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800828a:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800828c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800828e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008290:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008294:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 8008298:	e7d1      	b.n	800823e <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
  return HAL_OK;
 800829a:	2000      	movs	r0, #0
}
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	bf00      	nop
 80082a0:	fe00e800 	.word	0xfe00e800

080082a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	4604      	mov	r4, r0
 80082a8:	4616      	mov	r6, r2
 80082aa:	460d      	mov	r5, r1
 80082ac:	2900      	cmp	r1, #0
 80082ae:	d048      	beq.n	8008342 <I2C_WaitOnSTOPFlagUntilTimeout+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082b0:	6822      	ldr	r2, [r4, #0]
 80082b2:	6993      	ldr	r3, [r2, #24]
 80082b4:	0698      	lsls	r0, r3, #26
 80082b6:	d44e      	bmi.n	8008356 <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082b8:	6993      	ldr	r3, [r2, #24]
 80082ba:	06d9      	lsls	r1, r3, #27
 80082bc:	d532      	bpl.n	8008324 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
 80082be:	1c68      	adds	r0, r5, #1
 80082c0:	d12c      	bne.n	800831c <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082c2:	6993      	ldr	r3, [r2, #24]
 80082c4:	0699      	lsls	r1, r3, #26
 80082c6:	d5fc      	bpl.n	80082c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082c8:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082ca:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082cc:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082ce:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80082d0:	6993      	ldr	r3, [r2, #24]
 80082d2:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 80082d4:	bf44      	itt	mi
 80082d6:	2300      	movmi	r3, #0
 80082d8:	6293      	strmi	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082da:	6993      	ldr	r3, [r2, #24]
 80082dc:	07d9      	lsls	r1, r3, #31
 80082de:	d403      	bmi.n	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082e0:	6993      	ldr	r3, [r2, #24]
 80082e2:	f043 0301 	orr.w	r3, r3, #1
 80082e6:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 80082e8:	6853      	ldr	r3, [r2, #4]
 80082ea:	481c      	ldr	r0, [pc, #112]	@ (800835c <I2C_WaitOnSTOPFlagUntilTimeout+0xb8>)
 80082ec:	4003      	ands	r3, r0
 80082ee:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80082f2:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f4:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082f6:	f043 0304 	orr.w	r3, r3, #4
 80082fa:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80082fc:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008300:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008304:	2300      	movs	r3, #0
 8008306:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800830a:	2001      	movs	r0, #1
}
 800830c:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830e:	f7fe ffe7 	bl	80072e0 <HAL_GetTick>
 8008312:	1b80      	subs	r0, r0, r6
 8008314:	4285      	cmp	r5, r0
 8008316:	d30a      	bcc.n	800832e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
 8008318:	b14d      	cbz	r5, 800832e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	6993      	ldr	r3, [r2, #24]
 800831e:	069b      	lsls	r3, r3, #26
 8008320:	d5f5      	bpl.n	800830e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 8008322:	e7d1      	b.n	80082c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008324:	f7fe ffdc 	bl	80072e0 <HAL_GetTick>
 8008328:	1b80      	subs	r0, r0, r6
 800832a:	4285      	cmp	r5, r0
 800832c:	d2c0      	bcs.n	80082b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800832e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008330:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008332:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008334:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008336:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008338:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800833c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008340:	e7e0      	b.n	8008304 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008342:	6802      	ldr	r2, [r0, #0]
 8008344:	6993      	ldr	r3, [r2, #24]
 8008346:	069b      	lsls	r3, r3, #26
 8008348:	d405      	bmi.n	8008356 <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800834a:	6993      	ldr	r3, [r2, #24]
 800834c:	06db      	lsls	r3, r3, #27
 800834e:	d4e5      	bmi.n	800831c <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008350:	f7fe ffc6 	bl	80072e0 <HAL_GetTick>
 8008354:	e7eb      	b.n	800832e <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
  return HAL_OK;
 8008356:	2000      	movs	r0, #0
}
 8008358:	bd70      	pop	{r4, r5, r6, pc}
 800835a:	bf00      	nop
 800835c:	fe00e800 	.word	0xfe00e800

08008360 <HAL_I2C_MspInit>:
}
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop

08008364 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008364:	2800      	cmp	r0, #0
 8008366:	d04f      	beq.n	8008408 <HAL_I2C_Init+0xa4>
{
 8008368:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800836a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800836e:	4604      	mov	r4, r0
 8008370:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008374:	2b00      	cmp	r3, #0
 8008376:	d042      	beq.n	80083fe <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 8008378:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800837a:	2224      	movs	r2, #36	@ 0x24
 800837c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008380:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008382:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8008384:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008388:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800838c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800838e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008390:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008392:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008398:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800839a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800839c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800839e:	d02a      	beq.n	80083f6 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083a0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083a4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083a6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80083a8:	bf04      	itt	eq
 80083aa:	f44f 6200 	moveq.w	r2, #2048	@ 0x800
 80083ae:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083b0:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80083b2:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083b4:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80083b8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80083bc:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80083be:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083c0:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80083c2:	430a      	orrs	r2, r1
 80083c4:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083c6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80083ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083ce:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083d0:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083d2:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80083d4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083d6:	4301      	orrs	r1, r0
 80083d8:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80083da:	6819      	ldr	r1, [r3, #0]
 80083dc:	f041 0101 	orr.w	r1, r1, #1
 80083e0:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083e2:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80083e4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083e6:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80083e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083ec:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ee:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 80083f2:	4610      	mov	r0, r2
}
 80083f4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80083f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083fa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083fc:	e7d8      	b.n	80083b0 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80083fe:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008402:	f7ff ffad 	bl	8008360 <HAL_I2C_MspInit>
 8008406:	e7b7      	b.n	8008378 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8008408:	2001      	movs	r0, #1
}
 800840a:	4770      	bx	lr

0800840c <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop

08008410 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8008410:	b1b0      	cbz	r0, 8008440 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8008412:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008414:	2324      	movs	r3, #36	@ 0x24
{
 8008416:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008418:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800841c:	6813      	ldr	r3, [r2, #0]
 800841e:	f023 0301 	bic.w	r3, r3, #1
 8008422:	4604      	mov	r4, r0
 8008424:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008426:	f7ff fff1 	bl	800840c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800842a:	2300      	movs	r3, #0
 800842c:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800842e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008432:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008436:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  return HAL_OK;
 800843c:	4618      	mov	r0, r3
}
 800843e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008440:	2001      	movs	r0, #1
}
 8008442:	4770      	bx	lr

08008444 <HAL_I2C_Mem_Write>:
{
 8008444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800844a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800844e:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 8008452:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008456:	2b20      	cmp	r3, #32
 8008458:	f040 809f 	bne.w	800859a <HAL_I2C_Mem_Write+0x156>
    if ((pData == NULL) || (Size == 0U))
 800845c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800845e:	4604      	mov	r4, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 8094 	beq.w	800858e <HAL_I2C_Mem_Write+0x14a>
 8008466:	f1bb 0f00 	cmp.w	fp, #0
 800846a:	f000 8090 	beq.w	800858e <HAL_I2C_Mem_Write+0x14a>
    __HAL_LOCK(hi2c);
 800846e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008472:	2b01      	cmp	r3, #1
 8008474:	f000 8091 	beq.w	800859a <HAL_I2C_Mem_Write+0x156>
 8008478:	2301      	movs	r3, #1
 800847a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800847e:	460f      	mov	r7, r1
 8008480:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 8008482:	f7fe ff2d 	bl	80072e0 <HAL_GetTick>
 8008486:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8008488:	e005      	b.n	8008496 <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800848a:	f7fe ff29 	bl	80072e0 <HAL_GetTick>
 800848e:	1b80      	subs	r0, r0, r6
 8008490:	2819      	cmp	r0, #25
 8008492:	f200 8085 	bhi.w	80085a0 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	699d      	ldr	r5, [r3, #24]
 800849a:	f415 4500 	ands.w	r5, r5, #32768	@ 0x8000
 800849e:	d1f4      	bne.n	800848a <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 80084a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084a2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80084a4:	2221      	movs	r2, #33	@ 0x21
 80084a6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084aa:	2240      	movs	r2, #64	@ 0x40
 80084ac:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084b0:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80084b2:	f8a4 b02a 	strh.w	fp, [r4, #42]	@ 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	4973      	ldr	r1, [pc, #460]	@ (8008688 <HAL_I2C_Mem_Write+0x244>)
    hi2c->XferISR   = NULL;
 80084ba:	6365      	str	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 80084bc:	400a      	ands	r2, r1
 80084be:	fa5f f189 	uxtb.w	r1, r9
 80084c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80084c6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80084ca:	433a      	orrs	r2, r7
 80084cc:	f042 4201 	orr.w	r2, r2, #2164260864	@ 0x81000000
 80084d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084d4:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084d6:	4651      	mov	r1, sl
 80084d8:	4632      	mov	r2, r6
 80084da:	4620      	mov	r0, r4
 80084dc:	f7ff fe80 	bl	80081e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f040 80a9 	bne.w	8008638 <HAL_I2C_Mem_Write+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084e6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084ea:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084ec:	d17f      	bne.n	80085ee <HAL_I2C_Mem_Write+0x1aa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084ee:	fa5f f388 	uxtb.w	r3, r8
 80084f2:	6293      	str	r3, [r2, #40]	@ 0x28
 80084f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80084f8:	d175      	bne.n	80085e6 <HAL_I2C_Mem_Write+0x1a2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084fa:	6993      	ldr	r3, [r2, #24]
 80084fc:	061d      	lsls	r5, r3, #24
 80084fe:	d5fc      	bpl.n	80084fa <HAL_I2C_Mem_Write+0xb6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008500:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008502:	b29b      	uxth	r3, r3
 8008504:	2bff      	cmp	r3, #255	@ 0xff
 8008506:	f240 809b 	bls.w	8008640 <HAL_I2C_Mem_Write+0x1fc>
  MODIFY_REG(hi2c->Instance->CR2,
 800850a:	6853      	ldr	r3, [r2, #4]
 800850c:	495f      	ldr	r1, [pc, #380]	@ (800868c <HAL_I2C_Mem_Write+0x248>)
 800850e:	400b      	ands	r3, r1
 8008510:	433b      	orrs	r3, r7
 8008512:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800851a:	21ff      	movs	r1, #255	@ 0xff
 800851c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800851e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008520:	e004      	b.n	800852c <HAL_I2C_Mem_Write+0xe8>
    } while (hi2c->XferCount > 0U);
 8008522:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8098 	beq.w	800865c <HAL_I2C_Mem_Write+0x218>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800852c:	4632      	mov	r2, r6
 800852e:	4651      	mov	r1, sl
 8008530:	4620      	mov	r0, r4
 8008532:	f7ff fe55 	bl	80081e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008536:	2800      	cmp	r0, #0
 8008538:	d12c      	bne.n	8008594 <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800853a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008542:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008544:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008546:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008548:	3b01      	subs	r3, #1
 800854a:	b29b      	uxth	r3, r3
 800854c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800854e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008550:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008552:	3b01      	subs	r3, #1
 8008554:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008556:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8008558:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800855a:	2900      	cmp	r1, #0
 800855c:	d0e1      	beq.n	8008522 <HAL_I2C_Mem_Write+0xde>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1df      	bne.n	8008522 <HAL_I2C_Mem_Write+0xde>
 8008562:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008566:	d131      	bne.n	80085cc <HAL_I2C_Mem_Write+0x188>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008568:	6993      	ldr	r3, [r2, #24]
 800856a:	0619      	lsls	r1, r3, #24
 800856c:	d5fc      	bpl.n	8008568 <HAL_I2C_Mem_Write+0x124>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800856e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008570:	b29b      	uxth	r3, r3
 8008572:	2bff      	cmp	r3, #255	@ 0xff
 8008574:	d949      	bls.n	800860a <HAL_I2C_Mem_Write+0x1c6>
  MODIFY_REG(hi2c->Instance->CR2,
 8008576:	6853      	ldr	r3, [r2, #4]
 8008578:	4944      	ldr	r1, [pc, #272]	@ (800868c <HAL_I2C_Mem_Write+0x248>)
 800857a:	400b      	ands	r3, r1
 800857c:	433b      	orrs	r3, r7
 800857e:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008586:	21ff      	movs	r1, #255	@ 0xff
 8008588:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800858a:	6053      	str	r3, [r2, #4]
}
 800858c:	e7c9      	b.n	8008522 <HAL_I2C_Mem_Write+0xde>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800858e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008592:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008594:	2001      	movs	r0, #1
}
 8008596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800859a:	2002      	movs	r0, #2
}
 800859c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a2:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085a4:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80085a8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085aa:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80085ac:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80085b0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 80085b8:	e7ec      	b.n	8008594 <HAL_I2C_Mem_Write+0x150>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ba:	f7fe fe91 	bl	80072e0 <HAL_GetTick>
 80085be:	1b80      	subs	r0, r0, r6
 80085c0:	4582      	cmp	sl, r0
 80085c2:	d3ed      	bcc.n	80085a0 <HAL_I2C_Mem_Write+0x15c>
 80085c4:	f1ba 0f00 	cmp.w	sl, #0
 80085c8:	d0ea      	beq.n	80085a0 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	6993      	ldr	r3, [r2, #24]
 80085ce:	061b      	lsls	r3, r3, #24
 80085d0:	d5f3      	bpl.n	80085ba <HAL_I2C_Mem_Write+0x176>
 80085d2:	e7cc      	b.n	800856e <HAL_I2C_Mem_Write+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d4:	f7fe fe84 	bl	80072e0 <HAL_GetTick>
 80085d8:	1b80      	subs	r0, r0, r6
 80085da:	4582      	cmp	sl, r0
 80085dc:	d323      	bcc.n	8008626 <HAL_I2C_Mem_Write+0x1e2>
 80085de:	f1ba 0f00 	cmp.w	sl, #0
 80085e2:	d020      	beq.n	8008626 <HAL_I2C_Mem_Write+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085e4:	6822      	ldr	r2, [r4, #0]
 80085e6:	6993      	ldr	r3, [r2, #24]
 80085e8:	0618      	lsls	r0, r3, #24
 80085ea:	d5f3      	bpl.n	80085d4 <HAL_I2C_Mem_Write+0x190>
 80085ec:	e788      	b.n	8008500 <HAL_I2C_Mem_Write+0xbc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085ee:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80085f2:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085f4:	4651      	mov	r1, sl
 80085f6:	4632      	mov	r2, r6
 80085f8:	4620      	mov	r0, r4
 80085fa:	f7ff fdf1 	bl	80081e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80085fe:	b9d8      	cbnz	r0, 8008638 <HAL_I2C_Mem_Write+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008600:	6822      	ldr	r2, [r4, #0]
 8008602:	fa5f f388 	uxtb.w	r3, r8
 8008606:	6293      	str	r3, [r2, #40]	@ 0x28
 8008608:	e774      	b.n	80084f4 <HAL_I2C_Mem_Write+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 800860a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800860c:	481f      	ldr	r0, [pc, #124]	@ (800868c <HAL_I2C_Mem_Write+0x248>)
          hi2c->XferSize = hi2c->XferCount;
 800860e:	b29b      	uxth	r3, r3
 8008610:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008612:	b2d9      	uxtb	r1, r3
 8008614:	6853      	ldr	r3, [r2, #4]
 8008616:	4003      	ands	r3, r0
 8008618:	433b      	orrs	r3, r7
 800861a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800861e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008622:	6053      	str	r3, [r2, #4]
}
 8008624:	e77d      	b.n	8008522 <HAL_I2C_Mem_Write+0xde>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008626:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008628:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800862a:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800862c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800862e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008630:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008634:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008638:	2300      	movs	r3, #0
 800863a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800863e:	e7a9      	b.n	8008594 <HAL_I2C_Mem_Write+0x150>
      hi2c->XferSize = hi2c->XferCount;
 8008640:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8008642:	4812      	ldr	r0, [pc, #72]	@ (800868c <HAL_I2C_Mem_Write+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 8008644:	b29b      	uxth	r3, r3
 8008646:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008648:	b2d9      	uxtb	r1, r3
 800864a:	6853      	ldr	r3, [r2, #4]
 800864c:	4003      	ands	r3, r0
 800864e:	433b      	orrs	r3, r7
 8008650:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008654:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008658:	6053      	str	r3, [r2, #4]
}
 800865a:	e767      	b.n	800852c <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800865c:	4632      	mov	r2, r6
 800865e:	4651      	mov	r1, sl
 8008660:	4620      	mov	r0, r4
 8008662:	f7ff fe1f 	bl	80082a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008666:	2800      	cmp	r0, #0
 8008668:	d194      	bne.n	8008594 <HAL_I2C_Mem_Write+0x150>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800866a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800866c:	4d08      	ldr	r5, [pc, #32]	@ (8008690 <HAL_I2C_Mem_Write+0x24c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800866e:	2120      	movs	r1, #32
 8008670:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	402a      	ands	r2, r5
 8008676:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008678:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800867c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008680:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008684:	e787      	b.n	8008596 <HAL_I2C_Mem_Write+0x152>
 8008686:	bf00      	nop
 8008688:	fc009800 	.word	0xfc009800
 800868c:	fc009c00 	.word	0xfc009c00
 8008690:	fe00e800 	.word	0xfe00e800

08008694 <HAL_I2C_Mem_Read>:
{
 8008694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800869a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800869e:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 80086a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d17f      	bne.n	80087a8 <HAL_I2C_Mem_Read+0x114>
    if ((pData == NULL) || (Size == 0U))
 80086a8:	9b08      	ldr	r3, [sp, #32]
 80086aa:	4604      	mov	r4, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d075      	beq.n	800879c <HAL_I2C_Mem_Read+0x108>
 80086b0:	f1ba 0f00 	cmp.w	sl, #0
 80086b4:	d072      	beq.n	800879c <HAL_I2C_Mem_Read+0x108>
    __HAL_LOCK(hi2c);
 80086b6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d074      	beq.n	80087a8 <HAL_I2C_Mem_Read+0x114>
 80086be:	2301      	movs	r3, #1
 80086c0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80086c4:	460f      	mov	r7, r1
 80086c6:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 80086c8:	f7fe fe0a 	bl	80072e0 <HAL_GetTick>
 80086cc:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80086ce:	e004      	b.n	80086da <HAL_I2C_Mem_Read+0x46>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d0:	f7fe fe06 	bl	80072e0 <HAL_GetTick>
 80086d4:	1b40      	subs	r0, r0, r5
 80086d6:	2819      	cmp	r0, #25
 80086d8:	d869      	bhi.n	80087ae <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	6998      	ldr	r0, [r3, #24]
 80086de:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 80086e2:	d1f5      	bne.n	80086d0 <HAL_I2C_Mem_Read+0x3c>
    hi2c->pBuffPtr  = pData;
 80086e4:	9a08      	ldr	r2, [sp, #32]
 80086e6:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086e8:	2222      	movs	r2, #34	@ 0x22
 80086ea:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086ee:	2240      	movs	r2, #64	@ 0x40
 80086f0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086f4:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80086f6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	4977      	ldr	r1, [pc, #476]	@ (80088dc <HAL_I2C_Mem_Read+0x248>)
    hi2c->XferISR   = NULL;
 80086fe:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8008700:	400a      	ands	r2, r1
 8008702:	fa5f f188 	uxtb.w	r1, r8
 8008706:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800870a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800870e:	433a      	orrs	r2, r7
 8008710:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008718:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800871a:	4631      	mov	r1, r6
 800871c:	462a      	mov	r2, r5
 800871e:	4620      	mov	r0, r4
 8008720:	f7ff fd5e 	bl	80081e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008724:	2800      	cmp	r0, #0
 8008726:	f040 80bf 	bne.w	80088a8 <HAL_I2C_Mem_Read+0x214>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800872a:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800872e:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008730:	d162      	bne.n	80087f8 <HAL_I2C_Mem_Read+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008732:	fa5f f389 	uxtb.w	r3, r9
 8008736:	628b      	str	r3, [r1, #40]	@ 0x28
 8008738:	1c70      	adds	r0, r6, #1
 800873a:	d159      	bne.n	80087f0 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800873c:	698b      	ldr	r3, [r1, #24]
 800873e:	065a      	lsls	r2, r3, #25
 8008740:	d5fc      	bpl.n	800873c <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008742:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008744:	b29b      	uxth	r3, r3
 8008746:	2bff      	cmp	r3, #255	@ 0xff
 8008748:	f240 8095 	bls.w	8008876 <HAL_I2C_Mem_Read+0x1e2>
  MODIFY_REG(hi2c->Instance->CR2,
 800874c:	684b      	ldr	r3, [r1, #4]
 800874e:	4a63      	ldr	r2, [pc, #396]	@ (80088dc <HAL_I2C_Mem_Read+0x248>)
 8008750:	4013      	ands	r3, r2
 8008752:	4a63      	ldr	r2, [pc, #396]	@ (80088e0 <HAL_I2C_Mem_Read+0x24c>)
 8008754:	433b      	orrs	r3, r7
 8008756:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008758:	23ff      	movs	r3, #255	@ 0xff
 800875a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800875c:	604a      	str	r2, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800875e:	1c70      	adds	r0, r6, #1
 8008760:	d13a      	bne.n	80087d8 <HAL_I2C_Mem_Read+0x144>
 8008762:	698b      	ldr	r3, [r1, #24]
 8008764:	075a      	lsls	r2, r3, #29
 8008766:	d5fc      	bpl.n	8008762 <HAL_I2C_Mem_Read+0xce>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008768:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800876a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800876c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800876e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008770:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008772:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008774:	3a01      	subs	r2, #1
 8008776:	b292      	uxth	r2, r2
 8008778:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800877a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800877c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800877e:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8008780:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008782:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008784:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008786:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008788:	b10a      	cbz	r2, 800878e <HAL_I2C_Mem_Read+0xfa>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d043      	beq.n	8008816 <HAL_I2C_Mem_Read+0x182>
    } while (hi2c->XferCount > 0U);
 800878e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 808c 	beq.w	80088b0 <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008798:	6821      	ldr	r1, [r4, #0]
 800879a:	e7e0      	b.n	800875e <HAL_I2C_Mem_Read+0xca>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800879c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087a0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80087a2:	2001      	movs	r0, #1
}
 80087a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80087a8:	2002      	movs	r0, #2
}
 80087aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087ae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b0:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b2:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80087b6:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b8:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80087ba:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80087be:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 80087c6:	e7ec      	b.n	80087a2 <HAL_I2C_Mem_Read+0x10e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c8:	f7fe fd8a 	bl	80072e0 <HAL_GetTick>
 80087cc:	1b40      	subs	r0, r0, r5
 80087ce:	4286      	cmp	r6, r0
 80087d0:	d3ed      	bcc.n	80087ae <HAL_I2C_Mem_Read+0x11a>
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	d0eb      	beq.n	80087ae <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087d6:	6821      	ldr	r1, [r4, #0]
 80087d8:	698b      	ldr	r3, [r1, #24]
 80087da:	075b      	lsls	r3, r3, #29
 80087dc:	d5f4      	bpl.n	80087c8 <HAL_I2C_Mem_Read+0x134>
 80087de:	e7c3      	b.n	8008768 <HAL_I2C_Mem_Read+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e0:	f7fe fd7e 	bl	80072e0 <HAL_GetTick>
 80087e4:	1b43      	subs	r3, r0, r5
 80087e6:	429e      	cmp	r6, r3
 80087e8:	d355      	bcc.n	8008896 <HAL_I2C_Mem_Read+0x202>
 80087ea:	2e00      	cmp	r6, #0
 80087ec:	d053      	beq.n	8008896 <HAL_I2C_Mem_Read+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087ee:	6821      	ldr	r1, [r4, #0]
 80087f0:	698b      	ldr	r3, [r1, #24]
 80087f2:	065b      	lsls	r3, r3, #25
 80087f4:	d5f4      	bpl.n	80087e0 <HAL_I2C_Mem_Read+0x14c>
 80087f6:	e7a4      	b.n	8008742 <HAL_I2C_Mem_Read+0xae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80087f8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80087fc:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087fe:	462a      	mov	r2, r5
 8008800:	4631      	mov	r1, r6
 8008802:	4620      	mov	r0, r4
 8008804:	f7ff fcec 	bl	80081e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008808:	2800      	cmp	r0, #0
 800880a:	d14d      	bne.n	80088a8 <HAL_I2C_Mem_Read+0x214>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800880c:	6821      	ldr	r1, [r4, #0]
 800880e:	fa5f f389 	uxtb.w	r3, r9
 8008812:	628b      	str	r3, [r1, #40]	@ 0x28
 8008814:	e790      	b.n	8008738 <HAL_I2C_Mem_Read+0xa4>
 8008816:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008818:	6822      	ldr	r2, [r4, #0]
 800881a:	d11a      	bne.n	8008852 <HAL_I2C_Mem_Read+0x1be>
 800881c:	6993      	ldr	r3, [r2, #24]
 800881e:	0619      	lsls	r1, r3, #24
 8008820:	d5fc      	bpl.n	800881c <HAL_I2C_Mem_Read+0x188>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008822:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008824:	b29b      	uxth	r3, r3
 8008826:	2bff      	cmp	r3, #255	@ 0xff
 8008828:	d917      	bls.n	800885a <HAL_I2C_Mem_Read+0x1c6>
  MODIFY_REG(hi2c->Instance->CR2,
 800882a:	6853      	ldr	r3, [r2, #4]
 800882c:	492d      	ldr	r1, [pc, #180]	@ (80088e4 <HAL_I2C_Mem_Read+0x250>)
 800882e:	400b      	ands	r3, r1
 8008830:	433b      	orrs	r3, r7
 8008832:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800883a:	21ff      	movs	r1, #255	@ 0xff
 800883c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800883e:	6053      	str	r3, [r2, #4]
}
 8008840:	e7a5      	b.n	800878e <HAL_I2C_Mem_Read+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008842:	f7fe fd4d 	bl	80072e0 <HAL_GetTick>
 8008846:	1b43      	subs	r3, r0, r5
 8008848:	429e      	cmp	r6, r3
 800884a:	d3b0      	bcc.n	80087ae <HAL_I2C_Mem_Read+0x11a>
 800884c:	2e00      	cmp	r6, #0
 800884e:	d0ae      	beq.n	80087ae <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008850:	6822      	ldr	r2, [r4, #0]
 8008852:	6993      	ldr	r3, [r2, #24]
 8008854:	061b      	lsls	r3, r3, #24
 8008856:	d5f4      	bpl.n	8008842 <HAL_I2C_Mem_Read+0x1ae>
 8008858:	e7e3      	b.n	8008822 <HAL_I2C_Mem_Read+0x18e>
          hi2c->XferSize = hi2c->XferCount;
 800885a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800885c:	4821      	ldr	r0, [pc, #132]	@ (80088e4 <HAL_I2C_Mem_Read+0x250>)
          hi2c->XferSize = hi2c->XferCount;
 800885e:	b29b      	uxth	r3, r3
 8008860:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008862:	b2d9      	uxtb	r1, r3
 8008864:	6853      	ldr	r3, [r2, #4]
 8008866:	4003      	ands	r3, r0
 8008868:	433b      	orrs	r3, r7
 800886a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800886e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008872:	6053      	str	r3, [r2, #4]
}
 8008874:	e78b      	b.n	800878e <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8008876:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8008878:	4818      	ldr	r0, [pc, #96]	@ (80088dc <HAL_I2C_Mem_Read+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 800887a:	b29b      	uxth	r3, r3
 800887c:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800887e:	b2da      	uxtb	r2, r3
 8008880:	684b      	ldr	r3, [r1, #4]
 8008882:	4003      	ands	r3, r0
 8008884:	433b      	orrs	r3, r7
 8008886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800888a:	f043 4302 	orr.w	r3, r3, #2181038080	@ 0x82000000
 800888e:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 8008892:	604b      	str	r3, [r1, #4]
}
 8008894:	e763      	b.n	800875e <HAL_I2C_Mem_Read+0xca>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008896:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008898:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800889a:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800889c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800889e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088a0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088a4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80088a8:	2300      	movs	r3, #0
 80088aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80088ae:	e778      	b.n	80087a2 <HAL_I2C_Mem_Read+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088b0:	462a      	mov	r2, r5
 80088b2:	4631      	mov	r1, r6
 80088b4:	4620      	mov	r0, r4
 80088b6:	f7ff fcf5 	bl	80082a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	f47f af71 	bne.w	80087a2 <HAL_I2C_Mem_Read+0x10e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088c0:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80088c2:	4d09      	ldr	r5, [pc, #36]	@ (80088e8 <HAL_I2C_Mem_Read+0x254>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088c4:	2120      	movs	r1, #32
 80088c6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	402a      	ands	r2, r5
 80088cc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80088ce:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80088d2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088d6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80088da:	e763      	b.n	80087a4 <HAL_I2C_Mem_Read+0x110>
 80088dc:	fc009800 	.word	0xfc009800
 80088e0:	81ff2400 	.word	0x81ff2400
 80088e4:	fc009c00 	.word	0xfc009c00
 80088e8:	fe00e800 	.word	0xfe00e800

080088ec <HAL_I2C_GetState>:
  return hi2c->State;
 80088ec:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop

080088f4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088f4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80088f8:	2a20      	cmp	r2, #32
 80088fa:	d123      	bne.n	8008944 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80088fc:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008900:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008904:	2a01      	cmp	r2, #1
 8008906:	4603      	mov	r3, r0
 8008908:	d01c      	beq.n	8008944 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800890a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800890c:	2024      	movs	r0, #36	@ 0x24
{
 800890e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008910:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008914:	6810      	ldr	r0, [r2, #0]
 8008916:	f020 0001 	bic.w	r0, r0, #1
 800891a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800891c:	6810      	ldr	r0, [r2, #0]
 800891e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008922:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008924:	6810      	ldr	r0, [r2, #0]
 8008926:	4301      	orrs	r1, r0
 8008928:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800892a:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800892c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8008930:	f041 0101 	orr.w	r1, r1, #1
 8008934:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008936:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800893a:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 800893e:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008940:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8008944:	2002      	movs	r0, #2
}
 8008946:	4770      	bx	lr

08008948 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008948:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800894c:	2a20      	cmp	r2, #32
 800894e:	d122      	bne.n	8008996 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8008950:	b500      	push	{lr}
 8008952:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008956:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800895a:	2a01      	cmp	r2, #1
 800895c:	4603      	mov	r3, r0
 800895e:	d01c      	beq.n	800899a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008960:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008962:	2024      	movs	r0, #36	@ 0x24
 8008964:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008968:	6810      	ldr	r0, [r2, #0]
 800896a:	f020 0001 	bic.w	r0, r0, #1
 800896e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008970:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008972:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008976:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800897a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800897c:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800897e:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8008982:	f041 0101 	orr.w	r1, r1, #1
 8008986:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008988:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800898c:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8008990:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008992:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8008996:	2002      	movs	r0, #2
}
 8008998:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800899a:	2002      	movs	r0, #2
}
 800899c:	f85d fb04 	ldr.w	pc, [sp], #4

080089a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80089a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089a2:	b08b      	sub	sp, #44	@ 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80089a4:	b360      	cbz	r0, 8008a00 <HAL_PCD_Init+0x60>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80089a6:	f890 33bd 	ldrb.w	r3, [r0, #957]	@ 0x3bd
  USBx = hpcd->Instance;
 80089aa:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80089ac:	4605      	mov	r5, r0
 80089ae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d079      	beq.n	8008aaa <HAL_PCD_Init+0x10a>
 80089b6:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80089b8:	2303      	movs	r3, #3
 80089ba:	f885 33bd 	strb.w	r3, [r5, #957]	@ 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80089be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089c0:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80089c2:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
    hpcd->Init.dma_enable = 0U;
 80089c6:	bf08      	it	eq
 80089c8:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 80089ca:	f005 ffc3 	bl	800e954 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089ce:	f856 eb10 	ldr.w	lr, [r6], #16
 80089d2:	46b4      	mov	ip, r6
 80089d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80089d8:	466c      	mov	r4, sp
 80089da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80089e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089e2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80089e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80089ea:	1d2f      	adds	r7, r5, #4
 80089ec:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80089f0:	4670      	mov	r0, lr
 80089f2:	f005 fef5 	bl	800e7e0 <USB_CoreInit>
 80089f6:	4604      	mov	r4, r0
 80089f8:	b130      	cbz	r0, 8008a08 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80089fa:	2302      	movs	r3, #2
 80089fc:	f885 33bd 	strb.w	r3, [r5, #957]	@ 0x3bd
    return HAL_ERROR;
 8008a00:	2401      	movs	r4, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8008a02:	4620      	mov	r0, r4
 8008a04:	b00b      	add	sp, #44	@ 0x2c
 8008a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008a08:	4601      	mov	r1, r0
 8008a0a:	6828      	ldr	r0, [r5, #0]
 8008a0c:	f005 ffaa 	bl	800e964 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a10:	6868      	ldr	r0, [r5, #4]
 8008a12:	b358      	cbz	r0, 8008a6c <HAL_PCD_Init+0xcc>
 8008a14:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008a16:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008a1a:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008a1c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8008a20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a24:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008a2c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a30:	fa5f f28c 	uxtb.w	r2, ip
 8008a34:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008a36:	e9c3 1111 	strd	r1, r1, [r3, #68]	@ 0x44
    hpcd->IN_ep[i].is_in = 1U;
 8008a3a:	f883 e03d 	strb.w	lr, [r3, #61]	@ 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008a3e:	f883 103f 	strb.w	r1, [r3, #63]	@ 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8008a42:	6519      	str	r1, [r3, #80]	@ 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a44:	d3ea      	bcc.n	8008a1c <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8008a46:	2200      	movs	r2, #0
 8008a48:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8008a4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a50:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8008a52:	f883 41fc 	strb.w	r4, [r3, #508]	@ 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a56:	b2cc      	uxtb	r4, r1
 8008a58:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008a5a:	e9c3 2281 	strd	r2, r2, [r3, #516]	@ 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 8008a5e:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008a62:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008a66:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a6a:	d3ed      	bcc.n	8008a48 <HAL_PCD_Init+0xa8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008a6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008a6e:	466c      	mov	r4, sp
 8008a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a76:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008a7a:	e884 0003 	stmia.w	r4, {r0, r1}
 8008a7e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008a82:	6828      	ldr	r0, [r5, #0]
 8008a84:	f005 ff86 	bl	800e994 <USB_DevInit>
 8008a88:	4604      	mov	r4, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d1b5      	bne.n	80089fa <HAL_PCD_Init+0x5a>
  if (hpcd->Init.lpm_enable == 1U)
 8008a8e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  hpcd->USB_Address = 0U;
 8008a90:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008a94:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8008a96:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8008a98:	f885 23bd 	strb.w	r2, [r5, #957]	@ 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_PCD_Init+0x116>
  (void)USB_DevDisconnect(hpcd->Instance);
 8008a9e:	6828      	ldr	r0, [r5, #0]
 8008aa0:	f006 fb06 	bl	800f0b0 <USB_DevDisconnect>
}
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	b00b      	add	sp, #44	@ 0x2c
 8008aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8008aaa:	f880 23bc 	strb.w	r2, [r0, #956]	@ 0x3bc
    HAL_PCD_MspInit(hpcd);
 8008aae:	f7f8 fdaf 	bl	8001610 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8008ab2:	6828      	ldr	r0, [r5, #0]
 8008ab4:	e780      	b.n	80089b8 <HAL_PCD_Init+0x18>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f000 fca4 	bl	8009404 <HAL_PCDEx_ActivateLPM>
 8008abc:	e7ef      	b.n	8008a9e <HAL_PCD_Init+0xfe>
 8008abe:	bf00      	nop

08008ac0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ac0:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008ac2:	f890 33bc 	ldrb.w	r3, [r0, #956]	@ 0x3bc
 8008ac6:	2b01      	cmp	r3, #1
{
 8008ac8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008aca:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008acc:	d012      	beq.n	8008af4 <HAL_PCD_Start+0x34>
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008ace:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  __HAL_LOCK(hpcd);
 8008ad0:	2201      	movs	r2, #1
  if (hpcd->Init.battery_charging_enable == 1U)
 8008ad2:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8008ad4:	f884 23bc 	strb.w	r2, [r4, #956]	@ 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 8008ad8:	d103      	bne.n	8008ae2 <HAL_PCD_Start+0x22>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ada:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ae0:	6383      	str	r3, [r0, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008ae2:	f005 ff2f 	bl	800e944 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008ae6:	6820      	ldr	r0, [r4, #0]
 8008ae8:	f006 fad2 	bl	800f090 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008aec:	2000      	movs	r0, #0
 8008aee:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc

  return HAL_OK;
}
 8008af2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008af4:	2002      	movs	r0, #2
}
 8008af6:	bd10      	pop	{r4, pc}

08008af8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008afc:	6806      	ldr	r6, [r0, #0]
{
 8008afe:	b085      	sub	sp, #20
 8008b00:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008b02:	4630      	mov	r0, r6
 8008b04:	f006 fb12 	bl	800f12c <USB_GetMode>
 8008b08:	b110      	cbz	r0, 8008b10 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8008b0a:	b005      	add	sp, #20
 8008b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008b10:	4605      	mov	r5, r0
 8008b12:	6820      	ldr	r0, [r4, #0]
 8008b14:	f006 fadc 	bl	800f0d0 <USB_ReadInterrupts>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d0f6      	beq.n	8008b0a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008b1c:	6820      	ldr	r0, [r4, #0]
 8008b1e:	f006 fad7 	bl	800f0d0 <USB_ReadInterrupts>
 8008b22:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008b26:	6820      	ldr	r0, [r4, #0]
 8008b28:	bf1e      	ittt	ne
 8008b2a:	6943      	ldrne	r3, [r0, #20]
 8008b2c:	f003 0302 	andne.w	r3, r3, #2
 8008b30:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008b32:	f006 facd 	bl	800f0d0 <USB_ReadInterrupts>
 8008b36:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b3a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008b3c:	d012      	beq.n	8008b64 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b3e:	6983      	ldr	r3, [r0, #24]
 8008b40:	f023 0310 	bic.w	r3, r3, #16
 8008b44:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8008b46:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008b48:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8008b4c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008b4e:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008b52:	f000 824f 	beq.w	8008ff4 <HAL_PCD_IRQHandler+0x4fc>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008b56:	2b06      	cmp	r3, #6
 8008b58:	f000 81ec 	beq.w	8008f34 <HAL_PCD_IRQHandler+0x43c>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b5c:	6983      	ldr	r3, [r0, #24]
 8008b5e:	f043 0310 	orr.w	r3, r3, #16
 8008b62:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008b64:	f006 fab4 	bl	800f0d0 <USB_ReadInterrupts>
 8008b68:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008b6c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008b6e:	f040 8106 	bne.w	8008d7e <HAL_PCD_IRQHandler+0x286>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008b72:	f006 faad 	bl	800f0d0 <USB_ReadInterrupts>
 8008b76:	0340      	lsls	r0, r0, #13
 8008b78:	d478      	bmi.n	8008c6c <HAL_PCD_IRQHandler+0x174>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008b7a:	f8d4 c000 	ldr.w	ip, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008b7e:	4660      	mov	r0, ip
 8008b80:	f006 faa6 	bl	800f0d0 <USB_ReadInterrupts>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	db5d      	blt.n	8008c44 <HAL_PCD_IRQHandler+0x14c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	f006 faa1 	bl	800f0d0 <USB_ReadInterrupts>
 8008b8e:	0500      	lsls	r0, r0, #20
 8008b90:	d44d      	bmi.n	8008c2e <HAL_PCD_IRQHandler+0x136>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b92:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008b94:	f006 fa9c 	bl	800f0d0 <USB_ReadInterrupts>
 8008b98:	0102      	lsls	r2, r0, #4
 8008b9a:	d514      	bpl.n	8008bc6 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008b9c:	6822      	ldr	r2, [r4, #0]
 8008b9e:	6953      	ldr	r3, [r2, #20]
 8008ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ba4:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008ba6:	f894 33f4 	ldrb.w	r3, [r4, #1012]	@ 0x3f4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 81ac 	bne.w	8008f08 <HAL_PCD_IRQHandler+0x410>
        hpcd->LPM_State = LPM_L1;
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	f884 13f4 	strb.w	r1, [r4, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008bb6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008bb8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008bbc:	f8c4 33f8 	str.w	r3, [r4, #1016]	@ 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7f8 fe87 	bl	80018d4 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008bc6:	6820      	ldr	r0, [r4, #0]
 8008bc8:	f006 fa82 	bl	800f0d0 <USB_ReadInterrupts>
 8008bcc:	04c3      	lsls	r3, r0, #19
 8008bce:	f100 814c 	bmi.w	8008e6a <HAL_PCD_IRQHandler+0x372>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008bd2:	6820      	ldr	r0, [r4, #0]
 8008bd4:	f006 fa7c 	bl	800f0d0 <USB_ReadInterrupts>
 8008bd8:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8008bdc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008bde:	f040 812d 	bne.w	8008e3c <HAL_PCD_IRQHandler+0x344>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008be2:	f006 fa75 	bl	800f0d0 <USB_ReadInterrupts>
 8008be6:	0707      	lsls	r7, r0, #28
 8008be8:	f100 811f 	bmi.w	8008e2a <HAL_PCD_IRQHandler+0x332>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	f006 fa6f 	bl	800f0d0 <USB_ReadInterrupts>
 8008bf2:	02c6      	lsls	r6, r0, #11
 8008bf4:	f100 810f 	bmi.w	8008e16 <HAL_PCD_IRQHandler+0x31e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	f006 fa69 	bl	800f0d0 <USB_ReadInterrupts>
 8008bfe:	0285      	lsls	r5, r0, #10
 8008c00:	f100 80ff 	bmi.w	8008e02 <HAL_PCD_IRQHandler+0x30a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	f006 fa63 	bl	800f0d0 <USB_ReadInterrupts>
 8008c0a:	0040      	lsls	r0, r0, #1
 8008c0c:	f100 80f0 	bmi.w	8008df0 <HAL_PCD_IRQHandler+0x2f8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008c10:	6820      	ldr	r0, [r4, #0]
 8008c12:	f006 fa5d 	bl	800f0d0 <USB_ReadInterrupts>
 8008c16:	0741      	lsls	r1, r0, #29
 8008c18:	f57f af77 	bpl.w	8008b0a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008c20:	076a      	lsls	r2, r5, #29
 8008c22:	f100 8208 	bmi.w	8009036 <HAL_PCD_IRQHandler+0x53e>
      hpcd->Instance->GOTGINT |= temp;
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	432a      	orrs	r2, r5
 8008c2a:	605a      	str	r2, [r3, #4]
 8008c2c:	e76d      	b.n	8008b0a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008c2e:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 8008c32:	07d9      	lsls	r1, r3, #31
 8008c34:	f100 81fb 	bmi.w	800902e <HAL_PCD_IRQHandler+0x536>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	6943      	ldr	r3, [r0, #20]
 8008c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c40:	6143      	str	r3, [r0, #20]
 8008c42:	e7a7      	b.n	8008b94 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c44:	f8d6 2804 	ldr.w	r2, [r6, #2052]	@ 0x804
 8008c48:	f022 0201 	bic.w	r2, r2, #1
 8008c4c:	f8c6 2804 	str.w	r2, [r6, #2052]	@ 0x804
      if (hpcd->LPM_State == LPM_L1)
 8008c50:	f894 33f4 	ldrb.w	r3, [r4, #1012]	@ 0x3f4
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	f000 8166 	beq.w	8008f26 <HAL_PCD_IRQHandler+0x42e>
        HAL_PCD_ResumeCallback(hpcd);
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7f8 fd5e 	bl	800171c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	6943      	ldr	r3, [r0, #20]
 8008c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c68:	6143      	str	r3, [r0, #20]
 8008c6a:	e78e      	b.n	8008b8a <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	f006 fa3b 	bl	800f0e8 <USB_ReadDevAllInEpInterrupt>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008c72:	f8d4 c000 	ldr.w	ip, [r4]
      while (ep_intr != 0U)
 8008c76:	4681      	mov	r9, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d080      	beq.n	8008b7e <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	46a0      	mov	r8, r4
 8008c80:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c84:	9600      	str	r6, [sp, #0]
 8008c86:	469b      	mov	fp, r3
 8008c88:	9501      	str	r5, [sp, #4]
 8008c8a:	4660      	mov	r0, ip
 8008c8c:	e009      	b.n	8008ca2 <HAL_PCD_IRQHandler+0x1aa>
      while (ep_intr != 0U)
 8008c8e:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8008c92:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 8008c96:	f108 081c 	add.w	r8, r8, #28
 8008c9a:	f107 0720 	add.w	r7, r7, #32
 8008c9e:	f000 8160 	beq.w	8008f62 <HAL_PCD_IRQHandler+0x46a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008ca2:	f019 0f01 	tst.w	r9, #1
 8008ca6:	d0f2      	beq.n	8008c8e <HAL_PCD_IRQHandler+0x196>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ca8:	fa5f fa8b 	uxtb.w	sl, fp
 8008cac:	4651      	mov	r1, sl
 8008cae:	f006 fa2d 	bl	800f10c <USB_ReadDevInEPInterrupt>
 8008cb2:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008cb4:	07e8      	lsls	r0, r5, #31
 8008cb6:	f100 8158 	bmi.w	8008f6a <HAL_PCD_IRQHandler+0x472>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008cba:	0729      	lsls	r1, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008cbc:	bf44      	itt	mi
 8008cbe:	2308      	movmi	r3, #8
 8008cc0:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008cc2:	06ea      	lsls	r2, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008cc4:	bf44      	itt	mi
 8008cc6:	2310      	movmi	r3, #16
 8008cc8:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008cca:	066b      	lsls	r3, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008ccc:	bf44      	itt	mi
 8008cce:	2340      	movmi	r3, #64	@ 0x40
 8008cd0:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008cd2:	07ae      	lsls	r6, r5, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008cd4:	bf44      	itt	mi
 8008cd6:	2302      	movmi	r3, #2
 8008cd8:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008cda:	062d      	lsls	r5, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cdc:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008cde:	d5d6      	bpl.n	8008c8e <HAL_PCD_IRQHandler+0x196>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8008ce0:	e9d8 5214 	ldrd	r5, r2, [r8, #80]	@ 0x50
 8008ce4:	42aa      	cmp	r2, r5
 8008ce6:	d8d2      	bhi.n	8008c8e <HAL_PCD_IRQHandler+0x196>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ce8:	f500 6110 	add.w	r1, r0, #2304	@ 0x900
 8008cec:	eb01 164b 	add.w	r6, r1, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8008cf0:	f8d8 1044 	ldr.w	r1, [r8, #68]	@ 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cf4:	69b3      	ldr	r3, [r6, #24]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	9003      	str	r0, [sp, #12]
  len = ep->xfer_len - ep->xfer_count;
 8008cf8:	eba5 0c02 	sub.w	ip, r5, r2
  len32b = (len + 3U) / 4U;
 8008cfc:	458c      	cmp	ip, r1
 8008cfe:	bf28      	it	cs
 8008d00:	468c      	movcs	ip, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d02:	fa1f fe83 	uxth.w	lr, r3
  len32b = (len + 3U) / 4U;
 8008d06:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d0a:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 8008d0e:	f0c0 819c 	bcc.w	800904a <HAL_PCD_IRQHandler+0x552>
 8008d12:	f8cd b008 	str.w	fp, [sp, #8]
 8008d16:	4683      	mov	fp, r0
 8008d18:	e01e      	b.n	8008d58 <HAL_PCD_IRQHandler+0x260>
 8008d1a:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008d1e:	f8d8 1048 	ldr.w	r1, [r8, #72]	@ 0x48
 8008d22:	429d      	cmp	r5, r3
 8008d24:	bf28      	it	cs
 8008d26:	461d      	movcs	r5, r3
 8008d28:	b2ab      	uxth	r3, r5
 8008d2a:	4652      	mov	r2, sl
 8008d2c:	4658      	mov	r0, fp
 8008d2e:	f006 f925 	bl	800ef7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008d32:	f8d8 3048 	ldr.w	r3, [r8, #72]	@ 0x48
    ep->xfer_count += len;
 8008d36:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
    ep->xfer_buff  += len;
 8008d3a:	442b      	add	r3, r5
 8008d3c:	f8c8 3048 	str.w	r3, [r8, #72]	@ 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d40:	69b3      	ldr	r3, [r6, #24]
    ep->xfer_count += len;
 8008d42:	442a      	add	r2, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d44:	b29b      	uxth	r3, r3
    len32b = (len + 3U) / 4U;
 8008d46:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d48:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
    ep->xfer_count += len;
 8008d4c:	f8c8 2054 	str.w	r2, [r8, #84]	@ 0x54
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d50:	f0c0 8176 	bcc.w	8009040 <HAL_PCD_IRQHandler+0x548>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008d54:	f8d8 5050 	ldr.w	r5, [r8, #80]	@ 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d58:	4295      	cmp	r5, r2
    len = ep->xfer_len - ep->xfer_count;
 8008d5a:	eba5 0502 	sub.w	r5, r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d5e:	d8dc      	bhi.n	8008d1a <HAL_PCD_IRQHandler+0x222>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008d60:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008d64:	6820      	ldr	r0, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d66:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d68:	f00b 050f 	and.w	r5, fp, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d6c:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d70:	2101      	movs	r1, #1
 8008d72:	40a9      	lsls	r1, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d74:	ea22 0201 	bic.w	r2, r2, r1
 8008d78:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
 8008d7c:	e787      	b.n	8008c8e <HAL_PCD_IRQHandler+0x196>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008d7e:	f006 f9ab 	bl	800f0d8 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8008d82:	4607      	mov	r7, r0
 8008d84:	2800      	cmp	r0, #0
 8008d86:	f000 80e8 	beq.w	8008f5a <HAL_PCD_IRQHandler+0x462>
 8008d8a:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008d8c:	9500      	str	r5, [sp, #0]
 8008d8e:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
      epnum = 0U;
 8008d92:	f04f 0900 	mov.w	r9, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008d96:	f44f 5b00 	mov.w	fp, #8192	@ 0x2000
 8008d9a:	e006      	b.n	8008daa <HAL_PCD_IRQHandler+0x2b2>
      while (ep_intr != 0U)
 8008d9c:	087f      	lsrs	r7, r7, #1
        epnum++;
 8008d9e:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8008da2:	f108 0820 	add.w	r8, r8, #32
 8008da6:	f000 80da 	beq.w	8008f5e <HAL_PCD_IRQHandler+0x466>
        if ((ep_intr & 0x1U) != 0U)
 8008daa:	07f9      	lsls	r1, r7, #31
 8008dac:	d5f6      	bpl.n	8008d9c <HAL_PCD_IRQHandler+0x2a4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008dae:	fa5f f589 	uxtb.w	r5, r9
 8008db2:	4629      	mov	r1, r5
 8008db4:	f006 f9a0 	bl	800f0f8 <USB_ReadDevOutEPInterrupt>
 8008db8:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008dba:	f01a 0f01 	tst.w	sl, #1
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dbe:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008dc0:	f040 80fb 	bne.w	8008fba <HAL_PCD_IRQHandler+0x4c2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008dc4:	f01a 0f08 	tst.w	sl, #8
 8008dc8:	f040 80e1 	bne.w	8008f8e <HAL_PCD_IRQHandler+0x496>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008dcc:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008dd0:	bf1c      	itt	ne
 8008dd2:	2310      	movne	r3, #16
 8008dd4:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008dd8:	f01a 0f20 	tst.w	sl, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ddc:	bf1c      	itt	ne
 8008dde:	2320      	movne	r3, #32
 8008de0:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008de4:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008de8:	bf18      	it	ne
 8008dea:	f8c8 b008 	strne.w	fp, [r8, #8]
 8008dee:	e7d5      	b.n	8008d9c <HAL_PCD_IRQHandler+0x2a4>
      HAL_PCD_ConnectCallback(hpcd);
 8008df0:	4620      	mov	r0, r4
 8008df2:	f7f8 fcbb 	bl	800176c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	6943      	ldr	r3, [r0, #20]
 8008dfa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008dfe:	6143      	str	r3, [r0, #20]
 8008e00:	e707      	b.n	8008c12 <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008e02:	4620      	mov	r0, r4
 8008e04:	2100      	movs	r1, #0
 8008e06:	f7f8 fca9 	bl	800175c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e0a:	6820      	ldr	r0, [r4, #0]
 8008e0c:	6943      	ldr	r3, [r0, #20]
 8008e0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e12:	6143      	str	r3, [r0, #20]
 8008e14:	e6f7      	b.n	8008c06 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008e16:	4620      	mov	r0, r4
 8008e18:	2100      	movs	r1, #0
 8008e1a:	f7f8 fca3 	bl	8001764 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e1e:	6820      	ldr	r0, [r4, #0]
 8008e20:	6943      	ldr	r3, [r0, #20]
 8008e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e26:	6143      	str	r3, [r0, #20]
 8008e28:	e6e7      	b.n	8008bfa <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f7f8 fc4c 	bl	80016c8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008e30:	6820      	ldr	r0, [r4, #0]
 8008e32:	6943      	ldr	r3, [r0, #20]
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	6143      	str	r3, [r0, #20]
 8008e3a:	e6d8      	b.n	8008bee <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8008e3c:	f006 f97a 	bl	800f134 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008e40:	6820      	ldr	r0, [r4, #0]
 8008e42:	f005 fe93 	bl	800eb6c <USB_GetDevSpeed>
 8008e46:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e48:	6825      	ldr	r5, [r4, #0]
 8008e4a:	f001 f839 	bl	8009ec0 <HAL_RCC_GetHCLKFreq>
 8008e4e:	7b22      	ldrb	r2, [r4, #12]
 8008e50:	4601      	mov	r1, r0
 8008e52:	4628      	mov	r0, r5
 8008e54:	f005 fcfc 	bl	800e850 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f7f8 fc39 	bl	80016d0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008e5e:	6820      	ldr	r0, [r4, #0]
 8008e60:	6943      	ldr	r3, [r0, #20]
 8008e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e66:	6143      	str	r3, [r0, #20]
 8008e68:	e6bb      	b.n	8008be2 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e6a:	f8d6 3804 	ldr.w	r3, [r6, #2052]	@ 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008e6e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e70:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008e74:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e76:	f8c6 3804 	str.w	r3, [r6, #2052]	@ 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008e7a:	f005 fe65 	bl	800eb48 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e7e:	6860      	ldr	r0, [r4, #4]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e80:	f506 6700 	add.w	r7, r6, #2048	@ 0x800
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e84:	b1f8      	cbz	r0, 8008ec6 <HAL_PCD_IRQHandler+0x3ce>
 8008e86:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008e8a:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8008e8e:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8008e96:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008e9e:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008ea0:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ea4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008ea8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8008eac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008eb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eb4:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008eb6:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eba:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ebc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ec0:	f103 0320 	add.w	r3, r3, #32
 8008ec4:	d1e3      	bne.n	8008e8e <HAL_PCD_IRQHandler+0x396>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ec6:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ec8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008eca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008ece:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ed0:	b9f2      	cbnz	r2, 8008f10 <HAL_PCD_IRQHandler+0x418>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008ed8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008edc:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f043 030b 	orr.w	r3, r3, #11
 8008ee4:	613b      	str	r3, [r7, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008ee6:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008eea:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008eec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008ef0:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008ef4:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 8008ef8:	f006 f92e 	bl	800f158 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	6943      	ldr	r3, [r0, #20]
 8008f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f04:	6143      	str	r3, [r0, #20]
 8008f06:	e665      	b.n	8008bd4 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7f8 fbef 	bl	80016ec <HAL_PCD_SuspendCallback>
 8008f0e:	e65a      	b.n	8008bc6 <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f14:	f043 030b 	orr.w	r3, r3, #11
 8008f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f1e:	f043 030b 	orr.w	r3, r3, #11
 8008f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f24:	e7df      	b.n	8008ee6 <HAL_PCD_IRQHandler+0x3ee>
        hpcd->LPM_State = LPM_L0;
 8008f26:	2100      	movs	r1, #0
 8008f28:	f884 13f4 	strb.w	r1, [r4, #1012]	@ 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7f8 fcd1 	bl	80018d4 <HAL_PCDEx_LPM_Callback>
 8008f32:	e695      	b.n	8008c60 <HAL_PCD_IRQHandler+0x168>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008f34:	2208      	movs	r2, #8
 8008f36:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 8008f3a:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f3c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008f40:	f006 f82c 	bl	800ef9c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f44:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8008f48:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8008f4c:	f8d2 1214 	ldr.w	r1, [r2, #532]	@ 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f50:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f52:	440b      	add	r3, r1
 8008f54:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 8008f58:	e600      	b.n	8008b5c <HAL_PCD_IRQHandler+0x64>
 8008f5a:	6820      	ldr	r0, [r4, #0]
 8008f5c:	e609      	b.n	8008b72 <HAL_PCD_IRQHandler+0x7a>
 8008f5e:	9d00      	ldr	r5, [sp, #0]
 8008f60:	e607      	b.n	8008b72 <HAL_PCD_IRQHandler+0x7a>
 8008f62:	e9dd 6500 	ldrd	r6, r5, [sp]
 8008f66:	4684      	mov	ip, r0
 8008f68:	e609      	b.n	8008b7e <HAL_PCD_IRQHandler+0x86>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f6a:	9800      	ldr	r0, [sp, #0]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f6c:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f6e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f72:	f00b 020f 	and.w	r2, fp, #15
 8008f76:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f7a:	ea23 0302 	bic.w	r3, r3, r2
 8008f7e:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008f82:	60b9      	str	r1, [r7, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008f84:	4620      	mov	r0, r4
 8008f86:	4651      	mov	r1, sl
 8008f88:	f7f8 fb94 	bl	80016b4 <HAL_PCD_DataInStageCallback>
 8008f8c:	e695      	b.n	8008cba <HAL_PCD_IRQHandler+0x1c2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008f8e:	2308      	movs	r3, #8
 8008f90:	f8c8 3008 	str.w	r3, [r8, #8]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f94:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f96:	4a2f      	ldr	r2, [pc, #188]	@ (8009054 <HAL_PCD_IRQHandler+0x55c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f98:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 8008f9c:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fa0:	4291      	cmp	r1, r2
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008fa2:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fa4:	d904      	bls.n	8008fb0 <HAL_PCD_IRQHandler+0x4b8>
 8008fa6:	0405      	lsls	r5, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fa8:	bf44      	itt	mi
 8008faa:	f44f 4200 	movmi.w	r2, #32768	@ 0x8000
 8008fae:	609a      	strmi	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f7f8 fb6f 	bl	8001694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	e708      	b.n	8008dcc <HAL_PCD_IRQHandler+0x2d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008fc0:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008fc4:	4a24      	ldr	r2, [pc, #144]	@ (8009058 <HAL_PCD_IRQHandler+0x560>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008fc6:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 8008fca:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008fce:	4594      	cmp	ip, r2
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008fd0:	6899      	ldr	r1, [r3, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008fd2:	d109      	bne.n	8008fe8 <HAL_PCD_IRQHandler+0x4f0>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008fd4:	040a      	lsls	r2, r1, #16
 8008fd6:	d503      	bpl.n	8008fe0 <HAL_PCD_IRQHandler+0x4e8>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fd8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008fdc:	609a      	str	r2, [r3, #8]
 8008fde:	e6f1      	b.n	8008dc4 <HAL_PCD_IRQHandler+0x2cc>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008fe0:	068a      	lsls	r2, r1, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008fe2:	bf44      	itt	mi
 8008fe4:	2220      	movmi	r2, #32
 8008fe6:	609a      	strmi	r2, [r3, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008fe8:	4620      	mov	r0, r4
 8008fea:	4629      	mov	r1, r5
 8008fec:	f7f8 fb58 	bl	80016a0 <HAL_PCD_DataOutStageCallback>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	e6e7      	b.n	8008dc4 <HAL_PCD_IRQHandler+0x2cc>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ff4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008ff8:	421f      	tst	r7, r3
 8008ffa:	f43f adaf 	beq.w	8008b5c <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ffe:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009002:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8009006:	f3c7 120a 	ubfx	r2, r7, #4, #11
 800900a:	f8d8 1208 	ldr.w	r1, [r8, #520]	@ 0x208
 800900e:	4630      	mov	r0, r6
 8009010:	4617      	mov	r7, r2
 8009012:	f005 ffc3 	bl	800ef9c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009016:	f8d8 3208 	ldr.w	r3, [r8, #520]	@ 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800901a:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800901c:	443b      	add	r3, r7
 800901e:	f8c8 3208 	str.w	r3, [r8, #520]	@ 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009022:	f8d8 3214 	ldr.w	r3, [r8, #532]	@ 0x214
 8009026:	443b      	add	r3, r7
 8009028:	f8c8 3214 	str.w	r3, [r8, #532]	@ 0x214
 800902c:	e596      	b.n	8008b5c <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800902e:	4620      	mov	r0, r4
 8009030:	f7f8 fb5c 	bl	80016ec <HAL_PCD_SuspendCallback>
 8009034:	e600      	b.n	8008c38 <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 8009036:	4620      	mov	r0, r4
 8009038:	f7f8 fb9c 	bl	8001774 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	e5f2      	b.n	8008c26 <HAL_PCD_IRQHandler+0x12e>
  if (ep->xfer_len <= ep->xfer_count)
 8009040:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009044:	f8d8 5050 	ldr.w	r5, [r8, #80]	@ 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009048:	6820      	ldr	r0, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 800904a:	42aa      	cmp	r2, r5
 800904c:	f4ff ae1f 	bcc.w	8008c8e <HAL_PCD_IRQHandler+0x196>
 8009050:	e689      	b.n	8008d66 <HAL_PCD_IRQHandler+0x26e>
 8009052:	bf00      	nop
 8009054:	4f54300a 	.word	0x4f54300a
 8009058:	4f54310a 	.word	0x4f54310a

0800905c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800905c:	f890 23bc 	ldrb.w	r2, [r0, #956]	@ 0x3bc
 8009060:	2a01      	cmp	r2, #1
 8009062:	d00d      	beq.n	8009080 <HAL_PCD_SetAddress+0x24>
{
 8009064:	b510      	push	{r4, lr}
 8009066:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8009068:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800906a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800906c:	f884 23bc 	strb.w	r2, [r4, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8009070:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009074:	f005 fffc 	bl	800f070 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009078:	2000      	movs	r0, #0
 800907a:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 800907e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009080:	2002      	movs	r0, #2
}
 8009082:	4770      	bx	lr

08009084 <HAL_PCD_EP_Open>:
{
 8009084:	b510      	push	{r4, lr}
 8009086:	f001 0e0f 	and.w	lr, r1, #15
 800908a:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 800908e:	0609      	lsls	r1, r1, #24
{
 8009090:	4604      	mov	r4, r0
 8009092:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8009096:	d424      	bmi.n	80090e2 <HAL_PCD_EP_Open+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009098:	f50c 71fe 	add.w	r1, ip, #508	@ 0x1fc
 800909c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800909e:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 80090a2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80090a6:	f04f 0c00 	mov.w	ip, #0
 80090aa:	f880 c1fd 	strb.w	ip, [r0, #509]	@ 0x1fd
  ep->maxpacket = ep_mps;
 80090ae:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80090b0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090b2:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 80090b6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80090b8:	b10a      	cbz	r2, 80090be <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 80090ba:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80090be:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80090c0:	bf04      	itt	eq
 80090c2:	2300      	moveq	r3, #0
 80090c4:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80090c6:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d015      	beq.n	80090fa <HAL_PCD_EP_Open+0x76>
 80090ce:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80090d0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80090d2:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80090d6:	f005 fd53 	bl	800eb80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090da:	2000      	movs	r0, #0
 80090dc:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 80090e0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090e2:	f10c 013c 	add.w	r1, ip, #60	@ 0x3c
 80090e6:	4401      	add	r1, r0
    ep->is_in = 1U;
 80090e8:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 80090ec:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80090f0:	f04f 0c01 	mov.w	ip, #1
 80090f4:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
 80090f8:	e7d9      	b.n	80090ae <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 80090fa:	2002      	movs	r0, #2
}
 80090fc:	bd10      	pop	{r4, pc}
 80090fe:	bf00      	nop

08009100 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009100:	f001 030f 	and.w	r3, r1, #15
 8009104:	f001 020f 	and.w	r2, r1, #15
{
 8009108:	b510      	push	{r4, lr}
 800910a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800910e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009110:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 8009112:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
 8009116:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800911a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 800911e:	d415      	bmi.n	800914c <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009120:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009124:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8009126:	f04f 0c00 	mov.w	ip, #0
 800912a:	f880 c1fd 	strb.w	ip, [r0, #509]	@ 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800912e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009130:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 8009134:	2b01      	cmp	r3, #1
 8009136:	d014      	beq.n	8009162 <HAL_PCD_EP_Close+0x62>
 8009138:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800913a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800913c:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009140:	f005 fd66 	bl	800ec10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009144:	2000      	movs	r0, #0
 8009146:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 800914a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800914c:	333c      	adds	r3, #60	@ 0x3c
 800914e:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8009150:	f04f 0c01 	mov.w	ip, #1
 8009154:	f880 c03d 	strb.w	ip, [r0, #61]	@ 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009158:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800915a:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 800915e:	2b01      	cmp	r3, #1
 8009160:	d1ea      	bne.n	8009138 <HAL_PCD_EP_Close+0x38>
 8009162:	2002      	movs	r0, #2
}
 8009164:	bd10      	pop	{r4, pc}
 8009166:	bf00      	nop

08009168 <HAL_PCD_EP_Receive>:
{
 8009168:	b510      	push	{r4, lr}
 800916a:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 800916e:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8009172:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009176:	211c      	movs	r1, #28
 8009178:	fb01 0104 	mla	r1, r1, r4, r0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800917c:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 800917e:	f8cc 3210 	str.w	r3, [ip, #528]	@ 0x210
  ep->xfer_count = 0U;
 8009182:	2300      	movs	r3, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009184:	f501 71fe 	add.w	r1, r1, #508	@ 0x1fc
  ep->xfer_buff = pBuf;
 8009188:	f8cc 2208 	str.w	r2, [ip, #520]	@ 0x208
  ep->xfer_count = 0U;
 800918c:	f8cc 3214 	str.w	r3, [ip, #532]	@ 0x214
  ep->is_in = 0U;
 8009190:	f88c 31fd 	strb.w	r3, [ip, #509]	@ 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8009194:	f88c 41fc 	strb.w	r4, [ip, #508]	@ 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009198:	b91c      	cbnz	r4, 80091a2 <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800919a:	f005 fe7d 	bl	800ee98 <USB_EP0StartXfer>
}
 800919e:	2000      	movs	r0, #0
 80091a0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091a2:	f005 fd97 	bl	800ecd4 <USB_EPStartXfer>
}
 80091a6:	2000      	movs	r0, #0
 80091a8:	bd10      	pop	{r4, pc}
 80091aa:	bf00      	nop

080091ac <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80091ac:	f001 010f 	and.w	r1, r1, #15
 80091b0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80091b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80091b8:	f8d0 0214 	ldr.w	r0, [r0, #532]	@ 0x214
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop

080091c0 <HAL_PCD_EP_Transmit>:
{
 80091c0:	b510      	push	{r4, lr}
 80091c2:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 80091c6:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 80091ca:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091ce:	211c      	movs	r1, #28
 80091d0:	fb01 0104 	mla	r1, r1, r4, r0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80091d4:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 80091d6:	f8cc 3050 	str.w	r3, [ip, #80]	@ 0x50
  ep->xfer_count = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	f8cc 3054 	str.w	r3, [ip, #84]	@ 0x54
  ep->is_in = 1U;
 80091e0:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091e2:	313c      	adds	r1, #60	@ 0x3c
  ep->xfer_buff = pBuf;
 80091e4:	f8cc 2048 	str.w	r2, [ip, #72]	@ 0x48
  ep->is_in = 1U;
 80091e8:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80091ec:	f88c 403c 	strb.w	r4, [ip, #60]	@ 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091f0:	b91c      	cbnz	r4, 80091fa <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80091f2:	f005 fe51 	bl	800ee98 <USB_EP0StartXfer>
}
 80091f6:	2000      	movs	r0, #0
 80091f8:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091fa:	f005 fd6b 	bl	800ecd4 <USB_EPStartXfer>
}
 80091fe:	2000      	movs	r0, #0
 8009200:	bd10      	pop	{r4, pc}
 8009202:	bf00      	nop

08009204 <HAL_PCD_EP_SetStall>:
{
 8009204:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009206:	6843      	ldr	r3, [r0, #4]
 8009208:	f001 050f 	and.w	r5, r1, #15
 800920c:	429d      	cmp	r5, r3
 800920e:	d833      	bhi.n	8009278 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8009210:	060b      	lsls	r3, r1, #24
 8009212:	4604      	mov	r4, r0
 8009214:	d41c      	bmi.n	8009250 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8009216:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800921a:	221c      	movs	r2, #28
 800921c:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8009220:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8009224:	f501 71fe 	add.w	r1, r1, #508	@ 0x1fc
    ep->is_in = 0U;
 8009228:	2200      	movs	r2, #0
 800922a:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
  ep->is_stall = 1U;
 800922e:	2301      	movs	r3, #1
 8009230:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009232:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8009234:	f894 23bc 	ldrb.w	r2, [r4, #956]	@ 0x3bc
 8009238:	429a      	cmp	r2, r3
 800923a:	d01b      	beq.n	8009274 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800923c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800923e:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009242:	f005 febb 	bl	800efbc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009246:	b1cd      	cbz	r5, 800927c <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8009248:	2000      	movs	r0, #0
 800924a:	f884 03bc 	strb.w	r0, [r4, #956]	@ 0x3bc
}
 800924e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8009250:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009254:	211c      	movs	r1, #28
 8009256:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800925a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800925e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009260:	313c      	adds	r1, #60	@ 0x3c
    ep->is_in = 1U;
 8009262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  ep->is_stall = 1U;
 8009266:	2301      	movs	r3, #1
 8009268:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800926a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800926c:	f894 23bc 	ldrb.w	r2, [r4, #956]	@ 0x3bc
 8009270:	429a      	cmp	r2, r3
 8009272:	d1e3      	bne.n	800923c <HAL_PCD_EP_SetStall+0x38>
 8009274:	2002      	movs	r0, #2
}
 8009276:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009278:	2001      	movs	r0, #1
}
 800927a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800927c:	6820      	ldr	r0, [r4, #0]
 800927e:	f504 7171 	add.w	r1, r4, #964	@ 0x3c4
 8009282:	f005 ff69 	bl	800f158 <USB_EP0_OutStart>
 8009286:	e7df      	b.n	8009248 <HAL_PCD_EP_SetStall+0x44>

08009288 <HAL_PCD_EP_ClrStall>:
{
 8009288:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800928a:	6843      	ldr	r3, [r0, #4]
 800928c:	f001 020f 	and.w	r2, r1, #15
 8009290:	429a      	cmp	r2, r3
 8009292:	d82f      	bhi.n	80092f4 <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8009294:	4604      	mov	r4, r0
 8009296:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 800929a:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800929e:	0609      	lsls	r1, r1, #24
 80092a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 80092a4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 80092a8:	d416      	bmi.n	80092d8 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092aa:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80092ae:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 80092b0:	2500      	movs	r5, #0
 80092b2:	f880 51fd 	strb.w	r5, [r0, #509]	@ 0x1fd
  ep->is_stall = 0U;
 80092b6:	2500      	movs	r5, #0
 80092b8:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092ba:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80092bc:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d015      	beq.n	80092f0 <HAL_PCD_EP_ClrStall+0x68>
 80092c4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80092c6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80092c8:	f884 33bc 	strb.w	r3, [r4, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80092cc:	f005 fea4 	bl	800f018 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80092d0:	f884 53bc 	strb.w	r5, [r4, #956]	@ 0x3bc
  return HAL_OK;
 80092d4:	4628      	mov	r0, r5
}
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092d8:	333c      	adds	r3, #60	@ 0x3c
 80092da:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 80092dc:	2501      	movs	r5, #1
 80092de:	f880 503d 	strb.w	r5, [r0, #61]	@ 0x3d
  ep->is_stall = 0U;
 80092e2:	2500      	movs	r5, #0
 80092e4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092e6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80092e8:	f894 33bc 	ldrb.w	r3, [r4, #956]	@ 0x3bc
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d1e9      	bne.n	80092c4 <HAL_PCD_EP_ClrStall+0x3c>
 80092f0:	2002      	movs	r0, #2
}
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80092f4:	2001      	movs	r0, #1
}
 80092f6:	bd38      	pop	{r3, r4, r5, pc}

080092f8 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80092f8:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80092fa:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80092fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (fifo == 0U)
 80092fe:	b919      	cbnz	r1, 8009308 <HAL_PCDEx_SetTxFiFo+0x10>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009300:	4313      	orrs	r3, r2
 8009302:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8009304:	2000      	movs	r0, #0
 8009306:	4770      	bx	lr
{
 8009308:	b430      	push	{r4, r5}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800930a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800930c:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800930e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009312:	d06b      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009314:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
    for (i = 0U; i < (fifo - 1U); i++)
 8009318:	2901      	cmp	r1, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800931a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800931e:	d065      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009320:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    for (i = 0U; i < (fifo - 1U); i++)
 8009324:	2902      	cmp	r1, #2
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009326:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800932a:	d05f      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800932c:	f8d0 410c 	ldr.w	r4, [r0, #268]	@ 0x10c
    for (i = 0U; i < (fifo - 1U); i++)
 8009330:	2903      	cmp	r1, #3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009332:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009336:	d059      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009338:	f8d0 4110 	ldr.w	r4, [r0, #272]	@ 0x110
    for (i = 0U; i < (fifo - 1U); i++)
 800933c:	2904      	cmp	r1, #4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800933e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009342:	d053      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009344:	f8d0 4114 	ldr.w	r4, [r0, #276]	@ 0x114
    for (i = 0U; i < (fifo - 1U); i++)
 8009348:	2905      	cmp	r1, #5
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800934a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800934e:	d04d      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009350:	f8d0 4118 	ldr.w	r4, [r0, #280]	@ 0x118
    for (i = 0U; i < (fifo - 1U); i++)
 8009354:	2906      	cmp	r1, #6
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009356:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800935a:	d047      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800935c:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
    for (i = 0U; i < (fifo - 1U); i++)
 8009360:	2907      	cmp	r1, #7
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009362:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009366:	d041      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009368:	f8d0 4120 	ldr.w	r4, [r0, #288]	@ 0x120
    for (i = 0U; i < (fifo - 1U); i++)
 800936c:	2908      	cmp	r1, #8
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800936e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009372:	d03b      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009374:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
    for (i = 0U; i < (fifo - 1U); i++)
 8009378:	2909      	cmp	r1, #9
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800937a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800937e:	d035      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009380:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
    for (i = 0U; i < (fifo - 1U); i++)
 8009384:	290a      	cmp	r1, #10
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009386:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800938a:	d02f      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800938c:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
    for (i = 0U; i < (fifo - 1U); i++)
 8009390:	290b      	cmp	r1, #11
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009392:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009396:	d029      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009398:	f8d0 4130 	ldr.w	r4, [r0, #304]	@ 0x130
    for (i = 0U; i < (fifo - 1U); i++)
 800939c:	290c      	cmp	r1, #12
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800939e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80093a2:	d023      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093a4:	f8d0 4134 	ldr.w	r4, [r0, #308]	@ 0x134
    for (i = 0U; i < (fifo - 1U); i++)
 80093a8:	290d      	cmp	r1, #13
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80093ae:	d01d      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093b0:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
    for (i = 0U; i < (fifo - 1U); i++)
 80093b4:	290e      	cmp	r1, #14
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80093ba:	d017      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093bc:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
    for (i = 0U; i < (fifo - 1U); i++)
 80093c0:	290f      	cmp	r1, #15
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80093c6:	d011      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093c8:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
    for (i = 0U; i < (fifo - 1U); i++)
 80093cc:	2910      	cmp	r1, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80093d2:	d00b      	beq.n	80093ec <HAL_PCDEx_SetTxFiFo+0xf4>
 80093d4:	2410      	movs	r4, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093d6:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80093da:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80093de:	3401      	adds	r4, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093e0:	f8dc 5004 	ldr.w	r5, [ip, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80093e4:	428c      	cmp	r4, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093e6:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80093ea:	d3f4      	bcc.n	80093d6 <HAL_PCDEx_SetTxFiFo+0xde>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80093ec:	3140      	adds	r1, #64	@ 0x40
 80093ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80093f2:	431a      	orrs	r2, r3
}
 80093f4:	2000      	movs	r0, #0
 80093f6:	bc30      	pop	{r4, r5}
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80093f8:	604a      	str	r2, [r1, #4]
}
 80093fa:	4770      	bx	lr

080093fc <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80093fc:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80093fe:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8009400:	6259      	str	r1, [r3, #36]	@ 0x24
}
 8009402:	4770      	bx	lr

08009404 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009404:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8009406:	2000      	movs	r0, #0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009408:	681a      	ldr	r2, [r3, #0]
{
 800940a:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 800940c:	f883 03f4 	strb.w	r0, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009410:	6991      	ldr	r1, [r2, #24]
  hpcd->lpm_active = 1U;
 8009412:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009414:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
  hpcd->lpm_active = 1U;
 8009418:	f8c3 43fc 	str.w	r4, [r3, #1020]	@ 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800941c:	6191      	str	r1, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800941e:	6d53      	ldr	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8009420:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009428:	f043 0303 	orr.w	r3, r3, #3
 800942c:	6553      	str	r3, [r2, #84]	@ 0x54
}
 800942e:	4770      	bx	lr

08009430 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009430:	4b06      	ldr	r3, [pc, #24]	@ (800944c <HAL_PWREx_GetVoltageRange+0x1c>)
 8009432:	6818      	ldr	r0, [r3, #0]
 8009434:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8009438:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800943c:	d004      	beq.n	8009448 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800943e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009442:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8009446:	0240      	lsls	r0, r0, #9
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40007000 	.word	0x40007000

08009450 <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009450:	4a35      	ldr	r2, [pc, #212]	@ (8009528 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8009452:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009454:	b960      	cbnz	r0, 8009470 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009456:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800945a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800945e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009462:	d01b      	beq.n	800949c <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800946c:	2000      	movs	r0, #0
}
 800946e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009470:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8009474:	d006      	beq.n	8009484 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800947a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800947e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8009480:	2000      	movs	r0, #0
}
 8009482:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009484:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800948c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009490:	d029      	beq.n	80094e6 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009496:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800949a:	e7f1      	b.n	8009480 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800949c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80094a4:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80094a6:	4821      	ldr	r0, [pc, #132]	@ (800952c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80094a8:	4921      	ldr	r1, [pc, #132]	@ (8009530 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80094aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80094ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80094b2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80094b4:	6803      	ldr	r3, [r0, #0]
 80094b6:	2032      	movs	r0, #50	@ 0x32
 80094b8:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094bc:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80094be:	fba1 1303 	umull	r1, r3, r1, r3
 80094c2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094c4:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80094c6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094ca:	d506      	bpl.n	80094da <HAL_PWREx_ControlVoltageScaling+0x8a>
 80094cc:	e000      	b.n	80094d0 <HAL_PWREx_ControlVoltageScaling+0x80>
 80094ce:	b123      	cbz	r3, 80094da <HAL_PWREx_ControlVoltageScaling+0x8a>
 80094d0:	6951      	ldr	r1, [r2, #20]
 80094d2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80094d4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094d8:	d4f9      	bmi.n	80094ce <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80094da:	4b13      	ldr	r3, [pc, #76]	@ (8009528 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	055b      	lsls	r3, r3, #21
 80094e0:	d5ce      	bpl.n	8009480 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 80094e2:	2003      	movs	r0, #3
 80094e4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80094e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80094ee:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80094f0:	480e      	ldr	r0, [pc, #56]	@ (800952c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80094f2:	490f      	ldr	r1, [pc, #60]	@ (8009530 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80094f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80094f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80094fc:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80094fe:	6803      	ldr	r3, [r0, #0]
 8009500:	2032      	movs	r0, #50	@ 0x32
 8009502:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009506:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009508:	fba1 1303 	umull	r1, r3, r1, r3
 800950c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800950e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009510:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009514:	d5e1      	bpl.n	80094da <HAL_PWREx_ControlVoltageScaling+0x8a>
 8009516:	e001      	b.n	800951c <HAL_PWREx_ControlVoltageScaling+0xcc>
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0de      	beq.n	80094da <HAL_PWREx_ControlVoltageScaling+0x8a>
 800951c:	6951      	ldr	r1, [r2, #20]
 800951e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8009520:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009524:	d5d9      	bpl.n	80094da <HAL_PWREx_ControlVoltageScaling+0x8a>
 8009526:	e7f7      	b.n	8009518 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8009528:	40007000 	.word	0x40007000
 800952c:	200001e0 	.word	0x200001e0
 8009530:	431bde83 	.word	0x431bde83

08009534 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009534:	4a02      	ldr	r2, [pc, #8]	@ (8009540 <HAL_PWREx_EnableVddUSB+0xc>)
 8009536:	6853      	ldr	r3, [r2, #4]
 8009538:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800953c:	6053      	str	r3, [r2, #4]
}
 800953e:	4770      	bx	lr
 8009540:	40007000 	.word	0x40007000

08009544 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009544:	4a02      	ldr	r2, [pc, #8]	@ (8009550 <HAL_PWREx_EnableVddIO2+0xc>)
 8009546:	6853      	ldr	r3, [r2, #4]
 8009548:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800954c:	6053      	str	r3, [r2, #4]
}
 800954e:	4770      	bx	lr
 8009550:	40007000 	.word	0x40007000

08009554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009554:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009556:	4d1e      	ldr	r5, [pc, #120]	@ (80095d0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009558:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800955a:	00db      	lsls	r3, r3, #3
{
 800955c:	b083      	sub	sp, #12
 800955e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009560:	d51b      	bpl.n	800959a <RCC_SetFlashLatencyFromMSIRange+0x46>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009562:	f7ff ff65 	bl	8009430 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009566:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800956a:	d028      	beq.n	80095be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800956c:	2c7f      	cmp	r4, #127	@ 0x7f
 800956e:	d812      	bhi.n	8009596 <RCC_SetFlashLatencyFromMSIRange+0x42>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009570:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8009574:	fab4 f484 	clz	r4, r4
 8009578:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800957a:	4916      	ldr	r1, [pc, #88]	@ (80095d4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800957c:	680b      	ldr	r3, [r1, #0]
 800957e:	f023 030f 	bic.w	r3, r3, #15
 8009582:	4323      	orrs	r3, r4
 8009584:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009586:	6808      	ldr	r0, [r1, #0]
 8009588:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800958c:	1b00      	subs	r0, r0, r4
 800958e:	bf18      	it	ne
 8009590:	2001      	movne	r0, #1
 8009592:	b003      	add	sp, #12
 8009594:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8009596:	2402      	movs	r4, #2
 8009598:	e7ef      	b.n	800957a <RCC_SetFlashLatencyFromMSIRange+0x26>
    __HAL_RCC_PWR_CLK_ENABLE();
 800959a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800959c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095a0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80095a2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80095a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80095ac:	f7ff ff40 	bl	8009430 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80095b0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095b2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80095b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095ba:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095bc:	d1d6      	bne.n	800956c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80095be:	2c80      	cmp	r4, #128	@ 0x80
 80095c0:	d904      	bls.n	80095cc <RCC_SetFlashLatencyFromMSIRange+0x78>
        latency = FLASH_LATENCY_2; /* 2WS */
 80095c2:	2ca1      	cmp	r4, #161	@ 0xa1
 80095c4:	bf34      	ite	cc
 80095c6:	2401      	movcc	r4, #1
 80095c8:	2402      	movcs	r4, #2
 80095ca:	e7d6      	b.n	800957a <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80095cc:	2400      	movs	r4, #0
 80095ce:	e7d4      	b.n	800957a <RCC_SetFlashLatencyFromMSIRange+0x26>
 80095d0:	40021000 	.word	0x40021000
 80095d4:	40022000 	.word	0x40022000

080095d8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095d8:	4a25      	ldr	r2, [pc, #148]	@ (8009670 <HAL_RCC_GetSysClockFreq+0x98>)
 80095da:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095dc:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80095de:	f013 030c 	ands.w	r3, r3, #12
 80095e2:	d00b      	beq.n	80095fc <HAL_RCC_GetSysClockFreq+0x24>
 80095e4:	2b0c      	cmp	r3, #12
 80095e6:	d03a      	beq.n	800965e <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80095e8:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 80095ec:	fa42 f303 	asr.w	r3, r2, r3
    sysclockfreq = HSE_VALUE;
 80095f0:	f013 0f01 	tst.w	r3, #1
 80095f4:	481f      	ldr	r0, [pc, #124]	@ (8009674 <HAL_RCC_GetSysClockFreq+0x9c>)
 80095f6:	bf18      	it	ne
 80095f8:	2000      	movne	r0, #0
 80095fa:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80095fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009670 <HAL_RCC_GetSysClockFreq+0x98>)
 80095fe:	6811      	ldr	r1, [r2, #0]
 8009600:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009602:	bf54      	ite	pl
 8009604:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009608:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800960a:	491b      	ldr	r1, [pc, #108]	@ (8009678 <HAL_RCC_GetSysClockFreq+0xa0>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800960c:	bf54      	ite	pl
 800960e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009612:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8009616:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800961a:	b333      	cbz	r3, 800966a <HAL_RCC_GetSysClockFreq+0x92>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800961c:	2b0c      	cmp	r3, #12
 800961e:	d125      	bne.n	800966c <HAL_RCC_GetSysClockFreq+0x94>
{
 8009620:	b410      	push	{r4}
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009622:	4c13      	ldr	r4, [pc, #76]	@ (8009670 <HAL_RCC_GetSysClockFreq+0x98>)
      pllvco = HSI_VALUE;
 8009624:	4a13      	ldr	r2, [pc, #76]	@ (8009674 <HAL_RCC_GetSysClockFreq+0x9c>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009626:	68e3      	ldr	r3, [r4, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009628:	68e1      	ldr	r1, [r4, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800962a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800962e:	3b02      	subs	r3, #2
      pllvco = HSI_VALUE;
 8009630:	2b01      	cmp	r3, #1
 8009632:	bf98      	it	ls
 8009634:	4610      	movls	r0, r2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009636:	68e2      	ldr	r2, [r4, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009638:	68e3      	ldr	r3, [r4, #12]
}
 800963a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800963e:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009642:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009646:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800964a:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800964c:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009650:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009652:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009654:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8009658:	fbb2 f0f3 	udiv	r0, r2, r3
}
 800965c:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800965e:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009662:	2a01      	cmp	r2, #1
 8009664:	d0ca      	beq.n	80095fc <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009666:	2000      	movs	r0, #0
 8009668:	e7da      	b.n	8009620 <HAL_RCC_GetSysClockFreq+0x48>
}
 800966a:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800966c:	2000      	movs	r0, #0
  return sysclockfreq;
 800966e:	4770      	bx	lr
 8009670:	40021000 	.word	0x40021000
 8009674:	00f42400 	.word	0x00f42400
 8009678:	08015430 	.word	0x08015430

0800967c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800967c:	2800      	cmp	r0, #0
 800967e:	f000 830c 	beq.w	8009c9a <HAL_RCC_OscConfig+0x61e>
{
 8009682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009686:	4a99      	ldr	r2, [pc, #612]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009688:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800968a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800968c:	68d6      	ldr	r6, [r2, #12]
 800968e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009690:	06d8      	lsls	r0, r3, #27
{
 8009692:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009694:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009698:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800969c:	d52e      	bpl.n	80096fc <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800969e:	2d00      	cmp	r5, #0
 80096a0:	f000 812b 	beq.w	80098fa <HAL_RCC_OscConfig+0x27e>
 80096a4:	2d0c      	cmp	r5, #12
 80096a6:	f000 8125 	beq.w	80098f4 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80096aa:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80096ac:	4f8f      	ldr	r7, [pc, #572]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 819a 	beq.w	80099e8 <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	f043 0301 	orr.w	r3, r3, #1
 80096ba:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80096bc:	f7fd fe10 	bl	80072e0 <HAL_GetTick>
 80096c0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80096c2:	e006      	b.n	80096d2 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80096c4:	f7fd fe0c 	bl	80072e0 <HAL_GetTick>
 80096c8:	eba0 0008 	sub.w	r0, r0, r8
 80096cc:	2802      	cmp	r0, #2
 80096ce:	f200 819b 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	079b      	lsls	r3, r3, #30
 80096d6:	d5f5      	bpl.n	80096c4 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	f043 0308 	orr.w	r3, r3, #8
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	6a22      	ldr	r2, [r4, #32]
 80096e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096e8:	4313      	orrs	r3, r2
 80096ea:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	69e2      	ldr	r2, [r4, #28]
 80096f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80096f8:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	07d9      	lsls	r1, r3, #31
 80096fe:	f100 80cc 	bmi.w	800989a <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009702:	0799      	lsls	r1, r3, #30
 8009704:	d523      	bpl.n	800974e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009706:	2d04      	cmp	r5, #4
 8009708:	f000 815e 	beq.w	80099c8 <HAL_RCC_OscConfig+0x34c>
 800970c:	2d0c      	cmp	r5, #12
 800970e:	f000 8158 	beq.w	80099c2 <HAL_RCC_OscConfig+0x346>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009712:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8009714:	4e75      	ldr	r6, [pc, #468]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 8191 	beq.w	8009a3e <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_ENABLE();
 800971c:	6833      	ldr	r3, [r6, #0]
 800971e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009722:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009724:	f7fd fddc 	bl	80072e0 <HAL_GetTick>
 8009728:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800972a:	e005      	b.n	8009738 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800972c:	f7fd fdd8 	bl	80072e0 <HAL_GetTick>
 8009730:	1bc0      	subs	r0, r0, r7
 8009732:	2802      	cmp	r0, #2
 8009734:	f200 8168 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009738:	6833      	ldr	r3, [r6, #0]
 800973a:	055b      	lsls	r3, r3, #21
 800973c:	d5f6      	bpl.n	800972c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800973e:	6873      	ldr	r3, [r6, #4]
 8009740:	6922      	ldr	r2, [r4, #16]
 8009742:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009746:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800974a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	0719      	lsls	r1, r3, #28
 8009750:	d519      	bpl.n	8009786 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009752:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8009754:	4e65      	ldr	r6, [pc, #404]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 811f 	beq.w	800999a <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_LSI_ENABLE();
 800975c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8009760:	f043 0301 	orr.w	r3, r3, #1
 8009764:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8009768:	f7fd fdba 	bl	80072e0 <HAL_GetTick>
 800976c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800976e:	e005      	b.n	800977c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009770:	f7fd fdb6 	bl	80072e0 <HAL_GetTick>
 8009774:	1bc0      	subs	r0, r0, r7
 8009776:	2802      	cmp	r0, #2
 8009778:	f200 8146 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800977c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8009780:	079a      	lsls	r2, r3, #30
 8009782:	d5f5      	bpl.n	8009770 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	075f      	lsls	r7, r3, #29
 8009788:	d53f      	bpl.n	800980a <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800978a:	4b58      	ldr	r3, [pc, #352]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
 800978c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800978e:	00d6      	lsls	r6, r2, #3
 8009790:	f100 8153 	bmi.w	8009a3a <HAL_RCC_OscConfig+0x3be>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009794:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009796:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800979a:	659a      	str	r2, [r3, #88]	@ 0x58
 800979c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800979e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80097a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097a8:	4f51      	ldr	r7, [pc, #324]	@ (80098f0 <HAL_RCC_OscConfig+0x274>)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	05d8      	lsls	r0, r3, #23
 80097ae:	f140 81a0 	bpl.w	8009af2 <HAL_RCC_OscConfig+0x476>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	f000 8154 	beq.w	8009a62 <HAL_RCC_OscConfig+0x3e6>
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	f000 81c4 	beq.w	8009b48 <HAL_RCC_OscConfig+0x4cc>
 80097c0:	4f4a      	ldr	r7, [pc, #296]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
 80097c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80097c6:	f022 0201 	bic.w	r2, r2, #1
 80097ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80097ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80097d2:	f022 0204 	bic.w	r2, r2, #4
 80097d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f040 8148 	bne.w	8009a70 <HAL_RCC_OscConfig+0x3f4>
      tickstart = HAL_GetTick();
 80097e0:	f7fd fd7e 	bl	80072e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097e4:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80097e8:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097ea:	e006      	b.n	80097fa <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ec:	f7fd fd78 	bl	80072e0 <HAL_GetTick>
 80097f0:	eba0 0008 	sub.w	r0, r0, r8
 80097f4:	4548      	cmp	r0, r9
 80097f6:	f200 8107 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80097fe:	079b      	lsls	r3, r3, #30
 8009800:	d4f4      	bmi.n	80097ec <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8009802:	2e00      	cmp	r6, #0
 8009804:	f040 8187 	bne.w	8009b16 <HAL_RCC_OscConfig+0x49a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	069e      	lsls	r6, r3, #26
 800980c:	d518      	bpl.n	8009840 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800980e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8009810:	4e36      	ldr	r6, [pc, #216]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 8159 	beq.w	8009aca <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_ENABLE();
 8009818:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800981c:	f043 0301 	orr.w	r3, r3, #1
 8009820:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8009824:	f7fd fd5c 	bl	80072e0 <HAL_GetTick>
 8009828:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800982a:	e005      	b.n	8009838 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800982c:	f7fd fd58 	bl	80072e0 <HAL_GetTick>
 8009830:	1bc0      	subs	r0, r0, r7
 8009832:	2802      	cmp	r0, #2
 8009834:	f200 80e8 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009838:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800983c:	0798      	lsls	r0, r3, #30
 800983e:	d5f5      	bpl.n	800982c <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009840:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009842:	b333      	cbz	r3, 8009892 <HAL_RCC_OscConfig+0x216>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009844:	2b02      	cmp	r3, #2
 8009846:	f000 818d 	beq.w	8009b64 <HAL_RCC_OscConfig+0x4e8>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800984a:	2d0c      	cmp	r5, #12
 800984c:	f000 8097 	beq.w	800997e <HAL_RCC_OscConfig+0x302>
        __HAL_RCC_PLL_DISABLE();
 8009850:	4b26      	ldr	r3, [pc, #152]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8009858:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	f012 5f20 	tst.w	r2, #671088640	@ 0x28000000
 8009860:	d103      	bne.n	800986a <HAL_RCC_OscConfig+0x1ee>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	f022 0203 	bic.w	r2, r2, #3
 8009868:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800986a:	4c20      	ldr	r4, [pc, #128]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
 800986c:	68e3      	ldr	r3, [r4, #12]
 800986e:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8009872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009876:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8009878:	f7fd fd32 	bl	80072e0 <HAL_GetTick>
 800987c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800987e:	e005      	b.n	800988c <HAL_RCC_OscConfig+0x210>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009880:	f7fd fd2e 	bl	80072e0 <HAL_GetTick>
 8009884:	1b40      	subs	r0, r0, r5
 8009886:	2802      	cmp	r0, #2
 8009888:	f200 80be 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	019b      	lsls	r3, r3, #6
 8009890:	d4f6      	bmi.n	8009880 <HAL_RCC_OscConfig+0x204>
  return HAL_OK;
 8009892:	2000      	movs	r0, #0
}
 8009894:	b003      	add	sp, #12
 8009896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800989a:	2d08      	cmp	r5, #8
 800989c:	d073      	beq.n	8009986 <HAL_RCC_OscConfig+0x30a>
 800989e:	2d0c      	cmp	r5, #12
 80098a0:	d06f      	beq.n	8009982 <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098a8:	f000 80b2 	beq.w	8009a10 <HAL_RCC_OscConfig+0x394>
 80098ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098b0:	f000 813d 	beq.w	8009b2e <HAL_RCC_OscConfig+0x4b2>
 80098b4:	4f0d      	ldr	r7, [pc, #52]	@ (80098ec <HAL_RCC_OscConfig+0x270>)
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80098bc:	603a      	str	r2, [r7, #0]
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80098c4:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f040 80a7 	bne.w	8009a1a <HAL_RCC_OscConfig+0x39e>
        tickstart = HAL_GetTick();
 80098cc:	f7fd fd08 	bl	80072e0 <HAL_GetTick>
 80098d0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098d2:	e006      	b.n	80098e2 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098d4:	f7fd fd04 	bl	80072e0 <HAL_GetTick>
 80098d8:	eba0 0008 	sub.w	r0, r0, r8
 80098dc:	2864      	cmp	r0, #100	@ 0x64
 80098de:	f200 8093 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	0398      	lsls	r0, r3, #14
 80098e6:	d4f5      	bmi.n	80098d4 <HAL_RCC_OscConfig+0x258>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	e70a      	b.n	8009702 <HAL_RCC_OscConfig+0x86>
 80098ec:	40021000 	.word	0x40021000
 80098f0:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80098f4:	2e01      	cmp	r6, #1
 80098f6:	f47f aed8 	bne.w	80096aa <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80098fa:	4ba8      	ldr	r3, [pc, #672]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	0799      	lsls	r1, r3, #30
 8009900:	d43a      	bmi.n	8009978 <HAL_RCC_OscConfig+0x2fc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009902:	4ba6      	ldr	r3, [pc, #664]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009904:	6a20      	ldr	r0, [r4, #32]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	0712      	lsls	r2, r2, #28
 800990a:	bf56      	itet	pl
 800990c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8009910:	681b      	ldrmi	r3, [r3, #0]
 8009912:	091b      	lsrpl	r3, r3, #4
 8009914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009918:	4298      	cmp	r0, r3
 800991a:	f200 80be 	bhi.w	8009a9a <HAL_RCC_OscConfig+0x41e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800991e:	4b9f      	ldr	r3, [pc, #636]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	f042 0208 	orr.w	r2, r2, #8
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800992e:	4302      	orrs	r2, r0
 8009930:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	69e1      	ldr	r1, [r4, #28]
 8009936:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800993a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800993e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009940:	2d00      	cmp	r5, #0
 8009942:	f000 80ee 	beq.w	8009b22 <HAL_RCC_OscConfig+0x4a6>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009946:	f7ff fe47 	bl	80095d8 <HAL_RCC_GetSysClockFreq>
 800994a:	4b94      	ldr	r3, [pc, #592]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 800994c:	4a94      	ldr	r2, [pc, #592]	@ (8009ba0 <HAL_RCC_OscConfig+0x524>)
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009954:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8009956:	4a93      	ldr	r2, [pc, #588]	@ (8009ba4 <HAL_RCC_OscConfig+0x528>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009958:	f003 031f 	and.w	r3, r3, #31
 800995c:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8009960:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009962:	4a91      	ldr	r2, [pc, #580]	@ (8009ba8 <HAL_RCC_OscConfig+0x52c>)
 8009964:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8009966:	f7fd fc7b 	bl	8007260 <HAL_InitTick>
        if(status != HAL_OK)
 800996a:	2800      	cmp	r0, #0
 800996c:	d192      	bne.n	8009894 <HAL_RCC_OscConfig+0x218>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	07d9      	lsls	r1, r3, #31
 8009972:	f57f aec6 	bpl.w	8009702 <HAL_RCC_OscConfig+0x86>
 8009976:	e790      	b.n	800989a <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009978:	69a3      	ldr	r3, [r4, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1c1      	bne.n	8009902 <HAL_RCC_OscConfig+0x286>
    return HAL_ERROR;
 800997e:	2001      	movs	r0, #1
 8009980:	e788      	b.n	8009894 <HAL_RCC_OscConfig+0x218>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009982:	2e03      	cmp	r6, #3
 8009984:	d18d      	bne.n	80098a2 <HAL_RCC_OscConfig+0x226>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009986:	4a85      	ldr	r2, [pc, #532]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009988:	6812      	ldr	r2, [r2, #0]
 800998a:	0392      	lsls	r2, r2, #14
 800998c:	f57f aeb9 	bpl.w	8009702 <HAL_RCC_OscConfig+0x86>
 8009990:	6862      	ldr	r2, [r4, #4]
 8009992:	2a00      	cmp	r2, #0
 8009994:	f47f aeb5 	bne.w	8009702 <HAL_RCC_OscConfig+0x86>
 8009998:	e7f1      	b.n	800997e <HAL_RCC_OscConfig+0x302>
      __HAL_RCC_LSI_DISABLE();
 800999a:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800999e:	f023 0301 	bic.w	r3, r3, #1
 80099a2:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80099a6:	f7fd fc9b 	bl	80072e0 <HAL_GetTick>
 80099aa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80099ac:	e004      	b.n	80099b8 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099ae:	f7fd fc97 	bl	80072e0 <HAL_GetTick>
 80099b2:	1bc0      	subs	r0, r0, r7
 80099b4:	2802      	cmp	r0, #2
 80099b6:	d827      	bhi.n	8009a08 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80099b8:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80099bc:	079b      	lsls	r3, r3, #30
 80099be:	d4f6      	bmi.n	80099ae <HAL_RCC_OscConfig+0x332>
 80099c0:	e6e0      	b.n	8009784 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80099c2:	2e02      	cmp	r6, #2
 80099c4:	f47f aea5 	bne.w	8009712 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099c8:	4a74      	ldr	r2, [pc, #464]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	0552      	lsls	r2, r2, #21
 80099ce:	d502      	bpl.n	80099d6 <HAL_RCC_OscConfig+0x35a>
 80099d0:	68e2      	ldr	r2, [r4, #12]
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	d0d3      	beq.n	800997e <HAL_RCC_OscConfig+0x302>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099d6:	4971      	ldr	r1, [pc, #452]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 80099d8:	6920      	ldr	r0, [r4, #16]
 80099da:	684a      	ldr	r2, [r1, #4]
 80099dc:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 80099e0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80099e4:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099e6:	e6b2      	b.n	800974e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	f023 0301 	bic.w	r3, r3, #1
 80099ee:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80099f0:	f7fd fc76 	bl	80072e0 <HAL_GetTick>
 80099f4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	0798      	lsls	r0, r3, #30
 80099fa:	d5b8      	bpl.n	800996e <HAL_RCC_OscConfig+0x2f2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80099fc:	f7fd fc70 	bl	80072e0 <HAL_GetTick>
 8009a00:	eba0 0008 	sub.w	r0, r0, r8
 8009a04:	2802      	cmp	r0, #2
 8009a06:	d9f6      	bls.n	80099f6 <HAL_RCC_OscConfig+0x37a>
            return HAL_TIMEOUT;
 8009a08:	2003      	movs	r0, #3
}
 8009a0a:	b003      	add	sp, #12
 8009a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a10:	4a62      	ldr	r2, [pc, #392]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a18:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009a1a:	f7fd fc61 	bl	80072e0 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a1e:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009b9c <HAL_RCC_OscConfig+0x520>
        tickstart = HAL_GetTick();
 8009a22:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a24:	e004      	b.n	8009a30 <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a26:	f7fd fc5b 	bl	80072e0 <HAL_GetTick>
 8009a2a:	1bc0      	subs	r0, r0, r7
 8009a2c:	2864      	cmp	r0, #100	@ 0x64
 8009a2e:	d8eb      	bhi.n	8009a08 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a30:	f8d8 3000 	ldr.w	r3, [r8]
 8009a34:	039b      	lsls	r3, r3, #14
 8009a36:	d5f6      	bpl.n	8009a26 <HAL_RCC_OscConfig+0x3aa>
 8009a38:	e756      	b.n	80098e8 <HAL_RCC_OscConfig+0x26c>
    FlagStatus       pwrclkchanged = RESET;
 8009a3a:	2600      	movs	r6, #0
 8009a3c:	e6b4      	b.n	80097a8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8009a3e:	6833      	ldr	r3, [r6, #0]
 8009a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a44:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009a46:	f7fd fc4b 	bl	80072e0 <HAL_GetTick>
 8009a4a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a4c:	e004      	b.n	8009a58 <HAL_RCC_OscConfig+0x3dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a4e:	f7fd fc47 	bl	80072e0 <HAL_GetTick>
 8009a52:	1bc0      	subs	r0, r0, r7
 8009a54:	2802      	cmp	r0, #2
 8009a56:	d8d7      	bhi.n	8009a08 <HAL_RCC_OscConfig+0x38c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a58:	6833      	ldr	r3, [r6, #0]
 8009a5a:	0558      	lsls	r0, r3, #21
 8009a5c:	d4f7      	bmi.n	8009a4e <HAL_RCC_OscConfig+0x3d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	e675      	b.n	800974e <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a62:	4a4e      	ldr	r2, [pc, #312]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009a64:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8009a68:	f043 0301 	orr.w	r3, r3, #1
 8009a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8009a70:	f7fd fc36 	bl	80072e0 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a74:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8009b9c <HAL_RCC_OscConfig+0x520>
      tickstart = HAL_GetTick();
 8009a78:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a7a:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a7e:	e004      	b.n	8009a8a <HAL_RCC_OscConfig+0x40e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a80:	f7fd fc2e 	bl	80072e0 <HAL_GetTick>
 8009a84:	1bc0      	subs	r0, r0, r7
 8009a86:	4548      	cmp	r0, r9
 8009a88:	d8be      	bhi.n	8009a08 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a8a:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8009a8e:	079a      	lsls	r2, r3, #30
 8009a90:	d5f6      	bpl.n	8009a80 <HAL_RCC_OscConfig+0x404>
    if(pwrclkchanged == SET)
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	f43f aeb8 	beq.w	8009808 <HAL_RCC_OscConfig+0x18c>
 8009a98:	e03d      	b.n	8009b16 <HAL_RCC_OscConfig+0x49a>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a9a:	f7ff fd5b 	bl	8009554 <RCC_SetFlashLatencyFromMSIRange>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f47f af6d 	bne.w	800997e <HAL_RCC_OscConfig+0x302>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	f042 0208 	orr.w	r2, r2, #8
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	6a21      	ldr	r1, [r4, #32]
 8009ab2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	69e1      	ldr	r1, [r4, #28]
 8009abe:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8009ac2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009ac6:	605a      	str	r2, [r3, #4]
 8009ac8:	e73d      	b.n	8009946 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSI48_DISABLE();
 8009aca:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8009ad6:	f7fd fc03 	bl	80072e0 <HAL_GetTick>
 8009ada:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009adc:	e004      	b.n	8009ae8 <HAL_RCC_OscConfig+0x46c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ade:	f7fd fbff 	bl	80072e0 <HAL_GetTick>
 8009ae2:	1bc0      	subs	r0, r0, r7
 8009ae4:	2802      	cmp	r0, #2
 8009ae6:	d88f      	bhi.n	8009a08 <HAL_RCC_OscConfig+0x38c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ae8:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009aec:	0799      	lsls	r1, r3, #30
 8009aee:	d4f6      	bmi.n	8009ade <HAL_RCC_OscConfig+0x462>
 8009af0:	e6a6      	b.n	8009840 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009af8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8009afa:	f7fd fbf1 	bl	80072e0 <HAL_GetTick>
 8009afe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	05d9      	lsls	r1, r3, #23
 8009b04:	f53f ae55 	bmi.w	80097b2 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b08:	f7fd fbea 	bl	80072e0 <HAL_GetTick>
 8009b0c:	eba0 0008 	sub.w	r0, r0, r8
 8009b10:	2802      	cmp	r0, #2
 8009b12:	d9f5      	bls.n	8009b00 <HAL_RCC_OscConfig+0x484>
 8009b14:	e778      	b.n	8009a08 <HAL_RCC_OscConfig+0x38c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b16:	4a21      	ldr	r2, [pc, #132]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009b18:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b20:	e672      	b.n	8009808 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b22:	f7ff fd17 	bl	8009554 <RCC_SetFlashLatencyFromMSIRange>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	f43f af0d 	beq.w	8009946 <HAL_RCC_OscConfig+0x2ca>
 8009b2c:	e727      	b.n	800997e <HAL_RCC_OscConfig+0x302>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009b32:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009b44:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b46:	e768      	b.n	8009a1a <HAL_RCC_OscConfig+0x39e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b48:	4b14      	ldr	r3, [pc, #80]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009b4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009b4e:	f042 0204 	orr.w	r2, r2, #4
 8009b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8009b56:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009b5a:	f042 0201 	orr.w	r2, r2, #1
 8009b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b62:	e785      	b.n	8009a70 <HAL_RCC_OscConfig+0x3f4>
      pll_config = RCC->PLLCFGR;
 8009b64:	4e0d      	ldr	r6, [pc, #52]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b66:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8009b68:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b6a:	f003 0103 	and.w	r1, r3, #3
 8009b6e:	4291      	cmp	r1, r2
 8009b70:	d056      	beq.n	8009c20 <HAL_RCC_OscConfig+0x5a4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b72:	2d0c      	cmp	r5, #12
 8009b74:	f43f af03 	beq.w	800997e <HAL_RCC_OscConfig+0x302>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009b78:	4d08      	ldr	r5, [pc, #32]	@ (8009b9c <HAL_RCC_OscConfig+0x520>)
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	f53f aefe 	bmi.w	800997e <HAL_RCC_OscConfig+0x302>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	f53f aefa 	bmi.w	800997e <HAL_RCC_OscConfig+0x302>
            __HAL_RCC_PLL_DISABLE();
 8009b8a:	682b      	ldr	r3, [r5, #0]
 8009b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b90:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8009b92:	f7fd fba5 	bl	80072e0 <HAL_GetTick>
 8009b96:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b98:	e00e      	b.n	8009bb8 <HAL_RCC_OscConfig+0x53c>
 8009b9a:	bf00      	nop
 8009b9c:	40021000 	.word	0x40021000
 8009ba0:	08015460 	.word	0x08015460
 8009ba4:	200001e8 	.word	0x200001e8
 8009ba8:	200001e0 	.word	0x200001e0
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bac:	f7fd fb98 	bl	80072e0 <HAL_GetTick>
 8009bb0:	1b80      	subs	r0, r0, r6
 8009bb2:	2802      	cmp	r0, #2
 8009bb4:	f63f af28 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	019f      	lsls	r7, r3, #6
 8009bbc:	d4f6      	bmi.n	8009bac <HAL_RCC_OscConfig+0x530>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bbe:	68e9      	ldr	r1, [r5, #12]
 8009bc0:	4b37      	ldr	r3, [pc, #220]	@ (8009ca0 <HAL_RCC_OscConfig+0x624>)
 8009bc2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009bc4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bc6:	4e37      	ldr	r6, [pc, #220]	@ (8009ca4 <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bc8:	400b      	ands	r3, r1
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8009bd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009bd4:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8009bd8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8009bdc:	3801      	subs	r0, #1
 8009bde:	0849      	lsrs	r1, r1, #1
 8009be0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8009be4:	3901      	subs	r1, #1
 8009be6:	0852      	lsrs	r2, r2, #1
 8009be8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8009bec:	3a01      	subs	r2, #1
 8009bee:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009bf2:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bfa:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009bfc:	68eb      	ldr	r3, [r5, #12]
 8009bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c02:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8009c04:	f7fd fb6c 	bl	80072e0 <HAL_GetTick>
 8009c08:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c0a:	e005      	b.n	8009c18 <HAL_RCC_OscConfig+0x59c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c0c:	f7fd fb68 	bl	80072e0 <HAL_GetTick>
 8009c10:	1b00      	subs	r0, r0, r4
 8009c12:	2802      	cmp	r0, #2
 8009c14:	f63f aef8 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c18:	6833      	ldr	r3, [r6, #0]
 8009c1a:	0198      	lsls	r0, r3, #6
 8009c1c:	d5f6      	bpl.n	8009c0c <HAL_RCC_OscConfig+0x590>
 8009c1e:	e638      	b.n	8009892 <HAL_RCC_OscConfig+0x216>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009c22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009c26:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c28:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8009c2c:	d1a1      	bne.n	8009b72 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c34:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8009c38:	d19b      	bne.n	8009b72 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c3a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009c3c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c40:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8009c44:	d195      	bne.n	8009b72 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c46:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009c48:	0852      	lsrs	r2, r2, #1
 8009c4a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8009c4e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c50:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8009c54:	d18d      	bne.n	8009b72 <HAL_RCC_OscConfig+0x4f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009c56:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009c58:	0852      	lsrs	r2, r2, #1
 8009c5a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8009c5e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c60:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8009c64:	d185      	bne.n	8009b72 <HAL_RCC_OscConfig+0x4f6>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c66:	6833      	ldr	r3, [r6, #0]
 8009c68:	0199      	lsls	r1, r3, #6
 8009c6a:	f53f ae12 	bmi.w	8009892 <HAL_RCC_OscConfig+0x216>
          __HAL_RCC_PLL_ENABLE();
 8009c6e:	6833      	ldr	r3, [r6, #0]
 8009c70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c74:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009c76:	68f3      	ldr	r3, [r6, #12]
 8009c78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c7c:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8009c7e:	f7fd fb2f 	bl	80072e0 <HAL_GetTick>
 8009c82:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c84:	e005      	b.n	8009c92 <HAL_RCC_OscConfig+0x616>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c86:	f7fd fb2b 	bl	80072e0 <HAL_GetTick>
 8009c8a:	1b03      	subs	r3, r0, r4
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	f63f aebb 	bhi.w	8009a08 <HAL_RCC_OscConfig+0x38c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c92:	6833      	ldr	r3, [r6, #0]
 8009c94:	019a      	lsls	r2, r3, #6
 8009c96:	d5f6      	bpl.n	8009c86 <HAL_RCC_OscConfig+0x60a>
 8009c98:	e5fb      	b.n	8009892 <HAL_RCC_OscConfig+0x216>
    return HAL_ERROR;
 8009c9a:	2001      	movs	r0, #1
}
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	019d800c 	.word	0x019d800c
 8009ca4:	40021000 	.word	0x40021000

08009ca8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f000 809b 	beq.w	8009de4 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cae:	4a7c      	ldr	r2, [pc, #496]	@ (8009ea0 <HAL_RCC_ClockConfig+0x1f8>)
{
 8009cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cb4:	6813      	ldr	r3, [r2, #0]
 8009cb6:	f003 030f 	and.w	r3, r3, #15
 8009cba:	428b      	cmp	r3, r1
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	d20c      	bcs.n	8009cdc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cc2:	6813      	ldr	r3, [r2, #0]
 8009cc4:	f023 030f 	bic.w	r3, r3, #15
 8009cc8:	430b      	orrs	r3, r1
 8009cca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ccc:	6813      	ldr	r3, [r2, #0]
 8009cce:	f003 030f 	and.w	r3, r3, #15
 8009cd2:	428b      	cmp	r3, r1
 8009cd4:	d002      	beq.n	8009cdc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009cd6:	2001      	movs	r0, #1
}
 8009cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	07df      	lsls	r7, r3, #31
 8009ce0:	d573      	bpl.n	8009dca <HAL_RCC_ClockConfig+0x122>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ce2:	6867      	ldr	r7, [r4, #4]
 8009ce4:	2f03      	cmp	r7, #3
 8009ce6:	d07f      	beq.n	8009de8 <HAL_RCC_ClockConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ce8:	4b6e      	ldr	r3, [pc, #440]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cea:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cec:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cee:	d076      	beq.n	8009dde <HAL_RCC_ClockConfig+0x136>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009cf0:	2f00      	cmp	r7, #0
 8009cf2:	f040 8091 	bne.w	8009e18 <HAL_RCC_ClockConfig+0x170>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009cf6:	079e      	lsls	r6, r3, #30
 8009cf8:	d5ed      	bpl.n	8009cd6 <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009cfa:	f7ff fc6d 	bl	80095d8 <HAL_RCC_GetSysClockFreq>
 8009cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8009ea8 <HAL_RCC_ClockConfig+0x200>)
 8009d00:	4298      	cmp	r0, r3
 8009d02:	f240 8084 	bls.w	8009e0e <HAL_RCC_ClockConfig+0x166>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009d06:	4a67      	ldr	r2, [pc, #412]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009d08:	6893      	ldr	r3, [r2, #8]
 8009d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009d14:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d18:	4e62      	ldr	r6, [pc, #392]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009d1a:	68b3      	ldr	r3, [r6, #8]
 8009d1c:	f023 0303 	bic.w	r3, r3, #3
 8009d20:	433b      	orrs	r3, r7
 8009d22:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009d24:	f7fd fadc 	bl	80072e0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d28:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8009d2c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d2e:	e004      	b.n	8009d3a <HAL_RCC_ClockConfig+0x92>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d30:	f7fd fad6 	bl	80072e0 <HAL_GetTick>
 8009d34:	1bc0      	subs	r0, r0, r7
 8009d36:	4540      	cmp	r0, r8
 8009d38:	d86c      	bhi.n	8009e14 <HAL_RCC_ClockConfig+0x16c>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d3a:	68b3      	ldr	r3, [r6, #8]
 8009d3c:	6862      	ldr	r2, [r4, #4]
 8009d3e:	f003 030c 	and.w	r3, r3, #12
 8009d42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009d46:	d1f3      	bne.n	8009d30 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	0799      	lsls	r1, r3, #30
 8009d4c:	d43f      	bmi.n	8009dce <HAL_RCC_ClockConfig+0x126>
    if(hpre == RCC_SYSCLK_DIV2)
 8009d4e:	f1b9 0f00 	cmp.w	r9, #0
 8009d52:	d003      	beq.n	8009d5c <HAL_RCC_ClockConfig+0xb4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009d54:	68b2      	ldr	r2, [r6, #8]
 8009d56:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009d5a:	60b2      	str	r2, [r6, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d5c:	4950      	ldr	r1, [pc, #320]	@ (8009ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8009d5e:	680a      	ldr	r2, [r1, #0]
 8009d60:	f002 020f 	and.w	r2, r2, #15
 8009d64:	42aa      	cmp	r2, r5
 8009d66:	d909      	bls.n	8009d7c <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d68:	680a      	ldr	r2, [r1, #0]
 8009d6a:	f022 020f 	bic.w	r2, r2, #15
 8009d6e:	432a      	orrs	r2, r5
 8009d70:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d72:	680a      	ldr	r2, [r1, #0]
 8009d74:	f002 020f 	and.w	r2, r2, #15
 8009d78:	42aa      	cmp	r2, r5
 8009d7a:	d1ac      	bne.n	8009cd6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d7c:	075a      	lsls	r2, r3, #29
 8009d7e:	d506      	bpl.n	8009d8e <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d80:	4948      	ldr	r1, [pc, #288]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009d82:	68e0      	ldr	r0, [r4, #12]
 8009d84:	688a      	ldr	r2, [r1, #8]
 8009d86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009d8a:	4302      	orrs	r2, r0
 8009d8c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d8e:	071b      	lsls	r3, r3, #28
 8009d90:	d507      	bpl.n	8009da2 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d92:	4a44      	ldr	r2, [pc, #272]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009d94:	6921      	ldr	r1, [r4, #16]
 8009d96:	6893      	ldr	r3, [r2, #8]
 8009d98:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8009d9c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009da0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009da2:	f7ff fc19 	bl	80095d8 <HAL_RCC_GetSysClockFreq>
 8009da6:	4a3f      	ldr	r2, [pc, #252]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009da8:	4c40      	ldr	r4, [pc, #256]	@ (8009eac <HAL_RCC_ClockConfig+0x204>)
 8009daa:	6892      	ldr	r2, [r2, #8]
 8009dac:	4940      	ldr	r1, [pc, #256]	@ (8009eb0 <HAL_RCC_ClockConfig+0x208>)
 8009dae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8009db2:	4603      	mov	r3, r0
 8009db4:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8009db6:	483f      	ldr	r0, [pc, #252]	@ (8009eb4 <HAL_RCC_ClockConfig+0x20c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009db8:	f002 021f 	and.w	r2, r2, #31
 8009dbc:	40d3      	lsrs	r3, r2
 8009dbe:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8009dc0:	6800      	ldr	r0, [r0, #0]
}
 8009dc2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8009dc6:	f7fd ba4b 	b.w	8007260 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dca:	079e      	lsls	r6, r3, #30
 8009dcc:	d5c6      	bpl.n	8009d5c <HAL_RCC_ClockConfig+0xb4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dce:	4935      	ldr	r1, [pc, #212]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009dd0:	68a0      	ldr	r0, [r4, #8]
 8009dd2:	688a      	ldr	r2, [r1, #8]
 8009dd4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009dd8:	4302      	orrs	r2, r0
 8009dda:	608a      	str	r2, [r1, #8]
 8009ddc:	e7be      	b.n	8009d5c <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009dde:	039b      	lsls	r3, r3, #14
 8009de0:	d48b      	bmi.n	8009cfa <HAL_RCC_ClockConfig+0x52>
 8009de2:	e778      	b.n	8009cd6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8009de4:	2001      	movs	r0, #1
}
 8009de6:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009de8:	4a2e      	ldr	r2, [pc, #184]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009dea:	6811      	ldr	r1, [r2, #0]
 8009dec:	0188      	lsls	r0, r1, #6
 8009dee:	f57f af72 	bpl.w	8009cd6 <HAL_RCC_ClockConfig+0x2e>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8009df2:	68d1      	ldr	r1, [r2, #12]
 8009df4:	f001 0103 	and.w	r1, r1, #3
 8009df8:	2901      	cmp	r1, #1
 8009dfa:	d011      	beq.n	8009e20 <HAL_RCC_ClockConfig+0x178>
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009dfc:	68d1      	ldr	r1, [r2, #12]
 8009dfe:	f001 0103 	and.w	r1, r1, #3

  switch (pllsource)
 8009e02:	3902      	subs	r1, #2
 8009e04:	2901      	cmp	r1, #1
 8009e06:	d947      	bls.n	8009e98 <HAL_RCC_ClockConfig+0x1f0>
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e08:	68d3      	ldr	r3, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009e0a:	68d3      	ldr	r3, [r2, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e0c:	68d3      	ldr	r3, [r2, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009e0e:	f04f 0900 	mov.w	r9, #0
 8009e12:	e781      	b.n	8009d18 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8009e14:	2003      	movs	r0, #3
 8009e16:	e75f      	b.n	8009cd8 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e18:	0558      	lsls	r0, r3, #21
 8009e1a:	f57f af5c 	bpl.w	8009cd6 <HAL_RCC_ClockConfig+0x2e>
 8009e1e:	e76c      	b.n	8009cfa <HAL_RCC_ClockConfig+0x52>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009e20:	6811      	ldr	r1, [r2, #0]
 8009e22:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009e24:	bf54      	ite	pl
 8009e26:	f8d2 1094 	ldrpl.w	r1, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e2a:	6811      	ldrmi	r1, [r2, #0]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8009e2e:	68d2      	ldr	r2, [r2, #12]
 8009e30:	f002 0203 	and.w	r2, r2, #3
  switch (pllsource)
 8009e34:	f1a2 0202 	sub.w	r2, r2, #2
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009e38:	bf54      	ite	pl
 8009e3a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e3e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
  switch (pllsource)
 8009e42:	2a01      	cmp	r2, #1
 8009e44:	d928      	bls.n	8009e98 <HAL_RCC_ClockConfig+0x1f0>
    msirange = MSIRangeTable[msirange];
 8009e46:	4a1c      	ldr	r2, [pc, #112]	@ (8009eb8 <HAL_RCC_ClockConfig+0x210>)
 8009e48:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e4c:	4815      	ldr	r0, [pc, #84]	@ (8009ea4 <HAL_RCC_ClockConfig+0x1fc>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009e4e:	4e16      	ldr	r6, [pc, #88]	@ (8009ea8 <HAL_RCC_ClockConfig+0x200>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e50:	68c1      	ldr	r1, [r0, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009e52:	68c2      	ldr	r2, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e54:	f3c1 1103 	ubfx	r1, r1, #4, #4
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009e58:	f3c2 2206 	ubfx	r2, r2, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e5c:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009e5e:	fb0c f202 	mul.w	r2, ip, r2
 8009e62:	fbb2 f2f1 	udiv	r2, r2, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e66:	68c1      	ldr	r1, [r0, #12]
 8009e68:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8009e6c:	3101      	adds	r1, #1
 8009e6e:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco / pllr;
 8009e70:	fbb2 f2f1 	udiv	r2, r2, r1
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009e74:	42b2      	cmp	r2, r6
 8009e76:	d9ca      	bls.n	8009e0e <HAL_RCC_ClockConfig+0x166>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009e78:	6882      	ldr	r2, [r0, #8]
 8009e7a:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8009e7e:	d004      	beq.n	8009e8a <HAL_RCC_ClockConfig+0x1e2>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8009e80:	079a      	lsls	r2, r3, #30
 8009e82:	d5c4      	bpl.n	8009e0e <HAL_RCC_ClockConfig+0x166>
 8009e84:	68a3      	ldr	r3, [r4, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1c1      	bne.n	8009e0e <HAL_RCC_ClockConfig+0x166>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009e8a:	6883      	ldr	r3, [r0, #8]
 8009e8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e94:	6083      	str	r3, [r0, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009e96:	e73d      	b.n	8009d14 <HAL_RCC_ClockConfig+0x6c>
    pllvco = HSI_VALUE;
 8009e98:	f8df c020 	ldr.w	ip, [pc, #32]	@ 8009ebc <HAL_RCC_ClockConfig+0x214>
 8009e9c:	e7d6      	b.n	8009e4c <HAL_RCC_ClockConfig+0x1a4>
 8009e9e:	bf00      	nop
 8009ea0:	40022000 	.word	0x40022000
 8009ea4:	40021000 	.word	0x40021000
 8009ea8:	04c4b400 	.word	0x04c4b400
 8009eac:	08015460 	.word	0x08015460
 8009eb0:	200001e0 	.word	0x200001e0
 8009eb4:	200001e8 	.word	0x200001e8
 8009eb8:	08015430 	.word	0x08015430
 8009ebc:	00f42400 	.word	0x00f42400

08009ec0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8009ec0:	4b01      	ldr	r3, [pc, #4]	@ (8009ec8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	200001e0 	.word	0x200001e0

08009ecc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009ecc:	4b05      	ldr	r3, [pc, #20]	@ (8009ee4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009ece:	4a06      	ldr	r2, [pc, #24]	@ (8009ee8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8009ed2:	4906      	ldr	r1, [pc, #24]	@ (8009eec <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009ed4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009ed8:	6808      	ldr	r0, [r1, #0]
 8009eda:	5cd3      	ldrb	r3, [r2, r3]
 8009edc:	f003 031f 	and.w	r3, r3, #31
}
 8009ee0:	40d8      	lsrs	r0, r3
 8009ee2:	4770      	bx	lr
 8009ee4:	40021000 	.word	0x40021000
 8009ee8:	08015470 	.word	0x08015470
 8009eec:	200001e0 	.word	0x200001e0

08009ef0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009ef0:	4b05      	ldr	r3, [pc, #20]	@ (8009f08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009ef2:	4a06      	ldr	r2, [pc, #24]	@ (8009f0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8009ef6:	4906      	ldr	r1, [pc, #24]	@ (8009f10 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009ef8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009efc:	6808      	ldr	r0, [r1, #0]
 8009efe:	5cd3      	ldrb	r3, [r2, r3]
 8009f00:	f003 031f 	and.w	r3, r3, #31
}
 8009f04:	40d8      	lsrs	r0, r3
 8009f06:	4770      	bx	lr
 8009f08:	40021000 	.word	0x40021000
 8009f0c:	08015470 	.word	0x08015470
 8009f10:	200001e0 	.word	0x200001e0

08009f14 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f14:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
{
 8009f18:	b410      	push	{r4}
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f1a:	d053      	beq.n	8009fc4 <RCCEx_GetSAIxPeriphCLKFreq+0xb0>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009f1c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8009f20:	d022      	beq.n	8009f68 <RCCEx_GetSAIxPeriphCLKFreq+0x54>
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009f22:	4b4c      	ldr	r3, [pc, #304]	@ (800a054 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009f2a:	d01a      	beq.n	8009f62 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 8009f2c:	6918      	ldr	r0, [r3, #16]
 8009f2e:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8009f32:	d016      	beq.n	8009f62 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009f34:	6918      	ldr	r0, [r3, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009f36:	691c      	ldr	r4, [r3, #16]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8009f38:	691a      	ldr	r2, [r3, #16]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009f3a:	f3c0 1003 	ubfx	r0, r0, #4, #4
#endif
        if(pllp == 0U)
 8009f3e:	0ed2      	lsrs	r2, r2, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009f40:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009f44:	f3c4 2406 	ubfx	r4, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009f48:	fbb1 f1f0 	udiv	r1, r1, r0
        if(pllp == 0U)
 8009f4c:	d105      	bne.n	8009f5a <RCCEx_GetSAIxPeriphCLKFreq+0x46>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009f4e:	691b      	ldr	r3, [r3, #16]
          {
            pllp = 17U;
 8009f50:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009f54:	bf0c      	ite	eq
 8009f56:	2207      	moveq	r2, #7
 8009f58:	2211      	movne	r2, #17
          else
          {
            pllp = 7U;
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009f5a:	fb04 f001 	mul.w	r0, r4, r1
 8009f5e:	fbb0 f0f2 	udiv	r0, r0, r2
    }
  }


  return frequency;
}
 8009f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f66:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009f68:	4b3a      	ldr	r3, [pc, #232]	@ (800a054 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f6e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f76:	d036      	beq.n	8009fe6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f7c:	d137      	bne.n	8009fee <RCCEx_GetSAIxPeriphCLKFreq+0xda>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009f7e:	4b35      	ldr	r3, [pc, #212]	@ (800a054 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8009f86:	d0ec      	beq.n	8009f62 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 8009f88:	68d8      	ldr	r0, [r3, #12]
 8009f8a:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8009f8e:	d0e8      	beq.n	8009f62 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009f90:	68d8      	ldr	r0, [r3, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009f92:	68dc      	ldr	r4, [r3, #12]
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009f94:	68da      	ldr	r2, [r3, #12]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009f96:	f3c0 1003 	ubfx	r0, r0, #4, #4
        if(pllp == 0U)
 8009f9a:	0ed2      	lsrs	r2, r2, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009f9c:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009fa0:	f3c4 2c06 	ubfx	ip, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009fa4:	fbb1 f1f0 	udiv	r1, r1, r0
        if(pllp == 0U)
 8009fa8:	d105      	bne.n	8009fb6 <RCCEx_GetSAIxPeriphCLKFreq+0xa2>
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009faa:	68db      	ldr	r3, [r3, #12]
            pllp = 17U;
 8009fac:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009fb0:	bf0c      	ite	eq
 8009fb2:	2207      	moveq	r2, #7
 8009fb4:	2211      	movne	r2, #17
        frequency = (pllvco * plln) / pllp;
 8009fb6:	fb0c f001 	mul.w	r0, ip, r1
}
 8009fba:	f85d 4b04 	ldr.w	r4, [sp], #4
        frequency = (pllvco * plln) / pllp;
 8009fbe:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8009fc2:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009fc4:	4b23      	ldr	r3, [pc, #140]	@ (800a054 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 8009fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fca:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009fce:	2b60      	cmp	r3, #96	@ 0x60
 8009fd0:	d009      	beq.n	8009fe6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009fd2:	2b40      	cmp	r3, #64	@ 0x40
 8009fd4:	d0d3      	beq.n	8009f7e <RCCEx_GetSAIxPeriphCLKFreq+0x6a>
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0a3      	beq.n	8009f22 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8009fda:	2b80      	cmp	r3, #128	@ 0x80
 8009fdc:	d030      	beq.n	800a040 <RCCEx_GetSAIxPeriphCLKFreq+0x12c>
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	d00d      	beq.n	8009ffe <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	e7bd      	b.n	8009f62 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009fe6:	481c      	ldr	r0, [pc, #112]	@ (800a058 <RCCEx_GetSAIxPeriphCLKFreq+0x144>)
}
 8009fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fec:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d097      	beq.n	8009f22 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8009ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ff6:	d023      	beq.n	800a040 <RCCEx_GetSAIxPeriphCLKFreq+0x12c>
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ffc:	d1f1      	bne.n	8009fe2 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8009ffe:	4a15      	ldr	r2, [pc, #84]	@ (800a054 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 800a000:	6810      	ldr	r0, [r2, #0]
 800a002:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a006:	d0ac      	beq.n	8009f62 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
 800a008:	6950      	ldr	r0, [r2, #20]
 800a00a:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 800a00e:	d0a8      	beq.n	8009f62 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a010:	6953      	ldr	r3, [r2, #20]
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a012:	6954      	ldr	r4, [r2, #20]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800a014:	6950      	ldr	r0, [r2, #20]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a016:	f3c3 1303 	ubfx	r3, r3, #4, #4
        if(pllp == 0U)
 800a01a:	0ec0      	lsrs	r0, r0, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a01c:	f103 0301 	add.w	r3, r3, #1
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a020:	f3c4 2406 	ubfx	r4, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a024:	fbb1 f1f3 	udiv	r1, r1, r3
        if(pllp == 0U)
 800a028:	d105      	bne.n	800a036 <RCCEx_GetSAIxPeriphCLKFreq+0x122>
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800a02a:	6953      	ldr	r3, [r2, #20]
            pllp = 17U;
 800a02c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a030:	bf0c      	ite	eq
 800a032:	2007      	moveq	r0, #7
 800a034:	2011      	movne	r0, #17
        frequency = (pllvco * plln) / pllp;
 800a036:	fb04 f101 	mul.w	r1, r4, r1
 800a03a:	fbb1 f0f0 	udiv	r0, r1, r0
 800a03e:	e790      	b.n	8009f62 <RCCEx_GetSAIxPeriphCLKFreq+0x4e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a040:	4a04      	ldr	r2, [pc, #16]	@ (800a054 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
        frequency = HSI_VALUE;
 800a042:	4b06      	ldr	r3, [pc, #24]	@ (800a05c <RCCEx_GetSAIxPeriphCLKFreq+0x148>)
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a044:	6810      	ldr	r0, [r2, #0]
}
 800a046:	f85d 4b04 	ldr.w	r4, [sp], #4
        frequency = HSI_VALUE;
 800a04a:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800a04e:	bf18      	it	ne
 800a050:	4618      	movne	r0, r3
}
 800a052:	4770      	bx	lr
 800a054:	40021000 	.word	0x40021000
 800a058:	001fff68 	.word	0x001fff68
 800a05c:	00f42400 	.word	0x00f42400

0800a060 <RCCEx_PLLSAI1_Config>:
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a060:	4a3e      	ldr	r2, [pc, #248]	@ (800a15c <RCCEx_PLLSAI1_Config+0xfc>)
{
 800a062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a064:	68d6      	ldr	r6, [r2, #12]
{
 800a066:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a068:	07b1      	lsls	r1, r6, #30
{
 800a06a:	4604      	mov	r4, r0
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a06c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a06e:	d006      	beq.n	800a07e <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a070:	68d2      	ldr	r2, [r2, #12]
 800a072:	f002 0203 	and.w	r2, r2, #3
 800a076:	4282      	cmp	r2, r0
 800a078:	d011      	beq.n	800a09e <RCCEx_PLLSAI1_Config+0x3e>
 800a07a:	2001      	movs	r0, #1
}
 800a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800a07e:	2802      	cmp	r0, #2
 800a080:	d04d      	beq.n	800a11e <RCCEx_PLLSAI1_Config+0xbe>
 800a082:	2803      	cmp	r0, #3
 800a084:	d044      	beq.n	800a110 <RCCEx_PLLSAI1_Config+0xb0>
 800a086:	2801      	cmp	r0, #1
 800a088:	d1f7      	bne.n	800a07a <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a08a:	6812      	ldr	r2, [r2, #0]
 800a08c:	0793      	lsls	r3, r2, #30
 800a08e:	d5f5      	bpl.n	800a07c <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800a090:	4932      	ldr	r1, [pc, #200]	@ (800a15c <RCCEx_PLLSAI1_Config+0xfc>)
 800a092:	68ca      	ldr	r2, [r1, #12]
 800a094:	f022 0203 	bic.w	r2, r2, #3
 800a098:	4302      	orrs	r2, r0
 800a09a:	60ca      	str	r2, [r1, #12]
  if(status == HAL_OK)
 800a09c:	e001      	b.n	800a0a2 <RCCEx_PLLSAI1_Config+0x42>
       ||
 800a09e:	2a00      	cmp	r2, #0
 800a0a0:	d0eb      	beq.n	800a07a <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 800a0a2:	4e2e      	ldr	r6, [pc, #184]	@ (800a15c <RCCEx_PLLSAI1_Config+0xfc>)
 800a0a4:	6833      	ldr	r3, [r6, #0]
 800a0a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a0aa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a0ac:	f7fd f918 	bl	80072e0 <HAL_GetTick>
 800a0b0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a0b2:	e004      	b.n	800a0be <RCCEx_PLLSAI1_Config+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a0b4:	f7fd f914 	bl	80072e0 <HAL_GetTick>
 800a0b8:	1bc3      	subs	r3, r0, r7
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d833      	bhi.n	800a126 <RCCEx_PLLSAI1_Config+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a0be:	6833      	ldr	r3, [r6, #0]
 800a0c0:	011a      	lsls	r2, r3, #4
 800a0c2:	d4f7      	bmi.n	800a0b4 <RCCEx_PLLSAI1_Config+0x54>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a0c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800a0c8:	3a01      	subs	r2, #1
 800a0ca:	021b      	lsls	r3, r3, #8
 800a0cc:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 800a0ce:	bb65      	cbnz	r5, 800a12a <RCCEx_PLLSAI1_Config+0xca>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a0d0:	68e1      	ldr	r1, [r4, #12]
 800a0d2:	6930      	ldr	r0, [r6, #16]
 800a0d4:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 800a0d8:	4921      	ldr	r1, [pc, #132]	@ (800a160 <RCCEx_PLLSAI1_Config+0x100>)
 800a0da:	4001      	ands	r1, r0
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800a0e2:	4d1e      	ldr	r5, [pc, #120]	@ (800a15c <RCCEx_PLLSAI1_Config+0xfc>)
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a0ec:	f7fd f8f8 	bl	80072e0 <HAL_GetTick>
 800a0f0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a0f2:	e004      	b.n	800a0fe <RCCEx_PLLSAI1_Config+0x9e>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a0f4:	f7fd f8f4 	bl	80072e0 <HAL_GetTick>
 800a0f8:	1b83      	subs	r3, r0, r6
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d813      	bhi.n	800a126 <RCCEx_PLLSAI1_Config+0xc6>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a0fe:	682b      	ldr	r3, [r5, #0]
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	d5f7      	bpl.n	800a0f4 <RCCEx_PLLSAI1_Config+0x94>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a104:	692b      	ldr	r3, [r5, #16]
 800a106:	69a2      	ldr	r2, [r4, #24]
 800a108:	4313      	orrs	r3, r2
 800a10a:	2000      	movs	r0, #0
 800a10c:	612b      	str	r3, [r5, #16]
}
 800a10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a110:	6811      	ldr	r1, [r2, #0]
 800a112:	038e      	lsls	r6, r1, #14
 800a114:	d4bc      	bmi.n	800a090 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a116:	6812      	ldr	r2, [r2, #0]
 800a118:	0351      	lsls	r1, r2, #13
 800a11a:	d5ae      	bpl.n	800a07a <RCCEx_PLLSAI1_Config+0x1a>
 800a11c:	e7b8      	b.n	800a090 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a11e:	6812      	ldr	r2, [r2, #0]
 800a120:	0557      	lsls	r7, r2, #21
 800a122:	d5aa      	bpl.n	800a07a <RCCEx_PLLSAI1_Config+0x1a>
 800a124:	e7b4      	b.n	800a090 <RCCEx_PLLSAI1_Config+0x30>
 800a126:	2003      	movs	r0, #3
}
 800a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800a12a:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a12c:	6930      	ldr	r0, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800a12e:	d00a      	beq.n	800a146 <RCCEx_PLLSAI1_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a130:	490c      	ldr	r1, [pc, #48]	@ (800a164 <RCCEx_PLLSAI1_Config+0x104>)
 800a132:	4001      	ands	r1, r0
 800a134:	430b      	orrs	r3, r1
 800a136:	4313      	orrs	r3, r2
 800a138:	6962      	ldr	r2, [r4, #20]
 800a13a:	0852      	lsrs	r2, r2, #1
 800a13c:	3a01      	subs	r2, #1
 800a13e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a142:	6133      	str	r3, [r6, #16]
 800a144:	e7cd      	b.n	800a0e2 <RCCEx_PLLSAI1_Config+0x82>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a146:	4908      	ldr	r1, [pc, #32]	@ (800a168 <RCCEx_PLLSAI1_Config+0x108>)
 800a148:	4001      	ands	r1, r0
 800a14a:	430b      	orrs	r3, r1
 800a14c:	4313      	orrs	r3, r2
 800a14e:	6922      	ldr	r2, [r4, #16]
 800a150:	0852      	lsrs	r2, r2, #1
 800a152:	3a01      	subs	r2, #1
 800a154:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a158:	6133      	str	r3, [r6, #16]
 800a15a:	e7c2      	b.n	800a0e2 <RCCEx_PLLSAI1_Config+0x82>
 800a15c:	40021000 	.word	0x40021000
 800a160:	07ff800f 	.word	0x07ff800f
 800a164:	f9ff800f 	.word	0xf9ff800f
 800a168:	ff9f800f 	.word	0xff9f800f

0800a16c <RCCEx_PLLSAI2_Config>:
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a16c:	4a3e      	ldr	r2, [pc, #248]	@ (800a268 <RCCEx_PLLSAI2_Config+0xfc>)
{
 800a16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a170:	68d6      	ldr	r6, [r2, #12]
{
 800a172:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a174:	07b1      	lsls	r1, r6, #30
{
 800a176:	4604      	mov	r4, r0
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a178:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a17a:	d006      	beq.n	800a18a <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a17c:	68d2      	ldr	r2, [r2, #12]
 800a17e:	f002 0203 	and.w	r2, r2, #3
 800a182:	4282      	cmp	r2, r0
 800a184:	d011      	beq.n	800a1aa <RCCEx_PLLSAI2_Config+0x3e>
 800a186:	2001      	movs	r0, #1
}
 800a188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 800a18a:	2802      	cmp	r0, #2
 800a18c:	d04d      	beq.n	800a22a <RCCEx_PLLSAI2_Config+0xbe>
 800a18e:	2803      	cmp	r0, #3
 800a190:	d044      	beq.n	800a21c <RCCEx_PLLSAI2_Config+0xb0>
 800a192:	2801      	cmp	r0, #1
 800a194:	d1f7      	bne.n	800a186 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a196:	6812      	ldr	r2, [r2, #0]
 800a198:	0793      	lsls	r3, r2, #30
 800a19a:	d5f5      	bpl.n	800a188 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a19c:	4932      	ldr	r1, [pc, #200]	@ (800a268 <RCCEx_PLLSAI2_Config+0xfc>)
 800a19e:	68ca      	ldr	r2, [r1, #12]
 800a1a0:	f022 0203 	bic.w	r2, r2, #3
 800a1a4:	4302      	orrs	r2, r0
 800a1a6:	60ca      	str	r2, [r1, #12]
  if(status == HAL_OK)
 800a1a8:	e001      	b.n	800a1ae <RCCEx_PLLSAI2_Config+0x42>
       ||
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	d0eb      	beq.n	800a186 <RCCEx_PLLSAI2_Config+0x1a>
    __HAL_RCC_PLLSAI2_DISABLE();
 800a1ae:	4e2e      	ldr	r6, [pc, #184]	@ (800a268 <RCCEx_PLLSAI2_Config+0xfc>)
 800a1b0:	6833      	ldr	r3, [r6, #0]
 800a1b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1b6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800a1b8:	f7fd f892 	bl	80072e0 <HAL_GetTick>
 800a1bc:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a1be:	e004      	b.n	800a1ca <RCCEx_PLLSAI2_Config+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a1c0:	f7fd f88e 	bl	80072e0 <HAL_GetTick>
 800a1c4:	1bc3      	subs	r3, r0, r7
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d833      	bhi.n	800a232 <RCCEx_PLLSAI2_Config+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a1ca:	6833      	ldr	r3, [r6, #0]
 800a1cc:	009a      	lsls	r2, r3, #2
 800a1ce:	d4f7      	bmi.n	800a1c0 <RCCEx_PLLSAI2_Config+0x54>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800a1d4:	3a01      	subs	r2, #1
 800a1d6:	021b      	lsls	r3, r3, #8
 800a1d8:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 800a1da:	bb65      	cbnz	r5, 800a236 <RCCEx_PLLSAI2_Config+0xca>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1dc:	68e1      	ldr	r1, [r4, #12]
 800a1de:	6970      	ldr	r0, [r6, #20]
 800a1e0:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 800a1e4:	4921      	ldr	r1, [pc, #132]	@ (800a26c <RCCEx_PLLSAI2_Config+0x100>)
 800a1e6:	4001      	ands	r1, r0
 800a1e8:	430b      	orrs	r3, r1
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800a1ee:	4d1e      	ldr	r5, [pc, #120]	@ (800a268 <RCCEx_PLLSAI2_Config+0xfc>)
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a1f8:	f7fd f872 	bl	80072e0 <HAL_GetTick>
 800a1fc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a1fe:	e004      	b.n	800a20a <RCCEx_PLLSAI2_Config+0x9e>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a200:	f7fd f86e 	bl	80072e0 <HAL_GetTick>
 800a204:	1b83      	subs	r3, r0, r6
 800a206:	2b02      	cmp	r3, #2
 800a208:	d813      	bhi.n	800a232 <RCCEx_PLLSAI2_Config+0xc6>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a20a:	682b      	ldr	r3, [r5, #0]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	d5f7      	bpl.n	800a200 <RCCEx_PLLSAI2_Config+0x94>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a210:	696b      	ldr	r3, [r5, #20]
 800a212:	69a2      	ldr	r2, [r4, #24]
 800a214:	4313      	orrs	r3, r2
 800a216:	2000      	movs	r0, #0
 800a218:	616b      	str	r3, [r5, #20]
}
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a21c:	6811      	ldr	r1, [r2, #0]
 800a21e:	038e      	lsls	r6, r1, #14
 800a220:	d4bc      	bmi.n	800a19c <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a222:	6812      	ldr	r2, [r2, #0]
 800a224:	0351      	lsls	r1, r2, #13
 800a226:	d5ae      	bpl.n	800a186 <RCCEx_PLLSAI2_Config+0x1a>
 800a228:	e7b8      	b.n	800a19c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a22a:	6812      	ldr	r2, [r2, #0]
 800a22c:	0557      	lsls	r7, r2, #21
 800a22e:	d5aa      	bpl.n	800a186 <RCCEx_PLLSAI2_Config+0x1a>
 800a230:	e7b4      	b.n	800a19c <RCCEx_PLLSAI2_Config+0x30>
 800a232:	2003      	movs	r0, #3
}
 800a234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800a236:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a238:	6970      	ldr	r0, [r6, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 800a23a:	d00a      	beq.n	800a252 <RCCEx_PLLSAI2_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a23c:	490c      	ldr	r1, [pc, #48]	@ (800a270 <RCCEx_PLLSAI2_Config+0x104>)
 800a23e:	4001      	ands	r1, r0
 800a240:	430b      	orrs	r3, r1
 800a242:	4313      	orrs	r3, r2
 800a244:	6962      	ldr	r2, [r4, #20]
 800a246:	0852      	lsrs	r2, r2, #1
 800a248:	3a01      	subs	r2, #1
 800a24a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a24e:	6173      	str	r3, [r6, #20]
 800a250:	e7cd      	b.n	800a1ee <RCCEx_PLLSAI2_Config+0x82>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a252:	4908      	ldr	r1, [pc, #32]	@ (800a274 <RCCEx_PLLSAI2_Config+0x108>)
 800a254:	4001      	ands	r1, r0
 800a256:	430b      	orrs	r3, r1
 800a258:	4313      	orrs	r3, r2
 800a25a:	6922      	ldr	r2, [r4, #16]
 800a25c:	0852      	lsrs	r2, r2, #1
 800a25e:	3a01      	subs	r2, #1
 800a260:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a264:	6173      	str	r3, [r6, #20]
 800a266:	e7c2      	b.n	800a1ee <RCCEx_PLLSAI2_Config+0x82>
 800a268:	40021000 	.word	0x40021000
 800a26c:	07ff800f 	.word	0x07ff800f
 800a270:	f9ff800f 	.word	0xf9ff800f
 800a274:	ff9f800f 	.word	0xff9f800f

0800a278 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a27c:	6803      	ldr	r3, [r0, #0]
 800a27e:	f413 6500 	ands.w	r5, r3, #2048	@ 0x800
{
 800a282:	b082      	sub	sp, #8
 800a284:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a286:	d014      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a288:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 800a28a:	2940      	cmp	r1, #64	@ 0x40
 800a28c:	f000 825a 	beq.w	800a744 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800a290:	f200 814c 	bhi.w	800a52c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a294:	2900      	cmp	r1, #0
 800a296:	f000 8213 	beq.w	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x448>
 800a29a:	2920      	cmp	r1, #32
 800a29c:	f040 828e 	bne.w	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	3020      	adds	r0, #32
 800a2a4:	f7ff ff62 	bl	800a16c <RCCEx_PLLSAI2_Config>
 800a2a8:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a2aa:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	f000 8247 	beq.w	800a740 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a2b2:	04d8      	lsls	r0, r3, #19
 800a2b4:	f140 814c 	bpl.w	800a550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a2b8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800a2ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a2be:	f000 8247 	beq.w	800a750 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800a2c2:	f200 81ad 	bhi.w	800a620 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	f000 8203 	beq.w	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800a2cc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a2d0:	f040 8272 	bne.w	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x540>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	f104 0020 	add.w	r0, r4, #32
 800a2da:	f7ff ff47 	bl	800a16c <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2de:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a2e0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a2e2:	2e00      	cmp	r6, #0
 800a2e4:	f040 81a7 	bne.w	800a636 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a2e8:	49a3      	ldr	r1, [pc, #652]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a2ea:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800a2ec:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a2f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a2f4:	4302      	orrs	r2, r0
 800a2f6:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2fa:	0399      	lsls	r1, r3, #14
 800a2fc:	f100 812c 	bmi.w	800a558 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a300:	07da      	lsls	r2, r3, #31
 800a302:	d508      	bpl.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a304:	499c      	ldr	r1, [pc, #624]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a306:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a308:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a30c:	f022 0203 	bic.w	r2, r2, #3
 800a310:	4302      	orrs	r2, r0
 800a312:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a316:	079f      	lsls	r7, r3, #30
 800a318:	d508      	bpl.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a31a:	4997      	ldr	r1, [pc, #604]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a31c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800a31e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a322:	f022 020c 	bic.w	r2, r2, #12
 800a326:	4302      	orrs	r2, r0
 800a328:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a32c:	0758      	lsls	r0, r3, #29
 800a32e:	d508      	bpl.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a330:	4991      	ldr	r1, [pc, #580]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a332:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a334:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a338:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800a33c:	4302      	orrs	r2, r0
 800a33e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a342:	0719      	lsls	r1, r3, #28
 800a344:	d508      	bpl.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a346:	498c      	ldr	r1, [pc, #560]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a348:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800a34a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a34e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800a352:	4302      	orrs	r2, r0
 800a354:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a358:	06da      	lsls	r2, r3, #27
 800a35a:	d508      	bpl.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a35c:	4986      	ldr	r1, [pc, #536]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a35e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a360:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a364:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a368:	4302      	orrs	r2, r0
 800a36a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a36e:	069f      	lsls	r7, r3, #26
 800a370:	d508      	bpl.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a372:	4981      	ldr	r1, [pc, #516]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a374:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800a376:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a37a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a37e:	4302      	orrs	r2, r0
 800a380:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a384:	0598      	lsls	r0, r3, #22
 800a386:	d508      	bpl.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a388:	497b      	ldr	r1, [pc, #492]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a38a:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800a38c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a390:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800a394:	4302      	orrs	r2, r0
 800a396:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a39a:	0559      	lsls	r1, r3, #21
 800a39c:	d508      	bpl.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a39e:	4976      	ldr	r1, [pc, #472]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a3a0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800a3a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a3a6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800a3aa:	4302      	orrs	r2, r0
 800a3ac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a3b0:	065a      	lsls	r2, r3, #25
 800a3b2:	d508      	bpl.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a3b4:	4970      	ldr	r1, [pc, #448]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a3b6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800a3b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a3bc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800a3c0:	4302      	orrs	r2, r0
 800a3c2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3c6:	061f      	lsls	r7, r3, #24
 800a3c8:	d508      	bpl.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x164>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3ca:	496b      	ldr	r1, [pc, #428]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a3d2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a3d6:	4302      	orrs	r2, r0
 800a3d8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3dc:	05d8      	lsls	r0, r3, #23
 800a3de:	d508      	bpl.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3e0:	4965      	ldr	r1, [pc, #404]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a3e2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800a3e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a3e8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800a3ec:	4302      	orrs	r2, r0
 800a3ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3f2:	02d9      	lsls	r1, r3, #11
 800a3f4:	d508      	bpl.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3f6:	4960      	ldr	r1, [pc, #384]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a3f8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800a3fa:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a3fe:	f022 0203 	bic.w	r2, r2, #3
 800a402:	4302      	orrs	r2, r0
 800a404:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a408:	049a      	lsls	r2, r3, #18
 800a40a:	d510      	bpl.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a40c:	495a      	ldr	r1, [pc, #360]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a40e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a410:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a414:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800a418:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a41a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a41e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a422:	f000 815c 	beq.w	800a6de <HAL_RCCEx_PeriphCLKConfig+0x466>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a426:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a42a:	f000 8198 	beq.w	800a75e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a42e:	031f      	lsls	r7, r3, #12
 800a430:	d51a      	bpl.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a432:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800a434:	4a50      	ldr	r2, [pc, #320]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a436:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800a43a:	f8d2 109c 	ldr.w	r1, [r2, #156]	@ 0x9c
 800a43e:	f000 8153 	beq.w	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800a442:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800a446:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
 800a44a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800a44e:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800a452:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a454:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a458:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a45c:	f000 8195 	beq.w	800a78a <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a460:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a464:	f000 819b 	beq.w	800a79e <HAL_RCCEx_PeriphCLKConfig+0x526>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a468:	0358      	lsls	r0, r3, #13
 800a46a:	d510      	bpl.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a46c:	4942      	ldr	r1, [pc, #264]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a46e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800a470:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800a474:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800a478:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a47a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a47e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a482:	f000 813a 	beq.w	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x482>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a486:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800a48a:	f000 8173 	beq.w	800a774 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a48e:	0459      	lsls	r1, r3, #17
 800a490:	d50d      	bpl.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a492:	4839      	ldr	r0, [pc, #228]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a494:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800a498:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800a49c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a4a0:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a4a2:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4a6:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a4aa:	f000 813e 	beq.w	800a72a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4ae:	03da      	lsls	r2, r3, #15
 800a4b0:	d509      	bpl.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4b2:	4931      	ldr	r1, [pc, #196]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a4b4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800a4b8:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a4bc:	f022 0204 	bic.w	r2, r2, #4
 800a4c0:	4302      	orrs	r2, r0
 800a4c2:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a4c6:	029f      	lsls	r7, r3, #10
 800a4c8:	d509      	bpl.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a4ca:	492b      	ldr	r1, [pc, #172]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a4cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800a4d0:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800a4d4:	f022 0218 	bic.w	r2, r2, #24
 800a4d8:	4302      	orrs	r2, r0
 800a4da:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a4de:	0258      	lsls	r0, r3, #9
 800a4e0:	f100 80b7 	bmi.w	800a652 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a4e4:	021a      	lsls	r2, r3, #8
 800a4e6:	d50d      	bpl.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a4e8:	4823      	ldr	r0, [pc, #140]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a4ea:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800a4ee:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800a4f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a4f6:	430a      	orrs	r2, r1
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800a4f8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a4fc:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800a500:	f000 8108 	beq.w	800a714 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a504:	01db      	lsls	r3, r3, #7
 800a506:	d50d      	bpl.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a508:	4a1b      	ldr	r2, [pc, #108]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a50a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800a50e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800a512:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a516:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a518:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a51c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a520:	f000 80f0 	beq.w	800a704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
}
 800a524:	4628      	mov	r0, r5
 800a526:	b002      	add	sp, #8
 800a528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 800a52c:	2960      	cmp	r1, #96	@ 0x60
 800a52e:	d002      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800a530:	2980      	cmp	r1, #128	@ 0x80
 800a532:	f040 8143 	bne.w	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x544>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a536:	4810      	ldr	r0, [pc, #64]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a538:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800a53c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a540:	430a      	orrs	r2, r1
 800a542:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a546:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a548:	f04f 0500 	mov.w	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a54c:	f53f aeb4 	bmi.w	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a550:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a552:	0399      	lsls	r1, r3, #14
 800a554:	f57f aed4 	bpl.w	800a300 <HAL_RCCEx_PeriphCLKConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a558:	4b07      	ldr	r3, [pc, #28]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a55a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a55c:	00d2      	lsls	r2, r2, #3
 800a55e:	d56c      	bpl.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    FlagStatus       pwrclkchanged = RESET;
 800a560:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a564:	4f05      	ldr	r7, [pc, #20]	@ (800a57c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a56c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a56e:	f7fc feb7 	bl	80072e0 <HAL_GetTick>
 800a572:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a574:	e00b      	b.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x316>
 800a576:	bf00      	nop
 800a578:	40021000 	.word	0x40021000
 800a57c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a580:	f7fc feae 	bl	80072e0 <HAL_GetTick>
 800a584:	eba0 0309 	sub.w	r3, r0, r9
 800a588:	2b02      	cmp	r3, #2
 800a58a:	f200 808c 	bhi.w	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	05db      	lsls	r3, r3, #23
 800a592:	d5f5      	bpl.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x308>
    if(ret == HAL_OK)
 800a594:	2e00      	cmp	r6, #0
 800a596:	f040 810d 	bne.w	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a59a:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x548>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a59e:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a5a2:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a5a6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800a5aa:	d026      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d024      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x382>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a5b0:	f8da 1090 	ldr.w	r1, [sl, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5b4:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a5b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5bc:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5c0:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a5c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5c8:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a5cc:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a5ce:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 800a5d2:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a5d6:	d510      	bpl.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x382>
        tickstart = HAL_GetTick();
 800a5d8:	f7fc fe82 	bl	80072e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5dc:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800a5e0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5e2:	e004      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x376>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5e4:	f7fc fe7c 	bl	80072e0 <HAL_GetTick>
 800a5e8:	1bc0      	subs	r0, r0, r7
 800a5ea:	4548      	cmp	r0, r9
 800a5ec:	d85b      	bhi.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5ee:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 800a5f2:	0799      	lsls	r1, r3, #30
 800a5f4:	d5f6      	bpl.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5f6:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800a5fa:	4971      	ldr	r1, [pc, #452]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a5fc:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800a600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a604:	4313      	orrs	r3, r2
 800a606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a60a:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800a60c:	f1b8 0f00 	cmp.w	r8, #0
 800a610:	f43f ae76 	beq.w	800a300 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a614:	496a      	ldr	r1, [pc, #424]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a616:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800a618:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a61c:	658a      	str	r2, [r1, #88]	@ 0x58
 800a61e:	e66f      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a620:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 800a624:	d003      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a626:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a62a:	f040 80c5 	bne.w	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a62e:	462e      	mov	r6, r5
    if(ret == HAL_OK)
 800a630:	2e00      	cmp	r6, #0
 800a632:	f43f ae59 	beq.w	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800a636:	4635      	mov	r5, r6
 800a638:	e78b      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a63a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a63c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a640:	659a      	str	r2, [r3, #88]	@ 0x58
 800a642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a648:	9301      	str	r3, [sp, #4]
 800a64a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a64c:	f04f 0801 	mov.w	r8, #1
 800a650:	e788      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_PLLSAI2_DISABLE();
 800a652:	4f5b      	ldr	r7, [pc, #364]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a65a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a65c:	f7fc fe40 	bl	80072e0 <HAL_GetTick>
 800a660:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a662:	e006      	b.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a664:	f7fc fe3c 	bl	80072e0 <HAL_GetTick>
 800a668:	eba0 0308 	sub.w	r3, r0, r8
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	f200 8091 	bhi.w	800a794 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	0099      	lsls	r1, r3, #2
 800a676:	d4f5      	bmi.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    if(ret == HAL_OK)
 800a678:	2e00      	cmp	r6, #0
 800a67a:	f040 808e 	bne.w	800a79a <HAL_RCCEx_PeriphCLKConfig+0x522>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800a67e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a682:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800a686:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a68a:	4313      	orrs	r3, r2
 800a68c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a690:	2102      	movs	r1, #2
 800a692:	f104 0020 	add.w	r0, r4, #32
 800a696:	f7ff fd69 	bl	800a16c <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a69a:	6823      	ldr	r3, [r4, #0]
    if(ret != HAL_OK)
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f43f af21 	beq.w	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	e71e      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        ret = HAL_TIMEOUT;
 800a6a6:	2503      	movs	r5, #3
 800a6a8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a6aa:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800a6ac:	f1b8 0f00 	cmp.w	r8, #0
 800a6b0:	f43f ae26 	beq.w	800a300 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6b4:	4942      	ldr	r1, [pc, #264]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a6b6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800a6b8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a6bc:	658a      	str	r2, [r1, #88]	@ 0x58
 800a6be:	e61f      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x88>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a6c0:	3004      	adds	r0, #4
 800a6c2:	f7ff fccd 	bl	800a060 <RCCEx_PLLSAI1_Config>
 800a6c6:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a6c8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a6ca:	2d00      	cmp	r5, #0
 800a6cc:	f47f adf1 	bne.w	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800a6d0:	e036      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a6d2:	1d20      	adds	r0, r4, #4
 800a6d4:	f7ff fcc4 	bl	800a060 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a6d8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a6da:	4606      	mov	r6, r0
      break;
 800a6dc:	e601      	b.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6de:	68ca      	ldr	r2, [r1, #12]
 800a6e0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a6e4:	60ca      	str	r2, [r1, #12]
 800a6e6:	e6a2      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a6e8:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800a6ec:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a6f0:	68d1      	ldr	r1, [r2, #12]
 800a6f2:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a6f6:	60d1      	str	r1, [r2, #12]
 800a6f8:	e6b6      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6fa:	68ca      	ldr	r2, [r1, #12]
 800a6fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a700:	60ca      	str	r2, [r1, #12]
 800a702:	e6c4      	b.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a704:	68d3      	ldr	r3, [r2, #12]
}
 800a706:	4628      	mov	r0, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a708:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a70c:	60d3      	str	r3, [r2, #12]
}
 800a70e:	b002      	add	sp, #8
 800a710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800a714:	2101      	movs	r1, #1
 800a716:	f104 0020 	add.w	r0, r4, #32
 800a71a:	f7ff fd27 	bl	800a16c <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a71e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800a720:	2800      	cmp	r0, #0
 800a722:	f43f aeef 	beq.w	800a504 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a726:	4605      	mov	r5, r0
 800a728:	e6ec      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a72a:	2102      	movs	r1, #2
 800a72c:	1d20      	adds	r0, r4, #4
 800a72e:	f7ff fc97 	bl	800a060 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a732:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800a734:	4606      	mov	r6, r0
 800a736:	2800      	cmp	r0, #0
 800a738:	f43f aeb9 	beq.w	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a73c:	4605      	mov	r5, r0
 800a73e:	e6b6      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a740:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800a742:	e6f8      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a744:	481e      	ldr	r0, [pc, #120]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a746:	68c2      	ldr	r2, [r0, #12]
 800a748:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a74c:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 800a74e:	e6f2      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a750:	491b      	ldr	r1, [pc, #108]	@ (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a752:	68ca      	ldr	r2, [r1, #12]
 800a754:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a758:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 800a75a:	462e      	mov	r6, r5
 800a75c:	e768      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a75e:	2101      	movs	r1, #1
 800a760:	1d20      	adds	r0, r4, #4
 800a762:	f7ff fc7d 	bl	800a060 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a766:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800a768:	4606      	mov	r6, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f43f ae5f 	beq.w	800a42e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a770:	4605      	mov	r5, r0
 800a772:	e65c      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a774:	2101      	movs	r1, #1
 800a776:	1d20      	adds	r0, r4, #4
 800a778:	f7ff fc72 	bl	800a060 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a77c:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800a77e:	4606      	mov	r6, r0
 800a780:	2800      	cmp	r0, #0
 800a782:	f43f ae84 	beq.w	800a48e <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a786:	4605      	mov	r5, r0
 800a788:	e681      	b.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a78a:	68d1      	ldr	r1, [r2, #12]
 800a78c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800a790:	60d1      	str	r1, [r2, #12]
 800a792:	e669      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        ret = HAL_TIMEOUT;
 800a794:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	e6a4      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a79a:	4635      	mov	r5, r6
 800a79c:	e7fb      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x51e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a79e:	2101      	movs	r1, #1
 800a7a0:	1d20      	adds	r0, r4, #4
 800a7a2:	f7ff fc5d 	bl	800a060 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a7a6:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	f43f ae5c 	beq.w	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	e659      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a7b4:	4635      	mov	r5, r6
 800a7b6:	e778      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a7b8:	2501      	movs	r5, #1
 800a7ba:	e6c9      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a7bc:	2501      	movs	r5, #1
 800a7be:	e578      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800a7c0:	40021000 	.word	0x40021000

0800a7c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a7c4:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a7c8:	4aa1      	ldr	r2, [pc, #644]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a7ca:	d03b      	beq.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7cc:	68d3      	ldr	r3, [r2, #12]
 800a7ce:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	f000 80e9 	beq.w	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	f000 80cb 	beq.w	800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	f000 80cf 	beq.w	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a7e4:	2100      	movs	r1, #0
    switch(PeriphClk)
 800a7e6:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800a7ea:	f000 8102 	beq.w	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800a7ee:	d85b      	bhi.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a7f0:	2820      	cmp	r0, #32
 800a7f2:	d839      	bhi.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	f000 80bc 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800a7fa:	3801      	subs	r0, #1
 800a7fc:	281f      	cmp	r0, #31
 800a7fe:	d831      	bhi.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800a800:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a804:	01520178 	.word	0x01520178
 800a808:	01880030 	.word	0x01880030
 800a80c:	00300030 	.word	0x00300030
 800a810:	01160030 	.word	0x01160030
 800a814:	00300030 	.word	0x00300030
 800a818:	00300030 	.word	0x00300030
 800a81c:	00300030 	.word	0x00300030
 800a820:	012e0030 	.word	0x012e0030
 800a824:	00300030 	.word	0x00300030
 800a828:	00300030 	.word	0x00300030
 800a82c:	00300030 	.word	0x00300030
 800a830:	00300030 	.word	0x00300030
 800a834:	00300030 	.word	0x00300030
 800a838:	00300030 	.word	0x00300030
 800a83c:	00300030 	.word	0x00300030
 800a840:	01400030 	.word	0x01400030
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a844:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    switch(srcclk)
 800a84c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a850:	f000 80df 	beq.w	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 800a854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a858:	f000 80e3 	beq.w	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800a85c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a860:	f000 80ae 	beq.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
  uint32_t frequency = 0U;
 800a864:	2000      	movs	r0, #0
  return(frequency);
 800a866:	4770      	bx	lr
    switch(PeriphClk)
 800a868:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a86c:	f000 80ae 	beq.w	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a870:	d933      	bls.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800a872:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800a876:	d1f5      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a878:	4a75      	ldr	r2, [pc, #468]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a87a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a87e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
        switch(srcclk)
 800a882:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a886:	f000 80ad 	beq.w	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800a88a:	f200 8218 	bhi.w	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a88e:	b3b3      	cbz	r3, 800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a890:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a894:	d1e6      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a896:	4b6e      	ldr	r3, [pc, #440]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a898:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
          frequency = LSI_VALUE;
 800a89c:	f010 0002 	ands.w	r0, r0, #2
 800a8a0:	bf18      	it	ne
 800a8a2:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800a8a6:	4770      	bx	lr
    switch(PeriphClk)
 800a8a8:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 800a8ac:	f000 817e 	beq.w	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a8b0:	d82f      	bhi.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 800a8b2:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800a8b6:	f000 8179 	beq.w	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a8ba:	d922      	bls.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800a8bc:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800a8c0:	f000 81e6 	beq.w	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800a8c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a8c8:	d1cc      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a8ca:	4b61      	ldr	r3, [pc, #388]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a8cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a8d0:	075a      	lsls	r2, r3, #29
 800a8d2:	f140 811d 	bpl.w	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          frequency = HAL_RCC_GetSysClockFreq();
 800a8d6:	f7fe be7f 	b.w	80095d8 <HAL_RCC_GetSysClockFreq>
    switch(PeriphClk)
 800a8da:	2840      	cmp	r0, #64	@ 0x40
 800a8dc:	f000 8148 	beq.w	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800a8e0:	2880      	cmp	r0, #128	@ 0x80
 800a8e2:	d1bf      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a8e4:	4a5a      	ldr	r2, [pc, #360]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a8e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a8ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
        switch(srcclk)
 800a8ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8f2:	d0f0      	beq.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a8f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8f8:	d074      	beq.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1b2      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a8fe:	f7ff bae5 	b.w	8009ecc <HAL_RCC_GetPCLK1Freq>
    switch(PeriphClk)
 800a902:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800a906:	d002      	beq.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a908:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800a90c:	d1aa      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a90e:	f7ff bb01 	b.w	8009f14 <RCCEx_GetSAIxPeriphCLKFreq>
    switch(PeriphClk)
 800a912:	f5b0 1f00 	cmp.w	r0, #2097152	@ 0x200000
 800a916:	f000 8139 	beq.w	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800a91a:	d912      	bls.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a91c:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800a920:	d1a0      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a922:	4a4b      	ldr	r2, [pc, #300]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a924:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800a928:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
        switch(srcclk)
 800a92c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a930:	f000 8101 	beq.w	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a938:	f000 8206 	beq.w	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d191      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800a940:	e7c9      	b.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    switch(PeriphClk)
 800a942:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 800a946:	f000 8175 	beq.w	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 800a94a:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 800a94e:	d189      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a950:	4b3f      	ldr	r3, [pc, #252]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a952:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a956:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d0bb      	beq.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d1cb      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x136>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a962:	4a3b      	ldr	r2, [pc, #236]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
            frequency = HSI_VALUE;
 800a964:	4b3b      	ldr	r3, [pc, #236]	@ (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a966:	6810      	ldr	r0, [r2, #0]
            frequency = HSI_VALUE;
 800a968:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800a96c:	bf18      	it	ne
 800a96e:	4618      	movne	r0, r3
 800a970:	4770      	bx	lr
}
 800a972:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a974:	6811      	ldr	r1, [r2, #0]
        pllvco = HSI_VALUE;
 800a976:	4a37      	ldr	r2, [pc, #220]	@ (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a978:	f411 3100 	ands.w	r1, r1, #131072	@ 0x20000
 800a97c:	bf18      	it	ne
 800a97e:	4611      	movne	r1, r2
 800a980:	e731      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a982:	6811      	ldr	r1, [r2, #0]
 800a984:	f011 0102 	ands.w	r1, r1, #2
 800a988:	f43f af2d 	beq.w	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a98c:	6813      	ldr	r3, [r2, #0]
 800a98e:	071b      	lsls	r3, r3, #28
 800a990:	bf4c      	ite	mi
 800a992:	6813      	ldrmi	r3, [r2, #0]
 800a994:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	@ 0x94
 800a998:	4a2f      	ldr	r2, [pc, #188]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a99a:	bf4c      	ite	mi
 800a99c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 800a9a0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800a9a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a9a8:	e71d      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9aa:	6811      	ldr	r1, [r2, #0]
        pllvco = HSI_VALUE;
 800a9ac:	4a29      	ldr	r2, [pc, #164]	@ (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a9ae:	f411 6180 	ands.w	r1, r1, #1024	@ 0x400
 800a9b2:	bf18      	it	ne
 800a9b4:	4611      	movne	r1, r2
 800a9b6:	e716      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 800a9b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9bc:	f47f af52 	bne.w	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a9c0:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
 800a9c4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800a9c8:	03c0      	lsls	r0, r0, #15
 800a9ca:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a9cc:	4a20      	ldr	r2, [pc, #128]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a9ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a9d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
        switch(srcclk)
 800a9d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9da:	f43f af7c 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a9de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9e2:	d18a      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x136>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9e4:	6810      	ldr	r0, [r2, #0]
            frequency = HSI_VALUE;
 800a9e6:	4b1b      	ldr	r3, [pc, #108]	@ (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a9e8:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800a9ec:	bf18      	it	ne
 800a9ee:	4618      	movne	r0, r3
 800a9f0:	4770      	bx	lr
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a9f2:	4a17      	ldr	r2, [pc, #92]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a9f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800a9f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
        switch(srcclk)
 800a9fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa00:	d0f0      	beq.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800aa02:	d8d9      	bhi.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f43f af7a 	beq.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800aa0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa0e:	f47f af29 	bne.w	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800aa12:	f8d2 0094 	ldr.w	r0, [r2, #148]	@ 0x94
          frequency = LSI_VALUE;
 800aa16:	f010 0002 	ands.w	r0, r0, #2
 800aa1a:	bf18      	it	ne
 800aa1c:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800aa20:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa22:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 32U;
 800aa24:	4b0d      	ldr	r3, [pc, #52]	@ (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa26:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800aa2a:	bf18      	it	ne
 800aa2c:	4618      	movne	r0, r3
 800aa2e:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800aa30:	4a07      	ldr	r2, [pc, #28]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aa32:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aa36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        switch(srcclk)
 800aa3a:	2b80      	cmp	r3, #128	@ 0x80
 800aa3c:	d0d2      	beq.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800aa3e:	f200 8093 	bhi.w	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f43f af5b 	beq.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800aa48:	2b40      	cmp	r3, #64	@ 0x40
 800aa4a:	f43f af44 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800aa4e:	e709      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800aa50:	40021000 	.word	0x40021000
 800aa54:	00f42400 	.word	0x00f42400
 800aa58:	08015430 	.word	0x08015430
 800aa5c:	0007a120 	.word	0x0007a120
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800aa60:	4ab7      	ldr	r2, [pc, #732]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aa62:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aa66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
        switch(srcclk)
 800aa6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa6e:	d0b9      	beq.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800aa70:	f200 811b 	bhi.w	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f43f af42 	beq.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800aa7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa7e:	f43f af2a 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800aa82:	e6ef      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800aa84:	4aae      	ldr	r2, [pc, #696]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aa86:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aa8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
        switch(srcclk)
 800aa8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa92:	d0a7      	beq.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800aa94:	f200 810e 	bhi.w	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f43f af30 	beq.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800aa9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaa2:	f43f af18 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800aaa6:	e6dd      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800aaa8:	4ba5      	ldr	r3, [pc, #660]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aaaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaae:	f003 030c 	and.w	r3, r3, #12
 800aab2:	2b0c      	cmp	r3, #12
 800aab4:	f63f aed6 	bhi.w	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800aab8:	a201      	add	r2, pc, #4	@ (adr r2, 800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800aaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabe:	bf00      	nop
 800aac0:	0800a8ff 	.word	0x0800a8ff
 800aac4:	0800a865 	.word	0x0800a865
 800aac8:	0800a865 	.word	0x0800a865
 800aacc:	0800a865 	.word	0x0800a865
 800aad0:	0800a8d7 	.word	0x0800a8d7
 800aad4:	0800a865 	.word	0x0800a865
 800aad8:	0800a865 	.word	0x0800a865
 800aadc:	0800a865 	.word	0x0800a865
 800aae0:	0800a963 	.word	0x0800a963
 800aae4:	0800a865 	.word	0x0800a865
 800aae8:	0800a865 	.word	0x0800a865
 800aaec:	0800a865 	.word	0x0800a865
 800aaf0:	0800ab5b 	.word	0x0800ab5b
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800aaf4:	4a92      	ldr	r2, [pc, #584]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aaf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800aafa:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	f43f af70 	beq.w	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	f43f af5b 	beq.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	f43f aee3 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HAL_RCC_GetPCLK2Freq();
 800ab10:	f7ff b9ee 	b.w	8009ef0 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ab14:	4a8a      	ldr	r2, [pc, #552]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ab16:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ab1a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        switch(srcclk)
 800ab1e:	2b20      	cmp	r3, #32
 800ab20:	f43f af60 	beq.w	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ab24:	f200 80d0 	bhi.w	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f43f aee8 	beq.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800ab2e:	2b10      	cmp	r3, #16
 800ab30:	f43f aed1 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800ab34:	e696      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ab36:	6810      	ldr	r0, [r2, #0]
 800ab38:	f010 0002 	ands.w	r0, r0, #2
 800ab3c:	f43f af19 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ab40:	6813      	ldr	r3, [r2, #0]
 800ab42:	f013 0f08 	tst.w	r3, #8
 800ab46:	4b7e      	ldr	r3, [pc, #504]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ab48:	f000 80f5 	beq.w	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ab52:	4a7c      	ldr	r2, [pc, #496]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800ab54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ab58:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ab5a:	4b79      	ldr	r3, [pc, #484]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ab5c:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800ab60:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800ab64:	03c0      	lsls	r0, r0, #15
 800ab66:	4770      	bx	lr
 800ab68:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab6a:	f43f af29 	beq.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ab6e:	e679      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ab70:	4a73      	ldr	r2, [pc, #460]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ab72:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ab76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
        switch(srcclk)
 800ab7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab7e:	f43f aeaa 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800ab82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab86:	f47f aeb8 	bne.w	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 800ab8a:	e72b      	b.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800ab8c:	4a6c      	ldr	r2, [pc, #432]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ab8e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800ab92:	f003 0318 	and.w	r3, r3, #24
        switch(srcclk)
 800ab96:	2b08      	cmp	r3, #8
 800ab98:	f43f af24 	beq.w	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800ab9c:	2b10      	cmp	r3, #16
 800ab9e:	d039      	beq.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f47f ae5f 	bne.w	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800aba6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800abaa:	e6b0      	b.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800abac:	4a64      	ldr	r2, [pc, #400]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800abae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800abb2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
        switch(srcclk)
 800abb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abba:	f000 80ef 	beq.w	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 800abbe:	d825      	bhi.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 80e3 	beq.w	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 800abc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800abca:	f47f ae4b 	bne.w	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800abce:	6810      	ldr	r0, [r2, #0]
 800abd0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800abd4:	f43f aecd 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800abd8:	6910      	ldr	r0, [r2, #16]
 800abda:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800abde:	f43f aec8 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800abe2:	6910      	ldr	r0, [r2, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800abe4:	f8d2 c010 	ldr.w	ip, [r2, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800abe8:	6913      	ldr	r3, [r2, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800abea:	f3cc 1c03 	ubfx	ip, ip, #4, #4
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800abee:	f3c0 2206 	ubfx	r2, r0, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800abf2:	f3c3 5341 	ubfx	r3, r3, #21, #2
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800abf6:	3301      	adds	r3, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800abf8:	fb01 f002 	mul.w	r0, r1, r2
 800abfc:	f10c 0c01 	add.w	ip, ip, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ac00:	005b      	lsls	r3, r3, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ac02:	fbb0 f0fc 	udiv	r0, r0, ip
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ac06:	fbb0 f0f3 	udiv	r0, r0, r3
 800ac0a:	4770      	bx	lr
 800ac0c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ac10:	f47f ae28 	bne.w	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ac14:	6810      	ldr	r0, [r2, #0]
 800ac16:	f010 0002 	ands.w	r0, r0, #2
 800ac1a:	f43f aeaa 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ac1e:	6813      	ldr	r3, [r2, #0]
 800ac20:	071b      	lsls	r3, r3, #28
 800ac22:	bf4b      	itete	mi
 800ac24:	6813      	ldrmi	r3, [r2, #0]
 800ac26:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	@ 0x94
 800ac2a:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 800ac2e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800ac32:	e78e      	b.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800ac34:	4a42      	ldr	r2, [pc, #264]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ac36:	f8d2 009c 	ldr.w	r0, [r2, #156]	@ 0x9c
 800ac3a:	f410 4080 	ands.w	r0, r0, #16384	@ 0x4000
 800ac3e:	d047      	beq.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ac40:	6810      	ldr	r0, [r2, #0]
 800ac42:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800ac46:	f43f ae94 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800ac4a:	68d0      	ldr	r0, [r2, #12]
 800ac4c:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 800ac50:	f43f ae8f 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
{
 800ac54:	b430      	push	{r4, r5}
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ac56:	4614      	mov	r4, r2
 800ac58:	68d3      	ldr	r3, [r2, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ac5a:	68d2      	ldr	r2, [r2, #12]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ac5c:	68e5      	ldr	r5, [r4, #12]
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ac5e:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ac62:	f3c2 1203 	ubfx	r2, r2, #4, #4
            if(pllp == 0U)
 800ac66:	ea5f 6cd5 	movs.w	ip, r5, lsr #27
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ac6a:	fb01 f003 	mul.w	r0, r1, r3
 800ac6e:	f102 0201 	add.w	r2, r2, #1
 800ac72:	fbb0 f0f2 	udiv	r0, r0, r2
            if(pllp == 0U)
 800ac76:	d107      	bne.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ac78:	68e3      	ldr	r3, [r4, #12]
                pllp = 17U;
 800ac7a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800ac7e:	bf0c      	ite	eq
 800ac80:	f04f 0c07 	moveq.w	ip, #7
 800ac84:	f04f 0c11 	movne.w	ip, #17
            frequency = (pllvco / pllp);
 800ac88:	fbb0 f0fc 	udiv	r0, r0, ip
}
 800ac8c:	bc30      	pop	{r4, r5}
 800ac8e:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac90:	4a2b      	ldr	r2, [pc, #172]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ac92:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ac96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch(srcclk)
 800ac9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac9e:	d062      	beq.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
 800aca0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aca4:	f43f ae17 	beq.w	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800aca8:	e5dc      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800acaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acae:	f43f ae87 	beq.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800acb2:	e5d7      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800acb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acb8:	f43f ae82 	beq.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800acbc:	e5d2      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800acbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800acc2:	f43f ae7d 	beq.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800acc6:	e5cd      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800acc8:	2b30      	cmp	r3, #48	@ 0x30
 800acca:	f43f ae79 	beq.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800acce:	e5c9      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800acd0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800acd4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
        switch(srcclk)
 800acd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acdc:	d034      	beq.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800acde:	d819      	bhi.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d070      	beq.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
 800ace4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ace8:	d176      	bne.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800acea:	4b15      	ldr	r3, [pc, #84]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800acf2:	f43f ae3e 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800acf6:	6918      	ldr	r0, [r3, #16]
 800acf8:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800acfc:	f43f ae39 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ad00:	691a      	ldr	r2, [r3, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ad02:	6918      	ldr	r0, [r3, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ad04:	691b      	ldr	r3, [r3, #16]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad06:	f3c2 2206 	ubfx	r2, r2, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ad0a:	f3c3 5341 	ubfx	r3, r3, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad0e:	f3c0 1c03 	ubfx	ip, r0, #4, #4
 800ad12:	e770      	b.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ad14:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ad18:	f47f ae2b 	bne.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ad1c:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
 800ad20:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	f010 0002 	ands.w	r0, r0, #2
 800ad2a:	f43f ae22 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	0711      	lsls	r1, r2, #28
 800ad32:	f53f af0b 	bmi.w	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ad36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad3a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800ad3e:	e708      	b.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800ad40:	40021000 	.word	0x40021000
 800ad44:	08015430 	.word	0x08015430
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ad48:	6810      	ldr	r0, [r2, #0]
 800ad4a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800ad4e:	f43f ae10 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800ad52:	4b22      	ldr	r3, [pc, #136]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 800ad54:	68d8      	ldr	r0, [r3, #12]
 800ad56:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800ad5a:	f43f ae0a 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad5e:	68da      	ldr	r2, [r3, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad60:	68d8      	ldr	r0, [r3, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	e7cf      	b.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800ad66:	6810      	ldr	r0, [r2, #0]
 800ad68:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ad6c:	f43f ae01 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800ad70:	6910      	ldr	r0, [r2, #16]
 800ad72:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 800ad76:	f43f adfc 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ad7a:	4b18      	ldr	r3, [pc, #96]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 800ad7c:	691a      	ldr	r2, [r3, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ad7e:	6918      	ldr	r0, [r3, #16]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800ad80:	691b      	ldr	r3, [r3, #16]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ad82:	f3c2 2206 	ubfx	r2, r2, #8, #7
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800ad86:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800ad8a:	e7c0      	b.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800ad8c:	f8d2 0098 	ldr.w	r0, [r2, #152]	@ 0x98
            frequency = HSI48_VALUE;
 800ad90:	4b13      	ldr	r3, [pc, #76]	@ (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
 800ad92:	f010 0002 	ands.w	r0, r0, #2
 800ad96:	bf18      	it	ne
 800ad98:	4618      	movne	r0, r3
 800ad9a:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ad9c:	6810      	ldr	r0, [r2, #0]
 800ad9e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800ada2:	f43f ade6 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800ada6:	68d0      	ldr	r0, [r2, #12]
 800ada8:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 800adac:	f43f ade1 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800adb0:	68d0      	ldr	r0, [r2, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800adb2:	f8d2 c00c 	ldr.w	ip, [r2, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800adb6:	68d3      	ldr	r3, [r2, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800adb8:	f3cc 1c03 	ubfx	ip, ip, #4, #4
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800adbc:	f3c0 2206 	ubfx	r2, r0, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800adc0:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800adc4:	e717      	b.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800adc6:	4a05      	ldr	r2, [pc, #20]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
            frequency = HSI48_VALUE;
 800adc8:	4b05      	ldr	r3, [pc, #20]	@ (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800adca:	f8d2 0098 	ldr.w	r0, [r2, #152]	@ 0x98
            frequency = HSI48_VALUE;
 800adce:	f010 0002 	ands.w	r0, r0, #2
 800add2:	bf18      	it	ne
 800add4:	4618      	movne	r0, r3
 800add6:	4770      	bx	lr
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	40021000 	.word	0x40021000
 800ade0:	02dc6c00 	.word	0x02dc6c00

0800ade4 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 800ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade8:	b086      	sub	sp, #24
 800adea:	4605      	mov	r5, r0
 800adec:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800adee:	f7fc fa77 	bl	80072e0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800adf2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800adf4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800adf6:	6828      	ldr	r0, [r5, #0]
 800adf8:	f002 faf0 	bl	800d3dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800adfc:	4604      	mov	r4, r0
 800adfe:	b118      	cbz	r0, 800ae08 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800ae00:	4620      	mov	r0, r4
 800ae02:	b006      	add	sp, #24
 800ae04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ae08:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800ae0a:	6828      	ldr	r0, [r5, #0]
 800ae0c:	0409      	lsls	r1, r1, #16
 800ae0e:	f002 ffeb 	bl	800dde8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae12:	4604      	mov	r4, r0
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d1f3      	bne.n	800ae00 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 800ae18:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1c:	2308      	movs	r3, #8
 800ae1e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ae22:	2230      	movs	r2, #48	@ 0x30
 800ae24:	2302      	movs	r3, #2
 800ae26:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae2a:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae30:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae32:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae36:	f002 fabb 	bl	800d3b0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ae3a:	6828      	ldr	r0, [r5, #0]
 800ae3c:	f003 f95a 	bl	800e0f4 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae40:	4604      	mov	r4, r0
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d1dc      	bne.n	800ae00 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ae46:	4682      	mov	sl, r0
 800ae48:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ae4a:	f240 582a 	movw	r8, #1322	@ 0x52a
 800ae4e:	e004      	b.n	800ae5a <SD_FindSCR.constprop.0+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae50:	f7fc fa46 	bl	80072e0 <HAL_GetTick>
 800ae54:	1b83      	subs	r3, r0, r6
 800ae56:	3301      	adds	r3, #1
 800ae58:	d024      	beq.n	800aea4 <SD_FindSCR.constprop.0+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ae5a:	6828      	ldr	r0, [r5, #0]
 800ae5c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ae5e:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ae62:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ae64:	d10c      	bne.n	800ae80 <SD_FindSCR.constprop.0+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ae66:	0319      	lsls	r1, r3, #12
 800ae68:	d4f2      	bmi.n	800ae50 <SD_FindSCR.constprop.0+0x6c>
 800ae6a:	2c00      	cmp	r4, #0
 800ae6c:	d1f0      	bne.n	800ae50 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ae6e:	f002 fa81 	bl	800d374 <SDMMC_ReadFIFO>
 800ae72:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ae74:	6828      	ldr	r0, [r5, #0]
 800ae76:	f002 fa7d 	bl	800d374 <SDMMC_ReadFIFO>
      index++;
 800ae7a:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ae7c:	4682      	mov	sl, r0
      index++;
 800ae7e:	e7e7      	b.n	800ae50 <SD_FindSCR.constprop.0+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ae80:	071a      	lsls	r2, r3, #28
 800ae82:	d415      	bmi.n	800aeb0 <SD_FindSCR.constprop.0+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ae84:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ae86:	079b      	lsls	r3, r3, #30
 800ae88:	d40f      	bmi.n	800aeaa <SD_FindSCR.constprop.0+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ae8a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800ae8c:	f014 0420 	ands.w	r4, r4, #32
 800ae90:	d111      	bne.n	800aeb6 <SD_FindSCR.constprop.0+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ae92:	490a      	ldr	r1, [pc, #40]	@ (800aebc <SD_FindSCR.constprop.0+0xd8>)
 800ae94:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ae96:	fa9a f28a 	rev.w	r2, sl
 800ae9a:	fa99 f389 	rev.w	r3, r9
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ae9e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800aea2:	e7ad      	b.n	800ae00 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800aea4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800aea8:	e7aa      	b.n	800ae00 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800aeaa:	2402      	movs	r4, #2
 800aeac:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aeae:	e7a7      	b.n	800ae00 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800aeb0:	2408      	movs	r4, #8
 800aeb2:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aeb4:	e7a4      	b.n	800ae00 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aeb6:	2420      	movs	r4, #32
 800aeb8:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800aeba:	e7a1      	b.n	800ae00 <SD_FindSCR.constprop.0+0x1c>
 800aebc:	18000f3a 	.word	0x18000f3a

0800aec0 <HAL_SD_MspInit>:
}
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop

0800aec4 <HAL_SD_ReadBlocks_DMA>:
{
 800aec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec6:	4604      	mov	r4, r0
 800aec8:	b087      	sub	sp, #28
  if(NULL == pData)
 800aeca:	2900      	cmp	r1, #0
 800aecc:	d052      	beq.n	800af74 <HAL_SD_ReadBlocks_DMA+0xb0>
  if(hsd->State == HAL_SD_STATE_READY)
 800aece:	461f      	mov	r7, r3
 800aed0:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d13d      	bne.n	800af54 <HAL_SD_ReadBlocks_DMA+0x90>
 800aed8:	4616      	mov	r6, r2
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aeda:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800aedc:	460d      	mov	r5, r1
 800aede:	19f1      	adds	r1, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aee0:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aee2:	4291      	cmp	r1, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aee4:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aee6:	d838      	bhi.n	800af5a <HAL_SD_ReadBlocks_DMA+0x96>
    hsd->Instance->DCTRL = 0U;
 800aee8:	6800      	ldr	r0, [r0, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aeea:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800aeec:	2103      	movs	r1, #3
 800aeee:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800aef2:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aef4:	027b      	lsls	r3, r7, #9
 800aef6:	62e3      	str	r3, [r4, #44]	@ 0x2c
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aef8:	9301      	str	r3, [sp, #4]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aefa:	2300      	movs	r3, #0
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800aefc:	e9cd 3304 	strd	r3, r3, [sp, #16]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af00:	f04f 33ff 	mov.w	r3, #4294967295
 800af04:	9300      	str	r3, [sp, #0]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800af06:	2190      	movs	r1, #144	@ 0x90
 800af08:	2302      	movs	r3, #2
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800af0a:	2a01      	cmp	r2, #1
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800af0c:	e9cd 1302 	strd	r1, r3, [sp, #8]
      hsd->pRxBuffPtr = pData;
 800af10:	62a5      	str	r5, [r4, #40]	@ 0x28
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af12:	4669      	mov	r1, sp
        add *= 512U;
 800af14:	bf18      	it	ne
 800af16:	0276      	lslne	r6, r6, #9
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af18:	f002 fa4a 	bl	800d3b0 <SDMMC_ConfigData>
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800af1c:	6820      	ldr	r0, [r4, #0]
 800af1e:	68c3      	ldr	r3, [r0, #12]
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800af20:	2201      	movs	r2, #1
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800af22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
      if(NumberOfBlocks > 1U)
 800af26:	4297      	cmp	r7, r2
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800af28:	60c3      	str	r3, [r0, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800af2a:	6585      	str	r5, [r0, #88]	@ 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800af2c:	6502      	str	r2, [r0, #80]	@ 0x50
      if(NumberOfBlocks > 1U)
 800af2e:	d926      	bls.n	800af7e <HAL_SD_ReadBlocks_DMA+0xba>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800af30:	2382      	movs	r3, #130	@ 0x82
 800af32:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800af34:	4631      	mov	r1, r6
 800af36:	f002 fb9d 	bl	800d674 <SDMMC_CmdReadMultiBlock>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af3a:	6823      	ldr	r3, [r4, #0]
      if(errorstate != HAL_SD_ERROR_NONE)
 800af3c:	b1a0      	cbz	r0, 800af68 <HAL_SD_ReadBlocks_DMA+0xa4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af3e:	4a13      	ldr	r2, [pc, #76]	@ (800af8c <HAL_SD_ReadBlocks_DMA+0xc8>)
 800af40:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800af42:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800af44:	2101      	movs	r1, #1
        hsd->ErrorCode |= errorstate;
 800af46:	4303      	orrs	r3, r0
        hsd->Context = SD_CONTEXT_NONE;
 800af48:	2200      	movs	r2, #0
        hsd->ErrorCode |= errorstate;
 800af4a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800af4c:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800af50:	6322      	str	r2, [r4, #48]	@ 0x30
        return HAL_ERROR;
 800af52:	e006      	b.n	800af62 <HAL_SD_ReadBlocks_DMA+0x9e>
    return HAL_BUSY;
 800af54:	2002      	movs	r0, #2
}
 800af56:	b007      	add	sp, #28
 800af58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800af5a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800af5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800af60:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800af62:	2001      	movs	r0, #1
}
 800af64:	b007      	add	sp, #28
 800af66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800af68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af6a:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800af6e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800af70:	b007      	add	sp, #28
 800af72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800af74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800af76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af7a:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800af7c:	e7f1      	b.n	800af62 <HAL_SD_ReadBlocks_DMA+0x9e>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800af7e:	2381      	movs	r3, #129	@ 0x81
 800af80:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800af82:	4631      	mov	r1, r6
 800af84:	f002 fad0 	bl	800d528 <SDMMC_CmdReadSingleBlock>
 800af88:	e7d7      	b.n	800af3a <HAL_SD_ReadBlocks_DMA+0x76>
 800af8a:	bf00      	nop
 800af8c:	1fe00fff 	.word	0x1fe00fff

0800af90 <HAL_SD_WriteBlocks_DMA>:
{
 800af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af94:	4604      	mov	r4, r0
 800af96:	b086      	sub	sp, #24
  if(NULL == pData)
 800af98:	2900      	cmp	r1, #0
 800af9a:	d056      	beq.n	800b04a <HAL_SD_WriteBlocks_DMA+0xba>
  if(hsd->State == HAL_SD_STATE_READY)
 800af9c:	461f      	mov	r7, r3
 800af9e:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d13e      	bne.n	800b024 <HAL_SD_WriteBlocks_DMA+0x94>
 800afa6:	4616      	mov	r6, r2
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800afa8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800afaa:	460d      	mov	r5, r1
 800afac:	19f1      	adds	r1, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800afae:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800afb0:	4291      	cmp	r1, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800afb2:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800afb4:	d83a      	bhi.n	800b02c <HAL_SD_WriteBlocks_DMA+0x9c>
    hsd->Instance->DCTRL = 0U;
 800afb6:	6800      	ldr	r0, [r0, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800afb8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800afba:	2103      	movs	r1, #3
 800afbc:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800afc0:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800afc2:	027b      	lsls	r3, r7, #9
 800afc4:	6263      	str	r3, [r4, #36]	@ 0x24
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800afc6:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800afc8:	2300      	movs	r3, #0
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800afca:	2a01      	cmp	r2, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800afcc:	e9cd 3303 	strd	r3, r3, [sp, #12]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800afd0:	9305      	str	r3, [sp, #20]
    hsd->pTxBuffPtr = pData;
 800afd2:	6225      	str	r5, [r4, #32]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afd4:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800afd8:	f04f 0890 	mov.w	r8, #144	@ 0x90
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afdc:	4669      	mov	r1, sp
      add *= 512U;
 800afde:	bf18      	it	ne
 800afe0:	0276      	lslne	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afe2:	9300      	str	r3, [sp, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800afe4:	f8cd 8008 	str.w	r8, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afe8:	f002 f9e2 	bl	800d3b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	68c3      	ldr	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800aff0:	2201      	movs	r2, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800aff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
    if(NumberOfBlocks > 1U)
 800aff6:	4297      	cmp	r7, r2
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800aff8:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800affa:	6585      	str	r5, [r0, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800affc:	6502      	str	r2, [r0, #80]	@ 0x50
    if(NumberOfBlocks > 1U)
 800affe:	d929      	bls.n	800b054 <HAL_SD_WriteBlocks_DMA+0xc4>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b000:	23a0      	movs	r3, #160	@ 0xa0
 800b002:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b004:	4631      	mov	r1, r6
 800b006:	f002 fc81 	bl	800d90c <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b00a:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b00c:	b1b0      	cbz	r0, 800b03c <HAL_SD_WriteBlocks_DMA+0xac>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b00e:	4a14      	ldr	r2, [pc, #80]	@ (800b060 <HAL_SD_WriteBlocks_DMA+0xd0>)
 800b010:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b012:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b014:	2101      	movs	r1, #1
      hsd->ErrorCode |= errorstate;
 800b016:	4303      	orrs	r3, r0
      hsd->Context = SD_CONTEXT_NONE;
 800b018:	2200      	movs	r2, #0
      hsd->ErrorCode |= errorstate;
 800b01a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b01c:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b020:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 800b022:	e007      	b.n	800b034 <HAL_SD_WriteBlocks_DMA+0xa4>
    return HAL_BUSY;
 800b024:	2002      	movs	r0, #2
}
 800b026:	b006      	add	sp, #24
 800b028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b02c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b02e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b032:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800b034:	2001      	movs	r0, #1
}
 800b036:	b006      	add	sp, #24
 800b038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800b03c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b03e:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800b042:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b044:	b006      	add	sp, #24
 800b046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b04a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b04c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b050:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800b052:	e7ef      	b.n	800b034 <HAL_SD_WriteBlocks_DMA+0xa4>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b054:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b058:	4631      	mov	r1, r6
 800b05a:	f002 fbb1 	bl	800d7c0 <SDMMC_CmdWriteSingleBlock>
 800b05e:	e7d4      	b.n	800b00a <HAL_SD_WriteBlocks_DMA+0x7a>
 800b060:	1fe00fff 	.word	0x1fe00fff

0800b064 <HAL_SD_ErrorCallback>:
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop

0800b068 <HAL_SD_IRQHandler>:
{
 800b068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06c:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b06e:	6800      	ldr	r0, [r0, #0]
  uint32_t context = hsd->Context;
 800b070:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b072:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b074:	041b      	lsls	r3, r3, #16
{
 800b076:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b078:	d52e      	bpl.n	800b0d8 <HAL_SD_IRQHandler+0x70>
 800b07a:	072f      	lsls	r7, r5, #28
 800b07c:	f100 80ec 	bmi.w	800b258 <HAL_SD_IRQHandler+0x1f0>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b080:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b082:	05db      	lsls	r3, r3, #23
 800b084:	d57f      	bpl.n	800b186 <HAL_SD_IRQHandler+0x11e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b08a:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800b08c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b08e:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800b092:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800b096:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b098:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b09a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b09e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b0a0:	68c3      	ldr	r3, [r0, #12]
 800b0a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0a6:	60c3      	str	r3, [r0, #12]
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b0a8:	062b      	lsls	r3, r5, #24
 800b0aa:	d512      	bpl.n	800b0d2 <HAL_SD_IRQHandler+0x6a>
      hsd->Instance->DLEN = 0;
 800b0ac:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b0ae:	f015 0f22 	tst.w	r5, #34	@ 0x22
      hsd->Instance->DLEN = 0;
 800b0b2:	6283      	str	r3, [r0, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800b0b4:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b0b6:	6503      	str	r3, [r0, #80]	@ 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b0b8:	f040 8107 	bne.w	800b2ca <HAL_SD_IRQHandler+0x262>
      hsd->State = HAL_SD_STATE_READY;
 800b0bc:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b0be:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b0c0:	f015 0f30 	tst.w	r5, #48	@ 0x30
      hsd->State = HAL_SD_STATE_READY;
 800b0c4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b0c8:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b0ca:	f040 80fa 	bne.w	800b2c2 <HAL_SD_IRQHandler+0x25a>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b0ce:	07af      	lsls	r7, r5, #30
 800b0d0:	d126      	bne.n	800b120 <HAL_SD_IRQHandler+0xb8>
}
 800b0d2:	b002      	add	sp, #8
 800b0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b0d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b0da:	05de      	lsls	r6, r3, #23
 800b0dc:	d526      	bpl.n	800b12c <HAL_SD_IRQHandler+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b0de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0e2:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800b0e4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b0e6:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800b0ea:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800b0ee:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b0f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b0f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0f6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b0f8:	68c3      	ldr	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800b0fa:	0729      	lsls	r1, r5, #28
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b0fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b100:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800b102:	d5d1      	bpl.n	800b0a8 <HAL_SD_IRQHandler+0x40>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b104:	f015 0f22 	tst.w	r5, #34	@ 0x22
 800b108:	f040 80bf 	bne.w	800b28a <HAL_SD_IRQHandler+0x222>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b10c:	4b7a      	ldr	r3, [pc, #488]	@ (800b2f8 <HAL_SD_IRQHandler+0x290>)
 800b10e:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b110:	2201      	movs	r2, #1
 800b112:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b116:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b118:	07aa      	lsls	r2, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 800b11a:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b11c:	f000 80af 	beq.w	800b27e <HAL_SD_IRQHandler+0x216>
        HAL_SD_RxCpltCallback(hsd);
 800b120:	4620      	mov	r0, r4
 800b122:	f7fc f86f 	bl	8007204 <HAL_SD_RxCpltCallback>
}
 800b126:	b002      	add	sp, #8
 800b128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b12c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b12e:	045e      	lsls	r6, r3, #17
 800b130:	d52a      	bpl.n	800b188 <HAL_SD_IRQHandler+0x120>
 800b132:	0729      	lsls	r1, r5, #28
 800b134:	d528      	bpl.n	800b188 <HAL_SD_IRQHandler+0x120>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 800b136:	6a66      	ldr	r6, [r4, #36]	@ 0x24

  if (dataremaining > 0U)
 800b138:	2e00      	cmp	r6, #0
 800b13a:	d0ca      	beq.n	800b0d2 <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pTxBuffPtr;
 800b13c:	6a27      	ldr	r7, [r4, #32]
 800b13e:	f107 0804 	add.w	r8, r7, #4
 800b142:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 800b146:	e000      	b.n	800b14a <HAL_SD_IRQHandler+0xe2>
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b148:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800b14a:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 800b14e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800b150:	f818 2c03 	ldrb.w	r2, [r8, #-3]
 800b154:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b158:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800b15a:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 800b15e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b162:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800b164:	f818 2c01 	ldrb.w	r2, [r8, #-1]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b168:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 800b16a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    for(count = 0U; count < 8U; count++)
 800b16e:	f108 0804 	add.w	r8, r8, #4
      data |= ((uint32_t)(*tmp) << 24U);
 800b172:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b174:	f002 f902 	bl	800d37c <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b178:	45a8      	cmp	r8, r5
 800b17a:	d1e5      	bne.n	800b148 <HAL_SD_IRQHandler+0xe0>
      tmp++;
 800b17c:	3720      	adds	r7, #32
      dataremaining--;
 800b17e:	3e20      	subs	r6, #32
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
 800b180:	e9c4 7608 	strd	r7, r6, [r4, #32]
  }
}
 800b184:	e7a5      	b.n	800b0d2 <HAL_SD_IRQHandler+0x6a>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b186:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b188:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b18a:	f013 0f3a 	tst.w	r3, #58	@ 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b18e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b190:	d04f      	beq.n	800b232 <HAL_SD_IRQHandler+0x1ca>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b192:	079a      	lsls	r2, r3, #30
 800b194:	d503      	bpl.n	800b19e <HAL_SD_IRQHandler+0x136>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b196:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b198:	f043 0302 	orr.w	r3, r3, #2
 800b19c:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b19e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b1a0:	071b      	lsls	r3, r3, #28
 800b1a2:	d503      	bpl.n	800b1ac <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b1a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b1a6:	f043 0308 	orr.w	r3, r3, #8
 800b1aa:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b1ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b1ae:	069f      	lsls	r7, r3, #26
 800b1b0:	d503      	bpl.n	800b1ba <HAL_SD_IRQHandler+0x152>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b1b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b1b4:	f043 0320 	orr.w	r3, r3, #32
 800b1b8:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b1ba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b1bc:	06de      	lsls	r6, r3, #27
 800b1be:	d503      	bpl.n	800b1c8 <HAL_SD_IRQHandler+0x160>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b1c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b1c2:	f043 0310 	orr.w	r3, r3, #16
 800b1c6:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b1c8:	4b4b      	ldr	r3, [pc, #300]	@ (800b2f8 <HAL_SD_IRQHandler+0x290>)
 800b1ca:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b1cc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b1ce:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 800b1d2:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b1d4:	68c3      	ldr	r3, [r0, #12]
 800b1d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1da:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800b1dc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800b1de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b1e2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800b1e4:	68c3      	ldr	r3, [r0, #12]
 800b1e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ea:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b1ec:	f002 fc34 	bl	800da58 <SDMMC_CmdStopTransfer>
 800b1f0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b1f2:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b1f4:	4302      	orrs	r2, r0
 800b1f6:	63a2      	str	r2, [r4, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b1fe:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b200:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    if((context & SD_CONTEXT_IT) != 0U)
 800b204:	f015 0208 	ands.w	r2, r5, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b208:	6399      	str	r1, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b20a:	d144      	bne.n	800b296 <HAL_SD_IRQHandler+0x22e>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b20c:	0628      	lsls	r0, r5, #24
 800b20e:	f57f af60 	bpl.w	800b0d2 <HAL_SD_IRQHandler+0x6a>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b212:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b214:	2900      	cmp	r1, #0
 800b216:	f43f af5c 	beq.w	800b0d2 <HAL_SD_IRQHandler+0x6a>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b21a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
        hsd->State = HAL_SD_STATE_READY;
 800b21c:	2501      	movs	r5, #1
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b21e:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 800b222:	63d9      	str	r1, [r3, #60]	@ 0x3c
        HAL_SD_ErrorCallback(hsd);
 800b224:	4620      	mov	r0, r4
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b226:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b228:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
        HAL_SD_ErrorCallback(hsd);
 800b22c:	f7ff ff1a 	bl	800b064 <HAL_SD_ErrorCallback>
 800b230:	e74f      	b.n	800b0d2 <HAL_SD_IRQHandler+0x6a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b232:	00d9      	lsls	r1, r3, #3
 800b234:	f57f af4d 	bpl.w	800b0d2 <HAL_SD_IRQHandler+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b238:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b23c:	6383      	str	r3, [r0, #56]	@ 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b23e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800b240:	075a      	lsls	r2, r3, #29
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b242:	f005 0520 	and.w	r5, r5, #32
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800b246:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b248:	d42e      	bmi.n	800b2a8 <HAL_SD_IRQHandler+0x240>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b24a:	2d00      	cmp	r5, #0
 800b24c:	d04f      	beq.n	800b2ee <HAL_SD_IRQHandler+0x286>
}
 800b24e:	b002      	add	sp, #8
 800b250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800b254:	f000 bcbe 	b.w	800bbd4 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
  tmp = hsd->pRxBuffPtr;
 800b258:	e9d4 570a 	ldrd	r5, r7, [r4, #40]	@ 0x28
  if (dataremaining > 0U)
 800b25c:	2f00      	cmp	r7, #0
 800b25e:	f43f af38 	beq.w	800b0d2 <HAL_SD_IRQHandler+0x6a>
 800b262:	f105 0620 	add.w	r6, r5, #32
 800b266:	e000      	b.n	800b26a <HAL_SD_IRQHandler+0x202>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b268:	6820      	ldr	r0, [r4, #0]
 800b26a:	f002 f883 	bl	800d374 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800b26e:	f845 0b04 	str.w	r0, [r5], #4
    for(count = 0U; count < 8U; count++)
 800b272:	42ae      	cmp	r6, r5
 800b274:	d1f8      	bne.n	800b268 <HAL_SD_IRQHandler+0x200>
      dataremaining--;
 800b276:	3f20      	subs	r7, #32
    hsd->RxXferSize = dataremaining;
 800b278:	e9c4 670a 	strd	r6, r7, [r4, #40]	@ 0x28
 800b27c:	e729      	b.n	800b0d2 <HAL_SD_IRQHandler+0x6a>
        HAL_SD_TxCpltCallback(hsd);
 800b27e:	4620      	mov	r0, r4
 800b280:	f7fb ffbc 	bl	80071fc <HAL_SD_TxCpltCallback>
}
 800b284:	b002      	add	sp, #8
 800b286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b28a:	f002 fbe5 	bl	800da58 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b28e:	4603      	mov	r3, r0
 800b290:	b980      	cbnz	r0, 800b2b4 <HAL_SD_IRQHandler+0x24c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b292:	6820      	ldr	r0, [r4, #0]
 800b294:	e73a      	b.n	800b10c <HAL_SD_IRQHandler+0xa4>
      hsd->State = HAL_SD_STATE_READY;
 800b296:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b298:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800b29a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      HAL_SD_ErrorCallback(hsd);
 800b29e:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 800b2a0:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800b2a2:	f7ff fedf 	bl	800b064 <HAL_SD_ErrorCallback>
 800b2a6:	e714      	b.n	800b0d2 <HAL_SD_IRQHandler+0x6a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b2a8:	b1e5      	cbz	r5, 800b2e4 <HAL_SD_IRQHandler+0x27c>
}
 800b2aa:	b002      	add	sp, #8
 800b2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800b2b0:	f000 bc8e 	b.w	800bbd0 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
          hsd->ErrorCode |= errorstate;
 800b2b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b2b6:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 800b2b8:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800b2ba:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800b2bc:	f7ff fed2 	bl	800b064 <HAL_SD_ErrorCallback>
 800b2c0:	e7e7      	b.n	800b292 <HAL_SD_IRQHandler+0x22a>
        HAL_SD_TxCpltCallback(hsd);
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7fb ff9a 	bl	80071fc <HAL_SD_TxCpltCallback>
 800b2c8:	e701      	b.n	800b0ce <HAL_SD_IRQHandler+0x66>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b2ca:	f002 fbc5 	bl	800da58 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	f43f aef3 	beq.w	800b0bc <HAL_SD_IRQHandler+0x54>
          hsd->ErrorCode |= errorstate;
 800b2d6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b2d8:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 800b2da:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800b2dc:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800b2de:	f7ff fec1 	bl	800b064 <HAL_SD_ErrorCallback>
 800b2e2:	e6eb      	b.n	800b0bc <HAL_SD_IRQHandler+0x54>
}
 800b2e4:	b002      	add	sp, #8
 800b2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800b2ea:	f000 bc6d 	b.w	800bbc8 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800b2ee:	b002      	add	sp, #8
 800b2f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800b2f4:	f000 bc6a 	b.w	800bbcc <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 800b2f8:	18000f3a 	.word	0x18000f3a

0800b2fc <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b2fc:	6e02      	ldr	r2, [r0, #96]	@ 0x60
{
 800b2fe:	b410      	push	{r4}
 800b300:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b302:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b304:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b308:	700c      	strb	r4, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b30a:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b30c:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b310:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b314:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b316:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b318:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b31c:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b31e:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b320:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b322:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b324:	0d14      	lsrs	r4, r2, #20
 800b326:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b328:	f3c2 4403 	ubfx	r4, r2, #16, #4
 800b32c:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b32e:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 800b332:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b334:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800b338:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b33a:	f3c2 3440 	ubfx	r4, r2, #13, #1
 800b33e:	72cc      	strb	r4, [r1, #11]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b340:	2000      	movs	r0, #0
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b342:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800b346:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b348:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800b34a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d16f      	bne.n	800b430 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b350:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b352:	f640 74fc 	movw	r4, #4092	@ 0xffc
 800b356:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 800b35a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b35e:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b362:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b364:	750c      	strb	r4, [r1, #20]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b366:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b36a:	f3c0 6402 	ubfx	r4, r0, #24, #3
 800b36e:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b370:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b372:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b376:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b37a:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b37c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b37e:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b380:	7e0a      	ldrb	r2, [r1, #24]
 800b382:	f002 0207 	and.w	r2, r2, #7
 800b386:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b388:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b38a:	4094      	lsls	r4, r2
 800b38c:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b38e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b392:	2201      	movs	r2, #1
 800b394:	f00c 0c0f 	and.w	ip, ip, #15
 800b398:	fa02 f20c 	lsl.w	r2, r2, ip
 800b39c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b39e:	0a52      	lsrs	r2, r2, #9
 800b3a0:	fb04 f202 	mul.w	r2, r4, r2
 800b3a4:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b3a6:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800b3aa:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b3ae:	659c      	str	r4, [r3, #88]	@ 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b3b0:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b3b2:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b3b6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b3ba:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b3bc:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b3be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3c0:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b3c2:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b3c6:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b3c8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b3ca:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b3ce:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b3d2:	778c      	strb	r4, [r1, #30]
  pCSD->Reserved3 = 0;
 800b3d4:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b3d6:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b3d8:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b3dc:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b3e0:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->Reserved3 = 0;
 800b3e4:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b3e8:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b3ec:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b3f0:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b3f4:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b3f8:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b3fc:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b400:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b404:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b408:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b40c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b410:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b414:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b418:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b41c:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 800b420:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b422:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800b426:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 800b42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b42e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b430:	2801      	cmp	r0, #1
 800b432:	d10f      	bne.n	800b454 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b434:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b436:	0412      	lsls	r2, r2, #16
 800b438:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800b43c:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800b440:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b442:	690a      	ldr	r2, [r1, #16]
 800b444:	3201      	adds	r2, #1
 800b446:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 800b448:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b44c:	e9c3 4214 	strd	r4, r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b450:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b452:	e7a8      	b.n	800b3a6 <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	4906      	ldr	r1, [pc, #24]	@ (800b470 <HAL_SD_GetCardCSD+0x174>)
 800b458:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b45a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b45c:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b45e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b462:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b464:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b468:	4608      	mov	r0, r1
}
 800b46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	1fe00fff 	.word	0x1fe00fff

0800b474 <HAL_SD_InitCard>:
{
 800b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b478:	2200      	movs	r2, #0
{
 800b47a:	b098      	sub	sp, #96	@ 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b47c:	2300      	movs	r3, #0
{
 800b47e:	4604      	mov	r4, r0
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b480:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b484:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b488:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b48c:	f7ff f99a 	bl	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800b490:	2800      	cmp	r0, #0
 800b492:	d070      	beq.n	800b576 <HAL_SD_InitCard+0x102>
  Init.Transceiver = hsd->Init.Transceiver;
 800b494:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b496:	4aa6      	ldr	r2, [pc, #664]	@ (800b730 <HAL_SD_InitCard+0x2bc>)
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b498:	6827      	ldr	r7, [r4, #0]
  Init.Transceiver = hsd->Init.Transceiver;
 800b49a:	930b      	str	r3, [sp, #44]	@ 0x2c
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b49c:	0a06      	lsrs	r6, r0, #8
 800b49e:	fba2 2606 	umull	r2, r6, r2, r6
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b4a6:	ea4f 1616 	mov.w	r6, r6, lsr #4
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b4aa:	d05f      	beq.n	800b56c <HAL_SD_InitCard+0xf8>
  status = SDMMC_Init(hsd->Instance, Init);
 800b4ac:	960a      	str	r6, [sp, #40]	@ 0x28
 800b4ae:	aa09      	add	r2, sp, #36	@ 0x24
 800b4b0:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b4b6:	ab06      	add	r3, sp, #24
 800b4b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	f001 ff3e 	bl	800d33c <SDMMC_Init>
  if(status != HAL_OK)
 800b4c0:	b120      	cbz	r0, 800b4cc <HAL_SD_InitCard+0x58>
      return HAL_ERROR;
 800b4c2:	2501      	movs	r5, #1
}
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	b018      	add	sp, #96	@ 0x60
 800b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = SDMMC_PowerState_ON(hsd->Instance);
 800b4cc:	6820      	ldr	r0, [r4, #0]
 800b4ce:	f001 ff5b 	bl	800d388 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800b4d2:	4607      	mov	r7, r0
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d1f4      	bne.n	800b4c2 <HAL_SD_InitCard+0x4e>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b4d8:	0076      	lsls	r6, r6, #1
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b4da:	4896      	ldr	r0, [pc, #600]	@ (800b734 <HAL_SD_InitCard+0x2c0>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b4dc:	fbb5 f5f6 	udiv	r5, r5, r6
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b4e0:	fbb0 f0f5 	udiv	r0, r0, r5
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	f7fb ff01 	bl	80072ec <HAL_Delay>
  __IO uint32_t count = 0U;
 800b4ea:	9705      	str	r7, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 800b4ec:	f7fb fef8 	bl	80072e0 <HAL_GetTick>
 800b4f0:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b4f2:	6820      	ldr	r0, [r4, #0]
 800b4f4:	f002 fc0a 	bl	800dd0c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	bb80      	cbnz	r0, 800b55e <HAL_SD_InitCard+0xea>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	f002 fc31 	bl	800dd64 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b502:	2800      	cmp	r0, #0
 800b504:	f040 80d2 	bne.w	800b6ac <HAL_SD_InitCard+0x238>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b508:	2301      	movs	r3, #1
 800b50a:	6423      	str	r3, [r4, #64]	@ 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b50c:	6820      	ldr	r0, [r4, #0]
 800b50e:	2100      	movs	r1, #0
 800b510:	f002 fc6a 	bl	800dde8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b514:	2800      	cmp	r0, #0
 800b516:	d135      	bne.n	800b584 <HAL_SD_InitCard+0x110>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b518:	9b05      	ldr	r3, [sp, #20]
 800b51a:	f64f 77fe 	movw	r7, #65534	@ 0xfffe
 800b51e:	42bb      	cmp	r3, r7
 800b520:	f200 80d1 	bhi.w	800b6c6 <HAL_SD_InitCard+0x252>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b524:	f8df 8214 	ldr.w	r8, [pc, #532]	@ 800b73c <HAL_SD_InitCard+0x2c8>
 800b528:	e011      	b.n	800b54e <HAL_SD_InitCard+0xda>
 800b52a:	6820      	ldr	r0, [r4, #0]
 800b52c:	f002 fd02 	bl	800df34 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b530:	4601      	mov	r1, r0
 800b532:	bb38      	cbnz	r0, 800b584 <HAL_SD_InitCard+0x110>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b534:	6820      	ldr	r0, [r4, #0]
 800b536:	f001 ff37 	bl	800d3a8 <SDMMC_GetResponse>
    count++;
 800b53a:	9a05      	ldr	r2, [sp, #20]
 800b53c:	3201      	adds	r2, #1
 800b53e:	9205      	str	r2, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b540:	9a05      	ldr	r2, [sp, #20]
 800b542:	42ba      	cmp	r2, r7
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b544:	4603      	mov	r3, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b546:	ea4f 71d0 	mov.w	r1, r0, lsr #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b54a:	d81e      	bhi.n	800b58a <HAL_SD_InitCard+0x116>
 800b54c:	b9e9      	cbnz	r1, 800b58a <HAL_SD_InitCard+0x116>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b54e:	2100      	movs	r1, #0
 800b550:	6820      	ldr	r0, [r4, #0]
 800b552:	f002 fc49 	bl	800dde8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b556:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 800b558:	4605      	mov	r5, r0
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d0e5      	beq.n	800b52a <HAL_SD_InitCard+0xb6>
    hsd->State = HAL_SD_STATE_READY;
 800b55e:	2301      	movs	r3, #1
 800b560:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b564:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b566:	432b      	orrs	r3, r5
 800b568:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800b56a:	e7aa      	b.n	800b4c2 <HAL_SD_InitCard+0x4e>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	f043 0310 	orr.w	r3, r3, #16
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	e79a      	b.n	800b4ac <HAL_SD_InitCard+0x38>
      hsd->State = HAL_SD_STATE_READY;
 800b576:	2201      	movs	r2, #1
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b578:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
      hsd->State = HAL_SD_STATE_READY;
 800b57c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b580:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 800b582:	e79e      	b.n	800b4c2 <HAL_SD_InitCard+0x4e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b584:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800b588:	e7e9      	b.n	800b55e <HAL_SD_InitCard+0xea>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b58a:	9905      	ldr	r1, [sp, #20]
 800b58c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b590:	4291      	cmp	r1, r2
 800b592:	f200 80a2 	bhi.w	800b6da <HAL_SD_InitCard+0x266>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b596:	005f      	lsls	r7, r3, #1
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b598:	6820      	ldr	r0, [r4, #0]
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b59a:	f140 8098 	bpl.w	800b6ce <HAL_SD_InitCard+0x25a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b59e:	2201      	movs	r2, #1
 800b5a0:	63e2      	str	r2, [r4, #60]	@ 0x3c
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b5a2:	69a2      	ldr	r2, [r4, #24]
 800b5a4:	2a01      	cmp	r2, #1
 800b5a6:	f000 809b 	beq.w	800b6e0 <HAL_SD_InitCard+0x26c>
  uint16_t sd_rca = 1U;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b5b0:	f001 fef6 	bl	800d3a0 <SDMMC_GetPowerState>
 800b5b4:	b340      	cbz	r0, 800b608 <HAL_SD_InitCard+0x194>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b5b8:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d12d      	bne.n	800b61a <HAL_SD_InitCard+0x1a6>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b5be:	2104      	movs	r1, #4
 800b5c0:	f001 fef2 	bl	800d3a8 <SDMMC_GetResponse>
 800b5c4:	0d00      	lsrs	r0, r0, #20
 800b5c6:	6460      	str	r0, [r4, #68]	@ 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b5c8:	a90d      	add	r1, sp, #52	@ 0x34
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7ff fe96 	bl	800b2fc <HAL_SD_GetCardCSD>
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d17e      	bne.n	800b6d4 <HAL_SD_InitCard+0x260>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b5d6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b5d8:	6820      	ldr	r0, [r4, #0]
 800b5da:	0412      	lsls	r2, r2, #16
 800b5dc:	462b      	mov	r3, r5
 800b5de:	f002 faef 	bl	800dbc0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5e2:	b998      	cbnz	r0, 800b60c <HAL_SD_InitCard+0x198>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b5ea:	f001 fef7 	bl	800d3dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	f43f af68 	beq.w	800b4c4 <HAL_SD_InitCard+0x50>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	4a50      	ldr	r2, [pc, #320]	@ (800b738 <HAL_SD_InitCard+0x2c4>)
 800b5f8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b5fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b5fc:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 800b5fe:	4303      	orrs	r3, r0
 800b600:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b602:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b606:	e75c      	b.n	800b4c2 <HAL_SD_InitCard+0x4e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b608:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b612:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b614:	4303      	orrs	r3, r0
 800b616:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800b618:	e753      	b.n	800b4c2 <HAL_SD_InitCard+0x4e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b61a:	f002 fe13 	bl	800e244 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b61e:	2800      	cmp	r0, #0
 800b620:	d1f4      	bne.n	800b60c <HAL_SD_InitCard+0x198>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b622:	4601      	mov	r1, r0
 800b624:	6820      	ldr	r0, [r4, #0]
 800b626:	f001 febf 	bl	800d3a8 <SDMMC_GetResponse>
 800b62a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b62c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b62e:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b630:	6820      	ldr	r0, [r4, #0]
 800b632:	f001 feb9 	bl	800d3a8 <SDMMC_GetResponse>
 800b636:	4603      	mov	r3, r0
 800b638:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b63a:	2108      	movs	r1, #8
 800b63c:	6820      	ldr	r0, [r4, #0]
 800b63e:	f001 feb3 	bl	800d3a8 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b642:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b644:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b646:	6820      	ldr	r0, [r4, #0]
 800b648:	f001 feae 	bl	800d3a8 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b64c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b64e:	67e0      	str	r0, [r4, #124]	@ 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b650:	2b03      	cmp	r3, #3
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b652:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b654:	d0b3      	beq.n	800b5be <HAL_SD_InitCard+0x14a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b656:	f10d 0112 	add.w	r1, sp, #18
 800b65a:	f002 fe73 	bl	800e344 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b65e:	2800      	cmp	r0, #0
 800b660:	d1d4      	bne.n	800b60c <HAL_SD_InitCard+0x198>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b662:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b664:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b666:	2b03      	cmp	r3, #3
 800b668:	d0a9      	beq.n	800b5be <HAL_SD_InitCard+0x14a>
    hsd->SdCard.RelCardAdd = sd_rca;
 800b66a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800b66e:	64a1      	str	r1, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b670:	0409      	lsls	r1, r1, #16
 800b672:	f002 fe27 	bl	800e2c4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b676:	2800      	cmp	r0, #0
 800b678:	d1c8      	bne.n	800b60c <HAL_SD_InitCard+0x198>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b67a:	4601      	mov	r1, r0
 800b67c:	6820      	ldr	r0, [r4, #0]
 800b67e:	f001 fe93 	bl	800d3a8 <SDMMC_GetResponse>
 800b682:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b684:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b686:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b688:	6820      	ldr	r0, [r4, #0]
 800b68a:	f001 fe8d 	bl	800d3a8 <SDMMC_GetResponse>
 800b68e:	4603      	mov	r3, r0
 800b690:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b692:	2108      	movs	r1, #8
 800b694:	6820      	ldr	r0, [r4, #0]
 800b696:	f001 fe87 	bl	800d3a8 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b69a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b69c:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	f001 fe82 	bl	800d3a8 <SDMMC_GetResponse>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800b6a8:	6820      	ldr	r0, [r4, #0]
 800b6aa:	e788      	b.n	800b5be <HAL_SD_InitCard+0x14a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b6ac:	6425      	str	r5, [r4, #64]	@ 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b6ae:	6820      	ldr	r0, [r4, #0]
 800b6b0:	f002 fb2c 	bl	800dd0c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	f47f af51 	bne.w	800b55e <HAL_SD_InitCard+0xea>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b6bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	f47f af2a 	bne.w	800b518 <HAL_SD_InitCard+0xa4>
 800b6c4:	e722      	b.n	800b50c <HAL_SD_InitCard+0x98>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b6c6:	9b05      	ldr	r3, [sp, #20]
 800b6c8:	42bb      	cmp	r3, r7
 800b6ca:	d806      	bhi.n	800b6da <HAL_SD_InitCard+0x266>
 800b6cc:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardType = CARD_SDSC;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6d2:	e76a      	b.n	800b5aa <HAL_SD_InitCard+0x136>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6d4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800b6d8:	e798      	b.n	800b60c <HAL_SD_InitCard+0x198>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b6da:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800b6de:	e73e      	b.n	800b55e <HAL_SD_InitCard+0xea>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b6e0:	01dd      	lsls	r5, r3, #7
 800b6e2:	f57f af62 	bpl.w	800b5aa <HAL_SD_InitCard+0x136>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b6e6:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b6e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b6ec:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b6f0:	65e2      	str	r2, [r4, #92]	@ 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b6f2:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b6f4:	f002 ffcc 	bl	800e690 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b6f8:	4605      	mov	r5, r0
 800b6fa:	b128      	cbz	r0, 800b708 <HAL_SD_InitCard+0x294>
 800b6fc:	e72f      	b.n	800b55e <HAL_SD_InitCard+0xea>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6fe:	f7fb fdef 	bl	80072e0 <HAL_GetTick>
 800b702:	1b83      	subs	r3, r0, r6
 800b704:	3301      	adds	r3, #1
 800b706:	d030      	beq.n	800b76a <HAL_SD_InitCard+0x2f6>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b70c:	0150      	lsls	r0, r2, #5
 800b70e:	d5f6      	bpl.n	800b6fe <HAL_SD_InitCard+0x28a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800b710:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800b714:	639a      	str	r2, [r3, #56]	@ 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800b716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b718:	02d9      	lsls	r1, r3, #11
 800b71a:	f57f af33 	bpl.w	800b584 <HAL_SD_InitCard+0x110>
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800b71e:	2001      	movs	r0, #1
 800b720:	f000 fa50 	bl	800bbc4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800b724:	6820      	ldr	r0, [r4, #0]
 800b726:	6803      	ldr	r3, [r0, #0]
 800b728:	f043 0304 	orr.w	r3, r3, #4
 800b72c:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b72e:	e00d      	b.n	800b74c <HAL_SD_InitCard+0x2d8>
 800b730:	014f8b59 	.word	0x014f8b59
 800b734:	00012110 	.word	0x00012110
 800b738:	1fe00fff 	.word	0x1fe00fff
 800b73c:	c1100000 	.word	0xc1100000
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b740:	f7fb fdce 	bl	80072e0 <HAL_GetTick>
 800b744:	1b83      	subs	r3, r0, r6
 800b746:	3301      	adds	r3, #1
 800b748:	d00f      	beq.n	800b76a <HAL_SD_InitCard+0x2f6>
 800b74a:	6820      	ldr	r0, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b74c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b74e:	019a      	lsls	r2, r3, #6
 800b750:	d5f6      	bpl.n	800b740 <HAL_SD_InitCard+0x2cc>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800b752:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b756:	6383      	str	r3, [r0, #56]	@ 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800b758:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b75a:	02db      	lsls	r3, r3, #11
 800b75c:	d4bd      	bmi.n	800b6da <HAL_SD_InitCard+0x266>
          hsd->Instance->POWER = 0x13U;
 800b75e:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b760:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 800b764:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b766:	6383      	str	r3, [r0, #56]	@ 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 800b768:	e71f      	b.n	800b5aa <HAL_SD_InitCard+0x136>
            return HAL_SD_ERROR_TIMEOUT;
 800b76a:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 800b76e:	e6f6      	b.n	800b55e <HAL_SD_InitCard+0xea>

0800b770 <HAL_SD_GetCardStatus>:
{
 800b770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b774:	b097      	sub	sp, #92	@ 0x5c
 800b776:	4604      	mov	r4, r0
 800b778:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800b77a:	f7fb fdb1 	bl	80072e0 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b77e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800b780:	4607      	mov	r7, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b782:	6820      	ldr	r0, [r4, #0]
 800b784:	f001 fe10 	bl	800d3a8 <SDMMC_GetResponse>
 800b788:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b78c:	6820      	ldr	r0, [r4, #0]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b78e:	d15a      	bne.n	800b846 <HAL_SD_GetCardStatus+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b790:	2140      	movs	r1, #64	@ 0x40
 800b792:	f001 fe23 	bl	800d3dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b796:	4603      	mov	r3, r0
 800b798:	b1e0      	cbz	r0, 800b7d4 <HAL_SD_GetCardStatus+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b79a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b79c:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b79e:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7a0:	4a59      	ldr	r2, [pc, #356]	@ (800b908 <HAL_SD_GetCardStatus+0x198>)
 800b7a2:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b7a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b7a6:	2101      	movs	r1, #1
    hsd->ErrorCode |= errorstate;
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800b7ac:	460e      	mov	r6, r1
    hsd->State = HAL_SD_STATE_READY;
 800b7ae:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b7b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b7b6:	f001 fe11 	bl	800d3dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7ba:	b138      	cbz	r0, 800b7cc <HAL_SD_GetCardStatus+0x5c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7bc:	6822      	ldr	r2, [r4, #0]
 800b7be:	4952      	ldr	r1, [pc, #328]	@ (800b908 <HAL_SD_GetCardStatus+0x198>)
 800b7c0:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b7c2:	2301      	movs	r3, #1
    hsd->ErrorCode = errorstate;
 800b7c4:	63a0      	str	r0, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800b7c6:	461e      	mov	r6, r3
    hsd->State = HAL_SD_STATE_READY;
 800b7c8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	b017      	add	sp, #92	@ 0x5c
 800b7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7d4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b7d6:	6820      	ldr	r0, [r4, #0]
 800b7d8:	0409      	lsls	r1, r1, #16
 800b7da:	f002 fb05 	bl	800dde8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d1da      	bne.n	800b79a <HAL_SD_GetCardStatus+0x2a>
  config.DataLength    = 64U;
 800b7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e8:	2340      	movs	r3, #64	@ 0x40
 800b7ea:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b7ee:	2260      	movs	r2, #96	@ 0x60
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b7f6:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	2200      	movs	r2, #0
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b7fc:	6820      	ldr	r0, [r4, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b7fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b802:	f001 fdd5 	bl	800d3b0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b806:	6820      	ldr	r0, [r4, #0]
 800b808:	f002 fe9a 	bl	800e540 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b80c:	4603      	mov	r3, r0
 800b80e:	2800      	cmp	r0, #0
 800b810:	d1c3      	bne.n	800b79a <HAL_SD_GetCardStatus+0x2a>
  uint32_t *pData = pSDstatus;
 800b812:	ae06      	add	r6, sp, #24
 800b814:	e004      	b.n	800b820 <HAL_SD_GetCardStatus+0xb0>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b816:	f7fb fd63 	bl	80072e0 <HAL_GetTick>
 800b81a:	1bc0      	subs	r0, r0, r7
 800b81c:	3001      	adds	r0, #1
 800b81e:	d015      	beq.n	800b84c <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b820:	6820      	ldr	r0, [r4, #0]
 800b822:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b824:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b828:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b82a:	d113      	bne.n	800b854 <HAL_SD_GetCardStatus+0xe4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b82c:	041b      	lsls	r3, r3, #16
 800b82e:	d5f2      	bpl.n	800b816 <HAL_SD_GetCardStatus+0xa6>
 800b830:	f106 0820 	add.w	r8, r6, #32
 800b834:	e000      	b.n	800b838 <HAL_SD_GetCardStatus+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b836:	6820      	ldr	r0, [r4, #0]
 800b838:	f001 fd9c 	bl	800d374 <SDMMC_ReadFIFO>
 800b83c:	f846 0b04 	str.w	r0, [r6], #4
      for(count = 0U; count < 8U; count++)
 800b840:	4546      	cmp	r6, r8
 800b842:	d1f8      	bne.n	800b836 <HAL_SD_GetCardStatus+0xc6>
 800b844:	e7e7      	b.n	800b816 <HAL_SD_GetCardStatus+0xa6>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b846:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b84a:	e7a9      	b.n	800b7a0 <HAL_SD_GetCardStatus+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b84c:	6820      	ldr	r0, [r4, #0]
 800b84e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b852:	e7a5      	b.n	800b7a0 <HAL_SD_GetCardStatus+0x30>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b854:	0719      	lsls	r1, r3, #28
 800b856:	d450      	bmi.n	800b8fa <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b858:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b85a:	079a      	lsls	r2, r3, #30
 800b85c:	d44f      	bmi.n	800b8fe <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b85e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b860:	069b      	lsls	r3, r3, #26
 800b862:	d50a      	bpl.n	800b87a <HAL_SD_GetCardStatus+0x10a>
 800b864:	e04d      	b.n	800b902 <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b866:	f001 fd85 	bl	800d374 <SDMMC_ReadFIFO>
 800b86a:	f846 0b04 	str.w	r0, [r6], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b86e:	f7fb fd37 	bl	80072e0 <HAL_GetTick>
 800b872:	1bc0      	subs	r0, r0, r7
 800b874:	3001      	adds	r0, #1
 800b876:	d0e9      	beq.n	800b84c <HAL_SD_GetCardStatus+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b878:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b87a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b87c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800b880:	d1f1      	bne.n	800b866 <HAL_SD_GetCardStatus+0xf6>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b882:	9906      	ldr	r1, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b884:	4a21      	ldr	r2, [pc, #132]	@ (800b90c <HAL_SD_GetCardStatus+0x19c>)
 800b886:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b888:	0a0a      	lsrs	r2, r1, #8
  HAL_StatusTypeDef status = HAL_OK;
 800b88a:	461e      	mov	r6, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b88c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b890:	e9dd c308 	ldrd	ip, r3, [sp, #32]
 800b894:	9f07      	ldr	r7, [sp, #28]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b896:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 800b89a:	b292      	uxth	r2, r2
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b89c:	f3c1 1981 	ubfx	r9, r1, #6, #2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b8a0:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b8a4:	f885 9000 	strb.w	r9, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b8a8:	fa97 f887 	rev.w	r8, r7
 800b8ac:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b8ae:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b8b0:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b8b4:	f8c5 8004 	str.w	r8, [r5, #4]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b8b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b8bc:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b8be:	f3cc 2207 	ubfx	r2, ip, #8, #8
 800b8c2:	726a      	strb	r2, [r5, #9]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b8c4:	fa5f fe83 	uxtb.w	lr, r3
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b8c8:	f3cc 5203 	ubfx	r2, ip, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b8cc:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b8d0:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b8d2:	ea47 070e 	orr.w	r7, r7, lr
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b8d6:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b8da:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b8dc:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b8de:	f3c3 2201 	ubfx	r2, r3, #8, #2
 800b8e2:	73ea      	strb	r2, [r5, #15]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b8e4:	f89d e02b 	ldrb.w	lr, [sp, #43]	@ 0x2b
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b8e8:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b8ec:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b8f0:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b8f2:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b8f4:	f885 e012 	strb.w	lr, [r5, #18]
 800b8f8:	e75b      	b.n	800b7b2 <HAL_SD_GetCardStatus+0x42>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b8fa:	2308      	movs	r3, #8
 800b8fc:	e750      	b.n	800b7a0 <HAL_SD_GetCardStatus+0x30>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b8fe:	2302      	movs	r3, #2
 800b900:	e74e      	b.n	800b7a0 <HAL_SD_GetCardStatus+0x30>
    return HAL_SD_ERROR_RX_OVERRUN;
 800b902:	2320      	movs	r3, #32
 800b904:	e74c      	b.n	800b7a0 <HAL_SD_GetCardStatus+0x30>
 800b906:	bf00      	nop
 800b908:	1fe00fff 	.word	0x1fe00fff
 800b90c:	18000f3a 	.word	0x18000f3a

0800b910 <HAL_SD_GetCardInfo>:
{
 800b910:	b4f0      	push	{r4, r5, r6, r7}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b912:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	@ 0x3c
 800b916:	e9d0 6511 	ldrd	r6, r5, [r0, #68]	@ 0x44
 800b91a:	e9d0 4213 	ldrd	r4, r2, [r0, #76]	@ 0x4c
 800b91e:	e9d0 3015 	ldrd	r3, r0, [r0, #84]	@ 0x54
 800b922:	e9c1 c700 	strd	ip, r7, [r1]
 800b926:	e9c1 6502 	strd	r6, r5, [r1, #8]
 800b92a:	e9c1 4204 	strd	r4, r2, [r1, #16]
 800b92e:	61c8      	str	r0, [r1, #28]
}
 800b930:	bcf0      	pop	{r4, r5, r6, r7}
 800b932:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b934:	618b      	str	r3, [r1, #24]
}
 800b936:	4770      	bx	lr

0800b938 <HAL_SD_ConfigWideBusOperation>:
{
 800b938:	b530      	push	{r4, r5, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b93a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 800b93c:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b93e:	4293      	cmp	r3, r2
{
 800b940:	b08b      	sub	sp, #44	@ 0x2c
 800b942:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 800b944:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
{
 800b948:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b94a:	d044      	beq.n	800b9d6 <HAL_SD_ConfigWideBusOperation+0x9e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b94c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800b950:	d041      	beq.n	800b9d6 <HAL_SD_ConfigWideBusOperation+0x9e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b952:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800b956:	f000 8081 	beq.w	800ba5c <HAL_SD_ConfigWideBusOperation+0x124>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b95a:	2900      	cmp	r1, #0
 800b95c:	d05f      	beq.n	800ba1e <HAL_SD_ConfigWideBusOperation+0xe6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b95e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b960:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b964:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b966:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d13b      	bne.n	800b9e4 <HAL_SD_ConfigWideBusOperation+0xac>
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b96c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b970:	f7fe ff28 	bl	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800b974:	2800      	cmp	r0, #0
 800b976:	d04b      	beq.n	800ba10 <HAL_SD_ConfigWideBusOperation+0xd8>
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b978:	4b52      	ldr	r3, [pc, #328]	@ (800bac4 <HAL_SD_ConfigWideBusOperation+0x18c>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b97a:	6861      	ldr	r1, [r4, #4]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b97c:	6962      	ldr	r2, [r4, #20]
      Init.BusWide             = WideMode;
 800b97e:	9506      	str	r5, [sp, #24]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b980:	9104      	str	r1, [sp, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b982:	fba3 5300 	umull	r5, r3, r3, r0
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b986:	6921      	ldr	r1, [r4, #16]
 800b988:	9107      	str	r1, [sp, #28]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b98a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b98e:	68a1      	ldr	r1, [r4, #8]
 800b990:	9105      	str	r1, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b992:	ea4f 6513 	mov.w	r5, r3, lsr #24
 800b996:	d20e      	bcs.n	800b9b6 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b998:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800b99a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b99e:	d00a      	beq.n	800b9b6 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b9a0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b9a4:	d07c      	beq.n	800baa0 <HAL_SD_ConfigWideBusOperation+0x168>
        if (hsd->Init.ClockDiv == 0U)
 800b9a6:	b112      	cbz	r2, 800b9ae <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b9a8:	0053      	lsls	r3, r2, #1
 800b9aa:	fbb0 f0f3 	udiv	r0, r0, r3
 800b9ae:	4b46      	ldr	r3, [pc, #280]	@ (800bac8 <HAL_SD_ConfigWideBusOperation+0x190>)
 800b9b0:	4298      	cmp	r0, r3
 800b9b2:	bf88      	it	hi
 800b9b4:	462a      	movhi	r2, r5
      Init.Transceiver = hsd->Init.Transceiver;
 800b9b6:	69a3      	ldr	r3, [r4, #24]
 800b9b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
      (void)SDMMC_Init(hsd->Instance, Init);
 800b9bc:	ab0a      	add	r3, sp, #40	@ 0x28
 800b9be:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800b9c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b9c6:	ab04      	add	r3, sp, #16
 800b9c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b9ca:	6820      	ldr	r0, [r4, #0]
 800b9cc:	f001 fcb6 	bl	800d33c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800b9d0:	2500      	movs	r5, #0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b9d2:	6820      	ldr	r0, [r4, #0]
 800b9d4:	e00a      	b.n	800b9ec <HAL_SD_ConfigWideBusOperation+0xb4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b9d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b9dc:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b9de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0c3      	beq.n	800b96c <HAL_SD_ConfigWideBusOperation+0x34>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9e4:	6820      	ldr	r0, [r4, #0]
 800b9e6:	4b39      	ldr	r3, [pc, #228]	@ (800bacc <HAL_SD_ConfigWideBusOperation+0x194>)
 800b9e8:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800b9ea:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b9ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9f0:	f001 fcf4 	bl	800d3dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9f4:	b130      	cbz	r0, 800ba04 <HAL_SD_ConfigWideBusOperation+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	4a34      	ldr	r2, [pc, #208]	@ (800bacc <HAL_SD_ConfigWideBusOperation+0x194>)
 800b9fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b9fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b9fe:	4303      	orrs	r3, r0
    status = HAL_ERROR;
 800ba00:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 800ba02:	63a3      	str	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 800ba04:	2301      	movs	r3, #1
}
 800ba06:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800ba08:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800ba0c:	b00b      	add	sp, #44	@ 0x2c
 800ba0e:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ba10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      (void)SDMMC_Init(hsd->Instance, Init);
 800ba12:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ba14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ba18:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800ba1a:	2501      	movs	r5, #1
 800ba1c:	e7e6      	b.n	800b9ec <HAL_SD_ConfigWideBusOperation+0xb4>
  uint32_t scr[2U] = {0UL, 0UL};
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba22:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800ba24:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba28:	f001 fcbe 	bl	800d3a8 <SDMMC_GetResponse>
 800ba2c:	0182      	lsls	r2, r0, #6
 800ba2e:	d434      	bmi.n	800ba9a <HAL_SD_ConfigWideBusOperation+0x162>
  errorstate = SD_FindSCR(hsd, scr);
 800ba30:	a904      	add	r1, sp, #16
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7ff f9d6 	bl	800ade4 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba38:	b960      	cbnz	r0, 800ba54 <HAL_SD_ConfigWideBusOperation+0x11c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba3a:	9b05      	ldr	r3, [sp, #20]
 800ba3c:	03db      	lsls	r3, r3, #15
 800ba3e:	d535      	bpl.n	800baac <HAL_SD_ConfigWideBusOperation+0x174>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba40:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba42:	6820      	ldr	r0, [r4, #0]
 800ba44:	0409      	lsls	r1, r1, #16
 800ba46:	f002 f9cf 	bl	800dde8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba4a:	b918      	cbnz	r0, 800ba54 <HAL_SD_ConfigWideBusOperation+0x11c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ba4c:	4601      	mov	r1, r0
 800ba4e:	6820      	ldr	r0, [r4, #0]
 800ba50:	f002 faaa 	bl	800dfa8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800ba54:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ba56:	4303      	orrs	r3, r0
 800ba58:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ba5a:	e7c0      	b.n	800b9de <HAL_SD_ConfigWideBusOperation+0xa6>
  uint32_t scr[2U] = {0UL, 0UL};
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba60:	6800      	ldr	r0, [r0, #0]
 800ba62:	2100      	movs	r1, #0
  uint32_t scr[2U] = {0UL, 0UL};
 800ba64:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba68:	f001 fc9e 	bl	800d3a8 <SDMMC_GetResponse>
 800ba6c:	0180      	lsls	r0, r0, #6
 800ba6e:	d414      	bmi.n	800ba9a <HAL_SD_ConfigWideBusOperation+0x162>
  errorstate = SD_FindSCR(hsd, scr);
 800ba70:	a904      	add	r1, sp, #16
 800ba72:	4620      	mov	r0, r4
 800ba74:	f7ff f9b6 	bl	800ade4 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d1eb      	bne.n	800ba54 <HAL_SD_ConfigWideBusOperation+0x11c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba7c:	9b05      	ldr	r3, [sp, #20]
 800ba7e:	0359      	lsls	r1, r3, #13
 800ba80:	d514      	bpl.n	800baac <HAL_SD_ConfigWideBusOperation+0x174>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba84:	6820      	ldr	r0, [r4, #0]
 800ba86:	0409      	lsls	r1, r1, #16
 800ba88:	f002 f9ae 	bl	800dde8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d1e1      	bne.n	800ba54 <HAL_SD_ConfigWideBusOperation+0x11c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	2102      	movs	r1, #2
 800ba94:	f002 fa88 	bl	800dfa8 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba98:	e7dc      	b.n	800ba54 <HAL_SD_ConfigWideBusOperation+0x11c>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba9a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ba9e:	e7d9      	b.n	800ba54 <HAL_SD_ConfigWideBusOperation+0x11c>
        if (hsd->Init.ClockDiv == 0U)
 800baa0:	b93a      	cbnz	r2, 800bab2 <HAL_SD_ConfigWideBusOperation+0x17a>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800baa2:	490b      	ldr	r1, [pc, #44]	@ (800bad0 <HAL_SD_ConfigWideBusOperation+0x198>)
 800baa4:	4288      	cmp	r0, r1
 800baa6:	d986      	bls.n	800b9b6 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800baa8:	0e5a      	lsrs	r2, r3, #25
 800baaa:	e784      	b.n	800b9b6 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800baac:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800bab0:	e7d0      	b.n	800ba54 <HAL_SD_ConfigWideBusOperation+0x11c>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800bab2:	0051      	lsls	r1, r2, #1
 800bab4:	fbb0 f1f1 	udiv	r1, r0, r1
 800bab8:	4805      	ldr	r0, [pc, #20]	@ (800bad0 <HAL_SD_ConfigWideBusOperation+0x198>)
 800baba:	4281      	cmp	r1, r0
 800babc:	f67f af7b 	bls.w	800b9b6 <HAL_SD_ConfigWideBusOperation+0x7e>
 800bac0:	e7f2      	b.n	800baa8 <HAL_SD_ConfigWideBusOperation+0x170>
 800bac2:	bf00      	nop
 800bac4:	55e63b89 	.word	0x55e63b89
 800bac8:	017d7840 	.word	0x017d7840
 800bacc:	1fe00fff 	.word	0x1fe00fff
 800bad0:	02faf080 	.word	0x02faf080

0800bad4 <HAL_SD_Init>:
{
 800bad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bad6:	b087      	sub	sp, #28
  if(hsd == NULL)
 800bad8:	b168      	cbz	r0, 800baf6 <HAL_SD_Init+0x22>
  if(hsd->State == HAL_SD_STATE_RESET)
 800bada:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800bade:	4604      	mov	r4, r0
 800bae0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d043      	beq.n	800bb70 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_BUSY;
 800bae8:	2303      	movs	r3, #3
 800baea:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800baee:	4620      	mov	r0, r4
 800baf0:	f7ff fcc0 	bl	800b474 <HAL_SD_InitCard>
 800baf4:	b118      	cbz	r0, 800bafe <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 800baf6:	2601      	movs	r6, #1
}
 800baf8:	4630      	mov	r0, r6
 800bafa:	b007      	add	sp, #28
 800bafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bafe:	a901      	add	r1, sp, #4
 800bb00:	4620      	mov	r0, r4
 800bb02:	f7ff fe35 	bl	800b770 <HAL_SD_GetCardStatus>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d1f5      	bne.n	800baf6 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bb0a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800bb0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bb10:	f89d 2015 	ldrb.w	r2, [sp, #21]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bb14:	2901      	cmp	r1, #1
  speedgrade = CardStatus.UhsSpeedGrade;
 800bb16:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bb18:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bb1a:	d037      	beq.n	800bb8c <HAL_SD_Init+0xb8>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bb1c:	65e0      	str	r0, [r4, #92]	@ 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bb1e:	68e1      	ldr	r1, [r4, #12]
 800bb20:	4620      	mov	r0, r4
 800bb22:	f7ff ff09 	bl	800b938 <HAL_SD_ConfigWideBusOperation>
 800bb26:	4606      	mov	r6, r0
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d1e4      	bne.n	800baf6 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 800bb2c:	f7fb fbd8 	bl	80072e0 <HAL_GetTick>
 800bb30:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bb32:	e007      	b.n	800bb44 <HAL_SD_Init+0x70>
    hsd->ErrorCode |= errorstate;
 800bb34:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bb36:	4303      	orrs	r3, r0
 800bb38:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800bb3a:	f7fb fbd1 	bl	80072e0 <HAL_GetTick>
 800bb3e:	1bc3      	subs	r3, r0, r7
 800bb40:	3301      	adds	r3, #1
 800bb42:	d019      	beq.n	800bb78 <HAL_SD_Init+0xa4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb44:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bb46:	6820      	ldr	r0, [r4, #0]
 800bb48:	0409      	lsls	r1, r1, #16
 800bb4a:	f002 fc53 	bl	800e3f4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb4e:	4605      	mov	r5, r0
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb50:	4601      	mov	r1, r0
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1ee      	bne.n	800bb34 <HAL_SD_Init+0x60>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb56:	6820      	ldr	r0, [r4, #0]
 800bb58:	f001 fc26 	bl	800d3a8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bb5c:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bb60:	2804      	cmp	r0, #4
 800bb62:	d1ea      	bne.n	800bb3a <HAL_SD_Init+0x66>
  hsd->State = HAL_SD_STATE_READY;
 800bb64:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb66:	63a5      	str	r5, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800bb68:	6325      	str	r5, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800bb6a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  return HAL_OK;
 800bb6e:	e7c3      	b.n	800baf8 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 800bb70:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800bb72:	f7ff f9a5 	bl	800aec0 <HAL_SD_MspInit>
 800bb76:	e7b7      	b.n	800bae8 <HAL_SD_Init+0x14>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bb78:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 800bb7c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800bb7e:	2300      	movs	r3, #0
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bb80:	63a1      	str	r1, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800bb82:	2603      	movs	r6, #3
      hsd->State= HAL_SD_STATE_READY;
 800bb84:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb88:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 800bb8a:	e7b5      	b.n	800baf8 <HAL_SD_Init+0x24>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	bf14      	ite	ne
 800bb90:	f44f 7000 	movne.w	r0, #512	@ 0x200
 800bb94:	f44f 7080 	moveq.w	r0, #256	@ 0x100
 800bb98:	e7c0      	b.n	800bb1c <HAL_SD_Init+0x48>
 800bb9a:	bf00      	nop

0800bb9c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb9c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
{
 800bb9e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bba0:	0409      	lsls	r1, r1, #16
{
 800bba2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bba4:	6800      	ldr	r0, [r0, #0]
 800bba6:	f002 fc25 	bl	800e3f4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbaa:	4601      	mov	r1, r0
 800bbac:	b120      	cbz	r0, 800bbb8 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800bbae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bbb0:	430b      	orrs	r3, r1
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800bbb6:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bbb8:	6820      	ldr	r0, [r4, #0]
 800bbba:	f001 fbf5 	bl	800d3a8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bbbe:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800bbc2:	bd10      	pop	{r4, pc}

0800bbc4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop

0800bbc8 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop

0800bbcc <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
/**
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop

0800bbd0 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
/**
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop

0800bbd4 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
/**
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop

0800bbd8 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800bbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	460d      	mov	r5, r1
 800bbde:	4616      	mov	r6, r2
 800bbe0:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bbe2:	f7fb fb7d 	bl	80072e0 <HAL_GetTick>
 800bbe6:	442e      	add	r6, r5
 800bbe8:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 800bbea:	f7fb fb79 	bl	80072e0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bbee:	4b2f      	ldr	r3, [pc, #188]	@ (800bcac <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)

  while ((hspi->Instance->SR & Fifo) != State)
 800bbf0:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bbf8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bbfc:	0d1b      	lsrs	r3, r3, #20
 800bbfe:	fb06 f303 	mul.w	r3, r6, r3
 800bc02:	3501      	adds	r5, #1
 800bc04:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800bc06:	bf18      	it	ne
 800bc08:	4607      	movne	r7, r0
 800bc0a:	d120      	bne.n	800bc4e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x76>
 800bc0c:	6893      	ldr	r3, [r2, #8]
 800bc0e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bc12:	d007      	beq.n	800bc24 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bc14:	7b13      	ldrb	r3, [r2, #12]
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800bc1a:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bc1c:	6893      	ldr	r3, [r2, #8]
 800bc1e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bc22:	d1f7      	bne.n	800bc14 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3c>
      }      
      count--;
    }
  }

  return HAL_OK;
 800bc24:	2000      	movs	r0, #0
}
 800bc26:	b003      	add	sp, #12
 800bc28:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bc2a:	7b13      	ldrb	r3, [r2, #12]
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 800bc30:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc32:	f7fb fb55 	bl	80072e0 <HAL_GetTick>
 800bc36:	1bc0      	subs	r0, r0, r7
 800bc38:	42b0      	cmp	r0, r6
 800bc3a:	d20d      	bcs.n	800bc58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x80>
      if(count == 0U)
 800bc3c:	9a01      	ldr	r2, [sp, #4]
      count--;
 800bc3e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800bc40:	2a00      	cmp	r2, #0
      count--;
 800bc42:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((hspi->Instance->SR & Fifo) != State)
 800bc46:	6822      	ldr	r2, [r4, #0]
      count--;
 800bc48:	9301      	str	r3, [sp, #4]
        tmp_timeout = 0U;
 800bc4a:	bf08      	it	eq
 800bc4c:	2600      	moveq	r6, #0
  while ((hspi->Instance->SR & Fifo) != State)
 800bc4e:	6893      	ldr	r3, [r2, #8]
 800bc50:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800bc54:	d1e9      	bne.n	800bc2a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x52>
 800bc56:	e7e5      	b.n	800bc24 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc58:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc5c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc5e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bc66:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc68:	d013      	beq.n	800bc92 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc6a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bc6c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800bc70:	d107      	bne.n	800bc82 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bc78:	601a      	str	r2, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bc80:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800bc82:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800bc84:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800bc86:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800bc8a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800bc8e:	2003      	movs	r0, #3
 800bc90:	e7c9      	b.n	800bc26 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc92:	68a2      	ldr	r2, [r4, #8]
 800bc94:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800bc98:	d002      	beq.n	800bca0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc9a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800bc9e:	d1e4      	bne.n	800bc6a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bca6:	601a      	str	r2, [r3, #0]
 800bca8:	e7df      	b.n	800bc6a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 800bcaa:	bf00      	nop
 800bcac:	200001e0 	.word	0x200001e0

0800bcb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	b083      	sub	sp, #12
 800bcb6:	460e      	mov	r6, r1
 800bcb8:	eb01 0902 	add.w	r9, r1, r2
 800bcbc:	4617      	mov	r7, r2
 800bcbe:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bcc0:	f7fb fb0e 	bl	80072e0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bcc4:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 800bdec <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bcc8:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 800bccc:	f7fb fb08 	bl	80072e0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bcd0:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 800bcd4:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bcd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bcda:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bcde:	0d1b      	lsrs	r3, r3, #20
 800bce0:	fb0a f303 	mul.w	r3, sl, r3
 800bce4:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bce6:	1c73      	adds	r3, r6, #1
 800bce8:	bf18      	it	ne
 800bcea:	4683      	movne	fp, r0
 800bcec:	d130      	bne.n	800bd50 <SPI_EndRxTxTransaction+0xa0>
 800bcee:	68a3      	ldr	r3, [r4, #8]
 800bcf0:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800bcf4:	d1fb      	bne.n	800bcee <SPI_EndRxTxTransaction+0x3e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bcf6:	f7fb faf3 	bl	80072e0 <HAL_GetTick>
 800bcfa:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 800bcfe:	f7fb faef 	bl	80072e0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd02:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd06:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd08:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800bd0c:	fb09 f303 	mul.w	r3, r9, r3
 800bd10:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 800bd12:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd14:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd16:	d130      	bne.n	800bd7a <SPI_EndRxTxTransaction+0xca>
 800bd18:	68a3      	ldr	r3, [r4, #8]
 800bd1a:	061a      	lsls	r2, r3, #24
 800bd1c:	d4fc      	bmi.n	800bd18 <SPI_EndRxTxTransaction+0x68>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bd1e:	463a      	mov	r2, r7
 800bd20:	4631      	mov	r1, r6
 800bd22:	4628      	mov	r0, r5
 800bd24:	f7ff ff58 	bl	800bbd8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800bd28:	bb58      	cbnz	r0, 800bd82 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800bd2a:	b003      	add	sp, #12
 800bd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd30:	f7fb fad6 	bl	80072e0 <HAL_GetTick>
 800bd34:	eba0 000b 	sub.w	r0, r0, fp
 800bd38:	4550      	cmp	r0, sl
 800bd3a:	d22a      	bcs.n	800bd92 <SPI_EndRxTxTransaction+0xe2>
      if(count == 0U)
 800bd3c:	9a00      	ldr	r2, [sp, #0]
      count--;
 800bd3e:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bd40:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800bd42:	2a00      	cmp	r2, #0
      count--;
 800bd44:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800bd48:	bf08      	it	eq
 800bd4a:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800bd4e:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800bd56:	d1eb      	bne.n	800bd30 <SPI_EndRxTxTransaction+0x80>
 800bd58:	e7cd      	b.n	800bcf6 <SPI_EndRxTxTransaction+0x46>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd5a:	f7fb fac1 	bl	80072e0 <HAL_GetTick>
 800bd5e:	eba0 0008 	sub.w	r0, r0, r8
 800bd62:	4581      	cmp	r9, r0
 800bd64:	d915      	bls.n	800bd92 <SPI_EndRxTxTransaction+0xe2>
      if(count == 0U)
 800bd66:	9a01      	ldr	r2, [sp, #4]
      count--;
 800bd68:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd6a:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800bd6c:	2a00      	cmp	r2, #0
      count--;
 800bd6e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800bd72:	bf08      	it	eq
 800bd74:	f04f 0900 	moveq.w	r9, #0
      count--;
 800bd78:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	061b      	lsls	r3, r3, #24
 800bd7e:	d4ec      	bmi.n	800bd5a <SPI_EndRxTxTransaction+0xaa>
 800bd80:	e7cd      	b.n	800bd1e <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd82:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800bd84:	f043 0320 	orr.w	r3, r3, #32
 800bd88:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bd8a:	2003      	movs	r0, #3
}
 800bd8c:	b003      	add	sp, #12
 800bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd92:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd96:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd98:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bda0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bda2:	d016      	beq.n	800bdd2 <SPI_EndRxTxTransaction+0x122>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bda4:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800bda6:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800bdaa:	d107      	bne.n	800bdbc <SPI_EndRxTxTransaction+0x10c>
          SPI_RESET_CRC(hspi);
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bdba:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdc2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800bdc4:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdc6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800bdca:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdce:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bdd0:	e7db      	b.n	800bd8a <SPI_EndRxTxTransaction+0xda>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdd2:	68aa      	ldr	r2, [r5, #8]
 800bdd4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800bdd8:	d002      	beq.n	800bde0 <SPI_EndRxTxTransaction+0x130>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdda:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800bdde:	d1e1      	bne.n	800bda4 <SPI_EndRxTxTransaction+0xf4>
          __HAL_SPI_DISABLE(hspi);
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bde6:	601a      	str	r2, [r3, #0]
 800bde8:	e7dc      	b.n	800bda4 <SPI_EndRxTxTransaction+0xf4>
 800bdea:	bf00      	nop
 800bdec:	200001e0 	.word	0x200001e0

0800bdf0 <HAL_SPI_MspInit>:
}
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop

0800bdf4 <HAL_SPI_Init>:
  if (hspi == NULL)
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d074      	beq.n	800bee2 <HAL_SPI_Init+0xee>
{
 800bdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfc:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bdfe:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800be00:	2800      	cmp	r0, #0
 800be02:	d053      	beq.n	800beac <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800be04:	2300      	movs	r3, #0
 800be06:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800be0a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be0e:	2200      	movs	r2, #0
 800be10:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800be12:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800be16:	2b00      	cmp	r3, #0
 800be18:	d057      	beq.n	800beca <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 800be1a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be1c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800be1e:	2302      	movs	r3, #2
 800be20:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800be24:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be26:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800be2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be2e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be30:	d842      	bhi.n	800beb8 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800be32:	d151      	bne.n	800bed8 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be34:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800be36:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be3a:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800be3e:	6862      	ldr	r2, [r4, #4]
 800be40:	68a3      	ldr	r3, [r4, #8]
 800be42:	69a6      	ldr	r6, [r4, #24]
 800be44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800be48:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 800be4c:	431a      	orrs	r2, r3
 800be4e:	6923      	ldr	r3, [r4, #16]
 800be50:	f003 0302 	and.w	r3, r3, #2
 800be54:	4313      	orrs	r3, r2
 800be56:	6962      	ldr	r2, [r4, #20]
 800be58:	f002 0201 	and.w	r2, r2, #1
 800be5c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be60:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 800be64:	f003 0308 	and.w	r3, r3, #8
 800be68:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be6c:	69e3      	ldr	r3, [r4, #28]
 800be6e:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 800be72:	6a23      	ldr	r3, [r4, #32]
 800be74:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 800be78:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 800be7c:	4313      	orrs	r3, r2
 800be7e:	ea43 0308 	orr.w	r3, r3, r8
 800be82:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be84:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be86:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be88:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be8c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be8e:	f000 0010 	and.w	r0, r0, #16
 800be92:	ea4e 0306 	orr.w	r3, lr, r6
 800be96:	4303      	orrs	r3, r0
 800be98:	ea43 030c 	orr.w	r3, r3, ip
 800be9c:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be9e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800bea0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bea2:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bea4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800beac:	6863      	ldr	r3, [r4, #4]
 800beae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800beb2:	d0aa      	beq.n	800be0a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800beb4:	61e0      	str	r0, [r4, #28]
 800beb6:	e7a8      	b.n	800be0a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800beb8:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 800bebc:	d113      	bne.n	800bee6 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bebe:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bec0:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bec4:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800bec8:	e7b9      	b.n	800be3e <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 800beca:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800becc:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800bed0:	f7ff ff8e 	bl	800bdf0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bed4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bed6:	e7a0      	b.n	800be1a <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bed8:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bedc:	2500      	movs	r5, #0
 800bede:	62a5      	str	r5, [r4, #40]	@ 0x28
 800bee0:	e7ad      	b.n	800be3e <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 800bee2:	2001      	movs	r0, #1
}
 800bee4:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bee6:	f04f 0c00 	mov.w	ip, #0
 800beea:	e7f7      	b.n	800bedc <HAL_SPI_Init+0xe8>

0800beec <HAL_SPI_MspDeInit>:
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop

0800bef0 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800bef0:	b190      	cbz	r0, 800bf18 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800bef2:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800bef4:	2302      	movs	r3, #2
{
 800bef6:	b510      	push	{r4, lr}
  hspi->State = HAL_SPI_STATE_BUSY;
 800bef8:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800befc:	6813      	ldr	r3, [r2, #0]
 800befe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf02:	4604      	mov	r4, r0
 800bf04:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800bf06:	f7ff fff1 	bl	800beec <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	6620      	str	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 800bf0e:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800bf12:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
}
 800bf16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bf18:	2001      	movs	r0, #1
}
 800bf1a:	4770      	bx	lr

0800bf1c <HAL_SPI_Transmit>:
{
 800bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf20:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800bf22:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 800bf26:	2801      	cmp	r0, #1
{
 800bf28:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800bf2a:	d075      	beq.n	800c018 <HAL_SPI_Transmit+0xfc>
 800bf2c:	461d      	mov	r5, r3
 800bf2e:	2301      	movs	r3, #1
 800bf30:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800bf34:	4688      	mov	r8, r1
 800bf36:	4617      	mov	r7, r2
 800bf38:	f7fb f9d2 	bl	80072e0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800bf3c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800bf40:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800bf42:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800bf44:	b2d8      	uxtb	r0, r3
 800bf46:	d009      	beq.n	800bf5c <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800bf48:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800bf4a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800bf4c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800bf4e:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800bf52:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800bf56:	b002      	add	sp, #8
 800bf58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800bf5c:	f1b8 0f00 	cmp.w	r8, #0
 800bf60:	d0f3      	beq.n	800bf4a <HAL_SPI_Transmit+0x2e>
 800bf62:	2f00      	cmp	r7, #0
 800bf64:	d0f1      	beq.n	800bf4a <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf66:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800bf68:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf6a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf6e:	2200      	movs	r2, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf70:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf72:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf76:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 800bf7a:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf7e:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 800bf80:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800bf82:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bf84:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800bf86:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800bf8a:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 800bf8e:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf90:	d06a      	beq.n	800c068 <HAL_SPI_Transmit+0x14c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	0652      	lsls	r2, r2, #25
 800bf96:	d403      	bmi.n	800bfa0 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf9e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfa0:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfa2:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfa4:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800bfa8:	d93a      	bls.n	800c020 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfaa:	2900      	cmp	r1, #0
 800bfac:	f000 8099 	beq.w	800c0e2 <HAL_SPI_Transmit+0x1c6>
 800bfb0:	2f01      	cmp	r7, #1
 800bfb2:	f000 8096 	beq.w	800c0e2 <HAL_SPI_Transmit+0x1c6>
    while (hspi->TxXferCount > 0U)
 800bfb6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800bfb8:	b292      	uxth	r2, r2
 800bfba:	b1ba      	cbz	r2, 800bfec <HAL_SPI_Transmit+0xd0>
 800bfbc:	1c6a      	adds	r2, r5, #1
 800bfbe:	f040 8087 	bne.w	800c0d0 <HAL_SPI_Transmit+0x1b4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfc2:	689a      	ldr	r2, [r3, #8]
 800bfc4:	0797      	lsls	r7, r2, #30
 800bfc6:	f140 80a4 	bpl.w	800c112 <HAL_SPI_Transmit+0x1f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bfcc:	f832 1b02 	ldrh.w	r1, [r2], #2
 800bfd0:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800bfd2:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfd6:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800bfd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bfdc:	fa1f fc8c 	uxth.w	ip, ip
 800bfe0:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800bfe4:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800bfe6:	b292      	uxth	r2, r2
 800bfe8:	2a00      	cmp	r2, #0
 800bfea:	d1ea      	bne.n	800bfc2 <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfec:	4632      	mov	r2, r6
 800bfee:	4629      	mov	r1, r5
 800bff0:	4620      	mov	r0, r4
 800bff2:	f7ff fe5d 	bl	800bcb0 <SPI_EndRxTxTransaction>
 800bff6:	b108      	cbz	r0, 800bffc <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bff8:	2320      	movs	r3, #32
 800bffa:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bffc:	68a3      	ldr	r3, [r4, #8]
 800bffe:	b933      	cbnz	r3, 800c00e <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c000:	6822      	ldr	r2, [r4, #0]
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	68d3      	ldr	r3, [r2, #12]
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	6893      	ldr	r3, [r2, #8]
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c00e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800c010:	3800      	subs	r0, #0
 800c012:	bf18      	it	ne
 800c014:	2001      	movne	r0, #1
error:
 800c016:	e798      	b.n	800bf4a <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800c018:	2002      	movs	r0, #2
}
 800c01a:	b002      	add	sp, #8
 800c01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c020:	2900      	cmp	r1, #0
 800c022:	d068      	beq.n	800c0f6 <HAL_SPI_Transmit+0x1da>
 800c024:	2f01      	cmp	r7, #1
 800c026:	d066      	beq.n	800c0f6 <HAL_SPI_Transmit+0x1da>
    while (hspi->TxXferCount > 0U)
 800c028:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d0dd      	beq.n	800bfec <HAL_SPI_Transmit+0xd0>
 800c030:	1c68      	adds	r0, r5, #1
 800c032:	d012      	beq.n	800c05a <HAL_SPI_Transmit+0x13e>
 800c034:	e033      	b.n	800c09e <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 800c036:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c038:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c03e:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 800c040:	d970      	bls.n	800c124 <HAL_SPI_Transmit+0x208>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c042:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c046:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800c048:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c04a:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c04c:	3b02      	subs	r3, #2
 800c04e:	b29b      	uxth	r3, r3
 800c050:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800c052:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800c054:	b289      	uxth	r1, r1
 800c056:	2900      	cmp	r1, #0
 800c058:	d0c8      	beq.n	800bfec <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c05a:	6822      	ldr	r2, [r4, #0]
 800c05c:	6893      	ldr	r3, [r2, #8]
 800c05e:	0799      	lsls	r1, r3, #30
 800c060:	d4e9      	bmi.n	800c036 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c062:	f7fb f93d 	bl	80072e0 <HAL_GetTick>
 800c066:	e7f4      	b.n	800c052 <HAL_SPI_Transmit+0x136>
    __HAL_SPI_DISABLE(hspi);
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c06e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e78b      	b.n	800bf92 <HAL_SPI_Transmit+0x76>
        if (hspi->TxXferCount > 1U)
 800c07a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c07c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800c07e:	b292      	uxth	r2, r2
 800c080:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c082:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 800c084:	d963      	bls.n	800c14e <HAL_SPI_Transmit+0x232>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c086:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c08a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800c08c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c08e:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c090:	3b02      	subs	r3, #2
 800c092:	b29b      	uxth	r3, r3
 800c094:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800c096:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c098:	b29b      	uxth	r3, r3
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d0a6      	beq.n	800bfec <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	689a      	ldr	r2, [r3, #8]
 800c0a2:	0792      	lsls	r2, r2, #30
 800c0a4:	d4e9      	bmi.n	800c07a <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0a6:	f7fb f91b 	bl	80072e0 <HAL_GetTick>
 800c0aa:	1b83      	subs	r3, r0, r6
 800c0ac:	42ab      	cmp	r3, r5
 800c0ae:	d3f2      	bcc.n	800c096 <HAL_SPI_Transmit+0x17a>
          errorcode = HAL_TIMEOUT;
 800c0b0:	2003      	movs	r0, #3
 800c0b2:	e74a      	b.n	800bf4a <HAL_SPI_Transmit+0x2e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c0b6:	f832 3b02 	ldrh.w	r3, [r2], #2
 800c0ba:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800c0bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0be:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800c0c6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d08e      	beq.n	800bfec <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c0ce:	6820      	ldr	r0, [r4, #0]
 800c0d0:	6883      	ldr	r3, [r0, #8]
 800c0d2:	0799      	lsls	r1, r3, #30
 800c0d4:	d4ee      	bmi.n	800c0b4 <HAL_SPI_Transmit+0x198>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0d6:	f7fb f903 	bl	80072e0 <HAL_GetTick>
 800c0da:	1b83      	subs	r3, r0, r6
 800c0dc:	42ab      	cmp	r3, r5
 800c0de:	d3f2      	bcc.n	800c0c6 <HAL_SPI_Transmit+0x1aa>
 800c0e0:	e7e6      	b.n	800c0b0 <HAL_SPI_Transmit+0x194>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0e2:	4641      	mov	r1, r8
 800c0e4:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c0e8:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800c0ea:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0ec:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800c0ee:	3a01      	subs	r2, #1
 800c0f0:	b292      	uxth	r2, r2
 800c0f2:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 800c0f4:	e75f      	b.n	800bfb6 <HAL_SPI_Transmit+0x9a>
      if (hspi->TxXferCount > 1U)
 800c0f6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800c0f8:	b292      	uxth	r2, r2
 800c0fa:	2a01      	cmp	r2, #1
 800c0fc:	d91c      	bls.n	800c138 <HAL_SPI_Transmit+0x21c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0fe:	4641      	mov	r1, r8
 800c100:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c104:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800c106:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c108:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c10a:	3b02      	subs	r3, #2
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c110:	e78a      	b.n	800c028 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c112:	f7fb f8e5 	bl	80072e0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800c116:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c118:	b29b      	uxth	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f43f af66 	beq.w	800bfec <HAL_SPI_Transmit+0xd0>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	e74e      	b.n	800bfc2 <HAL_SPI_Transmit+0xa6>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c124:	7803      	ldrb	r3, [r0, #0]
 800c126:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800c128:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c12a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c12c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c12e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c130:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c132:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c134:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c136:	e78c      	b.n	800c052 <HAL_SPI_Transmit+0x136>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c138:	f898 2000 	ldrb.w	r2, [r8]
 800c13c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800c13e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr ++;
 800c140:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c142:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800c144:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800c146:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800c148:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c14a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c14c:	e76c      	b.n	800c028 <HAL_SPI_Transmit+0x10c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c14e:	7802      	ldrb	r2, [r0, #0]
 800c150:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800c152:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c154:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c156:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c158:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c15a:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c15c:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c15e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c160:	e799      	b.n	800c096 <HAL_SPI_Transmit+0x17a>
 800c162:	bf00      	nop

0800c164 <HAL_SPI_TransmitReceive>:
{
 800c164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c168:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800c16a:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
{
 800c16e:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 800c170:	2801      	cmp	r0, #1
 800c172:	f000 809e 	beq.w	800c2b2 <HAL_SPI_TransmitReceive+0x14e>
 800c176:	461f      	mov	r7, r3
 800c178:	2301      	movs	r3, #1
 800c17a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800c17e:	4689      	mov	r9, r1
 800c180:	4690      	mov	r8, r2
 800c182:	f7fb f8ad 	bl	80072e0 <HAL_GetTick>
 800c186:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800c188:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 800c18c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c18e:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800c190:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c192:	d010      	beq.n	800c1b6 <HAL_SPI_TransmitReceive+0x52>
 800c194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c198:	d008      	beq.n	800c1ac <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800c19a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c19c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c19e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c1a0:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800c1a4:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800c1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c1ac:	68a2      	ldr	r2, [r4, #8]
 800c1ae:	2a00      	cmp	r2, #0
 800c1b0:	d1f3      	bne.n	800c19a <HAL_SPI_TransmitReceive+0x36>
 800c1b2:	2904      	cmp	r1, #4
 800c1b4:	d1f1      	bne.n	800c19a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c1b6:	f1b9 0f00 	cmp.w	r9, #0
 800c1ba:	f000 80d4 	beq.w	800c366 <HAL_SPI_TransmitReceive+0x202>
 800c1be:	f1b8 0f00 	cmp.w	r8, #0
 800c1c2:	f000 80d0 	beq.w	800c366 <HAL_SPI_TransmitReceive+0x202>
 800c1c6:	2f00      	cmp	r7, #0
 800c1c8:	f000 80cd 	beq.w	800c366 <HAL_SPI_TransmitReceive+0x202>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1cc:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c1d0:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1d2:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1d6:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1d8:	bf1c      	itt	ne
 800c1da:	2205      	movne	r2, #5
 800c1dc:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1e0:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c1e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1e6:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800c1e8:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 800c1ec:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1f0:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 800c1f2:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c1f6:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c1fa:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c1fc:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c1fe:	d85b      	bhi.n	800c2b8 <HAL_SPI_TransmitReceive+0x154>
 800c200:	2f01      	cmp	r7, #1
 800c202:	f000 8124 	beq.w	800c44e <HAL_SPI_TransmitReceive+0x2ea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c206:	6851      	ldr	r1, [r2, #4]
 800c208:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800c20c:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c20e:	6811      	ldr	r1, [r2, #0]
 800c210:	0649      	lsls	r1, r1, #25
 800c212:	d403      	bmi.n	800c21c <HAL_SPI_TransmitReceive+0xb8>
    __HAL_SPI_ENABLE(hspi);
 800c214:	6811      	ldr	r1, [r2, #0]
 800c216:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c21a:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c21c:	b96b      	cbnz	r3, 800c23a <HAL_SPI_TransmitReceive+0xd6>
      if (hspi->TxXferCount > 1U)
 800c21e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c220:	b29b      	uxth	r3, r3
 800c222:	2b01      	cmp	r3, #1
 800c224:	f240 80fd 	bls.w	800c422 <HAL_SPI_TransmitReceive+0x2be>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c228:	4649      	mov	r1, r9
 800c22a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c22e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 800c230:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c232:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c234:	3b02      	subs	r3, #2
 800c236:	b29b      	uxth	r3, r3
 800c238:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800c23a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c23c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c23e:	b29b      	uxth	r3, r3
 800c240:	b92b      	cbnz	r3, 800c24e <HAL_SPI_TransmitReceive+0xea>
 800c242:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c246:	b29b      	uxth	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 8082 	beq.w	800c352 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c24e:	6821      	ldr	r1, [r4, #0]
 800c250:	688b      	ldr	r3, [r1, #8]
 800c252:	079a      	lsls	r2, r3, #30
 800c254:	d506      	bpl.n	800c264 <HAL_SPI_TransmitReceive+0x100>
 800c256:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c258:	b29b      	uxth	r3, r3
 800c25a:	b11b      	cbz	r3, 800c264 <HAL_SPI_TransmitReceive+0x100>
 800c25c:	2f00      	cmp	r7, #0
 800c25e:	f040 8095 	bne.w	800c38c <HAL_SPI_TransmitReceive+0x228>
        txallowed = 0U;
 800c262:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c264:	688b      	ldr	r3, [r1, #8]
 800c266:	f013 0301 	ands.w	r3, r3, #1
 800c26a:	d019      	beq.n	800c2a0 <HAL_SPI_TransmitReceive+0x13c>
 800c26c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c270:	b292      	uxth	r2, r2
 800c272:	b1aa      	cbz	r2, 800c2a0 <HAL_SPI_TransmitReceive+0x13c>
        if (hspi->RxXferCount > 1U)
 800c274:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c278:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 800c27a:	b280      	uxth	r0, r0
 800c27c:	2801      	cmp	r0, #1
 800c27e:	d979      	bls.n	800c374 <HAL_SPI_TransmitReceive+0x210>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c280:	68c8      	ldr	r0, [r1, #12]
 800c282:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c286:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800c288:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c28c:	3a02      	subs	r2, #2
 800c28e:	b292      	uxth	r2, r2
 800c290:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800c294:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c298:	b292      	uxth	r2, r2
 800c29a:	2a01      	cmp	r2, #1
 800c29c:	d965      	bls.n	800c36a <HAL_SPI_TransmitReceive+0x206>
        txallowed = 1U;
 800c29e:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c2a0:	f7fb f81e 	bl	80072e0 <HAL_GetTick>
 800c2a4:	1b40      	subs	r0, r0, r5
 800c2a6:	42b0      	cmp	r0, r6
 800c2a8:	d3c8      	bcc.n	800c23c <HAL_SPI_TransmitReceive+0xd8>
 800c2aa:	1c73      	adds	r3, r6, #1
 800c2ac:	d0c6      	beq.n	800c23c <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 800c2ae:	2003      	movs	r0, #3
 800c2b0:	e774      	b.n	800c19c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800c2b2:	2002      	movs	r0, #2
}
 800c2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c2b8:	6851      	ldr	r1, [r2, #4]
 800c2ba:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800c2be:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c2c0:	6811      	ldr	r1, [r2, #0]
 800c2c2:	0648      	lsls	r0, r1, #25
 800c2c4:	d403      	bmi.n	800c2ce <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 800c2c6:	6811      	ldr	r1, [r2, #0]
 800c2c8:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c2cc:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f040 8082 	bne.w	800c3d8 <HAL_SPI_TransmitReceive+0x274>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c2da:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800c2dc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2de:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c2e6:	1c73      	adds	r3, r6, #1
{
 800c2e8:	f04f 0701 	mov.w	r7, #1
 800c2ec:	d028      	beq.n	800c340 <HAL_SPI_TransmitReceive+0x1dc>
 800c2ee:	e06e      	b.n	800c3ce <HAL_SPI_TransmitReceive+0x26a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c2f0:	6822      	ldr	r2, [r4, #0]
 800c2f2:	6893      	ldr	r3, [r2, #8]
 800c2f4:	0798      	lsls	r0, r3, #30
 800c2f6:	d50d      	bpl.n	800c314 <HAL_SPI_TransmitReceive+0x1b0>
 800c2f8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	b153      	cbz	r3, 800c314 <HAL_SPI_TransmitReceive+0x1b0>
 800c2fe:	b147      	cbz	r7, 800c312 <HAL_SPI_TransmitReceive+0x1ae>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c300:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c302:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c306:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c308:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c30a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c30c:	3b01      	subs	r3, #1
 800c30e:	b29b      	uxth	r3, r3
 800c310:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 800c312:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c314:	6893      	ldr	r3, [r2, #8]
 800c316:	f013 0301 	ands.w	r3, r3, #1
 800c31a:	d00f      	beq.n	800c33c <HAL_SPI_TransmitReceive+0x1d8>
 800c31c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800c320:	b289      	uxth	r1, r1
 800c322:	b159      	cbz	r1, 800c33c <HAL_SPI_TransmitReceive+0x1d8>
        txallowed = 1U;
 800c324:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c326:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c328:	68d2      	ldr	r2, [r2, #12]
 800c32a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c32e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c330:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c334:	3b01      	subs	r3, #1
 800c336:	b29b      	uxth	r3, r3
 800c338:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c33c:	f7fa ffd0 	bl	80072e0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c340:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c342:	b29b      	uxth	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1d3      	bne.n	800c2f0 <HAL_SPI_TransmitReceive+0x18c>
 800c348:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1ce      	bne.n	800c2f0 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c352:	462a      	mov	r2, r5
 800c354:	4631      	mov	r1, r6
 800c356:	4620      	mov	r0, r4
 800c358:	f7ff fcaa 	bl	800bcb0 <SPI_EndRxTxTransaction>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	f43f af1d 	beq.w	800c19c <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c362:	2320      	movs	r3, #32
 800c364:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800c366:	2001      	movs	r0, #1
 800c368:	e718      	b.n	800c19c <HAL_SPI_TransmitReceive+0x38>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c36a:	684a      	ldr	r2, [r1, #4]
 800c36c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c370:	604a      	str	r2, [r1, #4]
 800c372:	e794      	b.n	800c29e <HAL_SPI_TransmitReceive+0x13a>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c374:	7b09      	ldrb	r1, [r1, #12]
 800c376:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 800c378:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c37a:	3201      	adds	r2, #1
 800c37c:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 800c37e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c382:	3a01      	subs	r2, #1
 800c384:	b292      	uxth	r2, r2
 800c386:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 800c38a:	e788      	b.n	800c29e <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 800c38c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c38e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800c390:	b292      	uxth	r2, r2
 800c392:	2a01      	cmp	r2, #1
 800c394:	d950      	bls.n	800c438 <HAL_SPI_TransmitReceive+0x2d4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c396:	f833 2b02 	ldrh.w	r2, [r3], #2
 800c39a:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c39c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c39e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c3a0:	3b02      	subs	r3, #2
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c3a6:	e75c      	b.n	800c262 <HAL_SPI_TransmitReceive+0xfe>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c3a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d0cf      	beq.n	800c352 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c3b2:	6822      	ldr	r2, [r4, #0]
 800c3b4:	6893      	ldr	r3, [r2, #8]
 800c3b6:	0799      	lsls	r1, r3, #30
 800c3b8:	d423      	bmi.n	800c402 <HAL_SPI_TransmitReceive+0x29e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c3ba:	6893      	ldr	r3, [r2, #8]
 800c3bc:	f013 0301 	ands.w	r3, r3, #1
 800c3c0:	d10d      	bne.n	800c3de <HAL_SPI_TransmitReceive+0x27a>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c3c2:	f7fa ff8d 	bl	80072e0 <HAL_GetTick>
 800c3c6:	1b40      	subs	r0, r0, r5
 800c3c8:	42b0      	cmp	r0, r6
 800c3ca:	f4bf af70 	bcs.w	800c2ae <HAL_SPI_TransmitReceive+0x14a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c3ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1ed      	bne.n	800c3b2 <HAL_SPI_TransmitReceive+0x24e>
 800c3d6:	e7e7      	b.n	800c3a8 <HAL_SPI_TransmitReceive+0x244>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3d8:	2f01      	cmp	r7, #1
 800c3da:	d184      	bne.n	800c2e6 <HAL_SPI_TransmitReceive+0x182>
 800c3dc:	e77a      	b.n	800c2d4 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c3de:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800c3e2:	b289      	uxth	r1, r1
 800c3e4:	2900      	cmp	r1, #0
 800c3e6:	d0ec      	beq.n	800c3c2 <HAL_SPI_TransmitReceive+0x25e>
        txallowed = 1U;
 800c3e8:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c3ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3ec:	68d2      	ldr	r2, [r2, #12]
 800c3ee:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3f2:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c3f4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800c400:	e7df      	b.n	800c3c2 <HAL_SPI_TransmitReceive+0x25e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c402:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c404:	b29b      	uxth	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d0d7      	beq.n	800c3ba <HAL_SPI_TransmitReceive+0x256>
 800c40a:	b147      	cbz	r7, 800c41e <HAL_SPI_TransmitReceive+0x2ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c40c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c40e:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c412:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c414:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c416:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800c418:	3b01      	subs	r3, #1
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800c41e:	2700      	movs	r7, #0
 800c420:	e7cb      	b.n	800c3ba <HAL_SPI_TransmitReceive+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c422:	f899 3000 	ldrb.w	r3, [r9]
 800c426:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800c428:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800c42a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c42c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800c42e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800c430:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800c432:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800c434:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c436:	e700      	b.n	800c23a <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800c43c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800c43e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c440:	6821      	ldr	r1, [r4, #0]
          hspi->TxXferCount--;
 800c442:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c444:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c446:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c448:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800c44a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800c44c:	e709      	b.n	800c262 <HAL_SPI_TransmitReceive+0xfe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c44e:	6853      	ldr	r3, [r2, #4]
 800c450:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c454:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c456:	6813      	ldr	r3, [r2, #0]
 800c458:	0659      	lsls	r1, r3, #25
 800c45a:	f53f aee0 	bmi.w	800c21e <HAL_SPI_TransmitReceive+0xba>
    __HAL_SPI_ENABLE(hspi);
 800c45e:	6813      	ldr	r3, [r2, #0]
 800c460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c464:	6013      	str	r3, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c466:	e6da      	b.n	800c21e <HAL_SPI_TransmitReceive+0xba>

0800c468 <HAL_SPI_Receive>:
{
 800c468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c46e:	6843      	ldr	r3, [r0, #4]
 800c470:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 800c474:	b084      	sub	sp, #16
 800c476:	4604      	mov	r4, r0
 800c478:	4617      	mov	r7, r2
 800c47a:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c47c:	f000 8090 	beq.w	800c5a0 <HAL_SPI_Receive+0x138>
  __HAL_LOCK(hspi);
 800c480:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800c484:	2b01      	cmp	r3, #1
 800c486:	f000 8098 	beq.w	800c5ba <HAL_SPI_Receive+0x152>
 800c48a:	2301      	movs	r3, #1
 800c48c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800c490:	f7fa ff26 	bl	80072e0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800c494:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800c498:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800c49a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800c49c:	b2d8      	uxtb	r0, r3
 800c49e:	d009      	beq.n	800c4b4 <HAL_SPI_Receive+0x4c>
    errorcode = HAL_BUSY;
 800c4a0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c4a2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c4a4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c4a6:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800c4aa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800c4ae:	b004      	add	sp, #16
 800c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800c4b4:	f1b8 0f00 	cmp.w	r8, #0
 800c4b8:	d0f3      	beq.n	800c4a2 <HAL_SPI_Receive+0x3a>
 800c4ba:	2f00      	cmp	r7, #0
 800c4bc:	d0f1      	beq.n	800c4a2 <HAL_SPI_Receive+0x3a>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4be:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4c0:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c4c2:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4c6:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c4c8:	2004      	movs	r0, #4
 800c4ca:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4ce:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4d2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxXferCount = Size;
 800c4d4:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800c4d8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800c4da:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c4de:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800c4e0:	87a3      	strh	r3, [r4, #60]	@ 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4e2:	6848      	ldr	r0, [r1, #4]
  hspi->RxXferSize  = Size;
 800c4e4:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4e8:	460b      	mov	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4ea:	f240 80dc 	bls.w	800c6a6 <HAL_SPI_Receive+0x23e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4ee:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800c4f2:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4f4:	68a0      	ldr	r0, [r4, #8]
 800c4f6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c4fa:	f000 80e0 	beq.w	800c6be <HAL_SPI_Receive+0x256>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c4fe:	6808      	ldr	r0, [r1, #0]
 800c500:	0640      	lsls	r0, r0, #25
 800c502:	d45e      	bmi.n	800c5c2 <HAL_SPI_Receive+0x15a>
    __HAL_SPI_ENABLE(hspi);
 800c504:	6808      	ldr	r0, [r1, #0]
 800c506:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800c50a:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c50c:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800c510:	d857      	bhi.n	800c5c2 <HAL_SPI_Receive+0x15a>
    while (hspi->RxXferCount > 0U)
 800c512:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c516:	b292      	uxth	r2, r2
 800c518:	b1fa      	cbz	r2, 800c55a <HAL_SPI_Receive+0xf2>
 800c51a:	1c68      	adds	r0, r5, #1
 800c51c:	d013      	beq.n	800c546 <HAL_SPI_Receive+0xde>
 800c51e:	e0b8      	b.n	800c692 <HAL_SPI_Receive+0x22a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c520:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c522:	7b1b      	ldrb	r3, [r3, #12]
 800c524:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c526:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c52a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c52c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c530:	fa1f fc8c 	uxth.w	ip, ip
 800c534:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c538:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c53c:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 800c53e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c540:	6422      	str	r2, [r4, #64]	@ 0x40
    while (hspi->RxXferCount > 0U)
 800c542:	b153      	cbz	r3, 800c55a <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	689a      	ldr	r2, [r3, #8]
 800c548:	07d1      	lsls	r1, r2, #31
 800c54a:	d4e9      	bmi.n	800c520 <HAL_SPI_Receive+0xb8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c54c:	f7fa fec8 	bl	80072e0 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800c550:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c554:	b29b      	uxth	r3, r3
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1f4      	bne.n	800c544 <HAL_SPI_Receive+0xdc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c55a:	6863      	ldr	r3, [r4, #4]
 800c55c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c560:	f000 80ba 	beq.w	800c6d8 <HAL_SPI_Receive+0x270>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c564:	f7fa febc 	bl	80072e0 <HAL_GetTick>
 800c568:	19af      	adds	r7, r5, r6
 800c56a:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800c56c:	f7fa feb8 	bl	80072e0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c570:	4b80      	ldr	r3, [pc, #512]	@ (800c774 <HAL_SPI_Receive+0x30c>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c572:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800c57a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c57c:	fb07 f303 	mul.w	r3, r7, r3
 800c580:	1c68      	adds	r0, r5, #1
 800c582:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c584:	d16e      	bne.n	800c664 <HAL_SPI_Receive+0x1fc>
 800c586:	6893      	ldr	r3, [r2, #8]
 800c588:	0619      	lsls	r1, r3, #24
 800c58a:	d4fc      	bmi.n	800c586 <HAL_SPI_Receive+0x11e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c592:	f000 80af 	beq.w	800c6f4 <HAL_SPI_Receive+0x28c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c596:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800c598:	3800      	subs	r0, #0
 800c59a:	bf18      	it	ne
 800c59c:	2001      	movne	r0, #1
error :
 800c59e:	e780      	b.n	800c4a2 <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c5a0:	6883      	ldr	r3, [r0, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f47f af6c 	bne.w	800c480 <HAL_SPI_Receive+0x18>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c5a8:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c5aa:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c5ac:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c5ae:	f880 505d 	strb.w	r5, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c5b2:	460a      	mov	r2, r1
 800c5b4:	f7ff fdd6 	bl	800c164 <HAL_SPI_TransmitReceive>
 800c5b8:	e779      	b.n	800c4ae <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 800c5ba:	2002      	movs	r0, #2
}
 800c5bc:	b004      	add	sp, #16
 800c5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (hspi->RxXferCount > 0U)
 800c5c2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800c5c6:	b292      	uxth	r2, r2
 800c5c8:	2a00      	cmp	r2, #0
 800c5ca:	d0c6      	beq.n	800c55a <HAL_SPI_Receive+0xf2>
 800c5cc:	1c6a      	adds	r2, r5, #1
 800c5ce:	d131      	bne.n	800c634 <HAL_SPI_Receive+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c5d0:	688b      	ldr	r3, [r1, #8]
 800c5d2:	07df      	lsls	r7, r3, #31
 800c5d4:	d514      	bpl.n	800c600 <HAL_SPI_Receive+0x198>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c5d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c5d8:	68ca      	ldr	r2, [r1, #12]
 800c5da:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 800c5de:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5e2:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c5e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c5e8:	fa1f fc8c 	uxth.w	ip, ip
 800c5ec:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c5f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0af      	beq.n	800c55a <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c5fa:	688b      	ldr	r3, [r1, #8]
 800c5fc:	07df      	lsls	r7, r3, #31
 800c5fe:	d4ea      	bmi.n	800c5d6 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c600:	f7fa fe6e 	bl	80072e0 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800c604:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c608:	b29b      	uxth	r3, r3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0a5      	beq.n	800c55a <HAL_SPI_Receive+0xf2>
 800c60e:	6821      	ldr	r1, [r4, #0]
 800c610:	e7de      	b.n	800c5d0 <HAL_SPI_Receive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c612:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800c61a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c61e:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c620:	3b01      	subs	r3, #1
 800c622:	b29b      	uxth	r3, r3
 800c624:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c628:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d093      	beq.n	800c55a <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	689a      	ldr	r2, [r3, #8]
 800c636:	07d7      	lsls	r7, r2, #31
 800c638:	d4eb      	bmi.n	800c612 <HAL_SPI_Receive+0x1aa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c63a:	f7fa fe51 	bl	80072e0 <HAL_GetTick>
 800c63e:	1b83      	subs	r3, r0, r6
 800c640:	42ab      	cmp	r3, r5
 800c642:	d22e      	bcs.n	800c6a2 <HAL_SPI_Receive+0x23a>
 800c644:	e7f0      	b.n	800c628 <HAL_SPI_Receive+0x1c0>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c646:	f7fa fe4b 	bl	80072e0 <HAL_GetTick>
 800c64a:	eba0 0008 	sub.w	r0, r0, r8
 800c64e:	42b8      	cmp	r0, r7
 800c650:	d267      	bcs.n	800c722 <HAL_SPI_Receive+0x2ba>
      if(count == 0U)
 800c652:	9a03      	ldr	r2, [sp, #12]
      count--;
 800c654:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800c656:	2a00      	cmp	r2, #0
      count--;
 800c658:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c65c:	6822      	ldr	r2, [r4, #0]
      count--;
 800c65e:	9303      	str	r3, [sp, #12]
        tmp_timeout = 0U;
 800c660:	bf08      	it	eq
 800c662:	2700      	moveq	r7, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c664:	6893      	ldr	r3, [r2, #8]
 800c666:	061b      	lsls	r3, r3, #24
 800c668:	d4ed      	bmi.n	800c646 <HAL_SPI_Receive+0x1de>
 800c66a:	e78f      	b.n	800c58c <HAL_SPI_Receive+0x124>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c66c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c66e:	7b1b      	ldrb	r3, [r3, #12]
 800c670:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800c672:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c676:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c678:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c67a:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800c67c:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c67e:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800c680:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800c684:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800c688:	b29b      	uxth	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f43f af65 	beq.w	800c55a <HAL_SPI_Receive+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	689a      	ldr	r2, [r3, #8]
 800c694:	07d2      	lsls	r2, r2, #31
 800c696:	d4e9      	bmi.n	800c66c <HAL_SPI_Receive+0x204>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c698:	f7fa fe22 	bl	80072e0 <HAL_GetTick>
 800c69c:	1b83      	subs	r3, r0, r6
 800c69e:	42ab      	cmp	r3, r5
 800c6a0:	d3f0      	bcc.n	800c684 <HAL_SPI_Receive+0x21c>
          errorcode = HAL_TIMEOUT;
 800c6a2:	2003      	movs	r0, #3
 800c6a4:	e6fd      	b.n	800c4a2 <HAL_SPI_Receive+0x3a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c6a6:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800c6aa:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6ac:	68a0      	ldr	r0, [r4, #8]
 800c6ae:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c6b2:	d004      	beq.n	800c6be <HAL_SPI_Receive+0x256>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6b4:	6808      	ldr	r0, [r1, #0]
 800c6b6:	0647      	lsls	r7, r0, #25
 800c6b8:	f57f af24 	bpl.w	800c504 <HAL_SPI_Receive+0x9c>
 800c6bc:	e729      	b.n	800c512 <HAL_SPI_Receive+0xaa>
    __HAL_SPI_DISABLE(hspi);
 800c6be:	6808      	ldr	r0, [r1, #0]
 800c6c0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800c6c4:	6008      	str	r0, [r1, #0]
    SPI_1LINE_RX(hspi);
 800c6c6:	6808      	ldr	r0, [r1, #0]
 800c6c8:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 800c6cc:	6008      	str	r0, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6ce:	6808      	ldr	r0, [r1, #0]
 800c6d0:	0640      	lsls	r0, r0, #25
 800c6d2:	f53f af1b 	bmi.w	800c50c <HAL_SPI_Receive+0xa4>
 800c6d6:	e715      	b.n	800c504 <HAL_SPI_Receive+0x9c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6d8:	68a3      	ldr	r3, [r4, #8]
 800c6da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6de:	d003      	beq.n	800c6e8 <HAL_SPI_Receive+0x280>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6e4:	f47f af3e 	bne.w	800c564 <HAL_SPI_Receive+0xfc>
    __HAL_SPI_DISABLE(hspi);
 800c6e8:	6822      	ldr	r2, [r4, #0]
 800c6ea:	6813      	ldr	r3, [r2, #0]
 800c6ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	e737      	b.n	800c564 <HAL_SPI_Receive+0xfc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6f4:	68a3      	ldr	r3, [r4, #8]
 800c6f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6fa:	d003      	beq.n	800c704 <HAL_SPI_Receive+0x29c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c700:	f47f af49 	bne.w	800c596 <HAL_SPI_Receive+0x12e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c704:	4632      	mov	r2, r6
 800c706:	4629      	mov	r1, r5
 800c708:	4620      	mov	r0, r4
 800c70a:	f7ff fa65 	bl	800bbd8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c70e:	2800      	cmp	r0, #0
 800c710:	f43f af41 	beq.w	800c596 <HAL_SPI_Receive+0x12e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c714:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800c716:	f043 0320 	orr.w	r3, r3, #32
 800c71a:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c71c:	2320      	movs	r3, #32
 800c71e:	6623      	str	r3, [r4, #96]	@ 0x60
 800c720:	e739      	b.n	800c596 <HAL_SPI_Receive+0x12e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c722:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c726:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c728:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c72c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c730:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c732:	d013      	beq.n	800c75c <HAL_SPI_Receive+0x2f4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c734:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c736:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800c73a:	d107      	bne.n	800c74c <HAL_SPI_Receive+0x2e4>
          SPI_RESET_CRC(hspi);
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c74a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800c74c:	2301      	movs	r3, #1
 800c74e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c752:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800c754:	f043 0320 	orr.w	r3, r3, #32
 800c758:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c75a:	e7df      	b.n	800c71c <HAL_SPI_Receive+0x2b4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c75c:	68a2      	ldr	r2, [r4, #8]
 800c75e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800c762:	d002      	beq.n	800c76a <HAL_SPI_Receive+0x302>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c764:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c768:	d1e4      	bne.n	800c734 <HAL_SPI_Receive+0x2cc>
          __HAL_SPI_DISABLE(hspi);
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c770:	601a      	str	r2, [r3, #0]
 800c772:	e7df      	b.n	800c734 <HAL_SPI_Receive+0x2cc>
 800c774:	200001e0 	.word	0x200001e0

0800c778 <HAL_SPI_GetState>:
  return hspi->State;
 800c778:	f890 005d 	ldrb.w	r0, [r0, #93]	@ 0x5d
}
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop

0800c780 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop

0800c784 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c784:	2800      	cmp	r0, #0
 800c786:	f000 8084 	beq.w	800c892 <HAL_TIM_Base_Init+0x10e>
{
 800c78a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c78c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c790:	4604      	mov	r4, r0
 800c792:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c796:	2b00      	cmp	r3, #0
 800c798:	d070      	beq.n	800c87c <HAL_TIM_Base_Init+0xf8>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c79a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c79c:	493e      	ldr	r1, [pc, #248]	@ (800c898 <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c79e:	2302      	movs	r3, #2
 800c7a0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7a4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800c7a6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7a8:	d054      	beq.n	800c854 <HAL_TIM_Base_Init+0xd0>
 800c7aa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800c7ae:	d024      	beq.n	800c7fa <HAL_TIM_Base_Init+0x76>
 800c7b0:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 800c7b4:	428a      	cmp	r2, r1
 800c7b6:	d020      	beq.n	800c7fa <HAL_TIM_Base_Init+0x76>
 800c7b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c7bc:	428a      	cmp	r2, r1
 800c7be:	d01c      	beq.n	800c7fa <HAL_TIM_Base_Init+0x76>
 800c7c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c7c4:	428a      	cmp	r2, r1
 800c7c6:	d018      	beq.n	800c7fa <HAL_TIM_Base_Init+0x76>
 800c7c8:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 800c7cc:	428a      	cmp	r2, r1
 800c7ce:	d041      	beq.n	800c854 <HAL_TIM_Base_Init+0xd0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7d0:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 800c7d4:	428a      	cmp	r2, r1
 800c7d6:	d056      	beq.n	800c886 <HAL_TIM_Base_Init+0x102>
 800c7d8:	4930      	ldr	r1, [pc, #192]	@ (800c89c <HAL_TIM_Base_Init+0x118>)
 800c7da:	428a      	cmp	r2, r1
 800c7dc:	d053      	beq.n	800c886 <HAL_TIM_Base_Init+0x102>
 800c7de:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c7e2:	428a      	cmp	r2, r1
 800c7e4:	d04f      	beq.n	800c886 <HAL_TIM_Base_Init+0x102>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7e6:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7e8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7ea:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7f0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800c7f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7f4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c7f6:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7f8:	e010      	b.n	800c81c <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 800c7fa:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7fc:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c802:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800c804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c808:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c80a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c80c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c810:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c812:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800c814:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800c816:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c818:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c81a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c81c:	2301      	movs	r3, #1
 800c81e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c820:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c824:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c828:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c82c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c830:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c83c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c840:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c844:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c848:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c84c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800c850:	2000      	movs	r0, #0
}
 800c852:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800c854:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c856:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c85c:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800c85e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c862:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c864:	69a1      	ldr	r1, [r4, #24]
 800c866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c86a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800c86c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c86e:	68e3      	ldr	r3, [r4, #12]
 800c870:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c872:	6863      	ldr	r3, [r4, #4]
 800c874:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800c876:	6963      	ldr	r3, [r4, #20]
 800c878:	6313      	str	r3, [r2, #48]	@ 0x30
 800c87a:	e7cf      	b.n	800c81c <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 800c87c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c880:	f7ff ff7e 	bl	800c780 <HAL_TIM_Base_MspInit>
 800c884:	e789      	b.n	800c79a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c886:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c888:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c88a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c88e:	4303      	orrs	r3, r0
 800c890:	e7e9      	b.n	800c866 <HAL_TIM_Base_Init+0xe2>
    return HAL_ERROR;
 800c892:	2001      	movs	r0, #1
}
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	40012c00 	.word	0x40012c00
 800c89c:	40014400 	.word	0x40014400

0800c8a0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c8a0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d126      	bne.n	800c8f6 <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8a8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8aa:	4919      	ldr	r1, [pc, #100]	@ (800c910 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8b2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8b4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8b6:	f042 0201 	orr.w	r2, r2, #1
 800c8ba:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8bc:	d01d      	beq.n	800c8fa <HAL_TIM_Base_Start_IT+0x5a>
 800c8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8c2:	d01a      	beq.n	800c8fa <HAL_TIM_Base_Start_IT+0x5a>
 800c8c4:	4a13      	ldr	r2, [pc, #76]	@ (800c914 <HAL_TIM_Base_Start_IT+0x74>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d017      	beq.n	800c8fa <HAL_TIM_Base_Start_IT+0x5a>
 800c8ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d013      	beq.n	800c8fa <HAL_TIM_Base_Start_IT+0x5a>
 800c8d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d00f      	beq.n	800c8fa <HAL_TIM_Base_Start_IT+0x5a>
 800c8da:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d00b      	beq.n	800c8fa <HAL_TIM_Base_Start_IT+0x5a>
 800c8e2:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d007      	beq.n	800c8fa <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	f042 0201 	orr.w	r2, r2, #1
 800c8f0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	4770      	bx	lr
    return HAL_ERROR;
 800c8f6:	2001      	movs	r0, #1
}
 800c8f8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8fa:	6899      	ldr	r1, [r3, #8]
 800c8fc:	4a06      	ldr	r2, [pc, #24]	@ (800c918 <HAL_TIM_Base_Start_IT+0x78>)
 800c8fe:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c900:	2a06      	cmp	r2, #6
 800c902:	d0f6      	beq.n	800c8f2 <HAL_TIM_Base_Start_IT+0x52>
 800c904:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c908:	d1ef      	bne.n	800c8ea <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 800c90a:	2000      	movs	r0, #0
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	40012c00 	.word	0x40012c00
 800c914:	40000400 	.word	0x40000400
 800c918:	00010007 	.word	0x00010007

0800c91c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c91c:	6803      	ldr	r3, [r0, #0]
 800c91e:	68da      	ldr	r2, [r3, #12]
 800c920:	f022 0201 	bic.w	r2, r2, #1
 800c924:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800c926:	6a1a      	ldr	r2, [r3, #32]
 800c928:	f241 1111 	movw	r1, #4369	@ 0x1111
 800c92c:	420a      	tst	r2, r1
 800c92e:	d108      	bne.n	800c942 <HAL_TIM_Base_Stop_IT+0x26>
 800c930:	6a19      	ldr	r1, [r3, #32]
 800c932:	f240 4244 	movw	r2, #1092	@ 0x444
 800c936:	4211      	tst	r1, r2
 800c938:	d103      	bne.n	800c942 <HAL_TIM_Base_Stop_IT+0x26>
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	f022 0201 	bic.w	r2, r2, #1
 800c940:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800c942:	2301      	movs	r3, #1
 800c944:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800c948:	2000      	movs	r0, #0
 800c94a:	4770      	bx	lr

0800c94c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop

0800c950 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop

0800c954 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop

0800c958 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop

0800c95c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c95c:	6803      	ldr	r3, [r0, #0]
 800c95e:	691a      	ldr	r2, [r3, #16]
 800c960:	0791      	lsls	r1, r2, #30
{
 800c962:	b510      	push	{r4, lr}
 800c964:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c966:	d502      	bpl.n	800c96e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c968:	68da      	ldr	r2, [r3, #12]
 800c96a:	0792      	lsls	r2, r2, #30
 800c96c:	d468      	bmi.n	800ca40 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c96e:	691a      	ldr	r2, [r3, #16]
 800c970:	0752      	lsls	r2, r2, #29
 800c972:	d502      	bpl.n	800c97a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c974:	68da      	ldr	r2, [r3, #12]
 800c976:	0750      	lsls	r0, r2, #29
 800c978:	d44f      	bmi.n	800ca1a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c97a:	691a      	ldr	r2, [r3, #16]
 800c97c:	0711      	lsls	r1, r2, #28
 800c97e:	d502      	bpl.n	800c986 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c980:	68da      	ldr	r2, [r3, #12]
 800c982:	0712      	lsls	r2, r2, #28
 800c984:	d437      	bmi.n	800c9f6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c986:	691a      	ldr	r2, [r3, #16]
 800c988:	06d0      	lsls	r0, r2, #27
 800c98a:	d502      	bpl.n	800c992 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c98c:	68da      	ldr	r2, [r3, #12]
 800c98e:	06d1      	lsls	r1, r2, #27
 800c990:	d41e      	bmi.n	800c9d0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c992:	691a      	ldr	r2, [r3, #16]
 800c994:	07d2      	lsls	r2, r2, #31
 800c996:	d502      	bpl.n	800c99e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	07d0      	lsls	r0, r2, #31
 800c99c:	d469      	bmi.n	800ca72 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c99e:	691a      	ldr	r2, [r3, #16]
 800c9a0:	0611      	lsls	r1, r2, #24
 800c9a2:	d502      	bpl.n	800c9aa <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9a4:	68da      	ldr	r2, [r3, #12]
 800c9a6:	0612      	lsls	r2, r2, #24
 800c9a8:	d46b      	bmi.n	800ca82 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9aa:	691a      	ldr	r2, [r3, #16]
 800c9ac:	05d0      	lsls	r0, r2, #23
 800c9ae:	d502      	bpl.n	800c9b6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	0611      	lsls	r1, r2, #24
 800c9b4:	d46d      	bmi.n	800ca92 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9b6:	691a      	ldr	r2, [r3, #16]
 800c9b8:	0652      	lsls	r2, r2, #25
 800c9ba:	d502      	bpl.n	800c9c2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c9bc:	68da      	ldr	r2, [r3, #12]
 800c9be:	0650      	lsls	r0, r2, #25
 800c9c0:	d46f      	bmi.n	800caa2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c9c2:	691a      	ldr	r2, [r3, #16]
 800c9c4:	0691      	lsls	r1, r2, #26
 800c9c6:	d502      	bpl.n	800c9ce <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c9c8:	68da      	ldr	r2, [r3, #12]
 800c9ca:	0692      	lsls	r2, r2, #26
 800c9cc:	d449      	bmi.n	800ca62 <HAL_TIM_IRQHandler+0x106>
}
 800c9ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9d0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9d4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9d6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9da:	69db      	ldr	r3, [r3, #28]
 800c9dc:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c9e0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9e2:	d16f      	bne.n	800cac4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9e4:	f7ff ffb2 	bl	800c94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f7ff ffb3 	bl	800c954 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ee:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9f0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9f2:	7722      	strb	r2, [r4, #28]
 800c9f4:	e7cd      	b.n	800c992 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c9f6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9fa:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c9fc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800ca04:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca06:	d15a      	bne.n	800cabe <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca08:	f7ff ffa0 	bl	800c94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f7ff ffa1 	bl	800c954 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca12:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ca14:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca16:	7722      	strb	r2, [r4, #28]
 800ca18:	e7b5      	b.n	800c986 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca1a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca1e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca20:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca22:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800ca2a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca2c:	d144      	bne.n	800cab8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca2e:	f7ff ff8d 	bl	800c94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca32:	4620      	mov	r0, r4
 800ca34:	f7ff ff8e 	bl	800c954 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca38:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca3a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca3c:	7722      	strb	r2, [r4, #28]
 800ca3e:	e79c      	b.n	800c97a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca40:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca44:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca46:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca48:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	0799      	lsls	r1, r3, #30
 800ca4e:	d130      	bne.n	800cab2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca50:	f7ff ff7c 	bl	800c94c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca54:	4620      	mov	r0, r4
 800ca56:	f7ff ff7d 	bl	800c954 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca5a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca5c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca5e:	7722      	strb	r2, [r4, #28]
 800ca60:	e785      	b.n	800c96e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca62:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ca66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca68:	611a      	str	r2, [r3, #16]
}
 800ca6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ca6e:	f000 b87d 	b.w	800cb6c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca72:	f06f 0201 	mvn.w	r2, #1
 800ca76:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f7f4 fb63 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	e78d      	b.n	800c99e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca82:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ca86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 f871 	bl	800cb70 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	e78b      	b.n	800c9aa <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ca96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f000 f86b 	bl	800cb74 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	e789      	b.n	800c9b6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800caa2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800caa6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800caa8:	4620      	mov	r0, r4
 800caaa:	f7ff ff55 	bl	800c958 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	e787      	b.n	800c9c2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800cab2:	f7ff ff4d 	bl	800c950 <HAL_TIM_IC_CaptureCallback>
 800cab6:	e7d0      	b.n	800ca5a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800cab8:	f7ff ff4a 	bl	800c950 <HAL_TIM_IC_CaptureCallback>
 800cabc:	e7bc      	b.n	800ca38 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800cabe:	f7ff ff47 	bl	800c950 <HAL_TIM_IC_CaptureCallback>
 800cac2:	e7a6      	b.n	800ca12 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800cac4:	f7ff ff44 	bl	800c950 <HAL_TIM_IC_CaptureCallback>
 800cac8:	e791      	b.n	800c9ee <HAL_TIM_IRQHandler+0x92>
 800caca:	bf00      	nop

0800cacc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cacc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800cad0:	2a01      	cmp	r2, #1
 800cad2:	d044      	beq.n	800cb5e <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cad4:	6802      	ldr	r2, [r0, #0]
{
 800cad6:	b470      	push	{r4, r5, r6}
 800cad8:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cada:	4e22      	ldr	r6, [pc, #136]	@ (800cb64 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cadc:	2002      	movs	r0, #2
 800cade:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cae2:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 800cae4:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cae6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800cae8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800caea:	d026      	beq.n	800cb3a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800caec:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 800caf0:	42b2      	cmp	r2, r6
 800caf2:	d02b      	beq.n	800cb4c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 800caf4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caf8:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cafa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800cafe:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb00:	d00e      	beq.n	800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800cb02:	4819      	ldr	r0, [pc, #100]	@ (800cb68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800cb04:	4282      	cmp	r2, r0
 800cb06:	d00b      	beq.n	800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800cb08:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800cb0c:	4282      	cmp	r2, r0
 800cb0e:	d007      	beq.n	800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800cb10:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800cb14:	4282      	cmp	r2, r0
 800cb16:	d003      	beq.n	800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800cb18:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 800cb1c:	4282      	cmp	r2, r0
 800cb1e:	d104      	bne.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb20:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb22:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb26:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb28:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800cb2a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800cb32:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800cb36:	bc70      	pop	{r4, r5, r6}
 800cb38:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb3a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb3c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb40:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb42:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb46:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800cb48:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb4a:	e7e9      	b.n	800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb4c:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb4e:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb52:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb54:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb58:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 800cb5a:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb5c:	e7e0      	b.n	800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 800cb5e:	2002      	movs	r0, #2
}
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	40012c00 	.word	0x40012c00
 800cb68:	40000400 	.word	0x40000400

0800cb6c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop

0800cb70 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop

0800cb74 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop

0800cb78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb7c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb7e:	6882      	ldr	r2, [r0, #8]
 800cb80:	6900      	ldr	r0, [r0, #16]
 800cb82:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb84:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb86:	4302      	orrs	r2, r0
 800cb88:	430a      	orrs	r2, r1
 800cb8a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb8c:	49a1      	ldr	r1, [pc, #644]	@ (800ce14 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb8e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb90:	4029      	ands	r1, r5
 800cb92:	430a      	orrs	r2, r1
 800cb94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	68e1      	ldr	r1, [r4, #12]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb9a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb9c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800cba0:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cba2:	499d      	ldr	r1, [pc, #628]	@ (800ce18 <UART_SetConfig+0x2a0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cba4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cba6:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cba8:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbaa:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cbac:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800cbb0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cbb4:	f000 80d3 	beq.w	800cd5e <UART_SetConfig+0x1e6>
    tmpreg |= huart->Init.OneBitSampling;
 800cbb8:	6a26      	ldr	r6, [r4, #32]
 800cbba:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cbbc:	430a      	orrs	r2, r1
 800cbbe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cbc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbc2:	f022 020f 	bic.w	r2, r2, #15
 800cbc6:	432a      	orrs	r2, r5
 800cbc8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbca:	4a94      	ldr	r2, [pc, #592]	@ (800ce1c <UART_SetConfig+0x2a4>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d039      	beq.n	800cc44 <UART_SetConfig+0xcc>
 800cbd0:	4a93      	ldr	r2, [pc, #588]	@ (800ce20 <UART_SetConfig+0x2a8>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d012      	beq.n	800cbfc <UART_SetConfig+0x84>
 800cbd6:	4a93      	ldr	r2, [pc, #588]	@ (800ce24 <UART_SetConfig+0x2ac>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	f000 80a8 	beq.w	800cd2e <UART_SetConfig+0x1b6>
 800cbde:	4a92      	ldr	r2, [pc, #584]	@ (800ce28 <UART_SetConfig+0x2b0>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d043      	beq.n	800cc6c <UART_SetConfig+0xf4>
 800cbe4:	4a91      	ldr	r2, [pc, #580]	@ (800ce2c <UART_SetConfig+0x2b4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	f000 8091 	beq.w	800cd0e <UART_SetConfig+0x196>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 800cbec:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cbee:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800cbf0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 800cbf4:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 800cbf8:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 800cbfa:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbfc:	4b8c      	ldr	r3, [pc, #560]	@ (800ce30 <UART_SetConfig+0x2b8>)
 800cbfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc02:	f003 030c 	and.w	r3, r3, #12
 800cc06:	2b0c      	cmp	r3, #12
 800cc08:	d8f0      	bhi.n	800cbec <UART_SetConfig+0x74>
 800cc0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc10 <UART_SetConfig+0x98>)
 800cc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc10:	0800cd23 	.word	0x0800cd23
 800cc14:	0800cbed 	.word	0x0800cbed
 800cc18:	0800cbed 	.word	0x0800cbed
 800cc1c:	0800cbed 	.word	0x0800cbed
 800cc20:	0800cc85 	.word	0x0800cc85
 800cc24:	0800cbed 	.word	0x0800cbed
 800cc28:	0800cbed 	.word	0x0800cbed
 800cc2c:	0800cbed 	.word	0x0800cbed
 800cc30:	0800cccf 	.word	0x0800cccf
 800cc34:	0800cbed 	.word	0x0800cbed
 800cc38:	0800cbed 	.word	0x0800cbed
 800cc3c:	0800cbed 	.word	0x0800cbed
 800cc40:	0800cc9d 	.word	0x0800cc9d
 800cc44:	4b7a      	ldr	r3, [pc, #488]	@ (800ce30 <UART_SetConfig+0x2b8>)
 800cc46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc4a:	f003 0303 	and.w	r3, r3, #3
 800cc4e:	2b02      	cmp	r3, #2
 800cc50:	d03d      	beq.n	800ccce <UART_SetConfig+0x156>
 800cc52:	2b03      	cmp	r3, #3
 800cc54:	d022      	beq.n	800cc9c <UART_SetConfig+0x124>
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d014      	beq.n	800cc84 <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc5a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cc5e:	f000 80d0 	beq.w	800ce02 <UART_SetConfig+0x28a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc62:	f7fd f945 	bl	8009ef0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800cc66:	b9a8      	cbnz	r0, 800cc94 <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e7c0      	b.n	800cbee <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc6c:	4b70      	ldr	r3, [pc, #448]	@ (800ce30 <UART_SetConfig+0x2b8>)
 800cc6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cc76:	2b80      	cmp	r3, #128	@ 0x80
 800cc78:	d029      	beq.n	800ccce <UART_SetConfig+0x156>
 800cc7a:	d865      	bhi.n	800cd48 <UART_SetConfig+0x1d0>
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d050      	beq.n	800cd22 <UART_SetConfig+0x1aa>
 800cc80:	2b40      	cmp	r3, #64	@ 0x40
 800cc82:	d1b3      	bne.n	800cbec <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc84:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cc88:	f000 80c0 	beq.w	800ce0c <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetSysClockFreq();
 800cc8c:	f7fc fca4 	bl	80095d8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d0e9      	beq.n	800cc68 <UART_SetConfig+0xf0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc94:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cc96:	e006      	b.n	800cca6 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc98:	2b30      	cmp	r3, #48	@ 0x30
 800cc9a:	d1a7      	bne.n	800cbec <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cca0:	d019      	beq.n	800ccd6 <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 800cca2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cca6:	6863      	ldr	r3, [r4, #4]
 800cca8:	4a62      	ldr	r2, [pc, #392]	@ (800ce34 <UART_SetConfig+0x2bc>)
 800ccaa:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 800ccae:	fbb0 f0f2 	udiv	r0, r0, r2
 800ccb2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800ccb6:	fbb0 f0f3 	udiv	r0, r0, r3
 800ccba:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccbc:	f1a0 0210 	sub.w	r2, r0, #16
 800ccc0:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d891      	bhi.n	800cbec <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	60d8      	str	r0, [r3, #12]
 800cccc:	e7cc      	b.n	800cc68 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccce:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800ccd2:	4859      	ldr	r0, [pc, #356]	@ (800ce38 <UART_SetConfig+0x2c0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccd4:	d1e7      	bne.n	800cca6 <UART_SetConfig+0x12e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccd6:	6862      	ldr	r2, [r4, #4]
 800ccd8:	4b56      	ldr	r3, [pc, #344]	@ (800ce34 <UART_SetConfig+0x2bc>)
 800ccda:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800ccde:	fbb0 f0f1 	udiv	r0, r0, r1
 800cce2:	0853      	lsrs	r3, r2, #1
 800cce4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800cce8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccec:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccee:	f1a2 0010 	sub.w	r0, r2, #16
 800ccf2:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 800ccf6:	4288      	cmp	r0, r1
 800ccf8:	f63f af78 	bhi.w	800cbec <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ccfc:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 800cd00:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd02:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd04:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	60cb      	str	r3, [r1, #12]
 800cd0c:	e7ac      	b.n	800cc68 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd0e:	4b48      	ldr	r3, [pc, #288]	@ (800ce30 <UART_SetConfig+0x2b8>)
 800cd10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd1c:	d0d7      	beq.n	800ccce <UART_SetConfig+0x156>
 800cd1e:	d81a      	bhi.n	800cd56 <UART_SetConfig+0x1de>
 800cd20:	b9ab      	cbnz	r3, 800cd4e <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd22:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cd26:	d065      	beq.n	800cdf4 <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd28:	f7fd f8d0 	bl	8009ecc <HAL_RCC_GetPCLK1Freq>
        break;
 800cd2c:	e79b      	b.n	800cc66 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd2e:	4b40      	ldr	r3, [pc, #256]	@ (800ce30 <UART_SetConfig+0x2b8>)
 800cd30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	d0c8      	beq.n	800ccce <UART_SetConfig+0x156>
 800cd3c:	d8ac      	bhi.n	800cc98 <UART_SetConfig+0x120>
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0ef      	beq.n	800cd22 <UART_SetConfig+0x1aa>
 800cd42:	2b10      	cmp	r3, #16
 800cd44:	d09e      	beq.n	800cc84 <UART_SetConfig+0x10c>
 800cd46:	e751      	b.n	800cbec <UART_SetConfig+0x74>
 800cd48:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd4a:	d0a7      	beq.n	800cc9c <UART_SetConfig+0x124>
 800cd4c:	e74e      	b.n	800cbec <UART_SetConfig+0x74>
 800cd4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd52:	d097      	beq.n	800cc84 <UART_SetConfig+0x10c>
 800cd54:	e74a      	b.n	800cbec <UART_SetConfig+0x74>
 800cd56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd5a:	d09f      	beq.n	800cc9c <UART_SetConfig+0x124>
 800cd5c:	e746      	b.n	800cbec <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd5e:	4311      	orrs	r1, r2
 800cd60:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd64:	4932      	ldr	r1, [pc, #200]	@ (800ce30 <UART_SetConfig+0x2b8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd66:	f022 020f 	bic.w	r2, r2, #15
 800cd6a:	432a      	orrs	r2, r5
 800cd6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800cd72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cd76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd7a:	d045      	beq.n	800ce08 <UART_SetConfig+0x290>
 800cd7c:	d833      	bhi.n	800cde6 <UART_SetConfig+0x26e>
 800cd7e:	b37b      	cbz	r3, 800cde0 <UART_SetConfig+0x268>
 800cd80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd84:	f47f af32 	bne.w	800cbec <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 800cd88:	f7fc fc26 	bl	80095d8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	f43f af6b 	beq.w	800cc68 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd92:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd94:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd96:	4b27      	ldr	r3, [pc, #156]	@ (800ce34 <UART_SetConfig+0x2bc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd98:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd9c:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 800cda0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cda4:	4299      	cmp	r1, r3
 800cda6:	f63f af21 	bhi.w	800cbec <UART_SetConfig+0x74>
 800cdaa:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 800cdae:	f63f af1d 	bhi.w	800cbec <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	f7f3 ff0f 	bl	8000bd8 <__aeabi_uldivmod>
 800cdba:	0872      	lsrs	r2, r6, #1
 800cdbc:	0203      	lsls	r3, r0, #8
 800cdbe:	0209      	lsls	r1, r1, #8
 800cdc0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800cdc4:	1898      	adds	r0, r3, r2
 800cdc6:	f141 0100 	adc.w	r1, r1, #0
 800cdca:	4632      	mov	r2, r6
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f7f3 ff03 	bl	8000bd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cdd2:	4b1a      	ldr	r3, [pc, #104]	@ (800ce3c <UART_SetConfig+0x2c4>)
 800cdd4:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	f63f af07 	bhi.w	800cbec <UART_SetConfig+0x74>
 800cdde:	e773      	b.n	800ccc8 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK1Freq();
 800cde0:	f7fd f874 	bl	8009ecc <HAL_RCC_GetPCLK1Freq>
        break;
 800cde4:	e7d2      	b.n	800cd8c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cde6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cdea:	f47f aeff 	bne.w	800cbec <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 800cdee:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cdf2:	e7cf      	b.n	800cd94 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdf4:	f7fd f86a 	bl	8009ecc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	f43f af35 	beq.w	800cc68 <UART_SetConfig+0xf0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdfe:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800ce00:	e769      	b.n	800ccd6 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce02:	f7fd f875 	bl	8009ef0 <HAL_RCC_GetPCLK2Freq>
        break;
 800ce06:	e7f7      	b.n	800cdf8 <UART_SetConfig+0x280>
        pclk = (uint32_t) HSI_VALUE;
 800ce08:	480b      	ldr	r0, [pc, #44]	@ (800ce38 <UART_SetConfig+0x2c0>)
 800ce0a:	e7c3      	b.n	800cd94 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 800ce0c:	f7fc fbe4 	bl	80095d8 <HAL_RCC_GetSysClockFreq>
        break;
 800ce10:	e7f2      	b.n	800cdf8 <UART_SetConfig+0x280>
 800ce12:	bf00      	nop
 800ce14:	cfff69f3 	.word	0xcfff69f3
 800ce18:	40008000 	.word	0x40008000
 800ce1c:	40013800 	.word	0x40013800
 800ce20:	40004400 	.word	0x40004400
 800ce24:	40004800 	.word	0x40004800
 800ce28:	40004c00 	.word	0x40004c00
 800ce2c:	40005000 	.word	0x40005000
 800ce30:	40021000 	.word	0x40021000
 800ce34:	08015478 	.word	0x08015478
 800ce38:	00f42400 	.word	0x00f42400
 800ce3c:	000ffcff 	.word	0x000ffcff

0800ce40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce40:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ce42:	07da      	lsls	r2, r3, #31
{
 800ce44:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce46:	d506      	bpl.n	800ce56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce48:	6801      	ldr	r1, [r0, #0]
 800ce4a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800ce4c:	684a      	ldr	r2, [r1, #4]
 800ce4e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ce52:	4322      	orrs	r2, r4
 800ce54:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce56:	079c      	lsls	r4, r3, #30
 800ce58:	d506      	bpl.n	800ce68 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce5a:	6801      	ldr	r1, [r0, #0]
 800ce5c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800ce5e:	684a      	ldr	r2, [r1, #4]
 800ce60:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ce64:	4322      	orrs	r2, r4
 800ce66:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce68:	0759      	lsls	r1, r3, #29
 800ce6a:	d506      	bpl.n	800ce7a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce6c:	6801      	ldr	r1, [r0, #0]
 800ce6e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800ce70:	684a      	ldr	r2, [r1, #4]
 800ce72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ce76:	4322      	orrs	r2, r4
 800ce78:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce7a:	071a      	lsls	r2, r3, #28
 800ce7c:	d506      	bpl.n	800ce8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce7e:	6801      	ldr	r1, [r0, #0]
 800ce80:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800ce82:	684a      	ldr	r2, [r1, #4]
 800ce84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ce88:	4322      	orrs	r2, r4
 800ce8a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce8c:	06dc      	lsls	r4, r3, #27
 800ce8e:	d506      	bpl.n	800ce9e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce90:	6801      	ldr	r1, [r0, #0]
 800ce92:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800ce94:	688a      	ldr	r2, [r1, #8]
 800ce96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ce9a:	4322      	orrs	r2, r4
 800ce9c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce9e:	0699      	lsls	r1, r3, #26
 800cea0:	d506      	bpl.n	800ceb0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cea2:	6801      	ldr	r1, [r0, #0]
 800cea4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800cea6:	688a      	ldr	r2, [r1, #8]
 800cea8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ceac:	4322      	orrs	r2, r4
 800ceae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ceb0:	065a      	lsls	r2, r3, #25
 800ceb2:	d509      	bpl.n	800cec8 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ceb4:	6801      	ldr	r1, [r0, #0]
 800ceb6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800ceb8:	684a      	ldr	r2, [r1, #4]
 800ceba:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800cebe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cec0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cec4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cec6:	d00b      	beq.n	800cee0 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cec8:	061b      	lsls	r3, r3, #24
 800ceca:	d506      	bpl.n	800ceda <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cecc:	6802      	ldr	r2, [r0, #0]
 800cece:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ced0:	6853      	ldr	r3, [r2, #4]
 800ced2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800ced6:	430b      	orrs	r3, r1
 800ced8:	6053      	str	r3, [r2, #4]
  }
}
 800ceda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cede:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cee0:	684a      	ldr	r2, [r1, #4]
 800cee2:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800cee4:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800cee8:	4322      	orrs	r2, r4
 800ceea:	604a      	str	r2, [r1, #4]
 800ceec:	e7ec      	b.n	800cec8 <UART_AdvFeatureConfig+0x88>
 800ceee:	bf00      	nop

0800cef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cef0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cef2:	2300      	movs	r3, #0
{
 800cef4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cef6:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cefa:	f7fa f9f1 	bl	80072e0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800cf04:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf06:	d40e      	bmi.n	800cf26 <UART_CheckIdleState+0x36>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	0752      	lsls	r2, r2, #29
 800cf0c:	d42f      	bmi.n	800cf6e <UART_CheckIdleState+0x7e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf0e:	2220      	movs	r2, #32
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf10:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800cf12:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800cf16:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800cf18:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf1c:	66e3      	str	r3, [r4, #108]	@ 0x6c
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800cf24:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf26:	69da      	ldr	r2, [r3, #28]
 800cf28:	0292      	lsls	r2, r2, #10
 800cf2a:	d4ed      	bmi.n	800cf08 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf2c:	f7fa f9d8 	bl	80072e0 <HAL_GetTick>
 800cf30:	1b43      	subs	r3, r0, r5
 800cf32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cf36:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf38:	d22a      	bcs.n	800cf90 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	0750      	lsls	r0, r2, #29
 800cf3e:	d5f2      	bpl.n	800cf26 <UART_CheckIdleState+0x36>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf40:	69da      	ldr	r2, [r3, #28]
 800cf42:	0511      	lsls	r1, r2, #20
 800cf44:	d5ef      	bpl.n	800cf26 <UART_CheckIdleState+0x36>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf4a:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cf4c:	6819      	ldr	r1, [r3, #0]
 800cf4e:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 800cf52:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf54:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800cf56:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf58:	f021 0101 	bic.w	r1, r1, #1
 800cf5c:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800cf5e:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cf62:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf66:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800cf6a:	2003      	movs	r0, #3
 800cf6c:	e7d7      	b.n	800cf1e <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	0258      	lsls	r0, r3, #9
 800cf72:	d4cc      	bmi.n	800cf0e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf74:	f7fa f9b4 	bl	80072e0 <HAL_GetTick>
 800cf78:	1b43      	subs	r3, r0, r5
 800cf7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cf7e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf80:	d206      	bcs.n	800cf90 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	0751      	lsls	r1, r2, #29
 800cf86:	d5f2      	bpl.n	800cf6e <UART_CheckIdleState+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf88:	69da      	ldr	r2, [r3, #28]
 800cf8a:	0512      	lsls	r2, r2, #20
 800cf8c:	d5ef      	bpl.n	800cf6e <UART_CheckIdleState+0x7e>
 800cf8e:	e7da      	b.n	800cf46 <UART_CheckIdleState+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800cf96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf98:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800cf9a:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf9c:	f022 0201 	bic.w	r2, r2, #1
 800cfa0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800cfa2:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cfa6:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800cfaa:	e7de      	b.n	800cf6a <UART_CheckIdleState+0x7a>

0800cfac <HAL_UART_Init>:
  if (huart == NULL)
 800cfac:	b380      	cbz	r0, 800d010 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800cfae:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800cfb2:	b510      	push	{r4, lr}
 800cfb4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800cfb6:	b333      	cbz	r3, 800d006 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800cfb8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cfba:	2324      	movs	r3, #36	@ 0x24
 800cfbc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800cfc0:	6813      	ldr	r3, [r2, #0]
 800cfc2:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfc6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800cfc8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfca:	f7ff fdd5 	bl	800cb78 <UART_SetConfig>
 800cfce:	2801      	cmp	r0, #1
 800cfd0:	d017      	beq.n	800d002 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cfd2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cfd4:	b98b      	cbnz	r3, 800cffa <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cfde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfe0:	689a      	ldr	r2, [r3, #8]
 800cfe2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cfe6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800cfee:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800cff0:	601a      	str	r2, [r3, #0]
}
 800cff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800cff6:	f7ff bf7b 	b.w	800cef0 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800cffa:	4620      	mov	r0, r4
 800cffc:	f7ff ff20 	bl	800ce40 <UART_AdvFeatureConfig>
 800d000:	e7e9      	b.n	800cfd6 <HAL_UART_Init+0x2a>
}
 800d002:	2001      	movs	r0, #1
 800d004:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800d006:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800d00a:	f7f4 fa13 	bl	8001434 <HAL_UART_MspInit>
 800d00e:	e7d3      	b.n	800cfb8 <HAL_UART_Init+0xc>
}
 800d010:	2001      	movs	r0, #1
 800d012:	4770      	bx	lr

0800d014 <UART_WaitOnFlagUntilTimeout>:
{
 800d014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d018:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d01c:	6804      	ldr	r4, [r0, #0]
 800d01e:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 800d022:	460d      	mov	r5, r1
 800d024:	4616      	mov	r6, r2
 800d026:	d10a      	bne.n	800d03e <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d028:	69e3      	ldr	r3, [r4, #28]
 800d02a:	ea35 0303 	bics.w	r3, r5, r3
 800d02e:	bf0c      	ite	eq
 800d030:	2301      	moveq	r3, #1
 800d032:	2300      	movne	r3, #0
 800d034:	42b3      	cmp	r3, r6
 800d036:	d0f7      	beq.n	800d028 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800d038:	2000      	movs	r0, #0
}
 800d03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d03e:	4607      	mov	r7, r0
 800d040:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d042:	69e2      	ldr	r2, [r4, #28]
 800d044:	ea35 0202 	bics.w	r2, r5, r2
 800d048:	bf0c      	ite	eq
 800d04a:	2301      	moveq	r3, #1
 800d04c:	2300      	movne	r3, #0
 800d04e:	42b3      	cmp	r3, r6
 800d050:	d1f2      	bne.n	800d038 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d052:	f7fa f945 	bl	80072e0 <HAL_GetTick>
 800d056:	eba0 0009 	sub.w	r0, r0, r9
 800d05a:	4540      	cmp	r0, r8
 800d05c:	d821      	bhi.n	800d0a2 <UART_WaitOnFlagUntilTimeout+0x8e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d05e:	683c      	ldr	r4, [r7, #0]
 800d060:	4623      	mov	r3, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d062:	f1b8 0f00 	cmp.w	r8, #0
 800d066:	d01d      	beq.n	800d0a4 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d068:	6823      	ldr	r3, [r4, #0]
 800d06a:	0759      	lsls	r1, r3, #29
 800d06c:	d5e9      	bpl.n	800d042 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d06e:	69e3      	ldr	r3, [r4, #28]
 800d070:	051a      	lsls	r2, r3, #20
 800d072:	d5e6      	bpl.n	800d042 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d074:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d078:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d07a:	6822      	ldr	r2, [r4, #0]
 800d07c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800d080:	6022      	str	r2, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d082:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d084:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d086:	f022 0201 	bic.w	r2, r2, #1
 800d08a:	60a2      	str	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d08c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d094:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        return HAL_TIMEOUT;
 800d09e:	2003      	movs	r0, #3
 800d0a0:	e7cb      	b.n	800d03a <UART_WaitOnFlagUntilTimeout+0x26>
 800d0a2:	683b      	ldr	r3, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800d0aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0ac:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d0ae:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0b0:	f022 0201 	bic.w	r2, r2, #1
 800d0b4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d0b6:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d0ba:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
        return HAL_TIMEOUT;
 800d0be:	e7eb      	b.n	800d098 <UART_WaitOnFlagUntilTimeout+0x84>

0800d0c0 <HAL_UART_Transmit>:
{
 800d0c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0c4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800d0c6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800d0ca:	2820      	cmp	r0, #32
{
 800d0cc:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800d0ce:	d17d      	bne.n	800d1cc <HAL_UART_Transmit+0x10c>
    if ((pData == NULL) || (Size == 0U))
 800d0d0:	4689      	mov	r9, r1
 800d0d2:	2900      	cmp	r1, #0
 800d0d4:	d047      	beq.n	800d166 <HAL_UART_Transmit+0xa6>
 800d0d6:	4617      	mov	r7, r2
 800d0d8:	2a00      	cmp	r2, #0
 800d0da:	d044      	beq.n	800d166 <HAL_UART_Transmit+0xa6>
 800d0dc:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800d0de:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d072      	beq.n	800d1cc <HAL_UART_Transmit+0x10c>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ec:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0f0:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0f2:	f8c4 808c 	str.w	r8, [r4, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0f6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    tickstart = HAL_GetTick();
 800d0fa:	f7fa f8f1 	bl	80072e0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0fe:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800d100:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800d108:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 800d10c:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d10e:	d061      	beq.n	800d1d4 <HAL_UART_Transmit+0x114>
      pdata16bits = NULL;
 800d110:	4647      	mov	r7, r8
    while (huart->TxXferCount > 0U)
 800d112:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
    __HAL_UNLOCK(huart);
 800d116:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800d118:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800d11a:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    while (huart->TxXferCount > 0U)
 800d11e:	b1b3      	cbz	r3, 800d14e <HAL_UART_Transmit+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d120:	6823      	ldr	r3, [r4, #0]
 800d122:	1c6a      	adds	r2, r5, #1
 800d124:	d123      	bne.n	800d16e <HAL_UART_Transmit+0xae>
 800d126:	69da      	ldr	r2, [r3, #28]
 800d128:	0611      	lsls	r1, r2, #24
 800d12a:	d5fc      	bpl.n	800d126 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 800d12c:	f1b9 0f00 	cmp.w	r9, #0
 800d130:	d047      	beq.n	800d1c2 <HAL_UART_Transmit+0x102>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d132:	f819 2b01 	ldrb.w	r2, [r9], #1
 800d136:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800d138:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800d13c:	3a01      	subs	r2, #1
 800d13e:	b292      	uxth	r2, r2
 800d140:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d144:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800d148:	b292      	uxth	r2, r2
 800d14a:	2a00      	cmp	r2, #0
 800d14c:	d1e9      	bne.n	800d122 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d14e:	9500      	str	r5, [sp, #0]
 800d150:	4633      	mov	r3, r6
 800d152:	2200      	movs	r2, #0
 800d154:	2140      	movs	r1, #64	@ 0x40
 800d156:	4620      	mov	r0, r4
 800d158:	f7ff ff5c 	bl	800d014 <UART_WaitOnFlagUntilTimeout>
 800d15c:	bb68      	cbnz	r0, 800d1ba <HAL_UART_Transmit+0xfa>
    huart->gState = HAL_UART_STATE_READY;
 800d15e:	2320      	movs	r3, #32
 800d160:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_OK;
 800d164:	e000      	b.n	800d168 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 800d166:	2001      	movs	r0, #1
}
 800d168:	b003      	add	sp, #12
 800d16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d16e:	69da      	ldr	r2, [r3, #28]
 800d170:	f012 0880 	ands.w	r8, r2, #128	@ 0x80
 800d174:	d1da      	bne.n	800d12c <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d176:	f7fa f8b3 	bl	80072e0 <HAL_GetTick>
 800d17a:	1b80      	subs	r0, r0, r6
 800d17c:	4285      	cmp	r5, r0
 800d17e:	d32f      	bcc.n	800d1e0 <HAL_UART_Transmit+0x120>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	461a      	mov	r2, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d184:	b36d      	cbz	r5, 800d1e2 <HAL_UART_Transmit+0x122>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	0752      	lsls	r2, r2, #29
 800d18a:	d5f0      	bpl.n	800d16e <HAL_UART_Transmit+0xae>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d18c:	69da      	ldr	r2, [r3, #28]
 800d18e:	0510      	lsls	r0, r2, #20
 800d190:	d5ed      	bpl.n	800d16e <HAL_UART_Transmit+0xae>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d196:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d198:	6819      	ldr	r1, [r3, #0]
 800d19a:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 800d19e:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a0:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d1a2:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a4:	f021 0101 	bic.w	r1, r1, #1
 800d1a8:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d1aa:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800d1ae:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d1b2:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d1b6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        return HAL_TIMEOUT;
 800d1ba:	2003      	movs	r0, #3
}
 800d1bc:	b003      	add	sp, #12
 800d1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1c2:	f837 2b02 	ldrh.w	r2, [r7], #2
 800d1c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1ca:	e7b4      	b.n	800d136 <HAL_UART_Transmit+0x76>
    __HAL_LOCK(huart);
 800d1cc:	2002      	movs	r0, #2
}
 800d1ce:	b003      	add	sp, #12
 800d1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1d4:	6923      	ldr	r3, [r4, #16]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d19a      	bne.n	800d110 <HAL_UART_Transmit+0x50>
 800d1da:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800d1dc:	4699      	mov	r9, r3
 800d1de:	e798      	b.n	800d112 <HAL_UART_Transmit+0x52>
 800d1e0:	6822      	ldr	r2, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d1e2:	6813      	ldr	r3, [r2, #0]
 800d1e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d1e8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ea:	6893      	ldr	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d1ec:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800d1ee:	2000      	movs	r0, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1f0:	f023 0301 	bic.w	r3, r3, #1
 800d1f4:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d1f6:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        __HAL_UNLOCK(huart);
 800d1fa:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d1fe:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800d202:	2003      	movs	r0, #3
 800d204:	e7da      	b.n	800d1bc <HAL_UART_Transmit+0xfc>
 800d206:	bf00      	nop

0800d208 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d208:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d017      	beq.n	800d240 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d210:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d212:	2324      	movs	r3, #36	@ 0x24
{
 800d214:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800d216:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d21a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d21c:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d21e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800d220:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d224:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800d228:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d22a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d22c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d22e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 800d232:	2220      	movs	r2, #32
 800d234:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  return HAL_OK;
}
 800d238:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800d23c:	4618      	mov	r0, r3
}
 800d23e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800d240:	2002      	movs	r0, #2
}
 800d242:	4770      	bx	lr

0800d244 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d244:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800d248:	2a01      	cmp	r2, #1
 800d24a:	d035      	beq.n	800d2b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>

  huart->gState = HAL_UART_STATE_BUSY;
 800d24c:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d24e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d250:	2024      	movs	r0, #36	@ 0x24
{
 800d252:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800d254:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d258:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d25a:	6810      	ldr	r0, [r2, #0]
 800d25c:	f020 0001 	bic.w	r0, r0, #1
 800d260:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d262:	6890      	ldr	r0, [r2, #8]
 800d264:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800d268:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d26a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d26c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d26e:	b300      	cbz	r0, 800d2b2 <HAL_UARTEx_SetTxFifoThreshold+0x6e>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d270:	6890      	ldr	r0, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d272:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d274:	4d11      	ldr	r5, [pc, #68]	@ (800d2bc <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d276:	0f49      	lsrs	r1, r1, #29
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d278:	f3c0 6c42 	ubfx	ip, r0, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d27c:	5c68      	ldrb	r0, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d27e:	4429      	add	r1, r5
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d280:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d282:	7a09      	ldrb	r1, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d284:	fbb0 f0f1 	udiv	r0, r0, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d288:	f815 100c 	ldrb.w	r1, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800d28c:	4465      	add	r5, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d28e:	00c9      	lsls	r1, r1, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d290:	7a2d      	ldrb	r5, [r5, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d292:	fbb1 f1f5 	udiv	r1, r1, r5
 800d296:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800d29a:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800d29c:	2520      	movs	r5, #32
 800d29e:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2a2:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800d2a4:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800d2a8:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d2aa:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 800d2ae:	bc30      	pop	{r4, r5}
 800d2b0:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800d2b2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d2b4:	4608      	mov	r0, r1
 800d2b6:	e7ee      	b.n	800d296 <HAL_UARTEx_SetTxFifoThreshold+0x52>
  __HAL_LOCK(huart);
 800d2b8:	2002      	movs	r0, #2
}
 800d2ba:	4770      	bx	lr
 800d2bc:	08015490 	.word	0x08015490

0800d2c0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800d2c0:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800d2c4:	2a01      	cmp	r2, #1
 800d2c6:	d035      	beq.n	800d334 <HAL_UARTEx_SetRxFifoThreshold+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 800d2c8:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2ca:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d2cc:	2024      	movs	r0, #36	@ 0x24
{
 800d2ce:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800d2d0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2d4:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d2d6:	6810      	ldr	r0, [r2, #0]
 800d2d8:	f020 0001 	bic.w	r0, r0, #1
 800d2dc:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2de:	6890      	ldr	r0, [r2, #8]
 800d2e0:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800d2e4:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2e6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2e8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2ea:	b300      	cbz	r0, 800d32e <HAL_UARTEx_SetRxFifoThreshold+0x6e>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2ec:	6890      	ldr	r0, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2ee:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2f0:	4d11      	ldr	r5, [pc, #68]	@ (800d338 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2f2:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2f4:	f3c0 6c42 	ubfx	ip, r0, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2f8:	5c68      	ldrb	r0, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2fa:	4429      	add	r1, r5
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2fc:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2fe:	7a09      	ldrb	r1, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d300:	fbb0 f0f1 	udiv	r0, r0, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d304:	f815 100c 	ldrb.w	r1, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800d308:	4465      	add	r5, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d30a:	00c9      	lsls	r1, r1, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d30c:	7a2d      	ldrb	r5, [r5, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d30e:	fbb1 f1f5 	udiv	r1, r1, r5
 800d312:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800d316:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800d318:	2520      	movs	r5, #32
 800d31a:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d31e:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800d320:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 800d324:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d326:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 800d32a:	bc30      	pop	{r4, r5}
 800d32c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800d32e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d330:	4608      	mov	r0, r1
 800d332:	e7ee      	b.n	800d312 <HAL_UARTEx_SetRxFifoThreshold+0x52>
  __HAL_LOCK(huart);
 800d334:	2002      	movs	r0, #2
}
 800d336:	4770      	bx	lr
 800d338:	08015490 	.word	0x08015490

0800d33c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d33c:	b084      	sub	sp, #16
 800d33e:	b410      	push	{r4}
 800d340:	f10d 0c08 	add.w	ip, sp, #8
 800d344:	e88c 000e 	stmia.w	ip, {r1, r2, r3}

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800d348:	460b      	mov	r3, r1
             Init.ClockPowerSave      |\
 800d34a:	e9dd 4103 	ldrd	r4, r1, [sp, #12]
{
 800d34e:	4602      	mov	r2, r0
  tmpreg |= (Init.ClockEdge           |\
 800d350:	4323      	orrs	r3, r4
             Init.BusWide             |\
 800d352:	9805      	ldr	r0, [sp, #20]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d354:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      |\
 800d356:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800d358:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             |\
 800d35a:	4303      	orrs	r3, r0
             Init.HardwareFlowControl |\
 800d35c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d35e:	4904      	ldr	r1, [pc, #16]	@ (800d370 <SDMMC_Init+0x34>)
 800d360:	4021      	ands	r1, r4

  return HAL_OK;
}
 800d362:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d366:	430b      	orrs	r3, r1
}
 800d368:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d36a:	6053      	str	r3, [r2, #4]
}
 800d36c:	b004      	add	sp, #16
 800d36e:	4770      	bx	lr
 800d370:	ffc02c00 	.word	0xffc02c00

0800d374 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d374:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop

0800d37c <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d37c:	680b      	ldr	r3, [r1, #0]
 800d37e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 800d382:	2000      	movs	r0, #0
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop

0800d388 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d388:	b508      	push	{r3, lr}
 800d38a:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d38c:	2002      	movs	r0, #2
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	f042 0203 	orr.w	r2, r2, #3
 800d394:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 800d396:	f7f9 ffa9 	bl	80072ec <HAL_Delay>

  return HAL_OK;
}
 800d39a:	2000      	movs	r0, #0
 800d39c:	bd08      	pop	{r3, pc}
 800d39e:	bf00      	nop

0800d3a0 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d3a0:	6800      	ldr	r0, [r0, #0]
}
 800d3a2:	f000 0003 	and.w	r0, r0, #3
 800d3a6:	4770      	bx	lr

0800d3a8 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d3a8:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800d3aa:	5840      	ldr	r0, [r0, r1]
}
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop

0800d3b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d3b0:	b410      	push	{r4}

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d3b2:	e9d1 4200 	ldrd	r4, r2, [r1]

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3b6:	688b      	ldr	r3, [r1, #8]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d3b8:	6244      	str	r4, [r0, #36]	@ 0x24
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3ba:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 800d3bc:	6282      	str	r2, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3be:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
                       Data->TransferMode  |\
 800d3c0:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d3c4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
                       Data->TransferDir   |\
 800d3c6:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d3c8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
                       Data->TransferMode  |\
 800d3cc:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 800d3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop

0800d3dc <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3dc:	4a4c      	ldr	r2, [pc, #304]	@ (800d510 <SDMMC_CmdBlockLength+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d3de:	4b4d      	ldr	r3, [pc, #308]	@ (800d514 <SDMMC_CmdBlockLength+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3e0:	6812      	ldr	r2, [r2, #0]
{
 800d3e2:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d3e4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d3e6:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3e8:	494b      	ldr	r1, [pc, #300]	@ (800d518 <SDMMC_CmdBlockLength+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d3ea:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3ec:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d3f0:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3f4:	0a52      	lsrs	r2, r2, #9
 800d3f6:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d3fa:	f043 0310 	orr.w	r3, r3, #16
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3fe:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d402:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800d404:	b152      	cbz	r2, 800d41c <SDMMC_CmdBlockLength+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d406:	4945      	ldr	r1, [pc, #276]	@ (800d51c <SDMMC_CmdBlockLength+0x140>)
 800d408:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d40a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d40c:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d40e:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d412:	d001      	beq.n	800d418 <SDMMC_CmdBlockLength+0x3c>
 800d414:	0492      	lsls	r2, r2, #18
 800d416:	d506      	bpl.n	800d426 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800d418:	1c5c      	adds	r4, r3, #1
 800d41a:	d1f6      	bne.n	800d40a <SDMMC_CmdBlockLength+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d41c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d420:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d424:	4770      	bx	lr
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d426:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d428:	075c      	lsls	r4, r3, #29
 800d42a:	d43c      	bmi.n	800d4a6 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d42c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d42e:	07d9      	lsls	r1, r3, #31
 800d430:	d407      	bmi.n	800d442 <SDMMC_CmdBlockLength+0x66>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d432:	4b3b      	ldr	r3, [pc, #236]	@ (800d520 <SDMMC_CmdBlockLength+0x144>)
 800d434:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d436:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b10      	cmp	r3, #16
 800d43c:	d004      	beq.n	800d448 <SDMMC_CmdBlockLength+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d43e:	2001      	movs	r0, #1
 800d440:	e7ee      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d442:	2301      	movs	r3, #1
 800d444:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d446:	e7fa      	b.n	800d43e <SDMMC_CmdBlockLength+0x62>
  return (*(__IO uint32_t *) tmp);
 800d448:	6943      	ldr	r3, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d44a:	4836      	ldr	r0, [pc, #216]	@ (800d524 <SDMMC_CmdBlockLength+0x148>)
 800d44c:	4018      	ands	r0, r3
 800d44e:	2800      	cmp	r0, #0
 800d450:	d0e6      	beq.n	800d420 <SDMMC_CmdBlockLength+0x44>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d452:	2b00      	cmp	r3, #0
 800d454:	db2b      	blt.n	800d4ae <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d456:	005a      	lsls	r2, r3, #1
 800d458:	d42c      	bmi.n	800d4b4 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d45a:	009c      	lsls	r4, r3, #2
 800d45c:	d42c      	bmi.n	800d4b8 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d45e:	00d9      	lsls	r1, r3, #3
 800d460:	d42c      	bmi.n	800d4bc <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d462:	011a      	lsls	r2, r3, #4
 800d464:	d42d      	bmi.n	800d4c2 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d466:	015c      	lsls	r4, r3, #5
 800d468:	d42e      	bmi.n	800d4c8 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d46a:	01d9      	lsls	r1, r3, #7
 800d46c:	d42f      	bmi.n	800d4ce <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d46e:	021a      	lsls	r2, r3, #8
 800d470:	d430      	bmi.n	800d4d4 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d472:	025c      	lsls	r4, r3, #9
 800d474:	d431      	bmi.n	800d4da <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d476:	0299      	lsls	r1, r3, #10
 800d478:	d43b      	bmi.n	800d4f2 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d47a:	02da      	lsls	r2, r3, #11
 800d47c:	d436      	bmi.n	800d4ec <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d47e:	035c      	lsls	r4, r3, #13
 800d480:	d431      	bmi.n	800d4e6 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d482:	0399      	lsls	r1, r3, #14
 800d484:	d42c      	bmi.n	800d4e0 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d486:	03da      	lsls	r2, r3, #15
 800d488:	d43f      	bmi.n	800d50a <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d48a:	041c      	lsls	r4, r3, #16
 800d48c:	d43a      	bmi.n	800d504 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d48e:	0459      	lsls	r1, r3, #17
 800d490:	d435      	bmi.n	800d4fe <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d492:	049a      	lsls	r2, r3, #18
 800d494:	d430      	bmi.n	800d4f8 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d496:	f013 0f08 	tst.w	r3, #8
 800d49a:	bf0c      	ite	eq
 800d49c:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d4a0:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d4a4:	e7bc      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d4a6:	2304      	movs	r3, #4
 800d4a8:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	e7b8      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d4ae:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d4b2:	e7b5      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d4b4:	2040      	movs	r0, #64	@ 0x40
 800d4b6:	e7b3      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d4b8:	2080      	movs	r0, #128	@ 0x80
 800d4ba:	e7b1      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d4bc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d4c0:	e7ae      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d4c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d4c6:	e7ab      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d4c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d4cc:	e7a8      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d4d2:	e7a5      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d4d8:	e7a2      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4da:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d4de:	e79f      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d4e0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d4e4:	e79c      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d4e6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d4ea:	e799      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d4ec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d4f0:	e796      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d4f2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d4f6:	e793      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d4f8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d4fc:	e790      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d4fe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d502:	e78d      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d504:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d508:	e78a      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d50a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d50e:	e787      	b.n	800d420 <SDMMC_CmdBlockLength+0x44>
 800d510:	200001e0 	.word	0x200001e0
 800d514:	fffee0c0 	.word	0xfffee0c0
 800d518:	10624dd3 	.word	0x10624dd3
 800d51c:	00200045 	.word	0x00200045
 800d520:	002000c5 	.word	0x002000c5
 800d524:	fdffe008 	.word	0xfdffe008

0800d528 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d528:	4a4c      	ldr	r2, [pc, #304]	@ (800d65c <SDMMC_CmdReadSingleBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d52a:	4b4d      	ldr	r3, [pc, #308]	@ (800d660 <SDMMC_CmdReadSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d52c:	6812      	ldr	r2, [r2, #0]
{
 800d52e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d530:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d532:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d534:	494b      	ldr	r1, [pc, #300]	@ (800d664 <SDMMC_CmdReadSingleBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d536:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d538:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d53c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d540:	0a52      	lsrs	r2, r2, #9
 800d542:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d546:	f043 0311 	orr.w	r3, r3, #17
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d54a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d54e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d550:	b152      	cbz	r2, 800d568 <SDMMC_CmdReadSingleBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d552:	4945      	ldr	r1, [pc, #276]	@ (800d668 <SDMMC_CmdReadSingleBlock+0x140>)
 800d554:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d556:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d558:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d55a:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d55e:	d001      	beq.n	800d564 <SDMMC_CmdReadSingleBlock+0x3c>
 800d560:	0492      	lsls	r2, r2, #18
 800d562:	d506      	bpl.n	800d572 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800d564:	1c5c      	adds	r4, r3, #1
 800d566:	d1f6      	bne.n	800d556 <SDMMC_CmdReadSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d568:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d56c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d570:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d572:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d574:	075c      	lsls	r4, r3, #29
 800d576:	d43c      	bmi.n	800d5f2 <SDMMC_CmdReadSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d578:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d57a:	07d9      	lsls	r1, r3, #31
 800d57c:	d407      	bmi.n	800d58e <SDMMC_CmdReadSingleBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d57e:	4b3b      	ldr	r3, [pc, #236]	@ (800d66c <SDMMC_CmdReadSingleBlock+0x144>)
 800d580:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d582:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2b11      	cmp	r3, #17
 800d588:	d004      	beq.n	800d594 <SDMMC_CmdReadSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d58a:	2001      	movs	r0, #1
 800d58c:	e7ee      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d58e:	2301      	movs	r3, #1
 800d590:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d592:	e7fa      	b.n	800d58a <SDMMC_CmdReadSingleBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d594:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d596:	4836      	ldr	r0, [pc, #216]	@ (800d670 <SDMMC_CmdReadSingleBlock+0x148>)
 800d598:	4018      	ands	r0, r3
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d0e6      	beq.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	db2b      	blt.n	800d5fa <SDMMC_CmdReadSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d5a2:	005a      	lsls	r2, r3, #1
 800d5a4:	d42c      	bmi.n	800d600 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d5a6:	009c      	lsls	r4, r3, #2
 800d5a8:	d42c      	bmi.n	800d604 <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d5aa:	00d9      	lsls	r1, r3, #3
 800d5ac:	d42c      	bmi.n	800d608 <SDMMC_CmdReadSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d5ae:	011a      	lsls	r2, r3, #4
 800d5b0:	d42d      	bmi.n	800d60e <SDMMC_CmdReadSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d5b2:	015c      	lsls	r4, r3, #5
 800d5b4:	d42e      	bmi.n	800d614 <SDMMC_CmdReadSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d5b6:	01d9      	lsls	r1, r3, #7
 800d5b8:	d42f      	bmi.n	800d61a <SDMMC_CmdReadSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d5ba:	021a      	lsls	r2, r3, #8
 800d5bc:	d430      	bmi.n	800d620 <SDMMC_CmdReadSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d5be:	025c      	lsls	r4, r3, #9
 800d5c0:	d431      	bmi.n	800d626 <SDMMC_CmdReadSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d5c2:	0299      	lsls	r1, r3, #10
 800d5c4:	d43b      	bmi.n	800d63e <SDMMC_CmdReadSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d5c6:	02da      	lsls	r2, r3, #11
 800d5c8:	d436      	bmi.n	800d638 <SDMMC_CmdReadSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d5ca:	035c      	lsls	r4, r3, #13
 800d5cc:	d431      	bmi.n	800d632 <SDMMC_CmdReadSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d5ce:	0399      	lsls	r1, r3, #14
 800d5d0:	d42c      	bmi.n	800d62c <SDMMC_CmdReadSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d5d2:	03da      	lsls	r2, r3, #15
 800d5d4:	d43f      	bmi.n	800d656 <SDMMC_CmdReadSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d5d6:	041c      	lsls	r4, r3, #16
 800d5d8:	d43a      	bmi.n	800d650 <SDMMC_CmdReadSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d5da:	0459      	lsls	r1, r3, #17
 800d5dc:	d435      	bmi.n	800d64a <SDMMC_CmdReadSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d5de:	049a      	lsls	r2, r3, #18
 800d5e0:	d430      	bmi.n	800d644 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d5e2:	f013 0f08 	tst.w	r3, #8
 800d5e6:	bf0c      	ite	eq
 800d5e8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d5ec:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d5f0:	e7bc      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5f2:	2304      	movs	r3, #4
 800d5f4:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	e7b8      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d5fa:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d5fe:	e7b5      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d600:	2040      	movs	r0, #64	@ 0x40
 800d602:	e7b3      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d604:	2080      	movs	r0, #128	@ 0x80
 800d606:	e7b1      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d608:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d60c:	e7ae      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d60e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d612:	e7ab      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d614:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d618:	e7a8      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d61a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d61e:	e7a5      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d620:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d624:	e7a2      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d626:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d62a:	e79f      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d62c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d630:	e79c      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d632:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d636:	e799      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d638:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d63c:	e796      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d63e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d642:	e793      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d644:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d648:	e790      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d64a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d64e:	e78d      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d650:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d654:	e78a      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d656:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d65a:	e787      	b.n	800d56c <SDMMC_CmdReadSingleBlock+0x44>
 800d65c:	200001e0 	.word	0x200001e0
 800d660:	fffee0c0 	.word	0xfffee0c0
 800d664:	10624dd3 	.word	0x10624dd3
 800d668:	00200045 	.word	0x00200045
 800d66c:	002000c5 	.word	0x002000c5
 800d670:	fdffe008 	.word	0xfdffe008

0800d674 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d674:	4a4c      	ldr	r2, [pc, #304]	@ (800d7a8 <SDMMC_CmdReadMultiBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d676:	4b4d      	ldr	r3, [pc, #308]	@ (800d7ac <SDMMC_CmdReadMultiBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d678:	6812      	ldr	r2, [r2, #0]
{
 800d67a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d67c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d67e:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d680:	494b      	ldr	r1, [pc, #300]	@ (800d7b0 <SDMMC_CmdReadMultiBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d682:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d684:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d688:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d68c:	0a52      	lsrs	r2, r2, #9
 800d68e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d692:	f043 0312 	orr.w	r3, r3, #18
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d696:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d69a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d69c:	b152      	cbz	r2, 800d6b4 <SDMMC_CmdReadMultiBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d69e:	4945      	ldr	r1, [pc, #276]	@ (800d7b4 <SDMMC_CmdReadMultiBlock+0x140>)
 800d6a0:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d6a2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d6a4:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d6a6:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d6aa:	d001      	beq.n	800d6b0 <SDMMC_CmdReadMultiBlock+0x3c>
 800d6ac:	0492      	lsls	r2, r2, #18
 800d6ae:	d506      	bpl.n	800d6be <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800d6b0:	1c5c      	adds	r4, r3, #1
 800d6b2:	d1f6      	bne.n	800d6a2 <SDMMC_CmdReadMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d6b4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6bc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d6c0:	075c      	lsls	r4, r3, #29
 800d6c2:	d43c      	bmi.n	800d73e <SDMMC_CmdReadMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6c4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d6c6:	07d9      	lsls	r1, r3, #31
 800d6c8:	d407      	bmi.n	800d6da <SDMMC_CmdReadMultiBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d6ca:	4b3b      	ldr	r3, [pc, #236]	@ (800d7b8 <SDMMC_CmdReadMultiBlock+0x144>)
 800d6cc:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d6ce:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b12      	cmp	r3, #18
 800d6d4:	d004      	beq.n	800d6e0 <SDMMC_CmdReadMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	e7ee      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6da:	2301      	movs	r3, #1
 800d6dc:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6de:	e7fa      	b.n	800d6d6 <SDMMC_CmdReadMultiBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d6e0:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d6e2:	4836      	ldr	r0, [pc, #216]	@ (800d7bc <SDMMC_CmdReadMultiBlock+0x148>)
 800d6e4:	4018      	ands	r0, r3
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d0e6      	beq.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	db2b      	blt.n	800d746 <SDMMC_CmdReadMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d6ee:	005a      	lsls	r2, r3, #1
 800d6f0:	d42c      	bmi.n	800d74c <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d6f2:	009c      	lsls	r4, r3, #2
 800d6f4:	d42c      	bmi.n	800d750 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d6f6:	00d9      	lsls	r1, r3, #3
 800d6f8:	d42c      	bmi.n	800d754 <SDMMC_CmdReadMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d6fa:	011a      	lsls	r2, r3, #4
 800d6fc:	d42d      	bmi.n	800d75a <SDMMC_CmdReadMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d6fe:	015c      	lsls	r4, r3, #5
 800d700:	d42e      	bmi.n	800d760 <SDMMC_CmdReadMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d702:	01d9      	lsls	r1, r3, #7
 800d704:	d42f      	bmi.n	800d766 <SDMMC_CmdReadMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d706:	021a      	lsls	r2, r3, #8
 800d708:	d430      	bmi.n	800d76c <SDMMC_CmdReadMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d70a:	025c      	lsls	r4, r3, #9
 800d70c:	d431      	bmi.n	800d772 <SDMMC_CmdReadMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d70e:	0299      	lsls	r1, r3, #10
 800d710:	d43b      	bmi.n	800d78a <SDMMC_CmdReadMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d712:	02da      	lsls	r2, r3, #11
 800d714:	d436      	bmi.n	800d784 <SDMMC_CmdReadMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d716:	035c      	lsls	r4, r3, #13
 800d718:	d431      	bmi.n	800d77e <SDMMC_CmdReadMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d71a:	0399      	lsls	r1, r3, #14
 800d71c:	d42c      	bmi.n	800d778 <SDMMC_CmdReadMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d71e:	03da      	lsls	r2, r3, #15
 800d720:	d43f      	bmi.n	800d7a2 <SDMMC_CmdReadMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d722:	041c      	lsls	r4, r3, #16
 800d724:	d43a      	bmi.n	800d79c <SDMMC_CmdReadMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d726:	0459      	lsls	r1, r3, #17
 800d728:	d435      	bmi.n	800d796 <SDMMC_CmdReadMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d72a:	049a      	lsls	r2, r3, #18
 800d72c:	d430      	bmi.n	800d790 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d72e:	f013 0f08 	tst.w	r3, #8
 800d732:	bf0c      	ite	eq
 800d734:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d738:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d73c:	e7bc      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d73e:	2304      	movs	r3, #4
 800d740:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d742:	4618      	mov	r0, r3
 800d744:	e7b8      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d746:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d74a:	e7b5      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d74c:	2040      	movs	r0, #64	@ 0x40
 800d74e:	e7b3      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d750:	2080      	movs	r0, #128	@ 0x80
 800d752:	e7b1      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d754:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d758:	e7ae      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d75a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d75e:	e7ab      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d760:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d764:	e7a8      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d766:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d76a:	e7a5      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d76c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d770:	e7a2      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d772:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d776:	e79f      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d778:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d77c:	e79c      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d77e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d782:	e799      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d784:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d788:	e796      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d78a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d78e:	e793      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d790:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d794:	e790      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d796:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d79a:	e78d      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d79c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d7a0:	e78a      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d7a2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d7a6:	e787      	b.n	800d6b8 <SDMMC_CmdReadMultiBlock+0x44>
 800d7a8:	200001e0 	.word	0x200001e0
 800d7ac:	fffee0c0 	.word	0xfffee0c0
 800d7b0:	10624dd3 	.word	0x10624dd3
 800d7b4:	00200045 	.word	0x00200045
 800d7b8:	002000c5 	.word	0x002000c5
 800d7bc:	fdffe008 	.word	0xfdffe008

0800d7c0 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7c0:	4a4c      	ldr	r2, [pc, #304]	@ (800d8f4 <SDMMC_CmdWriteSingleBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7c2:	4b4d      	ldr	r3, [pc, #308]	@ (800d8f8 <SDMMC_CmdWriteSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7c4:	6812      	ldr	r2, [r2, #0]
{
 800d7c6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d7c8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7ca:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7cc:	494b      	ldr	r1, [pc, #300]	@ (800d8fc <SDMMC_CmdWriteSingleBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7ce:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7d0:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7d4:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7d8:	0a52      	lsrs	r2, r2, #9
 800d7da:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7de:	f043 0318 	orr.w	r3, r3, #24
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7e2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7e6:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d7e8:	b152      	cbz	r2, 800d800 <SDMMC_CmdWriteSingleBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d7ea:	4945      	ldr	r1, [pc, #276]	@ (800d900 <SDMMC_CmdWriteSingleBlock+0x140>)
 800d7ec:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d7ee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d7f0:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d7f2:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d7f6:	d001      	beq.n	800d7fc <SDMMC_CmdWriteSingleBlock+0x3c>
 800d7f8:	0492      	lsls	r2, r2, #18
 800d7fa:	d506      	bpl.n	800d80a <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800d7fc:	1c5c      	adds	r4, r3, #1
 800d7fe:	d1f6      	bne.n	800d7ee <SDMMC_CmdWriteSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d800:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d804:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d808:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d80a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d80c:	075c      	lsls	r4, r3, #29
 800d80e:	d43c      	bmi.n	800d88a <SDMMC_CmdWriteSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d810:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d812:	07d9      	lsls	r1, r3, #31
 800d814:	d407      	bmi.n	800d826 <SDMMC_CmdWriteSingleBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d816:	4b3b      	ldr	r3, [pc, #236]	@ (800d904 <SDMMC_CmdWriteSingleBlock+0x144>)
 800d818:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d81a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	2b18      	cmp	r3, #24
 800d820:	d004      	beq.n	800d82c <SDMMC_CmdWriteSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d822:	2001      	movs	r0, #1
 800d824:	e7ee      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d826:	2301      	movs	r3, #1
 800d828:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d82a:	e7fa      	b.n	800d822 <SDMMC_CmdWriteSingleBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d82c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d82e:	4836      	ldr	r0, [pc, #216]	@ (800d908 <SDMMC_CmdWriteSingleBlock+0x148>)
 800d830:	4018      	ands	r0, r3
 800d832:	2800      	cmp	r0, #0
 800d834:	d0e6      	beq.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d836:	2b00      	cmp	r3, #0
 800d838:	db2b      	blt.n	800d892 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d83a:	005a      	lsls	r2, r3, #1
 800d83c:	d42c      	bmi.n	800d898 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d83e:	009c      	lsls	r4, r3, #2
 800d840:	d42c      	bmi.n	800d89c <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d842:	00d9      	lsls	r1, r3, #3
 800d844:	d42c      	bmi.n	800d8a0 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d846:	011a      	lsls	r2, r3, #4
 800d848:	d42d      	bmi.n	800d8a6 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d84a:	015c      	lsls	r4, r3, #5
 800d84c:	d42e      	bmi.n	800d8ac <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d84e:	01d9      	lsls	r1, r3, #7
 800d850:	d42f      	bmi.n	800d8b2 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d852:	021a      	lsls	r2, r3, #8
 800d854:	d430      	bmi.n	800d8b8 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d856:	025c      	lsls	r4, r3, #9
 800d858:	d431      	bmi.n	800d8be <SDMMC_CmdWriteSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d85a:	0299      	lsls	r1, r3, #10
 800d85c:	d43b      	bmi.n	800d8d6 <SDMMC_CmdWriteSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d85e:	02da      	lsls	r2, r3, #11
 800d860:	d436      	bmi.n	800d8d0 <SDMMC_CmdWriteSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d862:	035c      	lsls	r4, r3, #13
 800d864:	d431      	bmi.n	800d8ca <SDMMC_CmdWriteSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d866:	0399      	lsls	r1, r3, #14
 800d868:	d42c      	bmi.n	800d8c4 <SDMMC_CmdWriteSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d86a:	03da      	lsls	r2, r3, #15
 800d86c:	d43f      	bmi.n	800d8ee <SDMMC_CmdWriteSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d86e:	041c      	lsls	r4, r3, #16
 800d870:	d43a      	bmi.n	800d8e8 <SDMMC_CmdWriteSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d872:	0459      	lsls	r1, r3, #17
 800d874:	d435      	bmi.n	800d8e2 <SDMMC_CmdWriteSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d876:	049a      	lsls	r2, r3, #18
 800d878:	d430      	bmi.n	800d8dc <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d87a:	f013 0f08 	tst.w	r3, #8
 800d87e:	bf0c      	ite	eq
 800d880:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d884:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d888:	e7bc      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d88a:	2304      	movs	r3, #4
 800d88c:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d88e:	4618      	mov	r0, r3
 800d890:	e7b8      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d892:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d896:	e7b5      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d898:	2040      	movs	r0, #64	@ 0x40
 800d89a:	e7b3      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d89c:	2080      	movs	r0, #128	@ 0x80
 800d89e:	e7b1      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d8a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d8a4:	e7ae      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d8a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d8aa:	e7ab      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d8ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d8b0:	e7a8      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d8b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d8b6:	e7a5      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8b8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d8bc:	e7a2      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8be:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d8c2:	e79f      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d8c4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d8c8:	e79c      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d8ca:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d8ce:	e799      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d8d0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d8d4:	e796      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d8d6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d8da:	e793      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d8dc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d8e0:	e790      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d8e2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d8e6:	e78d      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d8e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d8ec:	e78a      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d8ee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d8f2:	e787      	b.n	800d804 <SDMMC_CmdWriteSingleBlock+0x44>
 800d8f4:	200001e0 	.word	0x200001e0
 800d8f8:	fffee0c0 	.word	0xfffee0c0
 800d8fc:	10624dd3 	.word	0x10624dd3
 800d900:	00200045 	.word	0x00200045
 800d904:	002000c5 	.word	0x002000c5
 800d908:	fdffe008 	.word	0xfdffe008

0800d90c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d90c:	4a4c      	ldr	r2, [pc, #304]	@ (800da40 <SDMMC_CmdWriteMultiBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d90e:	4b4d      	ldr	r3, [pc, #308]	@ (800da44 <SDMMC_CmdWriteMultiBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d910:	6812      	ldr	r2, [r2, #0]
{
 800d912:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d914:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d916:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d918:	494b      	ldr	r1, [pc, #300]	@ (800da48 <SDMMC_CmdWriteMultiBlock+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d91a:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d91c:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d920:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d924:	0a52      	lsrs	r2, r2, #9
 800d926:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d92a:	f043 0319 	orr.w	r3, r3, #25
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d92e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d932:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800d934:	b152      	cbz	r2, 800d94c <SDMMC_CmdWriteMultiBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d936:	4945      	ldr	r1, [pc, #276]	@ (800da4c <SDMMC_CmdWriteMultiBlock+0x140>)
 800d938:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d93a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d93c:	420a      	tst	r2, r1
    if (count-- == 0U)
 800d93e:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d942:	d001      	beq.n	800d948 <SDMMC_CmdWriteMultiBlock+0x3c>
 800d944:	0492      	lsls	r2, r2, #18
 800d946:	d506      	bpl.n	800d956 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800d948:	1c5c      	adds	r4, r3, #1
 800d94a:	d1f6      	bne.n	800d93a <SDMMC_CmdWriteMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d94c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d954:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d956:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d958:	075c      	lsls	r4, r3, #29
 800d95a:	d43c      	bmi.n	800d9d6 <SDMMC_CmdWriteMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d95c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d95e:	07d9      	lsls	r1, r3, #31
 800d960:	d407      	bmi.n	800d972 <SDMMC_CmdWriteMultiBlock+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d962:	4b3b      	ldr	r3, [pc, #236]	@ (800da50 <SDMMC_CmdWriteMultiBlock+0x144>)
 800d964:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d966:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	2b19      	cmp	r3, #25
 800d96c:	d004      	beq.n	800d978 <SDMMC_CmdWriteMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d96e:	2001      	movs	r0, #1
 800d970:	e7ee      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d972:	2301      	movs	r3, #1
 800d974:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d976:	e7fa      	b.n	800d96e <SDMMC_CmdWriteMultiBlock+0x62>
  return (*(__IO uint32_t *) tmp);
 800d978:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d97a:	4836      	ldr	r0, [pc, #216]	@ (800da54 <SDMMC_CmdWriteMultiBlock+0x148>)
 800d97c:	4018      	ands	r0, r3
 800d97e:	2800      	cmp	r0, #0
 800d980:	d0e6      	beq.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d982:	2b00      	cmp	r3, #0
 800d984:	db2b      	blt.n	800d9de <SDMMC_CmdWriteMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d986:	005a      	lsls	r2, r3, #1
 800d988:	d42c      	bmi.n	800d9e4 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d98a:	009c      	lsls	r4, r3, #2
 800d98c:	d42c      	bmi.n	800d9e8 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d98e:	00d9      	lsls	r1, r3, #3
 800d990:	d42c      	bmi.n	800d9ec <SDMMC_CmdWriteMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d992:	011a      	lsls	r2, r3, #4
 800d994:	d42d      	bmi.n	800d9f2 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d996:	015c      	lsls	r4, r3, #5
 800d998:	d42e      	bmi.n	800d9f8 <SDMMC_CmdWriteMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d99a:	01d9      	lsls	r1, r3, #7
 800d99c:	d42f      	bmi.n	800d9fe <SDMMC_CmdWriteMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d99e:	021a      	lsls	r2, r3, #8
 800d9a0:	d430      	bmi.n	800da04 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d9a2:	025c      	lsls	r4, r3, #9
 800d9a4:	d431      	bmi.n	800da0a <SDMMC_CmdWriteMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d9a6:	0299      	lsls	r1, r3, #10
 800d9a8:	d43b      	bmi.n	800da22 <SDMMC_CmdWriteMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d9aa:	02da      	lsls	r2, r3, #11
 800d9ac:	d436      	bmi.n	800da1c <SDMMC_CmdWriteMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d9ae:	035c      	lsls	r4, r3, #13
 800d9b0:	d431      	bmi.n	800da16 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d9b2:	0399      	lsls	r1, r3, #14
 800d9b4:	d42c      	bmi.n	800da10 <SDMMC_CmdWriteMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d9b6:	03da      	lsls	r2, r3, #15
 800d9b8:	d43f      	bmi.n	800da3a <SDMMC_CmdWriteMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d9ba:	041c      	lsls	r4, r3, #16
 800d9bc:	d43a      	bmi.n	800da34 <SDMMC_CmdWriteMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d9be:	0459      	lsls	r1, r3, #17
 800d9c0:	d435      	bmi.n	800da2e <SDMMC_CmdWriteMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d9c2:	049a      	lsls	r2, r3, #18
 800d9c4:	d430      	bmi.n	800da28 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d9c6:	f013 0f08 	tst.w	r3, #8
 800d9ca:	bf0c      	ite	eq
 800d9cc:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d9d0:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d9d4:	e7bc      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9d6:	2304      	movs	r3, #4
 800d9d8:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9da:	4618      	mov	r0, r3
 800d9dc:	e7b8      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d9de:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d9e2:	e7b5      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d9e4:	2040      	movs	r0, #64	@ 0x40
 800d9e6:	e7b3      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d9e8:	2080      	movs	r0, #128	@ 0x80
 800d9ea:	e7b1      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d9ec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d9f0:	e7ae      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d9f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d9f6:	e7ab      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d9f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d9fc:	e7a8      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d9fe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800da02:	e7a5      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800da08:	e7a2      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da0a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800da0e:	e79f      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800da10:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800da14:	e79c      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da16:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800da1a:	e799      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800da1c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800da20:	e796      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da22:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800da26:	e793      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800da28:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800da2c:	e790      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da2e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800da32:	e78d      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da34:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800da38:	e78a      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800da3a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800da3e:	e787      	b.n	800d950 <SDMMC_CmdWriteMultiBlock+0x44>
 800da40:	200001e0 	.word	0x200001e0
 800da44:	fffee0c0 	.word	0xfffee0c0
 800da48:	10624dd3 	.word	0x10624dd3
 800da4c:	00200045 	.word	0x00200045
 800da50:	002000c5 	.word	0x002000c5
 800da54:	fdffe008 	.word	0xfdffe008

0800da58 <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800da58:	68c3      	ldr	r3, [r0, #12]
{
 800da5a:	4601      	mov	r1, r0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800da5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
{
 800da60:	b410      	push	{r4}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800da62:	60cb      	str	r3, [r1, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800da64:	68ca      	ldr	r2, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800da66:	4c4f      	ldr	r4, [pc, #316]	@ (800dba4 <SDMMC_CmdStopTransfer+0x14c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da68:	4b4f      	ldr	r3, [pc, #316]	@ (800dba8 <SDMMC_CmdStopTransfer+0x150>)
  SDMMCx->ARG = Command->Argument;
 800da6a:	2000      	movs	r0, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800da6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800da70:	60ca      	str	r2, [r1, #12]
  SDMMCx->ARG = Command->Argument;
 800da72:	6088      	str	r0, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da74:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800da76:	6822      	ldr	r2, [r4, #0]
 800da78:	4c4c      	ldr	r4, [pc, #304]	@ (800dbac <SDMMC_CmdStopTransfer+0x154>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da7a:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800da7c:	484c      	ldr	r0, [pc, #304]	@ (800dbb0 <SDMMC_CmdStopTransfer+0x158>)
 800da7e:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da82:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800da86:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da88:	f043 030c 	orr.w	r3, r3, #12
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800da8c:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da90:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800da92:	b152      	cbz	r2, 800daaa <SDMMC_CmdStopTransfer+0x52>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800da94:	4847      	ldr	r0, [pc, #284]	@ (800dbb4 <SDMMC_CmdStopTransfer+0x15c>)
 800da96:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800da98:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800da9a:	4202      	tst	r2, r0
    if (count-- == 0U)
 800da9c:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800daa0:	d001      	beq.n	800daa6 <SDMMC_CmdStopTransfer+0x4e>
 800daa2:	0494      	lsls	r4, r2, #18
 800daa4:	d50a      	bpl.n	800dabc <SDMMC_CmdStopTransfer+0x64>
    if (count-- == 0U)
 800daa6:	1c5a      	adds	r2, r3, #1
 800daa8:	d1f6      	bne.n	800da98 <SDMMC_CmdStopTransfer+0x40>
      return SDMMC_ERROR_TIMEOUT;
 800daaa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800daae:	68cb      	ldr	r3, [r1, #12]
}
 800dab0:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dab4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dab8:	60cb      	str	r3, [r1, #12]
}
 800daba:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dabc:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800dabe:	075a      	lsls	r2, r3, #29
 800dac0:	d43c      	bmi.n	800db3c <SDMMC_CmdStopTransfer+0xe4>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dac2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800dac4:	07db      	lsls	r3, r3, #31
 800dac6:	d407      	bmi.n	800dad8 <SDMMC_CmdStopTransfer+0x80>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dac8:	4b3b      	ldr	r3, [pc, #236]	@ (800dbb8 <SDMMC_CmdStopTransfer+0x160>)
 800daca:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dacc:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b0c      	cmp	r3, #12
 800dad2:	d004      	beq.n	800dade <SDMMC_CmdStopTransfer+0x86>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dad4:	2001      	movs	r0, #1
 800dad6:	e7ea      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dad8:	2301      	movs	r3, #1
 800dada:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dadc:	e7fa      	b.n	800dad4 <SDMMC_CmdStopTransfer+0x7c>
  return (*(__IO uint32_t *) tmp);
 800dade:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dae0:	4836      	ldr	r0, [pc, #216]	@ (800dbbc <SDMMC_CmdStopTransfer+0x164>)
 800dae2:	4018      	ands	r0, r3
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d0e2      	beq.n	800daae <SDMMC_CmdStopTransfer+0x56>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dae8:	2b00      	cmp	r3, #0
 800daea:	db2a      	blt.n	800db42 <SDMMC_CmdStopTransfer+0xea>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800daec:	005c      	lsls	r4, r3, #1
 800daee:	d42b      	bmi.n	800db48 <SDMMC_CmdStopTransfer+0xf0>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800daf0:	009a      	lsls	r2, r3, #2
 800daf2:	d42b      	bmi.n	800db4c <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800daf4:	00dc      	lsls	r4, r3, #3
 800daf6:	d42b      	bmi.n	800db50 <SDMMC_CmdStopTransfer+0xf8>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800daf8:	011a      	lsls	r2, r3, #4
 800dafa:	d42c      	bmi.n	800db56 <SDMMC_CmdStopTransfer+0xfe>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dafc:	015c      	lsls	r4, r3, #5
 800dafe:	d42d      	bmi.n	800db5c <SDMMC_CmdStopTransfer+0x104>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800db00:	01da      	lsls	r2, r3, #7
 800db02:	d42e      	bmi.n	800db62 <SDMMC_CmdStopTransfer+0x10a>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800db04:	021c      	lsls	r4, r3, #8
 800db06:	d42f      	bmi.n	800db68 <SDMMC_CmdStopTransfer+0x110>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800db08:	025a      	lsls	r2, r3, #9
 800db0a:	d430      	bmi.n	800db6e <SDMMC_CmdStopTransfer+0x116>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800db0c:	029c      	lsls	r4, r3, #10
 800db0e:	d43a      	bmi.n	800db86 <SDMMC_CmdStopTransfer+0x12e>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800db10:	02da      	lsls	r2, r3, #11
 800db12:	d435      	bmi.n	800db80 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800db14:	035c      	lsls	r4, r3, #13
 800db16:	d430      	bmi.n	800db7a <SDMMC_CmdStopTransfer+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800db18:	039a      	lsls	r2, r3, #14
 800db1a:	d42b      	bmi.n	800db74 <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db1c:	03dc      	lsls	r4, r3, #15
 800db1e:	d43e      	bmi.n	800db9e <SDMMC_CmdStopTransfer+0x146>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db20:	041a      	lsls	r2, r3, #16
 800db22:	d439      	bmi.n	800db98 <SDMMC_CmdStopTransfer+0x140>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800db24:	045c      	lsls	r4, r3, #17
 800db26:	d434      	bmi.n	800db92 <SDMMC_CmdStopTransfer+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800db28:	049a      	lsls	r2, r3, #18
 800db2a:	d42f      	bmi.n	800db8c <SDMMC_CmdStopTransfer+0x134>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800db2c:	f013 0f08 	tst.w	r3, #8
 800db30:	bf0c      	ite	eq
 800db32:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800db36:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800db3a:	e7b8      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db3c:	2004      	movs	r0, #4
 800db3e:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db40:	e7b5      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800db42:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800db46:	e7b2      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800db48:	2040      	movs	r0, #64	@ 0x40
 800db4a:	e7b0      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800db4c:	2080      	movs	r0, #128	@ 0x80
 800db4e:	e7ae      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800db50:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800db54:	e7ab      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800db56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800db5a:	e7a8      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800db5c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800db60:	e7a5      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800db62:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800db66:	e7a2      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db68:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800db6c:	e79f      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db6e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800db72:	e79c      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800db74:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800db78:	e799      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800db7a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800db7e:	e796      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CC_ERR;
 800db80:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800db84:	e793      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800db86:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800db8a:	e790      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ERASE_RESET;
 800db8c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800db90:	e78d      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800db92:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800db96:	e78a      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800db98:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800db9c:	e787      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800db9e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800dba2:	e784      	b.n	800daae <SDMMC_CmdStopTransfer+0x56>
 800dba4:	200001e0 	.word	0x200001e0
 800dba8:	fffee0c0 	.word	0xfffee0c0
 800dbac:	05f5e100 	.word	0x05f5e100
 800dbb0:	10624dd3 	.word	0x10624dd3
 800dbb4:	00200045 	.word	0x00200045
 800dbb8:	002000c5 	.word	0x002000c5
 800dbbc:	fdffe008 	.word	0xfdffe008

0800dbc0 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dbc0:	494c      	ldr	r1, [pc, #304]	@ (800dcf4 <SDMMC_CmdSelDesel+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbc2:	4b4d      	ldr	r3, [pc, #308]	@ (800dcf8 <SDMMC_CmdSelDesel+0x138>)
{
 800dbc4:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dbc6:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbc8:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dbca:	680a      	ldr	r2, [r1, #0]
 800dbcc:	494b      	ldr	r1, [pc, #300]	@ (800dcfc <SDMMC_CmdSelDesel+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbce:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dbd0:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbd4:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dbd8:	0a52      	lsrs	r2, r2, #9
 800dbda:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbde:	f043 0307 	orr.w	r3, r3, #7
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dbe2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbe6:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dbe8:	b152      	cbz	r2, 800dc00 <SDMMC_CmdSelDesel+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dbea:	4945      	ldr	r1, [pc, #276]	@ (800dd00 <SDMMC_CmdSelDesel+0x140>)
 800dbec:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800dbee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dbf0:	420a      	tst	r2, r1
    if (count-- == 0U)
 800dbf2:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dbf6:	d001      	beq.n	800dbfc <SDMMC_CmdSelDesel+0x3c>
 800dbf8:	0492      	lsls	r2, r2, #18
 800dbfa:	d506      	bpl.n	800dc0a <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800dbfc:	1c5c      	adds	r4, r3, #1
 800dbfe:	d1f6      	bne.n	800dbee <SDMMC_CmdSelDesel+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800dc00:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dc04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc08:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc0a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dc0c:	075c      	lsls	r4, r3, #29
 800dc0e:	d43c      	bmi.n	800dc8a <SDMMC_CmdSelDesel+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc10:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dc12:	07d9      	lsls	r1, r3, #31
 800dc14:	d407      	bmi.n	800dc26 <SDMMC_CmdSelDesel+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc16:	4b3b      	ldr	r3, [pc, #236]	@ (800dd04 <SDMMC_CmdSelDesel+0x144>)
 800dc18:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dc1a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	2b07      	cmp	r3, #7
 800dc20:	d004      	beq.n	800dc2c <SDMMC_CmdSelDesel+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc22:	2001      	movs	r0, #1
 800dc24:	e7ee      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc26:	2301      	movs	r3, #1
 800dc28:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc2a:	e7fa      	b.n	800dc22 <SDMMC_CmdSelDesel+0x62>
  return (*(__IO uint32_t *) tmp);
 800dc2c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dc2e:	4836      	ldr	r0, [pc, #216]	@ (800dd08 <SDMMC_CmdSelDesel+0x148>)
 800dc30:	4018      	ands	r0, r3
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d0e6      	beq.n	800dc04 <SDMMC_CmdSelDesel+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	db2b      	blt.n	800dc92 <SDMMC_CmdSelDesel+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dc3a:	005a      	lsls	r2, r3, #1
 800dc3c:	d42c      	bmi.n	800dc98 <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dc3e:	009c      	lsls	r4, r3, #2
 800dc40:	d42c      	bmi.n	800dc9c <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dc42:	00d9      	lsls	r1, r3, #3
 800dc44:	d42c      	bmi.n	800dca0 <SDMMC_CmdSelDesel+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dc46:	011a      	lsls	r2, r3, #4
 800dc48:	d42d      	bmi.n	800dca6 <SDMMC_CmdSelDesel+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dc4a:	015c      	lsls	r4, r3, #5
 800dc4c:	d42e      	bmi.n	800dcac <SDMMC_CmdSelDesel+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dc4e:	01d9      	lsls	r1, r3, #7
 800dc50:	d42f      	bmi.n	800dcb2 <SDMMC_CmdSelDesel+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dc52:	021a      	lsls	r2, r3, #8
 800dc54:	d430      	bmi.n	800dcb8 <SDMMC_CmdSelDesel+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc56:	025c      	lsls	r4, r3, #9
 800dc58:	d431      	bmi.n	800dcbe <SDMMC_CmdSelDesel+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc5a:	0299      	lsls	r1, r3, #10
 800dc5c:	d43b      	bmi.n	800dcd6 <SDMMC_CmdSelDesel+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc5e:	02da      	lsls	r2, r3, #11
 800dc60:	d436      	bmi.n	800dcd0 <SDMMC_CmdSelDesel+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc62:	035c      	lsls	r4, r3, #13
 800dc64:	d431      	bmi.n	800dcca <SDMMC_CmdSelDesel+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc66:	0399      	lsls	r1, r3, #14
 800dc68:	d42c      	bmi.n	800dcc4 <SDMMC_CmdSelDesel+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc6a:	03da      	lsls	r2, r3, #15
 800dc6c:	d43f      	bmi.n	800dcee <SDMMC_CmdSelDesel+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc6e:	041c      	lsls	r4, r3, #16
 800dc70:	d43a      	bmi.n	800dce8 <SDMMC_CmdSelDesel+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dc72:	0459      	lsls	r1, r3, #17
 800dc74:	d435      	bmi.n	800dce2 <SDMMC_CmdSelDesel+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dc76:	049a      	lsls	r2, r3, #18
 800dc78:	d430      	bmi.n	800dcdc <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dc7a:	f013 0f08 	tst.w	r3, #8
 800dc7e:	bf0c      	ite	eq
 800dc80:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800dc84:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800dc88:	e7bc      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc8a:	2304      	movs	r3, #4
 800dc8c:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc8e:	4618      	mov	r0, r3
 800dc90:	e7b8      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dc92:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800dc96:	e7b5      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dc98:	2040      	movs	r0, #64	@ 0x40
 800dc9a:	e7b3      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dc9c:	2080      	movs	r0, #128	@ 0x80
 800dc9e:	e7b1      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dca0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dca4:	e7ae      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dca6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dcaa:	e7ab      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dcac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dcb0:	e7a8      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dcb2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dcb6:	e7a5      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dcb8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dcbc:	e7a2      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dcbe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dcc2:	e79f      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dcc4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dcc8:	e79c      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dcca:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dcce:	e799      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CC_ERR;
 800dcd0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800dcd4:	e796      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dcd6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dcda:	e793      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800dcdc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800dce0:	e790      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dce2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dce6:	e78d      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dce8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dcec:	e78a      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dcee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800dcf2:	e787      	b.n	800dc04 <SDMMC_CmdSelDesel+0x44>
 800dcf4:	200001e0 	.word	0x200001e0
 800dcf8:	fffee0c0 	.word	0xfffee0c0
 800dcfc:	10624dd3 	.word	0x10624dd3
 800dd00:	00200045 	.word	0x00200045
 800dd04:	002000c5 	.word	0x002000c5
 800dd08:	fdffe008 	.word	0xfdffe008

0800dd0c <SDMMC_CmdGoIdleState>:
  SDMMCx->ARG = Command->Argument;
 800dd0c:	2200      	movs	r2, #0
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd0e:	4b11      	ldr	r3, [pc, #68]	@ (800dd54 <SDMMC_CmdGoIdleState+0x48>)
 800dd10:	4911      	ldr	r1, [pc, #68]	@ (800dd58 <SDMMC_CmdGoIdleState+0x4c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
{
 800dd14:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dd16:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd18:	68c4      	ldr	r4, [r0, #12]
 800dd1a:	4a10      	ldr	r2, [pc, #64]	@ (800dd5c <SDMMC_CmdGoIdleState+0x50>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd1c:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd20:	4022      	ands	r2, r4
 800dd22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd26:	0a5b      	lsrs	r3, r3, #9
 800dd28:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd2c:	60c2      	str	r2, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd2e:	fb01 f303 	mul.w	r3, r1, r3
 800dd32:	e002      	b.n	800dd3a <SDMMC_CmdGoIdleState+0x2e>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dd34:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800dd36:	0612      	lsls	r2, r2, #24
 800dd38:	d406      	bmi.n	800dd48 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	d2fa      	bcs.n	800dd34 <SDMMC_CmdGoIdleState+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800dd3e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dd42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd46:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd48:	4b05      	ldr	r3, [pc, #20]	@ (800dd60 <SDMMC_CmdGoIdleState+0x54>)
 800dd4a:	6383      	str	r3, [r0, #56]	@ 0x38
}
 800dd4c:	f85d 4b04 	ldr.w	r4, [sp], #4

  return SDMMC_ERROR_NONE;
 800dd50:	2000      	movs	r0, #0
}
 800dd52:	4770      	bx	lr
 800dd54:	200001e0 	.word	0x200001e0
 800dd58:	10624dd3 	.word	0x10624dd3
 800dd5c:	fffee0c0 	.word	0xfffee0c0
 800dd60:	002000c5 	.word	0x002000c5

0800dd64 <SDMMC_CmdOperCond>:
  SDMMCx->ARG = Command->Argument;
 800dd64:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd68:	4a1c      	ldr	r2, [pc, #112]	@ (800dddc <SDMMC_CmdOperCond+0x78>)
{
 800dd6a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dd6c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd6e:	68c4      	ldr	r4, [r0, #12]
 800dd70:	4b1b      	ldr	r3, [pc, #108]	@ (800dde0 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd72:	6812      	ldr	r2, [r2, #0]
{
 800dd74:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd76:	481b      	ldr	r0, [pc, #108]	@ (800dde4 <SDMMC_CmdOperCond+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd78:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd7a:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd7e:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd82:	0a52      	lsrs	r2, r2, #9
 800dd84:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd88:	f043 0308 	orr.w	r3, r3, #8
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd8c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd90:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800dd92:	1e53      	subs	r3, r2, #1
 800dd94:	b14a      	cbz	r2, 800ddaa <SDMMC_CmdOperCond+0x46>
    sta_reg = SDMMCx->STA;
 800dd96:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd98:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800dd9c:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dda0:	d001      	beq.n	800dda6 <SDMMC_CmdOperCond+0x42>
 800dda2:	0490      	lsls	r0, r2, #18
 800dda4:	d506      	bpl.n	800ddb4 <SDMMC_CmdOperCond+0x50>
    if (count-- == 0U)
 800dda6:	1c5c      	adds	r4, r3, #1
 800dda8:	d1f5      	bne.n	800dd96 <SDMMC_CmdOperCond+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800ddaa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800ddae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ddb4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800ddb6:	075a      	lsls	r2, r3, #29
 800ddb8:	d40c      	bmi.n	800ddd4 <SDMMC_CmdOperCond+0x70>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ddba:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800ddbc:	f010 0001 	ands.w	r0, r0, #1
 800ddc0:	d105      	bne.n	800ddce <SDMMC_CmdOperCond+0x6a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ddc2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800ddc4:	065b      	lsls	r3, r3, #25
 800ddc6:	d5f2      	bpl.n	800ddae <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ddc8:	2340      	movs	r3, #64	@ 0x40
 800ddca:	638b      	str	r3, [r1, #56]	@ 0x38
 800ddcc:	e7ef      	b.n	800ddae <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ddce:	2301      	movs	r3, #1
 800ddd0:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddd2:	e7ec      	b.n	800ddae <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ddd4:	2004      	movs	r0, #4
 800ddd6:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddd8:	e7e9      	b.n	800ddae <SDMMC_CmdOperCond+0x4a>
 800ddda:	bf00      	nop
 800dddc:	200001e0 	.word	0x200001e0
 800dde0:	fffee0c0 	.word	0xfffee0c0
 800dde4:	10624dd3 	.word	0x10624dd3

0800dde8 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dde8:	4a4c      	ldr	r2, [pc, #304]	@ (800df1c <SDMMC_CmdAppCommand+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddea:	4b4d      	ldr	r3, [pc, #308]	@ (800df20 <SDMMC_CmdAppCommand+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ddec:	6812      	ldr	r2, [r2, #0]
{
 800ddee:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800ddf0:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddf2:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ddf4:	494b      	ldr	r1, [pc, #300]	@ (800df24 <SDMMC_CmdAppCommand+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddf6:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ddf8:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddfc:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800de00:	0a52      	lsrs	r2, r2, #9
 800de02:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de06:	f043 0317 	orr.w	r3, r3, #23
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800de0a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de0e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800de10:	b152      	cbz	r2, 800de28 <SDMMC_CmdAppCommand+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800de12:	4945      	ldr	r1, [pc, #276]	@ (800df28 <SDMMC_CmdAppCommand+0x140>)
 800de14:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800de16:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800de18:	420a      	tst	r2, r1
    if (count-- == 0U)
 800de1a:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800de1e:	d001      	beq.n	800de24 <SDMMC_CmdAppCommand+0x3c>
 800de20:	0492      	lsls	r2, r2, #18
 800de22:	d506      	bpl.n	800de32 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800de24:	1c5c      	adds	r4, r3, #1
 800de26:	d1f6      	bne.n	800de16 <SDMMC_CmdAppCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800de28:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800de2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de30:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de32:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800de34:	075c      	lsls	r4, r3, #29
 800de36:	d43c      	bmi.n	800deb2 <SDMMC_CmdAppCommand+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de38:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800de3a:	07d9      	lsls	r1, r3, #31
 800de3c:	d407      	bmi.n	800de4e <SDMMC_CmdAppCommand+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de3e:	4b3b      	ldr	r3, [pc, #236]	@ (800df2c <SDMMC_CmdAppCommand+0x144>)
 800de40:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800de42:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b37      	cmp	r3, #55	@ 0x37
 800de48:	d004      	beq.n	800de54 <SDMMC_CmdAppCommand+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de4a:	2001      	movs	r0, #1
 800de4c:	e7ee      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de4e:	2301      	movs	r3, #1
 800de50:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de52:	e7fa      	b.n	800de4a <SDMMC_CmdAppCommand+0x62>
  return (*(__IO uint32_t *) tmp);
 800de54:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de56:	4836      	ldr	r0, [pc, #216]	@ (800df30 <SDMMC_CmdAppCommand+0x148>)
 800de58:	4018      	ands	r0, r3
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d0e6      	beq.n	800de2c <SDMMC_CmdAppCommand+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de5e:	2b00      	cmp	r3, #0
 800de60:	db2b      	blt.n	800deba <SDMMC_CmdAppCommand+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800de62:	005a      	lsls	r2, r3, #1
 800de64:	d42c      	bmi.n	800dec0 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800de66:	009c      	lsls	r4, r3, #2
 800de68:	d42c      	bmi.n	800dec4 <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800de6a:	00d9      	lsls	r1, r3, #3
 800de6c:	d42c      	bmi.n	800dec8 <SDMMC_CmdAppCommand+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800de6e:	011a      	lsls	r2, r3, #4
 800de70:	d42d      	bmi.n	800dece <SDMMC_CmdAppCommand+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800de72:	015c      	lsls	r4, r3, #5
 800de74:	d42e      	bmi.n	800ded4 <SDMMC_CmdAppCommand+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800de76:	01d9      	lsls	r1, r3, #7
 800de78:	d42f      	bmi.n	800deda <SDMMC_CmdAppCommand+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de7a:	021a      	lsls	r2, r3, #8
 800de7c:	d430      	bmi.n	800dee0 <SDMMC_CmdAppCommand+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de7e:	025c      	lsls	r4, r3, #9
 800de80:	d431      	bmi.n	800dee6 <SDMMC_CmdAppCommand+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de82:	0299      	lsls	r1, r3, #10
 800de84:	d43b      	bmi.n	800defe <SDMMC_CmdAppCommand+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de86:	02da      	lsls	r2, r3, #11
 800de88:	d436      	bmi.n	800def8 <SDMMC_CmdAppCommand+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de8a:	035c      	lsls	r4, r3, #13
 800de8c:	d431      	bmi.n	800def2 <SDMMC_CmdAppCommand+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de8e:	0399      	lsls	r1, r3, #14
 800de90:	d42c      	bmi.n	800deec <SDMMC_CmdAppCommand+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800de92:	03da      	lsls	r2, r3, #15
 800de94:	d43f      	bmi.n	800df16 <SDMMC_CmdAppCommand+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800de96:	041c      	lsls	r4, r3, #16
 800de98:	d43a      	bmi.n	800df10 <SDMMC_CmdAppCommand+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de9a:	0459      	lsls	r1, r3, #17
 800de9c:	d435      	bmi.n	800df0a <SDMMC_CmdAppCommand+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de9e:	049a      	lsls	r2, r3, #18
 800dea0:	d430      	bmi.n	800df04 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dea2:	f013 0f08 	tst.w	r3, #8
 800dea6:	bf0c      	ite	eq
 800dea8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800deac:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800deb0:	e7bc      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800deb2:	2304      	movs	r3, #4
 800deb4:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800deb6:	4618      	mov	r0, r3
 800deb8:	e7b8      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800deba:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800debe:	e7b5      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dec0:	2040      	movs	r0, #64	@ 0x40
 800dec2:	e7b3      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dec4:	2080      	movs	r0, #128	@ 0x80
 800dec6:	e7b1      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dec8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800decc:	e7ae      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dece:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ded2:	e7ab      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ded4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ded8:	e7a8      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800deda:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dede:	e7a5      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dee0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dee4:	e7a2      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dee6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800deea:	e79f      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800deec:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800def0:	e79c      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800def2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800def6:	e799      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CC_ERR;
 800def8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800defc:	e796      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800defe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800df02:	e793      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800df04:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800df08:	e790      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800df0a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800df0e:	e78d      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800df10:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800df14:	e78a      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800df16:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800df1a:	e787      	b.n	800de2c <SDMMC_CmdAppCommand+0x44>
 800df1c:	200001e0 	.word	0x200001e0
 800df20:	fffee0c0 	.word	0xfffee0c0
 800df24:	10624dd3 	.word	0x10624dd3
 800df28:	00200045 	.word	0x00200045
 800df2c:	002000c5 	.word	0x002000c5
 800df30:	fdffe008 	.word	0xfdffe008

0800df34 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df34:	4a18      	ldr	r2, [pc, #96]	@ (800df98 <SDMMC_CmdAppOperCommand+0x64>)
  SDMMCx->ARG = Command->Argument;
 800df36:	6081      	str	r1, [r0, #8]
{
 800df38:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df3a:	4918      	ldr	r1, [pc, #96]	@ (800df9c <SDMMC_CmdAppOperCommand+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df3c:	68c0      	ldr	r0, [r0, #12]
 800df3e:	4b18      	ldr	r3, [pc, #96]	@ (800dfa0 <SDMMC_CmdAppOperCommand+0x6c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df40:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df42:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df44:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df48:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df4c:	0a52      	lsrs	r2, r2, #9
 800df4e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df52:	f043 0309 	orr.w	r3, r3, #9
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df56:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df5a:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800df5e:	1e53      	subs	r3, r2, #1
 800df60:	b152      	cbz	r2, 800df78 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800df62:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df66:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800df6a:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df6e:	d001      	beq.n	800df74 <SDMMC_CmdAppOperCommand+0x40>
 800df70:	0492      	lsls	r2, r2, #18
 800df72:	d504      	bpl.n	800df7e <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800df74:	1c59      	adds	r1, r3, #1
 800df76:	d1f4      	bne.n	800df62 <SDMMC_CmdAppOperCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800df78:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800df7c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df7e:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800df82:	f010 0004 	ands.w	r0, r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df86:	bf15      	itete	ne
 800df88:	2004      	movne	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df8a:	4b06      	ldreq	r3, [pc, #24]	@ (800dfa4 <SDMMC_CmdAppOperCommand+0x70>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df8c:	f8cc 0038 	strne.w	r0, [ip, #56]	@ 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df90:	f8cc 3038 	streq.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	200001e0 	.word	0x200001e0
 800df9c:	10624dd3 	.word	0x10624dd3
 800dfa0:	fffee0c0 	.word	0xfffee0c0
 800dfa4:	002000c5 	.word	0x002000c5

0800dfa8 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfa8:	4a4c      	ldr	r2, [pc, #304]	@ (800e0dc <SDMMC_CmdBusWidth+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfaa:	4b4d      	ldr	r3, [pc, #308]	@ (800e0e0 <SDMMC_CmdBusWidth+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfac:	6812      	ldr	r2, [r2, #0]
{
 800dfae:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dfb0:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfb2:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfb4:	494b      	ldr	r1, [pc, #300]	@ (800e0e4 <SDMMC_CmdBusWidth+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfb6:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfb8:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfbc:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfc0:	0a52      	lsrs	r2, r2, #9
 800dfc2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfc6:	f043 0306 	orr.w	r3, r3, #6
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfca:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfce:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dfd0:	b152      	cbz	r2, 800dfe8 <SDMMC_CmdBusWidth+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dfd2:	4945      	ldr	r1, [pc, #276]	@ (800e0e8 <SDMMC_CmdBusWidth+0x140>)
 800dfd4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800dfd6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dfd8:	420a      	tst	r2, r1
    if (count-- == 0U)
 800dfda:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dfde:	d001      	beq.n	800dfe4 <SDMMC_CmdBusWidth+0x3c>
 800dfe0:	0492      	lsls	r2, r2, #18
 800dfe2:	d506      	bpl.n	800dff2 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800dfe4:	1c5c      	adds	r4, r3, #1
 800dfe6:	d1f6      	bne.n	800dfd6 <SDMMC_CmdBusWidth+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800dfe8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dfec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dff0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dff2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dff4:	075c      	lsls	r4, r3, #29
 800dff6:	d43c      	bmi.n	800e072 <SDMMC_CmdBusWidth+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dff8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dffa:	07d9      	lsls	r1, r3, #31
 800dffc:	d407      	bmi.n	800e00e <SDMMC_CmdBusWidth+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dffe:	4b3b      	ldr	r3, [pc, #236]	@ (800e0ec <SDMMC_CmdBusWidth+0x144>)
 800e000:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e002:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e004:	b2db      	uxtb	r3, r3
 800e006:	2b06      	cmp	r3, #6
 800e008:	d004      	beq.n	800e014 <SDMMC_CmdBusWidth+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e00a:	2001      	movs	r0, #1
 800e00c:	e7ee      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e00e:	2301      	movs	r3, #1
 800e010:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e012:	e7fa      	b.n	800e00a <SDMMC_CmdBusWidth+0x62>
  return (*(__IO uint32_t *) tmp);
 800e014:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e016:	4836      	ldr	r0, [pc, #216]	@ (800e0f0 <SDMMC_CmdBusWidth+0x148>)
 800e018:	4018      	ands	r0, r3
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d0e6      	beq.n	800dfec <SDMMC_CmdBusWidth+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e01e:	2b00      	cmp	r3, #0
 800e020:	db2b      	blt.n	800e07a <SDMMC_CmdBusWidth+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e022:	005a      	lsls	r2, r3, #1
 800e024:	d42c      	bmi.n	800e080 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e026:	009c      	lsls	r4, r3, #2
 800e028:	d42c      	bmi.n	800e084 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e02a:	00d9      	lsls	r1, r3, #3
 800e02c:	d42c      	bmi.n	800e088 <SDMMC_CmdBusWidth+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e02e:	011a      	lsls	r2, r3, #4
 800e030:	d42d      	bmi.n	800e08e <SDMMC_CmdBusWidth+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e032:	015c      	lsls	r4, r3, #5
 800e034:	d42e      	bmi.n	800e094 <SDMMC_CmdBusWidth+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e036:	01d9      	lsls	r1, r3, #7
 800e038:	d42f      	bmi.n	800e09a <SDMMC_CmdBusWidth+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e03a:	021a      	lsls	r2, r3, #8
 800e03c:	d430      	bmi.n	800e0a0 <SDMMC_CmdBusWidth+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e03e:	025c      	lsls	r4, r3, #9
 800e040:	d431      	bmi.n	800e0a6 <SDMMC_CmdBusWidth+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e042:	0299      	lsls	r1, r3, #10
 800e044:	d43b      	bmi.n	800e0be <SDMMC_CmdBusWidth+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e046:	02da      	lsls	r2, r3, #11
 800e048:	d436      	bmi.n	800e0b8 <SDMMC_CmdBusWidth+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e04a:	035c      	lsls	r4, r3, #13
 800e04c:	d431      	bmi.n	800e0b2 <SDMMC_CmdBusWidth+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e04e:	0399      	lsls	r1, r3, #14
 800e050:	d42c      	bmi.n	800e0ac <SDMMC_CmdBusWidth+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e052:	03da      	lsls	r2, r3, #15
 800e054:	d43f      	bmi.n	800e0d6 <SDMMC_CmdBusWidth+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e056:	041c      	lsls	r4, r3, #16
 800e058:	d43a      	bmi.n	800e0d0 <SDMMC_CmdBusWidth+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e05a:	0459      	lsls	r1, r3, #17
 800e05c:	d435      	bmi.n	800e0ca <SDMMC_CmdBusWidth+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e05e:	049a      	lsls	r2, r3, #18
 800e060:	d430      	bmi.n	800e0c4 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e062:	f013 0f08 	tst.w	r3, #8
 800e066:	bf0c      	ite	eq
 800e068:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e06c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e070:	e7bc      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e072:	2304      	movs	r3, #4
 800e074:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e076:	4618      	mov	r0, r3
 800e078:	e7b8      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e07a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e07e:	e7b5      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e080:	2040      	movs	r0, #64	@ 0x40
 800e082:	e7b3      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e084:	2080      	movs	r0, #128	@ 0x80
 800e086:	e7b1      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e088:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e08c:	e7ae      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e08e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e092:	e7ab      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e094:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e098:	e7a8      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e09a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e09e:	e7a5      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e0a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e0a4:	e7a2      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e0a6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e0aa:	e79f      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e0ac:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e0b0:	e79c      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e0b2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e0b6:	e799      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CC_ERR;
 800e0b8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e0bc:	e796      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e0be:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e0c2:	e793      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800e0c4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e0c8:	e790      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e0ca:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e0ce:	e78d      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e0d0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e0d4:	e78a      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e0d6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e0da:	e787      	b.n	800dfec <SDMMC_CmdBusWidth+0x44>
 800e0dc:	200001e0 	.word	0x200001e0
 800e0e0:	fffee0c0 	.word	0xfffee0c0
 800e0e4:	10624dd3 	.word	0x10624dd3
 800e0e8:	00200045 	.word	0x00200045
 800e0ec:	002000c5 	.word	0x002000c5
 800e0f0:	fdffe008 	.word	0xfdffe008

0800e0f4 <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 800e0f4:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0f6:	4a4d      	ldr	r2, [pc, #308]	@ (800e22c <SDMMC_CmdSendSCR+0x138>)
 800e0f8:	494d      	ldr	r1, [pc, #308]	@ (800e230 <SDMMC_CmdSendSCR+0x13c>)
 800e0fa:	6812      	ldr	r2, [r2, #0]
{
 800e0fc:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e0fe:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e100:	68c4      	ldr	r4, [r0, #12]
 800e102:	4b4c      	ldr	r3, [pc, #304]	@ (800e234 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e104:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e108:	4023      	ands	r3, r4
 800e10a:	f443 5389 	orr.w	r3, r3, #4384	@ 0x1120
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e10e:	0a52      	lsrs	r2, r2, #9
 800e110:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e114:	f043 0313 	orr.w	r3, r3, #19
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e118:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e11c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e11e:	b152      	cbz	r2, 800e136 <SDMMC_CmdSendSCR+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e120:	4945      	ldr	r1, [pc, #276]	@ (800e238 <SDMMC_CmdSendSCR+0x144>)
 800e122:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e124:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e126:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e128:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e12c:	d001      	beq.n	800e132 <SDMMC_CmdSendSCR+0x3e>
 800e12e:	0492      	lsls	r2, r2, #18
 800e130:	d506      	bpl.n	800e140 <SDMMC_CmdSendSCR+0x4c>
    if (count-- == 0U)
 800e132:	1c5c      	adds	r4, r3, #1
 800e134:	d1f6      	bne.n	800e124 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e136:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e13e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e140:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e142:	075c      	lsls	r4, r3, #29
 800e144:	d43c      	bmi.n	800e1c0 <SDMMC_CmdSendSCR+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e146:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e148:	07d9      	lsls	r1, r3, #31
 800e14a:	d407      	bmi.n	800e15c <SDMMC_CmdSendSCR+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e14c:	4b3b      	ldr	r3, [pc, #236]	@ (800e23c <SDMMC_CmdSendSCR+0x148>)
 800e14e:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e150:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b33      	cmp	r3, #51	@ 0x33
 800e156:	d004      	beq.n	800e162 <SDMMC_CmdSendSCR+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e158:	2001      	movs	r0, #1
 800e15a:	e7ee      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e15c:	2301      	movs	r3, #1
 800e15e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e160:	e7fa      	b.n	800e158 <SDMMC_CmdSendSCR+0x64>
  return (*(__IO uint32_t *) tmp);
 800e162:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e164:	4836      	ldr	r0, [pc, #216]	@ (800e240 <SDMMC_CmdSendSCR+0x14c>)
 800e166:	4018      	ands	r0, r3
 800e168:	2800      	cmp	r0, #0
 800e16a:	d0e6      	beq.n	800e13a <SDMMC_CmdSendSCR+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	db2b      	blt.n	800e1c8 <SDMMC_CmdSendSCR+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e170:	005a      	lsls	r2, r3, #1
 800e172:	d42c      	bmi.n	800e1ce <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e174:	009c      	lsls	r4, r3, #2
 800e176:	d42c      	bmi.n	800e1d2 <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e178:	00d9      	lsls	r1, r3, #3
 800e17a:	d42c      	bmi.n	800e1d6 <SDMMC_CmdSendSCR+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e17c:	011a      	lsls	r2, r3, #4
 800e17e:	d42d      	bmi.n	800e1dc <SDMMC_CmdSendSCR+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e180:	015c      	lsls	r4, r3, #5
 800e182:	d42e      	bmi.n	800e1e2 <SDMMC_CmdSendSCR+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e184:	01d9      	lsls	r1, r3, #7
 800e186:	d42f      	bmi.n	800e1e8 <SDMMC_CmdSendSCR+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e188:	021a      	lsls	r2, r3, #8
 800e18a:	d430      	bmi.n	800e1ee <SDMMC_CmdSendSCR+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e18c:	025c      	lsls	r4, r3, #9
 800e18e:	d431      	bmi.n	800e1f4 <SDMMC_CmdSendSCR+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e190:	0299      	lsls	r1, r3, #10
 800e192:	d43b      	bmi.n	800e20c <SDMMC_CmdSendSCR+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e194:	02da      	lsls	r2, r3, #11
 800e196:	d436      	bmi.n	800e206 <SDMMC_CmdSendSCR+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e198:	035c      	lsls	r4, r3, #13
 800e19a:	d431      	bmi.n	800e200 <SDMMC_CmdSendSCR+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e19c:	0399      	lsls	r1, r3, #14
 800e19e:	d42c      	bmi.n	800e1fa <SDMMC_CmdSendSCR+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e1a0:	03da      	lsls	r2, r3, #15
 800e1a2:	d43f      	bmi.n	800e224 <SDMMC_CmdSendSCR+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e1a4:	041c      	lsls	r4, r3, #16
 800e1a6:	d43a      	bmi.n	800e21e <SDMMC_CmdSendSCR+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e1a8:	0459      	lsls	r1, r3, #17
 800e1aa:	d435      	bmi.n	800e218 <SDMMC_CmdSendSCR+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e1ac:	049a      	lsls	r2, r3, #18
 800e1ae:	d430      	bmi.n	800e212 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e1b0:	f013 0f08 	tst.w	r3, #8
 800e1b4:	bf0c      	ite	eq
 800e1b6:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e1ba:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e1be:	e7bc      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1c0:	2304      	movs	r3, #4
 800e1c2:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	e7b8      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e1c8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e1cc:	e7b5      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e1ce:	2040      	movs	r0, #64	@ 0x40
 800e1d0:	e7b3      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e1d2:	2080      	movs	r0, #128	@ 0x80
 800e1d4:	e7b1      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e1d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e1da:	e7ae      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e1dc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e1e0:	e7ab      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e1e2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e1e6:	e7a8      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e1e8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e1ec:	e7a5      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e1ee:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e1f2:	e7a2      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e1f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e1f8:	e79f      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e1fa:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e1fe:	e79c      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e200:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e204:	e799      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CC_ERR;
 800e206:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e20a:	e796      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e20c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e210:	e793      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800e212:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e216:	e790      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e218:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e21c:	e78d      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e21e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e222:	e78a      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e224:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e228:	e787      	b.n	800e13a <SDMMC_CmdSendSCR+0x46>
 800e22a:	bf00      	nop
 800e22c:	200001e0 	.word	0x200001e0
 800e230:	10624dd3 	.word	0x10624dd3
 800e234:	fffee0c0 	.word	0xfffee0c0
 800e238:	00200045 	.word	0x00200045
 800e23c:	002000c5 	.word	0x002000c5
 800e240:	fdffe008 	.word	0xfdffe008

0800e244 <SDMMC_CmdSendCID>:
  SDMMCx->ARG = Command->Argument;
 800e244:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e246:	4a1b      	ldr	r2, [pc, #108]	@ (800e2b4 <SDMMC_CmdSendCID+0x70>)
{
 800e248:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e24a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e24c:	68c4      	ldr	r4, [r0, #12]
 800e24e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b8 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e250:	6812      	ldr	r2, [r2, #0]
{
 800e252:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e254:	4819      	ldr	r0, [pc, #100]	@ (800e2bc <SDMMC_CmdSendCID+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e256:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e258:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e25c:	f443 5398 	orr.w	r3, r3, #4864	@ 0x1300
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e260:	0a52      	lsrs	r2, r2, #9
 800e262:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e266:	f043 0302 	orr.w	r3, r3, #2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e26a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e26e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800e270:	1e53      	subs	r3, r2, #1
 800e272:	b14a      	cbz	r2, 800e288 <SDMMC_CmdSendCID+0x44>
    sta_reg = SDMMCx->STA;
 800e274:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e276:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e27a:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e27e:	d001      	beq.n	800e284 <SDMMC_CmdSendCID+0x40>
 800e280:	0492      	lsls	r2, r2, #18
 800e282:	d506      	bpl.n	800e292 <SDMMC_CmdSendCID+0x4e>
    if (count-- == 0U)
 800e284:	1c58      	adds	r0, r3, #1
 800e286:	d1f5      	bne.n	800e274 <SDMMC_CmdSendCID+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e288:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e28c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e290:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e292:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800e294:	075b      	lsls	r3, r3, #29
 800e296:	d409      	bmi.n	800e2ac <SDMMC_CmdSendCID+0x68>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e298:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800e29a:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e29e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2a2:	bf0c      	ite	eq
 800e2a4:	4b06      	ldreq	r3, [pc, #24]	@ (800e2c0 <SDMMC_CmdSendCID+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2a6:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2a8:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800e2aa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2ac:	2004      	movs	r0, #4
 800e2ae:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2b0:	e7ec      	b.n	800e28c <SDMMC_CmdSendCID+0x48>
 800e2b2:	bf00      	nop
 800e2b4:	200001e0 	.word	0x200001e0
 800e2b8:	fffee0c0 	.word	0xfffee0c0
 800e2bc:	10624dd3 	.word	0x10624dd3
 800e2c0:	002000c5 	.word	0x002000c5

0800e2c4 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2c4:	4a1b      	ldr	r2, [pc, #108]	@ (800e334 <SDMMC_CmdSendCSD+0x70>)
  SDMMCx->ARG = Command->Argument;
 800e2c6:	6081      	str	r1, [r0, #8]
{
 800e2c8:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2ca:	491b      	ldr	r1, [pc, #108]	@ (800e338 <SDMMC_CmdSendCSD+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2cc:	68c0      	ldr	r0, [r0, #12]
 800e2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800e33c <SDMMC_CmdSendCSD+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2d0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2d2:	4003      	ands	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2d4:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2d8:	f443 5398 	orr.w	r3, r3, #4864	@ 0x1300
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2dc:	0a52      	lsrs	r2, r2, #9
 800e2de:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2e2:	f043 0309 	orr.w	r3, r3, #9
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2e6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2ea:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800e2ee:	1e53      	subs	r3, r2, #1
 800e2f0:	b152      	cbz	r2, 800e308 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800e2f2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2f6:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e2fa:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2fe:	d001      	beq.n	800e304 <SDMMC_CmdSendCSD+0x40>
 800e300:	0492      	lsls	r2, r2, #18
 800e302:	d504      	bpl.n	800e30e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800e304:	1c59      	adds	r1, r3, #1
 800e306:	d1f4      	bne.n	800e2f2 <SDMMC_CmdSendCSD+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e308:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e30c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e30e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800e312:	075b      	lsls	r3, r3, #29
 800e314:	d409      	bmi.n	800e32a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e316:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800e31a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e31e:	bf0c      	ite	eq
 800e320:	4b07      	ldreq	r3, [pc, #28]	@ (800e340 <SDMMC_CmdSendCSD+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e322:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e324:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800e328:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e32a:	2004      	movs	r0, #4
 800e32c:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	200001e0 	.word	0x200001e0
 800e338:	10624dd3 	.word	0x10624dd3
 800e33c:	fffee0c0 	.word	0xfffee0c0
 800e340:	002000c5 	.word	0x002000c5

0800e344 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800e344:	2300      	movs	r3, #0
{
 800e346:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e348:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e34a:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e34c:	4a25      	ldr	r2, [pc, #148]	@ (800e3e4 <SDMMC_CmdSetRelAdd+0xa0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e34e:	4b26      	ldr	r3, [pc, #152]	@ (800e3e8 <SDMMC_CmdSetRelAdd+0xa4>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e350:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e352:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e354:	4c25      	ldr	r4, [pc, #148]	@ (800e3ec <SDMMC_CmdSetRelAdd+0xa8>)
 800e356:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e35a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e35e:	0a52      	lsrs	r2, r2, #9
 800e360:	f241 3488 	movw	r4, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e364:	f043 0303 	orr.w	r3, r3, #3
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e368:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e36c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e36e:	1e53      	subs	r3, r2, #1
 800e370:	b14a      	cbz	r2, 800e386 <SDMMC_CmdSetRelAdd+0x42>
    sta_reg = SDMMCx->STA;
 800e372:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e374:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800e378:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e37c:	d001      	beq.n	800e382 <SDMMC_CmdSetRelAdd+0x3e>
 800e37e:	0492      	lsls	r2, r2, #18
 800e380:	d506      	bpl.n	800e390 <SDMMC_CmdSetRelAdd+0x4c>
    if (count-- == 0U)
 800e382:	1c5c      	adds	r4, r3, #1
 800e384:	d1f5      	bne.n	800e372 <SDMMC_CmdSetRelAdd+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e386:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e38e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e390:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e392:	075b      	lsls	r3, r3, #29
 800e394:	d41b      	bmi.n	800e3ce <SDMMC_CmdSetRelAdd+0x8a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e396:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e398:	07dc      	lsls	r4, r3, #31
 800e39a:	d405      	bmi.n	800e3a8 <SDMMC_CmdSetRelAdd+0x64>
  return (uint8_t)(SDMMCx->RESPCMD);
 800e39c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d004      	beq.n	800e3ae <SDMMC_CmdSetRelAdd+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3a4:	2001      	movs	r0, #1
 800e3a6:	e7f0      	b.n	800e38a <SDMMC_CmdSetRelAdd+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3ac:	e7fa      	b.n	800e3a4 <SDMMC_CmdSetRelAdd+0x60>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3ae:	4b10      	ldr	r3, [pc, #64]	@ (800e3f0 <SDMMC_CmdSetRelAdd+0xac>)
 800e3b0:	6383      	str	r3, [r0, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800e3b2:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e3b4:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800e3b8:	d010      	beq.n	800e3dc <SDMMC_CmdSetRelAdd+0x98>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e3ba:	045a      	lsls	r2, r3, #17
 800e3bc:	d40b      	bmi.n	800e3d6 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e3be:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800e3c2:	bf0c      	ite	eq
 800e3c4:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e3c8:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800e3cc:	e7dd      	b.n	800e38a <SDMMC_CmdSetRelAdd+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3ce:	2304      	movs	r3, #4
 800e3d0:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	e7d9      	b.n	800e38a <SDMMC_CmdSetRelAdd+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e3d6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e3da:	e7d6      	b.n	800e38a <SDMMC_CmdSetRelAdd+0x46>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e3dc:	0c1b      	lsrs	r3, r3, #16
 800e3de:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800e3e0:	e7d3      	b.n	800e38a <SDMMC_CmdSetRelAdd+0x46>
 800e3e2:	bf00      	nop
 800e3e4:	200001e0 	.word	0x200001e0
 800e3e8:	fffee0c0 	.word	0xfffee0c0
 800e3ec:	10624dd3 	.word	0x10624dd3
 800e3f0:	002000c5 	.word	0x002000c5

0800e3f4 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3f4:	4a4c      	ldr	r2, [pc, #304]	@ (800e528 <SDMMC_CmdSendStatus+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3f6:	4b4d      	ldr	r3, [pc, #308]	@ (800e52c <SDMMC_CmdSendStatus+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3f8:	6812      	ldr	r2, [r2, #0]
{
 800e3fa:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e3fc:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3fe:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e400:	494b      	ldr	r1, [pc, #300]	@ (800e530 <SDMMC_CmdSendStatus+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e402:	4023      	ands	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e404:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e408:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e40c:	0a52      	lsrs	r2, r2, #9
 800e40e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e412:	f043 030d 	orr.w	r3, r3, #13
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e416:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e41a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e41c:	b152      	cbz	r2, 800e434 <SDMMC_CmdSendStatus+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e41e:	4945      	ldr	r1, [pc, #276]	@ (800e534 <SDMMC_CmdSendStatus+0x140>)
 800e420:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e422:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e424:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e426:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e42a:	d001      	beq.n	800e430 <SDMMC_CmdSendStatus+0x3c>
 800e42c:	0492      	lsls	r2, r2, #18
 800e42e:	d506      	bpl.n	800e43e <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800e430:	1c5c      	adds	r4, r3, #1
 800e432:	d1f6      	bne.n	800e422 <SDMMC_CmdSendStatus+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e434:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e43c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e43e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e440:	075c      	lsls	r4, r3, #29
 800e442:	d43c      	bmi.n	800e4be <SDMMC_CmdSendStatus+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e444:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e446:	07d9      	lsls	r1, r3, #31
 800e448:	d407      	bmi.n	800e45a <SDMMC_CmdSendStatus+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e44a:	4b3b      	ldr	r3, [pc, #236]	@ (800e538 <SDMMC_CmdSendStatus+0x144>)
 800e44c:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e44e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b0d      	cmp	r3, #13
 800e454:	d004      	beq.n	800e460 <SDMMC_CmdSendStatus+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e456:	2001      	movs	r0, #1
 800e458:	e7ee      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e45a:	2301      	movs	r3, #1
 800e45c:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e45e:	e7fa      	b.n	800e456 <SDMMC_CmdSendStatus+0x62>
  return (*(__IO uint32_t *) tmp);
 800e460:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e462:	4836      	ldr	r0, [pc, #216]	@ (800e53c <SDMMC_CmdSendStatus+0x148>)
 800e464:	4018      	ands	r0, r3
 800e466:	2800      	cmp	r0, #0
 800e468:	d0e6      	beq.n	800e438 <SDMMC_CmdSendStatus+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	db2b      	blt.n	800e4c6 <SDMMC_CmdSendStatus+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e46e:	005a      	lsls	r2, r3, #1
 800e470:	d42c      	bmi.n	800e4cc <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e472:	009c      	lsls	r4, r3, #2
 800e474:	d42c      	bmi.n	800e4d0 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e476:	00d9      	lsls	r1, r3, #3
 800e478:	d42c      	bmi.n	800e4d4 <SDMMC_CmdSendStatus+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e47a:	011a      	lsls	r2, r3, #4
 800e47c:	d42d      	bmi.n	800e4da <SDMMC_CmdSendStatus+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e47e:	015c      	lsls	r4, r3, #5
 800e480:	d42e      	bmi.n	800e4e0 <SDMMC_CmdSendStatus+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e482:	01d9      	lsls	r1, r3, #7
 800e484:	d42f      	bmi.n	800e4e6 <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e486:	021a      	lsls	r2, r3, #8
 800e488:	d430      	bmi.n	800e4ec <SDMMC_CmdSendStatus+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e48a:	025c      	lsls	r4, r3, #9
 800e48c:	d431      	bmi.n	800e4f2 <SDMMC_CmdSendStatus+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e48e:	0299      	lsls	r1, r3, #10
 800e490:	d43b      	bmi.n	800e50a <SDMMC_CmdSendStatus+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e492:	02da      	lsls	r2, r3, #11
 800e494:	d436      	bmi.n	800e504 <SDMMC_CmdSendStatus+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e496:	035c      	lsls	r4, r3, #13
 800e498:	d431      	bmi.n	800e4fe <SDMMC_CmdSendStatus+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e49a:	0399      	lsls	r1, r3, #14
 800e49c:	d42c      	bmi.n	800e4f8 <SDMMC_CmdSendStatus+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e49e:	03da      	lsls	r2, r3, #15
 800e4a0:	d43f      	bmi.n	800e522 <SDMMC_CmdSendStatus+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e4a2:	041c      	lsls	r4, r3, #16
 800e4a4:	d43a      	bmi.n	800e51c <SDMMC_CmdSendStatus+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e4a6:	0459      	lsls	r1, r3, #17
 800e4a8:	d435      	bmi.n	800e516 <SDMMC_CmdSendStatus+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e4aa:	049a      	lsls	r2, r3, #18
 800e4ac:	d430      	bmi.n	800e510 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e4ae:	f013 0f08 	tst.w	r3, #8
 800e4b2:	bf0c      	ite	eq
 800e4b4:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e4b8:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e4bc:	e7bc      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4be:	2304      	movs	r3, #4
 800e4c0:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	e7b8      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e4c6:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e4ca:	e7b5      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e4cc:	2040      	movs	r0, #64	@ 0x40
 800e4ce:	e7b3      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e4d0:	2080      	movs	r0, #128	@ 0x80
 800e4d2:	e7b1      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e4d4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e4d8:	e7ae      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e4da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e4de:	e7ab      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e4e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e4e4:	e7a8      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e4e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e4ea:	e7a5      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e4ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e4f0:	e7a2      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e4f2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e4f6:	e79f      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e4f8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e4fc:	e79c      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e4fe:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e502:	e799      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CC_ERR;
 800e504:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e508:	e796      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e50a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e50e:	e793      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800e510:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e514:	e790      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e516:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e51a:	e78d      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e51c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e520:	e78a      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e522:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e526:	e787      	b.n	800e438 <SDMMC_CmdSendStatus+0x44>
 800e528:	200001e0 	.word	0x200001e0
 800e52c:	fffee0c0 	.word	0xfffee0c0
 800e530:	10624dd3 	.word	0x10624dd3
 800e534:	00200045 	.word	0x00200045
 800e538:	002000c5 	.word	0x002000c5
 800e53c:	fdffe008 	.word	0xfdffe008

0800e540 <SDMMC_CmdStatusRegister>:
  SDMMCx->ARG = Command->Argument;
 800e540:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e542:	4a4d      	ldr	r2, [pc, #308]	@ (800e678 <SDMMC_CmdStatusRegister+0x138>)
 800e544:	494d      	ldr	r1, [pc, #308]	@ (800e67c <SDMMC_CmdStatusRegister+0x13c>)
 800e546:	6812      	ldr	r2, [r2, #0]
{
 800e548:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e54a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e54c:	68c4      	ldr	r4, [r0, #12]
 800e54e:	4b4c      	ldr	r3, [pc, #304]	@ (800e680 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e550:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e554:	4023      	ands	r3, r4
 800e556:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e55a:	0a52      	lsrs	r2, r2, #9
 800e55c:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e560:	f043 030d 	orr.w	r3, r3, #13
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e564:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e568:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e56a:	b152      	cbz	r2, 800e582 <SDMMC_CmdStatusRegister+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e56c:	4945      	ldr	r1, [pc, #276]	@ (800e684 <SDMMC_CmdStatusRegister+0x144>)
 800e56e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e570:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e572:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e574:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e578:	d001      	beq.n	800e57e <SDMMC_CmdStatusRegister+0x3e>
 800e57a:	0492      	lsls	r2, r2, #18
 800e57c:	d506      	bpl.n	800e58c <SDMMC_CmdStatusRegister+0x4c>
    if (count-- == 0U)
 800e57e:	1c5c      	adds	r4, r3, #1
 800e580:	d1f6      	bne.n	800e570 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e582:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e58a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e58c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e58e:	075c      	lsls	r4, r3, #29
 800e590:	d43c      	bmi.n	800e60c <SDMMC_CmdStatusRegister+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e592:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e594:	07d9      	lsls	r1, r3, #31
 800e596:	d407      	bmi.n	800e5a8 <SDMMC_CmdStatusRegister+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e598:	4b3b      	ldr	r3, [pc, #236]	@ (800e688 <SDMMC_CmdStatusRegister+0x148>)
 800e59a:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e59c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b0d      	cmp	r3, #13
 800e5a2:	d004      	beq.n	800e5ae <SDMMC_CmdStatusRegister+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	e7ee      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5ac:	e7fa      	b.n	800e5a4 <SDMMC_CmdStatusRegister+0x64>
  return (*(__IO uint32_t *) tmp);
 800e5ae:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e5b0:	4836      	ldr	r0, [pc, #216]	@ (800e68c <SDMMC_CmdStatusRegister+0x14c>)
 800e5b2:	4018      	ands	r0, r3
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d0e6      	beq.n	800e586 <SDMMC_CmdStatusRegister+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	db2b      	blt.n	800e614 <SDMMC_CmdStatusRegister+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e5bc:	005a      	lsls	r2, r3, #1
 800e5be:	d42c      	bmi.n	800e61a <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e5c0:	009c      	lsls	r4, r3, #2
 800e5c2:	d42c      	bmi.n	800e61e <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e5c4:	00d9      	lsls	r1, r3, #3
 800e5c6:	d42c      	bmi.n	800e622 <SDMMC_CmdStatusRegister+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e5c8:	011a      	lsls	r2, r3, #4
 800e5ca:	d42d      	bmi.n	800e628 <SDMMC_CmdStatusRegister+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e5cc:	015c      	lsls	r4, r3, #5
 800e5ce:	d42e      	bmi.n	800e62e <SDMMC_CmdStatusRegister+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e5d0:	01d9      	lsls	r1, r3, #7
 800e5d2:	d42f      	bmi.n	800e634 <SDMMC_CmdStatusRegister+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e5d4:	021a      	lsls	r2, r3, #8
 800e5d6:	d430      	bmi.n	800e63a <SDMMC_CmdStatusRegister+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e5d8:	025c      	lsls	r4, r3, #9
 800e5da:	d431      	bmi.n	800e640 <SDMMC_CmdStatusRegister+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e5dc:	0299      	lsls	r1, r3, #10
 800e5de:	d43b      	bmi.n	800e658 <SDMMC_CmdStatusRegister+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e5e0:	02da      	lsls	r2, r3, #11
 800e5e2:	d436      	bmi.n	800e652 <SDMMC_CmdStatusRegister+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e5e4:	035c      	lsls	r4, r3, #13
 800e5e6:	d431      	bmi.n	800e64c <SDMMC_CmdStatusRegister+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e5e8:	0399      	lsls	r1, r3, #14
 800e5ea:	d42c      	bmi.n	800e646 <SDMMC_CmdStatusRegister+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e5ec:	03da      	lsls	r2, r3, #15
 800e5ee:	d43f      	bmi.n	800e670 <SDMMC_CmdStatusRegister+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e5f0:	041c      	lsls	r4, r3, #16
 800e5f2:	d43a      	bmi.n	800e66a <SDMMC_CmdStatusRegister+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e5f4:	0459      	lsls	r1, r3, #17
 800e5f6:	d435      	bmi.n	800e664 <SDMMC_CmdStatusRegister+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e5f8:	049a      	lsls	r2, r3, #18
 800e5fa:	d430      	bmi.n	800e65e <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e5fc:	f013 0f08 	tst.w	r3, #8
 800e600:	bf0c      	ite	eq
 800e602:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e606:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e60a:	e7bc      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e60c:	2304      	movs	r3, #4
 800e60e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e610:	4618      	mov	r0, r3
 800e612:	e7b8      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e614:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e618:	e7b5      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e61a:	2040      	movs	r0, #64	@ 0x40
 800e61c:	e7b3      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e61e:	2080      	movs	r0, #128	@ 0x80
 800e620:	e7b1      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e622:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e626:	e7ae      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e628:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e62c:	e7ab      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e62e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e632:	e7a8      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e634:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e638:	e7a5      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e63a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e63e:	e7a2      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e640:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e644:	e79f      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e646:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e64a:	e79c      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e64c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e650:	e799      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CC_ERR;
 800e652:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e656:	e796      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e658:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e65c:	e793      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800e65e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e662:	e790      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e664:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e668:	e78d      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e66a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e66e:	e78a      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e670:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e674:	e787      	b.n	800e586 <SDMMC_CmdStatusRegister+0x46>
 800e676:	bf00      	nop
 800e678:	200001e0 	.word	0x200001e0
 800e67c:	10624dd3 	.word	0x10624dd3
 800e680:	fffee0c0 	.word	0xfffee0c0
 800e684:	00200045 	.word	0x00200045
 800e688:	002000c5 	.word	0x002000c5
 800e68c:	fdffe008 	.word	0xfdffe008

0800e690 <SDMMC_CmdVoltageSwitch>:
  SDMMCx->ARG = Command->Argument;
 800e690:	2300      	movs	r3, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e692:	4a4d      	ldr	r2, [pc, #308]	@ (800e7c8 <SDMMC_CmdVoltageSwitch+0x138>)
 800e694:	494d      	ldr	r1, [pc, #308]	@ (800e7cc <SDMMC_CmdVoltageSwitch+0x13c>)
 800e696:	6812      	ldr	r2, [r2, #0]
{
 800e698:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e69a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e69c:	68c4      	ldr	r4, [r0, #12]
 800e69e:	4b4c      	ldr	r3, [pc, #304]	@ (800e7d0 <SDMMC_CmdVoltageSwitch+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6a0:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6a4:	4023      	ands	r3, r4
 800e6a6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6aa:	0a52      	lsrs	r2, r2, #9
 800e6ac:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6b0:	f043 030b 	orr.w	r3, r3, #11
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6b4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6b8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e6ba:	b152      	cbz	r2, 800e6d2 <SDMMC_CmdVoltageSwitch+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e6bc:	4945      	ldr	r1, [pc, #276]	@ (800e7d4 <SDMMC_CmdVoltageSwitch+0x144>)
 800e6be:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e6c0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e6c2:	420a      	tst	r2, r1
    if (count-- == 0U)
 800e6c4:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e6c8:	d001      	beq.n	800e6ce <SDMMC_CmdVoltageSwitch+0x3e>
 800e6ca:	0492      	lsls	r2, r2, #18
 800e6cc:	d506      	bpl.n	800e6dc <SDMMC_CmdVoltageSwitch+0x4c>
    if (count-- == 0U)
 800e6ce:	1c5c      	adds	r4, r3, #1
 800e6d0:	d1f6      	bne.n	800e6c0 <SDMMC_CmdVoltageSwitch+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e6d2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800e6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6da:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e6de:	075c      	lsls	r4, r3, #29
 800e6e0:	d43c      	bmi.n	800e75c <SDMMC_CmdVoltageSwitch+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e6e2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e6e4:	07d9      	lsls	r1, r3, #31
 800e6e6:	d407      	bmi.n	800e6f8 <SDMMC_CmdVoltageSwitch+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e6e8:	4b3b      	ldr	r3, [pc, #236]	@ (800e7d8 <SDMMC_CmdVoltageSwitch+0x148>)
 800e6ea:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e6ec:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b0b      	cmp	r3, #11
 800e6f2:	d004      	beq.n	800e6fe <SDMMC_CmdVoltageSwitch+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	e7ee      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6fc:	e7fa      	b.n	800e6f4 <SDMMC_CmdVoltageSwitch+0x64>
  return (*(__IO uint32_t *) tmp);
 800e6fe:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e700:	4836      	ldr	r0, [pc, #216]	@ (800e7dc <SDMMC_CmdVoltageSwitch+0x14c>)
 800e702:	4018      	ands	r0, r3
 800e704:	2800      	cmp	r0, #0
 800e706:	d0e6      	beq.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e708:	2b00      	cmp	r3, #0
 800e70a:	db2b      	blt.n	800e764 <SDMMC_CmdVoltageSwitch+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e70c:	005a      	lsls	r2, r3, #1
 800e70e:	d42c      	bmi.n	800e76a <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e710:	009c      	lsls	r4, r3, #2
 800e712:	d42c      	bmi.n	800e76e <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e714:	00d9      	lsls	r1, r3, #3
 800e716:	d42c      	bmi.n	800e772 <SDMMC_CmdVoltageSwitch+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e718:	011a      	lsls	r2, r3, #4
 800e71a:	d42d      	bmi.n	800e778 <SDMMC_CmdVoltageSwitch+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e71c:	015c      	lsls	r4, r3, #5
 800e71e:	d42e      	bmi.n	800e77e <SDMMC_CmdVoltageSwitch+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e720:	01d9      	lsls	r1, r3, #7
 800e722:	d42f      	bmi.n	800e784 <SDMMC_CmdVoltageSwitch+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e724:	021a      	lsls	r2, r3, #8
 800e726:	d430      	bmi.n	800e78a <SDMMC_CmdVoltageSwitch+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e728:	025c      	lsls	r4, r3, #9
 800e72a:	d431      	bmi.n	800e790 <SDMMC_CmdVoltageSwitch+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e72c:	0299      	lsls	r1, r3, #10
 800e72e:	d43b      	bmi.n	800e7a8 <SDMMC_CmdVoltageSwitch+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e730:	02da      	lsls	r2, r3, #11
 800e732:	d436      	bmi.n	800e7a2 <SDMMC_CmdVoltageSwitch+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e734:	035c      	lsls	r4, r3, #13
 800e736:	d431      	bmi.n	800e79c <SDMMC_CmdVoltageSwitch+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e738:	0399      	lsls	r1, r3, #14
 800e73a:	d42c      	bmi.n	800e796 <SDMMC_CmdVoltageSwitch+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e73c:	03da      	lsls	r2, r3, #15
 800e73e:	d43f      	bmi.n	800e7c0 <SDMMC_CmdVoltageSwitch+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e740:	041c      	lsls	r4, r3, #16
 800e742:	d43a      	bmi.n	800e7ba <SDMMC_CmdVoltageSwitch+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e744:	0459      	lsls	r1, r3, #17
 800e746:	d435      	bmi.n	800e7b4 <SDMMC_CmdVoltageSwitch+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e748:	049a      	lsls	r2, r3, #18
 800e74a:	d430      	bmi.n	800e7ae <SDMMC_CmdVoltageSwitch+0x11e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e74c:	f013 0f08 	tst.w	r3, #8
 800e750:	bf0c      	ite	eq
 800e752:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800e756:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800e75a:	e7bc      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e75c:	2304      	movs	r3, #4
 800e75e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e760:	4618      	mov	r0, r3
 800e762:	e7b8      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e764:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800e768:	e7b5      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e76a:	2040      	movs	r0, #64	@ 0x40
 800e76c:	e7b3      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e76e:	2080      	movs	r0, #128	@ 0x80
 800e770:	e7b1      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e772:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e776:	e7ae      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e778:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e77c:	e7ab      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e77e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e782:	e7a8      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e784:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e788:	e7a5      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e78a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e78e:	e7a2      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e790:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e794:	e79f      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e796:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e79a:	e79c      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e79c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800e7a0:	e799      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CC_ERR;
 800e7a2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e7a6:	e796      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e7a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e7ac:	e793      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800e7ae:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800e7b2:	e790      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e7b4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e7b8:	e78d      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e7ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e7be:	e78a      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e7c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800e7c4:	e787      	b.n	800e6d6 <SDMMC_CmdVoltageSwitch+0x46>
 800e7c6:	bf00      	nop
 800e7c8:	200001e0 	.word	0x200001e0
 800e7cc:	10624dd3 	.word	0x10624dd3
 800e7d0:	fffee0c0 	.word	0xfffee0c0
 800e7d4:	00200045 	.word	0x00200045
 800e7d8:	002000c5 	.word	0x002000c5
 800e7dc:	fdffe008 	.word	0xfdffe008

0800e7e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7e0:	4684      	mov	ip, r0
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	a801      	add	r0, sp, #4
 800e7e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e7ea:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800e7ee:	4b17      	ldr	r3, [pc, #92]	@ (800e84c <USB_CoreInit+0x6c>)
 800e7f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e7f4:	f8cc 200c 	str.w	r2, [ip, #12]
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	d024      	beq.n	800e846 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7fc:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800e800:	2a00      	cmp	r2, #0
 800e802:	daf9      	bge.n	800e7f8 <USB_CoreInit+0x18>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e804:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e808:	4a10      	ldr	r2, [pc, #64]	@ (800e84c <USB_CoreInit+0x6c>)
 800e80a:	f043 0301 	orr.w	r3, r3, #1
 800e80e:	f8cc 3010 	str.w	r3, [ip, #16]

  do
  {
    if (++count > 200000U)
 800e812:	3a01      	subs	r2, #1
 800e814:	d017      	beq.n	800e846 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e816:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e81a:	f013 0301 	ands.w	r3, r3, #1
 800e81e:	d1f8      	bne.n	800e812 <USB_CoreInit+0x32>

  return HAL_OK;
 800e820:	4618      	mov	r0, r3
  if (cfg.battery_charging_enable == 0U)
 800e822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e824:	b93b      	cbnz	r3, 800e836 <USB_CoreInit+0x56>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e826:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800e82a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e82e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
}
 800e832:	b004      	add	sp, #16
 800e834:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e836:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800e83a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e83e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
}
 800e842:	b004      	add	sp, #16
 800e844:	4770      	bx	lr
      return HAL_TIMEOUT;
 800e846:	2003      	movs	r0, #3
 800e848:	e7eb      	b.n	800e822 <USB_CoreInit+0x42>
 800e84a:	bf00      	nop
 800e84c:	00030d41 	.word	0x00030d41

0800e850 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800e850:	2a02      	cmp	r2, #2
{
 800e852:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800e854:	d00a      	beq.n	800e86c <USB_SetTurnaroundTime+0x1c>
 800e856:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e85a:	68da      	ldr	r2, [r3, #12]
 800e85c:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 800e860:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e862:	68da      	ldr	r2, [r3, #12]
 800e864:	430a      	orrs	r2, r1
}
 800e866:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e868:	60da      	str	r2, [r3, #12]
}
 800e86a:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e86c:	4a26      	ldr	r2, [pc, #152]	@ (800e908 <USB_SetTurnaroundTime+0xb8>)
 800e86e:	4827      	ldr	r0, [pc, #156]	@ (800e90c <USB_SetTurnaroundTime+0xbc>)
 800e870:	440a      	add	r2, r1
 800e872:	4282      	cmp	r2, r0
 800e874:	d932      	bls.n	800e8dc <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e876:	4a26      	ldr	r2, [pc, #152]	@ (800e910 <USB_SetTurnaroundTime+0xc0>)
 800e878:	4826      	ldr	r0, [pc, #152]	@ (800e914 <USB_SetTurnaroundTime+0xc4>)
 800e87a:	440a      	add	r2, r1
 800e87c:	4282      	cmp	r2, r0
 800e87e:	d930      	bls.n	800e8e2 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e880:	4825      	ldr	r0, [pc, #148]	@ (800e918 <USB_SetTurnaroundTime+0xc8>)
 800e882:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 800e886:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 800e88a:	4282      	cmp	r2, r0
 800e88c:	d92c      	bls.n	800e8e8 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e88e:	4823      	ldr	r0, [pc, #140]	@ (800e91c <USB_SetTurnaroundTime+0xcc>)
 800e890:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 800e894:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 800e898:	4282      	cmp	r2, r0
 800e89a:	d328      	bcc.n	800e8ee <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e89c:	4a20      	ldr	r2, [pc, #128]	@ (800e920 <USB_SetTurnaroundTime+0xd0>)
 800e89e:	4821      	ldr	r0, [pc, #132]	@ (800e924 <USB_SetTurnaroundTime+0xd4>)
 800e8a0:	440a      	add	r2, r1
 800e8a2:	4282      	cmp	r2, r0
 800e8a4:	d926      	bls.n	800e8f4 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e8a6:	4a20      	ldr	r2, [pc, #128]	@ (800e928 <USB_SetTurnaroundTime+0xd8>)
 800e8a8:	4820      	ldr	r0, [pc, #128]	@ (800e92c <USB_SetTurnaroundTime+0xdc>)
 800e8aa:	440a      	add	r2, r1
 800e8ac:	4282      	cmp	r2, r0
 800e8ae:	d324      	bcc.n	800e8fa <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e8b0:	4a1f      	ldr	r2, [pc, #124]	@ (800e930 <USB_SetTurnaroundTime+0xe0>)
 800e8b2:	4820      	ldr	r0, [pc, #128]	@ (800e934 <USB_SetTurnaroundTime+0xe4>)
 800e8b4:	440a      	add	r2, r1
 800e8b6:	4282      	cmp	r2, r0
 800e8b8:	d3cd      	bcc.n	800e856 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e8ba:	481f      	ldr	r0, [pc, #124]	@ (800e938 <USB_SetTurnaroundTime+0xe8>)
 800e8bc:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 800e8c0:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 800e8c4:	4282      	cmp	r2, r0
 800e8c6:	d31b      	bcc.n	800e900 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e8c8:	4a1c      	ldr	r2, [pc, #112]	@ (800e93c <USB_SetTurnaroundTime+0xec>)
 800e8ca:	481d      	ldr	r0, [pc, #116]	@ (800e940 <USB_SetTurnaroundTime+0xf0>)
 800e8cc:	440a      	add	r2, r1
 800e8ce:	4282      	cmp	r2, r0
 800e8d0:	bf2c      	ite	cs
 800e8d2:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 800e8d6:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 800e8da:	e7be      	b.n	800e85a <USB_SetTurnaroundTime+0xa>
 800e8dc:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 800e8e0:	e7bb      	b.n	800e85a <USB_SetTurnaroundTime+0xa>
 800e8e2:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800e8e6:	e7b8      	b.n	800e85a <USB_SetTurnaroundTime+0xa>
 800e8e8:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 800e8ec:	e7b5      	b.n	800e85a <USB_SetTurnaroundTime+0xa>
 800e8ee:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800e8f2:	e7b2      	b.n	800e85a <USB_SetTurnaroundTime+0xa>
 800e8f4:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 800e8f8:	e7af      	b.n	800e85a <USB_SetTurnaroundTime+0xa>
 800e8fa:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800e8fe:	e7ac      	b.n	800e85a <USB_SetTurnaroundTime+0xa>
 800e900:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e904:	e7a9      	b.n	800e85a <USB_SetTurnaroundTime+0xa>
 800e906:	bf00      	nop
 800e908:	ff275340 	.word	0xff275340
 800e90c:	000c34ff 	.word	0x000c34ff
 800e910:	ff1b1e40 	.word	0xff1b1e40
 800e914:	000f423f 	.word	0x000f423f
 800e918:	00124f7f 	.word	0x00124f7f
 800e91c:	0013d620 	.word	0x0013d620
 800e920:	fee5b660 	.word	0xfee5b660
 800e924:	0016e35f 	.word	0x0016e35f
 800e928:	feced300 	.word	0xfeced300
 800e92c:	001b7740 	.word	0x001b7740
 800e930:	feb35bc0 	.word	0xfeb35bc0
 800e934:	002191c0 	.word	0x002191c0
 800e938:	00387520 	.word	0x00387520
 800e93c:	fe5954e0 	.word	0xfe5954e0
 800e940:	00419ce0 	.word	0x00419ce0

0800e944 <USB_EnableGlobalInt>:
{
 800e944:	4603      	mov	r3, r0
}
 800e946:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e948:	689a      	ldr	r2, [r3, #8]
 800e94a:	f042 0201 	orr.w	r2, r2, #1
 800e94e:	609a      	str	r2, [r3, #8]
}
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop

0800e954 <USB_DisableGlobalInt>:
{
 800e954:	4603      	mov	r3, r0
}
 800e956:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e958:	689a      	ldr	r2, [r3, #8]
 800e95a:	f022 0201 	bic.w	r2, r2, #1
 800e95e:	609a      	str	r2, [r3, #8]
}
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop

0800e964 <USB_SetCurrentMode>:
{
 800e964:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e966:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e968:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e96a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e96e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e970:	d00b      	beq.n	800e98a <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800e972:	b941      	cbnz	r1, 800e986 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e974:	68c3      	ldr	r3, [r0, #12]
 800e976:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e97a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800e97c:	2032      	movs	r0, #50	@ 0x32
 800e97e:	f7f8 fcb5 	bl	80072ec <HAL_Delay>
  return HAL_OK;
 800e982:	2000      	movs	r0, #0
}
 800e984:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800e986:	2001      	movs	r0, #1
}
 800e988:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e98a:	68c3      	ldr	r3, [r0, #12]
 800e98c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e990:	60c3      	str	r3, [r0, #12]
 800e992:	e7f3      	b.n	800e97c <USB_SetCurrentMode+0x18>

0800e994 <USB_DevInit>:
{
 800e994:	b084      	sub	sp, #16
 800e996:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e998:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e99a:	ac06      	add	r4, sp, #24
 800e99c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 800e9a6:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 800e9a8:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9b2:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 800e9b6:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 800e9ba:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 800e9be:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 800e9c2:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 800e9c6:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 800e9ca:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 800e9ce:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 800e9d2:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 800e9d6:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 800e9da:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 800e9de:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 800e9e2:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800e9e6:	2d00      	cmp	r5, #0
 800e9e8:	f040 80a1 	bne.w	800eb2e <USB_DevInit+0x19a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800e9f0:	f042 0202 	orr.w	r2, r2, #2
 800e9f4:	f8cc 2004 	str.w	r2, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e9f8:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800e9fa:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800e9fe:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ea00:	6802      	ldr	r2, [r0, #0]
 800ea02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea06:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ea08:	6802      	ldr	r2, [r0, #0]
 800ea0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ea0e:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0U;
 800ea10:	2200      	movs	r2, #0
 800ea12:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ea16:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800ea1a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= speed;
 800ea1e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800ea22:	f042 0203 	orr.w	r2, r2, #3
 800ea26:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ea2a:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800ea2e:	611a      	str	r2, [r3, #16]
 800ea30:	4a43      	ldr	r2, [pc, #268]	@ (800eb40 <USB_DevInit+0x1ac>)
    if (++count > 200000U)
 800ea32:	3a01      	subs	r2, #1
 800ea34:	f000 8082 	beq.w	800eb3c <USB_DevInit+0x1a8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ea38:	6918      	ldr	r0, [r3, #16]
 800ea3a:	f010 0020 	ands.w	r0, r0, #32
 800ea3e:	d1f8      	bne.n	800ea32 <USB_DevInit+0x9e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ea40:	2210      	movs	r2, #16
 800ea42:	611a      	str	r2, [r3, #16]
 800ea44:	4a3e      	ldr	r2, [pc, #248]	@ (800eb40 <USB_DevInit+0x1ac>)
    if (++count > 200000U)
 800ea46:	3a01      	subs	r2, #1
 800ea48:	d076      	beq.n	800eb38 <USB_DevInit+0x1a4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ea4a:	6919      	ldr	r1, [r3, #16]
 800ea4c:	06c9      	lsls	r1, r1, #27
 800ea4e:	d4fa      	bmi.n	800ea46 <USB_DevInit+0xb2>
  USBx_DEVICE->DIEPMSK = 0U;
 800ea50:	2100      	movs	r1, #0
 800ea52:	f8cc 1010 	str.w	r1, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ea56:	f8cc 1014 	str.w	r1, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ea5a:	f8cc 101c 	str.w	r1, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea5e:	b1fc      	cbz	r4, 800eaa0 <USB_DevInit+0x10c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea60:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 800ea64:	2e00      	cmp	r6, #0
 800ea66:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 800ea6a:	db14      	blt.n	800ea96 <USB_DevInit+0x102>
      USBx_INEP(i)->DIEPCTL = 0U;
 800ea6c:	2600      	movs	r6, #0
 800ea6e:	6016      	str	r6, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ea70:	f04f 0e00 	mov.w	lr, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ea74:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea78:	3101      	adds	r1, #1
 800ea7a:	42a1      	cmp	r1, r4
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ea7c:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ea80:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea82:	f102 0220 	add.w	r2, r2, #32
 800ea86:	d030      	beq.n	800eaea <USB_DevInit+0x156>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea88:	6816      	ldr	r6, [r2, #0]
 800ea8a:	2e00      	cmp	r6, #0
 800ea8c:	daee      	bge.n	800ea6c <USB_DevInit+0xd8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ea8e:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 800ea92:	6016      	str	r6, [r2, #0]
 800ea94:	e7f0      	b.n	800ea78 <USB_DevInit+0xe4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ea96:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 800ea9a:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
 800ea9e:	e7e7      	b.n	800ea70 <USB_DevInit+0xdc>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eaa0:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800eaa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800eaa8:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx->GINTMSK = 0U;
 800eaac:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eaae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
  USBx->GINTMSK = 0U;
 800eab2:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eab4:	615a      	str	r2, [r3, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eab6:	6999      	ldr	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eab8:	4a22      	ldr	r2, [pc, #136]	@ (800eb44 <USB_DevInit+0x1b0>)
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eaba:	f041 0110 	orr.w	r1, r1, #16
 800eabe:	6199      	str	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eac0:	6999      	ldr	r1, [r3, #24]
 800eac2:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 800eac4:	990c      	ldr	r1, [sp, #48]	@ 0x30
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eac6:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 800eac8:	b119      	cbz	r1, 800ead2 <USB_DevInit+0x13e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800eaca:	699a      	ldr	r2, [r3, #24]
 800eacc:	f042 0208 	orr.w	r2, r2, #8
 800ead0:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ead2:	2d01      	cmp	r5, #1
 800ead4:	d105      	bne.n	800eae2 <USB_DevInit+0x14e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ead6:	699a      	ldr	r2, [r3, #24]
 800ead8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800eadc:	f042 0204 	orr.w	r2, r2, #4
 800eae0:	619a      	str	r2, [r3, #24]
}
 800eae2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eae6:	b004      	add	sp, #16
 800eae8:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eaea:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800eaee:	2900      	cmp	r1, #0
 800eaf0:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 800eaf4:	db15      	blt.n	800eb22 <USB_DevInit+0x18e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eaf6:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eaf8:	2600      	movs	r6, #0
 800eafa:	6016      	str	r6, [r2, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eafc:	f04f 0e00 	mov.w	lr, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb00:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb04:	3101      	adds	r1, #1
 800eb06:	42a1      	cmp	r1, r4
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eb08:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb0c:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb0e:	f102 0220 	add.w	r2, r2, #32
 800eb12:	d0c5      	beq.n	800eaa0 <USB_DevInit+0x10c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb14:	6816      	ldr	r6, [r2, #0]
 800eb16:	2e00      	cmp	r6, #0
 800eb18:	daee      	bge.n	800eaf8 <USB_DevInit+0x164>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eb1a:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 800eb1e:	6016      	str	r6, [r2, #0]
 800eb20:	e7f0      	b.n	800eb04 <USB_DevInit+0x170>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eb22:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800eb26:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	e7e6      	b.n	800eafc <USB_DevInit+0x168>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eb2e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800eb30:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800eb34:	6382      	str	r2, [r0, #56]	@ 0x38
 800eb36:	e76b      	b.n	800ea10 <USB_DevInit+0x7c>
    ret = HAL_ERROR;
 800eb38:	2001      	movs	r0, #1
 800eb3a:	e789      	b.n	800ea50 <USB_DevInit+0xbc>
 800eb3c:	2001      	movs	r0, #1
 800eb3e:	e77f      	b.n	800ea40 <USB_DevInit+0xac>
 800eb40:	00030d41 	.word	0x00030d41
 800eb44:	803c3800 	.word	0x803c3800

0800eb48 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eb48:	0189      	lsls	r1, r1, #6
 800eb4a:	f041 0120 	orr.w	r1, r1, #32
 800eb4e:	4a06      	ldr	r2, [pc, #24]	@ (800eb68 <USB_FlushTxFifo+0x20>)
 800eb50:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800eb52:	3a01      	subs	r2, #1
 800eb54:	d005      	beq.n	800eb62 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eb56:	6903      	ldr	r3, [r0, #16]
 800eb58:	f013 0320 	ands.w	r3, r3, #32
 800eb5c:	d1f9      	bne.n	800eb52 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800eb5e:	4618      	mov	r0, r3
 800eb60:	4770      	bx	lr
      return HAL_TIMEOUT;
 800eb62:	2003      	movs	r0, #3
}
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	00030d41 	.word	0x00030d41

0800eb6c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eb6c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
    speed = 0xFU;
 800eb70:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eb74:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
}
 800eb78:	bf14      	ite	ne
 800eb7a:	2002      	movne	r0, #2
 800eb7c:	200f      	moveq	r0, #15
 800eb7e:	4770      	bx	lr

0800eb80 <USB_ActivateEndpoint>:
{
 800eb80:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800eb82:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eb84:	2301      	movs	r3, #1
 800eb86:	f002 0e0f 	and.w	lr, r2, #15
 800eb8a:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 800eb8e:	f891 e001 	ldrb.w	lr, [r1, #1]
 800eb92:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eb96:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eb9a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800eb9e:	d01a      	beq.n	800ebd6 <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eba0:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800eba4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800eba8:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ebac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800ebb0:	041b      	lsls	r3, r3, #16
 800ebb2:	d40e      	bmi.n	800ebd2 <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ebb4:	688b      	ldr	r3, [r1, #8]
 800ebb6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 800ebba:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ebbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebc0:	4323      	orrs	r3, r4
 800ebc2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800ebc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ebca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ebce:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ebd6:	f8dc 401c 	ldr.w	r4, [ip, #28]
 800ebda:	4323      	orrs	r3, r4
 800ebdc:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ebe0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800ebe4:	041c      	lsls	r4, r3, #16
 800ebe6:	d4f4      	bmi.n	800ebd2 <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ebe8:	688b      	ldr	r3, [r1, #8]
 800ebea:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ebee:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ebf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebf4:	4323      	orrs	r3, r4
 800ebf6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800ebfa:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800ebfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ec06:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	bd10      	pop	{r4, pc}
 800ec0e:	bf00      	nop

0800ec10 <USB_DeactivateEndpoint>:
{
 800ec10:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800ec12:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800ec14:	7849      	ldrb	r1, [r1, #1]
 800ec16:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec18:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800ec1c:	d02c      	beq.n	800ec78 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec1e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ec22:	2900      	cmp	r1, #0
 800ec24:	db1b      	blt.n	800ec5e <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec26:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800ec2a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800ec2e:	f002 020f 	and.w	r2, r2, #15
 800ec32:	fa01 f202 	lsl.w	r2, r1, r2
 800ec36:	ea24 0402 	bic.w	r4, r4, r2
 800ec3a:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec3e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ec42:	4922      	ldr	r1, [pc, #136]	@ (800eccc <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec44:	ea24 0202 	bic.w	r2, r4, r2
 800ec48:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ec4c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 800ec50:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ec54:	4011      	ands	r1, r2
}
 800ec56:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ec58:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 800ec5c:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ec5e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ec62:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800ec66:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ec6a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800ec6e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800ec72:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 800ec76:	e7d6      	b.n	800ec26 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec78:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800ec7c:	2900      	cmp	r1, #0
 800ec7e:	da0b      	bge.n	800ec98 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ec80:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800ec84:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800ec88:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ec8c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800ec90:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800ec94:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec98:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 800ec9c:	f002 040f 	and.w	r4, r2, #15
 800eca0:	2201      	movs	r2, #1
 800eca2:	40a2      	lsls	r2, r4
 800eca4:	ea21 0102 	bic.w	r1, r1, r2
 800eca8:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ecac:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ecb0:	4907      	ldr	r1, [pc, #28]	@ (800ecd0 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ecb2:	ea24 0202 	bic.w	r2, r4, r2
 800ecb6:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ecba:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 800ecbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ecc2:	4011      	ands	r1, r2
}
 800ecc4:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ecc6:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 800ecca:	4770      	bx	lr
 800eccc:	eff37800 	.word	0xeff37800
 800ecd0:	ec337800 	.word	0xec337800

0800ecd4 <USB_EPStartXfer>:
{
 800ecd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 800ecd8:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ecda:	780d      	ldrb	r5, [r1, #0]
    if (ep->xfer_len == 0U)
 800ecdc:	694b      	ldr	r3, [r1, #20]
    if (ep->type != EP_TYPE_ISOC)
 800ecde:	f891 c003 	ldrb.w	ip, [r1, #3]
  if (ep->is_in == 1U)
 800ece2:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ece4:	eb00 1245 	add.w	r2, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800ece8:	d046      	beq.n	800ed78 <USB_EPStartXfer+0xa4>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ecea:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ecec:	f8d2 1b10 	ldr.w	r1, [r2, #2832]	@ 0xb10
 800ecf0:	0cc9      	lsrs	r1, r1, #19
 800ecf2:	04c9      	lsls	r1, r1, #19
 800ecf4:	f8c2 1b10 	str.w	r1, [r2, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ecf8:	f8d2 1b10 	ldr.w	r1, [r2, #2832]	@ 0xb10
 800ecfc:	f021 51ff 	bic.w	r1, r1, #534773760	@ 0x1fe00000
 800ed00:	f421 11c0 	bic.w	r1, r1, #1572864	@ 0x180000
 800ed04:	f8c2 1b10 	str.w	r1, [r2, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ed08:	f502 6130 	add.w	r1, r2, #2816	@ 0xb00
    if (ep->xfer_len == 0U)
 800ed0c:	b353      	cbz	r3, 800ed64 <USB_EPStartXfer+0x90>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ed0e:	4d61      	ldr	r5, [pc, #388]	@ (800ee94 <USB_EPStartXfer+0x1c0>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ed10:	4423      	add	r3, r4
 800ed12:	3b01      	subs	r3, #1
 800ed14:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ed18:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 800ed1c:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ed1e:	fb04 f303 	mul.w	r3, r4, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ed22:	690c      	ldr	r4, [r1, #16]
 800ed24:	432c      	orrs	r4, r5
 800ed26:	610c      	str	r4, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ed28:	690c      	ldr	r4, [r1, #16]
 800ed2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed2e:	4323      	orrs	r3, r4
 800ed30:	610b      	str	r3, [r1, #16]
    if (ep->type == EP_TYPE_ISOC)
 800ed32:	f1bc 0f01 	cmp.w	ip, #1
 800ed36:	d10c      	bne.n	800ed52 <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ed38:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800ed3c:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ed40:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	@ 0xb00
 800ed44:	bf0c      	ite	eq
 800ed46:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ed4a:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 800ed4e:	f8c2 3b00 	str.w	r3, [r2, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ed52:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	@ 0xb00
 800ed56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ed5a:	f8c2 3b00 	str.w	r3, [r2, #2816]	@ 0xb00
}
 800ed5e:	2000      	movs	r0, #0
 800ed60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ed64:	690b      	ldr	r3, [r1, #16]
 800ed66:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800ed6a:	431c      	orrs	r4, r3
 800ed6c:	610c      	str	r4, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed6e:	690b      	ldr	r3, [r1, #16]
 800ed70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ed74:	610b      	str	r3, [r1, #16]
 800ed76:	e7dc      	b.n	800ed32 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed78:	f502 6e10 	add.w	lr, r2, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d13c      	bne.n	800edfa <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed80:	f8de 4010 	ldr.w	r4, [lr, #16]
 800ed84:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800ed88:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 800ed8c:	f8ce 4010 	str.w	r4, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed90:	f8de 4010 	ldr.w	r4, [lr, #16]
 800ed94:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800ed98:	f8ce 4010 	str.w	r4, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed9c:	f8de 4010 	ldr.w	r4, [lr, #16]
 800eda0:	0ce4      	lsrs	r4, r4, #19
 800eda2:	04e4      	lsls	r4, r4, #19
 800eda4:	f8ce 4010 	str.w	r4, [lr, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eda8:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800edac:	f1bc 0f01 	cmp.w	ip, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800edb0:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800edb4:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800edb8:	d1d1      	bne.n	800ed5e <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800edba:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 800edbe:	f414 7f80 	tst.w	r4, #256	@ 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800edc2:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
  count32b = ((uint32_t)len + 3U) / 4U;
 800edc6:	b29b      	uxth	r3, r3
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800edc8:	bf0c      	ite	eq
 800edca:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800edce:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
  count32b = ((uint32_t)len + 3U) / 4U;
 800edd2:	3303      	adds	r3, #3
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800edd4:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800edd8:	68ca      	ldr	r2, [r1, #12]
  for (i = 0U; i < count32b; i++)
 800edda:	0899      	lsrs	r1, r3, #2
 800eddc:	d0bf      	beq.n	800ed5e <USB_EPStartXfer+0x8a>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800edde:	eb00 3305 	add.w	r3, r0, r5, lsl #12
 800ede2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ede6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800edea:	f852 1b04 	ldr.w	r1, [r2], #4
 800edee:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < count32b; i++)
 800edf0:	4290      	cmp	r0, r2
 800edf2:	d1fa      	bne.n	800edea <USB_EPStartXfer+0x116>
}
 800edf4:	2000      	movs	r0, #0
 800edf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800edfa:	f8de 6010 	ldr.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800edfe:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee02:	0cf6      	lsrs	r6, r6, #19
 800ee04:	04f6      	lsls	r6, r6, #19
 800ee06:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee0a:	f8de 6010 	ldr.w	r6, [lr, #16]
 800ee0e:	f026 56ff 	bic.w	r6, r6, #534773760	@ 0x1fe00000
 800ee12:	f426 16c0 	bic.w	r6, r6, #1572864	@ 0x180000
 800ee16:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ee1a:	4e1e      	ldr	r6, [pc, #120]	@ (800ee94 <USB_EPStartXfer+0x1c0>)
 800ee1c:	f8de 8010 	ldr.w	r8, [lr, #16]
 800ee20:	eb09 0703 	add.w	r7, r9, r3
 800ee24:	3f01      	subs	r7, #1
 800ee26:	fbb7 f7f9 	udiv	r7, r7, r9
 800ee2a:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 800ee2e:	ea46 0608 	orr.w	r6, r6, r8
 800ee32:	f8ce 6010 	str.w	r6, [lr, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ee36:	f8de 7010 	ldr.w	r7, [lr, #16]
 800ee3a:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800ee3e:	433e      	orrs	r6, r7
      if (ep->type == EP_TYPE_ISOC)
 800ee40:	f1bc 0f01 	cmp.w	ip, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ee44:	f8ce 6010 	str.w	r6, [lr, #16]
      if (ep->type == EP_TYPE_ISOC)
 800ee48:	d010      	beq.n	800ee6c <USB_EPStartXfer+0x198>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee4a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800ee4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ee52:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ee56:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 800ee5a:	f005 030f 	and.w	r3, r5, #15
 800ee5e:	409c      	lsls	r4, r3
 800ee60:	4314      	orrs	r4, r2
 800ee62:	f8c0 4834 	str.w	r4, [r0, #2100]	@ 0x834
}
 800ee66:	2000      	movs	r0, #0
 800ee68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ee6c:	f8de 4010 	ldr.w	r4, [lr, #16]
 800ee70:	f024 44c0 	bic.w	r4, r4, #1610612736	@ 0x60000000
 800ee74:	f8ce 4010 	str.w	r4, [lr, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ee78:	f8de 4010 	ldr.w	r4, [lr, #16]
 800ee7c:	f044 5400 	orr.w	r4, r4, #536870912	@ 0x20000000
 800ee80:	f8ce 4010 	str.w	r4, [lr, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee84:	f8d2 4900 	ldr.w	r4, [r2, #2304]	@ 0x900
 800ee88:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800ee8c:	f8c2 4900 	str.w	r4, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 800ee90:	e793      	b.n	800edba <USB_EPStartXfer+0xe6>
 800ee92:	bf00      	nop
 800ee94:	1ff80000 	.word	0x1ff80000

0800ee98 <USB_EP0StartXfer>:
{
 800ee98:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800ee9a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ee9c:	780a      	ldrb	r2, [r1, #0]
    if (ep->xfer_len == 0U)
 800ee9e:	694c      	ldr	r4, [r1, #20]
  if (ep->is_in == 1U)
 800eea0:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eea2:	eb00 1c42 	add.w	ip, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800eea6:	d022      	beq.n	800eeee <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eea8:	f8dc 2b10 	ldr.w	r2, [ip, #2832]	@ 0xb10
 800eeac:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 800eeb0:	0cd2      	lsrs	r2, r2, #19
 800eeb2:	04d2      	lsls	r2, r2, #19
 800eeb4:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eeb6:	691a      	ldr	r2, [r3, #16]
 800eeb8:	f022 52ff 	bic.w	r2, r2, #534773760	@ 0x1fe00000
 800eebc:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
 800eec0:	611a      	str	r2, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800eec2:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 800eec4:	b98c      	cbnz	r4, 800eeea <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eec6:	6919      	ldr	r1, [r3, #16]
 800eec8:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800eecc:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800eece:	6919      	ldr	r1, [r3, #16]
 800eed0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800eed4:	430a      	orrs	r2, r1
 800eed6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eed8:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800eedc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800eee0:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800eee4:	2000      	movs	r0, #0
 800eee6:	bc30      	pop	{r4, r5}
 800eee8:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 800eeea:	614a      	str	r2, [r1, #20]
 800eeec:	e7eb      	b.n	800eec6 <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eeee:	f50c 6310 	add.w	r3, ip, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 800eef2:	b364      	cbz	r4, 800ef4e <USB_EP0StartXfer+0xb6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eef4:	691d      	ldr	r5, [r3, #16]
 800eef6:	0ced      	lsrs	r5, r5, #19
 800eef8:	04ed      	lsls	r5, r5, #19
 800eefa:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eefc:	691d      	ldr	r5, [r3, #16]
 800eefe:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 800ef02:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 800ef06:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800ef08:	688d      	ldr	r5, [r1, #8]
 800ef0a:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 800ef0c:	bf38      	it	cc
 800ef0e:	614d      	strcc	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef10:	6919      	ldr	r1, [r3, #16]
 800ef12:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800ef16:	6119      	str	r1, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 800ef18:	bf38      	it	cc
 800ef1a:	462c      	movcc	r4, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ef1c:	691d      	ldr	r5, [r3, #16]
 800ef1e:	f3c4 0112 	ubfx	r1, r4, #0, #19
 800ef22:	4329      	orrs	r1, r5
 800ef24:	6119      	str	r1, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef26:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 800ef2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ef2e:	f8cc 3900 	str.w	r3, [ip, #2304]	@ 0x900
    if (ep->xfer_len > 0U)
 800ef32:	2c00      	cmp	r4, #0
 800ef34:	d0d6      	beq.n	800eee4 <USB_EP0StartXfer+0x4c>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ef36:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
 800ef3a:	f002 020f 	and.w	r2, r2, #15
 800ef3e:	2301      	movs	r3, #1
 800ef40:	4093      	lsls	r3, r2
 800ef42:	430b      	orrs	r3, r1
 800ef44:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
}
 800ef48:	bc30      	pop	{r4, r5}
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef4e:	691a      	ldr	r2, [r3, #16]
 800ef50:	f022 52ff 	bic.w	r2, r2, #534773760	@ 0x1fe00000
 800ef54:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
 800ef58:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef5a:	691a      	ldr	r2, [r3, #16]
 800ef5c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800ef60:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef62:	691a      	ldr	r2, [r3, #16]
 800ef64:	0cd2      	lsrs	r2, r2, #19
 800ef66:	04d2      	lsls	r2, r2, #19
 800ef68:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef6a:	f8dc 3900 	ldr.w	r3, [ip, #2304]	@ 0x900
 800ef6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
}
 800ef72:	2000      	movs	r0, #0
 800ef74:	bc30      	pop	{r4, r5}
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef76:	f8cc 3900 	str.w	r3, [ip, #2304]	@ 0x900
}
 800ef7a:	4770      	bx	lr

0800ef7c <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 800ef7c:	3303      	adds	r3, #3
  for (i = 0U; i < count32b; i++)
 800ef7e:	089b      	lsrs	r3, r3, #2
 800ef80:	d009      	beq.n	800ef96 <USB_WritePacket+0x1a>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ef82:	3201      	adds	r2, #1
 800ef84:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800ef88:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800ef8c:	f851 3b04 	ldr.w	r3, [r1], #4
 800ef90:	6003      	str	r3, [r0, #0]
  for (i = 0U; i < count32b; i++)
 800ef92:	428a      	cmp	r2, r1
 800ef94:	d1fa      	bne.n	800ef8c <USB_WritePacket+0x10>
}
 800ef96:	2000      	movs	r0, #0
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop

0800ef9c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ef9c:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800ef9e:	0892      	lsrs	r2, r2, #2
 800efa0:	d00a      	beq.n	800efb8 <USB_ReadPacket+0x1c>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800efa2:	f500 5c80 	add.w	ip, r0, #4096	@ 0x1000
 800efa6:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800efaa:	f8dc 3000 	ldr.w	r3, [ip]
 800efae:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800efb2:	4288      	cmp	r0, r1
 800efb4:	d1f9      	bne.n	800efaa <USB_ReadPacket+0xe>
 800efb6:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800efb8:	4608      	mov	r0, r1
}
 800efba:	4770      	bx	lr

0800efbc <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800efbc:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800efbe:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800efc0:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efc2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800efc6:	d00c      	beq.n	800efe2 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efc8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800efcc:	2a00      	cmp	r2, #0
 800efce:	db00      	blt.n	800efd2 <USB_EPSetStall+0x16>
 800efd0:	b9d3      	cbnz	r3, 800f008 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800efd2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800efd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800efda:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800efde:	2000      	movs	r0, #0
 800efe0:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efe2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800efe6:	2a00      	cmp	r2, #0
 800efe8:	db06      	blt.n	800eff8 <USB_EPSetStall+0x3c>
 800efea:	b12b      	cbz	r3, 800eff8 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800efec:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800eff0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eff4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eff8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800effc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f000:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800f004:	2000      	movs	r0, #0
 800f006:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f008:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f00c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f010:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800f014:	e7dd      	b.n	800efd2 <USB_EPSetStall+0x16>
 800f016:	bf00      	nop

0800f018 <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f018:	78cb      	ldrb	r3, [r1, #3]
  if (ep->is_in == 1U)
 800f01a:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f01c:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f020:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 800f022:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f024:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f028:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800f02a:	d011      	beq.n	800f050 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f02c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f030:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f032:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800f036:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f03a:	d901      	bls.n	800f040 <USB_EPClearStall+0x28>
}
 800f03c:	2000      	movs	r0, #0
 800f03e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f040:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800f044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f048:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800f04c:	2000      	movs	r0, #0
 800f04e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f050:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f054:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f056:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800f05a:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f05e:	d8ed      	bhi.n	800f03c <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f060:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800f064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f068:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800f06c:	2000      	movs	r0, #0
 800f06e:	4770      	bx	lr

0800f070 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f070:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800f074:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f078:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f07c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800f080:	0109      	lsls	r1, r1, #4
 800f082:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800f086:	4319      	orrs	r1, r3
 800f088:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800f08c:	2000      	movs	r0, #0
 800f08e:	4770      	bx	lr

0800f090 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f090:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800f094:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f096:	f022 0203 	bic.w	r2, r2, #3
 800f09a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f09e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f0a2:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f0a6:	f023 0302 	bic.w	r3, r3, #2
}
 800f0aa:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f0ac:	604b      	str	r3, [r1, #4]
}
 800f0ae:	4770      	bx	lr

0800f0b0 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f0b0:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800f0b4:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f0b6:	f022 0203 	bic.w	r2, r2, #3
 800f0ba:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f0be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f0c2:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f0c6:	f043 0302 	orr.w	r3, r3, #2
}
 800f0ca:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f0cc:	604b      	str	r3, [r1, #4]
}
 800f0ce:	4770      	bx	lr

0800f0d0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800f0d0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800f0d2:	6980      	ldr	r0, [r0, #24]
}
 800f0d4:	4010      	ands	r0, r2
 800f0d6:	4770      	bx	lr

0800f0d8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f0d8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800f0dc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f0e0:	69c0      	ldr	r0, [r0, #28]
 800f0e2:	4018      	ands	r0, r3
}
 800f0e4:	0c00      	lsrs	r0, r0, #16
 800f0e6:	4770      	bx	lr

0800f0e8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f0e8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800f0ec:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f0f0:	69c0      	ldr	r0, [r0, #28]
 800f0f2:	4018      	ands	r0, r3
}
 800f0f4:	b280      	uxth	r0, r0
 800f0f6:	4770      	bx	lr

0800f0f8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f0f8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f0fc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f100:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f104:	6940      	ldr	r0, [r0, #20]
}
 800f106:	4010      	ands	r0, r2
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop

0800f10c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800f10c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f110:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f114:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f118:	f001 010f 	and.w	r1, r1, #15
 800f11c:	40cb      	lsrs	r3, r1
 800f11e:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f120:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f124:	b2db      	uxtb	r3, r3
 800f126:	4313      	orrs	r3, r2
}
 800f128:	4018      	ands	r0, r3
 800f12a:	4770      	bx	lr

0800f12c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800f12c:	6940      	ldr	r0, [r0, #20]
}
 800f12e:	f000 0001 	and.w	r0, r0, #1
 800f132:	4770      	bx	lr

0800f134 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f134:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 800f138:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f13a:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 800f13e:	f022 0207 	bic.w	r2, r2, #7
 800f142:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f146:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800f14a:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800f14e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 800f152:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f154:	604b      	str	r3, [r1, #4]
}
 800f156:	4770      	bx	lr

0800f158 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f158:	4a0c      	ldr	r2, [pc, #48]	@ (800f18c <USB_EP0_OutStart+0x34>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f15a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f15c:	4291      	cmp	r1, r2
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f15e:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f162:	d903      	bls.n	800f16c <USB_EP0_OutStart+0x14>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f164:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800f168:	2a00      	cmp	r2, #0
 800f16a:	db0d      	blt.n	800f188 <USB_EP0_OutStart+0x30>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f16c:	2200      	movs	r2, #0
 800f16e:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f170:	691a      	ldr	r2, [r3, #16]
 800f172:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800f176:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f178:	691a      	ldr	r2, [r3, #16]
 800f17a:	f042 0218 	orr.w	r2, r2, #24
 800f17e:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f180:	691a      	ldr	r2, [r3, #16]
 800f182:	f042 42c0 	orr.w	r2, r2, #1610612736	@ 0x60000000
 800f186:	611a      	str	r2, [r3, #16]
}
 800f188:	2000      	movs	r0, #0
 800f18a:	4770      	bx	lr
 800f18c:	4f54300a 	.word	0x4f54300a

0800f190 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f190:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f192:	f8d0 42bc 	ldr.w	r4, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f196:	b184      	cbz	r4, 800f1ba <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f198:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 800f19c:	b15b      	cbz	r3, 800f1b6 <USBD_CDC_EP0_RxReady+0x26>
 800f19e:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800f1a2:	28ff      	cmp	r0, #255	@ 0xff
 800f1a4:	d007      	beq.n	800f1b6 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800f1b0:	23ff      	movs	r3, #255	@ 0xff
 800f1b2:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f1b6:	2000      	movs	r0, #0
}
 800f1b8:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f1ba:	2003      	movs	r0, #3
}
 800f1bc:	bd10      	pop	{r4, pc}
 800f1be:	bf00      	nop

0800f1c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f1c0:	2343      	movs	r3, #67	@ 0x43
 800f1c2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800f1c4:	4800      	ldr	r0, [pc, #0]	@ (800f1c8 <USBD_CDC_GetFSCfgDesc+0x8>)
 800f1c6:	4770      	bx	lr
 800f1c8:	200001ec 	.word	0x200001ec

0800f1cc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f1cc:	2343      	movs	r3, #67	@ 0x43
 800f1ce:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800f1d0:	4800      	ldr	r0, [pc, #0]	@ (800f1d4 <USBD_CDC_GetHSCfgDesc+0x8>)
 800f1d2:	4770      	bx	lr
 800f1d4:	20000230 	.word	0x20000230

0800f1d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f1d8:	2343      	movs	r3, #67	@ 0x43
 800f1da:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800f1dc:	4800      	ldr	r0, [pc, #0]	@ (800f1e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800f1de:	4770      	bx	lr
 800f1e0:	20000274 	.word	0x20000274

0800f1e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f1e4:	230a      	movs	r3, #10
 800f1e6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800f1e8:	4800      	ldr	r0, [pc, #0]	@ (800f1ec <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800f1ea:	4770      	bx	lr
 800f1ec:	200002b8 	.word	0x200002b8

0800f1f0 <USBD_CDC_DataOut>:
{
 800f1f0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f1f2:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
  if (pdev->pClassData == NULL)
 800f1f6:	b17d      	cbz	r5, 800f218 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	f7f2 fb67 	bl	80018cc <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f1fe:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f202:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f20a:	f8c5 220c 	str.w	r2, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f20e:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800f212:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f214:	2000      	movs	r0, #0
}
 800f216:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800f218:	2003      	movs	r0, #3
}
 800f21a:	bd38      	pop	{r3, r4, r5, pc}

0800f21c <USBD_CDC_DataIn>:
{
 800f21c:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800f21e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f222:	f8d0 42c4 	ldr.w	r4, [r0, #708]	@ 0x2c4
  if (pdev->pClassData == NULL)
 800f226:	b33d      	cbz	r5, 800f278 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f228:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800f22c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800f230:	4684      	mov	ip, r0
 800f232:	f8de 3018 	ldr.w	r3, [lr, #24]
 800f236:	460a      	mov	r2, r1
 800f238:	b96b      	cbnz	r3, 800f256 <USBD_CDC_DataIn+0x3a>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f23a:	f8dc 32c0 	ldr.w	r3, [ip, #704]	@ 0x2c0
 800f23e:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800f240:	2100      	movs	r1, #0
 800f242:	f8c5 1214 	str.w	r1, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f246:	b123      	cbz	r3, 800f252 <USBD_CDC_DataIn+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f248:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 800f24c:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800f250:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f252:	2000      	movs	r0, #0
}
 800f254:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f256:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800f25a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800f25e:	6c64      	ldr	r4, [r4, #68]	@ 0x44
 800f260:	fbb3 f6f4 	udiv	r6, r3, r4
 800f264:	fb04 3316 	mls	r3, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d1e6      	bne.n	800f23a <USBD_CDC_DataIn+0x1e>
    pdev->ep_in[epnum].total_length = 0U;
 800f26c:	f8ce 3018 	str.w	r3, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f270:	461a      	mov	r2, r3
 800f272:	f7f2 fb13 	bl	800189c <USBD_LL_Transmit>
 800f276:	e7ec      	b.n	800f252 <USBD_CDC_DataIn+0x36>
    return (uint8_t)USBD_FAIL;
 800f278:	2003      	movs	r0, #3
}
 800f27a:	bd70      	pop	{r4, r5, r6, pc}

0800f27c <USBD_CDC_Setup>:
{
 800f27c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f27e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	@ 0x2bc
{
 800f282:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800f284:	2300      	movs	r3, #0
 800f286:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800f28a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800f28e:	b15d      	cbz	r5, 800f2a8 <USBD_CDC_Setup+0x2c>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f290:	780b      	ldrb	r3, [r1, #0]
 800f292:	f013 0260 	ands.w	r2, r3, #96	@ 0x60
 800f296:	4606      	mov	r6, r0
 800f298:	460c      	mov	r4, r1
 800f29a:	d01d      	beq.n	800f2d8 <USBD_CDC_Setup+0x5c>
 800f29c:	2a20      	cmp	r2, #32
 800f29e:	d006      	beq.n	800f2ae <USBD_CDC_Setup+0x32>
          USBD_CtlError(pdev, req);
 800f2a0:	4621      	mov	r1, r4
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	f000 fd1c 	bl	800fce0 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800f2a8:	2003      	movs	r0, #3
}
 800f2aa:	b002      	add	sp, #8
 800f2ac:	bd70      	pop	{r4, r5, r6, pc}
      if (req->wLength != 0U)
 800f2ae:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f2b0:	f891 c001 	ldrb.w	ip, [r1, #1]
      if (req->wLength != 0U)
 800f2b4:	b372      	cbz	r2, 800f314 <USBD_CDC_Setup+0x98>
        if ((req->bmRequest & 0x80U) != 0U)
 800f2b6:	061b      	lsls	r3, r3, #24
 800f2b8:	d54c      	bpl.n	800f354 <USBD_CDC_Setup+0xd8>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f2ba:	f8d6 32c0 	ldr.w	r3, [r6, #704]	@ 0x2c0
 800f2be:	4629      	mov	r1, r5
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	4660      	mov	r0, ip
 800f2c4:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f2c6:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f2c8:	2a07      	cmp	r2, #7
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	bf28      	it	cs
 800f2ce:	2207      	movcs	r2, #7
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	f000 fd39 	bl	800fd48 <USBD_CtlSendData>
 800f2d6:	e022      	b.n	800f31e <USBD_CDC_Setup+0xa2>
      switch (req->bRequest)
 800f2d8:	784b      	ldrb	r3, [r1, #1]
 800f2da:	2b0b      	cmp	r3, #11
 800f2dc:	d8e0      	bhi.n	800f2a0 <USBD_CDC_Setup+0x24>
 800f2de:	a201      	add	r2, pc, #4	@ (adr r2, 800f2e4 <USBD_CDC_Setup+0x68>)
 800f2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e4:	0800f32d 	.word	0x0800f32d
 800f2e8:	0800f31f 	.word	0x0800f31f
 800f2ec:	0800f2a1 	.word	0x0800f2a1
 800f2f0:	0800f2a1 	.word	0x0800f2a1
 800f2f4:	0800f2a1 	.word	0x0800f2a1
 800f2f8:	0800f2a1 	.word	0x0800f2a1
 800f2fc:	0800f2a1 	.word	0x0800f2a1
 800f300:	0800f2a1 	.word	0x0800f2a1
 800f304:	0800f2a1 	.word	0x0800f2a1
 800f308:	0800f2a1 	.word	0x0800f2a1
 800f30c:	0800f341 	.word	0x0800f341
 800f310:	0800f323 	.word	0x0800f323
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f314:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 800f318:	4660      	mov	r0, ip
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 800f31e:	2000      	movs	r0, #0
 800f320:	e7c3      	b.n	800f2aa <USBD_CDC_Setup+0x2e>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f322:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f326:	2b03      	cmp	r3, #3
 800f328:	d0f9      	beq.n	800f31e <USBD_CDC_Setup+0xa2>
 800f32a:	e7b9      	b.n	800f2a0 <USBD_CDC_Setup+0x24>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f32c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f330:	2b03      	cmp	r3, #3
 800f332:	d1b5      	bne.n	800f2a0 <USBD_CDC_Setup+0x24>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f334:	2202      	movs	r2, #2
 800f336:	f10d 0106 	add.w	r1, sp, #6
 800f33a:	f000 fd05 	bl	800fd48 <USBD_CtlSendData>
 800f33e:	e7ee      	b.n	800f31e <USBD_CDC_Setup+0xa2>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f340:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f344:	2b03      	cmp	r3, #3
 800f346:	d1ab      	bne.n	800f2a0 <USBD_CDC_Setup+0x24>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f348:	2201      	movs	r2, #1
 800f34a:	f10d 0105 	add.w	r1, sp, #5
 800f34e:	f000 fcfb 	bl	800fd48 <USBD_CtlSendData>
 800f352:	e7e4      	b.n	800f31e <USBD_CDC_Setup+0xa2>
          hcdc->CmdOpCode = req->bRequest;
 800f354:	f885 c200 	strb.w	ip, [r5, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f358:	f885 2201 	strb.w	r2, [r5, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f35c:	4629      	mov	r1, r5
 800f35e:	f000 fd09 	bl	800fd74 <USBD_CtlPrepareRx>
 800f362:	e7dc      	b.n	800f31e <USBD_CDC_Setup+0xa2>

0800f364 <USBD_CDC_DeInit>:
{
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f368:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f36a:	2181      	movs	r1, #129	@ 0x81
 800f36c:	f7f2 fa52 	bl	8001814 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f370:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f372:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f374:	4620      	mov	r0, r4
 800f376:	f7f2 fa4d 	bl	8001814 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f37a:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f37e:	2182      	movs	r1, #130	@ 0x82
 800f380:	4620      	mov	r0, r4
 800f382:	f7f2 fa47 	bl	8001814 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800f386:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f38a:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassData != NULL)
 800f38c:	b14b      	cbz	r3, 800f3a2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f38e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f396:	f8d4 02bc 	ldr.w	r0, [r4, #700]	@ 0x2bc
 800f39a:	f7f2 fad1 	bl	8001940 <USBD_static_free>
    pdev->pClassData = NULL;
 800f39e:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	bd38      	pop	{r3, r4, r5, pc}
 800f3a6:	bf00      	nop

0800f3a8 <USBD_CDC_Init>:
{
 800f3a8:	b570      	push	{r4, r5, r6, lr}
 800f3aa:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f3ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f3b0:	f7f2 fac2 	bl	8001938 <USBD_static_malloc>
  if (hcdc == NULL)
 800f3b4:	4605      	mov	r5, r0
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	d049      	beq.n	800f44e <USBD_CDC_Init+0xa6>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3ba:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800f3bc:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3c0:	b37b      	cbz	r3, 800f422 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f3c2:	2340      	movs	r3, #64	@ 0x40
 800f3c4:	2202      	movs	r2, #2
 800f3c6:	2181      	movs	r1, #129	@ 0x81
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f7f2 fa15 	bl	80017f8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f3ce:	2101      	movs	r1, #1
 800f3d0:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f3d2:	2340      	movs	r3, #64	@ 0x40
 800f3d4:	2202      	movs	r2, #2
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f7f2 fa0e 	bl	80017f8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f3dc:	2601      	movs	r6, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f3de:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f3e0:	2308      	movs	r3, #8
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f3e2:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f3e6:	2182      	movs	r1, #130	@ 0x82
 800f3e8:	2203      	movs	r2, #3
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f3ea:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f7f2 fa02 	bl	80017f8 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f3f4:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f3f8:	f8a4 604c 	strh.w	r6, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4798      	blx	r3
  hcdc->TxState = 0U;
 800f400:	2300      	movs	r3, #0
 800f402:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f406:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f40a:	7c23      	ldrb	r3, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f40c:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f410:	b9bb      	cbnz	r3, 800f442 <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f416:	4631      	mov	r1, r6
 800f418:	4620      	mov	r0, r4
 800f41a:	f7f2 fa4b 	bl	80018b4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800f41e:	2000      	movs	r0, #0
}
 800f420:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f426:	2202      	movs	r2, #2
 800f428:	2181      	movs	r1, #129	@ 0x81
 800f42a:	4620      	mov	r0, r4
 800f42c:	f7f2 f9e4 	bl	80017f8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f430:	2101      	movs	r1, #1
 800f432:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f438:	2202      	movs	r2, #2
 800f43a:	4620      	mov	r0, r4
 800f43c:	f7f2 f9dc 	bl	80017f8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f440:	e7cc      	b.n	800f3dc <USBD_CDC_Init+0x34>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f442:	2340      	movs	r3, #64	@ 0x40
 800f444:	4631      	mov	r1, r6
 800f446:	4620      	mov	r0, r4
 800f448:	f7f2 fa34 	bl	80018b4 <USBD_LL_PrepareReceive>
 800f44c:	e7e7      	b.n	800f41e <USBD_CDC_Init+0x76>
    pdev->pClassData = NULL;
 800f44e:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800f452:	2002      	movs	r0, #2
}
 800f454:	bd70      	pop	{r4, r5, r6, pc}
 800f456:	bf00      	nop

0800f458 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800f458:	b119      	cbz	r1, 800f462 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800f45a:	f8c0 12c0 	str.w	r1, [r0, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f45e:	2000      	movs	r0, #0
 800f460:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f462:	2003      	movs	r0, #3
}
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop

0800f468 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f468:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f46c:	b12b      	cbz	r3, 800f47a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800f46e:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f472:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f476:	2000      	movs	r0, #0
 800f478:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f47a:	2003      	movs	r0, #3
}
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop

0800f480 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f480:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc

  if (hcdc == NULL)
 800f484:	b11b      	cbz	r3, 800f48e <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800f486:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f48a:	2000      	movs	r0, #0
 800f48c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f48e:	2003      	movs	r0, #3
}
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop

0800f494 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f494:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc

  if (pdev->pClassData == NULL)
 800f498:	b18a      	cbz	r2, 800f4be <USBD_CDC_ReceivePacket+0x2a>
{
 800f49a:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f49c:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f49e:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4a2:	b12b      	cbz	r3, 800f4b0 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f4a4:	2340      	movs	r3, #64	@ 0x40
 800f4a6:	2101      	movs	r1, #1
 800f4a8:	f7f2 fa04 	bl	80018b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f4ac:	2000      	movs	r0, #0
}
 800f4ae:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f4b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	f7f2 f9fd 	bl	80018b4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800f4ba:	2000      	movs	r0, #0
}
 800f4bc:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 800f4be:	2003      	movs	r0, #3
}
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop

0800f4c4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f4c4:	b178      	cbz	r0, 800f4e6 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f4cc:	f8c0 32c0 	str.w	r3, [r0, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f4d0:	f8c0 32cc 	str.w	r3, [r0, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f4d4:	b109      	cbz	r1, 800f4da <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800f4d6:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 800f4e0:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f4e2:	f7f2 b94b 	b.w	800177c <USBD_LL_Init>

  return ret;
}
 800f4e6:	2003      	movs	r0, #3
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop

0800f4ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800f4f6:	b161      	cbz	r1, 800f512 <USBD_RegisterClass+0x26>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f4f8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass = pclass;
 800f4fa:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f4fe:	4604      	mov	r4, r0
 800f500:	b123      	cbz	r3, 800f50c <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f502:	f10d 0006 	add.w	r0, sp, #6
 800f506:	4798      	blx	r3
 800f508:	f8c4 02cc 	str.w	r0, [r4, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f50c:	2000      	movs	r0, #0
}
 800f50e:	b002      	add	sp, #8
 800f510:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800f512:	2003      	movs	r0, #3
}
 800f514:	b002      	add	sp, #8
 800f516:	bd10      	pop	{r4, pc}

0800f518 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f518:	f7f2 b962 	b.w	80017e0 <USBD_LL_Start>

0800f51c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800f51c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f520:	b10b      	cbz	r3, 800f526 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4718      	bx	r3
  }

  return ret;
}
 800f526:	2003      	movs	r0, #3
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop

0800f52c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f52c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f52e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f532:	b10b      	cbz	r3, 800f538 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	4798      	blx	r3
  }

  return USBD_OK;
}
 800f538:	2000      	movs	r0, #0
 800f53a:	bd08      	pop	{r3, pc}

0800f53c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f53c:	b538      	push	{r3, r4, r5, lr}
 800f53e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f540:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800f544:	4628      	mov	r0, r5
 800f546:	f000 fbbf 	bl	800fcc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800f54a:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 800f54e:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 800f552:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800f556:	2301      	movs	r3, #1
 800f558:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800f55c:	f001 031f 	and.w	r3, r1, #31
 800f560:	2b01      	cmp	r3, #1
 800f562:	d009      	beq.n	800f578 <USBD_LL_SetupStage+0x3c>
 800f564:	2b02      	cmp	r3, #2
 800f566:	d013      	beq.n	800f590 <USBD_LL_SetupStage+0x54>
 800f568:	b163      	cbz	r3, 800f584 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f56a:	4620      	mov	r0, r4
 800f56c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 800f570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f574:	f7f2 b95a 	b.w	800182c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f578:	4629      	mov	r1, r5
 800f57a:	4620      	mov	r0, r4
}
 800f57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f580:	f000 bad4 	b.w	800fb2c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f584:	4629      	mov	r1, r5
 800f586:	4620      	mov	r0, r4
}
 800f588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f58c:	f000 b91e 	b.w	800f7cc <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f590:	4629      	mov	r1, r5
 800f592:	4620      	mov	r0, r4
}
 800f594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f598:	f000 bafc 	b.w	800fb94 <USBD_StdEPReq>

0800f59c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f59c:	b510      	push	{r4, lr}
 800f59e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f5a0:	b931      	cbnz	r1, 800f5b0 <USBD_LL_DataOutStage+0x14>
 800f5a2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f5a4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800f5a8:	2a03      	cmp	r2, #3
 800f5aa:	d00d      	beq.n	800f5c8 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5b0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f5b4:	2b03      	cmp	r3, #3
 800f5b6:	d1f9      	bne.n	800f5ac <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 800f5b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f5bc:	699b      	ldr	r3, [r3, #24]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d0f4      	beq.n	800f5ac <USBD_LL_DataOutStage+0x10>
}
 800f5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f5c6:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800f5c8:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 800f5cc:	4291      	cmp	r1, r2
 800f5ce:	d808      	bhi.n	800f5e2 <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5d0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f5d4:	2b03      	cmp	r3, #3
 800f5d6:	d00e      	beq.n	800f5f6 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f000 fbe1 	bl	800fda0 <USBD_CtlSendStatus>
}
 800f5de:	2000      	movs	r0, #0
 800f5e0:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800f5e2:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f5e4:	428a      	cmp	r2, r1
 800f5e6:	bf28      	it	cs
 800f5e8:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800f5ea:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	f000 fbce 	bl	800fd90 <USBD_CtlContinueRx>
 800f5f4:	e7da      	b.n	800f5ac <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 800f5f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f5fa:	691b      	ldr	r3, [r3, #16]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d0eb      	beq.n	800f5d8 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 800f600:	4798      	blx	r3
 800f602:	e7e9      	b.n	800f5d8 <USBD_LL_DataOutStage+0x3c>

0800f604 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f604:	b570      	push	{r4, r5, r6, lr}
 800f606:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f608:	b951      	cbnz	r1, 800f620 <USBD_LL_DataInStage+0x1c>
 800f60a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f60c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800f610:	2a02      	cmp	r2, #2
 800f612:	d011      	beq.n	800f638 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f614:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d022      	beq.n	800f662 <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 800f61c:	2000      	movs	r0, #0
 800f61e:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f620:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f624:	2b03      	cmp	r3, #3
 800f626:	d1f9      	bne.n	800f61c <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 800f628:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d0f4      	beq.n	800f61c <USBD_LL_DataInStage+0x18>
}
 800f632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f636:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800f638:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800f63c:	42b2      	cmp	r2, r6
 800f63e:	460d      	mov	r5, r1
 800f640:	d814      	bhi.n	800f66c <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800f642:	d01f      	beq.n	800f684 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f644:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800f648:	2b03      	cmp	r3, #3
 800f64a:	d028      	beq.n	800f69e <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f64c:	2180      	movs	r1, #128	@ 0x80
 800f64e:	4620      	mov	r0, r4
 800f650:	f7f2 f8ec 	bl	800182c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f654:	4620      	mov	r0, r4
 800f656:	f000 fbaf 	bl	800fdb8 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800f65a:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d1dc      	bne.n	800f61c <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 800f662:	2300      	movs	r3, #0
 800f664:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
}
 800f668:	2000      	movs	r0, #0
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800f66c:	1b92      	subs	r2, r2, r6
 800f66e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f670:	4619      	mov	r1, r3
 800f672:	f000 fb77 	bl	800fd64 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f676:	462b      	mov	r3, r5
 800f678:	462a      	mov	r2, r5
 800f67a:	4629      	mov	r1, r5
 800f67c:	4620      	mov	r0, r4
 800f67e:	f7f2 f919 	bl	80018b4 <USBD_LL_PrepareReceive>
 800f682:	e7c7      	b.n	800f614 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800f684:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800f686:	429a      	cmp	r2, r3
 800f688:	d8dc      	bhi.n	800f644 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 800f68a:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800f68e:	4293      	cmp	r3, r2
 800f690:	d2d8      	bcs.n	800f644 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f692:	460a      	mov	r2, r1
 800f694:	f000 fb66 	bl	800fd64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f698:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 800f69c:	e7eb      	b.n	800f676 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800f69e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d0d1      	beq.n	800f64c <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	4798      	blx	r3
 800f6ac:	e7ce      	b.n	800f64c <USBD_LL_DataInStage+0x48>
 800f6ae:	bf00      	nop

0800f6b0 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800f6b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800f6b4:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
  pdev->dev_config = 0U;
 800f6bc:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800f6be:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 800f6c2:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  if (pdev->pClass == NULL)
 800f6c6:	b1eb      	cbz	r3, 800f704 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800f6c8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
{
 800f6cc:	b570      	push	{r4, r5, r6, lr}
 800f6ce:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800f6d0:	b112      	cbz	r2, 800f6d8 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	b103      	cbz	r3, 800f6d8 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f6d6:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6d8:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f6da:	2200      	movs	r2, #0
 800f6dc:	4611      	mov	r1, r2
 800f6de:	462b      	mov	r3, r5
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f6e0:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7f2 f888 	bl	80017f8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f6e8:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6ec:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f6f0:	462b      	mov	r3, r5
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	2180      	movs	r1, #128	@ 0x80
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f7f2 f87e 	bl	80017f8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f6fc:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6fe:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800f700:	2000      	movs	r0, #0
}
 800f702:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800f704:	2003      	movs	r0, #3
}
 800f706:	4770      	bx	lr

0800f708 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800f708:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800f70a:	2000      	movs	r0, #0
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop

0800f710 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800f710:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
{
 800f714:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f716:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 800f718:	b2d2      	uxtb	r2, r2
 800f71a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d

  return USBD_OK;
}
 800f71e:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f720:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
}
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop

0800f728 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f728:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f72c:	2b04      	cmp	r3, #4
 800f72e:	d104      	bne.n	800f73a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f730:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800f734:	b2db      	uxtb	r3, r3
 800f736:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800f73a:	2000      	movs	r0, #0
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop

0800f740 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800f740:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800f744:	b162      	cbz	r2, 800f760 <USBD_LL_SOF+0x20>
{
 800f746:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f748:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f74c:	2b03      	cmp	r3, #3
 800f74e:	d001      	beq.n	800f754 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800f750:	2000      	movs	r0, #0
}
 800f752:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800f754:	69d3      	ldr	r3, [r2, #28]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d0fa      	beq.n	800f750 <USBD_LL_SOF+0x10>
      (void)pdev->pClass->SOF(pdev);
 800f75a:	4798      	blx	r3
  return USBD_OK;
 800f75c:	2000      	movs	r0, #0
}
 800f75e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800f760:	2003      	movs	r0, #3
}
 800f762:	4770      	bx	lr

0800f764 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800f764:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800f768:	b162      	cbz	r2, 800f784 <USBD_LL_IsoINIncomplete+0x20>
{
 800f76a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f76c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f770:	2b03      	cmp	r3, #3
 800f772:	d001      	beq.n	800f778 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800f774:	2000      	movs	r0, #0
}
 800f776:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f778:	6a13      	ldr	r3, [r2, #32]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d0fa      	beq.n	800f774 <USBD_LL_IsoINIncomplete+0x10>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f77e:	4798      	blx	r3
  return USBD_OK;
 800f780:	2000      	movs	r0, #0
}
 800f782:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800f784:	2003      	movs	r0, #3
}
 800f786:	4770      	bx	lr

0800f788 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800f788:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800f78c:	b162      	cbz	r2, 800f7a8 <USBD_LL_IsoOUTIncomplete+0x20>
{
 800f78e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f790:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f794:	2b03      	cmp	r3, #3
 800f796:	d001      	beq.n	800f79c <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800f798:	2000      	movs	r0, #0
}
 800f79a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f79c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d0fa      	beq.n	800f798 <USBD_LL_IsoOUTIncomplete+0x10>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f7a2:	4798      	blx	r3
  return USBD_OK;
 800f7a4:	2000      	movs	r0, #0
}
 800f7a6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800f7a8:	2003      	movs	r0, #3
}
 800f7aa:	4770      	bx	lr

0800f7ac <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	4770      	bx	lr

0800f7b0 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 800f7b0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f7b4:	2101      	movs	r1, #1
 800f7b6:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass != NULL)
 800f7ba:	b12a      	cbz	r2, 800f7c8 <USBD_LL_DevDisconnected+0x18>
{
 800f7bc:	b508      	push	{r3, lr}
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f7be:	6852      	ldr	r2, [r2, #4]
 800f7c0:	7901      	ldrb	r1, [r0, #4]
 800f7c2:	4790      	blx	r2
  }

  return USBD_OK;
}
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	bd08      	pop	{r3, pc}
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	4770      	bx	lr

0800f7cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7cc:	b530      	push	{r4, r5, lr}
 800f7ce:	780b      	ldrb	r3, [r1, #0]
 800f7d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7d4:	2b20      	cmp	r3, #32
{
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	460d      	mov	r5, r1
 800f7da:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7dc:	d00e      	beq.n	800f7fc <USBD_StdDevReq+0x30>
 800f7de:	2b40      	cmp	r3, #64	@ 0x40
 800f7e0:	d00c      	beq.n	800f7fc <USBD_StdDevReq+0x30>
 800f7e2:	b1a3      	cbz	r3, 800f80e <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7e4:	2180      	movs	r1, #128	@ 0x80
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f7f2 f820 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	f7f2 f81c 	bl	800182c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800f7f4:	2500      	movs	r5, #0
}
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	b003      	add	sp, #12
 800f7fa:	bd30      	pop	{r4, r5, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7fc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	4629      	mov	r1, r5
 800f804:	4620      	mov	r0, r4
}
 800f806:	b003      	add	sp, #12
 800f808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f80c:	4718      	bx	r3
      switch (req->bRequest)
 800f80e:	784b      	ldrb	r3, [r1, #1]
 800f810:	2b09      	cmp	r3, #9
 800f812:	d8e7      	bhi.n	800f7e4 <USBD_StdDevReq+0x18>
 800f814:	a201      	add	r2, pc, #4	@ (adr r2, 800f81c <USBD_StdDevReq+0x50>)
 800f816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f81a:	bf00      	nop
 800f81c:	0800f87d 	.word	0x0800f87d
 800f820:	0800f8a5 	.word	0x0800f8a5
 800f824:	0800f7e5 	.word	0x0800f7e5
 800f828:	0800f8c3 	.word	0x0800f8c3
 800f82c:	0800f7e5 	.word	0x0800f7e5
 800f830:	0800f8cb 	.word	0x0800f8cb
 800f834:	0800f905 	.word	0x0800f905
 800f838:	0800f7e5 	.word	0x0800f7e5
 800f83c:	0800f959 	.word	0x0800f959
 800f840:	0800f845 	.word	0x0800f845
  cfgidx = (uint8_t)(req->wValue);
 800f844:	7889      	ldrb	r1, [r1, #2]
 800f846:	4db6      	ldr	r5, [pc, #728]	@ (800fb20 <USBD_StdDevReq+0x354>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f848:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800f84a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f84c:	f200 8148 	bhi.w	800fae0 <USBD_StdDevReq+0x314>
  switch (pdev->dev_state)
 800f850:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f854:	2b02      	cmp	r3, #2
 800f856:	b2da      	uxtb	r2, r3
 800f858:	f000 8130 	beq.w	800fabc <USBD_StdDevReq+0x2f0>
 800f85c:	2a03      	cmp	r2, #3
 800f85e:	f000 810b 	beq.w	800fa78 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f862:	2180      	movs	r1, #128	@ 0x80
 800f864:	f7f1 ffe2 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f868:	2100      	movs	r1, #0
 800f86a:	4620      	mov	r0, r4
 800f86c:	f7f1 ffde 	bl	800182c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f870:	7829      	ldrb	r1, [r5, #0]
 800f872:	4620      	mov	r0, r4
 800f874:	f7ff fe5a 	bl	800f52c <USBD_ClrClassConfig>
    return USBD_FAIL;
 800f878:	2503      	movs	r5, #3
 800f87a:	e7bc      	b.n	800f7f6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800f87c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f880:	3b01      	subs	r3, #1
 800f882:	2b02      	cmp	r3, #2
 800f884:	d8ae      	bhi.n	800f7e4 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800f886:	88ca      	ldrh	r2, [r1, #6]
 800f888:	2a02      	cmp	r2, #2
 800f88a:	d1ab      	bne.n	800f7e4 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 800f88c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800f890:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f892:	2b00      	cmp	r3, #0
 800f894:	bf0c      	ite	eq
 800f896:	2301      	moveq	r3, #1
 800f898:	2303      	movne	r3, #3
 800f89a:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f89e:	f000 fa53 	bl	800fd48 <USBD_CtlSendData>
      break;
 800f8a2:	e7a7      	b.n	800f7f4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800f8a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f8a8:	3b01      	subs	r3, #1
 800f8aa:	2b02      	cmp	r3, #2
 800f8ac:	d89a      	bhi.n	800f7e4 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8ae:	884b      	ldrh	r3, [r1, #2]
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d19f      	bne.n	800f7f4 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f000 fa70 	bl	800fda0 <USBD_CtlSendStatus>
 800f8c0:	e798      	b.n	800f7f4 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8c2:	884b      	ldrh	r3, [r1, #2]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d195      	bne.n	800f7f4 <USBD_StdDevReq+0x28>
 800f8c8:	e7f5      	b.n	800f8b6 <USBD_StdDevReq+0xea>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f8ca:	888b      	ldrh	r3, [r1, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d189      	bne.n	800f7e4 <USBD_StdDevReq+0x18>
 800f8d0:	88cb      	ldrh	r3, [r1, #6]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d186      	bne.n	800f7e4 <USBD_StdDevReq+0x18>
 800f8d6:	884d      	ldrh	r5, [r1, #2]
 800f8d8:	2d7f      	cmp	r5, #127	@ 0x7f
 800f8da:	d883      	bhi.n	800f7e4 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800f8e0:	2b03      	cmp	r3, #3
 800f8e2:	f43f af7f 	beq.w	800f7e4 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8e6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800f8e8:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8ec:	f7f1 ffca 	bl	8001884 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	f000 fa55 	bl	800fda0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800f8f6:	2d00      	cmp	r5, #0
 800f8f8:	f000 8114 	beq.w	800fb24 <USBD_StdDevReq+0x358>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800f902:	e777      	b.n	800f7f4 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800f904:	884a      	ldrh	r2, [r1, #2]
 800f906:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800f908:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800f90a:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 800f90c:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800f910:	2b0e      	cmp	r3, #14
 800f912:	f63f af67 	bhi.w	800f7e4 <USBD_StdDevReq+0x18>
 800f916:	a101      	add	r1, pc, #4	@ (adr r1, 800f91c <USBD_StdDevReq+0x150>)
 800f918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f91c:	0800f9f9 	.word	0x0800f9f9
 800f920:	0800f9df 	.word	0x0800f9df
 800f924:	0800f9cd 	.word	0x0800f9cd
 800f928:	0800f7e5 	.word	0x0800f7e5
 800f92c:	0800f7e5 	.word	0x0800f7e5
 800f930:	0800f9b7 	.word	0x0800f9b7
 800f934:	0800fa09 	.word	0x0800fa09
 800f938:	0800f7e5 	.word	0x0800f7e5
 800f93c:	0800f7e5 	.word	0x0800f7e5
 800f940:	0800f7e5 	.word	0x0800f7e5
 800f944:	0800f7e5 	.word	0x0800f7e5
 800f948:	0800f7e5 	.word	0x0800f7e5
 800f94c:	0800f7e5 	.word	0x0800f7e5
 800f950:	0800f7e5 	.word	0x0800f7e5
 800f954:	0800f97f 	.word	0x0800f97f
  if (req->wLength != 1U)
 800f958:	88ca      	ldrh	r2, [r1, #6]
 800f95a:	2a01      	cmp	r2, #1
 800f95c:	f47f af42 	bne.w	800f7e4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800f960:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 800f964:	2902      	cmp	r1, #2
 800f966:	b2cb      	uxtb	r3, r1
 800f968:	d87f      	bhi.n	800fa6a <USBD_StdDevReq+0x29e>
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f43f af3a 	beq.w	800f7e4 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800f970:	4601      	mov	r1, r0
 800f972:	2300      	movs	r3, #0
 800f974:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f978:	f000 f9e6 	bl	800fd48 <USBD_CtlSendData>
        break;
 800f97c:	e73a      	b.n	800f7f4 <USBD_StdDevReq+0x28>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f97e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f982:	69db      	ldr	r3, [r3, #28]
 800f984:	2b00      	cmp	r3, #0
 800f986:	f43f af2d 	beq.w	800f7e4 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f98a:	7c20      	ldrb	r0, [r4, #16]
 800f98c:	f10d 0106 	add.w	r1, sp, #6
 800f990:	4798      	blx	r3
  if (req->wLength != 0U)
 800f992:	88eb      	ldrh	r3, [r5, #6]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d090      	beq.n	800f8ba <USBD_StdDevReq+0xee>
    if (len != 0U)
 800f998:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f99c:	2a00      	cmp	r2, #0
 800f99e:	f43f af21 	beq.w	800f7e4 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	bf28      	it	cs
 800f9a6:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f9a8:	4601      	mov	r1, r0
 800f9aa:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800f9ac:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f9b0:	f000 f9ca 	bl	800fd48 <USBD_CtlSendData>
 800f9b4:	e71e      	b.n	800f7f4 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9b6:	7c03      	ldrb	r3, [r0, #16]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f47f af13 	bne.w	800f7e4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f9be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800f9c2:	f10d 0006 	add.w	r0, sp, #6
 800f9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9c8:	4798      	blx	r3
  if (err != 0U)
 800f9ca:	e7e2      	b.n	800f992 <USBD_StdDevReq+0x1c6>
      switch ((uint8_t)(req->wValue))
 800f9cc:	b2d2      	uxtb	r2, r2
 800f9ce:	2a05      	cmp	r2, #5
 800f9d0:	f63f af08 	bhi.w	800f7e4 <USBD_StdDevReq+0x18>
 800f9d4:	e8df f002 	tbb	[pc, r2]
 800f9d8:	31373d43 	.word	0x31373d43
 800f9dc:	252b      	.short	0x252b
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9de:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f9e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9e4:	2a00      	cmp	r2, #0
 800f9e6:	f040 808d 	bne.w	800fb04 <USBD_StdDevReq+0x338>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ec:	f10d 0006 	add.w	r0, sp, #6
 800f9f0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f9f2:	2302      	movs	r3, #2
 800f9f4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800f9f6:	e7cc      	b.n	800f992 <USBD_StdDevReq+0x1c6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f9f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800f9fc:	7c00      	ldrb	r0, [r0, #16]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f10d 0106 	add.w	r1, sp, #6
 800fa04:	4798      	blx	r3
  if (err != 0U)
 800fa06:	e7c4      	b.n	800f992 <USBD_StdDevReq+0x1c6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa08:	7c03      	ldrb	r3, [r0, #16]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	f47f aeea 	bne.w	800f7e4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fa10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800fa14:	f10d 0006 	add.w	r0, sp, #6
 800fa18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa1a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fa1c:	2307      	movs	r3, #7
 800fa1e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800fa20:	e7b7      	b.n	800f992 <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fa22:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fa26:	699b      	ldr	r3, [r3, #24]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d1ae      	bne.n	800f98a <USBD_StdDevReq+0x1be>
 800fa2c:	e6da      	b.n	800f7e4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fa2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fa32:	695b      	ldr	r3, [r3, #20]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d1a8      	bne.n	800f98a <USBD_StdDevReq+0x1be>
 800fa38:	e6d4      	b.n	800f7e4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fa3a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fa3e:	691b      	ldr	r3, [r3, #16]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d1a2      	bne.n	800f98a <USBD_StdDevReq+0x1be>
 800fa44:	e6ce      	b.n	800f7e4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fa46:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d19c      	bne.n	800f98a <USBD_StdDevReq+0x1be>
 800fa50:	e6c8      	b.n	800f7e4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fa52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d196      	bne.n	800f98a <USBD_StdDevReq+0x1be>
 800fa5c:	e6c2      	b.n	800f7e4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fa5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d190      	bne.n	800f98a <USBD_StdDevReq+0x1be>
 800fa68:	e6bc      	b.n	800f7e4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800fa6a:	2b03      	cmp	r3, #3
 800fa6c:	f47f aeba 	bne.w	800f7e4 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa70:	1d01      	adds	r1, r0, #4
 800fa72:	f000 f969 	bl	800fd48 <USBD_CtlSendData>
        break;
 800fa76:	e6bd      	b.n	800f7f4 <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 800fa78:	2900      	cmp	r1, #0
 800fa7a:	d039      	beq.n	800faf0 <USBD_StdDevReq+0x324>
      else if (cfgidx != pdev->dev_config)
 800fa7c:	6841      	ldr	r1, [r0, #4]
 800fa7e:	2901      	cmp	r1, #1
 800fa80:	f43f af1b 	beq.w	800f8ba <USBD_StdDevReq+0xee>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa84:	b2c9      	uxtb	r1, r1
 800fa86:	f7ff fd51 	bl	800f52c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa8a:	7829      	ldrb	r1, [r5, #0]
 800fa8c:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f7ff fd44 	bl	800f51c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800fa94:	4605      	mov	r5, r0
 800fa96:	2800      	cmp	r0, #0
 800fa98:	f43f af0f 	beq.w	800f8ba <USBD_StdDevReq+0xee>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa9c:	2180      	movs	r1, #128	@ 0x80
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f7f1 fec4 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800faa4:	2100      	movs	r1, #0
 800faa6:	4620      	mov	r0, r4
 800faa8:	f7f1 fec0 	bl	800182c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800faac:	7921      	ldrb	r1, [r4, #4]
 800faae:	4620      	mov	r0, r4
 800fab0:	f7ff fd3c 	bl	800f52c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fab4:	2302      	movs	r3, #2
 800fab6:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800faba:	e69c      	b.n	800f7f6 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800fabc:	2900      	cmp	r1, #0
 800fabe:	f43f aefc 	beq.w	800f8ba <USBD_StdDevReq+0xee>
        pdev->dev_config = cfgidx;
 800fac2:	2101      	movs	r1, #1
 800fac4:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fac6:	f7ff fd29 	bl	800f51c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800faca:	4605      	mov	r5, r0
 800facc:	b308      	cbz	r0, 800fb12 <USBD_StdDevReq+0x346>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800face:	2180      	movs	r1, #128	@ 0x80
 800fad0:	4620      	mov	r0, r4
 800fad2:	f7f1 feab 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fad6:	2100      	movs	r1, #0
 800fad8:	4620      	mov	r0, r4
 800fada:	f7f1 fea7 	bl	800182c <USBD_LL_StallEP>
}
 800fade:	e68a      	b.n	800f7f6 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fae0:	2180      	movs	r1, #128	@ 0x80
 800fae2:	f7f1 fea3 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fae6:	2100      	movs	r1, #0
 800fae8:	4620      	mov	r0, r4
 800faea:	f7f1 fe9f 	bl	800182c <USBD_LL_StallEP>
    return USBD_FAIL;
 800faee:	e6c3      	b.n	800f878 <USBD_StdDevReq+0xac>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800faf0:	2302      	movs	r3, #2
 800faf2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800faf6:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800faf8:	f7ff fd18 	bl	800f52c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fafc:	4620      	mov	r0, r4
 800fafe:	f000 f94f 	bl	800fda0 <USBD_CtlSendStatus>
 800fb02:	e677      	b.n	800f7f4 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb06:	f10d 0006 	add.w	r0, sp, #6
 800fb0a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800fb10:	e73f      	b.n	800f992 <USBD_StdDevReq+0x1c6>
          (void)USBD_CtlSendStatus(pdev);
 800fb12:	4620      	mov	r0, r4
 800fb14:	f000 f944 	bl	800fda0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fb18:	2303      	movs	r3, #3
 800fb1a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fb1e:	e669      	b.n	800f7f4 <USBD_StdDevReq+0x28>
 800fb20:	20002f18 	.word	0x20002f18
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fb24:	2301      	movs	r3, #1
 800fb26:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800fb2a:	e663      	b.n	800f7f4 <USBD_StdDevReq+0x28>

0800fb2c <USBD_StdItfReq>:
{
 800fb2c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb2e:	780b      	ldrb	r3, [r1, #0]
 800fb30:	065a      	lsls	r2, r3, #25
{
 800fb32:	460d      	mov	r5, r1
 800fb34:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb36:	d50c      	bpl.n	800fb52 <USBD_StdItfReq+0x26>
 800fb38:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800fb3c:	2a40      	cmp	r2, #64	@ 0x40
 800fb3e:	d008      	beq.n	800fb52 <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb40:	2180      	movs	r1, #128	@ 0x80
 800fb42:	f7f1 fe73 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb46:	2100      	movs	r1, #0
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f7f1 fe6f 	bl	800182c <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800fb4e:	2000      	movs	r0, #0
}
 800fb50:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800fb52:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800fb56:	3b01      	subs	r3, #1
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	d811      	bhi.n	800fb80 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fb5c:	792b      	ldrb	r3, [r5, #4]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d80e      	bhi.n	800fb80 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb62:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800fb66:	4629      	mov	r1, r5
 800fb68:	689b      	ldr	r3, [r3, #8]
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb6e:	88ea      	ldrh	r2, [r5, #6]
 800fb70:	2a00      	cmp	r2, #0
 800fb72:	d1ed      	bne.n	800fb50 <USBD_StdItfReq+0x24>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d1eb      	bne.n	800fb50 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f000 f911 	bl	800fda0 <USBD_CtlSendStatus>
 800fb7e:	e7e6      	b.n	800fb4e <USBD_StdItfReq+0x22>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb80:	2180      	movs	r1, #128	@ 0x80
 800fb82:	4620      	mov	r0, r4
 800fb84:	f7f1 fe52 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb88:	2100      	movs	r1, #0
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f7f1 fe4e 	bl	800182c <USBD_LL_StallEP>
}
 800fb90:	e7dd      	b.n	800fb4e <USBD_StdItfReq+0x22>
 800fb92:	bf00      	nop

0800fb94 <USBD_StdEPReq>:
{
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 800fb98:	888a      	ldrh	r2, [r1, #4]
 800fb9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb9e:	2b20      	cmp	r3, #32
{
 800fba0:	460c      	mov	r4, r1
 800fba2:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fba4:	d01b      	beq.n	800fbde <USBD_StdEPReq+0x4a>
 800fba6:	2b40      	cmp	r3, #64	@ 0x40
 800fba8:	d019      	beq.n	800fbde <USBD_StdEPReq+0x4a>
 800fbaa:	b303      	cbz	r3, 800fbee <USBD_StdEPReq+0x5a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbac:	2180      	movs	r1, #128	@ 0x80
 800fbae:	4628      	mov	r0, r5
 800fbb0:	f7f1 fe3c 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f7f1 fe38 	bl	800182c <USBD_LL_StallEP>
}
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800fbc0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	b2da      	uxtb	r2, r3
 800fbc8:	d053      	beq.n	800fc72 <USBD_StdEPReq+0xde>
 800fbca:	2a03      	cmp	r2, #3
 800fbcc:	d1ee      	bne.n	800fbac <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fbce:	8863      	ldrh	r3, [r4, #2]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d1f3      	bne.n	800fbbc <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 800fbd4:	064e      	lsls	r6, r1, #25
 800fbd6:	d171      	bne.n	800fcbc <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800fbd8:	4628      	mov	r0, r5
 800fbda:	f000 f8e1 	bl	800fda0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fbde:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
 800fbe2:	4621      	mov	r1, r4
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	689b      	ldr	r3, [r3, #8]
}
 800fbe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fbec:	4718      	bx	r3
      switch (req->bRequest)
 800fbee:	7863      	ldrb	r3, [r4, #1]
 800fbf0:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 800fbf2:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800fbf4:	d0e4      	beq.n	800fbc0 <USBD_StdEPReq+0x2c>
 800fbf6:	2b03      	cmp	r3, #3
 800fbf8:	d02a      	beq.n	800fc50 <USBD_StdEPReq+0xbc>
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1d6      	bne.n	800fbac <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 800fbfe:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	b2d8      	uxtb	r0, r3
 800fc06:	d03d      	beq.n	800fc84 <USBD_StdEPReq+0xf0>
 800fc08:	2803      	cmp	r0, #3
 800fc0a:	d1cf      	bne.n	800fbac <USBD_StdEPReq+0x18>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fc0c:	f001 030f 	and.w	r3, r1, #15
 800fc10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800fc14:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fc16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800fc1a:	d442      	bmi.n	800fca2 <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fc1c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d0c3      	beq.n	800fbac <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc24:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800fc28:	2414      	movs	r4, #20
 800fc2a:	fb04 5403 	mla	r4, r4, r3, r5
 800fc2e:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d040      	beq.n	800fcb8 <USBD_StdEPReq+0x124>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fc36:	4628      	mov	r0, r5
 800fc38:	f7f1 fe10 	bl	800185c <USBD_LL_IsStallEP>
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	d03b      	beq.n	800fcb8 <USBD_StdEPReq+0x124>
 800fc40:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 800fc42:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fc44:	2202      	movs	r2, #2
 800fc46:	4621      	mov	r1, r4
 800fc48:	4628      	mov	r0, r5
 800fc4a:	f000 f87d 	bl	800fd48 <USBD_CtlSendData>
              break;
 800fc4e:	e7b5      	b.n	800fbbc <USBD_StdEPReq+0x28>
          switch (pdev->dev_state)
 800fc50:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800fc54:	2b02      	cmp	r3, #2
 800fc56:	b2da      	uxtb	r2, r3
 800fc58:	d00b      	beq.n	800fc72 <USBD_StdEPReq+0xde>
 800fc5a:	2a03      	cmp	r2, #3
 800fc5c:	d1a6      	bne.n	800fbac <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc5e:	8863      	ldrh	r3, [r4, #2]
 800fc60:	b91b      	cbnz	r3, 800fc6a <USBD_StdEPReq+0xd6>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc62:	064a      	lsls	r2, r1, #25
 800fc64:	d001      	beq.n	800fc6a <USBD_StdEPReq+0xd6>
 800fc66:	88e3      	ldrh	r3, [r4, #6]
 800fc68:	b35b      	cbz	r3, 800fcc2 <USBD_StdEPReq+0x12e>
              (void)USBD_CtlSendStatus(pdev);
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f000 f898 	bl	800fda0 <USBD_CtlSendStatus>
              break;
 800fc70:	e7a4      	b.n	800fbbc <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc72:	064b      	lsls	r3, r1, #25
 800fc74:	d09a      	beq.n	800fbac <USBD_StdEPReq+0x18>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc76:	f7f1 fdd9 	bl	800182c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc7a:	2180      	movs	r1, #128	@ 0x80
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	f7f1 fdd5 	bl	800182c <USBD_LL_StallEP>
 800fc82:	e79b      	b.n	800fbbc <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc84:	0648      	lsls	r0, r1, #25
 800fc86:	d191      	bne.n	800fbac <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc88:	0611      	lsls	r1, r2, #24
 800fc8a:	bf4c      	ite	mi
 800fc8c:	f105 0114 	addmi.w	r1, r5, #20
 800fc90:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 800fc94:	2300      	movs	r3, #0
 800fc96:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fc98:	2202      	movs	r2, #2
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	f000 f854 	bl	800fd48 <USBD_CtlSendData>
              break;
 800fca0:	e78c      	b.n	800fbbc <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fca2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d081      	beq.n	800fbac <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fca8:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800fcac:	1c5c      	adds	r4, r3, #1
 800fcae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800fcb2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800fcb6:	e7bc      	b.n	800fc32 <USBD_StdEPReq+0x9e>
{
 800fcb8:	2300      	movs	r3, #0
 800fcba:	e7c2      	b.n	800fc42 <USBD_StdEPReq+0xae>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fcbc:	f7f1 fdc2 	bl	8001844 <USBD_LL_ClearStallEP>
 800fcc0:	e78a      	b.n	800fbd8 <USBD_StdEPReq+0x44>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fcc2:	f7f1 fdb3 	bl	800182c <USBD_LL_StallEP>
 800fcc6:	e7d0      	b.n	800fc6a <USBD_StdEPReq+0xd6>

0800fcc8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800fcc8:	780b      	ldrb	r3, [r1, #0]
 800fcca:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800fccc:	784b      	ldrb	r3, [r1, #1]
 800fcce:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 800fcd0:	884b      	ldrh	r3, [r1, #2]
 800fcd2:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 800fcd4:	888b      	ldrh	r3, [r1, #4]
 800fcd6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 800fcd8:	88cb      	ldrh	r3, [r1, #6]
 800fcda:	80c3      	strh	r3, [r0, #6]
}
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop

0800fce0 <USBD_CtlError>:
{
 800fce0:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fce2:	2180      	movs	r1, #128	@ 0x80
{
 800fce4:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fce6:	f7f1 fda1 	bl	800182c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fcea:	4620      	mov	r0, r4
 800fcec:	2100      	movs	r1, #0
}
 800fcee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800fcf2:	f7f1 bd9b 	b.w	800182c <USBD_LL_StallEP>
 800fcf6:	bf00      	nop

0800fcf8 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800fcf8:	b308      	cbz	r0, 800fd3e <USBD_GetString+0x46>
{
 800fcfa:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800fcfc:	7803      	ldrb	r3, [r0, #0]
 800fcfe:	460e      	mov	r6, r1
 800fd00:	4614      	mov	r4, r2
 800fd02:	4605      	mov	r5, r0
 800fd04:	b1e3      	cbz	r3, 800fd40 <USBD_GetString+0x48>
 800fd06:	3001      	adds	r0, #1
 800fd08:	f7f0 faca 	bl	80002a0 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fd0c:	1c43      	adds	r3, r0, #1
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	3301      	adds	r3, #1
 800fd12:	005b      	lsls	r3, r3, #1
 800fd14:	b2da      	uxtb	r2, r3
 800fd16:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fd18:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800fd1a:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fd1c:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 800fd1e:	782c      	ldrb	r4, [r5, #0]
 800fd20:	b164      	cbz	r4, 800fd3c <USBD_GetString+0x44>
 800fd22:	4628      	mov	r0, r5
  idx++;
 800fd24:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800fd26:	2100      	movs	r1, #0
    idx++;
 800fd28:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800fd2a:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 800fd2c:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 800fd2e:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 800fd30:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 800fd34:	3302      	adds	r3, #2
 800fd36:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800fd38:	2c00      	cmp	r4, #0
 800fd3a:	d1f5      	bne.n	800fd28 <USBD_GetString+0x30>
}
 800fd3c:	bd70      	pop	{r4, r5, r6, pc}
 800fd3e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800fd40:	2202      	movs	r2, #2
 800fd42:	4613      	mov	r3, r2
 800fd44:	e7e7      	b.n	800fd16 <USBD_GetString+0x1e>
 800fd46:	bf00      	nop

0800fd48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd48:	b508      	push	{r3, lr}
 800fd4a:	4613      	mov	r3, r2
 800fd4c:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd4e:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 800fd50:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd54:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd58:	2100      	movs	r1, #0
 800fd5a:	f7f1 fd9f 	bl	800189c <USBD_LL_Transmit>

  return USBD_OK;
}
 800fd5e:	2000      	movs	r0, #0
 800fd60:	bd08      	pop	{r3, pc}
 800fd62:	bf00      	nop

0800fd64 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd64:	b508      	push	{r3, lr}
 800fd66:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd68:	460a      	mov	r2, r1
 800fd6a:	2100      	movs	r1, #0
 800fd6c:	f7f1 fd96 	bl	800189c <USBD_LL_Transmit>

  return USBD_OK;
}
 800fd70:	2000      	movs	r0, #0
 800fd72:	bd08      	pop	{r3, pc}

0800fd74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd74:	b508      	push	{r3, lr}
 800fd76:	4613      	mov	r3, r2
 800fd78:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd7a:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 800fd7c:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd80:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd84:	2100      	movs	r1, #0
 800fd86:	f7f1 fd95 	bl	80018b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	bd08      	pop	{r3, pc}
 800fd8e:	bf00      	nop

0800fd90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd90:	b508      	push	{r3, lr}
 800fd92:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd94:	460a      	mov	r2, r1
 800fd96:	2100      	movs	r1, #0
 800fd98:	f7f1 fd8c 	bl	80018b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	bd08      	pop	{r3, pc}

0800fda0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fda0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fda2:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fda4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fda6:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fdaa:	461a      	mov	r2, r3
 800fdac:	4619      	mov	r1, r3
 800fdae:	f7f1 fd75 	bl	800189c <USBD_LL_Transmit>

  return USBD_OK;
}
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	bd08      	pop	{r3, pc}
 800fdb6:	bf00      	nop

0800fdb8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fdb8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fdba:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdbc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fdbe:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	f7f1 fd75 	bl	80018b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fdca:	2000      	movs	r0, #0
 800fdcc:	bd08      	pop	{r3, pc}
 800fdce:	bf00      	nop

0800fdd0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fdd0:	4b03      	ldr	r3, [pc, #12]	@ (800fde0 <disk_status+0x10>)
 800fdd2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800fdd6:	4403      	add	r3, r0
 800fdd8:	6852      	ldr	r2, [r2, #4]
 800fdda:	7a18      	ldrb	r0, [r3, #8]
 800fddc:	6853      	ldr	r3, [r2, #4]
 800fdde:	4718      	bx	r3
 800fde0:	20002f44 	.word	0x20002f44

0800fde4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800fde4:	4b06      	ldr	r3, [pc, #24]	@ (800fe00 <disk_initialize+0x1c>)
 800fde6:	5c1a      	ldrb	r2, [r3, r0]
 800fde8:	b942      	cbnz	r2, 800fdfc <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fdea:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 800fdee:	2101      	movs	r1, #1
 800fdf0:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fdf2:	6852      	ldr	r2, [r2, #4]
 800fdf4:	4403      	add	r3, r0
 800fdf6:	6812      	ldr	r2, [r2, #0]
 800fdf8:	7a18      	ldrb	r0, [r3, #8]
 800fdfa:	4710      	bx	r2
  }
  return stat;
}
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	4770      	bx	lr
 800fe00:	20002f44 	.word	0x20002f44

0800fe04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fe04:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fe06:	4c05      	ldr	r4, [pc, #20]	@ (800fe1c <disk_read+0x18>)
 800fe08:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800fe0c:	4404      	add	r4, r0
 800fe0e:	686d      	ldr	r5, [r5, #4]
 800fe10:	7a20      	ldrb	r0, [r4, #8]
 800fe12:	68ac      	ldr	r4, [r5, #8]
 800fe14:	46a4      	mov	ip, r4
  return res;
}
 800fe16:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fe18:	4760      	bx	ip
 800fe1a:	bf00      	nop
 800fe1c:	20002f44 	.word	0x20002f44

0800fe20 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fe20:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fe22:	4c05      	ldr	r4, [pc, #20]	@ (800fe38 <disk_write+0x18>)
 800fe24:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800fe28:	4404      	add	r4, r0
 800fe2a:	686d      	ldr	r5, [r5, #4]
 800fe2c:	7a20      	ldrb	r0, [r4, #8]
 800fe2e:	68ec      	ldr	r4, [r5, #12]
 800fe30:	46a4      	mov	ip, r4
  return res;
}
 800fe32:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fe34:	4760      	bx	ip
 800fe36:	bf00      	nop
 800fe38:	20002f44 	.word	0x20002f44

0800fe3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fe3c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fe3e:	f04f 36ff 	mov.w	r6, #4294967295
 800fe42:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe44:	42b1      	cmp	r1, r6
{
 800fe46:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fe48:	70c3      	strb	r3, [r0, #3]
 800fe4a:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe4c:	d122      	bne.n	800fe94 <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fe4e:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800fe52:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d11a      	bne.n	800fe90 <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fe5a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800fe5e:	2be9      	cmp	r3, #233	@ 0xe9
 800fe60:	d007      	beq.n	800fe72 <check_fs+0x36>
 800fe62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fe64:	4a13      	ldr	r2, [pc, #76]	@ (800feb4 <check_fs+0x78>)
 800fe66:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d001      	beq.n	800fe72 <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fe6e:	2002      	movs	r0, #2
}
 800fe70:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800fe72:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fe76:	4a10      	ldr	r2, [pc, #64]	@ (800feb8 <check_fs+0x7c>)
 800fe78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d017      	beq.n	800feb0 <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800fe80:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fe84:	4b0d      	ldr	r3, [pc, #52]	@ (800febc <check_fs+0x80>)
 800fe86:	1ac0      	subs	r0, r0, r3
 800fe88:	bf18      	it	ne
 800fe8a:	2001      	movne	r0, #1
 800fe8c:	0040      	lsls	r0, r0, #1
}
 800fe8e:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fe90:	2003      	movs	r0, #3
}
 800fe92:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fe94:	460d      	mov	r5, r1
 800fe96:	460a      	mov	r2, r1
 800fe98:	7840      	ldrb	r0, [r0, #1]
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fea0:	f7ff ffb0 	bl	800fe04 <disk_read>
 800fea4:	b110      	cbz	r0, 800feac <check_fs+0x70>
			fs->winsect = sector;
 800fea6:	62e6      	str	r6, [r4, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fea8:	2004      	movs	r0, #4
}
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800feac:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 800feae:	e7ce      	b.n	800fe4e <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800feb0:	2000      	movs	r0, #0
}
 800feb2:	bd70      	pop	{r4, r5, r6, pc}
 800feb4:	009000eb 	.word	0x009000eb
 800feb8:	00544146 	.word	0x00544146
 800febc:	33544146 	.word	0x33544146

0800fec0 <move_window>:
{
 800fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fec4:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800fec6:	428e      	cmp	r6, r1
 800fec8:	d102      	bne.n	800fed0 <move_window+0x10>
	FRESULT res = FR_OK;
 800feca:	2000      	movs	r0, #0
}
 800fecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fed0:	4604      	mov	r4, r0
 800fed2:	460d      	mov	r5, r1
 800fed4:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fed6:	7840      	ldrb	r0, [r0, #1]
 800fed8:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fedc:	b963      	cbnz	r3, 800fef8 <move_window+0x38>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fede:	462a      	mov	r2, r5
 800fee0:	2301      	movs	r3, #1
 800fee2:	4639      	mov	r1, r7
 800fee4:	f7ff ff8e 	bl	800fe04 <disk_read>
				res = FR_DISK_ERR;
 800fee8:	2800      	cmp	r0, #0
 800feea:	bf1c      	itt	ne
 800feec:	f04f 35ff 	movne.w	r5, #4294967295
 800fef0:	2001      	movne	r0, #1
			fs->winsect = sector;
 800fef2:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 800fef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fef8:	2301      	movs	r3, #1
 800fefa:	4632      	mov	r2, r6
 800fefc:	4639      	mov	r1, r7
 800fefe:	f7ff ff8f 	bl	800fe20 <disk_write>
 800ff02:	b9d0      	cbnz	r0, 800ff3a <move_window+0x7a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ff04:	6a22      	ldr	r2, [r4, #32]
 800ff06:	69a3      	ldr	r3, [r4, #24]
			fs->wflag = 0;
 800ff08:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ff0a:	1ab2      	subs	r2, r6, r2
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d212      	bcs.n	800ff36 <move_window+0x76>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff10:	f894 8002 	ldrb.w	r8, [r4, #2]
 800ff14:	f1b8 0f01 	cmp.w	r8, #1
 800ff18:	d801      	bhi.n	800ff1e <move_window+0x5e>
 800ff1a:	e00c      	b.n	800ff36 <move_window+0x76>
					wsect += fs->fsize;
 800ff1c:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ff1e:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800ff20:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800ff22:	4632      	mov	r2, r6
 800ff24:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff26:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800ff2a:	4639      	mov	r1, r7
 800ff2c:	f7ff ff78 	bl	800fe20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff30:	f1b8 0f01 	cmp.w	r8, #1
 800ff34:	d1f2      	bne.n	800ff1c <move_window+0x5c>
 800ff36:	7860      	ldrb	r0, [r4, #1]
 800ff38:	e7d1      	b.n	800fede <move_window+0x1e>
			res = FR_DISK_ERR;
 800ff3a:	2001      	movs	r0, #1
 800ff3c:	e7c6      	b.n	800fecc <move_window+0xc>
 800ff3e:	bf00      	nop

0800ff40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ff40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path) {	/* If the pointer is not a null */
 800ff44:	6804      	ldr	r4, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ff46:	2300      	movs	r3, #0
 800ff48:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800ff4a:	b184      	cbz	r4, 800ff6e <find_volume+0x2e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ff4c:	7825      	ldrb	r5, [r4, #0]
 800ff4e:	2d20      	cmp	r5, #32
 800ff50:	d913      	bls.n	800ff7a <find_volume+0x3a>
 800ff52:	462b      	mov	r3, r5
 800ff54:	46a4      	mov	ip, r4
 800ff56:	e003      	b.n	800ff60 <find_volume+0x20>
 800ff58:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ff5c:	2b20      	cmp	r3, #32
 800ff5e:	d90c      	bls.n	800ff7a <find_volume+0x3a>
 800ff60:	2b3a      	cmp	r3, #58	@ 0x3a
 800ff62:	d1f9      	bne.n	800ff58 <find_volume+0x18>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ff64:	2d30      	cmp	r5, #48	@ 0x30
 800ff66:	d102      	bne.n	800ff6e <find_volume+0x2e>
			i = *tp++ - '0';
 800ff68:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ff6a:	45a4      	cmp	ip, r4
 800ff6c:	d002      	beq.n	800ff74 <find_volume+0x34>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800ff6e:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800ff70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					*path = ++tt;
 800ff74:	f10c 0301 	add.w	r3, ip, #1
 800ff78:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ff7a:	4ea2      	ldr	r6, [pc, #648]	@ (8010204 <find_volume+0x2c4>)
 800ff7c:	6a34      	ldr	r4, [r6, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ff7e:	2c00      	cmp	r4, #0
 800ff80:	f000 80cc 	beq.w	801011c <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800ff84:	600c      	str	r4, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ff86:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ff88:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ff8c:	b153      	cbz	r3, 800ffa4 <find_volume+0x64>
		stat = disk_status(fs->drv);
 800ff8e:	7860      	ldrb	r0, [r4, #1]
 800ff90:	f7ff ff1e 	bl	800fdd0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ff94:	07c7      	lsls	r7, r0, #31
 800ff96:	d405      	bmi.n	800ffa4 <find_volume+0x64>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ff98:	b115      	cbz	r5, 800ffa0 <find_volume+0x60>
 800ff9a:	0741      	lsls	r1, r0, #29
 800ff9c:	f100 80bb 	bmi.w	8010116 <find_volume+0x1d6>
			return FR_OK;				/* The file system object is valid */
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	e091      	b.n	80100c8 <find_volume+0x188>
	fs->fs_type = 0;					/* Clear the file system object */
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ffa8:	f7ff ff1c 	bl	800fde4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ffac:	07c2      	lsls	r2, r0, #31
 800ffae:	f100 808d 	bmi.w	80100cc <find_volume+0x18c>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ffb2:	b115      	cbz	r5, 800ffba <find_volume+0x7a>
 800ffb4:	0743      	lsls	r3, r0, #29
 800ffb6:	f100 80ae 	bmi.w	8010116 <find_volume+0x1d6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ffba:	2100      	movs	r1, #0
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	f7ff ff3d 	bl	800fe3c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ffc2:	2802      	cmp	r0, #2
 800ffc4:	f000 8085 	beq.w	80100d2 <find_volume+0x192>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ffc8:	2804      	cmp	r0, #4
 800ffca:	f000 80b2 	beq.w	8010132 <find_volume+0x1f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ffce:	2801      	cmp	r0, #1
 800ffd0:	bf98      	it	ls
 800ffd2:	2500      	movls	r5, #0
 800ffd4:	d877      	bhi.n	80100c6 <find_volume+0x186>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ffd6:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800ffda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ffde:	d172      	bne.n	80100c6 <find_volume+0x186>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ffe0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ffe4:	b902      	cbnz	r2, 800ffe8 <find_volume+0xa8>
	rv = rv << 8 | ptr[0];
 800ffe6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ffe8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 800ffec:	61a2      	str	r2, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ffee:	1e59      	subs	r1, r3, #1
 800fff0:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fff2:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fff4:	d867      	bhi.n	80100c6 <find_volume+0x186>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fff6:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 800fffa:	8161      	strh	r1, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fffc:	2900      	cmp	r1, #0
 800fffe:	d062      	beq.n	80100c6 <find_volume+0x186>
 8010000:	1e48      	subs	r0, r1, #1
 8010002:	4208      	tst	r0, r1
 8010004:	d15f      	bne.n	80100c6 <find_volume+0x186>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010006:	f8b4 c041 	ldrh.w	ip, [r4, #65]	@ 0x41
 801000a:	f8a4 c008 	strh.w	ip, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801000e:	f01c 0f0f 	tst.w	ip, #15
 8010012:	d158      	bne.n	80100c6 <find_volume+0x186>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010014:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010018:	b900      	cbnz	r0, 801001c <find_volume+0xdc>
	rv = rv << 8 | ptr[0];
 801001a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801001c:	f8b4 e03e 	ldrh.w	lr, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010020:	f1be 0f00 	cmp.w	lr, #0
 8010024:	d04f      	beq.n	80100c6 <find_volume+0x186>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010026:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801002a:	eb0e 171c 	add.w	r7, lr, ip, lsr #4
 801002e:	441f      	add	r7, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010030:	42b8      	cmp	r0, r7
 8010032:	d348      	bcc.n	80100c6 <find_volume+0x186>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010034:	1bc0      	subs	r0, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010036:	4288      	cmp	r0, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010038:	fbb0 f8f1 	udiv	r8, r0, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801003c:	d343      	bcc.n	80100c6 <find_volume+0x186>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801003e:	eb0e 0105 	add.w	r1, lr, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010042:	f64f 7ef5 	movw	lr, #65525	@ 0xfff5
 8010046:	45f0      	cmp	r8, lr
		fs->database = bsect + sysect;					/* Data start sector */
 8010048:	442f      	add	r7, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801004a:	f108 0002 	add.w	r0, r8, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801004e:	f240 8090 	bls.w	8010172 <find_volume+0x232>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010052:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010056:	6221      	str	r1, [r4, #32]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010058:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->database = bsect + sysect;					/* Data start sector */
 801005c:	62a7      	str	r7, [r4, #40]	@ 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801005e:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010060:	61e5      	str	r5, [r4, #28]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010062:	d130      	bne.n	80100c6 <find_volume+0x186>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010064:	0083      	lsls	r3, r0, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010066:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
	rv = rv << 8 | ptr[0];
 801006a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801006c:	6261      	str	r1, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801006e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 8010072:	d328      	bcc.n	80100c6 <find_volume+0x186>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010074:	f04f 33ff 	mov.w	r3, #4294967295
 8010078:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801007c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
		fs->fsi_flag = 0x80;
 8010080:	2280      	movs	r2, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010082:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 8010084:	7122      	strb	r2, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010086:	f000 809b 	beq.w	80101c0 <find_volume+0x280>
		fmt = FS_FAT32;
 801008a:	2103      	movs	r1, #3
	fs->fs_type = fmt;		/* FAT sub-type */
 801008c:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801008e:	8cb3      	ldrh	r3, [r6, #36]	@ 0x24
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010090:	6832      	ldr	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010092:	3301      	adds	r3, #1
 8010094:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010096:	42a2      	cmp	r2, r4
	fs->id = ++Fsid;		/* File system mount ID */
 8010098:	84b3      	strh	r3, [r6, #36]	@ 0x24
 801009a:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 801009c:	bf04      	itt	eq
 801009e:	2300      	moveq	r3, #0
 80100a0:	6033      	streq	r3, [r6, #0]
 80100a2:	6933      	ldr	r3, [r6, #16]
 80100a4:	429c      	cmp	r4, r3
 80100a6:	f47f af7b 	bne.w	800ffa0 <find_volume+0x60>
 80100aa:	2300      	movs	r3, #0
 80100ac:	6133      	str	r3, [r6, #16]
 80100ae:	e777      	b.n	800ffa0 <find_volume+0x60>
	rv = rv << 8 | ptr[0];
 80100b0:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80100b4:	2f00      	cmp	r7, #0
 80100b6:	d14b      	bne.n	8010150 <find_volume+0x210>
 80100b8:	f1b8 0f00 	cmp.w	r8, #0
 80100bc:	d151      	bne.n	8010162 <find_volume+0x222>
 80100be:	f1b9 0f00 	cmp.w	r9, #0
 80100c2:	d13c      	bne.n	801013e <find_volume+0x1fe>
 80100c4:	bb65      	cbnz	r5, 8010120 <find_volume+0x1e0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80100c6:	200d      	movs	r0, #13
}
 80100c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80100cc:	2003      	movs	r0, #3
}
 80100ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80100d2:	f894 71f2 	ldrb.w	r7, [r4, #498]	@ 0x1f2
 80100d6:	b10f      	cbz	r7, 80100dc <find_volume+0x19c>
	rv = rv << 8 | ptr[0];
 80100d8:	f8d4 71f6 	ldr.w	r7, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80100dc:	f894 3202 	ldrb.w	r3, [r4, #514]	@ 0x202
 80100e0:	b35b      	cbz	r3, 801013a <find_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 80100e2:	f8d4 8206 	ldr.w	r8, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80100e6:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 80100ea:	b323      	cbz	r3, 8010136 <find_volume+0x1f6>
	rv = rv << 8 | ptr[0];
 80100ec:	f8d4 9216 	ldr.w	r9, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80100f0:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 80100f4:	2d00      	cmp	r5, #0
 80100f6:	d1db      	bne.n	80100b0 <find_volume+0x170>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80100f8:	bb57      	cbnz	r7, 8010150 <find_volume+0x210>
 80100fa:	f1b8 0f00 	cmp.w	r8, #0
 80100fe:	d12f      	bne.n	8010160 <find_volume+0x220>
 8010100:	f1b9 0f00 	cmp.w	r9, #0
 8010104:	d0df      	beq.n	80100c6 <find_volume+0x186>
 8010106:	4649      	mov	r1, r9
 8010108:	4620      	mov	r0, r4
 801010a:	f7ff fe97 	bl	800fe3c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801010e:	2801      	cmp	r0, #1
 8010110:	d8d9      	bhi.n	80100c6 <find_volume+0x186>
			bsect = br[i];
 8010112:	464d      	mov	r5, r9
 8010114:	e75f      	b.n	800ffd6 <find_volume+0x96>
				return FR_WRITE_PROTECTED;
 8010116:	200a      	movs	r0, #10
}
 8010118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801011c:	200c      	movs	r0, #12
 801011e:	e7d3      	b.n	80100c8 <find_volume+0x188>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010120:	4629      	mov	r1, r5
 8010122:	4620      	mov	r0, r4
 8010124:	f7ff fe8a 	bl	800fe3c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010128:	2801      	cmp	r0, #1
 801012a:	f67f af54 	bls.w	800ffd6 <find_volume+0x96>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801012e:	2804      	cmp	r0, #4
 8010130:	d1c9      	bne.n	80100c6 <find_volume+0x186>
 8010132:	2001      	movs	r0, #1
 8010134:	e7c8      	b.n	80100c8 <find_volume+0x188>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010136:	4699      	mov	r9, r3
 8010138:	e7da      	b.n	80100f0 <find_volume+0x1b0>
 801013a:	4698      	mov	r8, r3
 801013c:	e7d3      	b.n	80100e6 <find_volume+0x1a6>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801013e:	4649      	mov	r1, r9
 8010140:	4620      	mov	r0, r4
 8010142:	f7ff fe7b 	bl	800fe3c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010146:	2801      	cmp	r0, #1
 8010148:	d9e3      	bls.n	8010112 <find_volume+0x1d2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801014a:	2d00      	cmp	r5, #0
 801014c:	d0bb      	beq.n	80100c6 <find_volume+0x186>
 801014e:	e7e7      	b.n	8010120 <find_volume+0x1e0>
 8010150:	4639      	mov	r1, r7
 8010152:	4620      	mov	r0, r4
 8010154:	f7ff fe72 	bl	800fe3c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010158:	2801      	cmp	r0, #1
 801015a:	d8ad      	bhi.n	80100b8 <find_volume+0x178>
			bsect = br[i];
 801015c:	463d      	mov	r5, r7
 801015e:	e73a      	b.n	800ffd6 <find_volume+0x96>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010160:	463d      	mov	r5, r7
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010162:	4641      	mov	r1, r8
 8010164:	4620      	mov	r0, r4
 8010166:	f7ff fe69 	bl	800fe3c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801016a:	2801      	cmp	r0, #1
 801016c:	d8a7      	bhi.n	80100be <find_volume+0x17e>
			bsect = br[i];
 801016e:	4645      	mov	r5, r8
 8010170:	e731      	b.n	800ffd6 <find_volume+0x96>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010172:	f640 7ef5 	movw	lr, #4085	@ 0xff5
 8010176:	45f0      	cmp	r8, lr
		fs->volbase = bsect;							/* Volume start sector */
 8010178:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 801017a:	62a7      	str	r7, [r4, #40]	@ 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801017c:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801017e:	6221      	str	r1, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010180:	d817      	bhi.n	80101b2 <find_volume+0x272>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010182:	f1bc 0f00 	cmp.w	ip, #0
 8010186:	d09e      	beq.n	80100c6 <find_volume+0x186>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010188:	440b      	add	r3, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801018a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801018e:	f000 0001 	and.w	r0, r0, #1
 8010192:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8010196:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010198:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
 801019c:	ebb2 2f50 	cmp.w	r2, r0, lsr #9
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80101a0:	6263      	str	r3, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80101a2:	d390      	bcc.n	80100c6 <find_volume+0x186>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80101a4:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 80101a8:	2280      	movs	r2, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80101aa:	e9c4 3303 	strd	r3, r3, [r4, #12]
		fs->fsi_flag = 0x80;
 80101ae:	7122      	strb	r2, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80101b0:	e76c      	b.n	801008c <find_volume+0x14c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80101b2:	f1bc 0f00 	cmp.w	ip, #0
 80101b6:	d086      	beq.n	80100c6 <find_volume+0x186>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80101b8:	440b      	add	r3, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80101ba:	0040      	lsls	r0, r0, #1
 80101bc:	2102      	movs	r1, #2
 80101be:	e7eb      	b.n	8010198 <find_volume+0x258>
			&& move_window(fs, bsect + 1) == FR_OK)
 80101c0:	1c69      	adds	r1, r5, #1
 80101c2:	4620      	mov	r0, r4
 80101c4:	f7ff fe7c 	bl	800fec0 <move_window>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	f47f af5e 	bne.w	801008a <find_volume+0x14a>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80101ce:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 80101d2:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80101d4:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80101d8:	4291      	cmp	r1, r2
 80101da:	f47f af56 	bne.w	801008a <find_volume+0x14a>
	rv = rv << 8 | ptr[0];
 80101de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80101e0:	4b09      	ldr	r3, [pc, #36]	@ (8010208 <find_volume+0x2c8>)
 80101e2:	429a      	cmp	r2, r3
 80101e4:	f47f af51 	bne.w	801008a <find_volume+0x14a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80101e8:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 80101ec:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80101f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80101f4:	3320      	adds	r3, #32
 80101f6:	429a      	cmp	r2, r3
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80101f8:	bf04      	itt	eq
 80101fa:	e9d4 3286 	ldrdeq	r3, r2, [r4, #536]	@ 0x218
 80101fe:	e9c4 2303 	strdeq	r2, r3, [r4, #12]
 8010202:	e742      	b.n	801008a <find_volume+0x14a>
 8010204:	20002f1c 	.word	0x20002f1c
 8010208:	41615252 	.word	0x41615252

0801020c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801020c:	b500      	push	{lr}
 801020e:	b083      	sub	sp, #12
 8010210:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8010214:	b199      	cbz	r1, 801023e <f_mount+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010216:	f891 c000 	ldrb.w	ip, [r1]
 801021a:	f1bc 0f20 	cmp.w	ip, #32
 801021e:	d912      	bls.n	8010246 <f_mount+0x3a>
 8010220:	4663      	mov	r3, ip
 8010222:	4608      	mov	r0, r1
 8010224:	e003      	b.n	801022e <f_mount+0x22>
 8010226:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801022a:	2b20      	cmp	r3, #32
 801022c:	d90b      	bls.n	8010246 <f_mount+0x3a>
 801022e:	2b3a      	cmp	r3, #58	@ 0x3a
 8010230:	d1f9      	bne.n	8010226 <f_mount+0x1a>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010232:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010236:	d102      	bne.n	801023e <f_mount+0x32>
			i = *tp++ - '0';
 8010238:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801023a:	4288      	cmp	r0, r1
 801023c:	d003      	beq.n	8010246 <f_mount+0x3a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 801023e:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8010240:	b003      	add	sp, #12
 8010242:	f85d fb04 	ldr.w	pc, [sp], #4
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010246:	4b12      	ldr	r3, [pc, #72]	@ (8010290 <f_mount+0x84>)
 8010248:	6a19      	ldr	r1, [r3, #32]
	if (cfs) {
 801024a:	b159      	cbz	r1, 8010264 <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801024c:	6818      	ldr	r0, [r3, #0]
 801024e:	4281      	cmp	r1, r0
 8010250:	bf04      	itt	eq
 8010252:	2000      	moveq	r0, #0
 8010254:	6018      	streq	r0, [r3, #0]
 8010256:	6918      	ldr	r0, [r3, #16]
 8010258:	4288      	cmp	r0, r1
 801025a:	bf04      	itt	eq
 801025c:	2000      	moveq	r0, #0
 801025e:	6118      	streq	r0, [r3, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 8010260:	2000      	movs	r0, #0
 8010262:	7008      	strb	r0, [r1, #0]
	if (fs) {
 8010264:	9901      	ldr	r1, [sp, #4]
 8010266:	b181      	cbz	r1, 801028a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010268:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801026a:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 801026c:	7008      	strb	r0, [r1, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 801026e:	6219      	str	r1, [r3, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010270:	d003      	beq.n	801027a <f_mount+0x6e>
 8010272:	2000      	movs	r0, #0
}
 8010274:	b003      	add	sp, #12
 8010276:	f85d fb04 	ldr.w	pc, [sp], #4
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801027a:	4602      	mov	r2, r0
 801027c:	a901      	add	r1, sp, #4
 801027e:	4668      	mov	r0, sp
 8010280:	f7ff fe5e 	bl	800ff40 <find_volume>
}
 8010284:	b003      	add	sp, #12
 8010286:	f85d fb04 	ldr.w	pc, [sp], #4
	FatFs[vol] = fs;					/* Register new fs object */
 801028a:	6219      	str	r1, [r3, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801028c:	e7f1      	b.n	8010272 <f_mount+0x66>
 801028e:	bf00      	nop
 8010290:	20002f1c 	.word	0x20002f1c

08010294 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010294:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8010296:	4b10      	ldr	r3, [pc, #64]	@ (80102d8 <FATFS_LinkDriver+0x44>)
 8010298:	7a5c      	ldrb	r4, [r3, #9]
 801029a:	b9cc      	cbnz	r4, 80102d0 <FATFS_LinkDriver+0x3c>
 801029c:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 801029e:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 80102a2:	7a5c      	ldrb	r4, [r3, #9]
 80102a4:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80102a6:	7a5c      	ldrb	r4, [r3, #9]
 80102a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80102ac:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80102ae:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 80102b0:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80102b2:	441c      	add	r4, r3
 80102b4:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 80102b6:	1c54      	adds	r4, r2, #1
 80102b8:	b2e4      	uxtb	r4, r4
 80102ba:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 80102bc:	3230      	adds	r2, #48	@ 0x30
    path[1] = ':';
 80102be:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 80102c0:	232f      	movs	r3, #47	@ 0x2f
    path[1] = ':';
 80102c2:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 80102c4:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80102c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80102ca:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80102cc:	70c8      	strb	r0, [r1, #3]
}
 80102ce:	4770      	bx	lr
  uint8_t ret = 1;
 80102d0:	2001      	movs	r0, #1
}
 80102d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102d6:	4770      	bx	lr
 80102d8:	20002f44 	.word	0x20002f44

080102dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80102dc:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 80102de:	4c0a      	ldr	r4, [pc, #40]	@ (8010308 <SD_initialize+0x2c>)
 80102e0:	2501      	movs	r5, #1
 80102e2:	7025      	strb	r5, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80102e4:	f7f6 ff4a 	bl	800717c <BSP_SD_Init>
 80102e8:	b108      	cbz	r0, 80102ee <SD_initialize+0x12>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80102ea:	7820      	ldrb	r0, [r4, #0]
}
 80102ec:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80102ee:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80102f0:	f7f6 ff74 	bl	80071dc <BSP_SD_GetCardState>
 80102f4:	b918      	cbnz	r0, 80102fe <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 80102f6:	7823      	ldrb	r3, [r4, #0]
 80102f8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80102fc:	7023      	strb	r3, [r4, #0]
  return Stat;
 80102fe:	7823      	ldrb	r3, [r4, #0]
 8010300:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8010302:	7023      	strb	r3, [r4, #0]
  return Stat;
 8010304:	7820      	ldrb	r0, [r4, #0]
}
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	200002fc 	.word	0x200002fc

0801030c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801030c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801030e:	4c06      	ldr	r4, [pc, #24]	@ (8010328 <SD_status+0x1c>)
 8010310:	2301      	movs	r3, #1
 8010312:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8010314:	f7f6 ff62 	bl	80071dc <BSP_SD_GetCardState>
 8010318:	b918      	cbnz	r0, 8010322 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 801031a:	7823      	ldrb	r3, [r4, #0]
 801031c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010320:	7023      	strb	r3, [r4, #0]
  return Stat;
 8010322:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8010324:	bd10      	pop	{r4, pc}
 8010326:	bf00      	nop
 8010328:	200002fc 	.word	0x200002fc

0801032c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801032c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 801032e:	4c16      	ldr	r4, [pc, #88]	@ (8010388 <SD_read+0x5c>)
{
 8010330:	4608      	mov	r0, r1
  ReadStatus = 0;
 8010332:	2500      	movs	r5, #0
{
 8010334:	4611      	mov	r1, r2
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010336:	461a      	mov	r2, r3
  ReadStatus = 0;
 8010338:	6025      	str	r5, [r4, #0]
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801033a:	f7f6 febf 	bl	80070bc <BSP_SD_ReadBlocks_DMA>
 801033e:	b108      	cbz	r0, 8010344 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 8010340:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 8010342:	bd70      	pop	{r4, r5, r6, pc}
    timeout = HAL_GetTick();
 8010344:	f7f6 ffcc 	bl	80072e0 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010348:	f247 562f 	movw	r6, #29999	@ 0x752f
    timeout = HAL_GetTick();
 801034c:	4605      	mov	r5, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801034e:	e004      	b.n	801035a <SD_read+0x2e>
 8010350:	f7f6 ffc6 	bl	80072e0 <HAL_GetTick>
 8010354:	1b40      	subs	r0, r0, r5
 8010356:	42b0      	cmp	r0, r6
 8010358:	d802      	bhi.n	8010360 <SD_read+0x34>
 801035a:	6823      	ldr	r3, [r4, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d0f7      	beq.n	8010350 <SD_read+0x24>
    if (ReadStatus == 0)
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d0ec      	beq.n	8010340 <SD_read+0x14>
      ReadStatus = 0;
 8010366:	2300      	movs	r3, #0
 8010368:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801036a:	f7f6 ffb9 	bl	80072e0 <HAL_GetTick>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801036e:	f247 552f 	movw	r5, #29999	@ 0x752f
      timeout = HAL_GetTick();
 8010372:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010374:	f7f6 ffb4 	bl	80072e0 <HAL_GetTick>
 8010378:	1b00      	subs	r0, r0, r4
 801037a:	42a8      	cmp	r0, r5
 801037c:	d8e0      	bhi.n	8010340 <SD_read+0x14>
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801037e:	f7f6 ff2d 	bl	80071dc <BSP_SD_GetCardState>
 8010382:	2800      	cmp	r0, #0
 8010384:	d1f6      	bne.n	8010374 <SD_read+0x48>
}
 8010386:	bd70      	pop	{r4, r5, r6, pc}
 8010388:	20002f50 	.word	0x20002f50

0801038c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801038c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 801038e:	4c16      	ldr	r4, [pc, #88]	@ (80103e8 <SD_write+0x5c>)
{
 8010390:	4608      	mov	r0, r1
  WriteStatus = 0;
 8010392:	2500      	movs	r5, #0
{
 8010394:	4611      	mov	r1, r2
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010396:	461a      	mov	r2, r3
  WriteStatus = 0;
 8010398:	6065      	str	r5, [r4, #4]
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801039a:	f7f6 fe9d 	bl	80070d8 <BSP_SD_WriteBlocks_DMA>
 801039e:	b108      	cbz	r0, 80103a4 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 80103a0:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 80103a2:	bd70      	pop	{r4, r5, r6, pc}
    timeout = HAL_GetTick();
 80103a4:	f7f6 ff9c 	bl	80072e0 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80103a8:	f247 562f 	movw	r6, #29999	@ 0x752f
    timeout = HAL_GetTick();
 80103ac:	4605      	mov	r5, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80103ae:	e004      	b.n	80103ba <SD_write+0x2e>
 80103b0:	f7f6 ff96 	bl	80072e0 <HAL_GetTick>
 80103b4:	1b40      	subs	r0, r0, r5
 80103b6:	42b0      	cmp	r0, r6
 80103b8:	d802      	bhi.n	80103c0 <SD_write+0x34>
 80103ba:	6863      	ldr	r3, [r4, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d0f7      	beq.n	80103b0 <SD_write+0x24>
    if (WriteStatus == 0)
 80103c0:	6863      	ldr	r3, [r4, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d0ec      	beq.n	80103a0 <SD_write+0x14>
      WriteStatus = 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	6063      	str	r3, [r4, #4]
      timeout = HAL_GetTick();
 80103ca:	f7f6 ff89 	bl	80072e0 <HAL_GetTick>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103ce:	f247 552f 	movw	r5, #29999	@ 0x752f
      timeout = HAL_GetTick();
 80103d2:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103d4:	f7f6 ff84 	bl	80072e0 <HAL_GetTick>
 80103d8:	1b00      	subs	r0, r0, r4
 80103da:	42a8      	cmp	r0, r5
 80103dc:	d8e0      	bhi.n	80103a0 <SD_write+0x14>
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80103de:	f7f6 fefd 	bl	80071dc <BSP_SD_GetCardState>
 80103e2:	2800      	cmp	r0, #0
 80103e4:	d1f6      	bne.n	80103d4 <SD_write+0x48>
}
 80103e6:	bd70      	pop	{r4, r5, r6, pc}
 80103e8:	20002f50 	.word	0x20002f50

080103ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80103ec:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80103ee:	4b16      	ldr	r3, [pc, #88]	@ (8010448 <SD_ioctl+0x5c>)
 80103f0:	7818      	ldrb	r0, [r3, #0]
 80103f2:	f010 0401 	ands.w	r4, r0, #1
{
 80103f6:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80103f8:	d106      	bne.n	8010408 <SD_ioctl+0x1c>
 80103fa:	4615      	mov	r5, r2

  switch (cmd)
 80103fc:	2903      	cmp	r1, #3
 80103fe:	d820      	bhi.n	8010442 <SD_ioctl+0x56>
 8010400:	e8df f001 	tbb	[pc, r1]
 8010404:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010408:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 801040a:	4620      	mov	r0, r4
 801040c:	b00b      	add	sp, #44	@ 0x2c
 801040e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8010410:	a801      	add	r0, sp, #4
 8010412:	f7f6 feed 	bl	80071f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010416:	9b08      	ldr	r3, [sp, #32]
}
 8010418:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801041a:	0a5b      	lsrs	r3, r3, #9
 801041c:	602b      	str	r3, [r5, #0]
}
 801041e:	b00b      	add	sp, #44	@ 0x2c
 8010420:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8010422:	a801      	add	r0, sp, #4
 8010424:	f7f6 fee4 	bl	80071f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010428:	9b07      	ldr	r3, [sp, #28]
 801042a:	602b      	str	r3, [r5, #0]
}
 801042c:	4620      	mov	r0, r4
 801042e:	b00b      	add	sp, #44	@ 0x2c
 8010430:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8010432:	a801      	add	r0, sp, #4
 8010434:	f7f6 fedc 	bl	80071f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010438:	9b08      	ldr	r3, [sp, #32]
 801043a:	802b      	strh	r3, [r5, #0]
}
 801043c:	4620      	mov	r0, r4
 801043e:	b00b      	add	sp, #44	@ 0x2c
 8010440:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8010442:	2404      	movs	r4, #4
 8010444:	e7e1      	b.n	801040a <SD_ioctl+0x1e>
 8010446:	bf00      	nop
 8010448:	200002fc 	.word	0x200002fc

0801044c <BSP_SD_WriteCpltCallback>:
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
  WriteStatus = 1;
 801044c:	4b01      	ldr	r3, [pc, #4]	@ (8010454 <BSP_SD_WriteCpltCallback+0x8>)
 801044e:	2201      	movs	r2, #1
 8010450:	605a      	str	r2, [r3, #4]
}
 8010452:	4770      	bx	lr
 8010454:	20002f50 	.word	0x20002f50

08010458 <BSP_SD_ReadCpltCallback>:
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8010458:	4b01      	ldr	r3, [pc, #4]	@ (8010460 <BSP_SD_ReadCpltCallback+0x8>)
 801045a:	2201      	movs	r2, #1
 801045c:	601a      	str	r2, [r3, #0]
}
 801045e:	4770      	bx	lr
 8010460:	20002f50 	.word	0x20002f50

08010464 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010464:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8010466:	f001 fa81 	bl	801196c <vTaskStartScheduler>
  
  return osOK;
}
 801046a:	2000      	movs	r0, #0
 801046c:	bd08      	pop	{r3, pc}
 801046e:	bf00      	nop

08010470 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010470:	b510      	push	{r4, lr}
 8010472:	4684      	mov	ip, r0
 8010474:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010476:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 801047a:	f8dc 1000 	ldr.w	r1, [ip]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801047e:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010482:	6840      	ldr	r0, [r0, #4]
{
 8010484:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 8010486:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 801048a:	bf14      	ite	ne
 801048c:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010490:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010492:	9400      	str	r4, [sp, #0]
 8010494:	ac03      	add	r4, sp, #12
 8010496:	9401      	str	r4, [sp, #4]
 8010498:	f001 f960 	bl	801175c <xTaskCreate>
 801049c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801049e:	bf0c      	ite	eq
 80104a0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80104a2:	2000      	movne	r0, #0
}
 80104a4:	b004      	add	sp, #16
 80104a6:	bd10      	pop	{r4, pc}

080104a8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80104a8:	b500      	push	{lr}
 80104aa:	b083      	sub	sp, #12
 80104ac:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 80104ae:	6802      	ldr	r2, [r0, #0]
 80104b0:	9200      	str	r2, [sp, #0]
 80104b2:	f1a1 0201 	sub.w	r2, r1, #1
 80104b6:	fab2 f282 	clz	r2, r2
 80104ba:	0952      	lsrs	r2, r2, #5
 80104bc:	2101      	movs	r1, #1
 80104be:	4803      	ldr	r0, [pc, #12]	@ (80104cc <osTimerCreate+0x24>)
 80104c0:	f001 ff9c 	bl	80123fc <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 80104c4:	b003      	add	sp, #12
 80104c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80104ca:	bf00      	nop
 80104cc:	08015504 	.word	0x08015504

080104d0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80104d0:	b510      	push	{r4, lr}
 80104d2:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80104d4:	2400      	movs	r4, #0
 80104d6:	2901      	cmp	r1, #1
 80104d8:	460a      	mov	r2, r1
 80104da:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 80104dc:	bf38      	it	cc
 80104de:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104e0:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 80104e4:	b14b      	cbz	r3, 80104fa <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80104e6:	9400      	str	r4, [sp, #0]
 80104e8:	ab03      	add	r3, sp, #12
 80104ea:	2109      	movs	r1, #9
 80104ec:	f001 ffde 	bl	80124ac <xTimerGenericCommand>
 80104f0:	2801      	cmp	r0, #1
 80104f2:	d00b      	beq.n	801050c <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 80104f4:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 80104f6:	b004      	add	sp, #16
 80104f8:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80104fa:	9300      	str	r3, [sp, #0]
 80104fc:	2104      	movs	r1, #4
 80104fe:	f001 ffd5 	bl	80124ac <xTimerGenericCommand>
 8010502:	2801      	cmp	r0, #1
 8010504:	d1f6      	bne.n	80104f4 <osTimerStart+0x24>
  osStatus result = osOK;
 8010506:	2000      	movs	r0, #0
}
 8010508:	b004      	add	sp, #16
 801050a:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 801050c:	9b03      	ldr	r3, [sp, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d0f9      	beq.n	8010506 <osTimerStart+0x36>
 8010512:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801051a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801051e:	f3bf 8f4f 	dsb	sy
 8010522:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8010526:	2000      	movs	r0, #0
  return result;
 8010528:	e7ee      	b.n	8010508 <osTimerStart+0x38>
 801052a:	bf00      	nop

0801052c <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801052c:	2901      	cmp	r1, #1
{ 
 801052e:	4608      	mov	r0, r1
  if (count == 1) {
 8010530:	d001      	beq.n	8010536 <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8010532:	f000 b965 	b.w	8010800 <xQueueCreateCountingSemaphore>
{ 
 8010536:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 8010538:	2203      	movs	r2, #3
 801053a:	2100      	movs	r1, #0
 801053c:	f000 f920 	bl	8010780 <xQueueGenericCreate>
 8010540:	4604      	mov	r4, r0
 8010542:	b120      	cbz	r0, 801054e <osSemaphoreCreate+0x22>
 8010544:	2300      	movs	r3, #0
 8010546:	461a      	mov	r2, r3
 8010548:	4619      	mov	r1, r3
 801054a:	f000 f99d 	bl	8010888 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 801054e:	4620      	mov	r0, r4
 8010550:	bd10      	pop	{r4, pc}
 8010552:	bf00      	nop

08010554 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010554:	b500      	push	{lr}
 8010556:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010558:	2300      	movs	r3, #0
 801055a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 801055c:	b310      	cbz	r0, 80105a4 <osSemaphoreWait+0x50>
 801055e:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8010562:	b1aa      	cbz	r2, 8010590 <osSemaphoreWait+0x3c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010564:	aa01      	add	r2, sp, #4
 8010566:	4619      	mov	r1, r3
 8010568:	f000 fed8 	bl	801131c <xQueueReceiveFromISR>
 801056c:	2801      	cmp	r0, #1
 801056e:	d115      	bne.n	801059c <osSemaphoreWait+0x48>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010570:	9b01      	ldr	r3, [sp, #4]
 8010572:	b18b      	cbz	r3, 8010598 <osSemaphoreWait+0x44>
 8010574:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801057c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010580:	f3bf 8f4f 	dsb	sy
 8010584:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8010588:	2000      	movs	r0, #0
}
 801058a:	b003      	add	sp, #12
 801058c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010590:	f000 fd38 	bl	8011004 <xQueueSemaphoreTake>
 8010594:	2801      	cmp	r0, #1
 8010596:	d101      	bne.n	801059c <osSemaphoreWait+0x48>
  return osOK;
 8010598:	2000      	movs	r0, #0
 801059a:	e7f6      	b.n	801058a <osSemaphoreWait+0x36>
      return osErrorOS;
 801059c:	20ff      	movs	r0, #255	@ 0xff
}
 801059e:	b003      	add	sp, #12
 80105a0:	f85d fb04 	ldr.w	pc, [sp], #4
    return osErrorParameter;
 80105a4:	2080      	movs	r0, #128	@ 0x80
}
 80105a6:	b003      	add	sp, #12
 80105a8:	f85d fb04 	ldr.w	pc, [sp], #4

080105ac <osSemaphoreRelease>:
* @brief Release a Semaphore token
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
 80105ac:	b500      	push	{lr}
 80105ae:	b083      	sub	sp, #12
 80105b0:	2300      	movs	r3, #0
 80105b2:	9301      	str	r3, [sp, #4]
 80105b4:	f3ef 8305 	mrs	r3, IPSR
 80105b8:	b1a3      	cbz	r3, 80105e4 <osSemaphoreRelease+0x38>
 80105ba:	a901      	add	r1, sp, #4
 80105bc:	f000 fb46 	bl	8010c4c <xQueueGiveFromISR>
 80105c0:	2801      	cmp	r0, #1
 80105c2:	d115      	bne.n	80105f0 <osSemaphoreRelease+0x44>
 80105c4:	9b01      	ldr	r3, [sp, #4]
 80105c6:	b14b      	cbz	r3, 80105dc <osSemaphoreRelease+0x30>
 80105c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80105cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	2000      	movs	r0, #0
 80105de:	b003      	add	sp, #12
 80105e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80105e4:	461a      	mov	r2, r3
 80105e6:	4619      	mov	r1, r3
 80105e8:	f000 f94e 	bl	8010888 <xQueueGenericSend>
 80105ec:	2801      	cmp	r0, #1
 80105ee:	d0f5      	beq.n	80105dc <osSemaphoreRelease+0x30>
 80105f0:	20ff      	movs	r0, #255	@ 0xff
 80105f2:	b003      	add	sp, #12
 80105f4:	f85d fb04 	ldr.w	pc, [sp], #4

080105f8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80105f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105fa:	4606      	mov	r6, r0
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80105fc:	2014      	movs	r0, #20
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80105fe:	6877      	ldr	r7, [r6, #4]
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8010600:	f001 ff8a 	bl	8012518 <pvPortMalloc>

  
  if (thePool) {
 8010604:	b328      	cbz	r0, 8010652 <osPoolCreate+0x5a>
 8010606:	4605      	mov	r5, r0
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8010608:	3703      	adds	r7, #3
    thePool->pool_sz = pool_def->pool_sz;
 801060a:	6830      	ldr	r0, [r6, #0]
 801060c:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8010610:	2400      	movs	r4, #0
    thePool->item_sz = itemSize;
 8010612:	e9c5 0702 	strd	r0, r7, [r5, #8]
    thePool->currentIndex = 0;
 8010616:	612c      	str	r4, [r5, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8010618:	f001 ff7e 	bl	8012518 <pvPortMalloc>
 801061c:	6068      	str	r0, [r5, #4]
   
    if (thePool->markers) {
 801061e:	b1a8      	cbz	r0, 801064c <osPoolCreate+0x54>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8010620:	6830      	ldr	r0, [r6, #0]
 8010622:	fb07 f000 	mul.w	r0, r7, r0
 8010626:	f001 ff77 	bl	8012518 <pvPortMalloc>
 801062a:	6028      	str	r0, [r5, #0]
      
      if (thePool->pool) {
 801062c:	b158      	cbz	r0, 8010646 <osPoolCreate+0x4e>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801062e:	6833      	ldr	r3, [r6, #0]
 8010630:	b13b      	cbz	r3, 8010642 <osPoolCreate+0x4a>
 8010632:	4623      	mov	r3, r4
          thePool->markers[i] = 0;
 8010634:	4621      	mov	r1, r4
 8010636:	686a      	ldr	r2, [r5, #4]
 8010638:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801063a:	6832      	ldr	r2, [r6, #0]
 801063c:	3301      	adds	r3, #1
 801063e:	429a      	cmp	r2, r3
 8010640:	d8f9      	bhi.n	8010636 <osPoolCreate+0x3e>
  return thePool;
 
#else
  return NULL;
#endif
}
 8010642:	4628      	mov	r0, r5
 8010644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        vPortFree(thePool->markers);
 8010646:	6868      	ldr	r0, [r5, #4]
 8010648:	f002 f812 	bl	8012670 <vPortFree>
        vPortFree(thePool);
 801064c:	4628      	mov	r0, r5
 801064e:	f002 f80f 	bl	8012670 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8010652:	2500      	movs	r5, #0
 8010654:	e7f5      	b.n	8010642 <osPoolCreate+0x4a>
 8010656:	bf00      	nop

08010658 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010658:	e9d0 0100 	ldrd	r0, r1, [r0]
 801065c:	2200      	movs	r2, #0
 801065e:	f000 b88f 	b.w	8010780 <xQueueGenericCreate>
 8010662:	bf00      	nop

08010664 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8010664:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8010666:	f001 fbff 	bl	8011e68 <xTaskGetSchedulerState>
 801066a:	2801      	cmp	r0, #1
 801066c:	d100      	bne.n	8010670 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 801066e:	bd08      	pop	{r3, pc}
 8010670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8010674:	f002 b926 	b.w	80128c4 <xPortSysTickHandler>

08010678 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010678:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801067c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010680:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010682:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010686:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801068a:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop

08010690 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010690:	2300      	movs	r3, #0
 8010692:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop

08010698 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8010698:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801069a:	6803      	ldr	r3, [r0, #0]
{
 801069c:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801069e:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 80106a0:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80106a2:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80106a6:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80106a8:	6091      	str	r1, [r2, #8]
}
 80106aa:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80106ae:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80106b0:	6003      	str	r3, [r0, #0]
}
 80106b2:	4770      	bx	lr

080106b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106b4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80106b6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80106b8:	1c6b      	adds	r3, r5, #1
 80106ba:	d010      	beq.n	80106de <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80106bc:	f100 0308 	add.w	r3, r0, #8
 80106c0:	461c      	mov	r4, r3
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	42aa      	cmp	r2, r5
 80106c8:	d9fa      	bls.n	80106c0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80106ca:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80106cc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80106ce:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80106d0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80106d2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80106d4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80106d6:	6108      	str	r0, [r1, #16]
}
 80106d8:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80106da:	6002      	str	r2, [r0, #0]
}
 80106dc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80106de:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80106e0:	6863      	ldr	r3, [r4, #4]
 80106e2:	e7f2      	b.n	80106ca <vListInsert+0x16>

080106e4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80106e4:	6903      	ldr	r3, [r0, #16]
{
 80106e6:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80106e8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80106ec:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80106ee:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80106f0:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80106f2:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80106f4:	bf08      	it	eq
 80106f6:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80106f8:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80106fa:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 80106fe:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8010700:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8010702:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010704:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8010706:	6818      	ldr	r0, [r3, #0]
}
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop

0801070c <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801070c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 801070e:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010710:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8010712:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010714:	b92b      	cbnz	r3, 8010722 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010716:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010718:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801071a:	b35e      	cbz	r6, 8010774 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 801071c:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801071e:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8010720:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010722:	4616      	mov	r6, r2
 8010724:	b982      	cbnz	r2, 8010748 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010726:	461a      	mov	r2, r3
 8010728:	6840      	ldr	r0, [r0, #4]
 801072a:	f002 ff9a 	bl	8013662 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801072e:	6863      	ldr	r3, [r4, #4]
 8010730:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010732:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010734:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010736:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010738:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801073a:	bf24      	itt	cs
 801073c:	6823      	ldrcs	r3, [r4, #0]
 801073e:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010740:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8010742:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010744:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8010746:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010748:	461a      	mov	r2, r3
 801074a:	68c0      	ldr	r0, [r0, #12]
 801074c:	f002 ff89 	bl	8013662 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010750:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010752:	68e3      	ldr	r3, [r4, #12]
 8010754:	4251      	negs	r1, r2
 8010756:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010758:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801075a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801075c:	4293      	cmp	r3, r2
 801075e:	d202      	bcs.n	8010766 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010760:	68a3      	ldr	r3, [r4, #8]
 8010762:	440b      	add	r3, r1
 8010764:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8010766:	2e02      	cmp	r6, #2
 8010768:	d1ea      	bne.n	8010740 <prvCopyDataToQueue+0x34>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801076a:	2d01      	cmp	r5, #1
 801076c:	bf38      	it	cc
 801076e:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 8010770:	2000      	movs	r0, #0
 8010772:	e7d4      	b.n	801071e <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010774:	6880      	ldr	r0, [r0, #8]
 8010776:	f001 fbd7 	bl	8011f28 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801077a:	60a6      	str	r6, [r4, #8]
 801077c:	e7cf      	b.n	801071e <prvCopyDataToQueue+0x12>
 801077e:	bf00      	nop

08010780 <xQueueGenericCreate>:
	{
 8010780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010782:	b940      	cbnz	r0, 8010796 <xQueueGenericCreate+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010788:	f383 8811 	msr	BASEPRI, r3
 801078c:	f3bf 8f6f 	isb	sy
 8010790:	f3bf 8f4f 	dsb	sy
 8010794:	e7fe      	b.n	8010794 <xQueueGenericCreate+0x14>
 8010796:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010798:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801079c:	3050      	adds	r0, #80	@ 0x50
 801079e:	460e      	mov	r6, r1
 80107a0:	4617      	mov	r7, r2
 80107a2:	f001 feb9 	bl	8012518 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80107a6:	4604      	mov	r4, r0
 80107a8:	b328      	cbz	r0, 80107f6 <xQueueGenericCreate+0x76>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80107aa:	b336      	cbz	r6, 80107fa <xQueueGenericCreate+0x7a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107ac:	f100 0350 	add.w	r3, r0, #80	@ 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80107b0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80107b2:	e9c4 560f 	strd	r5, r6, [r4, #60]	@ 0x3c
	taskENTER_CRITICAL();
 80107b6:	f002 f81d 	bl	80127f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107ba:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 80107be:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80107c0:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107c2:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107c6:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107c8:	440a      	add	r2, r1
 80107ca:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107cc:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107ce:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107d0:	63a2      	str	r2, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80107d2:	22ff      	movs	r2, #255	@ 0xff
 80107d4:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107d8:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80107da:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107de:	f104 0010 	add.w	r0, r4, #16
 80107e2:	f7ff ff49 	bl	8010678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80107e6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80107ea:	f7ff ff45 	bl	8010678 <vListInitialise>
	taskEXIT_CRITICAL();
 80107ee:	f002 f823 	bl	8012838 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 80107f2:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80107f6:	4620      	mov	r0, r4
 80107f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80107fa:	4603      	mov	r3, r0
 80107fc:	e7d8      	b.n	80107b0 <xQueueGenericCreate+0x30>
 80107fe:	bf00      	nop

08010800 <xQueueCreateCountingSemaphore>:
	{
 8010800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
 8010802:	b940      	cbnz	r0, 8010816 <xQueueCreateCountingSemaphore+0x16>
 8010804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010808:	f383 8811 	msr	BASEPRI, r3
 801080c:	f3bf 8f6f 	isb	sy
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	e7fe      	b.n	8010814 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010816:	4288      	cmp	r0, r1
 8010818:	460e      	mov	r6, r1
 801081a:	4604      	mov	r4, r0
 801081c:	d208      	bcs.n	8010830 <xQueueCreateCountingSemaphore+0x30>
 801081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010822:	f383 8811 	msr	BASEPRI, r3
 8010826:	f3bf 8f6f 	isb	sy
 801082a:	f3bf 8f4f 	dsb	sy
 801082e:	e7fe      	b.n	801082e <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010830:	2050      	movs	r0, #80	@ 0x50
 8010832:	f001 fe71 	bl	8012518 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010836:	4605      	mov	r5, r0
 8010838:	b320      	cbz	r0, 8010884 <xQueueCreateCountingSemaphore+0x84>
	pxNewQueue->uxItemSize = uxItemSize;
 801083a:	2700      	movs	r7, #0
 801083c:	e9c0 470f 	strd	r4, r7, [r0, #60]	@ 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010840:	6000      	str	r0, [r0, #0]
	taskENTER_CRITICAL();
 8010842:	f001 ffd7 	bl	80127f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010846:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	@ 0x3c
 801084a:	682a      	ldr	r2, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801084c:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801084e:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010852:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010854:	4413      	add	r3, r2
 8010856:	60ab      	str	r3, [r5, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010858:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 801085a:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801085c:	63af      	str	r7, [r5, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801085e:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010860:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010864:	f105 0010 	add.w	r0, r5, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8010868:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801086c:	f7ff ff04 	bl	8010678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010870:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8010874:	f7ff ff00 	bl	8010678 <vListInitialise>
	taskEXIT_CRITICAL();
 8010878:	f001 ffde 	bl	8012838 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 801087c:	2302      	movs	r3, #2
 801087e:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010882:	63ae      	str	r6, [r5, #56]	@ 0x38
	}
 8010884:	4628      	mov	r0, r5
 8010886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010888 <xQueueGenericSend>:
{
 8010888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801088c:	b085      	sub	sp, #20
 801088e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010890:	2800      	cmp	r0, #0
 8010892:	d043      	beq.n	801091c <xQueueGenericSend+0x94>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010894:	4688      	mov	r8, r1
 8010896:	461f      	mov	r7, r3
 8010898:	4604      	mov	r4, r0
 801089a:	b399      	cbz	r1, 8010904 <xQueueGenericSend+0x7c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801089c:	2f02      	cmp	r7, #2
 801089e:	d10b      	bne.n	80108b8 <xQueueGenericSend+0x30>
 80108a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d008      	beq.n	80108b8 <xQueueGenericSend+0x30>
 80108a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108aa:	f383 8811 	msr	BASEPRI, r3
 80108ae:	f3bf 8f6f 	isb	sy
 80108b2:	f3bf 8f4f 	dsb	sy
 80108b6:	e7fe      	b.n	80108b6 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108b8:	f001 fad6 	bl	8011e68 <xTaskGetSchedulerState>
 80108bc:	2800      	cmp	r0, #0
 80108be:	d036      	beq.n	801092e <xQueueGenericSend+0xa6>
		taskENTER_CRITICAL();
 80108c0:	f001 ff98 	bl	80127f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80108c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80108c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d301      	bcc.n	80108d0 <xQueueGenericSend+0x48>
 80108cc:	2f02      	cmp	r7, #2
 80108ce:	d13a      	bne.n	8010946 <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80108d0:	463a      	mov	r2, r7
 80108d2:	4641      	mov	r1, r8
 80108d4:	4620      	mov	r0, r4
 80108d6:	f7ff ff19 	bl	801070c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f040 814b 	bne.w	8010b78 <xQueueGenericSend+0x2f0>
					else if( xYieldRequired != pdFALSE )
 80108e2:	b148      	cbz	r0, 80108f8 <xQueueGenericSend+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 80108e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80108e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80108f8:	f001 ff9e 	bl	8012838 <vPortExitCritical>
				return pdPASS;
 80108fc:	2001      	movs	r0, #1
}
 80108fe:	b005      	add	sp, #20
 8010900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010904:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010906:	2b00      	cmp	r3, #0
 8010908:	d0c8      	beq.n	801089c <xQueueGenericSend+0x14>
 801090a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801090e:	f383 8811 	msr	BASEPRI, r3
 8010912:	f3bf 8f6f 	isb	sy
 8010916:	f3bf 8f4f 	dsb	sy
 801091a:	e7fe      	b.n	801091a <xQueueGenericSend+0x92>
 801091c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010920:	f383 8811 	msr	BASEPRI, r3
 8010924:	f3bf 8f6f 	isb	sy
 8010928:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801092c:	e7fe      	b.n	801092c <xQueueGenericSend+0xa4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801092e:	9b01      	ldr	r3, [sp, #4]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d0c5      	beq.n	80108c0 <xQueueGenericSend+0x38>
 8010934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010938:	f383 8811 	msr	BASEPRI, r3
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	e7fe      	b.n	8010944 <xQueueGenericSend+0xbc>
 8010946:	2200      	movs	r2, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010948:	f104 0624 	add.w	r6, r4, #36	@ 0x24
				if( xTicksToWait == ( TickType_t ) 0 )
 801094c:	9b01      	ldr	r3, [sp, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	f000 80d1 	beq.w	8010af6 <xQueueGenericSend+0x26e>
				else if( xEntryTimeSet == pdFALSE )
 8010954:	2a00      	cmp	r2, #0
 8010956:	f000 80ca 	beq.w	8010aee <xQueueGenericSend+0x266>
		taskEXIT_CRITICAL();
 801095a:	f001 ff6d 	bl	8012838 <vPortExitCritical>
		vTaskSuspendAll();
 801095e:	f001 f8e5 	bl	8011b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010962:	f001 ff47 	bl	80127f4 <vPortEnterCritical>
 8010966:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801096a:	2bff      	cmp	r3, #255	@ 0xff
 801096c:	bf04      	itt	eq
 801096e:	2300      	moveq	r3, #0
 8010970:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8010974:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010978:	2bff      	cmp	r3, #255	@ 0xff
 801097a:	bf04      	itt	eq
 801097c:	2300      	moveq	r3, #0
 801097e:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8010982:	f001 ff59 	bl	8012838 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010986:	a901      	add	r1, sp, #4
 8010988:	a802      	add	r0, sp, #8
 801098a:	f001 fa25 	bl	8011dd8 <xTaskCheckForTimeOut>
 801098e:	2800      	cmp	r0, #0
 8010990:	f040 80b5 	bne.w	8010afe <xQueueGenericSend+0x276>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010994:	f001 ff2e 	bl	80127f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010998:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801099a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801099c:	429a      	cmp	r2, r3
 801099e:	d04c      	beq.n	8010a3a <xQueueGenericSend+0x1b2>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80109a0:	f001 ff4a 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 80109a4:	f001 ff26 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80109a8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80109ac:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109ae:	2d00      	cmp	r5, #0
 80109b0:	dc04      	bgt.n	80109bc <xQueueGenericSend+0x134>
 80109b2:	e011      	b.n	80109d8 <xQueueGenericSend+0x150>
			--cTxLock;
 80109b4:	1e6a      	subs	r2, r5, #1
 80109b6:	b2d3      	uxtb	r3, r2
 80109b8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109ba:	b16b      	cbz	r3, 80109d8 <xQueueGenericSend+0x150>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109be:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109c0:	b153      	cbz	r3, 80109d8 <xQueueGenericSend+0x150>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109c2:	f001 f9c1 	bl	8011d48 <xTaskRemoveFromEventList>
 80109c6:	2800      	cmp	r0, #0
 80109c8:	d0f4      	beq.n	80109b4 <xQueueGenericSend+0x12c>
						vTaskMissedYield();
 80109ca:	f001 fa45 	bl	8011e58 <vTaskMissedYield>
			--cTxLock;
 80109ce:	1e6a      	subs	r2, r5, #1
 80109d0:	b2d3      	uxtb	r3, r2
 80109d2:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d1f1      	bne.n	80109bc <xQueueGenericSend+0x134>
		pxQueue->cTxLock = queueUNLOCKED;
 80109d8:	23ff      	movs	r3, #255	@ 0xff
 80109da:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80109de:	f001 ff2b 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 80109e2:	f001 ff07 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80109e6:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80109ea:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80109ec:	2d00      	cmp	r5, #0
 80109ee:	dd14      	ble.n	8010a1a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109f0:	f104 0910 	add.w	r9, r4, #16
 80109f4:	e003      	b.n	80109fe <xQueueGenericSend+0x176>
				--cRxLock;
 80109f6:	1e6a      	subs	r2, r5, #1
 80109f8:	b2d3      	uxtb	r3, r2
 80109fa:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80109fc:	b16b      	cbz	r3, 8010a1a <xQueueGenericSend+0x192>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109fe:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a00:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a02:	b153      	cbz	r3, 8010a1a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a04:	f001 f9a0 	bl	8011d48 <xTaskRemoveFromEventList>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d0f4      	beq.n	80109f6 <xQueueGenericSend+0x16e>
					vTaskMissedYield();
 8010a0c:	f001 fa24 	bl	8011e58 <vTaskMissedYield>
				--cRxLock;
 8010a10:	1e6a      	subs	r2, r5, #1
 8010a12:	b2d3      	uxtb	r3, r2
 8010a14:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d1f1      	bne.n	80109fe <xQueueGenericSend+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 8010a1a:	23ff      	movs	r3, #255	@ 0xff
 8010a1c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010a20:	f001 ff0a 	bl	8012838 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8010a24:	f001 f88c 	bl	8011b40 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010a28:	f001 fee4 	bl	80127f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a2c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010a2e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010a30:	429a      	cmp	r2, r3
 8010a32:	f4ff af4d 	bcc.w	80108d0 <xQueueGenericSend+0x48>
{
 8010a36:	2201      	movs	r2, #1
 8010a38:	e788      	b.n	801094c <xQueueGenericSend+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010a3a:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8010a3e:	f001 fefb 	bl	8012838 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010a42:	9901      	ldr	r1, [sp, #4]
 8010a44:	4648      	mov	r0, r9
 8010a46:	f001 f8d3 	bl	8011bf0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8010a4a:	f001 fed3 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010a4e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010a52:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a54:	2d00      	cmp	r5, #0
 8010a56:	dc04      	bgt.n	8010a62 <xQueueGenericSend+0x1da>
 8010a58:	e011      	b.n	8010a7e <xQueueGenericSend+0x1f6>
			--cTxLock;
 8010a5a:	1e6b      	subs	r3, r5, #1
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a60:	b16a      	cbz	r2, 8010a7e <xQueueGenericSend+0x1f6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a64:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a66:	b153      	cbz	r3, 8010a7e <xQueueGenericSend+0x1f6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a68:	f001 f96e 	bl	8011d48 <xTaskRemoveFromEventList>
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d0f4      	beq.n	8010a5a <xQueueGenericSend+0x1d2>
						vTaskMissedYield();
 8010a70:	f001 f9f2 	bl	8011e58 <vTaskMissedYield>
			--cTxLock;
 8010a74:	1e6b      	subs	r3, r5, #1
 8010a76:	b2da      	uxtb	r2, r3
 8010a78:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a7a:	2a00      	cmp	r2, #0
 8010a7c:	d1f1      	bne.n	8010a62 <xQueueGenericSend+0x1da>
		pxQueue->cTxLock = queueUNLOCKED;
 8010a7e:	23ff      	movs	r3, #255	@ 0xff
 8010a80:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010a84:	f001 fed8 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010a88:	f001 feb4 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010a8c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010a90:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a92:	2d00      	cmp	r5, #0
 8010a94:	dc04      	bgt.n	8010aa0 <xQueueGenericSend+0x218>
 8010a96:	e011      	b.n	8010abc <xQueueGenericSend+0x234>
				--cRxLock;
 8010a98:	1e6b      	subs	r3, r5, #1
 8010a9a:	b2da      	uxtb	r2, r3
 8010a9c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a9e:	b16a      	cbz	r2, 8010abc <xQueueGenericSend+0x234>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010aa0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010aa2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010aa4:	b153      	cbz	r3, 8010abc <xQueueGenericSend+0x234>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010aa6:	f001 f94f 	bl	8011d48 <xTaskRemoveFromEventList>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d0f4      	beq.n	8010a98 <xQueueGenericSend+0x210>
					vTaskMissedYield();
 8010aae:	f001 f9d3 	bl	8011e58 <vTaskMissedYield>
				--cRxLock;
 8010ab2:	1e6b      	subs	r3, r5, #1
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ab8:	2a00      	cmp	r2, #0
 8010aba:	d1f1      	bne.n	8010aa0 <xQueueGenericSend+0x218>
		pxQueue->cRxLock = queueUNLOCKED;
 8010abc:	23ff      	movs	r3, #255	@ 0xff
 8010abe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010ac2:	f001 feb9 	bl	8012838 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8010ac6:	f001 f83b 	bl	8011b40 <xTaskResumeAll>
 8010aca:	b948      	cbnz	r0, 8010ae0 <xQueueGenericSend+0x258>
					portYIELD_WITHIN_API();
 8010acc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ad4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010ad8:	f3bf 8f4f 	dsb	sy
 8010adc:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8010ae0:	f001 fe88 	bl	80127f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ae4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010ae6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d9a4      	bls.n	8010a36 <xQueueGenericSend+0x1ae>
 8010aec:	e6f0      	b.n	80108d0 <xQueueGenericSend+0x48>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010aee:	a802      	add	r0, sp, #8
 8010af0:	f001 f968 	bl	8011dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010af4:	e731      	b.n	801095a <xQueueGenericSend+0xd2>
					taskEXIT_CRITICAL();
 8010af6:	f001 fe9f 	bl	8012838 <vPortExitCritical>
					return errQUEUE_FULL;
 8010afa:	2000      	movs	r0, #0
 8010afc:	e6ff      	b.n	80108fe <xQueueGenericSend+0x76>
	taskENTER_CRITICAL();
 8010afe:	f001 fe79 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010b02:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010b06:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b08:	2d00      	cmp	r5, #0
 8010b0a:	dd10      	ble.n	8010b2e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b0c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8010b10:	e003      	b.n	8010b1a <xQueueGenericSend+0x292>
			--cTxLock;
 8010b12:	1e6b      	subs	r3, r5, #1
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b18:	b14a      	cbz	r2, 8010b2e <xQueueGenericSend+0x2a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b1c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b1e:	b133      	cbz	r3, 8010b2e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b20:	f001 f912 	bl	8011d48 <xTaskRemoveFromEventList>
 8010b24:	2800      	cmp	r0, #0
 8010b26:	d0f4      	beq.n	8010b12 <xQueueGenericSend+0x28a>
						vTaskMissedYield();
 8010b28:	f001 f996 	bl	8011e58 <vTaskMissedYield>
 8010b2c:	e7f1      	b.n	8010b12 <xQueueGenericSend+0x28a>
		pxQueue->cTxLock = queueUNLOCKED;
 8010b2e:	23ff      	movs	r3, #255	@ 0xff
 8010b30:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010b34:	f001 fe80 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010b38:	f001 fe5c 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010b3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010b40:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b42:	2d00      	cmp	r5, #0
 8010b44:	dd10      	ble.n	8010b68 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b46:	f104 0610 	add.w	r6, r4, #16
 8010b4a:	e003      	b.n	8010b54 <xQueueGenericSend+0x2cc>
				--cRxLock;
 8010b4c:	1e6b      	subs	r3, r5, #1
 8010b4e:	b2da      	uxtb	r2, r3
 8010b50:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b52:	b14a      	cbz	r2, 8010b68 <xQueueGenericSend+0x2e0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b54:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b56:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b58:	b133      	cbz	r3, 8010b68 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b5a:	f001 f8f5 	bl	8011d48 <xTaskRemoveFromEventList>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	d0f4      	beq.n	8010b4c <xQueueGenericSend+0x2c4>
					vTaskMissedYield();
 8010b62:	f001 f979 	bl	8011e58 <vTaskMissedYield>
 8010b66:	e7f1      	b.n	8010b4c <xQueueGenericSend+0x2c4>
		pxQueue->cRxLock = queueUNLOCKED;
 8010b68:	23ff      	movs	r3, #255	@ 0xff
 8010b6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010b6e:	f001 fe63 	bl	8012838 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8010b72:	f000 ffe5 	bl	8011b40 <xTaskResumeAll>
			return errQUEUE_FULL;
 8010b76:	e7c0      	b.n	8010afa <xQueueGenericSend+0x272>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b78:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010b7c:	f001 f8e4 	bl	8011d48 <xTaskRemoveFromEventList>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	f43f aeb9 	beq.w	80108f8 <xQueueGenericSend+0x70>
 8010b86:	e6ad      	b.n	80108e4 <xQueueGenericSend+0x5c>

08010b88 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d048      	beq.n	8010c1e <xQueueGenericSendFromISR+0x96>
{
 8010b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b90:	460e      	mov	r6, r1
 8010b92:	4617      	mov	r7, r2
 8010b94:	461d      	mov	r5, r3
 8010b96:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b98:	b321      	cbz	r1, 8010be4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b9a:	2d02      	cmp	r5, #2
 8010b9c:	d10b      	bne.n	8010bb6 <xQueueGenericSendFromISR+0x2e>
 8010b9e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d008      	beq.n	8010bb6 <xQueueGenericSendFromISR+0x2e>
 8010ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	e7fe      	b.n	8010bb4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010bb6:	f001 ff4b 	bl	8012a50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010bba:	f3ef 8811 	mrs	r8, BASEPRI
 8010bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc2:	f383 8811 	msr	BASEPRI, r3
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010bce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010bd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d312      	bcc.n	8010bfc <xQueueGenericSendFromISR+0x74>
 8010bd6:	2d02      	cmp	r5, #2
 8010bd8:	d010      	beq.n	8010bfc <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8010bda:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010bdc:	f388 8811 	msr	BASEPRI, r8
}
 8010be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010be4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d0d7      	beq.n	8010b9a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8010bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bee:	f383 8811 	msr	BASEPRI, r3
 8010bf2:	f3bf 8f6f 	isb	sy
 8010bf6:	f3bf 8f4f 	dsb	sy
 8010bfa:	e7fe      	b.n	8010bfa <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bfc:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8010bfe:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c02:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c04:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c06:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f7ff fd7f 	bl	801070c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010c0e:	1c6b      	adds	r3, r5, #1
 8010c10:	d00e      	beq.n	8010c30 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c12:	1c6b      	adds	r3, r5, #1
 8010c14:	b25b      	sxtb	r3, r3
 8010c16:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8010c1a:	2001      	movs	r0, #1
 8010c1c:	e7de      	b.n	8010bdc <xQueueGenericSendFromISR+0x54>
 8010c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c22:	f383 8811 	msr	BASEPRI, r3
 8010c26:	f3bf 8f6f 	isb	sy
 8010c2a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010c2e:	e7fe      	b.n	8010c2e <xQueueGenericSendFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c30:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d0f1      	beq.n	8010c1a <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c36:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010c3a:	f001 f885 	bl	8011d48 <xTaskRemoveFromEventList>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	d0eb      	beq.n	8010c1a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8010c42:	2f00      	cmp	r7, #0
 8010c44:	d0e9      	beq.n	8010c1a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c46:	2301      	movs	r3, #1
 8010c48:	603b      	str	r3, [r7, #0]
 8010c4a:	e7e6      	b.n	8010c1a <xQueueGenericSendFromISR+0x92>

08010c4c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8010c4c:	b360      	cbz	r0, 8010ca8 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c4e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8010c50:	b570      	push	{r4, r5, r6, lr}
 8010c52:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c54:	b143      	cbz	r3, 8010c68 <xQueueGiveFromISR+0x1c>
 8010c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c5a:	f383 8811 	msr	BASEPRI, r3
 8010c5e:	f3bf 8f6f 	isb	sy
 8010c62:	f3bf 8f4f 	dsb	sy
 8010c66:	e7fe      	b.n	8010c66 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c68:	6803      	ldr	r3, [r0, #0]
 8010c6a:	460d      	mov	r5, r1
 8010c6c:	b32b      	cbz	r3, 8010cba <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c6e:	f001 feef 	bl	8012a50 <vPortValidateInterruptPriority>
	__asm volatile
 8010c72:	f3ef 8611 	mrs	r6, BASEPRI
 8010c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c7a:	f383 8811 	msr	BASEPRI, r3
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c86:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010c88:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d921      	bls.n	8010cd2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c8e:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c92:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8010c94:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c96:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c98:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8010c9a:	d01e      	beq.n	8010cda <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	b25b      	sxtb	r3, r3
 8010ca0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	e015      	b.n	8010cd4 <xQueueGiveFromISR+0x88>
	__asm volatile
 8010ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cac:	f383 8811 	msr	BASEPRI, r3
 8010cb0:	f3bf 8f6f 	isb	sy
 8010cb4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010cb8:	e7fe      	b.n	8010cb8 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010cba:	6883      	ldr	r3, [r0, #8]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d0d6      	beq.n	8010c6e <xQueueGiveFromISR+0x22>
 8010cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	e7fe      	b.n	8010cd0 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8010cd2:	2000      	movs	r0, #0
	__asm volatile
 8010cd4:	f386 8811 	msr	BASEPRI, r6
}
 8010cd8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cda:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d0e1      	beq.n	8010ca4 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ce0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010ce4:	f001 f830 	bl	8011d48 <xTaskRemoveFromEventList>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	d0db      	beq.n	8010ca4 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8010cec:	2d00      	cmp	r5, #0
 8010cee:	d0d9      	beq.n	8010ca4 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	602b      	str	r3, [r5, #0]
 8010cf4:	e7d6      	b.n	8010ca4 <xQueueGiveFromISR+0x58>
 8010cf6:	bf00      	nop

08010cf8 <xQueueReceive>:
{
 8010cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cfc:	b085      	sub	sp, #20
 8010cfe:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010d00:	2800      	cmp	r0, #0
 8010d02:	f000 8164 	beq.w	8010fce <xQueueReceive+0x2d6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d06:	460f      	mov	r7, r1
 8010d08:	4604      	mov	r4, r0
 8010d0a:	2900      	cmp	r1, #0
 8010d0c:	f000 8097 	beq.w	8010e3e <xQueueReceive+0x146>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d10:	f001 f8aa 	bl	8011e68 <xTaskGetSchedulerState>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	f000 809f 	beq.w	8010e58 <xQueueReceive+0x160>
		taskENTER_CRITICAL();
 8010d1a:	f001 fd6b 	bl	80127f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d1e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d20:	2d00      	cmp	r5, #0
 8010d22:	d175      	bne.n	8010e10 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d24:	9b01      	ldr	r3, [sp, #4]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f000 80f4 	beq.w	8010f14 <xQueueReceive+0x21c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d2c:	a802      	add	r0, sp, #8
 8010d2e:	f001 f849 	bl	8011dc4 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8010d32:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d34:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskEXIT_CRITICAL();
 8010d38:	f001 fd7e 	bl	8012838 <vPortExitCritical>
		vTaskSuspendAll();
 8010d3c:	f000 fef6 	bl	8011b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d40:	f001 fd58 	bl	80127f4 <vPortEnterCritical>
 8010d44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010d48:	2bff      	cmp	r3, #255	@ 0xff
 8010d4a:	bf08      	it	eq
 8010d4c:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8010d50:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010d54:	2bff      	cmp	r3, #255	@ 0xff
 8010d56:	bf08      	it	eq
 8010d58:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8010d5c:	f001 fd6c 	bl	8012838 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d60:	a901      	add	r1, sp, #4
 8010d62:	a802      	add	r0, sp, #8
 8010d64:	f001 f838 	bl	8011dd8 <xTaskCheckForTimeOut>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	f040 8082 	bne.w	8010e72 <xQueueReceive+0x17a>
	taskENTER_CRITICAL();
 8010d6e:	f001 fd41 	bl	80127f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f000 80d3 	beq.w	8010f20 <xQueueReceive+0x228>
	taskEXIT_CRITICAL();
 8010d7a:	f001 fd5d 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010d7e:	f001 fd39 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010d82:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010d86:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d88:	2d00      	cmp	r5, #0
 8010d8a:	dd14      	ble.n	8010db6 <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d8c:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8010d90:	e003      	b.n	8010d9a <xQueueReceive+0xa2>
			--cTxLock;
 8010d92:	1e6b      	subs	r3, r5, #1
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d98:	b16a      	cbz	r2, 8010db6 <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d9c:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d9e:	b153      	cbz	r3, 8010db6 <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010da0:	f000 ffd2 	bl	8011d48 <xTaskRemoveFromEventList>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d0f4      	beq.n	8010d92 <xQueueReceive+0x9a>
						vTaskMissedYield();
 8010da8:	f001 f856 	bl	8011e58 <vTaskMissedYield>
			--cTxLock;
 8010dac:	1e6b      	subs	r3, r5, #1
 8010dae:	b2da      	uxtb	r2, r3
 8010db0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010db2:	2a00      	cmp	r2, #0
 8010db4:	d1f1      	bne.n	8010d9a <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
 8010db6:	23ff      	movs	r3, #255	@ 0xff
 8010db8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010dbc:	f001 fd3c 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010dc0:	f001 fd18 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010dc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010dc8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010dca:	2d00      	cmp	r5, #0
 8010dcc:	dd14      	ble.n	8010df8 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010dce:	f104 0910 	add.w	r9, r4, #16
 8010dd2:	e003      	b.n	8010ddc <xQueueReceive+0xe4>
				--cRxLock;
 8010dd4:	1e6b      	subs	r3, r5, #1
 8010dd6:	b2da      	uxtb	r2, r3
 8010dd8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010dda:	b16a      	cbz	r2, 8010df8 <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ddc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010dde:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010de0:	b153      	cbz	r3, 8010df8 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010de2:	f000 ffb1 	bl	8011d48 <xTaskRemoveFromEventList>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	d0f4      	beq.n	8010dd4 <xQueueReceive+0xdc>
					vTaskMissedYield();
 8010dea:	f001 f835 	bl	8011e58 <vTaskMissedYield>
				--cRxLock;
 8010dee:	1e6b      	subs	r3, r5, #1
 8010df0:	b2da      	uxtb	r2, r3
 8010df2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010df4:	2a00      	cmp	r2, #0
 8010df6:	d1f1      	bne.n	8010ddc <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 8010df8:	23ff      	movs	r3, #255	@ 0xff
 8010dfa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010dfe:	f001 fd1b 	bl	8012838 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8010e02:	f000 fe9d 	bl	8011b40 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010e06:	f001 fcf5 	bl	80127f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e0a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e0c:	2d00      	cmp	r5, #0
 8010e0e:	d07d      	beq.n	8010f0c <xQueueReceive+0x214>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e10:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010e12:	b152      	cbz	r2, 8010e2a <xQueueReceive+0x132>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e14:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e16:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e18:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e1a:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e1c:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010e1e:	bf24      	itt	cs
 8010e20:	6821      	ldrcs	r1, [r4, #0]
 8010e22:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e24:	4638      	mov	r0, r7
 8010e26:	f002 fc1c 	bl	8013662 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e2a:	3d01      	subs	r5, #1
 8010e2c:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e2e:	6923      	ldr	r3, [r4, #16]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f040 80d5 	bne.w	8010fe0 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 8010e36:	f001 fcff 	bl	8012838 <vPortExitCritical>
				return pdPASS;
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	e06d      	b.n	8010f1a <xQueueReceive+0x222>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e3e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f43f af65 	beq.w	8010d10 <xQueueReceive+0x18>
	__asm volatile
 8010e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e4a:	f383 8811 	msr	BASEPRI, r3
 8010e4e:	f3bf 8f6f 	isb	sy
 8010e52:	f3bf 8f4f 	dsb	sy
 8010e56:	e7fe      	b.n	8010e56 <xQueueReceive+0x15e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e58:	9b01      	ldr	r3, [sp, #4]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f43f af5d 	beq.w	8010d1a <xQueueReceive+0x22>
 8010e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e64:	f383 8811 	msr	BASEPRI, r3
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	f3bf 8f4f 	dsb	sy
 8010e70:	e7fe      	b.n	8010e70 <xQueueReceive+0x178>
	taskENTER_CRITICAL();
 8010e72:	f001 fcbf 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010e76:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010e7a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e7c:	2d00      	cmp	r5, #0
 8010e7e:	dc04      	bgt.n	8010e8a <xQueueReceive+0x192>
 8010e80:	e011      	b.n	8010ea6 <xQueueReceive+0x1ae>
			--cTxLock;
 8010e82:	1e6b      	subs	r3, r5, #1
 8010e84:	b2da      	uxtb	r2, r3
 8010e86:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e88:	b16a      	cbz	r2, 8010ea6 <xQueueReceive+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e8c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e8e:	b153      	cbz	r3, 8010ea6 <xQueueReceive+0x1ae>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e90:	f000 ff5a 	bl	8011d48 <xTaskRemoveFromEventList>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d0f4      	beq.n	8010e82 <xQueueReceive+0x18a>
						vTaskMissedYield();
 8010e98:	f000 ffde 	bl	8011e58 <vTaskMissedYield>
			--cTxLock;
 8010e9c:	1e6b      	subs	r3, r5, #1
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ea2:	2a00      	cmp	r2, #0
 8010ea4:	d1f1      	bne.n	8010e8a <xQueueReceive+0x192>
		pxQueue->cTxLock = queueUNLOCKED;
 8010ea6:	23ff      	movs	r3, #255	@ 0xff
 8010ea8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010eac:	f001 fcc4 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010eb0:	f001 fca0 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010eb4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010eb8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010eba:	2d00      	cmp	r5, #0
 8010ebc:	dd14      	ble.n	8010ee8 <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ebe:	f104 0910 	add.w	r9, r4, #16
 8010ec2:	e003      	b.n	8010ecc <xQueueReceive+0x1d4>
				--cRxLock;
 8010ec4:	1e6b      	subs	r3, r5, #1
 8010ec6:	b2da      	uxtb	r2, r3
 8010ec8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010eca:	b16a      	cbz	r2, 8010ee8 <xQueueReceive+0x1f0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ecc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ece:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ed0:	b153      	cbz	r3, 8010ee8 <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ed2:	f000 ff39 	bl	8011d48 <xTaskRemoveFromEventList>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	d0f4      	beq.n	8010ec4 <xQueueReceive+0x1cc>
					vTaskMissedYield();
 8010eda:	f000 ffbd 	bl	8011e58 <vTaskMissedYield>
				--cRxLock;
 8010ede:	1e6b      	subs	r3, r5, #1
 8010ee0:	b2da      	uxtb	r2, r3
 8010ee2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ee4:	2a00      	cmp	r2, #0
 8010ee6:	d1f1      	bne.n	8010ecc <xQueueReceive+0x1d4>
		pxQueue->cRxLock = queueUNLOCKED;
 8010ee8:	23ff      	movs	r3, #255	@ 0xff
 8010eea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010eee:	f001 fca3 	bl	8012838 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8010ef2:	f000 fe25 	bl	8011b40 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8010ef6:	f001 fc7d 	bl	80127f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010efa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010efc:	b153      	cbz	r3, 8010f14 <xQueueReceive+0x21c>
	taskEXIT_CRITICAL();
 8010efe:	f001 fc9b 	bl	8012838 <vPortExitCritical>
		taskENTER_CRITICAL();
 8010f02:	f001 fc77 	bl	80127f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f06:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f08:	2d00      	cmp	r5, #0
 8010f0a:	d181      	bne.n	8010e10 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f0c:	9b01      	ldr	r3, [sp, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	f47f af12 	bne.w	8010d38 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8010f14:	f001 fc90 	bl	8012838 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010f18:	2000      	movs	r0, #0
}
 8010f1a:	b005      	add	sp, #20
 8010f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f20:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
 8010f24:	f001 fc88 	bl	8012838 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f28:	9901      	ldr	r1, [sp, #4]
 8010f2a:	4648      	mov	r0, r9
 8010f2c:	f000 fe60 	bl	8011bf0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8010f30:	f001 fc60 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010f34:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010f38:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f3a:	2d00      	cmp	r5, #0
 8010f3c:	dc04      	bgt.n	8010f48 <xQueueReceive+0x250>
 8010f3e:	e011      	b.n	8010f64 <xQueueReceive+0x26c>
			--cTxLock;
 8010f40:	1e6b      	subs	r3, r5, #1
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f46:	b16a      	cbz	r2, 8010f64 <xQueueReceive+0x26c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f4a:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f4c:	b153      	cbz	r3, 8010f64 <xQueueReceive+0x26c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f4e:	f000 fefb 	bl	8011d48 <xTaskRemoveFromEventList>
 8010f52:	2800      	cmp	r0, #0
 8010f54:	d0f4      	beq.n	8010f40 <xQueueReceive+0x248>
						vTaskMissedYield();
 8010f56:	f000 ff7f 	bl	8011e58 <vTaskMissedYield>
			--cTxLock;
 8010f5a:	1e6b      	subs	r3, r5, #1
 8010f5c:	b2da      	uxtb	r2, r3
 8010f5e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f60:	2a00      	cmp	r2, #0
 8010f62:	d1f1      	bne.n	8010f48 <xQueueReceive+0x250>
		pxQueue->cTxLock = queueUNLOCKED;
 8010f64:	23ff      	movs	r3, #255	@ 0xff
 8010f66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010f6a:	f001 fc65 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010f6e:	f001 fc41 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010f72:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010f76:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	dd14      	ble.n	8010fa6 <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f7c:	f104 0910 	add.w	r9, r4, #16
 8010f80:	e003      	b.n	8010f8a <xQueueReceive+0x292>
				--cRxLock;
 8010f82:	1e6b      	subs	r3, r5, #1
 8010f84:	b2da      	uxtb	r2, r3
 8010f86:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f88:	b16a      	cbz	r2, 8010fa6 <xQueueReceive+0x2ae>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f8a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f8c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f8e:	b153      	cbz	r3, 8010fa6 <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f90:	f000 feda 	bl	8011d48 <xTaskRemoveFromEventList>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d0f4      	beq.n	8010f82 <xQueueReceive+0x28a>
					vTaskMissedYield();
 8010f98:	f000 ff5e 	bl	8011e58 <vTaskMissedYield>
				--cRxLock;
 8010f9c:	1e6b      	subs	r3, r5, #1
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010fa2:	2a00      	cmp	r2, #0
 8010fa4:	d1f1      	bne.n	8010f8a <xQueueReceive+0x292>
		pxQueue->cRxLock = queueUNLOCKED;
 8010fa6:	23ff      	movs	r3, #255	@ 0xff
 8010fa8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8010fac:	f001 fc44 	bl	8012838 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8010fb0:	f000 fdc6 	bl	8011b40 <xTaskResumeAll>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d1a4      	bne.n	8010f02 <xQueueReceive+0x20a>
					portYIELD_WITHIN_API();
 8010fb8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010fc4:	f3bf 8f4f 	dsb	sy
 8010fc8:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8010fcc:	e799      	b.n	8010f02 <xQueueReceive+0x20a>
 8010fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fd2:	f383 8811 	msr	BASEPRI, r3
 8010fd6:	f3bf 8f6f 	isb	sy
 8010fda:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8010fde:	e7fe      	b.n	8010fde <xQueueReceive+0x2e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fe0:	f104 0010 	add.w	r0, r4, #16
 8010fe4:	f000 feb0 	bl	8011d48 <xTaskRemoveFromEventList>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	f43f af24 	beq.w	8010e36 <xQueueReceive+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 8010fee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ff6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010ffa:	f3bf 8f4f 	dsb	sy
 8010ffe:	f3bf 8f6f 	isb	sy
 8011002:	e718      	b.n	8010e36 <xQueueReceive+0x13e>

08011004 <xQueueSemaphoreTake>:
{
 8011004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011008:	b084      	sub	sp, #16
 801100a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801100c:	2800      	cmp	r0, #0
 801100e:	d05e      	beq.n	80110ce <xQueueSemaphoreTake+0xca>
	configASSERT( pxQueue->uxItemSize == 0 );
 8011010:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8011012:	4604      	mov	r4, r0
 8011014:	b147      	cbz	r7, 8011028 <xQueueSemaphoreTake+0x24>
 8011016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801101a:	f383 8811 	msr	BASEPRI, r3
 801101e:	f3bf 8f6f 	isb	sy
 8011022:	f3bf 8f4f 	dsb	sy
 8011026:	e7fe      	b.n	8011026 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011028:	f000 ff1e 	bl	8011e68 <xTaskGetSchedulerState>
 801102c:	4605      	mov	r5, r0
 801102e:	2800      	cmp	r0, #0
 8011030:	d056      	beq.n	80110e0 <xQueueSemaphoreTake+0xdc>
 8011032:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011034:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskENTER_CRITICAL();
 8011038:	f001 fbdc 	bl	80127f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801103c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801103e:	2b00      	cmp	r3, #0
 8011040:	f040 814d 	bne.w	80112de <xQueueSemaphoreTake+0x2da>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011044:	9b01      	ldr	r3, [sp, #4]
 8011046:	2b00      	cmp	r3, #0
 8011048:	f000 813e 	beq.w	80112c8 <xQueueSemaphoreTake+0x2c4>
				else if( xEntryTimeSet == pdFALSE )
 801104c:	2d00      	cmp	r5, #0
 801104e:	f000 80a3 	beq.w	8011198 <xQueueSemaphoreTake+0x194>
		taskEXIT_CRITICAL();
 8011052:	f001 fbf1 	bl	8012838 <vPortExitCritical>
		vTaskSuspendAll();
 8011056:	f000 fd69 	bl	8011b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801105a:	f001 fbcb 	bl	80127f4 <vPortEnterCritical>
 801105e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011062:	2bff      	cmp	r3, #255	@ 0xff
 8011064:	bf04      	itt	eq
 8011066:	2300      	moveq	r3, #0
 8011068:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 801106c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011070:	2bff      	cmp	r3, #255	@ 0xff
 8011072:	bf04      	itt	eq
 8011074:	2300      	moveq	r3, #0
 8011076:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 801107a:	f001 fbdd 	bl	8012838 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801107e:	a901      	add	r1, sp, #4
 8011080:	a802      	add	r0, sp, #8
 8011082:	f000 fea9 	bl	8011dd8 <xTaskCheckForTimeOut>
 8011086:	2800      	cmp	r0, #0
 8011088:	d137      	bne.n	80110fa <xQueueSemaphoreTake+0xf6>
	taskENTER_CRITICAL();
 801108a:	f001 fbb3 	bl	80127f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801108e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011090:	2b00      	cmp	r3, #0
 8011092:	f000 80ae 	beq.w	80111f2 <xQueueSemaphoreTake+0x1ee>
	taskEXIT_CRITICAL();
 8011096:	f001 fbcf 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 801109a:	f001 fbab 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801109e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80110a2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110a4:	2d00      	cmp	r5, #0
 80110a6:	dd7f      	ble.n	80111a8 <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110a8:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 80110ac:	e004      	b.n	80110b8 <xQueueSemaphoreTake+0xb4>
			--cTxLock;
 80110ae:	1e6b      	subs	r3, r5, #1
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110b4:	2a00      	cmp	r2, #0
 80110b6:	d077      	beq.n	80111a8 <xQueueSemaphoreTake+0x1a4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110ba:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d073      	beq.n	80111a8 <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110c0:	f000 fe42 	bl	8011d48 <xTaskRemoveFromEventList>
 80110c4:	2800      	cmp	r0, #0
 80110c6:	d0f2      	beq.n	80110ae <xQueueSemaphoreTake+0xaa>
						vTaskMissedYield();
 80110c8:	f000 fec6 	bl	8011e58 <vTaskMissedYield>
 80110cc:	e7ef      	b.n	80110ae <xQueueSemaphoreTake+0xaa>
 80110ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110d2:	f383 8811 	msr	BASEPRI, r3
 80110d6:	f3bf 8f6f 	isb	sy
 80110da:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80110de:	e7fe      	b.n	80110de <xQueueSemaphoreTake+0xda>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110e0:	9b01      	ldr	r3, [sp, #4]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 80d7 	beq.w	8011296 <xQueueSemaphoreTake+0x292>
 80110e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ec:	f383 8811 	msr	BASEPRI, r3
 80110f0:	f3bf 8f6f 	isb	sy
 80110f4:	f3bf 8f4f 	dsb	sy
 80110f8:	e7fe      	b.n	80110f8 <xQueueSemaphoreTake+0xf4>
	taskENTER_CRITICAL();
 80110fa:	f001 fb7b 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80110fe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011102:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011104:	2d00      	cmp	r5, #0
 8011106:	dc04      	bgt.n	8011112 <xQueueSemaphoreTake+0x10e>
 8011108:	e011      	b.n	801112e <xQueueSemaphoreTake+0x12a>
			--cTxLock;
 801110a:	1e6b      	subs	r3, r5, #1
 801110c:	b2da      	uxtb	r2, r3
 801110e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011110:	b16a      	cbz	r2, 801112e <xQueueSemaphoreTake+0x12a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011112:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011114:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011116:	b153      	cbz	r3, 801112e <xQueueSemaphoreTake+0x12a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011118:	f000 fe16 	bl	8011d48 <xTaskRemoveFromEventList>
 801111c:	2800      	cmp	r0, #0
 801111e:	d0f4      	beq.n	801110a <xQueueSemaphoreTake+0x106>
						vTaskMissedYield();
 8011120:	f000 fe9a 	bl	8011e58 <vTaskMissedYield>
			--cTxLock;
 8011124:	1e6b      	subs	r3, r5, #1
 8011126:	b2da      	uxtb	r2, r3
 8011128:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801112a:	2a00      	cmp	r2, #0
 801112c:	d1f1      	bne.n	8011112 <xQueueSemaphoreTake+0x10e>
		pxQueue->cTxLock = queueUNLOCKED;
 801112e:	23ff      	movs	r3, #255	@ 0xff
 8011130:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8011134:	f001 fb80 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 8011138:	f001 fb5c 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801113c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011140:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011142:	2d00      	cmp	r5, #0
 8011144:	dd14      	ble.n	8011170 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011146:	f104 0810 	add.w	r8, r4, #16
 801114a:	e003      	b.n	8011154 <xQueueSemaphoreTake+0x150>
				--cRxLock;
 801114c:	1e6b      	subs	r3, r5, #1
 801114e:	b2da      	uxtb	r2, r3
 8011150:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011152:	b16a      	cbz	r2, 8011170 <xQueueSemaphoreTake+0x16c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011154:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011156:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011158:	b153      	cbz	r3, 8011170 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801115a:	f000 fdf5 	bl	8011d48 <xTaskRemoveFromEventList>
 801115e:	2800      	cmp	r0, #0
 8011160:	d0f4      	beq.n	801114c <xQueueSemaphoreTake+0x148>
					vTaskMissedYield();
 8011162:	f000 fe79 	bl	8011e58 <vTaskMissedYield>
				--cRxLock;
 8011166:	1e6b      	subs	r3, r5, #1
 8011168:	b2da      	uxtb	r2, r3
 801116a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801116c:	2a00      	cmp	r2, #0
 801116e:	d1f1      	bne.n	8011154 <xQueueSemaphoreTake+0x150>
		pxQueue->cRxLock = queueUNLOCKED;
 8011170:	23ff      	movs	r3, #255	@ 0xff
 8011172:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8011176:	f001 fb5f 	bl	8012838 <vPortExitCritical>
			( void ) xTaskResumeAll();
 801117a:	f000 fce1 	bl	8011b40 <xTaskResumeAll>
	taskENTER_CRITICAL();
 801117e:	f001 fb39 	bl	80127f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011182:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011184:	b963      	cbnz	r3, 80111a0 <xQueueSemaphoreTake+0x19c>
	taskEXIT_CRITICAL();
 8011186:	f001 fb57 	bl	8012838 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 801118a:	2f00      	cmp	r7, #0
 801118c:	f040 8085 	bne.w	801129a <xQueueSemaphoreTake+0x296>
					return errQUEUE_EMPTY;
 8011190:	2000      	movs	r0, #0
}
 8011192:	b004      	add	sp, #16
 8011194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011198:	a802      	add	r0, sp, #8
 801119a:	f000 fe13 	bl	8011dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801119e:	e758      	b.n	8011052 <xQueueSemaphoreTake+0x4e>
	taskEXIT_CRITICAL();
 80111a0:	f001 fb4a 	bl	8012838 <vPortExitCritical>
	return xReturn;
 80111a4:	2501      	movs	r5, #1
 80111a6:	e747      	b.n	8011038 <xQueueSemaphoreTake+0x34>
		pxQueue->cTxLock = queueUNLOCKED;
 80111a8:	23ff      	movs	r3, #255	@ 0xff
 80111aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80111ae:	f001 fb43 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 80111b2:	f001 fb1f 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80111b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80111ba:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111bc:	2d00      	cmp	r5, #0
 80111be:	dd10      	ble.n	80111e2 <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111c0:	f104 0810 	add.w	r8, r4, #16
 80111c4:	e003      	b.n	80111ce <xQueueSemaphoreTake+0x1ca>
				--cRxLock;
 80111c6:	1e6b      	subs	r3, r5, #1
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111cc:	b14a      	cbz	r2, 80111e2 <xQueueSemaphoreTake+0x1de>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111ce:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111d0:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111d2:	b133      	cbz	r3, 80111e2 <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111d4:	f000 fdb8 	bl	8011d48 <xTaskRemoveFromEventList>
 80111d8:	2800      	cmp	r0, #0
 80111da:	d0f4      	beq.n	80111c6 <xQueueSemaphoreTake+0x1c2>
					vTaskMissedYield();
 80111dc:	f000 fe3c 	bl	8011e58 <vTaskMissedYield>
 80111e0:	e7f1      	b.n	80111c6 <xQueueSemaphoreTake+0x1c2>
		pxQueue->cRxLock = queueUNLOCKED;
 80111e2:	23ff      	movs	r3, #255	@ 0xff
 80111e4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80111e8:	f001 fb26 	bl	8012838 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80111ec:	f000 fca8 	bl	8011b40 <xTaskResumeAll>
 80111f0:	e7d8      	b.n	80111a4 <xQueueSemaphoreTake+0x1a0>
	taskEXIT_CRITICAL();
 80111f2:	f001 fb21 	bl	8012838 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111f6:	6823      	ldr	r3, [r4, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d05c      	beq.n	80112b6 <xQueueSemaphoreTake+0x2b2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111fc:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 8011200:	9901      	ldr	r1, [sp, #4]
 8011202:	4640      	mov	r0, r8
 8011204:	f000 fcf4 	bl	8011bf0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8011208:	f001 faf4 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801120c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011210:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011212:	2d00      	cmp	r5, #0
 8011214:	dc04      	bgt.n	8011220 <xQueueSemaphoreTake+0x21c>
 8011216:	e00d      	b.n	8011234 <xQueueSemaphoreTake+0x230>
			--cTxLock;
 8011218:	1e6b      	subs	r3, r5, #1
 801121a:	b2da      	uxtb	r2, r3
 801121c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801121e:	b14a      	cbz	r2, 8011234 <xQueueSemaphoreTake+0x230>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011220:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011222:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011224:	b133      	cbz	r3, 8011234 <xQueueSemaphoreTake+0x230>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011226:	f000 fd8f 	bl	8011d48 <xTaskRemoveFromEventList>
 801122a:	2800      	cmp	r0, #0
 801122c:	d0f4      	beq.n	8011218 <xQueueSemaphoreTake+0x214>
						vTaskMissedYield();
 801122e:	f000 fe13 	bl	8011e58 <vTaskMissedYield>
 8011232:	e7f1      	b.n	8011218 <xQueueSemaphoreTake+0x214>
		pxQueue->cTxLock = queueUNLOCKED;
 8011234:	23ff      	movs	r3, #255	@ 0xff
 8011236:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801123a:	f001 fafd 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 801123e:	f001 fad9 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8011242:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011246:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011248:	2d00      	cmp	r5, #0
 801124a:	dd10      	ble.n	801126e <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801124c:	f104 0810 	add.w	r8, r4, #16
 8011250:	e003      	b.n	801125a <xQueueSemaphoreTake+0x256>
				--cRxLock;
 8011252:	1e6b      	subs	r3, r5, #1
 8011254:	b2da      	uxtb	r2, r3
 8011256:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011258:	b14a      	cbz	r2, 801126e <xQueueSemaphoreTake+0x26a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801125a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801125c:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801125e:	b133      	cbz	r3, 801126e <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011260:	f000 fd72 	bl	8011d48 <xTaskRemoveFromEventList>
 8011264:	2800      	cmp	r0, #0
 8011266:	d0f4      	beq.n	8011252 <xQueueSemaphoreTake+0x24e>
					vTaskMissedYield();
 8011268:	f000 fdf6 	bl	8011e58 <vTaskMissedYield>
 801126c:	e7f1      	b.n	8011252 <xQueueSemaphoreTake+0x24e>
		pxQueue->cRxLock = queueUNLOCKED;
 801126e:	23ff      	movs	r3, #255	@ 0xff
 8011270:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8011274:	f001 fae0 	bl	8012838 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8011278:	f000 fc62 	bl	8011b40 <xTaskResumeAll>
 801127c:	2800      	cmp	r0, #0
 801127e:	d191      	bne.n	80111a4 <xQueueSemaphoreTake+0x1a0>
					portYIELD_WITHIN_API();
 8011280:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011288:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801128c:	f3bf 8f4f 	dsb	sy
 8011290:	f3bf 8f6f 	isb	sy
 8011294:	e786      	b.n	80111a4 <xQueueSemaphoreTake+0x1a0>
 8011296:	462f      	mov	r7, r5
 8011298:	e6cc      	b.n	8011034 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 801129a:	f001 faab 	bl	80127f4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801129e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80112a0:	b119      	cbz	r1, 80112aa <xQueueSemaphoreTake+0x2a6>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80112a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80112a4:	6819      	ldr	r1, [r3, #0]
 80112a6:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80112aa:	68a0      	ldr	r0, [r4, #8]
 80112ac:	f000 fe92 	bl	8011fd4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80112b0:	f001 fac2 	bl	8012838 <vPortExitCritical>
 80112b4:	e76c      	b.n	8011190 <xQueueSemaphoreTake+0x18c>
						taskENTER_CRITICAL();
 80112b6:	f001 fa9d 	bl	80127f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112ba:	68a0      	ldr	r0, [r4, #8]
 80112bc:	f000 fde4 	bl	8011e88 <xTaskPriorityInherit>
 80112c0:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 80112c2:	f001 fab9 	bl	8012838 <vPortExitCritical>
 80112c6:	e799      	b.n	80111fc <xQueueSemaphoreTake+0x1f8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80112c8:	2f00      	cmp	r7, #0
 80112ca:	d0f1      	beq.n	80112b0 <xQueueSemaphoreTake+0x2ac>
 80112cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d0:	f383 8811 	msr	BASEPRI, r3
 80112d4:	f3bf 8f6f 	isb	sy
 80112d8:	f3bf 8f4f 	dsb	sy
 80112dc:	e7fe      	b.n	80112dc <xQueueSemaphoreTake+0x2d8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112de:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80112e0:	3b01      	subs	r3, #1
 80112e2:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112e4:	b12a      	cbz	r2, 80112f2 <xQueueSemaphoreTake+0x2ee>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112e6:	6923      	ldr	r3, [r4, #16]
 80112e8:	b93b      	cbnz	r3, 80112fa <xQueueSemaphoreTake+0x2f6>
				taskEXIT_CRITICAL();
 80112ea:	f001 faa5 	bl	8012838 <vPortExitCritical>
				return pdPASS;
 80112ee:	2001      	movs	r0, #1
 80112f0:	e74f      	b.n	8011192 <xQueueSemaphoreTake+0x18e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80112f2:	f000 fecb 	bl	801208c <pvTaskIncrementMutexHeldCount>
 80112f6:	60a0      	str	r0, [r4, #8]
 80112f8:	e7f5      	b.n	80112e6 <xQueueSemaphoreTake+0x2e2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112fa:	f104 0010 	add.w	r0, r4, #16
 80112fe:	f000 fd23 	bl	8011d48 <xTaskRemoveFromEventList>
 8011302:	2800      	cmp	r0, #0
 8011304:	d0f1      	beq.n	80112ea <xQueueSemaphoreTake+0x2e6>
						queueYIELD_IF_USING_PREEMPTION();
 8011306:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801130a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801130e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011312:	f3bf 8f4f 	dsb	sy
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	e7e6      	b.n	80112ea <xQueueSemaphoreTake+0x2e6>

0801131c <xQueueReceiveFromISR>:
{
 801131c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8011320:	b310      	cbz	r0, 8011368 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011322:	460e      	mov	r6, r1
 8011324:	4617      	mov	r7, r2
 8011326:	4604      	mov	r4, r0
 8011328:	b191      	cbz	r1, 8011350 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801132a:	f001 fb91 	bl	8012a50 <vPortValidateInterruptPriority>
	__asm volatile
 801132e:	f3ef 8911 	mrs	r9, BASEPRI
 8011332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011336:	f383 8811 	msr	BASEPRI, r3
 801133a:	f3bf 8f6f 	isb	sy
 801133e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011342:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011344:	b9cd      	cbnz	r5, 801137a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8011346:	4628      	mov	r0, r5
	__asm volatile
 8011348:	f389 8811 	msr	BASEPRI, r9
}
 801134c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011350:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8011352:	2b00      	cmp	r3, #0
 8011354:	d0e9      	beq.n	801132a <xQueueReceiveFromISR+0xe>
	__asm volatile
 8011356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801135a:	f383 8811 	msr	BASEPRI, r3
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f3bf 8f4f 	dsb	sy
 8011366:	e7fe      	b.n	8011366 <xQueueReceiveFromISR+0x4a>
 8011368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801136c:	f383 8811 	msr	BASEPRI, r3
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8011378:	e7fe      	b.n	8011378 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 801137a:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801137e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8011380:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011384:	b152      	cbz	r2, 801139c <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011386:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011388:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801138a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801138c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801138e:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011390:	bf24      	itt	cs
 8011392:	6821      	ldrcs	r1, [r4, #0]
 8011394:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011396:	4630      	mov	r0, r6
 8011398:	f002 f963 	bl	8013662 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801139c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 801139e:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80113a2:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80113a4:	d006      	beq.n	80113b4 <xQueueReceiveFromISR+0x98>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80113a6:	f108 0301 	add.w	r3, r8, #1
 80113aa:	b25b      	sxtb	r3, r3
 80113ac:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 80113b0:	2001      	movs	r0, #1
 80113b2:	e7c9      	b.n	8011348 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113b4:	6923      	ldr	r3, [r4, #16]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d0fa      	beq.n	80113b0 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113ba:	f104 0010 	add.w	r0, r4, #16
 80113be:	f000 fcc3 	bl	8011d48 <xTaskRemoveFromEventList>
 80113c2:	2800      	cmp	r0, #0
 80113c4:	d0f4      	beq.n	80113b0 <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 80113c6:	2f00      	cmp	r7, #0
 80113c8:	d0f2      	beq.n	80113b0 <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80113ca:	2301      	movs	r3, #1
 80113cc:	603b      	str	r3, [r7, #0]
 80113ce:	e7ef      	b.n	80113b0 <xQueueReceiveFromISR+0x94>

080113d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80113d0:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80113d2:	2300      	movs	r3, #0
 80113d4:	4c08      	ldr	r4, [pc, #32]	@ (80113f8 <vQueueAddToRegistry+0x28>)
 80113d6:	e002      	b.n	80113de <vQueueAddToRegistry+0xe>
 80113d8:	3301      	adds	r3, #1
 80113da:	2b64      	cmp	r3, #100	@ 0x64
 80113dc:	d008      	beq.n	80113f0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80113de:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80113e2:	2a00      	cmp	r2, #0
 80113e4:	d1f8      	bne.n	80113d8 <vQueueAddToRegistry+0x8>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 80113e6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80113ea:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80113ee:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80113f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113f4:	4770      	bx	lr
 80113f6:	bf00      	nop
 80113f8:	20002f58 	.word	0x20002f58

080113fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80113fc:	b570      	push	{r4, r5, r6, lr}
 80113fe:	4605      	mov	r5, r0
 8011400:	460e      	mov	r6, r1
 8011402:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011404:	f001 f9f6 	bl	80127f4 <vPortEnterCritical>
 8011408:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 801140c:	2bff      	cmp	r3, #255	@ 0xff
 801140e:	bf04      	itt	eq
 8011410:	2300      	moveq	r3, #0
 8011412:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 8011416:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 801141a:	2bff      	cmp	r3, #255	@ 0xff
 801141c:	bf04      	itt	eq
 801141e:	2300      	moveq	r3, #0
 8011420:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 8011424:	f001 fa08 	bl	8012838 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011428:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801142a:	2b00      	cmp	r3, #0
 801142c:	d043      	beq.n	80114b6 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 801142e:	f001 f9e1 	bl	80127f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8011432:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8011436:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011438:	2c00      	cmp	r4, #0
 801143a:	dd14      	ble.n	8011466 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801143c:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8011440:	e003      	b.n	801144a <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8011442:	1e63      	subs	r3, r4, #1
 8011444:	b2da      	uxtb	r2, r3
 8011446:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011448:	b16a      	cbz	r2, 8011466 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801144a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801144c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801144e:	b153      	cbz	r3, 8011466 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011450:	f000 fc7a 	bl	8011d48 <xTaskRemoveFromEventList>
 8011454:	2800      	cmp	r0, #0
 8011456:	d0f4      	beq.n	8011442 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8011458:	f000 fcfe 	bl	8011e58 <vTaskMissedYield>
			--cTxLock;
 801145c:	1e63      	subs	r3, r4, #1
 801145e:	b2da      	uxtb	r2, r3
 8011460:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011462:	2a00      	cmp	r2, #0
 8011464:	d1f1      	bne.n	801144a <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8011466:	23ff      	movs	r3, #255	@ 0xff
 8011468:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801146c:	f001 f9e4 	bl	8012838 <vPortExitCritical>
	taskENTER_CRITICAL();
 8011470:	f001 f9c0 	bl	80127f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8011474:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8011478:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801147a:	2c00      	cmp	r4, #0
 801147c:	dd14      	ble.n	80114a8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801147e:	f105 0610 	add.w	r6, r5, #16
 8011482:	e003      	b.n	801148c <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8011484:	1e63      	subs	r3, r4, #1
 8011486:	b2da      	uxtb	r2, r3
 8011488:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801148a:	b16a      	cbz	r2, 80114a8 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801148c:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801148e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011490:	b153      	cbz	r3, 80114a8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011492:	f000 fc59 	bl	8011d48 <xTaskRemoveFromEventList>
 8011496:	2800      	cmp	r0, #0
 8011498:	d0f4      	beq.n	8011484 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 801149a:	f000 fcdd 	bl	8011e58 <vTaskMissedYield>
				--cRxLock;
 801149e:	1e63      	subs	r3, r4, #1
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114a4:	2a00      	cmp	r2, #0
 80114a6:	d1f1      	bne.n	801148c <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 80114a8:	23ff      	movs	r3, #255	@ 0xff
 80114aa:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80114ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80114b2:	f001 b9c1 	b.w	8012838 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80114b6:	4622      	mov	r2, r4
 80114b8:	4631      	mov	r1, r6
 80114ba:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80114be:	f000 fbe7 	bl	8011c90 <vTaskPlaceOnEventListRestricted>
 80114c2:	e7b4      	b.n	801142e <vQueueWaitForMessageRestricted+0x32>

080114c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	4c14      	ldr	r4, [pc, #80]	@ (8011518 <prvIdleTask+0x54>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 80114c8:	f04f 27e0 	mov.w	r7, #3758153728	@ 0xe000e000
 80114cc:	f04f 5680 	mov.w	r6, #268435456	@ 0x10000000
 80114d0:	e014      	b.n	80114fc <prvIdleTask+0x38>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 80114d2:	f001 f98f 	bl	80127f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114d6:	6923      	ldr	r3, [r4, #16]
 80114d8:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114da:	1d28      	adds	r0, r5, #4
 80114dc:	f7ff f902 	bl	80106e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80114e0:	69a3      	ldr	r3, [r4, #24]
 80114e2:	3b01      	subs	r3, #1
 80114e4:	61a3      	str	r3, [r4, #24]
				--uxDeletedTasksWaitingCleanUp;
 80114e6:	6823      	ldr	r3, [r4, #0]
 80114e8:	3b01      	subs	r3, #1
 80114ea:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 80114ec:	f001 f9a4 	bl	8012838 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80114f0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80114f2:	f001 f8bd 	bl	8012670 <vPortFree>
			vPortFree( pxTCB );
 80114f6:	4628      	mov	r0, r5
 80114f8:	f001 f8ba 	bl	8012670 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80114fc:	6823      	ldr	r3, [r4, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1e7      	bne.n	80114d2 <prvIdleTask+0xe>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011502:	69e3      	ldr	r3, [r4, #28]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d9f9      	bls.n	80114fc <prvIdleTask+0x38>
				taskYIELD();
 8011508:	f8c7 6d04 	str.w	r6, [r7, #3332]	@ 0xd04
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	f3bf 8f6f 	isb	sy
 8011514:	e7f2      	b.n	80114fc <prvIdleTask+0x38>
 8011516:	bf00      	nop
 8011518:	20003278 	.word	0x20003278

0801151c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 801151c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011520:	4c46      	ldr	r4, [pc, #280]	@ (801163c <xTaskIncrementTick.part.0+0x120>)
 8011522:	f8d4 70a8 	ldr.w	r7, [r4, #168]	@ 0xa8
 8011526:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8011528:	f8c4 70a8 	str.w	r7, [r4, #168]	@ 0xa8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801152c:	bb2f      	cbnz	r7, 801157a <xTaskIncrementTick.part.0+0x5e>
			taskSWITCH_DELAYED_LISTS();
 801152e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	b143      	cbz	r3, 8011548 <xTaskIncrementTick.part.0+0x2c>
 8011536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801153a:	f383 8811 	msr	BASEPRI, r3
 801153e:	f3bf 8f6f 	isb	sy
 8011542:	f3bf 8f4f 	dsb	sy
 8011546:	e7fe      	b.n	8011546 <xTaskIncrementTick.part.0+0x2a>
 8011548:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801154c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	@ 0xc8
 8011550:	f8c4 20cc 	str.w	r2, [r4, #204]	@ 0xcc
 8011554:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8011558:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 801155c:	3301      	adds	r3, #1
 801155e:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011562:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d058      	beq.n	801161e <xTaskIncrementTick.part.0+0x102>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801156c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8011570:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
		if( xConstTickCount >= xNextTaskUnblockTime )
 801157a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 801157e:	429f      	cmp	r7, r3
 8011580:	d339      	bcc.n	80115f6 <xTaskIncrementTick.part.0+0xda>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011582:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8011586:	681e      	ldr	r6, [r3, #0]
 8011588:	2e00      	cmp	r6, #0
 801158a:	d051      	beq.n	8011630 <xTaskIncrementTick.part.0+0x114>
					prvAddTaskToReadyList( pxTCB );
 801158c:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8011640 <xTaskIncrementTick.part.0+0x124>
BaseType_t xSwitchRequired = pdFALSE;
 8011590:	2600      	movs	r6, #0
					prvAddTaskToReadyList( pxTCB );
 8011592:	f04f 0801 	mov.w	r8, #1
 8011596:	e021      	b.n	80115dc <xTaskIncrementTick.part.0+0xc0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011598:	f7ff f8a4 	bl	80106e4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801159c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801159e:	f105 0018 	add.w	r0, r5, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80115a2:	b10b      	cbz	r3, 80115a8 <xTaskIncrementTick.part.0+0x8c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80115a4:	f7ff f89e 	bl	80106e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80115a8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80115aa:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 80115ae:	fa08 f300 	lsl.w	r3, r8, r0
 80115b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80115b6:	4313      	orrs	r3, r2
 80115b8:	4651      	mov	r1, sl
 80115ba:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80115be:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80115c2:	f7ff f869 	bl	8010698 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115c6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115ca:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115ce:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80115d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115d2:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 80115d4:	4291      	cmp	r1, r2
 80115d6:	bf28      	it	cs
 80115d8:	2601      	movcs	r6, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115da:	b34b      	cbz	r3, 8011630 <xTaskIncrementTick.part.0+0x114>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115dc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80115e4:	686b      	ldr	r3, [r5, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115e6:	f105 0a04 	add.w	sl, r5, #4
					if( xConstTickCount < xItemValue )
 80115ea:	429f      	cmp	r7, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115ec:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80115ee:	d2d3      	bcs.n	8011598 <xTaskIncrementTick.part.0+0x7c>
						xNextTaskUnblockTime = xItemValue;
 80115f0:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80115f4:	e000      	b.n	80115f8 <xTaskIncrementTick.part.0+0xdc>
BaseType_t xSwitchRequired = pdFALSE;
 80115f6:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80115f8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80115fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011602:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011606:	69da      	ldr	r2, [r3, #28]
			if( xYieldPending != pdFALSE )
 8011608:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
				xSwitchRequired = pdTRUE;
 801160c:	2a02      	cmp	r2, #2
 801160e:	bf28      	it	cs
 8011610:	2601      	movcs	r6, #1
				xSwitchRequired = pdTRUE;
 8011612:	2b00      	cmp	r3, #0
}
 8011614:	bf0c      	ite	eq
 8011616:	4630      	moveq	r0, r6
 8011618:	2001      	movne	r0, #1
 801161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 801161e:	f04f 33ff 	mov.w	r3, #4294967295
 8011622:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011626:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 801162a:	429f      	cmp	r7, r3
 801162c:	d3e3      	bcc.n	80115f6 <xTaskIncrementTick.part.0+0xda>
 801162e:	e7a8      	b.n	8011582 <xTaskIncrementTick.part.0+0x66>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011630:	f04f 33ff 	mov.w	r3, #4294967295
 8011634:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
					break;
 8011638:	e7de      	b.n	80115f8 <xTaskIncrementTick.part.0+0xdc>
 801163a:	bf00      	nop
 801163c:	20003278 	.word	0x20003278
 8011640:	20003294 	.word	0x20003294

08011644 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8011644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		--uxSchedulerSuspended;
 8011648:	4c43      	ldr	r4, [pc, #268]	@ (8011758 <xTaskResumeAll.part.0+0x114>)
	taskENTER_CRITICAL();
 801164a:	f001 f8d3 	bl	80127f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801164e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 8011652:	3b01      	subs	r3, #1
 8011654:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011658:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 801165c:	2b00      	cmp	r3, #0
 801165e:	d154      	bne.n	801170a <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011660:	69a3      	ldr	r3, [r4, #24]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d051      	beq.n	801170a <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011666:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 801166a:	b38b      	cbz	r3, 80116d0 <xTaskResumeAll.part.0+0x8c>
 801166c:	f104 081c 	add.w	r8, r4, #28
					prvAddTaskToReadyList( pxTCB );
 8011670:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011672:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
 8011676:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011678:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801167a:	f105 0018 	add.w	r0, r5, #24
 801167e:	f7ff f831 	bl	80106e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011682:	4630      	mov	r0, r6
 8011684:	f7ff f82e 	bl	80106e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011688:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801168a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 801168e:	fa07 f300 	lsl.w	r3, r7, r0
 8011692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011696:	4313      	orrs	r3, r2
 8011698:	4631      	mov	r1, r6
 801169a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801169e:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80116a2:	f7fe fff9 	bl	8010698 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116a6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80116aa:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80116ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d331      	bcc.n	8011716 <xTaskResumeAll.part.0+0xd2>
						xYieldPending = pdTRUE;
 80116b2:	f8c4 70d8 	str.w	r7, [r4, #216]	@ 0xd8
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116b6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1d9      	bne.n	8011672 <xTaskResumeAll.part.0+0x2e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116be:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d13f      	bne.n	8011748 <xTaskResumeAll.part.0+0x104>
		xNextTaskUnblockTime = portMAX_DELAY;
 80116c8:	f04f 33ff 	mov.w	r3, #4294967295
 80116cc:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80116d0:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
					if( xPendedCounts > ( TickType_t ) 0U )
 80116d4:	b1b5      	cbz	r5, 8011704 <xTaskResumeAll.part.0+0xc0>
								xYieldPending = pdTRUE;
 80116d6:	2601      	movs	r6, #1
 80116d8:	e006      	b.n	80116e8 <xTaskResumeAll.part.0+0xa4>
 80116da:	f7ff ff1f 	bl	801151c <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 80116de:	b108      	cbz	r0, 80116e4 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 80116e0:	f8c4 60d8 	str.w	r6, [r4, #216]	@ 0xd8
						} while( xPendedCounts > ( TickType_t ) 0U );
 80116e4:	3d01      	subs	r5, #1
 80116e6:	d00b      	beq.n	8011700 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116e8:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d0f4      	beq.n	80116da <xTaskResumeAll.part.0+0x96>
		++xPendedTicks;
 80116f0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
						} while( xPendedCounts > ( TickType_t ) 0U );
 80116f4:	3d01      	subs	r5, #1
		++xPendedTicks;
 80116f6:	f103 0301 	add.w	r3, r3, #1
 80116fa:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
						} while( xPendedCounts > ( TickType_t ) 0U );
 80116fe:	d1f3      	bne.n	80116e8 <xTaskResumeAll.part.0+0xa4>
						xPendedTicks = 0;
 8011700:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
				if( xYieldPending != pdFALSE )
 8011704:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8011708:	b973      	cbnz	r3, 8011728 <xTaskResumeAll.part.0+0xe4>
BaseType_t xAlreadyYielded = pdFALSE;
 801170a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801170c:	f001 f894 	bl	8012838 <vPortExitCritical>
}
 8011710:	4620      	mov	r0, r4
 8011712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011716:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d1a9      	bne.n	8011672 <xTaskResumeAll.part.0+0x2e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801171e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	b983      	cbnz	r3, 8011748 <xTaskResumeAll.part.0+0x104>
 8011726:	e7cf      	b.n	80116c8 <xTaskResumeAll.part.0+0x84>
					taskYIELD_IF_USING_PREEMPTION();
 8011728:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801172c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011730:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801173c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 801173e:	f001 f87b 	bl	8012838 <vPortExitCritical>
}
 8011742:	4620      	mov	r0, r4
 8011744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011748:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 801174c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801174e:	68db      	ldr	r3, [r3, #12]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
	}
}
 8011756:	e7bb      	b.n	80116d0 <xTaskResumeAll.part.0+0x8c>
 8011758:	20003278 	.word	0x20003278

0801175c <xTaskCreate>:
	{
 801175c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011760:	0096      	lsls	r6, r2, #2
	{
 8011762:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011764:	4630      	mov	r0, r6
	{
 8011766:	460d      	mov	r5, r1
 8011768:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801176a:	f000 fed5 	bl	8012518 <pvPortMalloc>
			if( pxStack != NULL )
 801176e:	2800      	cmp	r0, #0
 8011770:	f000 80b7 	beq.w	80118e2 <xTaskCreate+0x186>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011774:	4607      	mov	r7, r0
 8011776:	205c      	movs	r0, #92	@ 0x5c
 8011778:	f000 fece 	bl	8012518 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801177c:	4604      	mov	r4, r0
 801177e:	2800      	cmp	r0, #0
 8011780:	f000 80ac 	beq.w	80118dc <xTaskCreate+0x180>
					pxNewTCB->pxStack = pxStack;
 8011784:	6307      	str	r7, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011786:	4632      	mov	r2, r6
 8011788:	4638      	mov	r0, r7
 801178a:	21a5      	movs	r1, #165	@ 0xa5
 801178c:	f001 fee9 	bl	8013562 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011790:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8011792:	3e04      	subs	r6, #4
 8011794:	4437      	add	r7, r6
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011796:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 801179a:	2d00      	cmp	r5, #0
 801179c:	f000 80b6 	beq.w	801190c <xTaskCreate+0x1b0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117a0:	782b      	ldrb	r3, [r5, #0]
 80117a2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d036      	beq.n	8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117aa:	786b      	ldrb	r3, [r5, #1]
 80117ac:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80117b0:	b393      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117b2:	78ab      	ldrb	r3, [r5, #2]
 80117b4:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80117b8:	b373      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117ba:	78eb      	ldrb	r3, [r5, #3]
 80117bc:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80117c0:	b353      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117c2:	792b      	ldrb	r3, [r5, #4]
 80117c4:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80117c8:	b333      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117ca:	796b      	ldrb	r3, [r5, #5]
 80117cc:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80117d0:	b313      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117d2:	79ab      	ldrb	r3, [r5, #6]
 80117d4:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80117d8:	b1f3      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117da:	79eb      	ldrb	r3, [r5, #7]
 80117dc:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80117e0:	b1d3      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117e2:	7a2b      	ldrb	r3, [r5, #8]
 80117e4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80117e8:	b1b3      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117ea:	7a6b      	ldrb	r3, [r5, #9]
 80117ec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80117f0:	b193      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117f2:	7aab      	ldrb	r3, [r5, #10]
 80117f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80117f8:	b173      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117fa:	7aeb      	ldrb	r3, [r5, #11]
 80117fc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8011800:	b153      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011802:	7b2b      	ldrb	r3, [r5, #12]
 8011804:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8011808:	b133      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801180a:	7b6b      	ldrb	r3, [r5, #13]
 801180c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8011810:	b113      	cbz	r3, 8011818 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011812:	7bab      	ldrb	r3, [r5, #14]
 8011814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011818:	2300      	movs	r3, #0
 801181a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801181e:	9d08      	ldr	r5, [sp, #32]
 8011820:	2d06      	cmp	r5, #6
 8011822:	bf28      	it	cs
 8011824:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8011826:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801182a:	1d26      	adds	r6, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 801182c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801182e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011830:	4630      	mov	r0, r6
		pxNewTCB->uxMutexesHeld = 0;
 8011832:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011836:	f7fe ff2b 	bl	8010690 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801183a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801183e:	f104 0018 	add.w	r0, r4, #24
 8011842:	f7fe ff25 	bl	8010690 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8011846:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801184a:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801184c:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011850:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011852:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011854:	464a      	mov	r2, r9
 8011856:	4641      	mov	r1, r8
 8011858:	4638      	mov	r0, r7
 801185a:	f000 ffa3 	bl	80127a4 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 801185e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011860:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8011862:	b103      	cbz	r3, 8011866 <xTaskCreate+0x10a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011864:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 8011866:	4d3f      	ldr	r5, [pc, #252]	@ (8011964 <xTaskCreate+0x208>)
	taskENTER_CRITICAL();
 8011868:	f000 ffc4 	bl	80127f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 801186c:	69ab      	ldr	r3, [r5, #24]
 801186e:	3301      	adds	r3, #1
 8011870:	61ab      	str	r3, [r5, #24]
		if( pxCurrentTCB == NULL )
 8011872:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011876:	2b00      	cmp	r3, #0
 8011878:	d03f      	beq.n	80118fa <xTaskCreate+0x19e>
			if( xSchedulerRunning == pdFALSE )
 801187a:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801187e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8011880:	b39b      	cbz	r3, 80118ea <xTaskCreate+0x18e>
 8011882:	f105 071c 	add.w	r7, r5, #28
		uxTaskNumber++;
 8011886:	f8d5 3124 	ldr.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 801188a:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
		uxTaskNumber++;
 801188e:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011890:	6463      	str	r3, [r4, #68]	@ 0x44
		uxTaskNumber++;
 8011892:	f8c5 3124 	str.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 8011896:	2301      	movs	r3, #1
 8011898:	4083      	lsls	r3, r0
 801189a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801189e:	4313      	orrs	r3, r2
 80118a0:	4631      	mov	r1, r6
 80118a2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80118a6:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 80118aa:	f7fe fef5 	bl	8010698 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80118ae:	f000 ffc3 	bl	8012838 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80118b2:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
 80118b6:	b17b      	cbz	r3, 80118d8 <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80118b8:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 80118bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80118be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d209      	bcs.n	80118d8 <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 80118c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80118c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80118d0:	f3bf 8f4f 	dsb	sy
 80118d4:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80118d8:	2001      	movs	r0, #1
		return xReturn;
 80118da:	e004      	b.n	80118e6 <xTaskCreate+0x18a>
					vPortFree( pxStack );
 80118dc:	4638      	mov	r0, r7
 80118de:	f000 fec7 	bl	8012670 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80118e2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80118e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118ea:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80118ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118f0:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 80118f2:	bf98      	it	ls
 80118f4:	f8c5 40ac 	strls.w	r4, [r5, #172]	@ 0xac
 80118f8:	e7c3      	b.n	8011882 <xTaskCreate+0x126>
			pxCurrentTCB = pxNewTCB;
 80118fa:	f8c5 40ac 	str.w	r4, [r5, #172]	@ 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118fe:	69ab      	ldr	r3, [r5, #24]
 8011900:	2b01      	cmp	r3, #1
 8011902:	d006      	beq.n	8011912 <xTaskCreate+0x1b6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011904:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011906:	f105 071c 	add.w	r7, r5, #28
 801190a:	e7bc      	b.n	8011886 <xTaskCreate+0x12a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801190c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8011910:	e785      	b.n	801181e <xTaskCreate+0xc2>
 8011912:	f105 071c 	add.w	r7, r5, #28
 8011916:	46b8      	mov	r8, r7
 8011918:	f105 09a8 	add.w	r9, r5, #168	@ 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801191c:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801191e:	f108 0814 	add.w	r8, r8, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011922:	f7fe fea9 	bl	8010678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011926:	45c8      	cmp	r8, r9
 8011928:	d1f8      	bne.n	801191c <xTaskCreate+0x1c0>
	vListInitialise( &xDelayedTaskList1 );
 801192a:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8011968 <xTaskCreate+0x20c>
 801192e:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 8011930:	f108 0914 	add.w	r9, r8, #20
	vListInitialise( &xDelayedTaskList1 );
 8011934:	f7fe fea0 	bl	8010678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011938:	4648      	mov	r0, r9
 801193a:	f7fe fe9d 	bl	8010678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801193e:	f1a8 0018 	sub.w	r0, r8, #24
 8011942:	f7fe fe99 	bl	8010678 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8011946:	f1a8 00f4 	sub.w	r0, r8, #244	@ 0xf4
 801194a:	f7fe fe95 	bl	8010678 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801194e:	f1a8 0044 	sub.w	r0, r8, #68	@ 0x44
 8011952:	f7fe fe91 	bl	8010678 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8011956:	f8c5 80cc 	str.w	r8, [r5, #204]	@ 0xcc
		prvAddTaskToReadyList( pxNewTCB );
 801195a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801195c:	f8c5 90c8 	str.w	r9, [r5, #200]	@ 0xc8
}
 8011960:	e791      	b.n	8011886 <xTaskCreate+0x12a>
 8011962:	bf00      	nop
 8011964:	20003278 	.word	0x20003278
 8011968:	20003370 	.word	0x20003370

0801196c <vTaskStartScheduler>:
{
 801196c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011970:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011974:	f000 fdd0 	bl	8012518 <pvPortMalloc>
			if( pxStack != NULL )
 8011978:	2800      	cmp	r0, #0
 801197a:	d078      	beq.n	8011a6e <vTaskStartScheduler+0x102>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801197c:	4605      	mov	r5, r0
 801197e:	205c      	movs	r0, #92	@ 0x5c
 8011980:	f000 fdca 	bl	8012518 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011984:	4604      	mov	r4, r0
 8011986:	2800      	cmp	r0, #0
 8011988:	d06e      	beq.n	8011a68 <vTaskStartScheduler+0xfc>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801198a:	21a5      	movs	r1, #165	@ 0xa5
					pxNewTCB->pxStack = pxStack;
 801198c:	6305      	str	r5, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801198e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011992:	4628      	mov	r0, r5
 8011994:	f001 fde5 	bl	8013562 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011998:	6b23      	ldr	r3, [r4, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801199a:	4a60      	ldr	r2, [pc, #384]	@ (8011b1c <vTaskStartScheduler+0x1b0>)
 801199c:	6362      	str	r2, [r4, #52]	@ 0x34
 801199e:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119a0:	1d27      	adds	r7, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80119a2:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
		pxNewTCB->uxMutexesHeld = 0;
 80119a6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80119aa:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80119ae:	f884 5043 	strb.w	r5, [r4, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 80119b2:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119b4:	4638      	mov	r0, r7
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80119b6:	f023 0607 	bic.w	r6, r3, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119ba:	f7fe fe69 	bl	8010690 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80119be:	f104 0018 	add.w	r0, r4, #24
 80119c2:	f7fe fe65 	bl	8010690 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119c6:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 80119c8:	6565      	str	r5, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119ca:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80119cc:	462a      	mov	r2, r5
 80119ce:	4954      	ldr	r1, [pc, #336]	@ (8011b20 <vTaskStartScheduler+0x1b4>)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80119d0:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80119d4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80119d6:	6264      	str	r4, [r4, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80119d8:	4630      	mov	r0, r6
 80119da:	f000 fee3 	bl	80127a4 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80119de:	4d51      	ldr	r5, [pc, #324]	@ (8011b24 <vTaskStartScheduler+0x1b8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80119e0:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80119e2:	f8c5 4128 	str.w	r4, [r5, #296]	@ 0x128
	taskENTER_CRITICAL();
 80119e6:	f000 ff05 	bl	80127f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80119ea:	69ab      	ldr	r3, [r5, #24]
 80119ec:	3301      	adds	r3, #1
 80119ee:	61ab      	str	r3, [r5, #24]
		if( pxCurrentTCB == NULL )
 80119f0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d04b      	beq.n	8011a90 <vTaskStartScheduler+0x124>
			if( xSchedulerRunning == pdFALSE )
 80119f8:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80119fc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d03e      	beq.n	8011a80 <vTaskStartScheduler+0x114>
 8011a02:	f105 061c 	add.w	r6, r5, #28
		uxTaskNumber++;
 8011a06:	f8d5 3124 	ldr.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 8011a0a:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
		uxTaskNumber++;
 8011a0e:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011a10:	6463      	str	r3, [r4, #68]	@ 0x44
		uxTaskNumber++;
 8011a12:	f8c5 3124 	str.w	r3, [r5, #292]	@ 0x124
		prvAddTaskToReadyList( pxNewTCB );
 8011a16:	2301      	movs	r3, #1
 8011a18:	4083      	lsls	r3, r0
 8011a1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	4639      	mov	r1, r7
 8011a22:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8011a26:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8011a2a:	f7fe fe35 	bl	8010698 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8011a2e:	f000 ff03 	bl	8012838 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8011a32:	f8d5 3120 	ldr.w	r3, [r5, #288]	@ 0x120
 8011a36:	b17b      	cbz	r3, 8011a58 <vTaskStartScheduler+0xec>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011a38:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8011a3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011a3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d209      	bcs.n	8011a58 <vTaskStartScheduler+0xec>
			taskYIELD_IF_USING_PREEMPTION();
 8011a44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011a50:	f3bf 8f4f 	dsb	sy
 8011a54:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
 8011a58:	f000 fc8c 	bl	8012374 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8011a5c:	2801      	cmp	r0, #1
 8011a5e:	d020      	beq.n	8011aa2 <vTaskStartScheduler+0x136>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a60:	3001      	adds	r0, #1
 8011a62:	d004      	beq.n	8011a6e <vTaskStartScheduler+0x102>
}
 8011a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8011a68:	4628      	mov	r0, r5
 8011a6a:	f000 fe01 	bl	8012670 <vPortFree>
 8011a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a72:	f383 8811 	msr	BASEPRI, r3
 8011a76:	f3bf 8f6f 	isb	sy
 8011a7a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a7e:	e7fe      	b.n	8011a7e <vTaskStartScheduler+0x112>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a80:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a86:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8011a88:	bf98      	it	ls
 8011a8a:	f8c5 40ac 	strls.w	r4, [r5, #172]	@ 0xac
 8011a8e:	e7b8      	b.n	8011a02 <vTaskStartScheduler+0x96>
			pxCurrentTCB = pxNewTCB;
 8011a90:	f8c5 40ac 	str.w	r4, [r5, #172]	@ 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011a94:	69ab      	ldr	r3, [r5, #24]
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d018      	beq.n	8011acc <vTaskStartScheduler+0x160>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a9a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011a9c:	f105 061c 	add.w	r6, r5, #28
 8011aa0:	e7b1      	b.n	8011a06 <vTaskStartScheduler+0x9a>
 8011aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aa6:	f383 8811 	msr	BASEPRI, r3
 8011aaa:	f3bf 8f6f 	isb	sy
 8011aae:	f3bf 8f4f 	dsb	sy
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011ab2:	2300      	movs	r3, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 8011ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ab8:	f8c5 20d0 	str.w	r2, [r5, #208]	@ 0xd0
		xSchedulerRunning = pdTRUE;
 8011abc:	f8c5 0120 	str.w	r0, [r5, #288]	@ 0x120
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011ac0:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
}
 8011ac4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
 8011ac8:	f000 bf26 	b.w	8012918 <xPortStartScheduler>
 8011acc:	f105 061c 	add.w	r6, r5, #28
 8011ad0:	46b0      	mov	r8, r6
 8011ad2:	f105 09a8 	add.w	r9, r5, #168	@ 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ad6:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ad8:	f108 0814 	add.w	r8, r8, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011adc:	f7fe fdcc 	bl	8010678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ae0:	45c8      	cmp	r8, r9
 8011ae2:	d1f8      	bne.n	8011ad6 <vTaskStartScheduler+0x16a>
	vListInitialise( &xDelayedTaskList1 );
 8011ae4:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8011b28 <vTaskStartScheduler+0x1bc>
 8011ae8:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 8011aea:	f108 0914 	add.w	r9, r8, #20
	vListInitialise( &xDelayedTaskList1 );
 8011aee:	f7fe fdc3 	bl	8010678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011af2:	4648      	mov	r0, r9
 8011af4:	f7fe fdc0 	bl	8010678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011af8:	f1a8 0018 	sub.w	r0, r8, #24
 8011afc:	f7fe fdbc 	bl	8010678 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8011b00:	f1a8 00f4 	sub.w	r0, r8, #244	@ 0xf4
 8011b04:	f7fe fdb8 	bl	8010678 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8011b08:	f1a8 0044 	sub.w	r0, r8, #68	@ 0x44
 8011b0c:	f7fe fdb4 	bl	8010678 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8011b10:	f8c5 80cc 	str.w	r8, [r5, #204]	@ 0xcc
		prvAddTaskToReadyList( pxNewTCB );
 8011b14:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011b16:	f8c5 90c8 	str.w	r9, [r5, #200]	@ 0xc8
}
 8011b1a:	e774      	b.n	8011a06 <vTaskStartScheduler+0x9a>
 8011b1c:	454c4449 	.word	0x454c4449
 8011b20:	080114c5 	.word	0x080114c5
 8011b24:	20003278 	.word	0x20003278
 8011b28:	20003370 	.word	0x20003370

08011b2c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011b2c:	4a03      	ldr	r2, [pc, #12]	@ (8011b3c <vTaskSuspendAll+0x10>)
 8011b2e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8011b32:	3301      	adds	r3, #1
 8011b34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
}
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	20003278 	.word	0x20003278

08011b40 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8011b40:	4b07      	ldr	r3, [pc, #28]	@ (8011b60 <xTaskResumeAll+0x20>)
 8011b42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8011b46:	b943      	cbnz	r3, 8011b5a <xTaskResumeAll+0x1a>
 8011b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b4c:	f383 8811 	msr	BASEPRI, r3
 8011b50:	f3bf 8f6f 	isb	sy
 8011b54:	f3bf 8f4f 	dsb	sy
 8011b58:	e7fe      	b.n	8011b58 <xTaskResumeAll+0x18>
 8011b5a:	f7ff bd73 	b.w	8011644 <xTaskResumeAll.part.0>
 8011b5e:	bf00      	nop
 8011b60:	20003278 	.word	0x20003278

08011b64 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011b64:	4b01      	ldr	r3, [pc, #4]	@ (8011b6c <xTaskGetTickCount+0x8>)
 8011b66:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
}
 8011b6a:	4770      	bx	lr
 8011b6c:	20003278 	.word	0x20003278

08011b70 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b70:	4b06      	ldr	r3, [pc, #24]	@ (8011b8c <xTaskIncrementTick+0x1c>)
 8011b72:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8011b76:	b90a      	cbnz	r2, 8011b7c <xTaskIncrementTick+0xc>
 8011b78:	f7ff bcd0 	b.w	801151c <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8011b7c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8011b80:	3201      	adds	r2, #1
}
 8011b82:	2000      	movs	r0, #0
		++xPendedTicks;
 8011b84:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 8011b88:	4770      	bx	lr
 8011b8a:	bf00      	nop
 8011b8c:	20003278 	.word	0x20003278

08011b90 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b90:	4a16      	ldr	r2, [pc, #88]	@ (8011bec <vTaskSwitchContext+0x5c>)
 8011b92:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8011b96:	b11b      	cbz	r3, 8011ba0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011b9e:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8011ba0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ba4:	f8d2 30b0 	ldr.w	r3, [r2, #176]	@ 0xb0
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011ba8:	fab3 f383 	clz	r3, r3
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	f1c3 031f 	rsb	r3, r3, #31
 8011bb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011bb6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	69c8      	ldr	r0, [r1, #28]
 8011bbe:	b940      	cbnz	r0, 8011bd2 <vTaskSwitchContext+0x42>
	__asm volatile
 8011bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bc4:	f383 8811 	msr	BASEPRI, r3
 8011bc8:	f3bf 8f6f 	isb	sy
 8011bcc:	f3bf 8f4f 	dsb	sy
 8011bd0:	e7fe      	b.n	8011bd0 <vTaskSwitchContext+0x40>
 8011bd2:	6a08      	ldr	r0, [r1, #32]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	6840      	ldr	r0, [r0, #4]
 8011bd8:	6208      	str	r0, [r1, #32]
 8011bda:	3324      	adds	r3, #36	@ 0x24
 8011bdc:	4298      	cmp	r0, r3
 8011bde:	bf04      	itt	eq
 8011be0:	6840      	ldreq	r0, [r0, #4]
 8011be2:	6208      	streq	r0, [r1, #32]
 8011be4:	68c3      	ldr	r3, [r0, #12]
 8011be6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
}
 8011bea:	4770      	bx	lr
 8011bec:	20003278 	.word	0x20003278

08011bf0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8011bf0:	b350      	cbz	r0, 8011c48 <vTaskPlaceOnEventList+0x58>
{
 8011bf2:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011bf4:	4d24      	ldr	r5, [pc, #144]	@ (8011c88 <vTaskPlaceOnEventList+0x98>)
 8011bf6:	460c      	mov	r4, r1
 8011bf8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011bfc:	3118      	adds	r1, #24
 8011bfe:	f7fe fd59 	bl	80106b4 <vListInsert>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c02:	f8d5 60a8 	ldr.w	r6, [r5, #168]	@ 0xa8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c06:	f8d5 00ac 	ldr.w	r0, [r5, #172]	@ 0xac
 8011c0a:	3004      	adds	r0, #4
 8011c0c:	f7fe fd6a 	bl	80106e4 <uxListRemove>
 8011c10:	b950      	cbnz	r0, 8011c28 <vTaskPlaceOnEventList+0x38>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011c12:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8011c16:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8011c1a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	408a      	lsls	r2, r1
 8011c20:	ea23 0302 	bic.w	r3, r3, r2
 8011c24:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c28:	1c63      	adds	r3, r4, #1
 8011c2a:	d016      	beq.n	8011c5a <vTaskPlaceOnEventList+0x6a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c2c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011c30:	19a4      	adds	r4, r4, r6
 8011c32:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8011c34:	d319      	bcc.n	8011c6a <vTaskPlaceOnEventList+0x7a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c36:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 8011c3a:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
}
 8011c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c42:	3104      	adds	r1, #4
 8011c44:	f7fe bd36 	b.w	80106b4 <vListInsert>
 8011c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c4c:	f383 8811 	msr	BASEPRI, r3
 8011c50:	f3bf 8f6f 	isb	sy
 8011c54:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8011c58:	e7fe      	b.n	8011c58 <vTaskPlaceOnEventList+0x68>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c5a:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011c5e:	480b      	ldr	r0, [pc, #44]	@ (8011c8c <vTaskPlaceOnEventList+0x9c>)
}
 8011c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c64:	3104      	adds	r1, #4
 8011c66:	f7fe bd17 	b.w	8010698 <vListInsertEnd>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c6a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	@ 0xcc
 8011c6e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011c72:	3104      	adds	r1, #4
 8011c74:	f7fe fd1e 	bl	80106b4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c78:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8011c7c:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
 8011c7e:	bf38      	it	cc
 8011c80:	f8c5 40d0 	strcc.w	r4, [r5, #208]	@ 0xd0
}
 8011c84:	bd70      	pop	{r4, r5, r6, pc}
 8011c86:	bf00      	nop
 8011c88:	20003278 	.word	0x20003278
 8011c8c:	2000332c 	.word	0x2000332c

08011c90 <vTaskPlaceOnEventListRestricted>:
	{
 8011c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8011c92:	b398      	cbz	r0, 8011cfc <vTaskPlaceOnEventListRestricted+0x6c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c94:	4d2a      	ldr	r5, [pc, #168]	@ (8011d40 <vTaskPlaceOnEventListRestricted+0xb0>)
 8011c96:	460c      	mov	r4, r1
 8011c98:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011c9c:	3118      	adds	r1, #24
 8011c9e:	4616      	mov	r6, r2
 8011ca0:	f7fe fcfa 	bl	8010698 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8011ca4:	f8d5 70a8 	ldr.w	r7, [r5, #168]	@ 0xa8
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ca8:	f8d5 00ac 	ldr.w	r0, [r5, #172]	@ 0xac
 8011cac:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 8011cae:	b306      	cbz	r6, 8011cf2 <vTaskPlaceOnEventListRestricted+0x62>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cb0:	f7fe fd18 	bl	80106e4 <uxListRemove>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d13a      	bne.n	8011d2e <vTaskPlaceOnEventListRestricted+0x9e>
			xTicksToWait = portMAX_DELAY;
 8011cb8:	f04f 34ff 	mov.w	r4, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011cbc:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011cc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011cc2:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	408a      	lsls	r2, r1
 8011cca:	ea23 0302 	bic.w	r3, r3, r2
 8011cce:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011cd2:	1c63      	adds	r3, r4, #1
 8011cd4:	d029      	beq.n	8011d2a <vTaskPlaceOnEventListRestricted+0x9a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011cd6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011cda:	19e4      	adds	r4, r4, r7
 8011cdc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011cde:	d316      	bcc.n	8011d0e <vTaskPlaceOnEventListRestricted+0x7e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ce0:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 8011ce4:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
	}
 8011ce8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cec:	3104      	adds	r1, #4
 8011cee:	f7fe bce1 	b.w	80106b4 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cf2:	f7fe fcf7 	bl	80106e4 <uxListRemove>
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	d1ed      	bne.n	8011cd6 <vTaskPlaceOnEventListRestricted+0x46>
 8011cfa:	e7df      	b.n	8011cbc <vTaskPlaceOnEventListRestricted+0x2c>
 8011cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d00:	f383 8811 	msr	BASEPRI, r3
 8011d04:	f3bf 8f6f 	isb	sy
 8011d08:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8011d0c:	e7fe      	b.n	8011d0c <vTaskPlaceOnEventListRestricted+0x7c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d0e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	@ 0xcc
 8011d12:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011d16:	3104      	adds	r1, #4
 8011d18:	f7fe fccc 	bl	80106b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011d1c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8011d20:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
 8011d22:	bf38      	it	cc
 8011d24:	f8c5 40d0 	strcc.w	r4, [r5, #208]	@ 0xd0
	}
 8011d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d2a:	2e00      	cmp	r6, #0
 8011d2c:	d0d3      	beq.n	8011cd6 <vTaskPlaceOnEventListRestricted+0x46>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d2e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8011d32:	4804      	ldr	r0, [pc, #16]	@ (8011d44 <vTaskPlaceOnEventListRestricted+0xb4>)
	}
 8011d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d38:	3104      	adds	r1, #4
 8011d3a:	f7fe bcad 	b.w	8010698 <vListInsertEnd>
 8011d3e:	bf00      	nop
 8011d40:	20003278 	.word	0x20003278
 8011d44:	2000332c 	.word	0x2000332c

08011d48 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d48:	68c3      	ldr	r3, [r0, #12]
{
 8011d4a:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d4c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011d4e:	b374      	cbz	r4, 8011dae <xTaskRemoveFromEventList+0x66>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d50:	4d1b      	ldr	r5, [pc, #108]	@ (8011dc0 <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011d52:	f104 0618 	add.w	r6, r4, #24
 8011d56:	4630      	mov	r0, r6
 8011d58:	f7fe fcc4 	bl	80106e4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d5c:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8011d60:	b17b      	cbz	r3, 8011d82 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011d62:	4631      	mov	r1, r6
 8011d64:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8011d68:	f7fe fc96 	bl	8010698 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d6c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011d70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d74:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8011d76:	bf86      	itte	hi
 8011d78:	2001      	movhi	r0, #1
 8011d7a:	f8c5 00d8 	strhi.w	r0, [r5, #216]	@ 0xd8
		xReturn = pdFALSE;
 8011d7e:	2000      	movls	r0, #0
}
 8011d80:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d82:	1d26      	adds	r6, r4, #4
 8011d84:	4630      	mov	r0, r6
 8011d86:	f7fe fcad 	bl	80106e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011d8a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011d8c:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 8011d90:	2301      	movs	r3, #1
 8011d92:	4083      	lsls	r3, r0
 8011d94:	4313      	orrs	r3, r2
 8011d96:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8011d9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011d9e:	f105 031c 	add.w	r3, r5, #28
 8011da2:	4631      	mov	r1, r6
 8011da4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011da8:	f7fe fc76 	bl	8010698 <vListInsertEnd>
 8011dac:	e7de      	b.n	8011d6c <xTaskRemoveFromEventList+0x24>
 8011dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011db2:	f383 8811 	msr	BASEPRI, r3
 8011db6:	f3bf 8f6f 	isb	sy
 8011dba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8011dbe:	e7fe      	b.n	8011dbe <xTaskRemoveFromEventList+0x76>
 8011dc0:	20003278 	.word	0x20003278

08011dc4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011dc4:	4b03      	ldr	r3, [pc, #12]	@ (8011dd4 <vTaskInternalSetTimeOutState+0x10>)
 8011dc6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011dca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011dce:	e9c0 2300 	strd	r2, r3, [r0]
}
 8011dd2:	4770      	bx	lr
 8011dd4:	20003278 	.word	0x20003278

08011dd8 <xTaskCheckForTimeOut>:
{
 8011dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8011dda:	b300      	cbz	r0, 8011e1e <xTaskCheckForTimeOut+0x46>
	configASSERT( pxTicksToWait );
 8011ddc:	460d      	mov	r5, r1
 8011dde:	b1a9      	cbz	r1, 8011e0c <xTaskCheckForTimeOut+0x34>
 8011de0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8011de2:	f000 fd07 	bl	80127f4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8011de6:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8011de8:	4a1a      	ldr	r2, [pc, #104]	@ (8011e54 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8011dea:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8011dec:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
			if( *pxTicksToWait == portMAX_DELAY )
 8011df0:	d02b      	beq.n	8011e4a <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011df2:	e9d4 7000 	ldrd	r7, r0, [r4]
 8011df6:	f8d2 60d4 	ldr.w	r6, [r2, #212]	@ 0xd4
 8011dfa:	42b7      	cmp	r7, r6
 8011dfc:	d018      	beq.n	8011e30 <xTaskCheckForTimeOut+0x58>
 8011dfe:	4288      	cmp	r0, r1
 8011e00:	d816      	bhi.n	8011e30 <xTaskCheckForTimeOut+0x58>
			xReturn = pdTRUE;
 8011e02:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8011e04:	f000 fd18 	bl	8012838 <vPortExitCritical>
}
 8011e08:	4620      	mov	r0, r4
 8011e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e10:	f383 8811 	msr	BASEPRI, r3
 8011e14:	f3bf 8f6f 	isb	sy
 8011e18:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8011e1c:	e7fe      	b.n	8011e1c <xTaskCheckForTimeOut+0x44>
 8011e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e22:	f383 8811 	msr	BASEPRI, r3
 8011e26:	f3bf 8f6f 	isb	sy
 8011e2a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8011e2e:	e7fe      	b.n	8011e2e <xTaskCheckForTimeOut+0x56>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e30:	eba1 0c00 	sub.w	ip, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011e34:	4563      	cmp	r3, ip
 8011e36:	d90a      	bls.n	8011e4e <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8011e38:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e3a:	f8d2 10d4 	ldr.w	r1, [r2, #212]	@ 0xd4
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e3e:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
			*pxTicksToWait -= xElapsedTime;
 8011e42:	4403      	add	r3, r0
 8011e44:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e46:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8011e4a:	2400      	movs	r4, #0
 8011e4c:	e7da      	b.n	8011e04 <xTaskCheckForTimeOut+0x2c>
			*pxTicksToWait = 0;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8011e52:	e7d6      	b.n	8011e02 <xTaskCheckForTimeOut+0x2a>
 8011e54:	20003278 	.word	0x20003278

08011e58 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011e58:	4b02      	ldr	r3, [pc, #8]	@ (8011e64 <vTaskMissedYield+0xc>)
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8011e60:	4770      	bx	lr
 8011e62:	bf00      	nop
 8011e64:	20003278 	.word	0x20003278

08011e68 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011e68:	4b06      	ldr	r3, [pc, #24]	@ (8011e84 <xTaskGetSchedulerState+0x1c>)
 8011e6a:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8011e6e:	b132      	cbz	r2, 8011e7e <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e70:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8011e74:	fab0 f080 	clz	r0, r0
 8011e78:	0940      	lsrs	r0, r0, #5
 8011e7a:	0040      	lsls	r0, r0, #1
 8011e7c:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e7e:	2001      	movs	r0, #1
	}
 8011e80:	4770      	bx	lr
 8011e82:	bf00      	nop
 8011e84:	20003278 	.word	0x20003278

08011e88 <xTaskPriorityInherit>:
	{
 8011e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	b1e0      	cbz	r0, 8011ec8 <xTaskPriorityInherit+0x40>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011e8e:	4d24      	ldr	r5, [pc, #144]	@ (8011f20 <xTaskPriorityInherit+0x98>)
 8011e90:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011e92:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8011e96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d216      	bcs.n	8011eca <xTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e9c:	6982      	ldr	r2, [r0, #24]
 8011e9e:	2a00      	cmp	r2, #0
 8011ea0:	db05      	blt.n	8011eae <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ea2:	f8d5 20ac 	ldr.w	r2, [r5, #172]	@ 0xac
 8011ea6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011ea8:	f1c2 0207 	rsb	r2, r2, #7
 8011eac:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011eae:	4e1d      	ldr	r6, [pc, #116]	@ (8011f24 <xTaskPriorityInherit+0x9c>)
 8011eb0:	6962      	ldr	r2, [r4, #20]
 8011eb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011eb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d00e      	beq.n	8011edc <xTaskPriorityInherit+0x54>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ebe:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ec4:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8011ec6:	2001      	movs	r0, #1
	}
 8011ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011eca:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011ece:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8011ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ed2:	4298      	cmp	r0, r3
 8011ed4:	bf2c      	ite	cs
 8011ed6:	2000      	movcs	r0, #0
 8011ed8:	2001      	movcc	r0, #1
	}
 8011eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011edc:	1d27      	adds	r7, r4, #4
 8011ede:	4638      	mov	r0, r7
 8011ee0:	f7fe fc00 	bl	80106e4 <uxListRemove>
 8011ee4:	b940      	cbnz	r0, 8011ef8 <xTaskPriorityInherit+0x70>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011ee6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011ee8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8011eec:	2201      	movs	r2, #1
 8011eee:	408a      	lsls	r2, r1
 8011ef0:	ea23 0302 	bic.w	r3, r3, r2
 8011ef4:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ef8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011efc:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f00:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011f02:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011f04:	2301      	movs	r3, #1
 8011f06:	4083      	lsls	r3, r0
 8011f08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011f0c:	4313      	orrs	r3, r2
 8011f0e:	4639      	mov	r1, r7
 8011f10:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8011f14:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
 8011f18:	f7fe fbbe 	bl	8010698 <vListInsertEnd>
 8011f1c:	e7d3      	b.n	8011ec6 <xTaskPriorityInherit+0x3e>
 8011f1e:	bf00      	nop
 8011f20:	20003278 	.word	0x20003278
 8011f24:	20003294 	.word	0x20003294

08011f28 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8011f28:	b318      	cbz	r0, 8011f72 <xTaskPriorityDisinherit+0x4a>
	{
 8011f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8011f2c:	4d27      	ldr	r5, [pc, #156]	@ (8011fcc <xTaskPriorityDisinherit+0xa4>)
 8011f2e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8011f32:	4283      	cmp	r3, r0
 8011f34:	4604      	mov	r4, r0
 8011f36:	d008      	beq.n	8011f4a <xTaskPriorityDisinherit+0x22>
 8011f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f3c:	f383 8811 	msr	BASEPRI, r3
 8011f40:	f3bf 8f6f 	isb	sy
 8011f44:	f3bf 8f4f 	dsb	sy
 8011f48:	e7fe      	b.n	8011f48 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8011f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f4c:	b143      	cbz	r3, 8011f60 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f4e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011f50:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8011f52:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f54:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8011f56:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f58:	d000      	beq.n	8011f5c <xTaskPriorityDisinherit+0x34>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011f5a:	b163      	cbz	r3, 8011f76 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8011f5c:	2000      	movs	r0, #0
	}
 8011f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f64:	f383 8811 	msr	BASEPRI, r3
 8011f68:	f3bf 8f6f 	isb	sy
 8011f6c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8011f70:	e7fe      	b.n	8011f70 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8011f72:	2000      	movs	r0, #0
	}
 8011f74:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f76:	1d07      	adds	r7, r0, #4
 8011f78:	4638      	mov	r0, r7
 8011f7a:	f7fe fbb3 	bl	80106e4 <uxListRemove>
 8011f7e:	b970      	cbnz	r0, 8011f9e <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011f80:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011f82:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011f86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011f8a:	69db      	ldr	r3, [r3, #28]
 8011f8c:	b93b      	cbnz	r3, 8011f9e <xTaskPriorityDisinherit+0x76>
 8011f8e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8011f92:	2201      	movs	r2, #1
 8011f94:	4082      	lsls	r2, r0
 8011f96:	ea23 0302 	bic.w	r3, r3, r2
 8011f9a:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f9e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8011fa0:	f8d5 60b0 	ldr.w	r6, [r5, #176]	@ 0xb0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011fa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fa6:	f1c3 0207 	rsb	r2, r3, #7
 8011faa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8011fac:	4808      	ldr	r0, [pc, #32]	@ (8011fd0 <xTaskPriorityDisinherit+0xa8>)
 8011fae:	2401      	movs	r4, #1
 8011fb0:	fa04 f203 	lsl.w	r2, r4, r3
 8011fb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011fb8:	4332      	orrs	r2, r6
 8011fba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011fbe:	4639      	mov	r1, r7
 8011fc0:	f8c5 20b0 	str.w	r2, [r5, #176]	@ 0xb0
 8011fc4:	f7fe fb68 	bl	8010698 <vListInsertEnd>
					xReturn = pdTRUE;
 8011fc8:	4620      	mov	r0, r4
	}
 8011fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fcc:	20003278 	.word	0x20003278
 8011fd0:	20003294 	.word	0x20003294

08011fd4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	d041      	beq.n	801205c <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 8011fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 8011fda:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8011fdc:	4604      	mov	r4, r0
 8011fde:	b14b      	cbz	r3, 8011ff4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011fe0:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011fe2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011fe4:	4281      	cmp	r1, r0
 8011fe6:	bf38      	it	cc
 8011fe8:	4601      	movcc	r1, r0
 8011fea:	428a      	cmp	r2, r1
 8011fec:	d001      	beq.n	8011ff2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d009      	beq.n	8012006 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8011ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ff8:	f383 8811 	msr	BASEPRI, r3
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8012004:	e7fe      	b.n	8012004 <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 8012006:	4d1f      	ldr	r5, [pc, #124]	@ (8012084 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8012008:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 801200c:	42a3      	cmp	r3, r4
 801200e:	d026      	beq.n	801205e <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012010:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8012012:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012014:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012016:	bfa8      	it	ge
 8012018:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801201c:	4e1a      	ldr	r6, [pc, #104]	@ (8012088 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801201e:	bfa8      	it	ge
 8012020:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012022:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012026:	6961      	ldr	r1, [r4, #20]
 8012028:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 801202c:	4299      	cmp	r1, r3
 801202e:	d1e0      	bne.n	8011ff2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012030:	1d27      	adds	r7, r4, #4
 8012032:	4638      	mov	r0, r7
 8012034:	f7fe fb56 	bl	80106e4 <uxListRemove>
 8012038:	b1d0      	cbz	r0, 8012070 <vTaskPriorityDisinheritAfterTimeout+0x9c>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801203a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
						prvAddTaskToReadyList( pxTCB );
 801203c:	2301      	movs	r3, #1
 801203e:	4083      	lsls	r3, r0
 8012040:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 8012044:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012048:	4313      	orrs	r3, r2
 801204a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801204e:	4639      	mov	r1, r7
 8012050:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
	}
 8012054:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8012058:	f7fe bb1e 	b.w	8010698 <vListInsertEnd>
 801205c:	4770      	bx	lr
 801205e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801206e:	e7fe      	b.n	801206e <vTaskPriorityDisinheritAfterTimeout+0x9a>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012070:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012072:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 8012076:	2301      	movs	r3, #1
 8012078:	4083      	lsls	r3, r0
 801207a:	ea22 0203 	bic.w	r2, r2, r3
 801207e:	f8c5 20b0 	str.w	r2, [r5, #176]	@ 0xb0
 8012082:	e7dd      	b.n	8012040 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8012084:	20003278 	.word	0x20003278
 8012088:	20003294 	.word	0x20003294

0801208c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801208c:	4b05      	ldr	r3, [pc, #20]	@ (80120a4 <pvTaskIncrementMutexHeldCount+0x18>)
 801208e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8012092:	b122      	cbz	r2, 801209e <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
 8012094:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
 8012098:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 801209a:	3201      	adds	r2, #1
 801209c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 801209e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
	}
 80120a2:	4770      	bx	lr
 80120a4:	20003278 	.word	0x20003278

080120a8 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80120a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120aa:	4e1f      	ldr	r6, [pc, #124]	@ (8012128 <prvSwitchTimerLists+0x80>)
 80120ac:	b085      	sub	sp, #20

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120ae:	e00d      	b.n	80120cc <prvSwitchTimerLists+0x24>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80120b0:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120b2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80120b4:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80120b6:	1d25      	adds	r5, r4, #4
 80120b8:	4628      	mov	r0, r5
 80120ba:	f7fe fb13 	bl	80106e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80120be:	6a23      	ldr	r3, [r4, #32]
 80120c0:	4620      	mov	r0, r4
 80120c2:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120c4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80120c8:	075b      	lsls	r3, r3, #29
 80120ca:	d408      	bmi.n	80120de <prvSwitchTimerLists+0x36>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120cc:	6833      	ldr	r3, [r6, #0]
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	2a00      	cmp	r2, #0
 80120d2:	d1ed      	bne.n	80120b0 <prvSwitchTimerLists+0x8>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80120d4:	68b2      	ldr	r2, [r6, #8]
 80120d6:	6032      	str	r2, [r6, #0]
	pxOverflowTimerList = pxTemp;
 80120d8:	60b3      	str	r3, [r6, #8]
}
 80120da:	b005      	add	sp, #20
 80120dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80120de:	69a3      	ldr	r3, [r4, #24]
 80120e0:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80120e2:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80120e4:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 80120e6:	d205      	bcs.n	80120f4 <prvSwitchTimerLists+0x4c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80120e8:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80120ea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80120ec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80120ee:	f7fe fae1 	bl	80106b4 <vListInsert>
 80120f2:	e7eb      	b.n	80120cc <prvSwitchTimerLists+0x24>
	if( xTimerQueue != NULL )
 80120f4:	6873      	ldr	r3, [r6, #4]
		xMessage.xMessageID = xCommandID;
 80120f6:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
 80120f8:	b163      	cbz	r3, 8012114 <prvSwitchTimerLists+0x6c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80120fa:	e9cd 5701 	strd	r5, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80120fe:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012100:	f7ff feb2 	bl	8011e68 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012104:	6870      	ldr	r0, [r6, #4]
 8012106:	462b      	mov	r3, r5
 8012108:	462a      	mov	r2, r5
 801210a:	a901      	add	r1, sp, #4
 801210c:	f7fe fbbc 	bl	8010888 <xQueueGenericSend>
				configASSERT( xResult );
 8012110:	2800      	cmp	r0, #0
 8012112:	d1db      	bne.n	80120cc <prvSwitchTimerLists+0x24>
 8012114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012118:	f383 8811 	msr	BASEPRI, r3
 801211c:	f3bf 8f6f 	isb	sy
 8012120:	f3bf 8f4f 	dsb	sy
 8012124:	e7fe      	b.n	8012124 <prvSwitchTimerLists+0x7c>
 8012126:	bf00      	nop
 8012128:	200033a4 	.word	0x200033a4

0801212c <prvTimerTask>:
{
 801212c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012130:	4c8f      	ldr	r4, [pc, #572]	@ (8012370 <prvTimerTask+0x244>)
 8012132:	b086      	sub	sp, #24
					portYIELD_WITHIN_API();
 8012134:	f04f 27e0 	mov.w	r7, #3758153728	@ 0xe000e000
 8012138:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801213c:	6823      	ldr	r3, [r4, #0]
 801213e:	681e      	ldr	r6, [r3, #0]
 8012140:	2e00      	cmp	r6, #0
 8012142:	f000 809b 	beq.w	801227c <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 801214a:	f7ff fcef 	bl	8011b2c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801214e:	f7ff fd09 	bl	8011b64 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012152:	68e3      	ldr	r3, [r4, #12]
 8012154:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8012156:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8012158:	f200 809f 	bhi.w	801229a <prvTimerTask+0x16e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801215c:	4286      	cmp	r6, r0
	xLastTime = xTimeNow;
 801215e:	60e0      	str	r0, [r4, #12]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012160:	f240 80a4 	bls.w	80122ac <prvTimerTask+0x180>
 8012164:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012166:	6860      	ldr	r0, [r4, #4]
 8012168:	1b71      	subs	r1, r6, r5
 801216a:	f7ff f947 	bl	80113fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801216e:	f7ff fce7 	bl	8011b40 <xTaskResumeAll>
 8012172:	b928      	cbnz	r0, 8012180 <prvTimerTask+0x54>
					portYIELD_WITHIN_API();
 8012174:	f8c7 8d04 	str.w	r8, [r7, #3332]	@ 0xd04
 8012178:	f3bf 8f4f 	dsb	sy
 801217c:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012180:	6860      	ldr	r0, [r4, #4]
 8012182:	2200      	movs	r2, #0
 8012184:	4669      	mov	r1, sp
 8012186:	f7fe fdb7 	bl	8010cf8 <xQueueReceive>
 801218a:	2800      	cmp	r0, #0
 801218c:	d0d6      	beq.n	801213c <prvTimerTask+0x10>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801218e:	9b00      	ldr	r3, [sp, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	dbf5      	blt.n	8012180 <prvTimerTask+0x54>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012194:	9d02      	ldr	r5, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012196:	696b      	ldr	r3, [r5, #20]
 8012198:	b113      	cbz	r3, 80121a0 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801219a:	1d28      	adds	r0, r5, #4
 801219c:	f7fe faa2 	bl	80106e4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80121a0:	f7ff fce0 	bl	8011b64 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80121a4:	68e3      	ldr	r3, [r4, #12]
 80121a6:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80121a8:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 80121aa:	d37c      	bcc.n	80122a6 <prvTimerTask+0x17a>
			switch( xMessage.xMessageID )
 80121ac:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
 80121ae:	60e6      	str	r6, [r4, #12]
			switch( xMessage.xMessageID )
 80121b0:	2b09      	cmp	r3, #9
 80121b2:	d8e5      	bhi.n	8012180 <prvTimerTask+0x54>
 80121b4:	e8df f003 	tbb	[pc, r3]
 80121b8:	52050505 	.word	0x52050505
 80121bc:	0505593c 	.word	0x0505593c
 80121c0:	3c52      	.short	0x3c52
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80121c2:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80121c6:	9b01      	ldr	r3, [sp, #4]
 80121c8:	69a9      	ldr	r1, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80121ca:	612d      	str	r5, [r5, #16]
 80121cc:	1858      	adds	r0, r3, r1
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80121ce:	f042 0201 	orr.w	r2, r2, #1
 80121d2:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80121d6:	bf2c      	ite	cs
 80121d8:	2201      	movcs	r2, #1
 80121da:	2200      	movcc	r2, #0
	if( xNextExpiryTime <= xTimeNow )
 80121dc:	42b0      	cmp	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80121de:	6068      	str	r0, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 80121e0:	d87c      	bhi.n	80122dc <prvTimerTask+0x1b0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121e2:	1af3      	subs	r3, r6, r3
 80121e4:	4299      	cmp	r1, r3
 80121e6:	f200 8094 	bhi.w	8012312 <prvTimerTask+0x1e6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80121ea:	6a2b      	ldr	r3, [r5, #32]
 80121ec:	4628      	mov	r0, r5
 80121ee:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80121f0:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 80121f4:	0759      	lsls	r1, r3, #29
 80121f6:	d5c3      	bpl.n	8012180 <prvTimerTask+0x54>
	if( xTimerQueue != NULL )
 80121f8:	6861      	ldr	r1, [r4, #4]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80121fa:	9b01      	ldr	r3, [sp, #4]
 80121fc:	69aa      	ldr	r2, [r5, #24]
	if( xTimerQueue != NULL )
 80121fe:	b171      	cbz	r1, 801221e <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012200:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012202:	e9cd 3504 	strd	r3, r5, [sp, #16]
		xMessage.xMessageID = xCommandID;
 8012206:	2500      	movs	r5, #0
 8012208:	9503      	str	r5, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801220a:	f7ff fe2d 	bl	8011e68 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801220e:	6860      	ldr	r0, [r4, #4]
 8012210:	462b      	mov	r3, r5
 8012212:	462a      	mov	r2, r5
 8012214:	a903      	add	r1, sp, #12
 8012216:	f7fe fb37 	bl	8010888 <xQueueGenericSend>
							configASSERT( xResult );
 801221a:	2800      	cmp	r0, #0
 801221c:	d1b0      	bne.n	8012180 <prvTimerTask+0x54>
 801221e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012222:	f383 8811 	msr	BASEPRI, r3
 8012226:	f3bf 8f6f 	isb	sy
 801222a:	f3bf 8f4f 	dsb	sy
 801222e:	e7fe      	b.n	801222e <prvTimerTask+0x102>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012230:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012234:	9b01      	ldr	r3, [sp, #4]
 8012236:	61ab      	str	r3, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012238:	f042 0201 	orr.w	r2, r2, #1
 801223c:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012240:	2b00      	cmp	r3, #0
 8012242:	f000 808c 	beq.w	801235e <prvTimerTask+0x232>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012246:	4433      	add	r3, r6
	if( xNextExpiryTime <= xTimeNow )
 8012248:	42b3      	cmp	r3, r6
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801224a:	bf94      	ite	ls
 801224c:	68a0      	ldrls	r0, [r4, #8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801224e:	6820      	ldrhi	r0, [r4, #0]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012250:	606b      	str	r3, [r5, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012252:	612d      	str	r5, [r5, #16]
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012254:	1d29      	adds	r1, r5, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012256:	f7fe fa2d 	bl	80106b4 <vListInsert>
 801225a:	e791      	b.n	8012180 <prvTimerTask+0x54>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801225c:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8012260:	f023 0301 	bic.w	r3, r3, #1
 8012264:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
					break;
 8012268:	e78a      	b.n	8012180 <prvTimerTask+0x54>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801226a:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 801226e:	079a      	lsls	r2, r3, #30
 8012270:	d53d      	bpl.n	80122ee <prvTimerTask+0x1c2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012272:	f023 0301 	bic.w	r3, r3, #1
 8012276:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
 801227a:	e781      	b.n	8012180 <prvTimerTask+0x54>
	vTaskSuspendAll();
 801227c:	f7ff fc56 	bl	8011b2c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8012280:	f7ff fc70 	bl	8011b64 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012284:	68e3      	ldr	r3, [r4, #12]
 8012286:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8012288:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 801228a:	d306      	bcc.n	801229a <prvTimerTask+0x16e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801228c:	68a3      	ldr	r3, [r4, #8]
	xLastTime = xTimeNow;
 801228e:	60e5      	str	r5, [r4, #12]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	fab2 f282 	clz	r2, r2
 8012296:	0952      	lsrs	r2, r2, #5
 8012298:	e765      	b.n	8012166 <prvTimerTask+0x3a>
		prvSwitchTimerLists();
 801229a:	f7ff ff05 	bl	80120a8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801229e:	60e5      	str	r5, [r4, #12]
			( void ) xTaskResumeAll();
 80122a0:	f7ff fc4e 	bl	8011b40 <xTaskResumeAll>
 80122a4:	e76c      	b.n	8012180 <prvTimerTask+0x54>
		prvSwitchTimerLists();
 80122a6:	f7ff feff 	bl	80120a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80122aa:	e77f      	b.n	80121ac <prvTimerTask+0x80>
				( void ) xTaskResumeAll();
 80122ac:	f7ff fc48 	bl	8011b40 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122b0:	6823      	ldr	r3, [r4, #0]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80122b8:	f109 0a04 	add.w	sl, r9, #4
 80122bc:	4650      	mov	r0, sl
 80122be:	f7fe fa11 	bl	80106e4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122c2:	f899 3028 	ldrb.w	r3, [r9, #40]	@ 0x28
 80122c6:	0758      	lsls	r0, r3, #29
 80122c8:	d415      	bmi.n	80122f6 <prvTimerTask+0x1ca>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80122ca:	f023 0301 	bic.w	r3, r3, #1
 80122ce:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80122d2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80122d6:	4648      	mov	r0, r9
 80122d8:	4798      	blx	r3
}
 80122da:	e751      	b.n	8012180 <prvTimerTask+0x54>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80122dc:	42b3      	cmp	r3, r6
 80122de:	d901      	bls.n	80122e4 <prvTimerTask+0x1b8>
 80122e0:	2a00      	cmp	r2, #0
 80122e2:	d082      	beq.n	80121ea <prvTimerTask+0xbe>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80122e4:	6820      	ldr	r0, [r4, #0]
 80122e6:	1d29      	adds	r1, r5, #4
 80122e8:	f7fe f9e4 	bl	80106b4 <vListInsert>
	return xProcessTimerNow;
 80122ec:	e748      	b.n	8012180 <prvTimerTask+0x54>
							vPortFree( pxTimer );
 80122ee:	4628      	mov	r0, r5
 80122f0:	f000 f9be 	bl	8012670 <vPortFree>
 80122f4:	e744      	b.n	8012180 <prvTimerTask+0x54>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80122f6:	f8d9 2018 	ldr.w	r2, [r9, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80122fa:	f8c9 9010 	str.w	r9, [r9, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80122fe:	18b3      	adds	r3, r6, r2
	if( xNextExpiryTime <= xTimeNow )
 8012300:	42ab      	cmp	r3, r5
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012302:	f8c9 3004 	str.w	r3, [r9, #4]
	if( xNextExpiryTime <= xTimeNow )
 8012306:	d909      	bls.n	801231c <prvTimerTask+0x1f0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012308:	6820      	ldr	r0, [r4, #0]
 801230a:	4651      	mov	r1, sl
 801230c:	f7fe f9d2 	bl	80106b4 <vListInsert>
	return xProcessTimerNow;
 8012310:	e7df      	b.n	80122d2 <prvTimerTask+0x1a6>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012312:	68a0      	ldr	r0, [r4, #8]
 8012314:	1d29      	adds	r1, r5, #4
 8012316:	f7fe f9cd 	bl	80106b4 <vListInsert>
	return xProcessTimerNow;
 801231a:	e731      	b.n	8012180 <prvTimerTask+0x54>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801231c:	1bad      	subs	r5, r5, r6
 801231e:	42aa      	cmp	r2, r5
 8012320:	d818      	bhi.n	8012354 <prvTimerTask+0x228>
	if( xTimerQueue != NULL )
 8012322:	6863      	ldr	r3, [r4, #4]
 8012324:	b16b      	cbz	r3, 8012342 <prvTimerTask+0x216>
		xMessage.xMessageID = xCommandID;
 8012326:	2500      	movs	r5, #0
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012328:	e9cd 6904 	strd	r6, r9, [sp, #16]
		xMessage.xMessageID = xCommandID;
 801232c:	9503      	str	r5, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801232e:	f7ff fd9b 	bl	8011e68 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012332:	6860      	ldr	r0, [r4, #4]
 8012334:	462b      	mov	r3, r5
 8012336:	462a      	mov	r2, r5
 8012338:	a903      	add	r1, sp, #12
 801233a:	f7fe faa5 	bl	8010888 <xQueueGenericSend>
			configASSERT( xResult );
 801233e:	2800      	cmp	r0, #0
 8012340:	d1c7      	bne.n	80122d2 <prvTimerTask+0x1a6>
 8012342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012346:	f383 8811 	msr	BASEPRI, r3
 801234a:	f3bf 8f6f 	isb	sy
 801234e:	f3bf 8f4f 	dsb	sy
 8012352:	e7fe      	b.n	8012352 <prvTimerTask+0x226>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012354:	68a0      	ldr	r0, [r4, #8]
 8012356:	4651      	mov	r1, sl
 8012358:	f7fe f9ac 	bl	80106b4 <vListInsert>
	return xProcessTimerNow;
 801235c:	e7b9      	b.n	80122d2 <prvTimerTask+0x1a6>
 801235e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012362:	f383 8811 	msr	BASEPRI, r3
 8012366:	f3bf 8f6f 	isb	sy
 801236a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801236e:	e7fe      	b.n	801236e <prvTimerTask+0x242>
 8012370:	200033a4 	.word	0x200033a4

08012374 <xTimerCreateTimerTask>:
{
 8012374:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8012376:	4c1c      	ldr	r4, [pc, #112]	@ (80123e8 <xTimerCreateTimerTask+0x74>)
{
 8012378:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 801237a:	f000 fa3b 	bl	80127f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 801237e:	6865      	ldr	r5, [r4, #4]
 8012380:	b1d5      	cbz	r5, 80123b8 <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012382:	f000 fa59 	bl	8012838 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8012386:	6863      	ldr	r3, [r4, #4]
 8012388:	b15b      	cbz	r3, 80123a2 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
 801238a:	4a18      	ldr	r2, [pc, #96]	@ (80123ec <xTimerCreateTimerTask+0x78>)
 801238c:	4918      	ldr	r1, [pc, #96]	@ (80123f0 <xTimerCreateTimerTask+0x7c>)
 801238e:	4819      	ldr	r0, [pc, #100]	@ (80123f4 <xTimerCreateTimerTask+0x80>)
 8012390:	2306      	movs	r3, #6
 8012392:	e9cd 3200 	strd	r3, r2, [sp]
 8012396:	2300      	movs	r3, #0
 8012398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801239c:	f7ff f9de 	bl	801175c <xTaskCreate>
	configASSERT( xReturn );
 80123a0:	b940      	cbnz	r0, 80123b4 <xTimerCreateTimerTask+0x40>
 80123a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123a6:	f383 8811 	msr	BASEPRI, r3
 80123aa:	f3bf 8f6f 	isb	sy
 80123ae:	f3bf 8f4f 	dsb	sy
 80123b2:	e7fe      	b.n	80123b2 <xTimerCreateTimerTask+0x3e>
}
 80123b4:	b003      	add	sp, #12
 80123b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 80123b8:	f104 0710 	add.w	r7, r4, #16
 80123bc:	4638      	mov	r0, r7
			vListInitialise( &xActiveTimerList2 );
 80123be:	f104 0624 	add.w	r6, r4, #36	@ 0x24
			vListInitialise( &xActiveTimerList1 );
 80123c2:	f7fe f959 	bl	8010678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80123c6:	4630      	mov	r0, r6
 80123c8:	f7fe f956 	bl	8010678 <vListInitialise>
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80123cc:	462a      	mov	r2, r5
 80123ce:	210c      	movs	r1, #12
 80123d0:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 80123d2:	6027      	str	r7, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80123d4:	60a6      	str	r6, [r4, #8]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80123d6:	f7fe f9d3 	bl	8010780 <xQueueGenericCreate>
 80123da:	6060      	str	r0, [r4, #4]
				if( xTimerQueue != NULL )
 80123dc:	2800      	cmp	r0, #0
 80123de:	d0d0      	beq.n	8012382 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80123e0:	4905      	ldr	r1, [pc, #20]	@ (80123f8 <xTimerCreateTimerTask+0x84>)
 80123e2:	f7fe fff5 	bl	80113d0 <vQueueAddToRegistry>
 80123e6:	e7cc      	b.n	8012382 <xTimerCreateTimerTask+0xe>
 80123e8:	200033a4 	.word	0x200033a4
 80123ec:	200033dc 	.word	0x200033dc
 80123f0:	0801552c 	.word	0x0801552c
 80123f4:	0801212d 	.word	0x0801212d
 80123f8:	08015524 	.word	0x08015524

080123fc <xTimerCreate>:
	{
 80123fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012400:	4607      	mov	r7, r0
 8012402:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012404:	202c      	movs	r0, #44	@ 0x2c
	{
 8012406:	4688      	mov	r8, r1
 8012408:	4616      	mov	r6, r2
 801240a:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801240c:	f000 f884 	bl	8012518 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8012410:	4604      	mov	r4, r0
 8012412:	b1e8      	cbz	r0, 8012450 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 8012414:	2300      	movs	r3, #0
 8012416:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801241a:	f1b8 0f00 	cmp.w	r8, #0
 801241e:	d01b      	beq.n	8012458 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 8012420:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80124a8 <xTimerCreate+0xac>
	taskENTER_CRITICAL();
 8012424:	f000 f9e6 	bl	80127f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8012428:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801242c:	b1ea      	cbz	r2, 801246a <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 801242e:	f000 fa03 	bl	8012838 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
		pxNewTimer->pcTimerName = pcTimerName;
 8012434:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 8012436:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801243a:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801243c:	1d20      	adds	r0, r4, #4
 801243e:	f7fe f927 	bl	8010690 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012442:	b12e      	cbz	r6, 8012450 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012444:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012448:	f043 0304 	orr.w	r3, r3, #4
 801244c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 8012450:	4620      	mov	r0, r4
 8012452:	b003      	add	sp, #12
 8012454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801245c:	f383 8811 	msr	BASEPRI, r3
 8012460:	f3bf 8f6f 	isb	sy
 8012464:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012468:	e7fe      	b.n	8012468 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 801246a:	f109 0b10 	add.w	fp, r9, #16
 801246e:	4658      	mov	r0, fp
			vListInitialise( &xActiveTimerList2 );
 8012470:	f109 0a24 	add.w	sl, r9, #36	@ 0x24
 8012474:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
 8012476:	f7fe f8ff 	bl	8010678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801247a:	4650      	mov	r0, sl
 801247c:	f7fe f8fc 	bl	8010678 <vListInitialise>
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8012480:	9a01      	ldr	r2, [sp, #4]
			pxCurrentTimerList = &xActiveTimerList1;
 8012482:	f8c9 b000 	str.w	fp, [r9]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8012486:	210c      	movs	r1, #12
 8012488:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 801248a:	f8c9 a008 	str.w	sl, [r9, #8]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801248e:	f7fe f977 	bl	8010780 <xQueueGenericCreate>
 8012492:	f8c9 0004 	str.w	r0, [r9, #4]
				if( xTimerQueue != NULL )
 8012496:	2800      	cmp	r0, #0
 8012498:	d0c9      	beq.n	801242e <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801249a:	4902      	ldr	r1, [pc, #8]	@ (80124a4 <xTimerCreate+0xa8>)
 801249c:	f7fe ff98 	bl	80113d0 <vQueueAddToRegistry>
 80124a0:	e7c5      	b.n	801242e <xTimerCreate+0x32>
 80124a2:	bf00      	nop
 80124a4:	08015524 	.word	0x08015524
 80124a8:	200033a4 	.word	0x200033a4

080124ac <xTimerGenericCommand>:
	configASSERT( xTimer );
 80124ac:	b1c0      	cbz	r0, 80124e0 <xTimerGenericCommand+0x34>
{
 80124ae:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 80124b0:	4d18      	ldr	r5, [pc, #96]	@ (8012514 <xTimerGenericCommand+0x68>)
 80124b2:	686c      	ldr	r4, [r5, #4]
{
 80124b4:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 80124b6:	b184      	cbz	r4, 80124da <xTimerGenericCommand+0x2e>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80124b8:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 80124ba:	e9cd 1201 	strd	r1, r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80124be:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80124c0:	dc17      	bgt.n	80124f2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80124c2:	f7ff fcd1 	bl	8011e68 <xTaskGetSchedulerState>
 80124c6:	2802      	cmp	r0, #2
 80124c8:	d01c      	beq.n	8012504 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80124ca:	2300      	movs	r3, #0
 80124cc:	6868      	ldr	r0, [r5, #4]
 80124ce:	461a      	mov	r2, r3
 80124d0:	a901      	add	r1, sp, #4
 80124d2:	f7fe f9d9 	bl	8010888 <xQueueGenericSend>
}
 80124d6:	b005      	add	sp, #20
 80124d8:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80124da:	4620      	mov	r0, r4
}
 80124dc:	b005      	add	sp, #20
 80124de:	bd30      	pop	{r4, r5, pc}
 80124e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124e4:	f383 8811 	msr	BASEPRI, r3
 80124e8:	f3bf 8f6f 	isb	sy
 80124ec:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80124f0:	e7fe      	b.n	80124f0 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80124f2:	469c      	mov	ip, r3
 80124f4:	4662      	mov	r2, ip
 80124f6:	2300      	movs	r3, #0
 80124f8:	a901      	add	r1, sp, #4
 80124fa:	4620      	mov	r0, r4
 80124fc:	f7fe fb44 	bl	8010b88 <xQueueGenericSendFromISR>
}
 8012500:	b005      	add	sp, #20
 8012502:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012504:	6868      	ldr	r0, [r5, #4]
 8012506:	9a08      	ldr	r2, [sp, #32]
 8012508:	2300      	movs	r3, #0
 801250a:	a901      	add	r1, sp, #4
 801250c:	f7fe f9bc 	bl	8010888 <xQueueGenericSend>
 8012510:	e7e4      	b.n	80124dc <xTimerGenericCommand+0x30>
 8012512:	bf00      	nop
 8012514:	200033a4 	.word	0x200033a4

08012518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801251c:	4c51      	ldr	r4, [pc, #324]	@ (8012664 <pvPortMalloc+0x14c>)
{
 801251e:	4607      	mov	r7, r0
	vTaskSuspendAll();
 8012520:	f7ff fb04 	bl	8011b2c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012524:	68a5      	ldr	r5, [r4, #8]
 8012526:	2d00      	cmp	r5, #0
 8012528:	d034      	beq.n	8012594 <pvPortMalloc+0x7c>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801252a:	68e6      	ldr	r6, [r4, #12]
 801252c:	4237      	tst	r7, r6
 801252e:	d12b      	bne.n	8012588 <pvPortMalloc+0x70>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012530:	b357      	cbz	r7, 8012588 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012532:	f107 0008 	add.w	r0, r7, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012536:	077a      	lsls	r2, r7, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012538:	bf1c      	itt	ne
 801253a:	f020 0007 	bicne.w	r0, r0, #7
 801253e:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012540:	b310      	cbz	r0, 8012588 <pvPortMalloc+0x70>
 8012542:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8012546:	4586      	cmp	lr, r0
 8012548:	d31e      	bcc.n	8012588 <pvPortMalloc+0x70>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 801254a:	6823      	ldr	r3, [r4, #0]
				pxPreviousBlock = &xStart;
 801254c:	4f45      	ldr	r7, [pc, #276]	@ (8012664 <pvPortMalloc+0x14c>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801254e:	e003      	b.n	8012558 <pvPortMalloc+0x40>
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	b122      	cbz	r2, 801255e <pvPortMalloc+0x46>
 8012554:	461f      	mov	r7, r3
 8012556:	4613      	mov	r3, r2
 8012558:	6859      	ldr	r1, [r3, #4]
 801255a:	4281      	cmp	r1, r0
 801255c:	d3f8      	bcc.n	8012550 <pvPortMalloc+0x38>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801255e:	42ab      	cmp	r3, r5
 8012560:	d012      	beq.n	8012588 <pvPortMalloc+0x70>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	603a      	str	r2, [r7, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012566:	1a0a      	subs	r2, r1, r0
 8012568:	2a10      	cmp	r2, #16
 801256a:	d947      	bls.n	80125fc <pvPortMalloc+0xe4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801256c:	eb03 0c00 	add.w	ip, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012570:	f01c 0f07 	tst.w	ip, #7
 8012574:	d028      	beq.n	80125c8 <pvPortMalloc+0xb0>
 8012576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801257a:	f383 8811 	msr	BASEPRI, r3
 801257e:	f3bf 8f6f 	isb	sy
 8012582:	f3bf 8f4f 	dsb	sy
 8012586:	e7fe      	b.n	8012586 <pvPortMalloc+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012588:	f7ff fada 	bl	8011b40 <xTaskResumeAll>
void *pvReturn = NULL;
 801258c:	2500      	movs	r5, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 801258e:	4628      	mov	r0, r5
 8012590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012594:	4b34      	ldr	r3, [pc, #208]	@ (8012668 <pvPortMalloc+0x150>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 8012596:	4d35      	ldr	r5, [pc, #212]	@ (801266c <pvPortMalloc+0x154>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012598:	0759      	lsls	r1, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801259a:	bf18      	it	ne
 801259c:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801259e:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125a2:	bf18      	it	ne
 80125a4:	f023 0307 	bicne.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80125a8:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80125aa:	e9c4 3100 	strd	r3, r1, [r4]
 80125ae:	461a      	mov	r2, r3
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80125b0:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80125b4:	1aeb      	subs	r3, r5, r3
	pxEnd->pxNextFreeBlock = NULL;
 80125b6:	e9c5 1100 	strd	r1, r1, [r5]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80125ba:	e9c4 3304 	strd	r3, r3, [r4, #16]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80125be:	e9c2 5300 	strd	r5, r3, [r2]
	pxEnd = ( void * ) uxAddress;
 80125c2:	60a5      	str	r5, [r4, #8]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80125c4:	60e6      	str	r6, [r4, #12]
}
 80125c6:	e7b1      	b.n	801252c <pvPortMalloc+0x14>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80125c8:	f8cc 2004 	str.w	r2, [ip, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80125cc:	4a25      	ldr	r2, [pc, #148]	@ (8012664 <pvPortMalloc+0x14c>)
						pxBlock->xBlockSize = xWantedSize;
 80125ce:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80125d0:	4617      	mov	r7, r2
 80125d2:	6812      	ldr	r2, [r2, #0]
 80125d4:	4594      	cmp	ip, r2
 80125d6:	d8fb      	bhi.n	80125d0 <pvPortMalloc+0xb8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80125d8:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80125da:	f8dc 8004 	ldr.w	r8, [ip, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80125de:	eb07 0901 	add.w	r9, r7, r1
 80125e2:	45cc      	cmp	ip, r9
 80125e4:	d027      	beq.n	8012636 <pvPortMalloc+0x11e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80125e6:	eb0c 0108 	add.w	r1, ip, r8
 80125ea:	428a      	cmp	r2, r1
 80125ec:	d02d      	beq.n	801264a <pvPortMalloc+0x132>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80125ee:	f8cc 2000 	str.w	r2, [ip]
 80125f2:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80125f4:	4567      	cmp	r7, ip
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80125f6:	bf18      	it	ne
 80125f8:	f8c7 c000 	strne.w	ip, [r7]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80125fc:	6920      	ldr	r0, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80125fe:	ebae 0201 	sub.w	r2, lr, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012602:	4282      	cmp	r2, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012604:	bf38      	it	cc
 8012606:	6122      	strcc	r2, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012608:	6162      	str	r2, [r4, #20]
					xNumberOfSuccessfulAllocations++;
 801260a:	69a2      	ldr	r2, [r4, #24]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801260c:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 801260e:	2000      	movs	r0, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012610:	f103 0508 	add.w	r5, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012614:	6059      	str	r1, [r3, #4]
					xNumberOfSuccessfulAllocations++;
 8012616:	3201      	adds	r2, #1
					pxBlock->pxNextFreeBlock = NULL;
 8012618:	6018      	str	r0, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801261a:	61a2      	str	r2, [r4, #24]
	( void ) xTaskResumeAll();
 801261c:	f7ff fa90 	bl	8011b40 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012620:	076b      	lsls	r3, r5, #29
 8012622:	d0b4      	beq.n	801258e <pvPortMalloc+0x76>
 8012624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012628:	f383 8811 	msr	BASEPRI, r3
 801262c:	f3bf 8f6f 	isb	sy
 8012630:	f3bf 8f4f 	dsb	sy
 8012634:	e7fe      	b.n	8012634 <pvPortMalloc+0x11c>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012636:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012638:	eb07 0108 	add.w	r1, r7, r8
 801263c:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801263e:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012642:	d001      	beq.n	8012648 <pvPortMalloc+0x130>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012644:	6859      	ldr	r1, [r3, #4]
 8012646:	e7d9      	b.n	80125fc <pvPortMalloc+0xe4>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012648:	46bc      	mov	ip, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801264a:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801264c:	bf1c      	itt	ne
 801264e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012650:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012652:	f8cc 2000 	str.w	r2, [ip]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012656:	bf1c      	itt	ne
 8012658:	4441      	addne	r1, r8
 801265a:	f8cc 1004 	strne.w	r1, [ip, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801265e:	6859      	ldr	r1, [r3, #4]
 8012660:	e7c8      	b.n	80125f4 <pvPortMalloc+0xdc>
 8012662:	bf00      	nop
 8012664:	200033e0 	.word	0x200033e0
 8012668:	20003400 	.word	0x20003400
 801266c:	200067f8 	.word	0x200067f8

08012670 <vPortFree>:
	if( pv != NULL )
 8012670:	b1e0      	cbz	r0, 80126ac <vPortFree+0x3c>
{
 8012672:	b5f0      	push	{r4, r5, r6, r7, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012674:	4c2b      	ldr	r4, [pc, #172]	@ (8012724 <vPortFree+0xb4>)
 8012676:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801267a:	68e2      	ldr	r2, [r4, #12]
 801267c:	4213      	tst	r3, r2
{
 801267e:	b083      	sub	sp, #12
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012680:	d00b      	beq.n	801269a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012682:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8012686:	b191      	cbz	r1, 80126ae <vPortFree+0x3e>
 8012688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801268c:	f383 8811 	msr	BASEPRI, r3
 8012690:	f3bf 8f6f 	isb	sy
 8012694:	f3bf 8f4f 	dsb	sy
 8012698:	e7fe      	b.n	8012698 <vPortFree+0x28>
 801269a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80126aa:	e7fe      	b.n	80126aa <vPortFree+0x3a>
 80126ac:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80126ae:	ea23 0302 	bic.w	r3, r3, r2
 80126b2:	f840 3c04 	str.w	r3, [r0, #-4]
 80126b6:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80126b8:	f7ff fa38 	bl	8011b2c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80126bc:	9801      	ldr	r0, [sp, #4]
 80126be:	6963      	ldr	r3, [r4, #20]
 80126c0:	f850 6c04 	ldr.w	r6, [r0, #-4]
 80126c4:	4433      	add	r3, r6
 80126c6:	6163      	str	r3, [r4, #20]
		puc -= xHeapStructSize;
 80126c8:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126cc:	4623      	mov	r3, r4
 80126ce:	4619      	mov	r1, r3
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d8fb      	bhi.n	80126ce <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126d6:	684f      	ldr	r7, [r1, #4]
 80126d8:	19cd      	adds	r5, r1, r7
 80126da:	42aa      	cmp	r2, r5
 80126dc:	d010      	beq.n	8012700 <vPortFree+0x90>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80126de:	eb02 0e06 	add.w	lr, r2, r6
 80126e2:	4573      	cmp	r3, lr
 80126e4:	d012      	beq.n	801270c <vPortFree+0x9c>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80126e6:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 80126ea:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80126ec:	bf18      	it	ne
 80126ee:	600a      	strne	r2, [r1, #0]
					xNumberOfSuccessfulFrees++;
 80126f0:	69e3      	ldr	r3, [r4, #28]
 80126f2:	3301      	adds	r3, #1
 80126f4:	61e3      	str	r3, [r4, #28]
}
 80126f6:	b003      	add	sp, #12
 80126f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				( void ) xTaskResumeAll();
 80126fc:	f7ff ba20 	b.w	8011b40 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012700:	443e      	add	r6, r7
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012702:	198a      	adds	r2, r1, r6
 8012704:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012706:	604e      	str	r6, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012708:	d1f2      	bne.n	80126f0 <vPortFree+0x80>
 801270a:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801270c:	68a0      	ldr	r0, [r4, #8]
 801270e:	4283      	cmp	r3, r0
 8012710:	d005      	beq.n	801271e <vPortFree+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012712:	6858      	ldr	r0, [r3, #4]
 8012714:	eb00 0c06 	add.w	ip, r0, r6
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012718:	6818      	ldr	r0, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801271a:	f8c2 c004 	str.w	ip, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801271e:	6010      	str	r0, [r2, #0]
 8012720:	e7e3      	b.n	80126ea <vPortFree+0x7a>
 8012722:	bf00      	nop
 8012724:	200033e0 	.word	0x200033e0

08012728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012728:	4808      	ldr	r0, [pc, #32]	@ (801274c <prvPortStartFirstTask+0x24>)
 801272a:	6800      	ldr	r0, [r0, #0]
 801272c:	6800      	ldr	r0, [r0, #0]
 801272e:	f380 8808 	msr	MSP, r0
 8012732:	f04f 0000 	mov.w	r0, #0
 8012736:	f380 8814 	msr	CONTROL, r0
 801273a:	b662      	cpsie	i
 801273c:	b661      	cpsie	f
 801273e:	f3bf 8f4f 	dsb	sy
 8012742:	f3bf 8f6f 	isb	sy
 8012746:	df00      	svc	0
 8012748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801274a:	0000      	.short	0x0000
 801274c:	e000ed08 	.word	0xe000ed08

08012750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012750:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012760 <vPortEnableVFP+0x10>
 8012754:	6801      	ldr	r1, [r0, #0]
 8012756:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801275a:	6001      	str	r1, [r0, #0]
 801275c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801275e:	0000      	.short	0x0000
 8012760:	e000ed88 	.word	0xe000ed88

08012764 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8012764:	4b0e      	ldr	r3, [pc, #56]	@ (80127a0 <prvTaskExitError+0x3c>)
 8012766:	681b      	ldr	r3, [r3, #0]
{
 8012768:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801276a:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 801276c:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 801276e:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8012770:	d008      	beq.n	8012784 <prvTaskExitError+0x20>
 8012772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012776:	f383 8811 	msr	BASEPRI, r3
 801277a:	f3bf 8f6f 	isb	sy
 801277e:	f3bf 8f4f 	dsb	sy
 8012782:	e7fe      	b.n	8012782 <prvTaskExitError+0x1e>
 8012784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012788:	f383 8811 	msr	BASEPRI, r3
 801278c:	f3bf 8f6f 	isb	sy
 8012790:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8012794:	9b01      	ldr	r3, [sp, #4]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d0fc      	beq.n	8012794 <prvTaskExitError+0x30>
}
 801279a:	b002      	add	sp, #8
 801279c:	4770      	bx	lr
 801279e:	bf00      	nop
 80127a0:	20000300 	.word	0x20000300

080127a4 <pxPortInitialiseStack>:
{
 80127a4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80127a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80127aa:	4c07      	ldr	r4, [pc, #28]	@ (80127c8 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80127ac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80127b0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80127b4:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80127b8:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80127bc:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 80127c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127c4:	3844      	subs	r0, #68	@ 0x44
 80127c6:	4770      	bx	lr
 80127c8:	08012765 	.word	0x08012765
 80127cc:	00000000 	.word	0x00000000

080127d0 <SVC_Handler>:
	__asm volatile (
 80127d0:	4b07      	ldr	r3, [pc, #28]	@ (80127f0 <pxCurrentTCBConst2>)
 80127d2:	6819      	ldr	r1, [r3, #0]
 80127d4:	6808      	ldr	r0, [r1, #0]
 80127d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127da:	f380 8809 	msr	PSP, r0
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	f04f 0000 	mov.w	r0, #0
 80127e6:	f380 8811 	msr	BASEPRI, r0
 80127ea:	4770      	bx	lr
 80127ec:	f3af 8000 	nop.w

080127f0 <pxCurrentTCBConst2>:
 80127f0:	20003324 	.word	0x20003324

080127f4 <vPortEnterCritical>:
 80127f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127f8:	f383 8811 	msr	BASEPRI, r3
 80127fc:	f3bf 8f6f 	isb	sy
 8012800:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8012804:	4a0b      	ldr	r2, [pc, #44]	@ (8012834 <vPortEnterCritical+0x40>)
 8012806:	6813      	ldr	r3, [r2, #0]
 8012808:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801280a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801280c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801280e:	d000      	beq.n	8012812 <vPortEnterCritical+0x1e>
}
 8012810:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012812:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012816:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801281a:	b2db      	uxtb	r3, r3
 801281c:	2b00      	cmp	r3, #0
 801281e:	d0f7      	beq.n	8012810 <vPortEnterCritical+0x1c>
 8012820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012824:	f383 8811 	msr	BASEPRI, r3
 8012828:	f3bf 8f6f 	isb	sy
 801282c:	f3bf 8f4f 	dsb	sy
 8012830:	e7fe      	b.n	8012830 <vPortEnterCritical+0x3c>
 8012832:	bf00      	nop
 8012834:	20000300 	.word	0x20000300

08012838 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8012838:	4a08      	ldr	r2, [pc, #32]	@ (801285c <vPortExitCritical+0x24>)
 801283a:	6813      	ldr	r3, [r2, #0]
 801283c:	b943      	cbnz	r3, 8012850 <vPortExitCritical+0x18>
 801283e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012842:	f383 8811 	msr	BASEPRI, r3
 8012846:	f3bf 8f6f 	isb	sy
 801284a:	f3bf 8f4f 	dsb	sy
 801284e:	e7fe      	b.n	801284e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8012850:	3b01      	subs	r3, #1
 8012852:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012854:	b90b      	cbnz	r3, 801285a <vPortExitCritical+0x22>
	__asm volatile
 8012856:	f383 8811 	msr	BASEPRI, r3
}
 801285a:	4770      	bx	lr
 801285c:	20000300 	.word	0x20000300

08012860 <PendSV_Handler>:
	__asm volatile
 8012860:	f3ef 8009 	mrs	r0, PSP
 8012864:	f3bf 8f6f 	isb	sy
 8012868:	4b15      	ldr	r3, [pc, #84]	@ (80128c0 <pxCurrentTCBConst>)
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	f01e 0f10 	tst.w	lr, #16
 8012870:	bf08      	it	eq
 8012872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287a:	6010      	str	r0, [r2, #0]
 801287c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012884:	f380 8811 	msr	BASEPRI, r0
 8012888:	f3bf 8f4f 	dsb	sy
 801288c:	f3bf 8f6f 	isb	sy
 8012890:	f7ff f97e 	bl	8011b90 <vTaskSwitchContext>
 8012894:	f04f 0000 	mov.w	r0, #0
 8012898:	f380 8811 	msr	BASEPRI, r0
 801289c:	bc09      	pop	{r0, r3}
 801289e:	6819      	ldr	r1, [r3, #0]
 80128a0:	6808      	ldr	r0, [r1, #0]
 80128a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a6:	f01e 0f10 	tst.w	lr, #16
 80128aa:	bf08      	it	eq
 80128ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80128b0:	f380 8809 	msr	PSP, r0
 80128b4:	f3bf 8f6f 	isb	sy
 80128b8:	4770      	bx	lr
 80128ba:	bf00      	nop
 80128bc:	f3af 8000 	nop.w

080128c0 <pxCurrentTCBConst>:
 80128c0:	20003324 	.word	0x20003324

080128c4 <xPortSysTickHandler>:
{
 80128c4:	b508      	push	{r3, lr}
	__asm volatile
 80128c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128ca:	f383 8811 	msr	BASEPRI, r3
 80128ce:	f3bf 8f6f 	isb	sy
 80128d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80128d6:	f7ff f94b 	bl	8011b70 <xTaskIncrementTick>
 80128da:	b128      	cbz	r0, 80128e8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80128dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80128e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80128e8:	2300      	movs	r3, #0
 80128ea:	f383 8811 	msr	BASEPRI, r3
}
 80128ee:	bd08      	pop	{r3, pc}

080128f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80128f0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80128f4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80128f6:	4906      	ldr	r1, [pc, #24]	@ (8012910 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80128f8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80128fa:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80128fc:	680b      	ldr	r3, [r1, #0]
 80128fe:	4905      	ldr	r1, [pc, #20]	@ (8012914 <vPortSetupTimerInterrupt+0x24>)
 8012900:	fba1 1303 	umull	r1, r3, r1, r3
 8012904:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012906:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012908:	3b01      	subs	r3, #1
 801290a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801290c:	6110      	str	r0, [r2, #16]
}
 801290e:	4770      	bx	lr
 8012910:	200001e0 	.word	0x200001e0
 8012914:	10624dd3 	.word	0x10624dd3

08012918 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012918:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801291c:	4a47      	ldr	r2, [pc, #284]	@ (8012a3c <xPortStartScheduler+0x124>)
 801291e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8012922:	4291      	cmp	r1, r2
 8012924:	d040      	beq.n	80129a8 <xPortStartScheduler+0x90>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012926:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801292a:	4b45      	ldr	r3, [pc, #276]	@ (8012a40 <xPortStartScheduler+0x128>)
 801292c:	429a      	cmp	r2, r3
 801292e:	d032      	beq.n	8012996 <xPortStartScheduler+0x7e>
{
 8012930:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012932:	4b44      	ldr	r3, [pc, #272]	@ (8012a44 <xPortStartScheduler+0x12c>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012934:	4844      	ldr	r0, [pc, #272]	@ (8012a48 <xPortStartScheduler+0x130>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012936:	781a      	ldrb	r2, [r3, #0]
{
 8012938:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801293a:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801293c:	b2d2      	uxtb	r2, r2
 801293e:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012940:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	b2db      	uxtb	r3, r3
 8012946:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801294a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801294e:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012952:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012956:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012958:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801295a:	7003      	strb	r3, [r0, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801295c:	6041      	str	r1, [r0, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801295e:	bf48      	it	mi
 8012960:	2206      	movmi	r2, #6
 8012962:	d50f      	bpl.n	8012984 <xPortStartScheduler+0x6c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012964:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012968:	005b      	lsls	r3, r3, #1
 801296a:	b2db      	uxtb	r3, r3
 801296c:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012970:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012974:	061b      	lsls	r3, r3, #24
 8012976:	4611      	mov	r1, r2
 8012978:	f102 32ff 	add.w	r2, r2, #4294967295
 801297c:	d4f2      	bmi.n	8012964 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801297e:	2903      	cmp	r1, #3
 8012980:	d01b      	beq.n	80129ba <xPortStartScheduler+0xa2>
 8012982:	6041      	str	r1, [r0, #4]
	__asm volatile
 8012984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012988:	f383 8811 	msr	BASEPRI, r3
 801298c:	f3bf 8f6f 	isb	sy
 8012990:	f3bf 8f4f 	dsb	sy
 8012994:	e7fe      	b.n	8012994 <xPortStartScheduler+0x7c>
 8012996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801299a:	f383 8811 	msr	BASEPRI, r3
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80129a6:	e7fe      	b.n	80129a6 <xPortStartScheduler+0x8e>
 80129a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129ac:	f383 8811 	msr	BASEPRI, r3
 80129b0:	f3bf 8f6f 	isb	sy
 80129b4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80129b8:	e7fe      	b.n	80129b8 <xPortStartScheduler+0xa0>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80129ba:	9b02      	ldr	r3, [sp, #8]
 80129bc:	4a21      	ldr	r2, [pc, #132]	@ (8012a44 <xPortStartScheduler+0x12c>)
	uxCriticalNesting = 0;
 80129be:	4d23      	ldr	r5, [pc, #140]	@ (8012a4c <xPortStartScheduler+0x134>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80129c0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80129c8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80129cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80129d0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80129d4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80129d8:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80129dc:	f44f 7240 	mov.w	r2, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80129e0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 80129e4:	2600      	movs	r6, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80129e6:	6042      	str	r2, [r0, #4]
	vPortSetupTimerInterrupt();
 80129e8:	f7ff ff82 	bl	80128f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80129ec:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 80129ee:	f7ff feaf 	bl	8012750 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80129f2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80129f6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80129fa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80129fe:	f7ff fe93 	bl	8012728 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8012a02:	f7ff f8c5 	bl	8011b90 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8012a06:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8012a08:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	d008      	beq.n	8012a20 <xPortStartScheduler+0x108>
 8012a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a12:	f383 8811 	msr	BASEPRI, r3
 8012a16:	f3bf 8f6f 	isb	sy
 8012a1a:	f3bf 8f4f 	dsb	sy
 8012a1e:	e7fe      	b.n	8012a1e <xPortStartScheduler+0x106>
 8012a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a24:	f383 8811 	msr	BASEPRI, r3
 8012a28:	f3bf 8f6f 	isb	sy
 8012a2c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8012a30:	9b03      	ldr	r3, [sp, #12]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d0fc      	beq.n	8012a30 <xPortStartScheduler+0x118>
}
 8012a36:	2000      	movs	r0, #0
 8012a38:	b004      	add	sp, #16
 8012a3a:	bd70      	pop	{r4, r5, r6, pc}
 8012a3c:	410fc271 	.word	0x410fc271
 8012a40:	410fc270 	.word	0x410fc270
 8012a44:	e000e400 	.word	0xe000e400
 8012a48:	20006800 	.word	0x20006800
 8012a4c:	20000300 	.word	0x20000300

08012a50 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a50:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012a54:	2b0f      	cmp	r3, #15
 8012a56:	d812      	bhi.n	8012a7e <vPortValidateInterruptPriority+0x2e>
 8012a58:	4a11      	ldr	r2, [pc, #68]	@ (8012aa0 <vPortValidateInterruptPriority+0x50>)
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012a5a:	6852      	ldr	r2, [r2, #4]
 8012a5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012a60:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8012a64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d917      	bls.n	8012a9c <vPortValidateInterruptPriority+0x4c>
 8012a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a70:	f383 8811 	msr	BASEPRI, r3
 8012a74:	f3bf 8f6f 	isb	sy
 8012a78:	f3bf 8f4f 	dsb	sy
 8012a7c:	e7fe      	b.n	8012a7c <vPortValidateInterruptPriority+0x2c>
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a7e:	4909      	ldr	r1, [pc, #36]	@ (8012aa4 <vPortValidateInterruptPriority+0x54>)
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012a80:	4a07      	ldr	r2, [pc, #28]	@ (8012aa0 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a82:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012a84:	7811      	ldrb	r1, [r2, #0]
 8012a86:	4299      	cmp	r1, r3
 8012a88:	d9e7      	bls.n	8012a5a <vPortValidateInterruptPriority+0xa>
 8012a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a8e:	f383 8811 	msr	BASEPRI, r3
 8012a92:	f3bf 8f6f 	isb	sy
 8012a96:	f3bf 8f4f 	dsb	sy
 8012a9a:	e7fe      	b.n	8012a9a <vPortValidateInterruptPriority+0x4a>
	}
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop
 8012aa0:	20006800 	.word	0x20006800
 8012aa4:	e000e3f0 	.word	0xe000e3f0

08012aa8 <__cvt>:
 8012aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012aac:	ec57 6b10 	vmov	r6, r7, d0
 8012ab0:	2f00      	cmp	r7, #0
 8012ab2:	460c      	mov	r4, r1
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	463b      	mov	r3, r7
 8012ab8:	bfbb      	ittet	lt
 8012aba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012abe:	461f      	movlt	r7, r3
 8012ac0:	2300      	movge	r3, #0
 8012ac2:	232d      	movlt	r3, #45	@ 0x2d
 8012ac4:	700b      	strb	r3, [r1, #0]
 8012ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ac8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012acc:	4691      	mov	r9, r2
 8012ace:	f023 0820 	bic.w	r8, r3, #32
 8012ad2:	bfbc      	itt	lt
 8012ad4:	4632      	movlt	r2, r6
 8012ad6:	4616      	movlt	r6, r2
 8012ad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012adc:	d005      	beq.n	8012aea <__cvt+0x42>
 8012ade:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012ae2:	d100      	bne.n	8012ae6 <__cvt+0x3e>
 8012ae4:	3401      	adds	r4, #1
 8012ae6:	2102      	movs	r1, #2
 8012ae8:	e000      	b.n	8012aec <__cvt+0x44>
 8012aea:	2103      	movs	r1, #3
 8012aec:	ab03      	add	r3, sp, #12
 8012aee:	9301      	str	r3, [sp, #4]
 8012af0:	ab02      	add	r3, sp, #8
 8012af2:	9300      	str	r3, [sp, #0]
 8012af4:	ec47 6b10 	vmov	d0, r6, r7
 8012af8:	4653      	mov	r3, sl
 8012afa:	4622      	mov	r2, r4
 8012afc:	f000 fe48 	bl	8013790 <_dtoa_r>
 8012b00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012b04:	4605      	mov	r5, r0
 8012b06:	d119      	bne.n	8012b3c <__cvt+0x94>
 8012b08:	f019 0f01 	tst.w	r9, #1
 8012b0c:	d00e      	beq.n	8012b2c <__cvt+0x84>
 8012b0e:	eb00 0904 	add.w	r9, r0, r4
 8012b12:	2200      	movs	r2, #0
 8012b14:	2300      	movs	r3, #0
 8012b16:	4630      	mov	r0, r6
 8012b18:	4639      	mov	r1, r7
 8012b1a:	f7ed ffed 	bl	8000af8 <__aeabi_dcmpeq>
 8012b1e:	b108      	cbz	r0, 8012b24 <__cvt+0x7c>
 8012b20:	f8cd 900c 	str.w	r9, [sp, #12]
 8012b24:	2230      	movs	r2, #48	@ 0x30
 8012b26:	9b03      	ldr	r3, [sp, #12]
 8012b28:	454b      	cmp	r3, r9
 8012b2a:	d31e      	bcc.n	8012b6a <__cvt+0xc2>
 8012b2c:	9b03      	ldr	r3, [sp, #12]
 8012b2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b30:	1b5b      	subs	r3, r3, r5
 8012b32:	4628      	mov	r0, r5
 8012b34:	6013      	str	r3, [r2, #0]
 8012b36:	b004      	add	sp, #16
 8012b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012b40:	eb00 0904 	add.w	r9, r0, r4
 8012b44:	d1e5      	bne.n	8012b12 <__cvt+0x6a>
 8012b46:	7803      	ldrb	r3, [r0, #0]
 8012b48:	2b30      	cmp	r3, #48	@ 0x30
 8012b4a:	d10a      	bne.n	8012b62 <__cvt+0xba>
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	2300      	movs	r3, #0
 8012b50:	4630      	mov	r0, r6
 8012b52:	4639      	mov	r1, r7
 8012b54:	f7ed ffd0 	bl	8000af8 <__aeabi_dcmpeq>
 8012b58:	b918      	cbnz	r0, 8012b62 <__cvt+0xba>
 8012b5a:	f1c4 0401 	rsb	r4, r4, #1
 8012b5e:	f8ca 4000 	str.w	r4, [sl]
 8012b62:	f8da 3000 	ldr.w	r3, [sl]
 8012b66:	4499      	add	r9, r3
 8012b68:	e7d3      	b.n	8012b12 <__cvt+0x6a>
 8012b6a:	1c59      	adds	r1, r3, #1
 8012b6c:	9103      	str	r1, [sp, #12]
 8012b6e:	701a      	strb	r2, [r3, #0]
 8012b70:	e7d9      	b.n	8012b26 <__cvt+0x7e>

08012b72 <__exponent>:
 8012b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b74:	2900      	cmp	r1, #0
 8012b76:	bfba      	itte	lt
 8012b78:	4249      	neglt	r1, r1
 8012b7a:	232d      	movlt	r3, #45	@ 0x2d
 8012b7c:	232b      	movge	r3, #43	@ 0x2b
 8012b7e:	2909      	cmp	r1, #9
 8012b80:	7002      	strb	r2, [r0, #0]
 8012b82:	7043      	strb	r3, [r0, #1]
 8012b84:	dd29      	ble.n	8012bda <__exponent+0x68>
 8012b86:	f10d 0307 	add.w	r3, sp, #7
 8012b8a:	461d      	mov	r5, r3
 8012b8c:	270a      	movs	r7, #10
 8012b8e:	461a      	mov	r2, r3
 8012b90:	fbb1 f6f7 	udiv	r6, r1, r7
 8012b94:	fb07 1416 	mls	r4, r7, r6, r1
 8012b98:	3430      	adds	r4, #48	@ 0x30
 8012b9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	2c63      	cmp	r4, #99	@ 0x63
 8012ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ba6:	4631      	mov	r1, r6
 8012ba8:	dcf1      	bgt.n	8012b8e <__exponent+0x1c>
 8012baa:	3130      	adds	r1, #48	@ 0x30
 8012bac:	1e94      	subs	r4, r2, #2
 8012bae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012bb2:	1c41      	adds	r1, r0, #1
 8012bb4:	4623      	mov	r3, r4
 8012bb6:	42ab      	cmp	r3, r5
 8012bb8:	d30a      	bcc.n	8012bd0 <__exponent+0x5e>
 8012bba:	f10d 0309 	add.w	r3, sp, #9
 8012bbe:	1a9b      	subs	r3, r3, r2
 8012bc0:	42ac      	cmp	r4, r5
 8012bc2:	bf88      	it	hi
 8012bc4:	2300      	movhi	r3, #0
 8012bc6:	3302      	adds	r3, #2
 8012bc8:	4403      	add	r3, r0
 8012bca:	1a18      	subs	r0, r3, r0
 8012bcc:	b003      	add	sp, #12
 8012bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012bd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012bd8:	e7ed      	b.n	8012bb6 <__exponent+0x44>
 8012bda:	2330      	movs	r3, #48	@ 0x30
 8012bdc:	3130      	adds	r1, #48	@ 0x30
 8012bde:	7083      	strb	r3, [r0, #2]
 8012be0:	70c1      	strb	r1, [r0, #3]
 8012be2:	1d03      	adds	r3, r0, #4
 8012be4:	e7f1      	b.n	8012bca <__exponent+0x58>
	...

08012be8 <_printf_float>:
 8012be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bec:	b08d      	sub	sp, #52	@ 0x34
 8012bee:	460c      	mov	r4, r1
 8012bf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012bf4:	4616      	mov	r6, r2
 8012bf6:	461f      	mov	r7, r3
 8012bf8:	4605      	mov	r5, r0
 8012bfa:	f000 fcbb 	bl	8013574 <_localeconv_r>
 8012bfe:	6803      	ldr	r3, [r0, #0]
 8012c00:	9304      	str	r3, [sp, #16]
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7ed fb4c 	bl	80002a0 <strlen>
 8012c08:	2300      	movs	r3, #0
 8012c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8012c10:	9005      	str	r0, [sp, #20]
 8012c12:	3307      	adds	r3, #7
 8012c14:	f023 0307 	bic.w	r3, r3, #7
 8012c18:	f103 0208 	add.w	r2, r3, #8
 8012c1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012c20:	f8d4 b000 	ldr.w	fp, [r4]
 8012c24:	f8c8 2000 	str.w	r2, [r8]
 8012c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012c2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012c30:	9307      	str	r3, [sp, #28]
 8012c32:	f8cd 8018 	str.w	r8, [sp, #24]
 8012c36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c3e:	4b9c      	ldr	r3, [pc, #624]	@ (8012eb0 <_printf_float+0x2c8>)
 8012c40:	f04f 32ff 	mov.w	r2, #4294967295
 8012c44:	f7ed ff8a 	bl	8000b5c <__aeabi_dcmpun>
 8012c48:	bb70      	cbnz	r0, 8012ca8 <_printf_float+0xc0>
 8012c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c4e:	4b98      	ldr	r3, [pc, #608]	@ (8012eb0 <_printf_float+0x2c8>)
 8012c50:	f04f 32ff 	mov.w	r2, #4294967295
 8012c54:	f7ed ff64 	bl	8000b20 <__aeabi_dcmple>
 8012c58:	bb30      	cbnz	r0, 8012ca8 <_printf_float+0xc0>
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	4640      	mov	r0, r8
 8012c60:	4649      	mov	r1, r9
 8012c62:	f7ed ff53 	bl	8000b0c <__aeabi_dcmplt>
 8012c66:	b110      	cbz	r0, 8012c6e <_printf_float+0x86>
 8012c68:	232d      	movs	r3, #45	@ 0x2d
 8012c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c6e:	4a91      	ldr	r2, [pc, #580]	@ (8012eb4 <_printf_float+0x2cc>)
 8012c70:	4b91      	ldr	r3, [pc, #580]	@ (8012eb8 <_printf_float+0x2d0>)
 8012c72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012c76:	bf94      	ite	ls
 8012c78:	4690      	movls	r8, r2
 8012c7a:	4698      	movhi	r8, r3
 8012c7c:	2303      	movs	r3, #3
 8012c7e:	6123      	str	r3, [r4, #16]
 8012c80:	f02b 0304 	bic.w	r3, fp, #4
 8012c84:	6023      	str	r3, [r4, #0]
 8012c86:	f04f 0900 	mov.w	r9, #0
 8012c8a:	9700      	str	r7, [sp, #0]
 8012c8c:	4633      	mov	r3, r6
 8012c8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012c90:	4621      	mov	r1, r4
 8012c92:	4628      	mov	r0, r5
 8012c94:	f000 f9d2 	bl	801303c <_printf_common>
 8012c98:	3001      	adds	r0, #1
 8012c9a:	f040 808d 	bne.w	8012db8 <_printf_float+0x1d0>
 8012c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8012ca2:	b00d      	add	sp, #52	@ 0x34
 8012ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca8:	4642      	mov	r2, r8
 8012caa:	464b      	mov	r3, r9
 8012cac:	4640      	mov	r0, r8
 8012cae:	4649      	mov	r1, r9
 8012cb0:	f7ed ff54 	bl	8000b5c <__aeabi_dcmpun>
 8012cb4:	b140      	cbz	r0, 8012cc8 <_printf_float+0xe0>
 8012cb6:	464b      	mov	r3, r9
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	bfbc      	itt	lt
 8012cbc:	232d      	movlt	r3, #45	@ 0x2d
 8012cbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8012ebc <_printf_float+0x2d4>)
 8012cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8012ec0 <_printf_float+0x2d8>)
 8012cc6:	e7d4      	b.n	8012c72 <_printf_float+0x8a>
 8012cc8:	6863      	ldr	r3, [r4, #4]
 8012cca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012cce:	9206      	str	r2, [sp, #24]
 8012cd0:	1c5a      	adds	r2, r3, #1
 8012cd2:	d13b      	bne.n	8012d4c <_printf_float+0x164>
 8012cd4:	2306      	movs	r3, #6
 8012cd6:	6063      	str	r3, [r4, #4]
 8012cd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012cdc:	2300      	movs	r3, #0
 8012cde:	6022      	str	r2, [r4, #0]
 8012ce0:	9303      	str	r3, [sp, #12]
 8012ce2:	ab0a      	add	r3, sp, #40	@ 0x28
 8012ce4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012ce8:	ab09      	add	r3, sp, #36	@ 0x24
 8012cea:	9300      	str	r3, [sp, #0]
 8012cec:	6861      	ldr	r1, [r4, #4]
 8012cee:	ec49 8b10 	vmov	d0, r8, r9
 8012cf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f7ff fed6 	bl	8012aa8 <__cvt>
 8012cfc:	9b06      	ldr	r3, [sp, #24]
 8012cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d00:	2b47      	cmp	r3, #71	@ 0x47
 8012d02:	4680      	mov	r8, r0
 8012d04:	d129      	bne.n	8012d5a <_printf_float+0x172>
 8012d06:	1cc8      	adds	r0, r1, #3
 8012d08:	db02      	blt.n	8012d10 <_printf_float+0x128>
 8012d0a:	6863      	ldr	r3, [r4, #4]
 8012d0c:	4299      	cmp	r1, r3
 8012d0e:	dd41      	ble.n	8012d94 <_printf_float+0x1ac>
 8012d10:	f1aa 0a02 	sub.w	sl, sl, #2
 8012d14:	fa5f fa8a 	uxtb.w	sl, sl
 8012d18:	3901      	subs	r1, #1
 8012d1a:	4652      	mov	r2, sl
 8012d1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012d20:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d22:	f7ff ff26 	bl	8012b72 <__exponent>
 8012d26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d28:	1813      	adds	r3, r2, r0
 8012d2a:	2a01      	cmp	r2, #1
 8012d2c:	4681      	mov	r9, r0
 8012d2e:	6123      	str	r3, [r4, #16]
 8012d30:	dc02      	bgt.n	8012d38 <_printf_float+0x150>
 8012d32:	6822      	ldr	r2, [r4, #0]
 8012d34:	07d2      	lsls	r2, r2, #31
 8012d36:	d501      	bpl.n	8012d3c <_printf_float+0x154>
 8012d38:	3301      	adds	r3, #1
 8012d3a:	6123      	str	r3, [r4, #16]
 8012d3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d0a2      	beq.n	8012c8a <_printf_float+0xa2>
 8012d44:	232d      	movs	r3, #45	@ 0x2d
 8012d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d4a:	e79e      	b.n	8012c8a <_printf_float+0xa2>
 8012d4c:	9a06      	ldr	r2, [sp, #24]
 8012d4e:	2a47      	cmp	r2, #71	@ 0x47
 8012d50:	d1c2      	bne.n	8012cd8 <_printf_float+0xf0>
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d1c0      	bne.n	8012cd8 <_printf_float+0xf0>
 8012d56:	2301      	movs	r3, #1
 8012d58:	e7bd      	b.n	8012cd6 <_printf_float+0xee>
 8012d5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012d5e:	d9db      	bls.n	8012d18 <_printf_float+0x130>
 8012d60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012d64:	d118      	bne.n	8012d98 <_printf_float+0x1b0>
 8012d66:	2900      	cmp	r1, #0
 8012d68:	6863      	ldr	r3, [r4, #4]
 8012d6a:	dd0b      	ble.n	8012d84 <_printf_float+0x19c>
 8012d6c:	6121      	str	r1, [r4, #16]
 8012d6e:	b913      	cbnz	r3, 8012d76 <_printf_float+0x18e>
 8012d70:	6822      	ldr	r2, [r4, #0]
 8012d72:	07d0      	lsls	r0, r2, #31
 8012d74:	d502      	bpl.n	8012d7c <_printf_float+0x194>
 8012d76:	3301      	adds	r3, #1
 8012d78:	440b      	add	r3, r1
 8012d7a:	6123      	str	r3, [r4, #16]
 8012d7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012d7e:	f04f 0900 	mov.w	r9, #0
 8012d82:	e7db      	b.n	8012d3c <_printf_float+0x154>
 8012d84:	b913      	cbnz	r3, 8012d8c <_printf_float+0x1a4>
 8012d86:	6822      	ldr	r2, [r4, #0]
 8012d88:	07d2      	lsls	r2, r2, #31
 8012d8a:	d501      	bpl.n	8012d90 <_printf_float+0x1a8>
 8012d8c:	3302      	adds	r3, #2
 8012d8e:	e7f4      	b.n	8012d7a <_printf_float+0x192>
 8012d90:	2301      	movs	r3, #1
 8012d92:	e7f2      	b.n	8012d7a <_printf_float+0x192>
 8012d94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d9a:	4299      	cmp	r1, r3
 8012d9c:	db05      	blt.n	8012daa <_printf_float+0x1c2>
 8012d9e:	6823      	ldr	r3, [r4, #0]
 8012da0:	6121      	str	r1, [r4, #16]
 8012da2:	07d8      	lsls	r0, r3, #31
 8012da4:	d5ea      	bpl.n	8012d7c <_printf_float+0x194>
 8012da6:	1c4b      	adds	r3, r1, #1
 8012da8:	e7e7      	b.n	8012d7a <_printf_float+0x192>
 8012daa:	2900      	cmp	r1, #0
 8012dac:	bfd4      	ite	le
 8012dae:	f1c1 0202 	rsble	r2, r1, #2
 8012db2:	2201      	movgt	r2, #1
 8012db4:	4413      	add	r3, r2
 8012db6:	e7e0      	b.n	8012d7a <_printf_float+0x192>
 8012db8:	6823      	ldr	r3, [r4, #0]
 8012dba:	055a      	lsls	r2, r3, #21
 8012dbc:	d407      	bmi.n	8012dce <_printf_float+0x1e6>
 8012dbe:	6923      	ldr	r3, [r4, #16]
 8012dc0:	4642      	mov	r2, r8
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	47b8      	blx	r7
 8012dc8:	3001      	adds	r0, #1
 8012dca:	d12b      	bne.n	8012e24 <_printf_float+0x23c>
 8012dcc:	e767      	b.n	8012c9e <_printf_float+0xb6>
 8012dce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012dd2:	f240 80dd 	bls.w	8012f90 <_printf_float+0x3a8>
 8012dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012dda:	2200      	movs	r2, #0
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f7ed fe8b 	bl	8000af8 <__aeabi_dcmpeq>
 8012de2:	2800      	cmp	r0, #0
 8012de4:	d033      	beq.n	8012e4e <_printf_float+0x266>
 8012de6:	4a37      	ldr	r2, [pc, #220]	@ (8012ec4 <_printf_float+0x2dc>)
 8012de8:	2301      	movs	r3, #1
 8012dea:	4631      	mov	r1, r6
 8012dec:	4628      	mov	r0, r5
 8012dee:	47b8      	blx	r7
 8012df0:	3001      	adds	r0, #1
 8012df2:	f43f af54 	beq.w	8012c9e <_printf_float+0xb6>
 8012df6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012dfa:	4543      	cmp	r3, r8
 8012dfc:	db02      	blt.n	8012e04 <_printf_float+0x21c>
 8012dfe:	6823      	ldr	r3, [r4, #0]
 8012e00:	07d8      	lsls	r0, r3, #31
 8012e02:	d50f      	bpl.n	8012e24 <_printf_float+0x23c>
 8012e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e08:	4631      	mov	r1, r6
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	47b8      	blx	r7
 8012e0e:	3001      	adds	r0, #1
 8012e10:	f43f af45 	beq.w	8012c9e <_printf_float+0xb6>
 8012e14:	f04f 0900 	mov.w	r9, #0
 8012e18:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e1c:	f104 0a1a 	add.w	sl, r4, #26
 8012e20:	45c8      	cmp	r8, r9
 8012e22:	dc09      	bgt.n	8012e38 <_printf_float+0x250>
 8012e24:	6823      	ldr	r3, [r4, #0]
 8012e26:	079b      	lsls	r3, r3, #30
 8012e28:	f100 8103 	bmi.w	8013032 <_printf_float+0x44a>
 8012e2c:	68e0      	ldr	r0, [r4, #12]
 8012e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e30:	4298      	cmp	r0, r3
 8012e32:	bfb8      	it	lt
 8012e34:	4618      	movlt	r0, r3
 8012e36:	e734      	b.n	8012ca2 <_printf_float+0xba>
 8012e38:	2301      	movs	r3, #1
 8012e3a:	4652      	mov	r2, sl
 8012e3c:	4631      	mov	r1, r6
 8012e3e:	4628      	mov	r0, r5
 8012e40:	47b8      	blx	r7
 8012e42:	3001      	adds	r0, #1
 8012e44:	f43f af2b 	beq.w	8012c9e <_printf_float+0xb6>
 8012e48:	f109 0901 	add.w	r9, r9, #1
 8012e4c:	e7e8      	b.n	8012e20 <_printf_float+0x238>
 8012e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	dc39      	bgt.n	8012ec8 <_printf_float+0x2e0>
 8012e54:	4a1b      	ldr	r2, [pc, #108]	@ (8012ec4 <_printf_float+0x2dc>)
 8012e56:	2301      	movs	r3, #1
 8012e58:	4631      	mov	r1, r6
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	47b8      	blx	r7
 8012e5e:	3001      	adds	r0, #1
 8012e60:	f43f af1d 	beq.w	8012c9e <_printf_float+0xb6>
 8012e64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012e68:	ea59 0303 	orrs.w	r3, r9, r3
 8012e6c:	d102      	bne.n	8012e74 <_printf_float+0x28c>
 8012e6e:	6823      	ldr	r3, [r4, #0]
 8012e70:	07d9      	lsls	r1, r3, #31
 8012e72:	d5d7      	bpl.n	8012e24 <_printf_float+0x23c>
 8012e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e78:	4631      	mov	r1, r6
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	47b8      	blx	r7
 8012e7e:	3001      	adds	r0, #1
 8012e80:	f43f af0d 	beq.w	8012c9e <_printf_float+0xb6>
 8012e84:	f04f 0a00 	mov.w	sl, #0
 8012e88:	f104 0b1a 	add.w	fp, r4, #26
 8012e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e8e:	425b      	negs	r3, r3
 8012e90:	4553      	cmp	r3, sl
 8012e92:	dc01      	bgt.n	8012e98 <_printf_float+0x2b0>
 8012e94:	464b      	mov	r3, r9
 8012e96:	e793      	b.n	8012dc0 <_printf_float+0x1d8>
 8012e98:	2301      	movs	r3, #1
 8012e9a:	465a      	mov	r2, fp
 8012e9c:	4631      	mov	r1, r6
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	47b8      	blx	r7
 8012ea2:	3001      	adds	r0, #1
 8012ea4:	f43f aefb 	beq.w	8012c9e <_printf_float+0xb6>
 8012ea8:	f10a 0a01 	add.w	sl, sl, #1
 8012eac:	e7ee      	b.n	8012e8c <_printf_float+0x2a4>
 8012eae:	bf00      	nop
 8012eb0:	7fefffff 	.word	0x7fefffff
 8012eb4:	08015534 	.word	0x08015534
 8012eb8:	08015538 	.word	0x08015538
 8012ebc:	0801553c 	.word	0x0801553c
 8012ec0:	08015540 	.word	0x08015540
 8012ec4:	08015544 	.word	0x08015544
 8012ec8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012eca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012ece:	4553      	cmp	r3, sl
 8012ed0:	bfa8      	it	ge
 8012ed2:	4653      	movge	r3, sl
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	4699      	mov	r9, r3
 8012ed8:	dc36      	bgt.n	8012f48 <_printf_float+0x360>
 8012eda:	f04f 0b00 	mov.w	fp, #0
 8012ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ee2:	f104 021a 	add.w	r2, r4, #26
 8012ee6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012ee8:	9306      	str	r3, [sp, #24]
 8012eea:	eba3 0309 	sub.w	r3, r3, r9
 8012eee:	455b      	cmp	r3, fp
 8012ef0:	dc31      	bgt.n	8012f56 <_printf_float+0x36e>
 8012ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ef4:	459a      	cmp	sl, r3
 8012ef6:	dc3a      	bgt.n	8012f6e <_printf_float+0x386>
 8012ef8:	6823      	ldr	r3, [r4, #0]
 8012efa:	07da      	lsls	r2, r3, #31
 8012efc:	d437      	bmi.n	8012f6e <_printf_float+0x386>
 8012efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f00:	ebaa 0903 	sub.w	r9, sl, r3
 8012f04:	9b06      	ldr	r3, [sp, #24]
 8012f06:	ebaa 0303 	sub.w	r3, sl, r3
 8012f0a:	4599      	cmp	r9, r3
 8012f0c:	bfa8      	it	ge
 8012f0e:	4699      	movge	r9, r3
 8012f10:	f1b9 0f00 	cmp.w	r9, #0
 8012f14:	dc33      	bgt.n	8012f7e <_printf_float+0x396>
 8012f16:	f04f 0800 	mov.w	r8, #0
 8012f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f1e:	f104 0b1a 	add.w	fp, r4, #26
 8012f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f24:	ebaa 0303 	sub.w	r3, sl, r3
 8012f28:	eba3 0309 	sub.w	r3, r3, r9
 8012f2c:	4543      	cmp	r3, r8
 8012f2e:	f77f af79 	ble.w	8012e24 <_printf_float+0x23c>
 8012f32:	2301      	movs	r3, #1
 8012f34:	465a      	mov	r2, fp
 8012f36:	4631      	mov	r1, r6
 8012f38:	4628      	mov	r0, r5
 8012f3a:	47b8      	blx	r7
 8012f3c:	3001      	adds	r0, #1
 8012f3e:	f43f aeae 	beq.w	8012c9e <_printf_float+0xb6>
 8012f42:	f108 0801 	add.w	r8, r8, #1
 8012f46:	e7ec      	b.n	8012f22 <_printf_float+0x33a>
 8012f48:	4642      	mov	r2, r8
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	47b8      	blx	r7
 8012f50:	3001      	adds	r0, #1
 8012f52:	d1c2      	bne.n	8012eda <_printf_float+0x2f2>
 8012f54:	e6a3      	b.n	8012c9e <_printf_float+0xb6>
 8012f56:	2301      	movs	r3, #1
 8012f58:	4631      	mov	r1, r6
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	9206      	str	r2, [sp, #24]
 8012f5e:	47b8      	blx	r7
 8012f60:	3001      	adds	r0, #1
 8012f62:	f43f ae9c 	beq.w	8012c9e <_printf_float+0xb6>
 8012f66:	9a06      	ldr	r2, [sp, #24]
 8012f68:	f10b 0b01 	add.w	fp, fp, #1
 8012f6c:	e7bb      	b.n	8012ee6 <_printf_float+0x2fe>
 8012f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f72:	4631      	mov	r1, r6
 8012f74:	4628      	mov	r0, r5
 8012f76:	47b8      	blx	r7
 8012f78:	3001      	adds	r0, #1
 8012f7a:	d1c0      	bne.n	8012efe <_printf_float+0x316>
 8012f7c:	e68f      	b.n	8012c9e <_printf_float+0xb6>
 8012f7e:	9a06      	ldr	r2, [sp, #24]
 8012f80:	464b      	mov	r3, r9
 8012f82:	4442      	add	r2, r8
 8012f84:	4631      	mov	r1, r6
 8012f86:	4628      	mov	r0, r5
 8012f88:	47b8      	blx	r7
 8012f8a:	3001      	adds	r0, #1
 8012f8c:	d1c3      	bne.n	8012f16 <_printf_float+0x32e>
 8012f8e:	e686      	b.n	8012c9e <_printf_float+0xb6>
 8012f90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012f94:	f1ba 0f01 	cmp.w	sl, #1
 8012f98:	dc01      	bgt.n	8012f9e <_printf_float+0x3b6>
 8012f9a:	07db      	lsls	r3, r3, #31
 8012f9c:	d536      	bpl.n	801300c <_printf_float+0x424>
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	4642      	mov	r2, r8
 8012fa2:	4631      	mov	r1, r6
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	47b8      	blx	r7
 8012fa8:	3001      	adds	r0, #1
 8012faa:	f43f ae78 	beq.w	8012c9e <_printf_float+0xb6>
 8012fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fb2:	4631      	mov	r1, r6
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	47b8      	blx	r7
 8012fb8:	3001      	adds	r0, #1
 8012fba:	f43f ae70 	beq.w	8012c9e <_printf_float+0xb6>
 8012fbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012fca:	f7ed fd95 	bl	8000af8 <__aeabi_dcmpeq>
 8012fce:	b9c0      	cbnz	r0, 8013002 <_printf_float+0x41a>
 8012fd0:	4653      	mov	r3, sl
 8012fd2:	f108 0201 	add.w	r2, r8, #1
 8012fd6:	4631      	mov	r1, r6
 8012fd8:	4628      	mov	r0, r5
 8012fda:	47b8      	blx	r7
 8012fdc:	3001      	adds	r0, #1
 8012fde:	d10c      	bne.n	8012ffa <_printf_float+0x412>
 8012fe0:	e65d      	b.n	8012c9e <_printf_float+0xb6>
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	465a      	mov	r2, fp
 8012fe6:	4631      	mov	r1, r6
 8012fe8:	4628      	mov	r0, r5
 8012fea:	47b8      	blx	r7
 8012fec:	3001      	adds	r0, #1
 8012fee:	f43f ae56 	beq.w	8012c9e <_printf_float+0xb6>
 8012ff2:	f108 0801 	add.w	r8, r8, #1
 8012ff6:	45d0      	cmp	r8, sl
 8012ff8:	dbf3      	blt.n	8012fe2 <_printf_float+0x3fa>
 8012ffa:	464b      	mov	r3, r9
 8012ffc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013000:	e6df      	b.n	8012dc2 <_printf_float+0x1da>
 8013002:	f04f 0800 	mov.w	r8, #0
 8013006:	f104 0b1a 	add.w	fp, r4, #26
 801300a:	e7f4      	b.n	8012ff6 <_printf_float+0x40e>
 801300c:	2301      	movs	r3, #1
 801300e:	4642      	mov	r2, r8
 8013010:	e7e1      	b.n	8012fd6 <_printf_float+0x3ee>
 8013012:	2301      	movs	r3, #1
 8013014:	464a      	mov	r2, r9
 8013016:	4631      	mov	r1, r6
 8013018:	4628      	mov	r0, r5
 801301a:	47b8      	blx	r7
 801301c:	3001      	adds	r0, #1
 801301e:	f43f ae3e 	beq.w	8012c9e <_printf_float+0xb6>
 8013022:	f108 0801 	add.w	r8, r8, #1
 8013026:	68e3      	ldr	r3, [r4, #12]
 8013028:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801302a:	1a5b      	subs	r3, r3, r1
 801302c:	4543      	cmp	r3, r8
 801302e:	dcf0      	bgt.n	8013012 <_printf_float+0x42a>
 8013030:	e6fc      	b.n	8012e2c <_printf_float+0x244>
 8013032:	f04f 0800 	mov.w	r8, #0
 8013036:	f104 0919 	add.w	r9, r4, #25
 801303a:	e7f4      	b.n	8013026 <_printf_float+0x43e>

0801303c <_printf_common>:
 801303c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013040:	4616      	mov	r6, r2
 8013042:	4698      	mov	r8, r3
 8013044:	688a      	ldr	r2, [r1, #8]
 8013046:	690b      	ldr	r3, [r1, #16]
 8013048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801304c:	4293      	cmp	r3, r2
 801304e:	bfb8      	it	lt
 8013050:	4613      	movlt	r3, r2
 8013052:	6033      	str	r3, [r6, #0]
 8013054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013058:	4607      	mov	r7, r0
 801305a:	460c      	mov	r4, r1
 801305c:	b10a      	cbz	r2, 8013062 <_printf_common+0x26>
 801305e:	3301      	adds	r3, #1
 8013060:	6033      	str	r3, [r6, #0]
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	0699      	lsls	r1, r3, #26
 8013066:	bf42      	ittt	mi
 8013068:	6833      	ldrmi	r3, [r6, #0]
 801306a:	3302      	addmi	r3, #2
 801306c:	6033      	strmi	r3, [r6, #0]
 801306e:	6825      	ldr	r5, [r4, #0]
 8013070:	f015 0506 	ands.w	r5, r5, #6
 8013074:	d106      	bne.n	8013084 <_printf_common+0x48>
 8013076:	f104 0a19 	add.w	sl, r4, #25
 801307a:	68e3      	ldr	r3, [r4, #12]
 801307c:	6832      	ldr	r2, [r6, #0]
 801307e:	1a9b      	subs	r3, r3, r2
 8013080:	42ab      	cmp	r3, r5
 8013082:	dc26      	bgt.n	80130d2 <_printf_common+0x96>
 8013084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013088:	6822      	ldr	r2, [r4, #0]
 801308a:	3b00      	subs	r3, #0
 801308c:	bf18      	it	ne
 801308e:	2301      	movne	r3, #1
 8013090:	0692      	lsls	r2, r2, #26
 8013092:	d42b      	bmi.n	80130ec <_printf_common+0xb0>
 8013094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013098:	4641      	mov	r1, r8
 801309a:	4638      	mov	r0, r7
 801309c:	47c8      	blx	r9
 801309e:	3001      	adds	r0, #1
 80130a0:	d01e      	beq.n	80130e0 <_printf_common+0xa4>
 80130a2:	6823      	ldr	r3, [r4, #0]
 80130a4:	6922      	ldr	r2, [r4, #16]
 80130a6:	f003 0306 	and.w	r3, r3, #6
 80130aa:	2b04      	cmp	r3, #4
 80130ac:	bf02      	ittt	eq
 80130ae:	68e5      	ldreq	r5, [r4, #12]
 80130b0:	6833      	ldreq	r3, [r6, #0]
 80130b2:	1aed      	subeq	r5, r5, r3
 80130b4:	68a3      	ldr	r3, [r4, #8]
 80130b6:	bf0c      	ite	eq
 80130b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80130bc:	2500      	movne	r5, #0
 80130be:	4293      	cmp	r3, r2
 80130c0:	bfc4      	itt	gt
 80130c2:	1a9b      	subgt	r3, r3, r2
 80130c4:	18ed      	addgt	r5, r5, r3
 80130c6:	2600      	movs	r6, #0
 80130c8:	341a      	adds	r4, #26
 80130ca:	42b5      	cmp	r5, r6
 80130cc:	d11a      	bne.n	8013104 <_printf_common+0xc8>
 80130ce:	2000      	movs	r0, #0
 80130d0:	e008      	b.n	80130e4 <_printf_common+0xa8>
 80130d2:	2301      	movs	r3, #1
 80130d4:	4652      	mov	r2, sl
 80130d6:	4641      	mov	r1, r8
 80130d8:	4638      	mov	r0, r7
 80130da:	47c8      	blx	r9
 80130dc:	3001      	adds	r0, #1
 80130de:	d103      	bne.n	80130e8 <_printf_common+0xac>
 80130e0:	f04f 30ff 	mov.w	r0, #4294967295
 80130e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130e8:	3501      	adds	r5, #1
 80130ea:	e7c6      	b.n	801307a <_printf_common+0x3e>
 80130ec:	18e1      	adds	r1, r4, r3
 80130ee:	1c5a      	adds	r2, r3, #1
 80130f0:	2030      	movs	r0, #48	@ 0x30
 80130f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80130f6:	4422      	add	r2, r4
 80130f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80130fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013100:	3302      	adds	r3, #2
 8013102:	e7c7      	b.n	8013094 <_printf_common+0x58>
 8013104:	2301      	movs	r3, #1
 8013106:	4622      	mov	r2, r4
 8013108:	4641      	mov	r1, r8
 801310a:	4638      	mov	r0, r7
 801310c:	47c8      	blx	r9
 801310e:	3001      	adds	r0, #1
 8013110:	d0e6      	beq.n	80130e0 <_printf_common+0xa4>
 8013112:	3601      	adds	r6, #1
 8013114:	e7d9      	b.n	80130ca <_printf_common+0x8e>
	...

08013118 <_printf_i>:
 8013118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801311c:	7e0f      	ldrb	r7, [r1, #24]
 801311e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013120:	2f78      	cmp	r7, #120	@ 0x78
 8013122:	4691      	mov	r9, r2
 8013124:	4680      	mov	r8, r0
 8013126:	460c      	mov	r4, r1
 8013128:	469a      	mov	sl, r3
 801312a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801312e:	d807      	bhi.n	8013140 <_printf_i+0x28>
 8013130:	2f62      	cmp	r7, #98	@ 0x62
 8013132:	d80a      	bhi.n	801314a <_printf_i+0x32>
 8013134:	2f00      	cmp	r7, #0
 8013136:	f000 80d2 	beq.w	80132de <_printf_i+0x1c6>
 801313a:	2f58      	cmp	r7, #88	@ 0x58
 801313c:	f000 80b9 	beq.w	80132b2 <_printf_i+0x19a>
 8013140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013148:	e03a      	b.n	80131c0 <_printf_i+0xa8>
 801314a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801314e:	2b15      	cmp	r3, #21
 8013150:	d8f6      	bhi.n	8013140 <_printf_i+0x28>
 8013152:	a101      	add	r1, pc, #4	@ (adr r1, 8013158 <_printf_i+0x40>)
 8013154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013158:	080131b1 	.word	0x080131b1
 801315c:	080131c5 	.word	0x080131c5
 8013160:	08013141 	.word	0x08013141
 8013164:	08013141 	.word	0x08013141
 8013168:	08013141 	.word	0x08013141
 801316c:	08013141 	.word	0x08013141
 8013170:	080131c5 	.word	0x080131c5
 8013174:	08013141 	.word	0x08013141
 8013178:	08013141 	.word	0x08013141
 801317c:	08013141 	.word	0x08013141
 8013180:	08013141 	.word	0x08013141
 8013184:	080132c5 	.word	0x080132c5
 8013188:	080131ef 	.word	0x080131ef
 801318c:	0801327f 	.word	0x0801327f
 8013190:	08013141 	.word	0x08013141
 8013194:	08013141 	.word	0x08013141
 8013198:	080132e7 	.word	0x080132e7
 801319c:	08013141 	.word	0x08013141
 80131a0:	080131ef 	.word	0x080131ef
 80131a4:	08013141 	.word	0x08013141
 80131a8:	08013141 	.word	0x08013141
 80131ac:	08013287 	.word	0x08013287
 80131b0:	6833      	ldr	r3, [r6, #0]
 80131b2:	1d1a      	adds	r2, r3, #4
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	6032      	str	r2, [r6, #0]
 80131b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80131c0:	2301      	movs	r3, #1
 80131c2:	e09d      	b.n	8013300 <_printf_i+0x1e8>
 80131c4:	6833      	ldr	r3, [r6, #0]
 80131c6:	6820      	ldr	r0, [r4, #0]
 80131c8:	1d19      	adds	r1, r3, #4
 80131ca:	6031      	str	r1, [r6, #0]
 80131cc:	0606      	lsls	r6, r0, #24
 80131ce:	d501      	bpl.n	80131d4 <_printf_i+0xbc>
 80131d0:	681d      	ldr	r5, [r3, #0]
 80131d2:	e003      	b.n	80131dc <_printf_i+0xc4>
 80131d4:	0645      	lsls	r5, r0, #25
 80131d6:	d5fb      	bpl.n	80131d0 <_printf_i+0xb8>
 80131d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80131dc:	2d00      	cmp	r5, #0
 80131de:	da03      	bge.n	80131e8 <_printf_i+0xd0>
 80131e0:	232d      	movs	r3, #45	@ 0x2d
 80131e2:	426d      	negs	r5, r5
 80131e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131e8:	4859      	ldr	r0, [pc, #356]	@ (8013350 <_printf_i+0x238>)
 80131ea:	230a      	movs	r3, #10
 80131ec:	e011      	b.n	8013212 <_printf_i+0xfa>
 80131ee:	6821      	ldr	r1, [r4, #0]
 80131f0:	6833      	ldr	r3, [r6, #0]
 80131f2:	0608      	lsls	r0, r1, #24
 80131f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80131f8:	d402      	bmi.n	8013200 <_printf_i+0xe8>
 80131fa:	0649      	lsls	r1, r1, #25
 80131fc:	bf48      	it	mi
 80131fe:	b2ad      	uxthmi	r5, r5
 8013200:	2f6f      	cmp	r7, #111	@ 0x6f
 8013202:	4853      	ldr	r0, [pc, #332]	@ (8013350 <_printf_i+0x238>)
 8013204:	6033      	str	r3, [r6, #0]
 8013206:	bf14      	ite	ne
 8013208:	230a      	movne	r3, #10
 801320a:	2308      	moveq	r3, #8
 801320c:	2100      	movs	r1, #0
 801320e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013212:	6866      	ldr	r6, [r4, #4]
 8013214:	60a6      	str	r6, [r4, #8]
 8013216:	2e00      	cmp	r6, #0
 8013218:	bfa2      	ittt	ge
 801321a:	6821      	ldrge	r1, [r4, #0]
 801321c:	f021 0104 	bicge.w	r1, r1, #4
 8013220:	6021      	strge	r1, [r4, #0]
 8013222:	b90d      	cbnz	r5, 8013228 <_printf_i+0x110>
 8013224:	2e00      	cmp	r6, #0
 8013226:	d04b      	beq.n	80132c0 <_printf_i+0x1a8>
 8013228:	4616      	mov	r6, r2
 801322a:	fbb5 f1f3 	udiv	r1, r5, r3
 801322e:	fb03 5711 	mls	r7, r3, r1, r5
 8013232:	5dc7      	ldrb	r7, [r0, r7]
 8013234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013238:	462f      	mov	r7, r5
 801323a:	42bb      	cmp	r3, r7
 801323c:	460d      	mov	r5, r1
 801323e:	d9f4      	bls.n	801322a <_printf_i+0x112>
 8013240:	2b08      	cmp	r3, #8
 8013242:	d10b      	bne.n	801325c <_printf_i+0x144>
 8013244:	6823      	ldr	r3, [r4, #0]
 8013246:	07df      	lsls	r7, r3, #31
 8013248:	d508      	bpl.n	801325c <_printf_i+0x144>
 801324a:	6923      	ldr	r3, [r4, #16]
 801324c:	6861      	ldr	r1, [r4, #4]
 801324e:	4299      	cmp	r1, r3
 8013250:	bfde      	ittt	le
 8013252:	2330      	movle	r3, #48	@ 0x30
 8013254:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013258:	f106 36ff 	addle.w	r6, r6, #4294967295
 801325c:	1b92      	subs	r2, r2, r6
 801325e:	6122      	str	r2, [r4, #16]
 8013260:	f8cd a000 	str.w	sl, [sp]
 8013264:	464b      	mov	r3, r9
 8013266:	aa03      	add	r2, sp, #12
 8013268:	4621      	mov	r1, r4
 801326a:	4640      	mov	r0, r8
 801326c:	f7ff fee6 	bl	801303c <_printf_common>
 8013270:	3001      	adds	r0, #1
 8013272:	d14a      	bne.n	801330a <_printf_i+0x1f2>
 8013274:	f04f 30ff 	mov.w	r0, #4294967295
 8013278:	b004      	add	sp, #16
 801327a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801327e:	6823      	ldr	r3, [r4, #0]
 8013280:	f043 0320 	orr.w	r3, r3, #32
 8013284:	6023      	str	r3, [r4, #0]
 8013286:	4833      	ldr	r0, [pc, #204]	@ (8013354 <_printf_i+0x23c>)
 8013288:	2778      	movs	r7, #120	@ 0x78
 801328a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801328e:	6823      	ldr	r3, [r4, #0]
 8013290:	6831      	ldr	r1, [r6, #0]
 8013292:	061f      	lsls	r7, r3, #24
 8013294:	f851 5b04 	ldr.w	r5, [r1], #4
 8013298:	d402      	bmi.n	80132a0 <_printf_i+0x188>
 801329a:	065f      	lsls	r7, r3, #25
 801329c:	bf48      	it	mi
 801329e:	b2ad      	uxthmi	r5, r5
 80132a0:	6031      	str	r1, [r6, #0]
 80132a2:	07d9      	lsls	r1, r3, #31
 80132a4:	bf44      	itt	mi
 80132a6:	f043 0320 	orrmi.w	r3, r3, #32
 80132aa:	6023      	strmi	r3, [r4, #0]
 80132ac:	b11d      	cbz	r5, 80132b6 <_printf_i+0x19e>
 80132ae:	2310      	movs	r3, #16
 80132b0:	e7ac      	b.n	801320c <_printf_i+0xf4>
 80132b2:	4827      	ldr	r0, [pc, #156]	@ (8013350 <_printf_i+0x238>)
 80132b4:	e7e9      	b.n	801328a <_printf_i+0x172>
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	f023 0320 	bic.w	r3, r3, #32
 80132bc:	6023      	str	r3, [r4, #0]
 80132be:	e7f6      	b.n	80132ae <_printf_i+0x196>
 80132c0:	4616      	mov	r6, r2
 80132c2:	e7bd      	b.n	8013240 <_printf_i+0x128>
 80132c4:	6833      	ldr	r3, [r6, #0]
 80132c6:	6825      	ldr	r5, [r4, #0]
 80132c8:	6961      	ldr	r1, [r4, #20]
 80132ca:	1d18      	adds	r0, r3, #4
 80132cc:	6030      	str	r0, [r6, #0]
 80132ce:	062e      	lsls	r6, r5, #24
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	d501      	bpl.n	80132d8 <_printf_i+0x1c0>
 80132d4:	6019      	str	r1, [r3, #0]
 80132d6:	e002      	b.n	80132de <_printf_i+0x1c6>
 80132d8:	0668      	lsls	r0, r5, #25
 80132da:	d5fb      	bpl.n	80132d4 <_printf_i+0x1bc>
 80132dc:	8019      	strh	r1, [r3, #0]
 80132de:	2300      	movs	r3, #0
 80132e0:	6123      	str	r3, [r4, #16]
 80132e2:	4616      	mov	r6, r2
 80132e4:	e7bc      	b.n	8013260 <_printf_i+0x148>
 80132e6:	6833      	ldr	r3, [r6, #0]
 80132e8:	1d1a      	adds	r2, r3, #4
 80132ea:	6032      	str	r2, [r6, #0]
 80132ec:	681e      	ldr	r6, [r3, #0]
 80132ee:	6862      	ldr	r2, [r4, #4]
 80132f0:	2100      	movs	r1, #0
 80132f2:	4630      	mov	r0, r6
 80132f4:	f7ec ff84 	bl	8000200 <memchr>
 80132f8:	b108      	cbz	r0, 80132fe <_printf_i+0x1e6>
 80132fa:	1b80      	subs	r0, r0, r6
 80132fc:	6060      	str	r0, [r4, #4]
 80132fe:	6863      	ldr	r3, [r4, #4]
 8013300:	6123      	str	r3, [r4, #16]
 8013302:	2300      	movs	r3, #0
 8013304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013308:	e7aa      	b.n	8013260 <_printf_i+0x148>
 801330a:	6923      	ldr	r3, [r4, #16]
 801330c:	4632      	mov	r2, r6
 801330e:	4649      	mov	r1, r9
 8013310:	4640      	mov	r0, r8
 8013312:	47d0      	blx	sl
 8013314:	3001      	adds	r0, #1
 8013316:	d0ad      	beq.n	8013274 <_printf_i+0x15c>
 8013318:	6823      	ldr	r3, [r4, #0]
 801331a:	079b      	lsls	r3, r3, #30
 801331c:	d413      	bmi.n	8013346 <_printf_i+0x22e>
 801331e:	68e0      	ldr	r0, [r4, #12]
 8013320:	9b03      	ldr	r3, [sp, #12]
 8013322:	4298      	cmp	r0, r3
 8013324:	bfb8      	it	lt
 8013326:	4618      	movlt	r0, r3
 8013328:	e7a6      	b.n	8013278 <_printf_i+0x160>
 801332a:	2301      	movs	r3, #1
 801332c:	4632      	mov	r2, r6
 801332e:	4649      	mov	r1, r9
 8013330:	4640      	mov	r0, r8
 8013332:	47d0      	blx	sl
 8013334:	3001      	adds	r0, #1
 8013336:	d09d      	beq.n	8013274 <_printf_i+0x15c>
 8013338:	3501      	adds	r5, #1
 801333a:	68e3      	ldr	r3, [r4, #12]
 801333c:	9903      	ldr	r1, [sp, #12]
 801333e:	1a5b      	subs	r3, r3, r1
 8013340:	42ab      	cmp	r3, r5
 8013342:	dcf2      	bgt.n	801332a <_printf_i+0x212>
 8013344:	e7eb      	b.n	801331e <_printf_i+0x206>
 8013346:	2500      	movs	r5, #0
 8013348:	f104 0619 	add.w	r6, r4, #25
 801334c:	e7f5      	b.n	801333a <_printf_i+0x222>
 801334e:	bf00      	nop
 8013350:	08015546 	.word	0x08015546
 8013354:	08015557 	.word	0x08015557

08013358 <std>:
 8013358:	2300      	movs	r3, #0
 801335a:	b510      	push	{r4, lr}
 801335c:	4604      	mov	r4, r0
 801335e:	e9c0 3300 	strd	r3, r3, [r0]
 8013362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013366:	6083      	str	r3, [r0, #8]
 8013368:	8181      	strh	r1, [r0, #12]
 801336a:	6643      	str	r3, [r0, #100]	@ 0x64
 801336c:	81c2      	strh	r2, [r0, #14]
 801336e:	6183      	str	r3, [r0, #24]
 8013370:	4619      	mov	r1, r3
 8013372:	2208      	movs	r2, #8
 8013374:	305c      	adds	r0, #92	@ 0x5c
 8013376:	f000 f8f4 	bl	8013562 <memset>
 801337a:	4b0d      	ldr	r3, [pc, #52]	@ (80133b0 <std+0x58>)
 801337c:	6263      	str	r3, [r4, #36]	@ 0x24
 801337e:	4b0d      	ldr	r3, [pc, #52]	@ (80133b4 <std+0x5c>)
 8013380:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013382:	4b0d      	ldr	r3, [pc, #52]	@ (80133b8 <std+0x60>)
 8013384:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013386:	4b0d      	ldr	r3, [pc, #52]	@ (80133bc <std+0x64>)
 8013388:	6323      	str	r3, [r4, #48]	@ 0x30
 801338a:	4b0d      	ldr	r3, [pc, #52]	@ (80133c0 <std+0x68>)
 801338c:	6224      	str	r4, [r4, #32]
 801338e:	429c      	cmp	r4, r3
 8013390:	d006      	beq.n	80133a0 <std+0x48>
 8013392:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013396:	4294      	cmp	r4, r2
 8013398:	d002      	beq.n	80133a0 <std+0x48>
 801339a:	33d0      	adds	r3, #208	@ 0xd0
 801339c:	429c      	cmp	r4, r3
 801339e:	d105      	bne.n	80133ac <std+0x54>
 80133a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80133a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133a8:	f000 b958 	b.w	801365c <__retarget_lock_init_recursive>
 80133ac:	bd10      	pop	{r4, pc}
 80133ae:	bf00      	nop
 80133b0:	080134dd 	.word	0x080134dd
 80133b4:	080134ff 	.word	0x080134ff
 80133b8:	08013537 	.word	0x08013537
 80133bc:	0801355b 	.word	0x0801355b
 80133c0:	20006808 	.word	0x20006808

080133c4 <stdio_exit_handler>:
 80133c4:	4a02      	ldr	r2, [pc, #8]	@ (80133d0 <stdio_exit_handler+0xc>)
 80133c6:	4903      	ldr	r1, [pc, #12]	@ (80133d4 <stdio_exit_handler+0x10>)
 80133c8:	4803      	ldr	r0, [pc, #12]	@ (80133d8 <stdio_exit_handler+0x14>)
 80133ca:	f000 b869 	b.w	80134a0 <_fwalk_sglue>
 80133ce:	bf00      	nop
 80133d0:	20000304 	.word	0x20000304
 80133d4:	08014d25 	.word	0x08014d25
 80133d8:	20000314 	.word	0x20000314

080133dc <cleanup_stdio>:
 80133dc:	6841      	ldr	r1, [r0, #4]
 80133de:	4b0c      	ldr	r3, [pc, #48]	@ (8013410 <cleanup_stdio+0x34>)
 80133e0:	4299      	cmp	r1, r3
 80133e2:	b510      	push	{r4, lr}
 80133e4:	4604      	mov	r4, r0
 80133e6:	d001      	beq.n	80133ec <cleanup_stdio+0x10>
 80133e8:	f001 fc9c 	bl	8014d24 <_fflush_r>
 80133ec:	68a1      	ldr	r1, [r4, #8]
 80133ee:	4b09      	ldr	r3, [pc, #36]	@ (8013414 <cleanup_stdio+0x38>)
 80133f0:	4299      	cmp	r1, r3
 80133f2:	d002      	beq.n	80133fa <cleanup_stdio+0x1e>
 80133f4:	4620      	mov	r0, r4
 80133f6:	f001 fc95 	bl	8014d24 <_fflush_r>
 80133fa:	68e1      	ldr	r1, [r4, #12]
 80133fc:	4b06      	ldr	r3, [pc, #24]	@ (8013418 <cleanup_stdio+0x3c>)
 80133fe:	4299      	cmp	r1, r3
 8013400:	d004      	beq.n	801340c <cleanup_stdio+0x30>
 8013402:	4620      	mov	r0, r4
 8013404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013408:	f001 bc8c 	b.w	8014d24 <_fflush_r>
 801340c:	bd10      	pop	{r4, pc}
 801340e:	bf00      	nop
 8013410:	20006808 	.word	0x20006808
 8013414:	20006870 	.word	0x20006870
 8013418:	200068d8 	.word	0x200068d8

0801341c <global_stdio_init.part.0>:
 801341c:	b510      	push	{r4, lr}
 801341e:	4b0b      	ldr	r3, [pc, #44]	@ (801344c <global_stdio_init.part.0+0x30>)
 8013420:	4c0b      	ldr	r4, [pc, #44]	@ (8013450 <global_stdio_init.part.0+0x34>)
 8013422:	4a0c      	ldr	r2, [pc, #48]	@ (8013454 <global_stdio_init.part.0+0x38>)
 8013424:	601a      	str	r2, [r3, #0]
 8013426:	4620      	mov	r0, r4
 8013428:	2200      	movs	r2, #0
 801342a:	2104      	movs	r1, #4
 801342c:	f7ff ff94 	bl	8013358 <std>
 8013430:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013434:	2201      	movs	r2, #1
 8013436:	2109      	movs	r1, #9
 8013438:	f7ff ff8e 	bl	8013358 <std>
 801343c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013440:	2202      	movs	r2, #2
 8013442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013446:	2112      	movs	r1, #18
 8013448:	f7ff bf86 	b.w	8013358 <std>
 801344c:	20006940 	.word	0x20006940
 8013450:	20006808 	.word	0x20006808
 8013454:	080133c5 	.word	0x080133c5

08013458 <__sfp_lock_acquire>:
 8013458:	4801      	ldr	r0, [pc, #4]	@ (8013460 <__sfp_lock_acquire+0x8>)
 801345a:	f000 b900 	b.w	801365e <__retarget_lock_acquire_recursive>
 801345e:	bf00      	nop
 8013460:	20006949 	.word	0x20006949

08013464 <__sfp_lock_release>:
 8013464:	4801      	ldr	r0, [pc, #4]	@ (801346c <__sfp_lock_release+0x8>)
 8013466:	f000 b8fb 	b.w	8013660 <__retarget_lock_release_recursive>
 801346a:	bf00      	nop
 801346c:	20006949 	.word	0x20006949

08013470 <__sinit>:
 8013470:	b510      	push	{r4, lr}
 8013472:	4604      	mov	r4, r0
 8013474:	f7ff fff0 	bl	8013458 <__sfp_lock_acquire>
 8013478:	6a23      	ldr	r3, [r4, #32]
 801347a:	b11b      	cbz	r3, 8013484 <__sinit+0x14>
 801347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013480:	f7ff bff0 	b.w	8013464 <__sfp_lock_release>
 8013484:	4b04      	ldr	r3, [pc, #16]	@ (8013498 <__sinit+0x28>)
 8013486:	6223      	str	r3, [r4, #32]
 8013488:	4b04      	ldr	r3, [pc, #16]	@ (801349c <__sinit+0x2c>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d1f5      	bne.n	801347c <__sinit+0xc>
 8013490:	f7ff ffc4 	bl	801341c <global_stdio_init.part.0>
 8013494:	e7f2      	b.n	801347c <__sinit+0xc>
 8013496:	bf00      	nop
 8013498:	080133dd 	.word	0x080133dd
 801349c:	20006940 	.word	0x20006940

080134a0 <_fwalk_sglue>:
 80134a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134a4:	4607      	mov	r7, r0
 80134a6:	4688      	mov	r8, r1
 80134a8:	4614      	mov	r4, r2
 80134aa:	2600      	movs	r6, #0
 80134ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80134b0:	f1b9 0901 	subs.w	r9, r9, #1
 80134b4:	d505      	bpl.n	80134c2 <_fwalk_sglue+0x22>
 80134b6:	6824      	ldr	r4, [r4, #0]
 80134b8:	2c00      	cmp	r4, #0
 80134ba:	d1f7      	bne.n	80134ac <_fwalk_sglue+0xc>
 80134bc:	4630      	mov	r0, r6
 80134be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c2:	89ab      	ldrh	r3, [r5, #12]
 80134c4:	2b01      	cmp	r3, #1
 80134c6:	d907      	bls.n	80134d8 <_fwalk_sglue+0x38>
 80134c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134cc:	3301      	adds	r3, #1
 80134ce:	d003      	beq.n	80134d8 <_fwalk_sglue+0x38>
 80134d0:	4629      	mov	r1, r5
 80134d2:	4638      	mov	r0, r7
 80134d4:	47c0      	blx	r8
 80134d6:	4306      	orrs	r6, r0
 80134d8:	3568      	adds	r5, #104	@ 0x68
 80134da:	e7e9      	b.n	80134b0 <_fwalk_sglue+0x10>

080134dc <__sread>:
 80134dc:	b510      	push	{r4, lr}
 80134de:	460c      	mov	r4, r1
 80134e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134e4:	f000 f86c 	bl	80135c0 <_read_r>
 80134e8:	2800      	cmp	r0, #0
 80134ea:	bfab      	itete	ge
 80134ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80134ee:	89a3      	ldrhlt	r3, [r4, #12]
 80134f0:	181b      	addge	r3, r3, r0
 80134f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80134f6:	bfac      	ite	ge
 80134f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80134fa:	81a3      	strhlt	r3, [r4, #12]
 80134fc:	bd10      	pop	{r4, pc}

080134fe <__swrite>:
 80134fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013502:	461f      	mov	r7, r3
 8013504:	898b      	ldrh	r3, [r1, #12]
 8013506:	05db      	lsls	r3, r3, #23
 8013508:	4605      	mov	r5, r0
 801350a:	460c      	mov	r4, r1
 801350c:	4616      	mov	r6, r2
 801350e:	d505      	bpl.n	801351c <__swrite+0x1e>
 8013510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013514:	2302      	movs	r3, #2
 8013516:	2200      	movs	r2, #0
 8013518:	f000 f840 	bl	801359c <_lseek_r>
 801351c:	89a3      	ldrh	r3, [r4, #12]
 801351e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013526:	81a3      	strh	r3, [r4, #12]
 8013528:	4632      	mov	r2, r6
 801352a:	463b      	mov	r3, r7
 801352c:	4628      	mov	r0, r5
 801352e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013532:	f000 b857 	b.w	80135e4 <_write_r>

08013536 <__sseek>:
 8013536:	b510      	push	{r4, lr}
 8013538:	460c      	mov	r4, r1
 801353a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801353e:	f000 f82d 	bl	801359c <_lseek_r>
 8013542:	1c43      	adds	r3, r0, #1
 8013544:	89a3      	ldrh	r3, [r4, #12]
 8013546:	bf15      	itete	ne
 8013548:	6560      	strne	r0, [r4, #84]	@ 0x54
 801354a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801354e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013552:	81a3      	strheq	r3, [r4, #12]
 8013554:	bf18      	it	ne
 8013556:	81a3      	strhne	r3, [r4, #12]
 8013558:	bd10      	pop	{r4, pc}

0801355a <__sclose>:
 801355a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801355e:	f000 b80d 	b.w	801357c <_close_r>

08013562 <memset>:
 8013562:	4402      	add	r2, r0
 8013564:	4603      	mov	r3, r0
 8013566:	4293      	cmp	r3, r2
 8013568:	d100      	bne.n	801356c <memset+0xa>
 801356a:	4770      	bx	lr
 801356c:	f803 1b01 	strb.w	r1, [r3], #1
 8013570:	e7f9      	b.n	8013566 <memset+0x4>
	...

08013574 <_localeconv_r>:
 8013574:	4800      	ldr	r0, [pc, #0]	@ (8013578 <_localeconv_r+0x4>)
 8013576:	4770      	bx	lr
 8013578:	20000450 	.word	0x20000450

0801357c <_close_r>:
 801357c:	b538      	push	{r3, r4, r5, lr}
 801357e:	4d06      	ldr	r5, [pc, #24]	@ (8013598 <_close_r+0x1c>)
 8013580:	2300      	movs	r3, #0
 8013582:	4604      	mov	r4, r0
 8013584:	4608      	mov	r0, r1
 8013586:	602b      	str	r3, [r5, #0]
 8013588:	f7ed fd06 	bl	8000f98 <_close>
 801358c:	1c43      	adds	r3, r0, #1
 801358e:	d102      	bne.n	8013596 <_close_r+0x1a>
 8013590:	682b      	ldr	r3, [r5, #0]
 8013592:	b103      	cbz	r3, 8013596 <_close_r+0x1a>
 8013594:	6023      	str	r3, [r4, #0]
 8013596:	bd38      	pop	{r3, r4, r5, pc}
 8013598:	20006944 	.word	0x20006944

0801359c <_lseek_r>:
 801359c:	b538      	push	{r3, r4, r5, lr}
 801359e:	4d07      	ldr	r5, [pc, #28]	@ (80135bc <_lseek_r+0x20>)
 80135a0:	4604      	mov	r4, r0
 80135a2:	4608      	mov	r0, r1
 80135a4:	4611      	mov	r1, r2
 80135a6:	2200      	movs	r2, #0
 80135a8:	602a      	str	r2, [r5, #0]
 80135aa:	461a      	mov	r2, r3
 80135ac:	f7ed fd00 	bl	8000fb0 <_lseek>
 80135b0:	1c43      	adds	r3, r0, #1
 80135b2:	d102      	bne.n	80135ba <_lseek_r+0x1e>
 80135b4:	682b      	ldr	r3, [r5, #0]
 80135b6:	b103      	cbz	r3, 80135ba <_lseek_r+0x1e>
 80135b8:	6023      	str	r3, [r4, #0]
 80135ba:	bd38      	pop	{r3, r4, r5, pc}
 80135bc:	20006944 	.word	0x20006944

080135c0 <_read_r>:
 80135c0:	b538      	push	{r3, r4, r5, lr}
 80135c2:	4d07      	ldr	r5, [pc, #28]	@ (80135e0 <_read_r+0x20>)
 80135c4:	4604      	mov	r4, r0
 80135c6:	4608      	mov	r0, r1
 80135c8:	4611      	mov	r1, r2
 80135ca:	2200      	movs	r2, #0
 80135cc:	602a      	str	r2, [r5, #0]
 80135ce:	461a      	mov	r2, r3
 80135d0:	f7ed fcf0 	bl	8000fb4 <_read>
 80135d4:	1c43      	adds	r3, r0, #1
 80135d6:	d102      	bne.n	80135de <_read_r+0x1e>
 80135d8:	682b      	ldr	r3, [r5, #0]
 80135da:	b103      	cbz	r3, 80135de <_read_r+0x1e>
 80135dc:	6023      	str	r3, [r4, #0]
 80135de:	bd38      	pop	{r3, r4, r5, pc}
 80135e0:	20006944 	.word	0x20006944

080135e4 <_write_r>:
 80135e4:	b538      	push	{r3, r4, r5, lr}
 80135e6:	4d07      	ldr	r5, [pc, #28]	@ (8013604 <_write_r+0x20>)
 80135e8:	4604      	mov	r4, r0
 80135ea:	4608      	mov	r0, r1
 80135ec:	4611      	mov	r1, r2
 80135ee:	2200      	movs	r2, #0
 80135f0:	602a      	str	r2, [r5, #0]
 80135f2:	461a      	mov	r2, r3
 80135f4:	f7ed fcc2 	bl	8000f7c <_write>
 80135f8:	1c43      	adds	r3, r0, #1
 80135fa:	d102      	bne.n	8013602 <_write_r+0x1e>
 80135fc:	682b      	ldr	r3, [r5, #0]
 80135fe:	b103      	cbz	r3, 8013602 <_write_r+0x1e>
 8013600:	6023      	str	r3, [r4, #0]
 8013602:	bd38      	pop	{r3, r4, r5, pc}
 8013604:	20006944 	.word	0x20006944

08013608 <__errno>:
 8013608:	4b01      	ldr	r3, [pc, #4]	@ (8013610 <__errno+0x8>)
 801360a:	6818      	ldr	r0, [r3, #0]
 801360c:	4770      	bx	lr
 801360e:	bf00      	nop
 8013610:	20000310 	.word	0x20000310

08013614 <__libc_init_array>:
 8013614:	b570      	push	{r4, r5, r6, lr}
 8013616:	4d0d      	ldr	r5, [pc, #52]	@ (801364c <__libc_init_array+0x38>)
 8013618:	4c0d      	ldr	r4, [pc, #52]	@ (8013650 <__libc_init_array+0x3c>)
 801361a:	1b64      	subs	r4, r4, r5
 801361c:	10a4      	asrs	r4, r4, #2
 801361e:	2600      	movs	r6, #0
 8013620:	42a6      	cmp	r6, r4
 8013622:	d109      	bne.n	8013638 <__libc_init_array+0x24>
 8013624:	4d0b      	ldr	r5, [pc, #44]	@ (8013654 <__libc_init_array+0x40>)
 8013626:	4c0c      	ldr	r4, [pc, #48]	@ (8013658 <__libc_init_array+0x44>)
 8013628:	f001 febc 	bl	80153a4 <_init>
 801362c:	1b64      	subs	r4, r4, r5
 801362e:	10a4      	asrs	r4, r4, #2
 8013630:	2600      	movs	r6, #0
 8013632:	42a6      	cmp	r6, r4
 8013634:	d105      	bne.n	8013642 <__libc_init_array+0x2e>
 8013636:	bd70      	pop	{r4, r5, r6, pc}
 8013638:	f855 3b04 	ldr.w	r3, [r5], #4
 801363c:	4798      	blx	r3
 801363e:	3601      	adds	r6, #1
 8013640:	e7ee      	b.n	8013620 <__libc_init_array+0xc>
 8013642:	f855 3b04 	ldr.w	r3, [r5], #4
 8013646:	4798      	blx	r3
 8013648:	3601      	adds	r6, #1
 801364a:	e7f2      	b.n	8013632 <__libc_init_array+0x1e>
 801364c:	080158b0 	.word	0x080158b0
 8013650:	080158b0 	.word	0x080158b0
 8013654:	080158b0 	.word	0x080158b0
 8013658:	080158b4 	.word	0x080158b4

0801365c <__retarget_lock_init_recursive>:
 801365c:	4770      	bx	lr

0801365e <__retarget_lock_acquire_recursive>:
 801365e:	4770      	bx	lr

08013660 <__retarget_lock_release_recursive>:
 8013660:	4770      	bx	lr

08013662 <memcpy>:
 8013662:	440a      	add	r2, r1
 8013664:	4291      	cmp	r1, r2
 8013666:	f100 33ff 	add.w	r3, r0, #4294967295
 801366a:	d100      	bne.n	801366e <memcpy+0xc>
 801366c:	4770      	bx	lr
 801366e:	b510      	push	{r4, lr}
 8013670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013678:	4291      	cmp	r1, r2
 801367a:	d1f9      	bne.n	8013670 <memcpy+0xe>
 801367c:	bd10      	pop	{r4, pc}

0801367e <quorem>:
 801367e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013682:	6903      	ldr	r3, [r0, #16]
 8013684:	690c      	ldr	r4, [r1, #16]
 8013686:	42a3      	cmp	r3, r4
 8013688:	4607      	mov	r7, r0
 801368a:	db7e      	blt.n	801378a <quorem+0x10c>
 801368c:	3c01      	subs	r4, #1
 801368e:	f101 0814 	add.w	r8, r1, #20
 8013692:	00a3      	lsls	r3, r4, #2
 8013694:	f100 0514 	add.w	r5, r0, #20
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801369e:	9301      	str	r3, [sp, #4]
 80136a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80136a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136a8:	3301      	adds	r3, #1
 80136aa:	429a      	cmp	r2, r3
 80136ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80136b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80136b4:	d32e      	bcc.n	8013714 <quorem+0x96>
 80136b6:	f04f 0a00 	mov.w	sl, #0
 80136ba:	46c4      	mov	ip, r8
 80136bc:	46ae      	mov	lr, r5
 80136be:	46d3      	mov	fp, sl
 80136c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80136c4:	b298      	uxth	r0, r3
 80136c6:	fb06 a000 	mla	r0, r6, r0, sl
 80136ca:	0c02      	lsrs	r2, r0, #16
 80136cc:	0c1b      	lsrs	r3, r3, #16
 80136ce:	fb06 2303 	mla	r3, r6, r3, r2
 80136d2:	f8de 2000 	ldr.w	r2, [lr]
 80136d6:	b280      	uxth	r0, r0
 80136d8:	b292      	uxth	r2, r2
 80136da:	1a12      	subs	r2, r2, r0
 80136dc:	445a      	add	r2, fp
 80136de:	f8de 0000 	ldr.w	r0, [lr]
 80136e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80136ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80136f0:	b292      	uxth	r2, r2
 80136f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80136f6:	45e1      	cmp	r9, ip
 80136f8:	f84e 2b04 	str.w	r2, [lr], #4
 80136fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013700:	d2de      	bcs.n	80136c0 <quorem+0x42>
 8013702:	9b00      	ldr	r3, [sp, #0]
 8013704:	58eb      	ldr	r3, [r5, r3]
 8013706:	b92b      	cbnz	r3, 8013714 <quorem+0x96>
 8013708:	9b01      	ldr	r3, [sp, #4]
 801370a:	3b04      	subs	r3, #4
 801370c:	429d      	cmp	r5, r3
 801370e:	461a      	mov	r2, r3
 8013710:	d32f      	bcc.n	8013772 <quorem+0xf4>
 8013712:	613c      	str	r4, [r7, #16]
 8013714:	4638      	mov	r0, r7
 8013716:	f001 f979 	bl	8014a0c <__mcmp>
 801371a:	2800      	cmp	r0, #0
 801371c:	db25      	blt.n	801376a <quorem+0xec>
 801371e:	4629      	mov	r1, r5
 8013720:	2000      	movs	r0, #0
 8013722:	f858 2b04 	ldr.w	r2, [r8], #4
 8013726:	f8d1 c000 	ldr.w	ip, [r1]
 801372a:	fa1f fe82 	uxth.w	lr, r2
 801372e:	fa1f f38c 	uxth.w	r3, ip
 8013732:	eba3 030e 	sub.w	r3, r3, lr
 8013736:	4403      	add	r3, r0
 8013738:	0c12      	lsrs	r2, r2, #16
 801373a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801373e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013742:	b29b      	uxth	r3, r3
 8013744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013748:	45c1      	cmp	r9, r8
 801374a:	f841 3b04 	str.w	r3, [r1], #4
 801374e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013752:	d2e6      	bcs.n	8013722 <quorem+0xa4>
 8013754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013758:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801375c:	b922      	cbnz	r2, 8013768 <quorem+0xea>
 801375e:	3b04      	subs	r3, #4
 8013760:	429d      	cmp	r5, r3
 8013762:	461a      	mov	r2, r3
 8013764:	d30b      	bcc.n	801377e <quorem+0x100>
 8013766:	613c      	str	r4, [r7, #16]
 8013768:	3601      	adds	r6, #1
 801376a:	4630      	mov	r0, r6
 801376c:	b003      	add	sp, #12
 801376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013772:	6812      	ldr	r2, [r2, #0]
 8013774:	3b04      	subs	r3, #4
 8013776:	2a00      	cmp	r2, #0
 8013778:	d1cb      	bne.n	8013712 <quorem+0x94>
 801377a:	3c01      	subs	r4, #1
 801377c:	e7c6      	b.n	801370c <quorem+0x8e>
 801377e:	6812      	ldr	r2, [r2, #0]
 8013780:	3b04      	subs	r3, #4
 8013782:	2a00      	cmp	r2, #0
 8013784:	d1ef      	bne.n	8013766 <quorem+0xe8>
 8013786:	3c01      	subs	r4, #1
 8013788:	e7ea      	b.n	8013760 <quorem+0xe2>
 801378a:	2000      	movs	r0, #0
 801378c:	e7ee      	b.n	801376c <quorem+0xee>
	...

08013790 <_dtoa_r>:
 8013790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013794:	69c7      	ldr	r7, [r0, #28]
 8013796:	b099      	sub	sp, #100	@ 0x64
 8013798:	ed8d 0b02 	vstr	d0, [sp, #8]
 801379c:	ec55 4b10 	vmov	r4, r5, d0
 80137a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80137a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80137a4:	4683      	mov	fp, r0
 80137a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80137a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80137aa:	b97f      	cbnz	r7, 80137cc <_dtoa_r+0x3c>
 80137ac:	2010      	movs	r0, #16
 80137ae:	f000 fdfd 	bl	80143ac <malloc>
 80137b2:	4602      	mov	r2, r0
 80137b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80137b8:	b920      	cbnz	r0, 80137c4 <_dtoa_r+0x34>
 80137ba:	4ba7      	ldr	r3, [pc, #668]	@ (8013a58 <_dtoa_r+0x2c8>)
 80137bc:	21ef      	movs	r1, #239	@ 0xef
 80137be:	48a7      	ldr	r0, [pc, #668]	@ (8013a5c <_dtoa_r+0x2cc>)
 80137c0:	f001 fae8 	bl	8014d94 <__assert_func>
 80137c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80137c8:	6007      	str	r7, [r0, #0]
 80137ca:	60c7      	str	r7, [r0, #12]
 80137cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80137d0:	6819      	ldr	r1, [r3, #0]
 80137d2:	b159      	cbz	r1, 80137ec <_dtoa_r+0x5c>
 80137d4:	685a      	ldr	r2, [r3, #4]
 80137d6:	604a      	str	r2, [r1, #4]
 80137d8:	2301      	movs	r3, #1
 80137da:	4093      	lsls	r3, r2
 80137dc:	608b      	str	r3, [r1, #8]
 80137de:	4658      	mov	r0, fp
 80137e0:	f000 feda 	bl	8014598 <_Bfree>
 80137e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80137e8:	2200      	movs	r2, #0
 80137ea:	601a      	str	r2, [r3, #0]
 80137ec:	1e2b      	subs	r3, r5, #0
 80137ee:	bfb9      	ittee	lt
 80137f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80137f4:	9303      	strlt	r3, [sp, #12]
 80137f6:	2300      	movge	r3, #0
 80137f8:	6033      	strge	r3, [r6, #0]
 80137fa:	9f03      	ldr	r7, [sp, #12]
 80137fc:	4b98      	ldr	r3, [pc, #608]	@ (8013a60 <_dtoa_r+0x2d0>)
 80137fe:	bfbc      	itt	lt
 8013800:	2201      	movlt	r2, #1
 8013802:	6032      	strlt	r2, [r6, #0]
 8013804:	43bb      	bics	r3, r7
 8013806:	d112      	bne.n	801382e <_dtoa_r+0x9e>
 8013808:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801380a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801380e:	6013      	str	r3, [r2, #0]
 8013810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013814:	4323      	orrs	r3, r4
 8013816:	f000 854d 	beq.w	80142b4 <_dtoa_r+0xb24>
 801381a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801381c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013a74 <_dtoa_r+0x2e4>
 8013820:	2b00      	cmp	r3, #0
 8013822:	f000 854f 	beq.w	80142c4 <_dtoa_r+0xb34>
 8013826:	f10a 0303 	add.w	r3, sl, #3
 801382a:	f000 bd49 	b.w	80142c0 <_dtoa_r+0xb30>
 801382e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013832:	2200      	movs	r2, #0
 8013834:	ec51 0b17 	vmov	r0, r1, d7
 8013838:	2300      	movs	r3, #0
 801383a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801383e:	f7ed f95b 	bl	8000af8 <__aeabi_dcmpeq>
 8013842:	4680      	mov	r8, r0
 8013844:	b158      	cbz	r0, 801385e <_dtoa_r+0xce>
 8013846:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013848:	2301      	movs	r3, #1
 801384a:	6013      	str	r3, [r2, #0]
 801384c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801384e:	b113      	cbz	r3, 8013856 <_dtoa_r+0xc6>
 8013850:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013852:	4b84      	ldr	r3, [pc, #528]	@ (8013a64 <_dtoa_r+0x2d4>)
 8013854:	6013      	str	r3, [r2, #0]
 8013856:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013a78 <_dtoa_r+0x2e8>
 801385a:	f000 bd33 	b.w	80142c4 <_dtoa_r+0xb34>
 801385e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013862:	aa16      	add	r2, sp, #88	@ 0x58
 8013864:	a917      	add	r1, sp, #92	@ 0x5c
 8013866:	4658      	mov	r0, fp
 8013868:	f001 f980 	bl	8014b6c <__d2b>
 801386c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013870:	4681      	mov	r9, r0
 8013872:	2e00      	cmp	r6, #0
 8013874:	d077      	beq.n	8013966 <_dtoa_r+0x1d6>
 8013876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013878:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801387c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013884:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013888:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801388c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013890:	4619      	mov	r1, r3
 8013892:	2200      	movs	r2, #0
 8013894:	4b74      	ldr	r3, [pc, #464]	@ (8013a68 <_dtoa_r+0x2d8>)
 8013896:	f7ec fd0f 	bl	80002b8 <__aeabi_dsub>
 801389a:	a369      	add	r3, pc, #420	@ (adr r3, 8013a40 <_dtoa_r+0x2b0>)
 801389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a0:	f7ec fec2 	bl	8000628 <__aeabi_dmul>
 80138a4:	a368      	add	r3, pc, #416	@ (adr r3, 8013a48 <_dtoa_r+0x2b8>)
 80138a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138aa:	f7ec fd07 	bl	80002bc <__adddf3>
 80138ae:	4604      	mov	r4, r0
 80138b0:	4630      	mov	r0, r6
 80138b2:	460d      	mov	r5, r1
 80138b4:	f7ec fe4e 	bl	8000554 <__aeabi_i2d>
 80138b8:	a365      	add	r3, pc, #404	@ (adr r3, 8013a50 <_dtoa_r+0x2c0>)
 80138ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138be:	f7ec feb3 	bl	8000628 <__aeabi_dmul>
 80138c2:	4602      	mov	r2, r0
 80138c4:	460b      	mov	r3, r1
 80138c6:	4620      	mov	r0, r4
 80138c8:	4629      	mov	r1, r5
 80138ca:	f7ec fcf7 	bl	80002bc <__adddf3>
 80138ce:	4604      	mov	r4, r0
 80138d0:	460d      	mov	r5, r1
 80138d2:	f7ed f959 	bl	8000b88 <__aeabi_d2iz>
 80138d6:	2200      	movs	r2, #0
 80138d8:	4607      	mov	r7, r0
 80138da:	2300      	movs	r3, #0
 80138dc:	4620      	mov	r0, r4
 80138de:	4629      	mov	r1, r5
 80138e0:	f7ed f914 	bl	8000b0c <__aeabi_dcmplt>
 80138e4:	b140      	cbz	r0, 80138f8 <_dtoa_r+0x168>
 80138e6:	4638      	mov	r0, r7
 80138e8:	f7ec fe34 	bl	8000554 <__aeabi_i2d>
 80138ec:	4622      	mov	r2, r4
 80138ee:	462b      	mov	r3, r5
 80138f0:	f7ed f902 	bl	8000af8 <__aeabi_dcmpeq>
 80138f4:	b900      	cbnz	r0, 80138f8 <_dtoa_r+0x168>
 80138f6:	3f01      	subs	r7, #1
 80138f8:	2f16      	cmp	r7, #22
 80138fa:	d851      	bhi.n	80139a0 <_dtoa_r+0x210>
 80138fc:	4b5b      	ldr	r3, [pc, #364]	@ (8013a6c <_dtoa_r+0x2dc>)
 80138fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801390a:	f7ed f8ff 	bl	8000b0c <__aeabi_dcmplt>
 801390e:	2800      	cmp	r0, #0
 8013910:	d048      	beq.n	80139a4 <_dtoa_r+0x214>
 8013912:	3f01      	subs	r7, #1
 8013914:	2300      	movs	r3, #0
 8013916:	9312      	str	r3, [sp, #72]	@ 0x48
 8013918:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801391a:	1b9b      	subs	r3, r3, r6
 801391c:	1e5a      	subs	r2, r3, #1
 801391e:	bf44      	itt	mi
 8013920:	f1c3 0801 	rsbmi	r8, r3, #1
 8013924:	2300      	movmi	r3, #0
 8013926:	9208      	str	r2, [sp, #32]
 8013928:	bf54      	ite	pl
 801392a:	f04f 0800 	movpl.w	r8, #0
 801392e:	9308      	strmi	r3, [sp, #32]
 8013930:	2f00      	cmp	r7, #0
 8013932:	db39      	blt.n	80139a8 <_dtoa_r+0x218>
 8013934:	9b08      	ldr	r3, [sp, #32]
 8013936:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013938:	443b      	add	r3, r7
 801393a:	9308      	str	r3, [sp, #32]
 801393c:	2300      	movs	r3, #0
 801393e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013942:	2b09      	cmp	r3, #9
 8013944:	d864      	bhi.n	8013a10 <_dtoa_r+0x280>
 8013946:	2b05      	cmp	r3, #5
 8013948:	bfc4      	itt	gt
 801394a:	3b04      	subgt	r3, #4
 801394c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801394e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013950:	f1a3 0302 	sub.w	r3, r3, #2
 8013954:	bfcc      	ite	gt
 8013956:	2400      	movgt	r4, #0
 8013958:	2401      	movle	r4, #1
 801395a:	2b03      	cmp	r3, #3
 801395c:	d863      	bhi.n	8013a26 <_dtoa_r+0x296>
 801395e:	e8df f003 	tbb	[pc, r3]
 8013962:	372a      	.short	0x372a
 8013964:	5535      	.short	0x5535
 8013966:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801396a:	441e      	add	r6, r3
 801396c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013970:	2b20      	cmp	r3, #32
 8013972:	bfc1      	itttt	gt
 8013974:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013978:	409f      	lslgt	r7, r3
 801397a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801397e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013982:	bfd6      	itet	le
 8013984:	f1c3 0320 	rsble	r3, r3, #32
 8013988:	ea47 0003 	orrgt.w	r0, r7, r3
 801398c:	fa04 f003 	lslle.w	r0, r4, r3
 8013990:	f7ec fdd0 	bl	8000534 <__aeabi_ui2d>
 8013994:	2201      	movs	r2, #1
 8013996:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801399a:	3e01      	subs	r6, #1
 801399c:	9214      	str	r2, [sp, #80]	@ 0x50
 801399e:	e777      	b.n	8013890 <_dtoa_r+0x100>
 80139a0:	2301      	movs	r3, #1
 80139a2:	e7b8      	b.n	8013916 <_dtoa_r+0x186>
 80139a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80139a6:	e7b7      	b.n	8013918 <_dtoa_r+0x188>
 80139a8:	427b      	negs	r3, r7
 80139aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80139ac:	2300      	movs	r3, #0
 80139ae:	eba8 0807 	sub.w	r8, r8, r7
 80139b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80139b4:	e7c4      	b.n	8013940 <_dtoa_r+0x1b0>
 80139b6:	2300      	movs	r3, #0
 80139b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139bc:	2b00      	cmp	r3, #0
 80139be:	dc35      	bgt.n	8013a2c <_dtoa_r+0x29c>
 80139c0:	2301      	movs	r3, #1
 80139c2:	9300      	str	r3, [sp, #0]
 80139c4:	9307      	str	r3, [sp, #28]
 80139c6:	461a      	mov	r2, r3
 80139c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80139ca:	e00b      	b.n	80139e4 <_dtoa_r+0x254>
 80139cc:	2301      	movs	r3, #1
 80139ce:	e7f3      	b.n	80139b8 <_dtoa_r+0x228>
 80139d0:	2300      	movs	r3, #0
 80139d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139d6:	18fb      	adds	r3, r7, r3
 80139d8:	9300      	str	r3, [sp, #0]
 80139da:	3301      	adds	r3, #1
 80139dc:	2b01      	cmp	r3, #1
 80139de:	9307      	str	r3, [sp, #28]
 80139e0:	bfb8      	it	lt
 80139e2:	2301      	movlt	r3, #1
 80139e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80139e8:	2100      	movs	r1, #0
 80139ea:	2204      	movs	r2, #4
 80139ec:	f102 0514 	add.w	r5, r2, #20
 80139f0:	429d      	cmp	r5, r3
 80139f2:	d91f      	bls.n	8013a34 <_dtoa_r+0x2a4>
 80139f4:	6041      	str	r1, [r0, #4]
 80139f6:	4658      	mov	r0, fp
 80139f8:	f000 fd8e 	bl	8014518 <_Balloc>
 80139fc:	4682      	mov	sl, r0
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d13c      	bne.n	8013a7c <_dtoa_r+0x2ec>
 8013a02:	4b1b      	ldr	r3, [pc, #108]	@ (8013a70 <_dtoa_r+0x2e0>)
 8013a04:	4602      	mov	r2, r0
 8013a06:	f240 11af 	movw	r1, #431	@ 0x1af
 8013a0a:	e6d8      	b.n	80137be <_dtoa_r+0x2e>
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e7e0      	b.n	80139d2 <_dtoa_r+0x242>
 8013a10:	2401      	movs	r4, #1
 8013a12:	2300      	movs	r3, #0
 8013a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013a18:	f04f 33ff 	mov.w	r3, #4294967295
 8013a1c:	9300      	str	r3, [sp, #0]
 8013a1e:	9307      	str	r3, [sp, #28]
 8013a20:	2200      	movs	r2, #0
 8013a22:	2312      	movs	r3, #18
 8013a24:	e7d0      	b.n	80139c8 <_dtoa_r+0x238>
 8013a26:	2301      	movs	r3, #1
 8013a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a2a:	e7f5      	b.n	8013a18 <_dtoa_r+0x288>
 8013a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a2e:	9300      	str	r3, [sp, #0]
 8013a30:	9307      	str	r3, [sp, #28]
 8013a32:	e7d7      	b.n	80139e4 <_dtoa_r+0x254>
 8013a34:	3101      	adds	r1, #1
 8013a36:	0052      	lsls	r2, r2, #1
 8013a38:	e7d8      	b.n	80139ec <_dtoa_r+0x25c>
 8013a3a:	bf00      	nop
 8013a3c:	f3af 8000 	nop.w
 8013a40:	636f4361 	.word	0x636f4361
 8013a44:	3fd287a7 	.word	0x3fd287a7
 8013a48:	8b60c8b3 	.word	0x8b60c8b3
 8013a4c:	3fc68a28 	.word	0x3fc68a28
 8013a50:	509f79fb 	.word	0x509f79fb
 8013a54:	3fd34413 	.word	0x3fd34413
 8013a58:	08015575 	.word	0x08015575
 8013a5c:	0801558c 	.word	0x0801558c
 8013a60:	7ff00000 	.word	0x7ff00000
 8013a64:	08015545 	.word	0x08015545
 8013a68:	3ff80000 	.word	0x3ff80000
 8013a6c:	08015688 	.word	0x08015688
 8013a70:	080155e4 	.word	0x080155e4
 8013a74:	08015571 	.word	0x08015571
 8013a78:	08015544 	.word	0x08015544
 8013a7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013a80:	6018      	str	r0, [r3, #0]
 8013a82:	9b07      	ldr	r3, [sp, #28]
 8013a84:	2b0e      	cmp	r3, #14
 8013a86:	f200 80a4 	bhi.w	8013bd2 <_dtoa_r+0x442>
 8013a8a:	2c00      	cmp	r4, #0
 8013a8c:	f000 80a1 	beq.w	8013bd2 <_dtoa_r+0x442>
 8013a90:	2f00      	cmp	r7, #0
 8013a92:	dd33      	ble.n	8013afc <_dtoa_r+0x36c>
 8013a94:	4bad      	ldr	r3, [pc, #692]	@ (8013d4c <_dtoa_r+0x5bc>)
 8013a96:	f007 020f 	and.w	r2, r7, #15
 8013a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a9e:	ed93 7b00 	vldr	d7, [r3]
 8013aa2:	05f8      	lsls	r0, r7, #23
 8013aa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013aa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013aac:	d516      	bpl.n	8013adc <_dtoa_r+0x34c>
 8013aae:	4ba8      	ldr	r3, [pc, #672]	@ (8013d50 <_dtoa_r+0x5c0>)
 8013ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013ab8:	f7ec fee0 	bl	800087c <__aeabi_ddiv>
 8013abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ac0:	f004 040f 	and.w	r4, r4, #15
 8013ac4:	2603      	movs	r6, #3
 8013ac6:	4da2      	ldr	r5, [pc, #648]	@ (8013d50 <_dtoa_r+0x5c0>)
 8013ac8:	b954      	cbnz	r4, 8013ae0 <_dtoa_r+0x350>
 8013aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ad2:	f7ec fed3 	bl	800087c <__aeabi_ddiv>
 8013ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ada:	e028      	b.n	8013b2e <_dtoa_r+0x39e>
 8013adc:	2602      	movs	r6, #2
 8013ade:	e7f2      	b.n	8013ac6 <_dtoa_r+0x336>
 8013ae0:	07e1      	lsls	r1, r4, #31
 8013ae2:	d508      	bpl.n	8013af6 <_dtoa_r+0x366>
 8013ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013aec:	f7ec fd9c 	bl	8000628 <__aeabi_dmul>
 8013af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013af4:	3601      	adds	r6, #1
 8013af6:	1064      	asrs	r4, r4, #1
 8013af8:	3508      	adds	r5, #8
 8013afa:	e7e5      	b.n	8013ac8 <_dtoa_r+0x338>
 8013afc:	f000 80d2 	beq.w	8013ca4 <_dtoa_r+0x514>
 8013b00:	427c      	negs	r4, r7
 8013b02:	4b92      	ldr	r3, [pc, #584]	@ (8013d4c <_dtoa_r+0x5bc>)
 8013b04:	4d92      	ldr	r5, [pc, #584]	@ (8013d50 <_dtoa_r+0x5c0>)
 8013b06:	f004 020f 	and.w	r2, r4, #15
 8013b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b16:	f7ec fd87 	bl	8000628 <__aeabi_dmul>
 8013b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b1e:	1124      	asrs	r4, r4, #4
 8013b20:	2300      	movs	r3, #0
 8013b22:	2602      	movs	r6, #2
 8013b24:	2c00      	cmp	r4, #0
 8013b26:	f040 80b2 	bne.w	8013c8e <_dtoa_r+0x4fe>
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d1d3      	bne.n	8013ad6 <_dtoa_r+0x346>
 8013b2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013b30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	f000 80b7 	beq.w	8013ca8 <_dtoa_r+0x518>
 8013b3a:	4b86      	ldr	r3, [pc, #536]	@ (8013d54 <_dtoa_r+0x5c4>)
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	4620      	mov	r0, r4
 8013b40:	4629      	mov	r1, r5
 8013b42:	f7ec ffe3 	bl	8000b0c <__aeabi_dcmplt>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	f000 80ae 	beq.w	8013ca8 <_dtoa_r+0x518>
 8013b4c:	9b07      	ldr	r3, [sp, #28]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	f000 80aa 	beq.w	8013ca8 <_dtoa_r+0x518>
 8013b54:	9b00      	ldr	r3, [sp, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	dd37      	ble.n	8013bca <_dtoa_r+0x43a>
 8013b5a:	1e7b      	subs	r3, r7, #1
 8013b5c:	9304      	str	r3, [sp, #16]
 8013b5e:	4620      	mov	r0, r4
 8013b60:	4b7d      	ldr	r3, [pc, #500]	@ (8013d58 <_dtoa_r+0x5c8>)
 8013b62:	2200      	movs	r2, #0
 8013b64:	4629      	mov	r1, r5
 8013b66:	f7ec fd5f 	bl	8000628 <__aeabi_dmul>
 8013b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b6e:	9c00      	ldr	r4, [sp, #0]
 8013b70:	3601      	adds	r6, #1
 8013b72:	4630      	mov	r0, r6
 8013b74:	f7ec fcee 	bl	8000554 <__aeabi_i2d>
 8013b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013b7c:	f7ec fd54 	bl	8000628 <__aeabi_dmul>
 8013b80:	4b76      	ldr	r3, [pc, #472]	@ (8013d5c <_dtoa_r+0x5cc>)
 8013b82:	2200      	movs	r2, #0
 8013b84:	f7ec fb9a 	bl	80002bc <__adddf3>
 8013b88:	4605      	mov	r5, r0
 8013b8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013b8e:	2c00      	cmp	r4, #0
 8013b90:	f040 808d 	bne.w	8013cae <_dtoa_r+0x51e>
 8013b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b98:	4b71      	ldr	r3, [pc, #452]	@ (8013d60 <_dtoa_r+0x5d0>)
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f7ec fb8c 	bl	80002b8 <__aeabi_dsub>
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013ba8:	462a      	mov	r2, r5
 8013baa:	4633      	mov	r3, r6
 8013bac:	f7ec ffcc 	bl	8000b48 <__aeabi_dcmpgt>
 8013bb0:	2800      	cmp	r0, #0
 8013bb2:	f040 828b 	bne.w	80140cc <_dtoa_r+0x93c>
 8013bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bba:	462a      	mov	r2, r5
 8013bbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013bc0:	f7ec ffa4 	bl	8000b0c <__aeabi_dcmplt>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	f040 8128 	bne.w	8013e1a <_dtoa_r+0x68a>
 8013bca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013bce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013bd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	f2c0 815a 	blt.w	8013e8e <_dtoa_r+0x6fe>
 8013bda:	2f0e      	cmp	r7, #14
 8013bdc:	f300 8157 	bgt.w	8013e8e <_dtoa_r+0x6fe>
 8013be0:	4b5a      	ldr	r3, [pc, #360]	@ (8013d4c <_dtoa_r+0x5bc>)
 8013be2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013be6:	ed93 7b00 	vldr	d7, [r3]
 8013bea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	ed8d 7b00 	vstr	d7, [sp]
 8013bf2:	da03      	bge.n	8013bfc <_dtoa_r+0x46c>
 8013bf4:	9b07      	ldr	r3, [sp, #28]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	f340 8101 	ble.w	8013dfe <_dtoa_r+0x66e>
 8013bfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013c00:	4656      	mov	r6, sl
 8013c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c06:	4620      	mov	r0, r4
 8013c08:	4629      	mov	r1, r5
 8013c0a:	f7ec fe37 	bl	800087c <__aeabi_ddiv>
 8013c0e:	f7ec ffbb 	bl	8000b88 <__aeabi_d2iz>
 8013c12:	4680      	mov	r8, r0
 8013c14:	f7ec fc9e 	bl	8000554 <__aeabi_i2d>
 8013c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c1c:	f7ec fd04 	bl	8000628 <__aeabi_dmul>
 8013c20:	4602      	mov	r2, r0
 8013c22:	460b      	mov	r3, r1
 8013c24:	4620      	mov	r0, r4
 8013c26:	4629      	mov	r1, r5
 8013c28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013c2c:	f7ec fb44 	bl	80002b8 <__aeabi_dsub>
 8013c30:	f806 4b01 	strb.w	r4, [r6], #1
 8013c34:	9d07      	ldr	r5, [sp, #28]
 8013c36:	eba6 040a 	sub.w	r4, r6, sl
 8013c3a:	42a5      	cmp	r5, r4
 8013c3c:	4602      	mov	r2, r0
 8013c3e:	460b      	mov	r3, r1
 8013c40:	f040 8117 	bne.w	8013e72 <_dtoa_r+0x6e2>
 8013c44:	f7ec fb3a 	bl	80002bc <__adddf3>
 8013c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	460d      	mov	r5, r1
 8013c50:	f7ec ff7a 	bl	8000b48 <__aeabi_dcmpgt>
 8013c54:	2800      	cmp	r0, #0
 8013c56:	f040 80f9 	bne.w	8013e4c <_dtoa_r+0x6bc>
 8013c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c5e:	4620      	mov	r0, r4
 8013c60:	4629      	mov	r1, r5
 8013c62:	f7ec ff49 	bl	8000af8 <__aeabi_dcmpeq>
 8013c66:	b118      	cbz	r0, 8013c70 <_dtoa_r+0x4e0>
 8013c68:	f018 0f01 	tst.w	r8, #1
 8013c6c:	f040 80ee 	bne.w	8013e4c <_dtoa_r+0x6bc>
 8013c70:	4649      	mov	r1, r9
 8013c72:	4658      	mov	r0, fp
 8013c74:	f000 fc90 	bl	8014598 <_Bfree>
 8013c78:	2300      	movs	r3, #0
 8013c7a:	7033      	strb	r3, [r6, #0]
 8013c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013c7e:	3701      	adds	r7, #1
 8013c80:	601f      	str	r7, [r3, #0]
 8013c82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	f000 831d 	beq.w	80142c4 <_dtoa_r+0xb34>
 8013c8a:	601e      	str	r6, [r3, #0]
 8013c8c:	e31a      	b.n	80142c4 <_dtoa_r+0xb34>
 8013c8e:	07e2      	lsls	r2, r4, #31
 8013c90:	d505      	bpl.n	8013c9e <_dtoa_r+0x50e>
 8013c92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013c96:	f7ec fcc7 	bl	8000628 <__aeabi_dmul>
 8013c9a:	3601      	adds	r6, #1
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	1064      	asrs	r4, r4, #1
 8013ca0:	3508      	adds	r5, #8
 8013ca2:	e73f      	b.n	8013b24 <_dtoa_r+0x394>
 8013ca4:	2602      	movs	r6, #2
 8013ca6:	e742      	b.n	8013b2e <_dtoa_r+0x39e>
 8013ca8:	9c07      	ldr	r4, [sp, #28]
 8013caa:	9704      	str	r7, [sp, #16]
 8013cac:	e761      	b.n	8013b72 <_dtoa_r+0x3e2>
 8013cae:	4b27      	ldr	r3, [pc, #156]	@ (8013d4c <_dtoa_r+0x5bc>)
 8013cb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013cb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013cb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013cba:	4454      	add	r4, sl
 8013cbc:	2900      	cmp	r1, #0
 8013cbe:	d053      	beq.n	8013d68 <_dtoa_r+0x5d8>
 8013cc0:	4928      	ldr	r1, [pc, #160]	@ (8013d64 <_dtoa_r+0x5d4>)
 8013cc2:	2000      	movs	r0, #0
 8013cc4:	f7ec fdda 	bl	800087c <__aeabi_ddiv>
 8013cc8:	4633      	mov	r3, r6
 8013cca:	462a      	mov	r2, r5
 8013ccc:	f7ec faf4 	bl	80002b8 <__aeabi_dsub>
 8013cd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013cd4:	4656      	mov	r6, sl
 8013cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cda:	f7ec ff55 	bl	8000b88 <__aeabi_d2iz>
 8013cde:	4605      	mov	r5, r0
 8013ce0:	f7ec fc38 	bl	8000554 <__aeabi_i2d>
 8013ce4:	4602      	mov	r2, r0
 8013ce6:	460b      	mov	r3, r1
 8013ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cec:	f7ec fae4 	bl	80002b8 <__aeabi_dsub>
 8013cf0:	3530      	adds	r5, #48	@ 0x30
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013cfa:	f806 5b01 	strb.w	r5, [r6], #1
 8013cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d02:	f7ec ff03 	bl	8000b0c <__aeabi_dcmplt>
 8013d06:	2800      	cmp	r0, #0
 8013d08:	d171      	bne.n	8013dee <_dtoa_r+0x65e>
 8013d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d0e:	4911      	ldr	r1, [pc, #68]	@ (8013d54 <_dtoa_r+0x5c4>)
 8013d10:	2000      	movs	r0, #0
 8013d12:	f7ec fad1 	bl	80002b8 <__aeabi_dsub>
 8013d16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013d1a:	f7ec fef7 	bl	8000b0c <__aeabi_dcmplt>
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	f040 8095 	bne.w	8013e4e <_dtoa_r+0x6be>
 8013d24:	42a6      	cmp	r6, r4
 8013d26:	f43f af50 	beq.w	8013bca <_dtoa_r+0x43a>
 8013d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8013d58 <_dtoa_r+0x5c8>)
 8013d30:	2200      	movs	r2, #0
 8013d32:	f7ec fc79 	bl	8000628 <__aeabi_dmul>
 8013d36:	4b08      	ldr	r3, [pc, #32]	@ (8013d58 <_dtoa_r+0x5c8>)
 8013d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d42:	f7ec fc71 	bl	8000628 <__aeabi_dmul>
 8013d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d4a:	e7c4      	b.n	8013cd6 <_dtoa_r+0x546>
 8013d4c:	08015688 	.word	0x08015688
 8013d50:	08015660 	.word	0x08015660
 8013d54:	3ff00000 	.word	0x3ff00000
 8013d58:	40240000 	.word	0x40240000
 8013d5c:	401c0000 	.word	0x401c0000
 8013d60:	40140000 	.word	0x40140000
 8013d64:	3fe00000 	.word	0x3fe00000
 8013d68:	4631      	mov	r1, r6
 8013d6a:	4628      	mov	r0, r5
 8013d6c:	f7ec fc5c 	bl	8000628 <__aeabi_dmul>
 8013d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d74:	9415      	str	r4, [sp, #84]	@ 0x54
 8013d76:	4656      	mov	r6, sl
 8013d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d7c:	f7ec ff04 	bl	8000b88 <__aeabi_d2iz>
 8013d80:	4605      	mov	r5, r0
 8013d82:	f7ec fbe7 	bl	8000554 <__aeabi_i2d>
 8013d86:	4602      	mov	r2, r0
 8013d88:	460b      	mov	r3, r1
 8013d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d8e:	f7ec fa93 	bl	80002b8 <__aeabi_dsub>
 8013d92:	3530      	adds	r5, #48	@ 0x30
 8013d94:	f806 5b01 	strb.w	r5, [r6], #1
 8013d98:	4602      	mov	r2, r0
 8013d9a:	460b      	mov	r3, r1
 8013d9c:	42a6      	cmp	r6, r4
 8013d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013da2:	f04f 0200 	mov.w	r2, #0
 8013da6:	d124      	bne.n	8013df2 <_dtoa_r+0x662>
 8013da8:	4bac      	ldr	r3, [pc, #688]	@ (801405c <_dtoa_r+0x8cc>)
 8013daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013dae:	f7ec fa85 	bl	80002bc <__adddf3>
 8013db2:	4602      	mov	r2, r0
 8013db4:	460b      	mov	r3, r1
 8013db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dba:	f7ec fec5 	bl	8000b48 <__aeabi_dcmpgt>
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	d145      	bne.n	8013e4e <_dtoa_r+0x6be>
 8013dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013dc6:	49a5      	ldr	r1, [pc, #660]	@ (801405c <_dtoa_r+0x8cc>)
 8013dc8:	2000      	movs	r0, #0
 8013dca:	f7ec fa75 	bl	80002b8 <__aeabi_dsub>
 8013dce:	4602      	mov	r2, r0
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dd6:	f7ec fe99 	bl	8000b0c <__aeabi_dcmplt>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	f43f aef5 	beq.w	8013bca <_dtoa_r+0x43a>
 8013de0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013de2:	1e73      	subs	r3, r6, #1
 8013de4:	9315      	str	r3, [sp, #84]	@ 0x54
 8013de6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013dea:	2b30      	cmp	r3, #48	@ 0x30
 8013dec:	d0f8      	beq.n	8013de0 <_dtoa_r+0x650>
 8013dee:	9f04      	ldr	r7, [sp, #16]
 8013df0:	e73e      	b.n	8013c70 <_dtoa_r+0x4e0>
 8013df2:	4b9b      	ldr	r3, [pc, #620]	@ (8014060 <_dtoa_r+0x8d0>)
 8013df4:	f7ec fc18 	bl	8000628 <__aeabi_dmul>
 8013df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013dfc:	e7bc      	b.n	8013d78 <_dtoa_r+0x5e8>
 8013dfe:	d10c      	bne.n	8013e1a <_dtoa_r+0x68a>
 8013e00:	4b98      	ldr	r3, [pc, #608]	@ (8014064 <_dtoa_r+0x8d4>)
 8013e02:	2200      	movs	r2, #0
 8013e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e08:	f7ec fc0e 	bl	8000628 <__aeabi_dmul>
 8013e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e10:	f7ec fe90 	bl	8000b34 <__aeabi_dcmpge>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	f000 8157 	beq.w	80140c8 <_dtoa_r+0x938>
 8013e1a:	2400      	movs	r4, #0
 8013e1c:	4625      	mov	r5, r4
 8013e1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e20:	43db      	mvns	r3, r3
 8013e22:	9304      	str	r3, [sp, #16]
 8013e24:	4656      	mov	r6, sl
 8013e26:	2700      	movs	r7, #0
 8013e28:	4621      	mov	r1, r4
 8013e2a:	4658      	mov	r0, fp
 8013e2c:	f000 fbb4 	bl	8014598 <_Bfree>
 8013e30:	2d00      	cmp	r5, #0
 8013e32:	d0dc      	beq.n	8013dee <_dtoa_r+0x65e>
 8013e34:	b12f      	cbz	r7, 8013e42 <_dtoa_r+0x6b2>
 8013e36:	42af      	cmp	r7, r5
 8013e38:	d003      	beq.n	8013e42 <_dtoa_r+0x6b2>
 8013e3a:	4639      	mov	r1, r7
 8013e3c:	4658      	mov	r0, fp
 8013e3e:	f000 fbab 	bl	8014598 <_Bfree>
 8013e42:	4629      	mov	r1, r5
 8013e44:	4658      	mov	r0, fp
 8013e46:	f000 fba7 	bl	8014598 <_Bfree>
 8013e4a:	e7d0      	b.n	8013dee <_dtoa_r+0x65e>
 8013e4c:	9704      	str	r7, [sp, #16]
 8013e4e:	4633      	mov	r3, r6
 8013e50:	461e      	mov	r6, r3
 8013e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e56:	2a39      	cmp	r2, #57	@ 0x39
 8013e58:	d107      	bne.n	8013e6a <_dtoa_r+0x6da>
 8013e5a:	459a      	cmp	sl, r3
 8013e5c:	d1f8      	bne.n	8013e50 <_dtoa_r+0x6c0>
 8013e5e:	9a04      	ldr	r2, [sp, #16]
 8013e60:	3201      	adds	r2, #1
 8013e62:	9204      	str	r2, [sp, #16]
 8013e64:	2230      	movs	r2, #48	@ 0x30
 8013e66:	f88a 2000 	strb.w	r2, [sl]
 8013e6a:	781a      	ldrb	r2, [r3, #0]
 8013e6c:	3201      	adds	r2, #1
 8013e6e:	701a      	strb	r2, [r3, #0]
 8013e70:	e7bd      	b.n	8013dee <_dtoa_r+0x65e>
 8013e72:	4b7b      	ldr	r3, [pc, #492]	@ (8014060 <_dtoa_r+0x8d0>)
 8013e74:	2200      	movs	r2, #0
 8013e76:	f7ec fbd7 	bl	8000628 <__aeabi_dmul>
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4604      	mov	r4, r0
 8013e80:	460d      	mov	r5, r1
 8013e82:	f7ec fe39 	bl	8000af8 <__aeabi_dcmpeq>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	f43f aebb 	beq.w	8013c02 <_dtoa_r+0x472>
 8013e8c:	e6f0      	b.n	8013c70 <_dtoa_r+0x4e0>
 8013e8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013e90:	2a00      	cmp	r2, #0
 8013e92:	f000 80db 	beq.w	801404c <_dtoa_r+0x8bc>
 8013e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e98:	2a01      	cmp	r2, #1
 8013e9a:	f300 80bf 	bgt.w	801401c <_dtoa_r+0x88c>
 8013e9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013ea0:	2a00      	cmp	r2, #0
 8013ea2:	f000 80b7 	beq.w	8014014 <_dtoa_r+0x884>
 8013ea6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013eaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013eac:	4646      	mov	r6, r8
 8013eae:	9a08      	ldr	r2, [sp, #32]
 8013eb0:	2101      	movs	r1, #1
 8013eb2:	441a      	add	r2, r3
 8013eb4:	4658      	mov	r0, fp
 8013eb6:	4498      	add	r8, r3
 8013eb8:	9208      	str	r2, [sp, #32]
 8013eba:	f000 fc21 	bl	8014700 <__i2b>
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	b15e      	cbz	r6, 8013eda <_dtoa_r+0x74a>
 8013ec2:	9b08      	ldr	r3, [sp, #32]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	dd08      	ble.n	8013eda <_dtoa_r+0x74a>
 8013ec8:	42b3      	cmp	r3, r6
 8013eca:	9a08      	ldr	r2, [sp, #32]
 8013ecc:	bfa8      	it	ge
 8013ece:	4633      	movge	r3, r6
 8013ed0:	eba8 0803 	sub.w	r8, r8, r3
 8013ed4:	1af6      	subs	r6, r6, r3
 8013ed6:	1ad3      	subs	r3, r2, r3
 8013ed8:	9308      	str	r3, [sp, #32]
 8013eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013edc:	b1f3      	cbz	r3, 8013f1c <_dtoa_r+0x78c>
 8013ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f000 80b7 	beq.w	8014054 <_dtoa_r+0x8c4>
 8013ee6:	b18c      	cbz	r4, 8013f0c <_dtoa_r+0x77c>
 8013ee8:	4629      	mov	r1, r5
 8013eea:	4622      	mov	r2, r4
 8013eec:	4658      	mov	r0, fp
 8013eee:	f000 fcc7 	bl	8014880 <__pow5mult>
 8013ef2:	464a      	mov	r2, r9
 8013ef4:	4601      	mov	r1, r0
 8013ef6:	4605      	mov	r5, r0
 8013ef8:	4658      	mov	r0, fp
 8013efa:	f000 fc17 	bl	801472c <__multiply>
 8013efe:	4649      	mov	r1, r9
 8013f00:	9004      	str	r0, [sp, #16]
 8013f02:	4658      	mov	r0, fp
 8013f04:	f000 fb48 	bl	8014598 <_Bfree>
 8013f08:	9b04      	ldr	r3, [sp, #16]
 8013f0a:	4699      	mov	r9, r3
 8013f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f0e:	1b1a      	subs	r2, r3, r4
 8013f10:	d004      	beq.n	8013f1c <_dtoa_r+0x78c>
 8013f12:	4649      	mov	r1, r9
 8013f14:	4658      	mov	r0, fp
 8013f16:	f000 fcb3 	bl	8014880 <__pow5mult>
 8013f1a:	4681      	mov	r9, r0
 8013f1c:	2101      	movs	r1, #1
 8013f1e:	4658      	mov	r0, fp
 8013f20:	f000 fbee 	bl	8014700 <__i2b>
 8013f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f26:	4604      	mov	r4, r0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f000 81cf 	beq.w	80142cc <_dtoa_r+0xb3c>
 8013f2e:	461a      	mov	r2, r3
 8013f30:	4601      	mov	r1, r0
 8013f32:	4658      	mov	r0, fp
 8013f34:	f000 fca4 	bl	8014880 <__pow5mult>
 8013f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f3a:	2b01      	cmp	r3, #1
 8013f3c:	4604      	mov	r4, r0
 8013f3e:	f300 8095 	bgt.w	801406c <_dtoa_r+0x8dc>
 8013f42:	9b02      	ldr	r3, [sp, #8]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	f040 8087 	bne.w	8014058 <_dtoa_r+0x8c8>
 8013f4a:	9b03      	ldr	r3, [sp, #12]
 8013f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f040 8089 	bne.w	8014068 <_dtoa_r+0x8d8>
 8013f56:	9b03      	ldr	r3, [sp, #12]
 8013f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013f5c:	0d1b      	lsrs	r3, r3, #20
 8013f5e:	051b      	lsls	r3, r3, #20
 8013f60:	b12b      	cbz	r3, 8013f6e <_dtoa_r+0x7de>
 8013f62:	9b08      	ldr	r3, [sp, #32]
 8013f64:	3301      	adds	r3, #1
 8013f66:	9308      	str	r3, [sp, #32]
 8013f68:	f108 0801 	add.w	r8, r8, #1
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	f000 81b0 	beq.w	80142d8 <_dtoa_r+0xb48>
 8013f78:	6923      	ldr	r3, [r4, #16]
 8013f7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013f7e:	6918      	ldr	r0, [r3, #16]
 8013f80:	f000 fb72 	bl	8014668 <__hi0bits>
 8013f84:	f1c0 0020 	rsb	r0, r0, #32
 8013f88:	9b08      	ldr	r3, [sp, #32]
 8013f8a:	4418      	add	r0, r3
 8013f8c:	f010 001f 	ands.w	r0, r0, #31
 8013f90:	d077      	beq.n	8014082 <_dtoa_r+0x8f2>
 8013f92:	f1c0 0320 	rsb	r3, r0, #32
 8013f96:	2b04      	cmp	r3, #4
 8013f98:	dd6b      	ble.n	8014072 <_dtoa_r+0x8e2>
 8013f9a:	9b08      	ldr	r3, [sp, #32]
 8013f9c:	f1c0 001c 	rsb	r0, r0, #28
 8013fa0:	4403      	add	r3, r0
 8013fa2:	4480      	add	r8, r0
 8013fa4:	4406      	add	r6, r0
 8013fa6:	9308      	str	r3, [sp, #32]
 8013fa8:	f1b8 0f00 	cmp.w	r8, #0
 8013fac:	dd05      	ble.n	8013fba <_dtoa_r+0x82a>
 8013fae:	4649      	mov	r1, r9
 8013fb0:	4642      	mov	r2, r8
 8013fb2:	4658      	mov	r0, fp
 8013fb4:	f000 fcbe 	bl	8014934 <__lshift>
 8013fb8:	4681      	mov	r9, r0
 8013fba:	9b08      	ldr	r3, [sp, #32]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	dd05      	ble.n	8013fcc <_dtoa_r+0x83c>
 8013fc0:	4621      	mov	r1, r4
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	4658      	mov	r0, fp
 8013fc6:	f000 fcb5 	bl	8014934 <__lshift>
 8013fca:	4604      	mov	r4, r0
 8013fcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d059      	beq.n	8014086 <_dtoa_r+0x8f6>
 8013fd2:	4621      	mov	r1, r4
 8013fd4:	4648      	mov	r0, r9
 8013fd6:	f000 fd19 	bl	8014a0c <__mcmp>
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	da53      	bge.n	8014086 <_dtoa_r+0x8f6>
 8013fde:	1e7b      	subs	r3, r7, #1
 8013fe0:	9304      	str	r3, [sp, #16]
 8013fe2:	4649      	mov	r1, r9
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	220a      	movs	r2, #10
 8013fe8:	4658      	mov	r0, fp
 8013fea:	f000 faf7 	bl	80145dc <__multadd>
 8013fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ff0:	4681      	mov	r9, r0
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	f000 8172 	beq.w	80142dc <_dtoa_r+0xb4c>
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	4629      	mov	r1, r5
 8013ffc:	220a      	movs	r2, #10
 8013ffe:	4658      	mov	r0, fp
 8014000:	f000 faec 	bl	80145dc <__multadd>
 8014004:	9b00      	ldr	r3, [sp, #0]
 8014006:	2b00      	cmp	r3, #0
 8014008:	4605      	mov	r5, r0
 801400a:	dc67      	bgt.n	80140dc <_dtoa_r+0x94c>
 801400c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801400e:	2b02      	cmp	r3, #2
 8014010:	dc41      	bgt.n	8014096 <_dtoa_r+0x906>
 8014012:	e063      	b.n	80140dc <_dtoa_r+0x94c>
 8014014:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014016:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801401a:	e746      	b.n	8013eaa <_dtoa_r+0x71a>
 801401c:	9b07      	ldr	r3, [sp, #28]
 801401e:	1e5c      	subs	r4, r3, #1
 8014020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014022:	42a3      	cmp	r3, r4
 8014024:	bfbf      	itttt	lt
 8014026:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014028:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801402a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801402c:	1ae3      	sublt	r3, r4, r3
 801402e:	bfb4      	ite	lt
 8014030:	18d2      	addlt	r2, r2, r3
 8014032:	1b1c      	subge	r4, r3, r4
 8014034:	9b07      	ldr	r3, [sp, #28]
 8014036:	bfbc      	itt	lt
 8014038:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801403a:	2400      	movlt	r4, #0
 801403c:	2b00      	cmp	r3, #0
 801403e:	bfb5      	itete	lt
 8014040:	eba8 0603 	sublt.w	r6, r8, r3
 8014044:	9b07      	ldrge	r3, [sp, #28]
 8014046:	2300      	movlt	r3, #0
 8014048:	4646      	movge	r6, r8
 801404a:	e730      	b.n	8013eae <_dtoa_r+0x71e>
 801404c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801404e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014050:	4646      	mov	r6, r8
 8014052:	e735      	b.n	8013ec0 <_dtoa_r+0x730>
 8014054:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014056:	e75c      	b.n	8013f12 <_dtoa_r+0x782>
 8014058:	2300      	movs	r3, #0
 801405a:	e788      	b.n	8013f6e <_dtoa_r+0x7de>
 801405c:	3fe00000 	.word	0x3fe00000
 8014060:	40240000 	.word	0x40240000
 8014064:	40140000 	.word	0x40140000
 8014068:	9b02      	ldr	r3, [sp, #8]
 801406a:	e780      	b.n	8013f6e <_dtoa_r+0x7de>
 801406c:	2300      	movs	r3, #0
 801406e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014070:	e782      	b.n	8013f78 <_dtoa_r+0x7e8>
 8014072:	d099      	beq.n	8013fa8 <_dtoa_r+0x818>
 8014074:	9a08      	ldr	r2, [sp, #32]
 8014076:	331c      	adds	r3, #28
 8014078:	441a      	add	r2, r3
 801407a:	4498      	add	r8, r3
 801407c:	441e      	add	r6, r3
 801407e:	9208      	str	r2, [sp, #32]
 8014080:	e792      	b.n	8013fa8 <_dtoa_r+0x818>
 8014082:	4603      	mov	r3, r0
 8014084:	e7f6      	b.n	8014074 <_dtoa_r+0x8e4>
 8014086:	9b07      	ldr	r3, [sp, #28]
 8014088:	9704      	str	r7, [sp, #16]
 801408a:	2b00      	cmp	r3, #0
 801408c:	dc20      	bgt.n	80140d0 <_dtoa_r+0x940>
 801408e:	9300      	str	r3, [sp, #0]
 8014090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014092:	2b02      	cmp	r3, #2
 8014094:	dd1e      	ble.n	80140d4 <_dtoa_r+0x944>
 8014096:	9b00      	ldr	r3, [sp, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	f47f aec0 	bne.w	8013e1e <_dtoa_r+0x68e>
 801409e:	4621      	mov	r1, r4
 80140a0:	2205      	movs	r2, #5
 80140a2:	4658      	mov	r0, fp
 80140a4:	f000 fa9a 	bl	80145dc <__multadd>
 80140a8:	4601      	mov	r1, r0
 80140aa:	4604      	mov	r4, r0
 80140ac:	4648      	mov	r0, r9
 80140ae:	f000 fcad 	bl	8014a0c <__mcmp>
 80140b2:	2800      	cmp	r0, #0
 80140b4:	f77f aeb3 	ble.w	8013e1e <_dtoa_r+0x68e>
 80140b8:	4656      	mov	r6, sl
 80140ba:	2331      	movs	r3, #49	@ 0x31
 80140bc:	f806 3b01 	strb.w	r3, [r6], #1
 80140c0:	9b04      	ldr	r3, [sp, #16]
 80140c2:	3301      	adds	r3, #1
 80140c4:	9304      	str	r3, [sp, #16]
 80140c6:	e6ae      	b.n	8013e26 <_dtoa_r+0x696>
 80140c8:	9c07      	ldr	r4, [sp, #28]
 80140ca:	9704      	str	r7, [sp, #16]
 80140cc:	4625      	mov	r5, r4
 80140ce:	e7f3      	b.n	80140b8 <_dtoa_r+0x928>
 80140d0:	9b07      	ldr	r3, [sp, #28]
 80140d2:	9300      	str	r3, [sp, #0]
 80140d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f000 8104 	beq.w	80142e4 <_dtoa_r+0xb54>
 80140dc:	2e00      	cmp	r6, #0
 80140de:	dd05      	ble.n	80140ec <_dtoa_r+0x95c>
 80140e0:	4629      	mov	r1, r5
 80140e2:	4632      	mov	r2, r6
 80140e4:	4658      	mov	r0, fp
 80140e6:	f000 fc25 	bl	8014934 <__lshift>
 80140ea:	4605      	mov	r5, r0
 80140ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d05a      	beq.n	80141a8 <_dtoa_r+0xa18>
 80140f2:	6869      	ldr	r1, [r5, #4]
 80140f4:	4658      	mov	r0, fp
 80140f6:	f000 fa0f 	bl	8014518 <_Balloc>
 80140fa:	4606      	mov	r6, r0
 80140fc:	b928      	cbnz	r0, 801410a <_dtoa_r+0x97a>
 80140fe:	4b84      	ldr	r3, [pc, #528]	@ (8014310 <_dtoa_r+0xb80>)
 8014100:	4602      	mov	r2, r0
 8014102:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014106:	f7ff bb5a 	b.w	80137be <_dtoa_r+0x2e>
 801410a:	692a      	ldr	r2, [r5, #16]
 801410c:	3202      	adds	r2, #2
 801410e:	0092      	lsls	r2, r2, #2
 8014110:	f105 010c 	add.w	r1, r5, #12
 8014114:	300c      	adds	r0, #12
 8014116:	f7ff faa4 	bl	8013662 <memcpy>
 801411a:	2201      	movs	r2, #1
 801411c:	4631      	mov	r1, r6
 801411e:	4658      	mov	r0, fp
 8014120:	f000 fc08 	bl	8014934 <__lshift>
 8014124:	f10a 0301 	add.w	r3, sl, #1
 8014128:	9307      	str	r3, [sp, #28]
 801412a:	9b00      	ldr	r3, [sp, #0]
 801412c:	4453      	add	r3, sl
 801412e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014130:	9b02      	ldr	r3, [sp, #8]
 8014132:	f003 0301 	and.w	r3, r3, #1
 8014136:	462f      	mov	r7, r5
 8014138:	930a      	str	r3, [sp, #40]	@ 0x28
 801413a:	4605      	mov	r5, r0
 801413c:	9b07      	ldr	r3, [sp, #28]
 801413e:	4621      	mov	r1, r4
 8014140:	3b01      	subs	r3, #1
 8014142:	4648      	mov	r0, r9
 8014144:	9300      	str	r3, [sp, #0]
 8014146:	f7ff fa9a 	bl	801367e <quorem>
 801414a:	4639      	mov	r1, r7
 801414c:	9002      	str	r0, [sp, #8]
 801414e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014152:	4648      	mov	r0, r9
 8014154:	f000 fc5a 	bl	8014a0c <__mcmp>
 8014158:	462a      	mov	r2, r5
 801415a:	9008      	str	r0, [sp, #32]
 801415c:	4621      	mov	r1, r4
 801415e:	4658      	mov	r0, fp
 8014160:	f000 fc70 	bl	8014a44 <__mdiff>
 8014164:	68c2      	ldr	r2, [r0, #12]
 8014166:	4606      	mov	r6, r0
 8014168:	bb02      	cbnz	r2, 80141ac <_dtoa_r+0xa1c>
 801416a:	4601      	mov	r1, r0
 801416c:	4648      	mov	r0, r9
 801416e:	f000 fc4d 	bl	8014a0c <__mcmp>
 8014172:	4602      	mov	r2, r0
 8014174:	4631      	mov	r1, r6
 8014176:	4658      	mov	r0, fp
 8014178:	920e      	str	r2, [sp, #56]	@ 0x38
 801417a:	f000 fa0d 	bl	8014598 <_Bfree>
 801417e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014180:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014182:	9e07      	ldr	r6, [sp, #28]
 8014184:	ea43 0102 	orr.w	r1, r3, r2
 8014188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801418a:	4319      	orrs	r1, r3
 801418c:	d110      	bne.n	80141b0 <_dtoa_r+0xa20>
 801418e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014192:	d029      	beq.n	80141e8 <_dtoa_r+0xa58>
 8014194:	9b08      	ldr	r3, [sp, #32]
 8014196:	2b00      	cmp	r3, #0
 8014198:	dd02      	ble.n	80141a0 <_dtoa_r+0xa10>
 801419a:	9b02      	ldr	r3, [sp, #8]
 801419c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80141a0:	9b00      	ldr	r3, [sp, #0]
 80141a2:	f883 8000 	strb.w	r8, [r3]
 80141a6:	e63f      	b.n	8013e28 <_dtoa_r+0x698>
 80141a8:	4628      	mov	r0, r5
 80141aa:	e7bb      	b.n	8014124 <_dtoa_r+0x994>
 80141ac:	2201      	movs	r2, #1
 80141ae:	e7e1      	b.n	8014174 <_dtoa_r+0x9e4>
 80141b0:	9b08      	ldr	r3, [sp, #32]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	db04      	blt.n	80141c0 <_dtoa_r+0xa30>
 80141b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80141b8:	430b      	orrs	r3, r1
 80141ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80141bc:	430b      	orrs	r3, r1
 80141be:	d120      	bne.n	8014202 <_dtoa_r+0xa72>
 80141c0:	2a00      	cmp	r2, #0
 80141c2:	dded      	ble.n	80141a0 <_dtoa_r+0xa10>
 80141c4:	4649      	mov	r1, r9
 80141c6:	2201      	movs	r2, #1
 80141c8:	4658      	mov	r0, fp
 80141ca:	f000 fbb3 	bl	8014934 <__lshift>
 80141ce:	4621      	mov	r1, r4
 80141d0:	4681      	mov	r9, r0
 80141d2:	f000 fc1b 	bl	8014a0c <__mcmp>
 80141d6:	2800      	cmp	r0, #0
 80141d8:	dc03      	bgt.n	80141e2 <_dtoa_r+0xa52>
 80141da:	d1e1      	bne.n	80141a0 <_dtoa_r+0xa10>
 80141dc:	f018 0f01 	tst.w	r8, #1
 80141e0:	d0de      	beq.n	80141a0 <_dtoa_r+0xa10>
 80141e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80141e6:	d1d8      	bne.n	801419a <_dtoa_r+0xa0a>
 80141e8:	9a00      	ldr	r2, [sp, #0]
 80141ea:	2339      	movs	r3, #57	@ 0x39
 80141ec:	7013      	strb	r3, [r2, #0]
 80141ee:	4633      	mov	r3, r6
 80141f0:	461e      	mov	r6, r3
 80141f2:	3b01      	subs	r3, #1
 80141f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80141f8:	2a39      	cmp	r2, #57	@ 0x39
 80141fa:	d052      	beq.n	80142a2 <_dtoa_r+0xb12>
 80141fc:	3201      	adds	r2, #1
 80141fe:	701a      	strb	r2, [r3, #0]
 8014200:	e612      	b.n	8013e28 <_dtoa_r+0x698>
 8014202:	2a00      	cmp	r2, #0
 8014204:	dd07      	ble.n	8014216 <_dtoa_r+0xa86>
 8014206:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801420a:	d0ed      	beq.n	80141e8 <_dtoa_r+0xa58>
 801420c:	9a00      	ldr	r2, [sp, #0]
 801420e:	f108 0301 	add.w	r3, r8, #1
 8014212:	7013      	strb	r3, [r2, #0]
 8014214:	e608      	b.n	8013e28 <_dtoa_r+0x698>
 8014216:	9b07      	ldr	r3, [sp, #28]
 8014218:	9a07      	ldr	r2, [sp, #28]
 801421a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801421e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014220:	4293      	cmp	r3, r2
 8014222:	d028      	beq.n	8014276 <_dtoa_r+0xae6>
 8014224:	4649      	mov	r1, r9
 8014226:	2300      	movs	r3, #0
 8014228:	220a      	movs	r2, #10
 801422a:	4658      	mov	r0, fp
 801422c:	f000 f9d6 	bl	80145dc <__multadd>
 8014230:	42af      	cmp	r7, r5
 8014232:	4681      	mov	r9, r0
 8014234:	f04f 0300 	mov.w	r3, #0
 8014238:	f04f 020a 	mov.w	r2, #10
 801423c:	4639      	mov	r1, r7
 801423e:	4658      	mov	r0, fp
 8014240:	d107      	bne.n	8014252 <_dtoa_r+0xac2>
 8014242:	f000 f9cb 	bl	80145dc <__multadd>
 8014246:	4607      	mov	r7, r0
 8014248:	4605      	mov	r5, r0
 801424a:	9b07      	ldr	r3, [sp, #28]
 801424c:	3301      	adds	r3, #1
 801424e:	9307      	str	r3, [sp, #28]
 8014250:	e774      	b.n	801413c <_dtoa_r+0x9ac>
 8014252:	f000 f9c3 	bl	80145dc <__multadd>
 8014256:	4629      	mov	r1, r5
 8014258:	4607      	mov	r7, r0
 801425a:	2300      	movs	r3, #0
 801425c:	220a      	movs	r2, #10
 801425e:	4658      	mov	r0, fp
 8014260:	f000 f9bc 	bl	80145dc <__multadd>
 8014264:	4605      	mov	r5, r0
 8014266:	e7f0      	b.n	801424a <_dtoa_r+0xaba>
 8014268:	9b00      	ldr	r3, [sp, #0]
 801426a:	2b00      	cmp	r3, #0
 801426c:	bfcc      	ite	gt
 801426e:	461e      	movgt	r6, r3
 8014270:	2601      	movle	r6, #1
 8014272:	4456      	add	r6, sl
 8014274:	2700      	movs	r7, #0
 8014276:	4649      	mov	r1, r9
 8014278:	2201      	movs	r2, #1
 801427a:	4658      	mov	r0, fp
 801427c:	f000 fb5a 	bl	8014934 <__lshift>
 8014280:	4621      	mov	r1, r4
 8014282:	4681      	mov	r9, r0
 8014284:	f000 fbc2 	bl	8014a0c <__mcmp>
 8014288:	2800      	cmp	r0, #0
 801428a:	dcb0      	bgt.n	80141ee <_dtoa_r+0xa5e>
 801428c:	d102      	bne.n	8014294 <_dtoa_r+0xb04>
 801428e:	f018 0f01 	tst.w	r8, #1
 8014292:	d1ac      	bne.n	80141ee <_dtoa_r+0xa5e>
 8014294:	4633      	mov	r3, r6
 8014296:	461e      	mov	r6, r3
 8014298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801429c:	2a30      	cmp	r2, #48	@ 0x30
 801429e:	d0fa      	beq.n	8014296 <_dtoa_r+0xb06>
 80142a0:	e5c2      	b.n	8013e28 <_dtoa_r+0x698>
 80142a2:	459a      	cmp	sl, r3
 80142a4:	d1a4      	bne.n	80141f0 <_dtoa_r+0xa60>
 80142a6:	9b04      	ldr	r3, [sp, #16]
 80142a8:	3301      	adds	r3, #1
 80142aa:	9304      	str	r3, [sp, #16]
 80142ac:	2331      	movs	r3, #49	@ 0x31
 80142ae:	f88a 3000 	strb.w	r3, [sl]
 80142b2:	e5b9      	b.n	8013e28 <_dtoa_r+0x698>
 80142b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80142b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014314 <_dtoa_r+0xb84>
 80142ba:	b11b      	cbz	r3, 80142c4 <_dtoa_r+0xb34>
 80142bc:	f10a 0308 	add.w	r3, sl, #8
 80142c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80142c2:	6013      	str	r3, [r2, #0]
 80142c4:	4650      	mov	r0, sl
 80142c6:	b019      	add	sp, #100	@ 0x64
 80142c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	f77f ae37 	ble.w	8013f42 <_dtoa_r+0x7b2>
 80142d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80142d8:	2001      	movs	r0, #1
 80142da:	e655      	b.n	8013f88 <_dtoa_r+0x7f8>
 80142dc:	9b00      	ldr	r3, [sp, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	f77f aed6 	ble.w	8014090 <_dtoa_r+0x900>
 80142e4:	4656      	mov	r6, sl
 80142e6:	4621      	mov	r1, r4
 80142e8:	4648      	mov	r0, r9
 80142ea:	f7ff f9c8 	bl	801367e <quorem>
 80142ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80142f2:	f806 8b01 	strb.w	r8, [r6], #1
 80142f6:	9b00      	ldr	r3, [sp, #0]
 80142f8:	eba6 020a 	sub.w	r2, r6, sl
 80142fc:	4293      	cmp	r3, r2
 80142fe:	ddb3      	ble.n	8014268 <_dtoa_r+0xad8>
 8014300:	4649      	mov	r1, r9
 8014302:	2300      	movs	r3, #0
 8014304:	220a      	movs	r2, #10
 8014306:	4658      	mov	r0, fp
 8014308:	f000 f968 	bl	80145dc <__multadd>
 801430c:	4681      	mov	r9, r0
 801430e:	e7ea      	b.n	80142e6 <_dtoa_r+0xb56>
 8014310:	080155e4 	.word	0x080155e4
 8014314:	08015568 	.word	0x08015568

08014318 <_free_r>:
 8014318:	b538      	push	{r3, r4, r5, lr}
 801431a:	4605      	mov	r5, r0
 801431c:	2900      	cmp	r1, #0
 801431e:	d041      	beq.n	80143a4 <_free_r+0x8c>
 8014320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014324:	1f0c      	subs	r4, r1, #4
 8014326:	2b00      	cmp	r3, #0
 8014328:	bfb8      	it	lt
 801432a:	18e4      	addlt	r4, r4, r3
 801432c:	f000 f8e8 	bl	8014500 <__malloc_lock>
 8014330:	4a1d      	ldr	r2, [pc, #116]	@ (80143a8 <_free_r+0x90>)
 8014332:	6813      	ldr	r3, [r2, #0]
 8014334:	b933      	cbnz	r3, 8014344 <_free_r+0x2c>
 8014336:	6063      	str	r3, [r4, #4]
 8014338:	6014      	str	r4, [r2, #0]
 801433a:	4628      	mov	r0, r5
 801433c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014340:	f000 b8e4 	b.w	801450c <__malloc_unlock>
 8014344:	42a3      	cmp	r3, r4
 8014346:	d908      	bls.n	801435a <_free_r+0x42>
 8014348:	6820      	ldr	r0, [r4, #0]
 801434a:	1821      	adds	r1, r4, r0
 801434c:	428b      	cmp	r3, r1
 801434e:	bf01      	itttt	eq
 8014350:	6819      	ldreq	r1, [r3, #0]
 8014352:	685b      	ldreq	r3, [r3, #4]
 8014354:	1809      	addeq	r1, r1, r0
 8014356:	6021      	streq	r1, [r4, #0]
 8014358:	e7ed      	b.n	8014336 <_free_r+0x1e>
 801435a:	461a      	mov	r2, r3
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	b10b      	cbz	r3, 8014364 <_free_r+0x4c>
 8014360:	42a3      	cmp	r3, r4
 8014362:	d9fa      	bls.n	801435a <_free_r+0x42>
 8014364:	6811      	ldr	r1, [r2, #0]
 8014366:	1850      	adds	r0, r2, r1
 8014368:	42a0      	cmp	r0, r4
 801436a:	d10b      	bne.n	8014384 <_free_r+0x6c>
 801436c:	6820      	ldr	r0, [r4, #0]
 801436e:	4401      	add	r1, r0
 8014370:	1850      	adds	r0, r2, r1
 8014372:	4283      	cmp	r3, r0
 8014374:	6011      	str	r1, [r2, #0]
 8014376:	d1e0      	bne.n	801433a <_free_r+0x22>
 8014378:	6818      	ldr	r0, [r3, #0]
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	6053      	str	r3, [r2, #4]
 801437e:	4408      	add	r0, r1
 8014380:	6010      	str	r0, [r2, #0]
 8014382:	e7da      	b.n	801433a <_free_r+0x22>
 8014384:	d902      	bls.n	801438c <_free_r+0x74>
 8014386:	230c      	movs	r3, #12
 8014388:	602b      	str	r3, [r5, #0]
 801438a:	e7d6      	b.n	801433a <_free_r+0x22>
 801438c:	6820      	ldr	r0, [r4, #0]
 801438e:	1821      	adds	r1, r4, r0
 8014390:	428b      	cmp	r3, r1
 8014392:	bf04      	itt	eq
 8014394:	6819      	ldreq	r1, [r3, #0]
 8014396:	685b      	ldreq	r3, [r3, #4]
 8014398:	6063      	str	r3, [r4, #4]
 801439a:	bf04      	itt	eq
 801439c:	1809      	addeq	r1, r1, r0
 801439e:	6021      	streq	r1, [r4, #0]
 80143a0:	6054      	str	r4, [r2, #4]
 80143a2:	e7ca      	b.n	801433a <_free_r+0x22>
 80143a4:	bd38      	pop	{r3, r4, r5, pc}
 80143a6:	bf00      	nop
 80143a8:	20006950 	.word	0x20006950

080143ac <malloc>:
 80143ac:	4b02      	ldr	r3, [pc, #8]	@ (80143b8 <malloc+0xc>)
 80143ae:	4601      	mov	r1, r0
 80143b0:	6818      	ldr	r0, [r3, #0]
 80143b2:	f000 b825 	b.w	8014400 <_malloc_r>
 80143b6:	bf00      	nop
 80143b8:	20000310 	.word	0x20000310

080143bc <sbrk_aligned>:
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	4e0f      	ldr	r6, [pc, #60]	@ (80143fc <sbrk_aligned+0x40>)
 80143c0:	460c      	mov	r4, r1
 80143c2:	6831      	ldr	r1, [r6, #0]
 80143c4:	4605      	mov	r5, r0
 80143c6:	b911      	cbnz	r1, 80143ce <sbrk_aligned+0x12>
 80143c8:	f000 fcd4 	bl	8014d74 <_sbrk_r>
 80143cc:	6030      	str	r0, [r6, #0]
 80143ce:	4621      	mov	r1, r4
 80143d0:	4628      	mov	r0, r5
 80143d2:	f000 fccf 	bl	8014d74 <_sbrk_r>
 80143d6:	1c43      	adds	r3, r0, #1
 80143d8:	d103      	bne.n	80143e2 <sbrk_aligned+0x26>
 80143da:	f04f 34ff 	mov.w	r4, #4294967295
 80143de:	4620      	mov	r0, r4
 80143e0:	bd70      	pop	{r4, r5, r6, pc}
 80143e2:	1cc4      	adds	r4, r0, #3
 80143e4:	f024 0403 	bic.w	r4, r4, #3
 80143e8:	42a0      	cmp	r0, r4
 80143ea:	d0f8      	beq.n	80143de <sbrk_aligned+0x22>
 80143ec:	1a21      	subs	r1, r4, r0
 80143ee:	4628      	mov	r0, r5
 80143f0:	f000 fcc0 	bl	8014d74 <_sbrk_r>
 80143f4:	3001      	adds	r0, #1
 80143f6:	d1f2      	bne.n	80143de <sbrk_aligned+0x22>
 80143f8:	e7ef      	b.n	80143da <sbrk_aligned+0x1e>
 80143fa:	bf00      	nop
 80143fc:	2000694c 	.word	0x2000694c

08014400 <_malloc_r>:
 8014400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014404:	1ccd      	adds	r5, r1, #3
 8014406:	f025 0503 	bic.w	r5, r5, #3
 801440a:	3508      	adds	r5, #8
 801440c:	2d0c      	cmp	r5, #12
 801440e:	bf38      	it	cc
 8014410:	250c      	movcc	r5, #12
 8014412:	2d00      	cmp	r5, #0
 8014414:	4606      	mov	r6, r0
 8014416:	db01      	blt.n	801441c <_malloc_r+0x1c>
 8014418:	42a9      	cmp	r1, r5
 801441a:	d904      	bls.n	8014426 <_malloc_r+0x26>
 801441c:	230c      	movs	r3, #12
 801441e:	6033      	str	r3, [r6, #0]
 8014420:	2000      	movs	r0, #0
 8014422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80144fc <_malloc_r+0xfc>
 801442a:	f000 f869 	bl	8014500 <__malloc_lock>
 801442e:	f8d8 3000 	ldr.w	r3, [r8]
 8014432:	461c      	mov	r4, r3
 8014434:	bb44      	cbnz	r4, 8014488 <_malloc_r+0x88>
 8014436:	4629      	mov	r1, r5
 8014438:	4630      	mov	r0, r6
 801443a:	f7ff ffbf 	bl	80143bc <sbrk_aligned>
 801443e:	1c43      	adds	r3, r0, #1
 8014440:	4604      	mov	r4, r0
 8014442:	d158      	bne.n	80144f6 <_malloc_r+0xf6>
 8014444:	f8d8 4000 	ldr.w	r4, [r8]
 8014448:	4627      	mov	r7, r4
 801444a:	2f00      	cmp	r7, #0
 801444c:	d143      	bne.n	80144d6 <_malloc_r+0xd6>
 801444e:	2c00      	cmp	r4, #0
 8014450:	d04b      	beq.n	80144ea <_malloc_r+0xea>
 8014452:	6823      	ldr	r3, [r4, #0]
 8014454:	4639      	mov	r1, r7
 8014456:	4630      	mov	r0, r6
 8014458:	eb04 0903 	add.w	r9, r4, r3
 801445c:	f000 fc8a 	bl	8014d74 <_sbrk_r>
 8014460:	4581      	cmp	r9, r0
 8014462:	d142      	bne.n	80144ea <_malloc_r+0xea>
 8014464:	6821      	ldr	r1, [r4, #0]
 8014466:	1a6d      	subs	r5, r5, r1
 8014468:	4629      	mov	r1, r5
 801446a:	4630      	mov	r0, r6
 801446c:	f7ff ffa6 	bl	80143bc <sbrk_aligned>
 8014470:	3001      	adds	r0, #1
 8014472:	d03a      	beq.n	80144ea <_malloc_r+0xea>
 8014474:	6823      	ldr	r3, [r4, #0]
 8014476:	442b      	add	r3, r5
 8014478:	6023      	str	r3, [r4, #0]
 801447a:	f8d8 3000 	ldr.w	r3, [r8]
 801447e:	685a      	ldr	r2, [r3, #4]
 8014480:	bb62      	cbnz	r2, 80144dc <_malloc_r+0xdc>
 8014482:	f8c8 7000 	str.w	r7, [r8]
 8014486:	e00f      	b.n	80144a8 <_malloc_r+0xa8>
 8014488:	6822      	ldr	r2, [r4, #0]
 801448a:	1b52      	subs	r2, r2, r5
 801448c:	d420      	bmi.n	80144d0 <_malloc_r+0xd0>
 801448e:	2a0b      	cmp	r2, #11
 8014490:	d917      	bls.n	80144c2 <_malloc_r+0xc2>
 8014492:	1961      	adds	r1, r4, r5
 8014494:	42a3      	cmp	r3, r4
 8014496:	6025      	str	r5, [r4, #0]
 8014498:	bf18      	it	ne
 801449a:	6059      	strne	r1, [r3, #4]
 801449c:	6863      	ldr	r3, [r4, #4]
 801449e:	bf08      	it	eq
 80144a0:	f8c8 1000 	streq.w	r1, [r8]
 80144a4:	5162      	str	r2, [r4, r5]
 80144a6:	604b      	str	r3, [r1, #4]
 80144a8:	4630      	mov	r0, r6
 80144aa:	f000 f82f 	bl	801450c <__malloc_unlock>
 80144ae:	f104 000b 	add.w	r0, r4, #11
 80144b2:	1d23      	adds	r3, r4, #4
 80144b4:	f020 0007 	bic.w	r0, r0, #7
 80144b8:	1ac2      	subs	r2, r0, r3
 80144ba:	bf1c      	itt	ne
 80144bc:	1a1b      	subne	r3, r3, r0
 80144be:	50a3      	strne	r3, [r4, r2]
 80144c0:	e7af      	b.n	8014422 <_malloc_r+0x22>
 80144c2:	6862      	ldr	r2, [r4, #4]
 80144c4:	42a3      	cmp	r3, r4
 80144c6:	bf0c      	ite	eq
 80144c8:	f8c8 2000 	streq.w	r2, [r8]
 80144cc:	605a      	strne	r2, [r3, #4]
 80144ce:	e7eb      	b.n	80144a8 <_malloc_r+0xa8>
 80144d0:	4623      	mov	r3, r4
 80144d2:	6864      	ldr	r4, [r4, #4]
 80144d4:	e7ae      	b.n	8014434 <_malloc_r+0x34>
 80144d6:	463c      	mov	r4, r7
 80144d8:	687f      	ldr	r7, [r7, #4]
 80144da:	e7b6      	b.n	801444a <_malloc_r+0x4a>
 80144dc:	461a      	mov	r2, r3
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	42a3      	cmp	r3, r4
 80144e2:	d1fb      	bne.n	80144dc <_malloc_r+0xdc>
 80144e4:	2300      	movs	r3, #0
 80144e6:	6053      	str	r3, [r2, #4]
 80144e8:	e7de      	b.n	80144a8 <_malloc_r+0xa8>
 80144ea:	230c      	movs	r3, #12
 80144ec:	6033      	str	r3, [r6, #0]
 80144ee:	4630      	mov	r0, r6
 80144f0:	f000 f80c 	bl	801450c <__malloc_unlock>
 80144f4:	e794      	b.n	8014420 <_malloc_r+0x20>
 80144f6:	6005      	str	r5, [r0, #0]
 80144f8:	e7d6      	b.n	80144a8 <_malloc_r+0xa8>
 80144fa:	bf00      	nop
 80144fc:	20006950 	.word	0x20006950

08014500 <__malloc_lock>:
 8014500:	4801      	ldr	r0, [pc, #4]	@ (8014508 <__malloc_lock+0x8>)
 8014502:	f7ff b8ac 	b.w	801365e <__retarget_lock_acquire_recursive>
 8014506:	bf00      	nop
 8014508:	20006948 	.word	0x20006948

0801450c <__malloc_unlock>:
 801450c:	4801      	ldr	r0, [pc, #4]	@ (8014514 <__malloc_unlock+0x8>)
 801450e:	f7ff b8a7 	b.w	8013660 <__retarget_lock_release_recursive>
 8014512:	bf00      	nop
 8014514:	20006948 	.word	0x20006948

08014518 <_Balloc>:
 8014518:	b570      	push	{r4, r5, r6, lr}
 801451a:	69c6      	ldr	r6, [r0, #28]
 801451c:	4604      	mov	r4, r0
 801451e:	460d      	mov	r5, r1
 8014520:	b976      	cbnz	r6, 8014540 <_Balloc+0x28>
 8014522:	2010      	movs	r0, #16
 8014524:	f7ff ff42 	bl	80143ac <malloc>
 8014528:	4602      	mov	r2, r0
 801452a:	61e0      	str	r0, [r4, #28]
 801452c:	b920      	cbnz	r0, 8014538 <_Balloc+0x20>
 801452e:	4b18      	ldr	r3, [pc, #96]	@ (8014590 <_Balloc+0x78>)
 8014530:	4818      	ldr	r0, [pc, #96]	@ (8014594 <_Balloc+0x7c>)
 8014532:	216b      	movs	r1, #107	@ 0x6b
 8014534:	f000 fc2e 	bl	8014d94 <__assert_func>
 8014538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801453c:	6006      	str	r6, [r0, #0]
 801453e:	60c6      	str	r6, [r0, #12]
 8014540:	69e6      	ldr	r6, [r4, #28]
 8014542:	68f3      	ldr	r3, [r6, #12]
 8014544:	b183      	cbz	r3, 8014568 <_Balloc+0x50>
 8014546:	69e3      	ldr	r3, [r4, #28]
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801454e:	b9b8      	cbnz	r0, 8014580 <_Balloc+0x68>
 8014550:	2101      	movs	r1, #1
 8014552:	fa01 f605 	lsl.w	r6, r1, r5
 8014556:	1d72      	adds	r2, r6, #5
 8014558:	0092      	lsls	r2, r2, #2
 801455a:	4620      	mov	r0, r4
 801455c:	f000 fc38 	bl	8014dd0 <_calloc_r>
 8014560:	b160      	cbz	r0, 801457c <_Balloc+0x64>
 8014562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014566:	e00e      	b.n	8014586 <_Balloc+0x6e>
 8014568:	2221      	movs	r2, #33	@ 0x21
 801456a:	2104      	movs	r1, #4
 801456c:	4620      	mov	r0, r4
 801456e:	f000 fc2f 	bl	8014dd0 <_calloc_r>
 8014572:	69e3      	ldr	r3, [r4, #28]
 8014574:	60f0      	str	r0, [r6, #12]
 8014576:	68db      	ldr	r3, [r3, #12]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d1e4      	bne.n	8014546 <_Balloc+0x2e>
 801457c:	2000      	movs	r0, #0
 801457e:	bd70      	pop	{r4, r5, r6, pc}
 8014580:	6802      	ldr	r2, [r0, #0]
 8014582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014586:	2300      	movs	r3, #0
 8014588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801458c:	e7f7      	b.n	801457e <_Balloc+0x66>
 801458e:	bf00      	nop
 8014590:	08015575 	.word	0x08015575
 8014594:	080155f5 	.word	0x080155f5

08014598 <_Bfree>:
 8014598:	b570      	push	{r4, r5, r6, lr}
 801459a:	69c6      	ldr	r6, [r0, #28]
 801459c:	4605      	mov	r5, r0
 801459e:	460c      	mov	r4, r1
 80145a0:	b976      	cbnz	r6, 80145c0 <_Bfree+0x28>
 80145a2:	2010      	movs	r0, #16
 80145a4:	f7ff ff02 	bl	80143ac <malloc>
 80145a8:	4602      	mov	r2, r0
 80145aa:	61e8      	str	r0, [r5, #28]
 80145ac:	b920      	cbnz	r0, 80145b8 <_Bfree+0x20>
 80145ae:	4b09      	ldr	r3, [pc, #36]	@ (80145d4 <_Bfree+0x3c>)
 80145b0:	4809      	ldr	r0, [pc, #36]	@ (80145d8 <_Bfree+0x40>)
 80145b2:	218f      	movs	r1, #143	@ 0x8f
 80145b4:	f000 fbee 	bl	8014d94 <__assert_func>
 80145b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80145bc:	6006      	str	r6, [r0, #0]
 80145be:	60c6      	str	r6, [r0, #12]
 80145c0:	b13c      	cbz	r4, 80145d2 <_Bfree+0x3a>
 80145c2:	69eb      	ldr	r3, [r5, #28]
 80145c4:	6862      	ldr	r2, [r4, #4]
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80145cc:	6021      	str	r1, [r4, #0]
 80145ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80145d2:	bd70      	pop	{r4, r5, r6, pc}
 80145d4:	08015575 	.word	0x08015575
 80145d8:	080155f5 	.word	0x080155f5

080145dc <__multadd>:
 80145dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145e0:	690d      	ldr	r5, [r1, #16]
 80145e2:	4607      	mov	r7, r0
 80145e4:	460c      	mov	r4, r1
 80145e6:	461e      	mov	r6, r3
 80145e8:	f101 0c14 	add.w	ip, r1, #20
 80145ec:	2000      	movs	r0, #0
 80145ee:	f8dc 3000 	ldr.w	r3, [ip]
 80145f2:	b299      	uxth	r1, r3
 80145f4:	fb02 6101 	mla	r1, r2, r1, r6
 80145f8:	0c1e      	lsrs	r6, r3, #16
 80145fa:	0c0b      	lsrs	r3, r1, #16
 80145fc:	fb02 3306 	mla	r3, r2, r6, r3
 8014600:	b289      	uxth	r1, r1
 8014602:	3001      	adds	r0, #1
 8014604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014608:	4285      	cmp	r5, r0
 801460a:	f84c 1b04 	str.w	r1, [ip], #4
 801460e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014612:	dcec      	bgt.n	80145ee <__multadd+0x12>
 8014614:	b30e      	cbz	r6, 801465a <__multadd+0x7e>
 8014616:	68a3      	ldr	r3, [r4, #8]
 8014618:	42ab      	cmp	r3, r5
 801461a:	dc19      	bgt.n	8014650 <__multadd+0x74>
 801461c:	6861      	ldr	r1, [r4, #4]
 801461e:	4638      	mov	r0, r7
 8014620:	3101      	adds	r1, #1
 8014622:	f7ff ff79 	bl	8014518 <_Balloc>
 8014626:	4680      	mov	r8, r0
 8014628:	b928      	cbnz	r0, 8014636 <__multadd+0x5a>
 801462a:	4602      	mov	r2, r0
 801462c:	4b0c      	ldr	r3, [pc, #48]	@ (8014660 <__multadd+0x84>)
 801462e:	480d      	ldr	r0, [pc, #52]	@ (8014664 <__multadd+0x88>)
 8014630:	21ba      	movs	r1, #186	@ 0xba
 8014632:	f000 fbaf 	bl	8014d94 <__assert_func>
 8014636:	6922      	ldr	r2, [r4, #16]
 8014638:	3202      	adds	r2, #2
 801463a:	f104 010c 	add.w	r1, r4, #12
 801463e:	0092      	lsls	r2, r2, #2
 8014640:	300c      	adds	r0, #12
 8014642:	f7ff f80e 	bl	8013662 <memcpy>
 8014646:	4621      	mov	r1, r4
 8014648:	4638      	mov	r0, r7
 801464a:	f7ff ffa5 	bl	8014598 <_Bfree>
 801464e:	4644      	mov	r4, r8
 8014650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014654:	3501      	adds	r5, #1
 8014656:	615e      	str	r6, [r3, #20]
 8014658:	6125      	str	r5, [r4, #16]
 801465a:	4620      	mov	r0, r4
 801465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014660:	080155e4 	.word	0x080155e4
 8014664:	080155f5 	.word	0x080155f5

08014668 <__hi0bits>:
 8014668:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801466c:	4603      	mov	r3, r0
 801466e:	bf36      	itet	cc
 8014670:	0403      	lslcc	r3, r0, #16
 8014672:	2000      	movcs	r0, #0
 8014674:	2010      	movcc	r0, #16
 8014676:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801467a:	bf3c      	itt	cc
 801467c:	021b      	lslcc	r3, r3, #8
 801467e:	3008      	addcc	r0, #8
 8014680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014684:	bf3c      	itt	cc
 8014686:	011b      	lslcc	r3, r3, #4
 8014688:	3004      	addcc	r0, #4
 801468a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801468e:	bf3c      	itt	cc
 8014690:	009b      	lslcc	r3, r3, #2
 8014692:	3002      	addcc	r0, #2
 8014694:	2b00      	cmp	r3, #0
 8014696:	db05      	blt.n	80146a4 <__hi0bits+0x3c>
 8014698:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801469c:	f100 0001 	add.w	r0, r0, #1
 80146a0:	bf08      	it	eq
 80146a2:	2020      	moveq	r0, #32
 80146a4:	4770      	bx	lr

080146a6 <__lo0bits>:
 80146a6:	6803      	ldr	r3, [r0, #0]
 80146a8:	4602      	mov	r2, r0
 80146aa:	f013 0007 	ands.w	r0, r3, #7
 80146ae:	d00b      	beq.n	80146c8 <__lo0bits+0x22>
 80146b0:	07d9      	lsls	r1, r3, #31
 80146b2:	d421      	bmi.n	80146f8 <__lo0bits+0x52>
 80146b4:	0798      	lsls	r0, r3, #30
 80146b6:	bf49      	itett	mi
 80146b8:	085b      	lsrmi	r3, r3, #1
 80146ba:	089b      	lsrpl	r3, r3, #2
 80146bc:	2001      	movmi	r0, #1
 80146be:	6013      	strmi	r3, [r2, #0]
 80146c0:	bf5c      	itt	pl
 80146c2:	6013      	strpl	r3, [r2, #0]
 80146c4:	2002      	movpl	r0, #2
 80146c6:	4770      	bx	lr
 80146c8:	b299      	uxth	r1, r3
 80146ca:	b909      	cbnz	r1, 80146d0 <__lo0bits+0x2a>
 80146cc:	0c1b      	lsrs	r3, r3, #16
 80146ce:	2010      	movs	r0, #16
 80146d0:	b2d9      	uxtb	r1, r3
 80146d2:	b909      	cbnz	r1, 80146d8 <__lo0bits+0x32>
 80146d4:	3008      	adds	r0, #8
 80146d6:	0a1b      	lsrs	r3, r3, #8
 80146d8:	0719      	lsls	r1, r3, #28
 80146da:	bf04      	itt	eq
 80146dc:	091b      	lsreq	r3, r3, #4
 80146de:	3004      	addeq	r0, #4
 80146e0:	0799      	lsls	r1, r3, #30
 80146e2:	bf04      	itt	eq
 80146e4:	089b      	lsreq	r3, r3, #2
 80146e6:	3002      	addeq	r0, #2
 80146e8:	07d9      	lsls	r1, r3, #31
 80146ea:	d403      	bmi.n	80146f4 <__lo0bits+0x4e>
 80146ec:	085b      	lsrs	r3, r3, #1
 80146ee:	f100 0001 	add.w	r0, r0, #1
 80146f2:	d003      	beq.n	80146fc <__lo0bits+0x56>
 80146f4:	6013      	str	r3, [r2, #0]
 80146f6:	4770      	bx	lr
 80146f8:	2000      	movs	r0, #0
 80146fa:	4770      	bx	lr
 80146fc:	2020      	movs	r0, #32
 80146fe:	4770      	bx	lr

08014700 <__i2b>:
 8014700:	b510      	push	{r4, lr}
 8014702:	460c      	mov	r4, r1
 8014704:	2101      	movs	r1, #1
 8014706:	f7ff ff07 	bl	8014518 <_Balloc>
 801470a:	4602      	mov	r2, r0
 801470c:	b928      	cbnz	r0, 801471a <__i2b+0x1a>
 801470e:	4b05      	ldr	r3, [pc, #20]	@ (8014724 <__i2b+0x24>)
 8014710:	4805      	ldr	r0, [pc, #20]	@ (8014728 <__i2b+0x28>)
 8014712:	f240 1145 	movw	r1, #325	@ 0x145
 8014716:	f000 fb3d 	bl	8014d94 <__assert_func>
 801471a:	2301      	movs	r3, #1
 801471c:	6144      	str	r4, [r0, #20]
 801471e:	6103      	str	r3, [r0, #16]
 8014720:	bd10      	pop	{r4, pc}
 8014722:	bf00      	nop
 8014724:	080155e4 	.word	0x080155e4
 8014728:	080155f5 	.word	0x080155f5

0801472c <__multiply>:
 801472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014730:	4614      	mov	r4, r2
 8014732:	690a      	ldr	r2, [r1, #16]
 8014734:	6923      	ldr	r3, [r4, #16]
 8014736:	429a      	cmp	r2, r3
 8014738:	bfa8      	it	ge
 801473a:	4623      	movge	r3, r4
 801473c:	460f      	mov	r7, r1
 801473e:	bfa4      	itt	ge
 8014740:	460c      	movge	r4, r1
 8014742:	461f      	movge	r7, r3
 8014744:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014748:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801474c:	68a3      	ldr	r3, [r4, #8]
 801474e:	6861      	ldr	r1, [r4, #4]
 8014750:	eb0a 0609 	add.w	r6, sl, r9
 8014754:	42b3      	cmp	r3, r6
 8014756:	b085      	sub	sp, #20
 8014758:	bfb8      	it	lt
 801475a:	3101      	addlt	r1, #1
 801475c:	f7ff fedc 	bl	8014518 <_Balloc>
 8014760:	b930      	cbnz	r0, 8014770 <__multiply+0x44>
 8014762:	4602      	mov	r2, r0
 8014764:	4b44      	ldr	r3, [pc, #272]	@ (8014878 <__multiply+0x14c>)
 8014766:	4845      	ldr	r0, [pc, #276]	@ (801487c <__multiply+0x150>)
 8014768:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801476c:	f000 fb12 	bl	8014d94 <__assert_func>
 8014770:	f100 0514 	add.w	r5, r0, #20
 8014774:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014778:	462b      	mov	r3, r5
 801477a:	2200      	movs	r2, #0
 801477c:	4543      	cmp	r3, r8
 801477e:	d321      	bcc.n	80147c4 <__multiply+0x98>
 8014780:	f107 0114 	add.w	r1, r7, #20
 8014784:	f104 0214 	add.w	r2, r4, #20
 8014788:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801478c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014790:	9302      	str	r3, [sp, #8]
 8014792:	1b13      	subs	r3, r2, r4
 8014794:	3b15      	subs	r3, #21
 8014796:	f023 0303 	bic.w	r3, r3, #3
 801479a:	3304      	adds	r3, #4
 801479c:	f104 0715 	add.w	r7, r4, #21
 80147a0:	42ba      	cmp	r2, r7
 80147a2:	bf38      	it	cc
 80147a4:	2304      	movcc	r3, #4
 80147a6:	9301      	str	r3, [sp, #4]
 80147a8:	9b02      	ldr	r3, [sp, #8]
 80147aa:	9103      	str	r1, [sp, #12]
 80147ac:	428b      	cmp	r3, r1
 80147ae:	d80c      	bhi.n	80147ca <__multiply+0x9e>
 80147b0:	2e00      	cmp	r6, #0
 80147b2:	dd03      	ble.n	80147bc <__multiply+0x90>
 80147b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d05b      	beq.n	8014874 <__multiply+0x148>
 80147bc:	6106      	str	r6, [r0, #16]
 80147be:	b005      	add	sp, #20
 80147c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147c4:	f843 2b04 	str.w	r2, [r3], #4
 80147c8:	e7d8      	b.n	801477c <__multiply+0x50>
 80147ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80147ce:	f1ba 0f00 	cmp.w	sl, #0
 80147d2:	d024      	beq.n	801481e <__multiply+0xf2>
 80147d4:	f104 0e14 	add.w	lr, r4, #20
 80147d8:	46a9      	mov	r9, r5
 80147da:	f04f 0c00 	mov.w	ip, #0
 80147de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80147e2:	f8d9 3000 	ldr.w	r3, [r9]
 80147e6:	fa1f fb87 	uxth.w	fp, r7
 80147ea:	b29b      	uxth	r3, r3
 80147ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80147f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80147f4:	f8d9 7000 	ldr.w	r7, [r9]
 80147f8:	4463      	add	r3, ip
 80147fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80147fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8014802:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014806:	b29b      	uxth	r3, r3
 8014808:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801480c:	4572      	cmp	r2, lr
 801480e:	f849 3b04 	str.w	r3, [r9], #4
 8014812:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014816:	d8e2      	bhi.n	80147de <__multiply+0xb2>
 8014818:	9b01      	ldr	r3, [sp, #4]
 801481a:	f845 c003 	str.w	ip, [r5, r3]
 801481e:	9b03      	ldr	r3, [sp, #12]
 8014820:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014824:	3104      	adds	r1, #4
 8014826:	f1b9 0f00 	cmp.w	r9, #0
 801482a:	d021      	beq.n	8014870 <__multiply+0x144>
 801482c:	682b      	ldr	r3, [r5, #0]
 801482e:	f104 0c14 	add.w	ip, r4, #20
 8014832:	46ae      	mov	lr, r5
 8014834:	f04f 0a00 	mov.w	sl, #0
 8014838:	f8bc b000 	ldrh.w	fp, [ip]
 801483c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014840:	fb09 770b 	mla	r7, r9, fp, r7
 8014844:	4457      	add	r7, sl
 8014846:	b29b      	uxth	r3, r3
 8014848:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801484c:	f84e 3b04 	str.w	r3, [lr], #4
 8014850:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014854:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014858:	f8be 3000 	ldrh.w	r3, [lr]
 801485c:	fb09 330a 	mla	r3, r9, sl, r3
 8014860:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014864:	4562      	cmp	r2, ip
 8014866:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801486a:	d8e5      	bhi.n	8014838 <__multiply+0x10c>
 801486c:	9f01      	ldr	r7, [sp, #4]
 801486e:	51eb      	str	r3, [r5, r7]
 8014870:	3504      	adds	r5, #4
 8014872:	e799      	b.n	80147a8 <__multiply+0x7c>
 8014874:	3e01      	subs	r6, #1
 8014876:	e79b      	b.n	80147b0 <__multiply+0x84>
 8014878:	080155e4 	.word	0x080155e4
 801487c:	080155f5 	.word	0x080155f5

08014880 <__pow5mult>:
 8014880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014884:	4615      	mov	r5, r2
 8014886:	f012 0203 	ands.w	r2, r2, #3
 801488a:	4607      	mov	r7, r0
 801488c:	460e      	mov	r6, r1
 801488e:	d007      	beq.n	80148a0 <__pow5mult+0x20>
 8014890:	4c25      	ldr	r4, [pc, #148]	@ (8014928 <__pow5mult+0xa8>)
 8014892:	3a01      	subs	r2, #1
 8014894:	2300      	movs	r3, #0
 8014896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801489a:	f7ff fe9f 	bl	80145dc <__multadd>
 801489e:	4606      	mov	r6, r0
 80148a0:	10ad      	asrs	r5, r5, #2
 80148a2:	d03d      	beq.n	8014920 <__pow5mult+0xa0>
 80148a4:	69fc      	ldr	r4, [r7, #28]
 80148a6:	b97c      	cbnz	r4, 80148c8 <__pow5mult+0x48>
 80148a8:	2010      	movs	r0, #16
 80148aa:	f7ff fd7f 	bl	80143ac <malloc>
 80148ae:	4602      	mov	r2, r0
 80148b0:	61f8      	str	r0, [r7, #28]
 80148b2:	b928      	cbnz	r0, 80148c0 <__pow5mult+0x40>
 80148b4:	4b1d      	ldr	r3, [pc, #116]	@ (801492c <__pow5mult+0xac>)
 80148b6:	481e      	ldr	r0, [pc, #120]	@ (8014930 <__pow5mult+0xb0>)
 80148b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80148bc:	f000 fa6a 	bl	8014d94 <__assert_func>
 80148c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148c4:	6004      	str	r4, [r0, #0]
 80148c6:	60c4      	str	r4, [r0, #12]
 80148c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80148cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80148d0:	b94c      	cbnz	r4, 80148e6 <__pow5mult+0x66>
 80148d2:	f240 2171 	movw	r1, #625	@ 0x271
 80148d6:	4638      	mov	r0, r7
 80148d8:	f7ff ff12 	bl	8014700 <__i2b>
 80148dc:	2300      	movs	r3, #0
 80148de:	f8c8 0008 	str.w	r0, [r8, #8]
 80148e2:	4604      	mov	r4, r0
 80148e4:	6003      	str	r3, [r0, #0]
 80148e6:	f04f 0900 	mov.w	r9, #0
 80148ea:	07eb      	lsls	r3, r5, #31
 80148ec:	d50a      	bpl.n	8014904 <__pow5mult+0x84>
 80148ee:	4631      	mov	r1, r6
 80148f0:	4622      	mov	r2, r4
 80148f2:	4638      	mov	r0, r7
 80148f4:	f7ff ff1a 	bl	801472c <__multiply>
 80148f8:	4631      	mov	r1, r6
 80148fa:	4680      	mov	r8, r0
 80148fc:	4638      	mov	r0, r7
 80148fe:	f7ff fe4b 	bl	8014598 <_Bfree>
 8014902:	4646      	mov	r6, r8
 8014904:	106d      	asrs	r5, r5, #1
 8014906:	d00b      	beq.n	8014920 <__pow5mult+0xa0>
 8014908:	6820      	ldr	r0, [r4, #0]
 801490a:	b938      	cbnz	r0, 801491c <__pow5mult+0x9c>
 801490c:	4622      	mov	r2, r4
 801490e:	4621      	mov	r1, r4
 8014910:	4638      	mov	r0, r7
 8014912:	f7ff ff0b 	bl	801472c <__multiply>
 8014916:	6020      	str	r0, [r4, #0]
 8014918:	f8c0 9000 	str.w	r9, [r0]
 801491c:	4604      	mov	r4, r0
 801491e:	e7e4      	b.n	80148ea <__pow5mult+0x6a>
 8014920:	4630      	mov	r0, r6
 8014922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014926:	bf00      	nop
 8014928:	08015650 	.word	0x08015650
 801492c:	08015575 	.word	0x08015575
 8014930:	080155f5 	.word	0x080155f5

08014934 <__lshift>:
 8014934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014938:	460c      	mov	r4, r1
 801493a:	6849      	ldr	r1, [r1, #4]
 801493c:	6923      	ldr	r3, [r4, #16]
 801493e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014942:	68a3      	ldr	r3, [r4, #8]
 8014944:	4607      	mov	r7, r0
 8014946:	4691      	mov	r9, r2
 8014948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801494c:	f108 0601 	add.w	r6, r8, #1
 8014950:	42b3      	cmp	r3, r6
 8014952:	db0b      	blt.n	801496c <__lshift+0x38>
 8014954:	4638      	mov	r0, r7
 8014956:	f7ff fddf 	bl	8014518 <_Balloc>
 801495a:	4605      	mov	r5, r0
 801495c:	b948      	cbnz	r0, 8014972 <__lshift+0x3e>
 801495e:	4602      	mov	r2, r0
 8014960:	4b28      	ldr	r3, [pc, #160]	@ (8014a04 <__lshift+0xd0>)
 8014962:	4829      	ldr	r0, [pc, #164]	@ (8014a08 <__lshift+0xd4>)
 8014964:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014968:	f000 fa14 	bl	8014d94 <__assert_func>
 801496c:	3101      	adds	r1, #1
 801496e:	005b      	lsls	r3, r3, #1
 8014970:	e7ee      	b.n	8014950 <__lshift+0x1c>
 8014972:	2300      	movs	r3, #0
 8014974:	f100 0114 	add.w	r1, r0, #20
 8014978:	f100 0210 	add.w	r2, r0, #16
 801497c:	4618      	mov	r0, r3
 801497e:	4553      	cmp	r3, sl
 8014980:	db33      	blt.n	80149ea <__lshift+0xb6>
 8014982:	6920      	ldr	r0, [r4, #16]
 8014984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014988:	f104 0314 	add.w	r3, r4, #20
 801498c:	f019 091f 	ands.w	r9, r9, #31
 8014990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014998:	d02b      	beq.n	80149f2 <__lshift+0xbe>
 801499a:	f1c9 0e20 	rsb	lr, r9, #32
 801499e:	468a      	mov	sl, r1
 80149a0:	2200      	movs	r2, #0
 80149a2:	6818      	ldr	r0, [r3, #0]
 80149a4:	fa00 f009 	lsl.w	r0, r0, r9
 80149a8:	4310      	orrs	r0, r2
 80149aa:	f84a 0b04 	str.w	r0, [sl], #4
 80149ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80149b2:	459c      	cmp	ip, r3
 80149b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80149b8:	d8f3      	bhi.n	80149a2 <__lshift+0x6e>
 80149ba:	ebac 0304 	sub.w	r3, ip, r4
 80149be:	3b15      	subs	r3, #21
 80149c0:	f023 0303 	bic.w	r3, r3, #3
 80149c4:	3304      	adds	r3, #4
 80149c6:	f104 0015 	add.w	r0, r4, #21
 80149ca:	4584      	cmp	ip, r0
 80149cc:	bf38      	it	cc
 80149ce:	2304      	movcc	r3, #4
 80149d0:	50ca      	str	r2, [r1, r3]
 80149d2:	b10a      	cbz	r2, 80149d8 <__lshift+0xa4>
 80149d4:	f108 0602 	add.w	r6, r8, #2
 80149d8:	3e01      	subs	r6, #1
 80149da:	4638      	mov	r0, r7
 80149dc:	612e      	str	r6, [r5, #16]
 80149de:	4621      	mov	r1, r4
 80149e0:	f7ff fdda 	bl	8014598 <_Bfree>
 80149e4:	4628      	mov	r0, r5
 80149e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80149ee:	3301      	adds	r3, #1
 80149f0:	e7c5      	b.n	801497e <__lshift+0x4a>
 80149f2:	3904      	subs	r1, #4
 80149f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80149f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80149fc:	459c      	cmp	ip, r3
 80149fe:	d8f9      	bhi.n	80149f4 <__lshift+0xc0>
 8014a00:	e7ea      	b.n	80149d8 <__lshift+0xa4>
 8014a02:	bf00      	nop
 8014a04:	080155e4 	.word	0x080155e4
 8014a08:	080155f5 	.word	0x080155f5

08014a0c <__mcmp>:
 8014a0c:	690a      	ldr	r2, [r1, #16]
 8014a0e:	4603      	mov	r3, r0
 8014a10:	6900      	ldr	r0, [r0, #16]
 8014a12:	1a80      	subs	r0, r0, r2
 8014a14:	b530      	push	{r4, r5, lr}
 8014a16:	d10e      	bne.n	8014a36 <__mcmp+0x2a>
 8014a18:	3314      	adds	r3, #20
 8014a1a:	3114      	adds	r1, #20
 8014a1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014a20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014a24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014a28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014a2c:	4295      	cmp	r5, r2
 8014a2e:	d003      	beq.n	8014a38 <__mcmp+0x2c>
 8014a30:	d205      	bcs.n	8014a3e <__mcmp+0x32>
 8014a32:	f04f 30ff 	mov.w	r0, #4294967295
 8014a36:	bd30      	pop	{r4, r5, pc}
 8014a38:	42a3      	cmp	r3, r4
 8014a3a:	d3f3      	bcc.n	8014a24 <__mcmp+0x18>
 8014a3c:	e7fb      	b.n	8014a36 <__mcmp+0x2a>
 8014a3e:	2001      	movs	r0, #1
 8014a40:	e7f9      	b.n	8014a36 <__mcmp+0x2a>
	...

08014a44 <__mdiff>:
 8014a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a48:	4689      	mov	r9, r1
 8014a4a:	4606      	mov	r6, r0
 8014a4c:	4611      	mov	r1, r2
 8014a4e:	4648      	mov	r0, r9
 8014a50:	4614      	mov	r4, r2
 8014a52:	f7ff ffdb 	bl	8014a0c <__mcmp>
 8014a56:	1e05      	subs	r5, r0, #0
 8014a58:	d112      	bne.n	8014a80 <__mdiff+0x3c>
 8014a5a:	4629      	mov	r1, r5
 8014a5c:	4630      	mov	r0, r6
 8014a5e:	f7ff fd5b 	bl	8014518 <_Balloc>
 8014a62:	4602      	mov	r2, r0
 8014a64:	b928      	cbnz	r0, 8014a72 <__mdiff+0x2e>
 8014a66:	4b3f      	ldr	r3, [pc, #252]	@ (8014b64 <__mdiff+0x120>)
 8014a68:	f240 2137 	movw	r1, #567	@ 0x237
 8014a6c:	483e      	ldr	r0, [pc, #248]	@ (8014b68 <__mdiff+0x124>)
 8014a6e:	f000 f991 	bl	8014d94 <__assert_func>
 8014a72:	2301      	movs	r3, #1
 8014a74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014a78:	4610      	mov	r0, r2
 8014a7a:	b003      	add	sp, #12
 8014a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a80:	bfbc      	itt	lt
 8014a82:	464b      	movlt	r3, r9
 8014a84:	46a1      	movlt	r9, r4
 8014a86:	4630      	mov	r0, r6
 8014a88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014a8c:	bfba      	itte	lt
 8014a8e:	461c      	movlt	r4, r3
 8014a90:	2501      	movlt	r5, #1
 8014a92:	2500      	movge	r5, #0
 8014a94:	f7ff fd40 	bl	8014518 <_Balloc>
 8014a98:	4602      	mov	r2, r0
 8014a9a:	b918      	cbnz	r0, 8014aa4 <__mdiff+0x60>
 8014a9c:	4b31      	ldr	r3, [pc, #196]	@ (8014b64 <__mdiff+0x120>)
 8014a9e:	f240 2145 	movw	r1, #581	@ 0x245
 8014aa2:	e7e3      	b.n	8014a6c <__mdiff+0x28>
 8014aa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014aa8:	6926      	ldr	r6, [r4, #16]
 8014aaa:	60c5      	str	r5, [r0, #12]
 8014aac:	f109 0310 	add.w	r3, r9, #16
 8014ab0:	f109 0514 	add.w	r5, r9, #20
 8014ab4:	f104 0e14 	add.w	lr, r4, #20
 8014ab8:	f100 0b14 	add.w	fp, r0, #20
 8014abc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014ac0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014ac4:	9301      	str	r3, [sp, #4]
 8014ac6:	46d9      	mov	r9, fp
 8014ac8:	f04f 0c00 	mov.w	ip, #0
 8014acc:	9b01      	ldr	r3, [sp, #4]
 8014ace:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014ad2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014ad6:	9301      	str	r3, [sp, #4]
 8014ad8:	fa1f f38a 	uxth.w	r3, sl
 8014adc:	4619      	mov	r1, r3
 8014ade:	b283      	uxth	r3, r0
 8014ae0:	1acb      	subs	r3, r1, r3
 8014ae2:	0c00      	lsrs	r0, r0, #16
 8014ae4:	4463      	add	r3, ip
 8014ae6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014aea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014af4:	4576      	cmp	r6, lr
 8014af6:	f849 3b04 	str.w	r3, [r9], #4
 8014afa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014afe:	d8e5      	bhi.n	8014acc <__mdiff+0x88>
 8014b00:	1b33      	subs	r3, r6, r4
 8014b02:	3b15      	subs	r3, #21
 8014b04:	f023 0303 	bic.w	r3, r3, #3
 8014b08:	3415      	adds	r4, #21
 8014b0a:	3304      	adds	r3, #4
 8014b0c:	42a6      	cmp	r6, r4
 8014b0e:	bf38      	it	cc
 8014b10:	2304      	movcc	r3, #4
 8014b12:	441d      	add	r5, r3
 8014b14:	445b      	add	r3, fp
 8014b16:	461e      	mov	r6, r3
 8014b18:	462c      	mov	r4, r5
 8014b1a:	4544      	cmp	r4, r8
 8014b1c:	d30e      	bcc.n	8014b3c <__mdiff+0xf8>
 8014b1e:	f108 0103 	add.w	r1, r8, #3
 8014b22:	1b49      	subs	r1, r1, r5
 8014b24:	f021 0103 	bic.w	r1, r1, #3
 8014b28:	3d03      	subs	r5, #3
 8014b2a:	45a8      	cmp	r8, r5
 8014b2c:	bf38      	it	cc
 8014b2e:	2100      	movcc	r1, #0
 8014b30:	440b      	add	r3, r1
 8014b32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014b36:	b191      	cbz	r1, 8014b5e <__mdiff+0x11a>
 8014b38:	6117      	str	r7, [r2, #16]
 8014b3a:	e79d      	b.n	8014a78 <__mdiff+0x34>
 8014b3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014b40:	46e6      	mov	lr, ip
 8014b42:	0c08      	lsrs	r0, r1, #16
 8014b44:	fa1c fc81 	uxtah	ip, ip, r1
 8014b48:	4471      	add	r1, lr
 8014b4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014b4e:	b289      	uxth	r1, r1
 8014b50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014b54:	f846 1b04 	str.w	r1, [r6], #4
 8014b58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b5c:	e7dd      	b.n	8014b1a <__mdiff+0xd6>
 8014b5e:	3f01      	subs	r7, #1
 8014b60:	e7e7      	b.n	8014b32 <__mdiff+0xee>
 8014b62:	bf00      	nop
 8014b64:	080155e4 	.word	0x080155e4
 8014b68:	080155f5 	.word	0x080155f5

08014b6c <__d2b>:
 8014b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014b70:	460f      	mov	r7, r1
 8014b72:	2101      	movs	r1, #1
 8014b74:	ec59 8b10 	vmov	r8, r9, d0
 8014b78:	4616      	mov	r6, r2
 8014b7a:	f7ff fccd 	bl	8014518 <_Balloc>
 8014b7e:	4604      	mov	r4, r0
 8014b80:	b930      	cbnz	r0, 8014b90 <__d2b+0x24>
 8014b82:	4602      	mov	r2, r0
 8014b84:	4b23      	ldr	r3, [pc, #140]	@ (8014c14 <__d2b+0xa8>)
 8014b86:	4824      	ldr	r0, [pc, #144]	@ (8014c18 <__d2b+0xac>)
 8014b88:	f240 310f 	movw	r1, #783	@ 0x30f
 8014b8c:	f000 f902 	bl	8014d94 <__assert_func>
 8014b90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014b94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014b98:	b10d      	cbz	r5, 8014b9e <__d2b+0x32>
 8014b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014b9e:	9301      	str	r3, [sp, #4]
 8014ba0:	f1b8 0300 	subs.w	r3, r8, #0
 8014ba4:	d023      	beq.n	8014bee <__d2b+0x82>
 8014ba6:	4668      	mov	r0, sp
 8014ba8:	9300      	str	r3, [sp, #0]
 8014baa:	f7ff fd7c 	bl	80146a6 <__lo0bits>
 8014bae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014bb2:	b1d0      	cbz	r0, 8014bea <__d2b+0x7e>
 8014bb4:	f1c0 0320 	rsb	r3, r0, #32
 8014bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8014bbc:	430b      	orrs	r3, r1
 8014bbe:	40c2      	lsrs	r2, r0
 8014bc0:	6163      	str	r3, [r4, #20]
 8014bc2:	9201      	str	r2, [sp, #4]
 8014bc4:	9b01      	ldr	r3, [sp, #4]
 8014bc6:	61a3      	str	r3, [r4, #24]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	bf0c      	ite	eq
 8014bcc:	2201      	moveq	r2, #1
 8014bce:	2202      	movne	r2, #2
 8014bd0:	6122      	str	r2, [r4, #16]
 8014bd2:	b1a5      	cbz	r5, 8014bfe <__d2b+0x92>
 8014bd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014bd8:	4405      	add	r5, r0
 8014bda:	603d      	str	r5, [r7, #0]
 8014bdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014be0:	6030      	str	r0, [r6, #0]
 8014be2:	4620      	mov	r0, r4
 8014be4:	b003      	add	sp, #12
 8014be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bea:	6161      	str	r1, [r4, #20]
 8014bec:	e7ea      	b.n	8014bc4 <__d2b+0x58>
 8014bee:	a801      	add	r0, sp, #4
 8014bf0:	f7ff fd59 	bl	80146a6 <__lo0bits>
 8014bf4:	9b01      	ldr	r3, [sp, #4]
 8014bf6:	6163      	str	r3, [r4, #20]
 8014bf8:	3020      	adds	r0, #32
 8014bfa:	2201      	movs	r2, #1
 8014bfc:	e7e8      	b.n	8014bd0 <__d2b+0x64>
 8014bfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014c06:	6038      	str	r0, [r7, #0]
 8014c08:	6918      	ldr	r0, [r3, #16]
 8014c0a:	f7ff fd2d 	bl	8014668 <__hi0bits>
 8014c0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014c12:	e7e5      	b.n	8014be0 <__d2b+0x74>
 8014c14:	080155e4 	.word	0x080155e4
 8014c18:	080155f5 	.word	0x080155f5

08014c1c <__sflush_r>:
 8014c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c24:	0716      	lsls	r6, r2, #28
 8014c26:	4605      	mov	r5, r0
 8014c28:	460c      	mov	r4, r1
 8014c2a:	d454      	bmi.n	8014cd6 <__sflush_r+0xba>
 8014c2c:	684b      	ldr	r3, [r1, #4]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	dc02      	bgt.n	8014c38 <__sflush_r+0x1c>
 8014c32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	dd48      	ble.n	8014cca <__sflush_r+0xae>
 8014c38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c3a:	2e00      	cmp	r6, #0
 8014c3c:	d045      	beq.n	8014cca <__sflush_r+0xae>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014c44:	682f      	ldr	r7, [r5, #0]
 8014c46:	6a21      	ldr	r1, [r4, #32]
 8014c48:	602b      	str	r3, [r5, #0]
 8014c4a:	d030      	beq.n	8014cae <__sflush_r+0x92>
 8014c4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014c4e:	89a3      	ldrh	r3, [r4, #12]
 8014c50:	0759      	lsls	r1, r3, #29
 8014c52:	d505      	bpl.n	8014c60 <__sflush_r+0x44>
 8014c54:	6863      	ldr	r3, [r4, #4]
 8014c56:	1ad2      	subs	r2, r2, r3
 8014c58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014c5a:	b10b      	cbz	r3, 8014c60 <__sflush_r+0x44>
 8014c5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014c5e:	1ad2      	subs	r2, r2, r3
 8014c60:	2300      	movs	r3, #0
 8014c62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c64:	6a21      	ldr	r1, [r4, #32]
 8014c66:	4628      	mov	r0, r5
 8014c68:	47b0      	blx	r6
 8014c6a:	1c43      	adds	r3, r0, #1
 8014c6c:	89a3      	ldrh	r3, [r4, #12]
 8014c6e:	d106      	bne.n	8014c7e <__sflush_r+0x62>
 8014c70:	6829      	ldr	r1, [r5, #0]
 8014c72:	291d      	cmp	r1, #29
 8014c74:	d82b      	bhi.n	8014cce <__sflush_r+0xb2>
 8014c76:	4a2a      	ldr	r2, [pc, #168]	@ (8014d20 <__sflush_r+0x104>)
 8014c78:	410a      	asrs	r2, r1
 8014c7a:	07d6      	lsls	r6, r2, #31
 8014c7c:	d427      	bmi.n	8014cce <__sflush_r+0xb2>
 8014c7e:	2200      	movs	r2, #0
 8014c80:	6062      	str	r2, [r4, #4]
 8014c82:	04d9      	lsls	r1, r3, #19
 8014c84:	6922      	ldr	r2, [r4, #16]
 8014c86:	6022      	str	r2, [r4, #0]
 8014c88:	d504      	bpl.n	8014c94 <__sflush_r+0x78>
 8014c8a:	1c42      	adds	r2, r0, #1
 8014c8c:	d101      	bne.n	8014c92 <__sflush_r+0x76>
 8014c8e:	682b      	ldr	r3, [r5, #0]
 8014c90:	b903      	cbnz	r3, 8014c94 <__sflush_r+0x78>
 8014c92:	6560      	str	r0, [r4, #84]	@ 0x54
 8014c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c96:	602f      	str	r7, [r5, #0]
 8014c98:	b1b9      	cbz	r1, 8014cca <__sflush_r+0xae>
 8014c9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014c9e:	4299      	cmp	r1, r3
 8014ca0:	d002      	beq.n	8014ca8 <__sflush_r+0x8c>
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	f7ff fb38 	bl	8014318 <_free_r>
 8014ca8:	2300      	movs	r3, #0
 8014caa:	6363      	str	r3, [r4, #52]	@ 0x34
 8014cac:	e00d      	b.n	8014cca <__sflush_r+0xae>
 8014cae:	2301      	movs	r3, #1
 8014cb0:	4628      	mov	r0, r5
 8014cb2:	47b0      	blx	r6
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	1c50      	adds	r0, r2, #1
 8014cb8:	d1c9      	bne.n	8014c4e <__sflush_r+0x32>
 8014cba:	682b      	ldr	r3, [r5, #0]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d0c6      	beq.n	8014c4e <__sflush_r+0x32>
 8014cc0:	2b1d      	cmp	r3, #29
 8014cc2:	d001      	beq.n	8014cc8 <__sflush_r+0xac>
 8014cc4:	2b16      	cmp	r3, #22
 8014cc6:	d11e      	bne.n	8014d06 <__sflush_r+0xea>
 8014cc8:	602f      	str	r7, [r5, #0]
 8014cca:	2000      	movs	r0, #0
 8014ccc:	e022      	b.n	8014d14 <__sflush_r+0xf8>
 8014cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cd2:	b21b      	sxth	r3, r3
 8014cd4:	e01b      	b.n	8014d0e <__sflush_r+0xf2>
 8014cd6:	690f      	ldr	r7, [r1, #16]
 8014cd8:	2f00      	cmp	r7, #0
 8014cda:	d0f6      	beq.n	8014cca <__sflush_r+0xae>
 8014cdc:	0793      	lsls	r3, r2, #30
 8014cde:	680e      	ldr	r6, [r1, #0]
 8014ce0:	bf08      	it	eq
 8014ce2:	694b      	ldreq	r3, [r1, #20]
 8014ce4:	600f      	str	r7, [r1, #0]
 8014ce6:	bf18      	it	ne
 8014ce8:	2300      	movne	r3, #0
 8014cea:	eba6 0807 	sub.w	r8, r6, r7
 8014cee:	608b      	str	r3, [r1, #8]
 8014cf0:	f1b8 0f00 	cmp.w	r8, #0
 8014cf4:	dde9      	ble.n	8014cca <__sflush_r+0xae>
 8014cf6:	6a21      	ldr	r1, [r4, #32]
 8014cf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014cfa:	4643      	mov	r3, r8
 8014cfc:	463a      	mov	r2, r7
 8014cfe:	4628      	mov	r0, r5
 8014d00:	47b0      	blx	r6
 8014d02:	2800      	cmp	r0, #0
 8014d04:	dc08      	bgt.n	8014d18 <__sflush_r+0xfc>
 8014d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d0e:	81a3      	strh	r3, [r4, #12]
 8014d10:	f04f 30ff 	mov.w	r0, #4294967295
 8014d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d18:	4407      	add	r7, r0
 8014d1a:	eba8 0800 	sub.w	r8, r8, r0
 8014d1e:	e7e7      	b.n	8014cf0 <__sflush_r+0xd4>
 8014d20:	dfbffffe 	.word	0xdfbffffe

08014d24 <_fflush_r>:
 8014d24:	b538      	push	{r3, r4, r5, lr}
 8014d26:	690b      	ldr	r3, [r1, #16]
 8014d28:	4605      	mov	r5, r0
 8014d2a:	460c      	mov	r4, r1
 8014d2c:	b913      	cbnz	r3, 8014d34 <_fflush_r+0x10>
 8014d2e:	2500      	movs	r5, #0
 8014d30:	4628      	mov	r0, r5
 8014d32:	bd38      	pop	{r3, r4, r5, pc}
 8014d34:	b118      	cbz	r0, 8014d3e <_fflush_r+0x1a>
 8014d36:	6a03      	ldr	r3, [r0, #32]
 8014d38:	b90b      	cbnz	r3, 8014d3e <_fflush_r+0x1a>
 8014d3a:	f7fe fb99 	bl	8013470 <__sinit>
 8014d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d0f3      	beq.n	8014d2e <_fflush_r+0xa>
 8014d46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014d48:	07d0      	lsls	r0, r2, #31
 8014d4a:	d404      	bmi.n	8014d56 <_fflush_r+0x32>
 8014d4c:	0599      	lsls	r1, r3, #22
 8014d4e:	d402      	bmi.n	8014d56 <_fflush_r+0x32>
 8014d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014d52:	f7fe fc84 	bl	801365e <__retarget_lock_acquire_recursive>
 8014d56:	4628      	mov	r0, r5
 8014d58:	4621      	mov	r1, r4
 8014d5a:	f7ff ff5f 	bl	8014c1c <__sflush_r>
 8014d5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014d60:	07da      	lsls	r2, r3, #31
 8014d62:	4605      	mov	r5, r0
 8014d64:	d4e4      	bmi.n	8014d30 <_fflush_r+0xc>
 8014d66:	89a3      	ldrh	r3, [r4, #12]
 8014d68:	059b      	lsls	r3, r3, #22
 8014d6a:	d4e1      	bmi.n	8014d30 <_fflush_r+0xc>
 8014d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014d6e:	f7fe fc77 	bl	8013660 <__retarget_lock_release_recursive>
 8014d72:	e7dd      	b.n	8014d30 <_fflush_r+0xc>

08014d74 <_sbrk_r>:
 8014d74:	b538      	push	{r3, r4, r5, lr}
 8014d76:	4d06      	ldr	r5, [pc, #24]	@ (8014d90 <_sbrk_r+0x1c>)
 8014d78:	2300      	movs	r3, #0
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	4608      	mov	r0, r1
 8014d7e:	602b      	str	r3, [r5, #0]
 8014d80:	f7ec f8cc 	bl	8000f1c <_sbrk>
 8014d84:	1c43      	adds	r3, r0, #1
 8014d86:	d102      	bne.n	8014d8e <_sbrk_r+0x1a>
 8014d88:	682b      	ldr	r3, [r5, #0]
 8014d8a:	b103      	cbz	r3, 8014d8e <_sbrk_r+0x1a>
 8014d8c:	6023      	str	r3, [r4, #0]
 8014d8e:	bd38      	pop	{r3, r4, r5, pc}
 8014d90:	20006944 	.word	0x20006944

08014d94 <__assert_func>:
 8014d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d96:	4614      	mov	r4, r2
 8014d98:	461a      	mov	r2, r3
 8014d9a:	4b09      	ldr	r3, [pc, #36]	@ (8014dc0 <__assert_func+0x2c>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	4605      	mov	r5, r0
 8014da0:	68d8      	ldr	r0, [r3, #12]
 8014da2:	b954      	cbnz	r4, 8014dba <__assert_func+0x26>
 8014da4:	4b07      	ldr	r3, [pc, #28]	@ (8014dc4 <__assert_func+0x30>)
 8014da6:	461c      	mov	r4, r3
 8014da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014dac:	9100      	str	r1, [sp, #0]
 8014dae:	462b      	mov	r3, r5
 8014db0:	4905      	ldr	r1, [pc, #20]	@ (8014dc8 <__assert_func+0x34>)
 8014db2:	f000 f841 	bl	8014e38 <fiprintf>
 8014db6:	f000 f851 	bl	8014e5c <abort>
 8014dba:	4b04      	ldr	r3, [pc, #16]	@ (8014dcc <__assert_func+0x38>)
 8014dbc:	e7f4      	b.n	8014da8 <__assert_func+0x14>
 8014dbe:	bf00      	nop
 8014dc0:	20000310 	.word	0x20000310
 8014dc4:	08015795 	.word	0x08015795
 8014dc8:	08015767 	.word	0x08015767
 8014dcc:	0801575a 	.word	0x0801575a

08014dd0 <_calloc_r>:
 8014dd0:	b570      	push	{r4, r5, r6, lr}
 8014dd2:	fba1 5402 	umull	r5, r4, r1, r2
 8014dd6:	b93c      	cbnz	r4, 8014de8 <_calloc_r+0x18>
 8014dd8:	4629      	mov	r1, r5
 8014dda:	f7ff fb11 	bl	8014400 <_malloc_r>
 8014dde:	4606      	mov	r6, r0
 8014de0:	b928      	cbnz	r0, 8014dee <_calloc_r+0x1e>
 8014de2:	2600      	movs	r6, #0
 8014de4:	4630      	mov	r0, r6
 8014de6:	bd70      	pop	{r4, r5, r6, pc}
 8014de8:	220c      	movs	r2, #12
 8014dea:	6002      	str	r2, [r0, #0]
 8014dec:	e7f9      	b.n	8014de2 <_calloc_r+0x12>
 8014dee:	462a      	mov	r2, r5
 8014df0:	4621      	mov	r1, r4
 8014df2:	f7fe fbb6 	bl	8013562 <memset>
 8014df6:	e7f5      	b.n	8014de4 <_calloc_r+0x14>

08014df8 <__ascii_mbtowc>:
 8014df8:	b082      	sub	sp, #8
 8014dfa:	b901      	cbnz	r1, 8014dfe <__ascii_mbtowc+0x6>
 8014dfc:	a901      	add	r1, sp, #4
 8014dfe:	b142      	cbz	r2, 8014e12 <__ascii_mbtowc+0x1a>
 8014e00:	b14b      	cbz	r3, 8014e16 <__ascii_mbtowc+0x1e>
 8014e02:	7813      	ldrb	r3, [r2, #0]
 8014e04:	600b      	str	r3, [r1, #0]
 8014e06:	7812      	ldrb	r2, [r2, #0]
 8014e08:	1e10      	subs	r0, r2, #0
 8014e0a:	bf18      	it	ne
 8014e0c:	2001      	movne	r0, #1
 8014e0e:	b002      	add	sp, #8
 8014e10:	4770      	bx	lr
 8014e12:	4610      	mov	r0, r2
 8014e14:	e7fb      	b.n	8014e0e <__ascii_mbtowc+0x16>
 8014e16:	f06f 0001 	mvn.w	r0, #1
 8014e1a:	e7f8      	b.n	8014e0e <__ascii_mbtowc+0x16>

08014e1c <__ascii_wctomb>:
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	4608      	mov	r0, r1
 8014e20:	b141      	cbz	r1, 8014e34 <__ascii_wctomb+0x18>
 8014e22:	2aff      	cmp	r2, #255	@ 0xff
 8014e24:	d904      	bls.n	8014e30 <__ascii_wctomb+0x14>
 8014e26:	228a      	movs	r2, #138	@ 0x8a
 8014e28:	601a      	str	r2, [r3, #0]
 8014e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8014e2e:	4770      	bx	lr
 8014e30:	700a      	strb	r2, [r1, #0]
 8014e32:	2001      	movs	r0, #1
 8014e34:	4770      	bx	lr
	...

08014e38 <fiprintf>:
 8014e38:	b40e      	push	{r1, r2, r3}
 8014e3a:	b503      	push	{r0, r1, lr}
 8014e3c:	4601      	mov	r1, r0
 8014e3e:	ab03      	add	r3, sp, #12
 8014e40:	4805      	ldr	r0, [pc, #20]	@ (8014e58 <fiprintf+0x20>)
 8014e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e46:	6800      	ldr	r0, [r0, #0]
 8014e48:	9301      	str	r3, [sp, #4]
 8014e4a:	f000 f837 	bl	8014ebc <_vfiprintf_r>
 8014e4e:	b002      	add	sp, #8
 8014e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e54:	b003      	add	sp, #12
 8014e56:	4770      	bx	lr
 8014e58:	20000310 	.word	0x20000310

08014e5c <abort>:
 8014e5c:	b508      	push	{r3, lr}
 8014e5e:	2006      	movs	r0, #6
 8014e60:	f000 fa00 	bl	8015264 <raise>
 8014e64:	2001      	movs	r0, #1
 8014e66:	f7ec f883 	bl	8000f70 <_exit>

08014e6a <__sfputc_r>:
 8014e6a:	6893      	ldr	r3, [r2, #8]
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	b410      	push	{r4}
 8014e72:	6093      	str	r3, [r2, #8]
 8014e74:	da08      	bge.n	8014e88 <__sfputc_r+0x1e>
 8014e76:	6994      	ldr	r4, [r2, #24]
 8014e78:	42a3      	cmp	r3, r4
 8014e7a:	db01      	blt.n	8014e80 <__sfputc_r+0x16>
 8014e7c:	290a      	cmp	r1, #10
 8014e7e:	d103      	bne.n	8014e88 <__sfputc_r+0x1e>
 8014e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e84:	f000 b932 	b.w	80150ec <__swbuf_r>
 8014e88:	6813      	ldr	r3, [r2, #0]
 8014e8a:	1c58      	adds	r0, r3, #1
 8014e8c:	6010      	str	r0, [r2, #0]
 8014e8e:	7019      	strb	r1, [r3, #0]
 8014e90:	4608      	mov	r0, r1
 8014e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e96:	4770      	bx	lr

08014e98 <__sfputs_r>:
 8014e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e9a:	4606      	mov	r6, r0
 8014e9c:	460f      	mov	r7, r1
 8014e9e:	4614      	mov	r4, r2
 8014ea0:	18d5      	adds	r5, r2, r3
 8014ea2:	42ac      	cmp	r4, r5
 8014ea4:	d101      	bne.n	8014eaa <__sfputs_r+0x12>
 8014ea6:	2000      	movs	r0, #0
 8014ea8:	e007      	b.n	8014eba <__sfputs_r+0x22>
 8014eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014eae:	463a      	mov	r2, r7
 8014eb0:	4630      	mov	r0, r6
 8014eb2:	f7ff ffda 	bl	8014e6a <__sfputc_r>
 8014eb6:	1c43      	adds	r3, r0, #1
 8014eb8:	d1f3      	bne.n	8014ea2 <__sfputs_r+0xa>
 8014eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014ebc <_vfiprintf_r>:
 8014ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec0:	460d      	mov	r5, r1
 8014ec2:	b09d      	sub	sp, #116	@ 0x74
 8014ec4:	4614      	mov	r4, r2
 8014ec6:	4698      	mov	r8, r3
 8014ec8:	4606      	mov	r6, r0
 8014eca:	b118      	cbz	r0, 8014ed4 <_vfiprintf_r+0x18>
 8014ecc:	6a03      	ldr	r3, [r0, #32]
 8014ece:	b90b      	cbnz	r3, 8014ed4 <_vfiprintf_r+0x18>
 8014ed0:	f7fe face 	bl	8013470 <__sinit>
 8014ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ed6:	07d9      	lsls	r1, r3, #31
 8014ed8:	d405      	bmi.n	8014ee6 <_vfiprintf_r+0x2a>
 8014eda:	89ab      	ldrh	r3, [r5, #12]
 8014edc:	059a      	lsls	r2, r3, #22
 8014ede:	d402      	bmi.n	8014ee6 <_vfiprintf_r+0x2a>
 8014ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ee2:	f7fe fbbc 	bl	801365e <__retarget_lock_acquire_recursive>
 8014ee6:	89ab      	ldrh	r3, [r5, #12]
 8014ee8:	071b      	lsls	r3, r3, #28
 8014eea:	d501      	bpl.n	8014ef0 <_vfiprintf_r+0x34>
 8014eec:	692b      	ldr	r3, [r5, #16]
 8014eee:	b99b      	cbnz	r3, 8014f18 <_vfiprintf_r+0x5c>
 8014ef0:	4629      	mov	r1, r5
 8014ef2:	4630      	mov	r0, r6
 8014ef4:	f000 f938 	bl	8015168 <__swsetup_r>
 8014ef8:	b170      	cbz	r0, 8014f18 <_vfiprintf_r+0x5c>
 8014efa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014efc:	07dc      	lsls	r4, r3, #31
 8014efe:	d504      	bpl.n	8014f0a <_vfiprintf_r+0x4e>
 8014f00:	f04f 30ff 	mov.w	r0, #4294967295
 8014f04:	b01d      	add	sp, #116	@ 0x74
 8014f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0a:	89ab      	ldrh	r3, [r5, #12]
 8014f0c:	0598      	lsls	r0, r3, #22
 8014f0e:	d4f7      	bmi.n	8014f00 <_vfiprintf_r+0x44>
 8014f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f12:	f7fe fba5 	bl	8013660 <__retarget_lock_release_recursive>
 8014f16:	e7f3      	b.n	8014f00 <_vfiprintf_r+0x44>
 8014f18:	2300      	movs	r3, #0
 8014f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f1c:	2320      	movs	r3, #32
 8014f1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f26:	2330      	movs	r3, #48	@ 0x30
 8014f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80150d8 <_vfiprintf_r+0x21c>
 8014f2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014f30:	f04f 0901 	mov.w	r9, #1
 8014f34:	4623      	mov	r3, r4
 8014f36:	469a      	mov	sl, r3
 8014f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f3c:	b10a      	cbz	r2, 8014f42 <_vfiprintf_r+0x86>
 8014f3e:	2a25      	cmp	r2, #37	@ 0x25
 8014f40:	d1f9      	bne.n	8014f36 <_vfiprintf_r+0x7a>
 8014f42:	ebba 0b04 	subs.w	fp, sl, r4
 8014f46:	d00b      	beq.n	8014f60 <_vfiprintf_r+0xa4>
 8014f48:	465b      	mov	r3, fp
 8014f4a:	4622      	mov	r2, r4
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	4630      	mov	r0, r6
 8014f50:	f7ff ffa2 	bl	8014e98 <__sfputs_r>
 8014f54:	3001      	adds	r0, #1
 8014f56:	f000 80a7 	beq.w	80150a8 <_vfiprintf_r+0x1ec>
 8014f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f5c:	445a      	add	r2, fp
 8014f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014f60:	f89a 3000 	ldrb.w	r3, [sl]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	f000 809f 	beq.w	80150a8 <_vfiprintf_r+0x1ec>
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8014f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f74:	f10a 0a01 	add.w	sl, sl, #1
 8014f78:	9304      	str	r3, [sp, #16]
 8014f7a:	9307      	str	r3, [sp, #28]
 8014f7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8014f82:	4654      	mov	r4, sl
 8014f84:	2205      	movs	r2, #5
 8014f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f8a:	4853      	ldr	r0, [pc, #332]	@ (80150d8 <_vfiprintf_r+0x21c>)
 8014f8c:	f7eb f938 	bl	8000200 <memchr>
 8014f90:	9a04      	ldr	r2, [sp, #16]
 8014f92:	b9d8      	cbnz	r0, 8014fcc <_vfiprintf_r+0x110>
 8014f94:	06d1      	lsls	r1, r2, #27
 8014f96:	bf44      	itt	mi
 8014f98:	2320      	movmi	r3, #32
 8014f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014f9e:	0713      	lsls	r3, r2, #28
 8014fa0:	bf44      	itt	mi
 8014fa2:	232b      	movmi	r3, #43	@ 0x2b
 8014fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8014fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8014fae:	d015      	beq.n	8014fdc <_vfiprintf_r+0x120>
 8014fb0:	9a07      	ldr	r2, [sp, #28]
 8014fb2:	4654      	mov	r4, sl
 8014fb4:	2000      	movs	r0, #0
 8014fb6:	f04f 0c0a 	mov.w	ip, #10
 8014fba:	4621      	mov	r1, r4
 8014fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fc0:	3b30      	subs	r3, #48	@ 0x30
 8014fc2:	2b09      	cmp	r3, #9
 8014fc4:	d94b      	bls.n	801505e <_vfiprintf_r+0x1a2>
 8014fc6:	b1b0      	cbz	r0, 8014ff6 <_vfiprintf_r+0x13a>
 8014fc8:	9207      	str	r2, [sp, #28]
 8014fca:	e014      	b.n	8014ff6 <_vfiprintf_r+0x13a>
 8014fcc:	eba0 0308 	sub.w	r3, r0, r8
 8014fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8014fd4:	4313      	orrs	r3, r2
 8014fd6:	9304      	str	r3, [sp, #16]
 8014fd8:	46a2      	mov	sl, r4
 8014fda:	e7d2      	b.n	8014f82 <_vfiprintf_r+0xc6>
 8014fdc:	9b03      	ldr	r3, [sp, #12]
 8014fde:	1d19      	adds	r1, r3, #4
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	9103      	str	r1, [sp, #12]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	bfbb      	ittet	lt
 8014fe8:	425b      	neglt	r3, r3
 8014fea:	f042 0202 	orrlt.w	r2, r2, #2
 8014fee:	9307      	strge	r3, [sp, #28]
 8014ff0:	9307      	strlt	r3, [sp, #28]
 8014ff2:	bfb8      	it	lt
 8014ff4:	9204      	strlt	r2, [sp, #16]
 8014ff6:	7823      	ldrb	r3, [r4, #0]
 8014ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8014ffa:	d10a      	bne.n	8015012 <_vfiprintf_r+0x156>
 8014ffc:	7863      	ldrb	r3, [r4, #1]
 8014ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8015000:	d132      	bne.n	8015068 <_vfiprintf_r+0x1ac>
 8015002:	9b03      	ldr	r3, [sp, #12]
 8015004:	1d1a      	adds	r2, r3, #4
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	9203      	str	r2, [sp, #12]
 801500a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801500e:	3402      	adds	r4, #2
 8015010:	9305      	str	r3, [sp, #20]
 8015012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80150e8 <_vfiprintf_r+0x22c>
 8015016:	7821      	ldrb	r1, [r4, #0]
 8015018:	2203      	movs	r2, #3
 801501a:	4650      	mov	r0, sl
 801501c:	f7eb f8f0 	bl	8000200 <memchr>
 8015020:	b138      	cbz	r0, 8015032 <_vfiprintf_r+0x176>
 8015022:	9b04      	ldr	r3, [sp, #16]
 8015024:	eba0 000a 	sub.w	r0, r0, sl
 8015028:	2240      	movs	r2, #64	@ 0x40
 801502a:	4082      	lsls	r2, r0
 801502c:	4313      	orrs	r3, r2
 801502e:	3401      	adds	r4, #1
 8015030:	9304      	str	r3, [sp, #16]
 8015032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015036:	4829      	ldr	r0, [pc, #164]	@ (80150dc <_vfiprintf_r+0x220>)
 8015038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801503c:	2206      	movs	r2, #6
 801503e:	f7eb f8df 	bl	8000200 <memchr>
 8015042:	2800      	cmp	r0, #0
 8015044:	d03f      	beq.n	80150c6 <_vfiprintf_r+0x20a>
 8015046:	4b26      	ldr	r3, [pc, #152]	@ (80150e0 <_vfiprintf_r+0x224>)
 8015048:	bb1b      	cbnz	r3, 8015092 <_vfiprintf_r+0x1d6>
 801504a:	9b03      	ldr	r3, [sp, #12]
 801504c:	3307      	adds	r3, #7
 801504e:	f023 0307 	bic.w	r3, r3, #7
 8015052:	3308      	adds	r3, #8
 8015054:	9303      	str	r3, [sp, #12]
 8015056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015058:	443b      	add	r3, r7
 801505a:	9309      	str	r3, [sp, #36]	@ 0x24
 801505c:	e76a      	b.n	8014f34 <_vfiprintf_r+0x78>
 801505e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015062:	460c      	mov	r4, r1
 8015064:	2001      	movs	r0, #1
 8015066:	e7a8      	b.n	8014fba <_vfiprintf_r+0xfe>
 8015068:	2300      	movs	r3, #0
 801506a:	3401      	adds	r4, #1
 801506c:	9305      	str	r3, [sp, #20]
 801506e:	4619      	mov	r1, r3
 8015070:	f04f 0c0a 	mov.w	ip, #10
 8015074:	4620      	mov	r0, r4
 8015076:	f810 2b01 	ldrb.w	r2, [r0], #1
 801507a:	3a30      	subs	r2, #48	@ 0x30
 801507c:	2a09      	cmp	r2, #9
 801507e:	d903      	bls.n	8015088 <_vfiprintf_r+0x1cc>
 8015080:	2b00      	cmp	r3, #0
 8015082:	d0c6      	beq.n	8015012 <_vfiprintf_r+0x156>
 8015084:	9105      	str	r1, [sp, #20]
 8015086:	e7c4      	b.n	8015012 <_vfiprintf_r+0x156>
 8015088:	fb0c 2101 	mla	r1, ip, r1, r2
 801508c:	4604      	mov	r4, r0
 801508e:	2301      	movs	r3, #1
 8015090:	e7f0      	b.n	8015074 <_vfiprintf_r+0x1b8>
 8015092:	ab03      	add	r3, sp, #12
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	462a      	mov	r2, r5
 8015098:	4b12      	ldr	r3, [pc, #72]	@ (80150e4 <_vfiprintf_r+0x228>)
 801509a:	a904      	add	r1, sp, #16
 801509c:	4630      	mov	r0, r6
 801509e:	f7fd fda3 	bl	8012be8 <_printf_float>
 80150a2:	4607      	mov	r7, r0
 80150a4:	1c78      	adds	r0, r7, #1
 80150a6:	d1d6      	bne.n	8015056 <_vfiprintf_r+0x19a>
 80150a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80150aa:	07d9      	lsls	r1, r3, #31
 80150ac:	d405      	bmi.n	80150ba <_vfiprintf_r+0x1fe>
 80150ae:	89ab      	ldrh	r3, [r5, #12]
 80150b0:	059a      	lsls	r2, r3, #22
 80150b2:	d402      	bmi.n	80150ba <_vfiprintf_r+0x1fe>
 80150b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80150b6:	f7fe fad3 	bl	8013660 <__retarget_lock_release_recursive>
 80150ba:	89ab      	ldrh	r3, [r5, #12]
 80150bc:	065b      	lsls	r3, r3, #25
 80150be:	f53f af1f 	bmi.w	8014f00 <_vfiprintf_r+0x44>
 80150c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80150c4:	e71e      	b.n	8014f04 <_vfiprintf_r+0x48>
 80150c6:	ab03      	add	r3, sp, #12
 80150c8:	9300      	str	r3, [sp, #0]
 80150ca:	462a      	mov	r2, r5
 80150cc:	4b05      	ldr	r3, [pc, #20]	@ (80150e4 <_vfiprintf_r+0x228>)
 80150ce:	a904      	add	r1, sp, #16
 80150d0:	4630      	mov	r0, r6
 80150d2:	f7fe f821 	bl	8013118 <_printf_i>
 80150d6:	e7e4      	b.n	80150a2 <_vfiprintf_r+0x1e6>
 80150d8:	08015897 	.word	0x08015897
 80150dc:	080158a1 	.word	0x080158a1
 80150e0:	08012be9 	.word	0x08012be9
 80150e4:	08014e99 	.word	0x08014e99
 80150e8:	0801589d 	.word	0x0801589d

080150ec <__swbuf_r>:
 80150ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ee:	460e      	mov	r6, r1
 80150f0:	4614      	mov	r4, r2
 80150f2:	4605      	mov	r5, r0
 80150f4:	b118      	cbz	r0, 80150fe <__swbuf_r+0x12>
 80150f6:	6a03      	ldr	r3, [r0, #32]
 80150f8:	b90b      	cbnz	r3, 80150fe <__swbuf_r+0x12>
 80150fa:	f7fe f9b9 	bl	8013470 <__sinit>
 80150fe:	69a3      	ldr	r3, [r4, #24]
 8015100:	60a3      	str	r3, [r4, #8]
 8015102:	89a3      	ldrh	r3, [r4, #12]
 8015104:	071a      	lsls	r2, r3, #28
 8015106:	d501      	bpl.n	801510c <__swbuf_r+0x20>
 8015108:	6923      	ldr	r3, [r4, #16]
 801510a:	b943      	cbnz	r3, 801511e <__swbuf_r+0x32>
 801510c:	4621      	mov	r1, r4
 801510e:	4628      	mov	r0, r5
 8015110:	f000 f82a 	bl	8015168 <__swsetup_r>
 8015114:	b118      	cbz	r0, 801511e <__swbuf_r+0x32>
 8015116:	f04f 37ff 	mov.w	r7, #4294967295
 801511a:	4638      	mov	r0, r7
 801511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801511e:	6823      	ldr	r3, [r4, #0]
 8015120:	6922      	ldr	r2, [r4, #16]
 8015122:	1a98      	subs	r0, r3, r2
 8015124:	6963      	ldr	r3, [r4, #20]
 8015126:	b2f6      	uxtb	r6, r6
 8015128:	4283      	cmp	r3, r0
 801512a:	4637      	mov	r7, r6
 801512c:	dc05      	bgt.n	801513a <__swbuf_r+0x4e>
 801512e:	4621      	mov	r1, r4
 8015130:	4628      	mov	r0, r5
 8015132:	f7ff fdf7 	bl	8014d24 <_fflush_r>
 8015136:	2800      	cmp	r0, #0
 8015138:	d1ed      	bne.n	8015116 <__swbuf_r+0x2a>
 801513a:	68a3      	ldr	r3, [r4, #8]
 801513c:	3b01      	subs	r3, #1
 801513e:	60a3      	str	r3, [r4, #8]
 8015140:	6823      	ldr	r3, [r4, #0]
 8015142:	1c5a      	adds	r2, r3, #1
 8015144:	6022      	str	r2, [r4, #0]
 8015146:	701e      	strb	r6, [r3, #0]
 8015148:	6962      	ldr	r2, [r4, #20]
 801514a:	1c43      	adds	r3, r0, #1
 801514c:	429a      	cmp	r2, r3
 801514e:	d004      	beq.n	801515a <__swbuf_r+0x6e>
 8015150:	89a3      	ldrh	r3, [r4, #12]
 8015152:	07db      	lsls	r3, r3, #31
 8015154:	d5e1      	bpl.n	801511a <__swbuf_r+0x2e>
 8015156:	2e0a      	cmp	r6, #10
 8015158:	d1df      	bne.n	801511a <__swbuf_r+0x2e>
 801515a:	4621      	mov	r1, r4
 801515c:	4628      	mov	r0, r5
 801515e:	f7ff fde1 	bl	8014d24 <_fflush_r>
 8015162:	2800      	cmp	r0, #0
 8015164:	d0d9      	beq.n	801511a <__swbuf_r+0x2e>
 8015166:	e7d6      	b.n	8015116 <__swbuf_r+0x2a>

08015168 <__swsetup_r>:
 8015168:	b538      	push	{r3, r4, r5, lr}
 801516a:	4b29      	ldr	r3, [pc, #164]	@ (8015210 <__swsetup_r+0xa8>)
 801516c:	4605      	mov	r5, r0
 801516e:	6818      	ldr	r0, [r3, #0]
 8015170:	460c      	mov	r4, r1
 8015172:	b118      	cbz	r0, 801517c <__swsetup_r+0x14>
 8015174:	6a03      	ldr	r3, [r0, #32]
 8015176:	b90b      	cbnz	r3, 801517c <__swsetup_r+0x14>
 8015178:	f7fe f97a 	bl	8013470 <__sinit>
 801517c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015180:	0719      	lsls	r1, r3, #28
 8015182:	d422      	bmi.n	80151ca <__swsetup_r+0x62>
 8015184:	06da      	lsls	r2, r3, #27
 8015186:	d407      	bmi.n	8015198 <__swsetup_r+0x30>
 8015188:	2209      	movs	r2, #9
 801518a:	602a      	str	r2, [r5, #0]
 801518c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015190:	81a3      	strh	r3, [r4, #12]
 8015192:	f04f 30ff 	mov.w	r0, #4294967295
 8015196:	e033      	b.n	8015200 <__swsetup_r+0x98>
 8015198:	0758      	lsls	r0, r3, #29
 801519a:	d512      	bpl.n	80151c2 <__swsetup_r+0x5a>
 801519c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801519e:	b141      	cbz	r1, 80151b2 <__swsetup_r+0x4a>
 80151a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80151a4:	4299      	cmp	r1, r3
 80151a6:	d002      	beq.n	80151ae <__swsetup_r+0x46>
 80151a8:	4628      	mov	r0, r5
 80151aa:	f7ff f8b5 	bl	8014318 <_free_r>
 80151ae:	2300      	movs	r3, #0
 80151b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80151b2:	89a3      	ldrh	r3, [r4, #12]
 80151b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80151b8:	81a3      	strh	r3, [r4, #12]
 80151ba:	2300      	movs	r3, #0
 80151bc:	6063      	str	r3, [r4, #4]
 80151be:	6923      	ldr	r3, [r4, #16]
 80151c0:	6023      	str	r3, [r4, #0]
 80151c2:	89a3      	ldrh	r3, [r4, #12]
 80151c4:	f043 0308 	orr.w	r3, r3, #8
 80151c8:	81a3      	strh	r3, [r4, #12]
 80151ca:	6923      	ldr	r3, [r4, #16]
 80151cc:	b94b      	cbnz	r3, 80151e2 <__swsetup_r+0x7a>
 80151ce:	89a3      	ldrh	r3, [r4, #12]
 80151d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80151d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80151d8:	d003      	beq.n	80151e2 <__swsetup_r+0x7a>
 80151da:	4621      	mov	r1, r4
 80151dc:	4628      	mov	r0, r5
 80151de:	f000 f883 	bl	80152e8 <__smakebuf_r>
 80151e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151e6:	f013 0201 	ands.w	r2, r3, #1
 80151ea:	d00a      	beq.n	8015202 <__swsetup_r+0x9a>
 80151ec:	2200      	movs	r2, #0
 80151ee:	60a2      	str	r2, [r4, #8]
 80151f0:	6962      	ldr	r2, [r4, #20]
 80151f2:	4252      	negs	r2, r2
 80151f4:	61a2      	str	r2, [r4, #24]
 80151f6:	6922      	ldr	r2, [r4, #16]
 80151f8:	b942      	cbnz	r2, 801520c <__swsetup_r+0xa4>
 80151fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80151fe:	d1c5      	bne.n	801518c <__swsetup_r+0x24>
 8015200:	bd38      	pop	{r3, r4, r5, pc}
 8015202:	0799      	lsls	r1, r3, #30
 8015204:	bf58      	it	pl
 8015206:	6962      	ldrpl	r2, [r4, #20]
 8015208:	60a2      	str	r2, [r4, #8]
 801520a:	e7f4      	b.n	80151f6 <__swsetup_r+0x8e>
 801520c:	2000      	movs	r0, #0
 801520e:	e7f7      	b.n	8015200 <__swsetup_r+0x98>
 8015210:	20000310 	.word	0x20000310

08015214 <_raise_r>:
 8015214:	291f      	cmp	r1, #31
 8015216:	b538      	push	{r3, r4, r5, lr}
 8015218:	4605      	mov	r5, r0
 801521a:	460c      	mov	r4, r1
 801521c:	d904      	bls.n	8015228 <_raise_r+0x14>
 801521e:	2316      	movs	r3, #22
 8015220:	6003      	str	r3, [r0, #0]
 8015222:	f04f 30ff 	mov.w	r0, #4294967295
 8015226:	bd38      	pop	{r3, r4, r5, pc}
 8015228:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801522a:	b112      	cbz	r2, 8015232 <_raise_r+0x1e>
 801522c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015230:	b94b      	cbnz	r3, 8015246 <_raise_r+0x32>
 8015232:	4628      	mov	r0, r5
 8015234:	f000 f830 	bl	8015298 <_getpid_r>
 8015238:	4622      	mov	r2, r4
 801523a:	4601      	mov	r1, r0
 801523c:	4628      	mov	r0, r5
 801523e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015242:	f000 b817 	b.w	8015274 <_kill_r>
 8015246:	2b01      	cmp	r3, #1
 8015248:	d00a      	beq.n	8015260 <_raise_r+0x4c>
 801524a:	1c59      	adds	r1, r3, #1
 801524c:	d103      	bne.n	8015256 <_raise_r+0x42>
 801524e:	2316      	movs	r3, #22
 8015250:	6003      	str	r3, [r0, #0]
 8015252:	2001      	movs	r0, #1
 8015254:	e7e7      	b.n	8015226 <_raise_r+0x12>
 8015256:	2100      	movs	r1, #0
 8015258:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801525c:	4620      	mov	r0, r4
 801525e:	4798      	blx	r3
 8015260:	2000      	movs	r0, #0
 8015262:	e7e0      	b.n	8015226 <_raise_r+0x12>

08015264 <raise>:
 8015264:	4b02      	ldr	r3, [pc, #8]	@ (8015270 <raise+0xc>)
 8015266:	4601      	mov	r1, r0
 8015268:	6818      	ldr	r0, [r3, #0]
 801526a:	f7ff bfd3 	b.w	8015214 <_raise_r>
 801526e:	bf00      	nop
 8015270:	20000310 	.word	0x20000310

08015274 <_kill_r>:
 8015274:	b538      	push	{r3, r4, r5, lr}
 8015276:	4d07      	ldr	r5, [pc, #28]	@ (8015294 <_kill_r+0x20>)
 8015278:	2300      	movs	r3, #0
 801527a:	4604      	mov	r4, r0
 801527c:	4608      	mov	r0, r1
 801527e:	4611      	mov	r1, r2
 8015280:	602b      	str	r3, [r5, #0]
 8015282:	f7eb fe6d 	bl	8000f60 <_kill>
 8015286:	1c43      	adds	r3, r0, #1
 8015288:	d102      	bne.n	8015290 <_kill_r+0x1c>
 801528a:	682b      	ldr	r3, [r5, #0]
 801528c:	b103      	cbz	r3, 8015290 <_kill_r+0x1c>
 801528e:	6023      	str	r3, [r4, #0]
 8015290:	bd38      	pop	{r3, r4, r5, pc}
 8015292:	bf00      	nop
 8015294:	20006944 	.word	0x20006944

08015298 <_getpid_r>:
 8015298:	f7eb be60 	b.w	8000f5c <_getpid>

0801529c <__swhatbuf_r>:
 801529c:	b570      	push	{r4, r5, r6, lr}
 801529e:	460c      	mov	r4, r1
 80152a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152a4:	2900      	cmp	r1, #0
 80152a6:	b096      	sub	sp, #88	@ 0x58
 80152a8:	4615      	mov	r5, r2
 80152aa:	461e      	mov	r6, r3
 80152ac:	da0d      	bge.n	80152ca <__swhatbuf_r+0x2e>
 80152ae:	89a3      	ldrh	r3, [r4, #12]
 80152b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80152b4:	f04f 0100 	mov.w	r1, #0
 80152b8:	bf14      	ite	ne
 80152ba:	2340      	movne	r3, #64	@ 0x40
 80152bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80152c0:	2000      	movs	r0, #0
 80152c2:	6031      	str	r1, [r6, #0]
 80152c4:	602b      	str	r3, [r5, #0]
 80152c6:	b016      	add	sp, #88	@ 0x58
 80152c8:	bd70      	pop	{r4, r5, r6, pc}
 80152ca:	466a      	mov	r2, sp
 80152cc:	f000 f848 	bl	8015360 <_fstat_r>
 80152d0:	2800      	cmp	r0, #0
 80152d2:	dbec      	blt.n	80152ae <__swhatbuf_r+0x12>
 80152d4:	9901      	ldr	r1, [sp, #4]
 80152d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80152da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80152de:	4259      	negs	r1, r3
 80152e0:	4159      	adcs	r1, r3
 80152e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80152e6:	e7eb      	b.n	80152c0 <__swhatbuf_r+0x24>

080152e8 <__smakebuf_r>:
 80152e8:	898b      	ldrh	r3, [r1, #12]
 80152ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80152ec:	079d      	lsls	r5, r3, #30
 80152ee:	4606      	mov	r6, r0
 80152f0:	460c      	mov	r4, r1
 80152f2:	d507      	bpl.n	8015304 <__smakebuf_r+0x1c>
 80152f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80152f8:	6023      	str	r3, [r4, #0]
 80152fa:	6123      	str	r3, [r4, #16]
 80152fc:	2301      	movs	r3, #1
 80152fe:	6163      	str	r3, [r4, #20]
 8015300:	b003      	add	sp, #12
 8015302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015304:	ab01      	add	r3, sp, #4
 8015306:	466a      	mov	r2, sp
 8015308:	f7ff ffc8 	bl	801529c <__swhatbuf_r>
 801530c:	9f00      	ldr	r7, [sp, #0]
 801530e:	4605      	mov	r5, r0
 8015310:	4639      	mov	r1, r7
 8015312:	4630      	mov	r0, r6
 8015314:	f7ff f874 	bl	8014400 <_malloc_r>
 8015318:	b948      	cbnz	r0, 801532e <__smakebuf_r+0x46>
 801531a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801531e:	059a      	lsls	r2, r3, #22
 8015320:	d4ee      	bmi.n	8015300 <__smakebuf_r+0x18>
 8015322:	f023 0303 	bic.w	r3, r3, #3
 8015326:	f043 0302 	orr.w	r3, r3, #2
 801532a:	81a3      	strh	r3, [r4, #12]
 801532c:	e7e2      	b.n	80152f4 <__smakebuf_r+0xc>
 801532e:	89a3      	ldrh	r3, [r4, #12]
 8015330:	6020      	str	r0, [r4, #0]
 8015332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015336:	81a3      	strh	r3, [r4, #12]
 8015338:	9b01      	ldr	r3, [sp, #4]
 801533a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801533e:	b15b      	cbz	r3, 8015358 <__smakebuf_r+0x70>
 8015340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015344:	4630      	mov	r0, r6
 8015346:	f000 f81d 	bl	8015384 <_isatty_r>
 801534a:	b128      	cbz	r0, 8015358 <__smakebuf_r+0x70>
 801534c:	89a3      	ldrh	r3, [r4, #12]
 801534e:	f023 0303 	bic.w	r3, r3, #3
 8015352:	f043 0301 	orr.w	r3, r3, #1
 8015356:	81a3      	strh	r3, [r4, #12]
 8015358:	89a3      	ldrh	r3, [r4, #12]
 801535a:	431d      	orrs	r5, r3
 801535c:	81a5      	strh	r5, [r4, #12]
 801535e:	e7cf      	b.n	8015300 <__smakebuf_r+0x18>

08015360 <_fstat_r>:
 8015360:	b538      	push	{r3, r4, r5, lr}
 8015362:	4d07      	ldr	r5, [pc, #28]	@ (8015380 <_fstat_r+0x20>)
 8015364:	2300      	movs	r3, #0
 8015366:	4604      	mov	r4, r0
 8015368:	4608      	mov	r0, r1
 801536a:	4611      	mov	r1, r2
 801536c:	602b      	str	r3, [r5, #0]
 801536e:	f7eb fe17 	bl	8000fa0 <_fstat>
 8015372:	1c43      	adds	r3, r0, #1
 8015374:	d102      	bne.n	801537c <_fstat_r+0x1c>
 8015376:	682b      	ldr	r3, [r5, #0]
 8015378:	b103      	cbz	r3, 801537c <_fstat_r+0x1c>
 801537a:	6023      	str	r3, [r4, #0]
 801537c:	bd38      	pop	{r3, r4, r5, pc}
 801537e:	bf00      	nop
 8015380:	20006944 	.word	0x20006944

08015384 <_isatty_r>:
 8015384:	b538      	push	{r3, r4, r5, lr}
 8015386:	4d06      	ldr	r5, [pc, #24]	@ (80153a0 <_isatty_r+0x1c>)
 8015388:	2300      	movs	r3, #0
 801538a:	4604      	mov	r4, r0
 801538c:	4608      	mov	r0, r1
 801538e:	602b      	str	r3, [r5, #0]
 8015390:	f7eb fe0c 	bl	8000fac <_isatty>
 8015394:	1c43      	adds	r3, r0, #1
 8015396:	d102      	bne.n	801539e <_isatty_r+0x1a>
 8015398:	682b      	ldr	r3, [r5, #0]
 801539a:	b103      	cbz	r3, 801539e <_isatty_r+0x1a>
 801539c:	6023      	str	r3, [r4, #0]
 801539e:	bd38      	pop	{r3, r4, r5, pc}
 80153a0:	20006944 	.word	0x20006944

080153a4 <_init>:
 80153a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153a6:	bf00      	nop
 80153a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153aa:	bc08      	pop	{r3}
 80153ac:	469e      	mov	lr, r3
 80153ae:	4770      	bx	lr

080153b0 <_fini>:
 80153b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153b2:	bf00      	nop
 80153b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153b6:	bc08      	pop	{r3}
 80153b8:	469e      	mov	lr, r3
 80153ba:	4770      	bx	lr
 80153bc:	0000      	movs	r0, r0
	...
